// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SensorFullDataModeEnum {
  final int value;
  const SensorFullDataModeEnum._(this.value);

  factory SensorFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SensorFullDataModeEnum');
    }
    return result;
  }

  static SensorFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SensorFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SensorFullDataModeEnum REAL = SensorFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SensorFullDataModeEnum TEST = SensorFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SensorFullDataModeEnum SIMULATED = SensorFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SensorFullDataModeEnum EXERCISE = SensorFullDataModeEnum._(3);
  static const Map<int, SensorFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SensorFullDataModeEnum> reader = _SensorFullDataModeEnumReader();

  @override
  String toString() {
    return 'SensorFullDataModeEnum{value: $value}';
  }
}

class _SensorFullDataModeEnumReader extends fb.Reader<SensorFullDataModeEnum> {
  const _SensorFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SensorFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      SensorFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of observation data for electro-optical based sensor phenomenologies.
class SensorFull {
  SensorFull._(this._bc, this._bcOffset);
  factory SensorFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SensorFull> reader = _SensorFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Unique name of this sensor.
  ///  Example: /// Example: SENSOR_NAME
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get sensorName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
  ///  Example: /// Example: 1234
  ///  Constraints: No constraints specified.
  int get sensorNumber => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Optional short name for the sensor.
  ///  Example: /// Example: SNR-1
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get shortName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Optional dissemination control required for accessing data (e.g observations) produced by this sensor. This is typically a proprietary data owner control for commercial sensors.
  ///  Example: /// Example: observations
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get dataControl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Optional US Air Force identifier for the sensor/ASR site, typically for air surveillance radar (ASR) sensors.
  ///  Example: /// Example: AF-ID
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get afId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The sensor type at the site. Optional field, intended primarily for ASRs.
  ///  Example: /// Example: SENSOR_TYPE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get asrType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Source of the data.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SensorFullDataModeEnum get dataMode => SensorFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 26, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Optional flag indicating if the sensor is active.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get active => const fb.BoolReader().vTableGet(_bc, _bcOffset, 36, false);
  ///  Collection of Sensorcharacteristics which define characteristics and capabilities of a sensor.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get sensorcharacteristics => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 38);
  ///  Collection of SensorStats which contain statistics of a sensor.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get sensorStats => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 40);
  ///  Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get sensorlimitsCollection => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get entity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Unique identifier of the parent entity. idEntity is required for Put.
  ///  Example: /// Example: ENTITY-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idEntity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get sensorObservationType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get sensorType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);

  @override
  String toString() {
    return 'SensorFull{idSensor: ${idSensor}, sensorName: ${sensorName}, classificationMarking: ${classificationMarking}, sensorNumber: ${sensorNumber}, shortName: ${shortName}, dataControl: ${dataControl}, afId: ${afId}, asrType: ${asrType}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, active: ${active}, sensorcharacteristics: ${sensorcharacteristics}, sensorStats: ${sensorStats}, sensorlimitsCollection: ${sensorlimitsCollection}, entity: ${entity}, idEntity: ${idEntity}, sensorObservationType: ${sensorObservationType}, sensorType: ${sensorType}}';
  }
}

class _SensorFullReader extends fb.TableReader<SensorFull> {
  const _SensorFullReader();

  @override
  SensorFull createObject(fb.BufferContext bc, int offset) => 
    SensorFull._(bc, offset);
}

class SensorFullBuilder {
  SensorFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(24);
  }

  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSensorNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSensorNumber(int? sensorNumber) {
    fbBuilder.addInt32(3, sensorNumber);
    return fbBuilder.offset;
  }
  int addShortNameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addDataControlOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addAfIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addAsrTypeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SensorFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(11, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addActive(bool? active) {
    fbBuilder.addBool(16, active);
    return fbBuilder.offset;
  }
  int addSensorcharacteristicsOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addSensorStatsOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addSensorlimitsCollectionOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addEntityOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addIdEntityOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addSensorObservationTypeOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addSensorTypeOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SensorFullObjectBuilder extends fb.ObjectBuilder {
  final String? _idSensor;
  final String? _sensorName;
  final String? _classificationMarking;
  final int? _sensorNumber;
  final String? _shortName;
  final String? _dataControl;
  final String? _afId;
  final String? _asrType;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SensorFullDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final bool? _active;
  final List<String>? _sensorcharacteristics;
  final List<String>? _sensorStats;
  final List<String>? _sensorlimitsCollection;
  final String? _entity;
  final String? _idEntity;
  final String? _sensorObservationType;
  final String? _sensorType;

  SensorFullObjectBuilder({
    String? idSensor,
    String? sensorName,
    String? classificationMarking,
    int? sensorNumber,
    String? shortName,
    String? dataControl,
    String? afId,
    String? asrType,
    String? source,
    String? origin,
    String? origNetwork,
    SensorFullDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    bool? active,
    List<String>? sensorcharacteristics,
    List<String>? sensorStats,
    List<String>? sensorlimitsCollection,
    String? entity,
    String? idEntity,
    String? sensorObservationType,
    String? sensorType,
  })
      : _idSensor = idSensor,
        _sensorName = sensorName,
        _classificationMarking = classificationMarking,
        _sensorNumber = sensorNumber,
        _shortName = shortName,
        _dataControl = dataControl,
        _afId = afId,
        _asrType = asrType,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _active = active,
        _sensorcharacteristics = sensorcharacteristics,
        _sensorStats = sensorStats,
        _sensorlimitsCollection = sensorlimitsCollection,
        _entity = entity,
        _idEntity = idEntity,
        _sensorObservationType = sensorObservationType,
        _sensorType = sensorType;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? sensorNameOffset = _sensorName == null ? null
        : fbBuilder.writeString(_sensorName!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? shortNameOffset = _shortName == null ? null
        : fbBuilder.writeString(_shortName!);
    final int? dataControlOffset = _dataControl == null ? null
        : fbBuilder.writeString(_dataControl!);
    final int? afIdOffset = _afId == null ? null
        : fbBuilder.writeString(_afId!);
    final int? asrTypeOffset = _asrType == null ? null
        : fbBuilder.writeString(_asrType!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sensorcharacteristicsOffset = _sensorcharacteristics == null ? null
        : fbBuilder.writeList(_sensorcharacteristics!.map(fbBuilder.writeString).toList());
    final int? sensorStatsOffset = _sensorStats == null ? null
        : fbBuilder.writeList(_sensorStats!.map(fbBuilder.writeString).toList());
    final int? sensorlimitsCollectionOffset = _sensorlimitsCollection == null ? null
        : fbBuilder.writeList(_sensorlimitsCollection!.map(fbBuilder.writeString).toList());
    final int? entityOffset = _entity == null ? null
        : fbBuilder.writeString(_entity!);
    final int? idEntityOffset = _idEntity == null ? null
        : fbBuilder.writeString(_idEntity!);
    final int? sensorObservationTypeOffset = _sensorObservationType == null ? null
        : fbBuilder.writeString(_sensorObservationType!);
    final int? sensorTypeOffset = _sensorType == null ? null
        : fbBuilder.writeString(_sensorType!);
    fbBuilder.startTable(24);
    fbBuilder.addOffset(0, idSensorOffset);
    fbBuilder.addOffset(1, sensorNameOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addInt32(3, _sensorNumber);
    fbBuilder.addOffset(4, shortNameOffset);
    fbBuilder.addOffset(5, dataControlOffset);
    fbBuilder.addOffset(6, afIdOffset);
    fbBuilder.addOffset(7, asrTypeOffset);
    fbBuilder.addOffset(8, sourceOffset);
    fbBuilder.addOffset(9, originOffset);
    fbBuilder.addOffset(10, origNetworkOffset);
    fbBuilder.addInt8(11, _dataMode?.value);
    fbBuilder.addOffset(12, createdAtOffset);
    fbBuilder.addOffset(13, createdByOffset);
    fbBuilder.addOffset(14, updatedAtOffset);
    fbBuilder.addOffset(15, updatedByOffset);
    fbBuilder.addBool(16, _active);
    fbBuilder.addOffset(17, sensorcharacteristicsOffset);
    fbBuilder.addOffset(18, sensorStatsOffset);
    fbBuilder.addOffset(19, sensorlimitsCollectionOffset);
    fbBuilder.addOffset(20, entityOffset);
    fbBuilder.addOffset(21, idEntityOffset);
    fbBuilder.addOffset(22, sensorObservationTypeOffset);
    fbBuilder.addOffset(23, sensorTypeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
