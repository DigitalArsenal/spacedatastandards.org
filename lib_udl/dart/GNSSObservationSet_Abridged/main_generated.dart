// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class GnssobservationSetAbridgedDataModeEnum {
  final int value;
  const GnssobservationSetAbridgedDataModeEnum._(this.value);

  factory GnssobservationSetAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum GnssobservationSetAbridgedDataModeEnum');
    }
    return result;
  }

  static GnssobservationSetAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : GnssobservationSetAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const GnssobservationSetAbridgedDataModeEnum REAL = GnssobservationSetAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const GnssobservationSetAbridgedDataModeEnum TEST = GnssobservationSetAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const GnssobservationSetAbridgedDataModeEnum SIMULATED = GnssobservationSetAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const GnssobservationSetAbridgedDataModeEnum EXERCISE = GnssobservationSetAbridgedDataModeEnum._(3);
  static const Map<int, GnssobservationSetAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<GnssobservationSetAbridgedDataModeEnum> reader = _GnssobservationSetAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'GnssobservationSetAbridgedDataModeEnum{value: $value}';
  }
}

class _GnssobservationSetAbridgedDataModeEnumReader extends fb.Reader<GnssobservationSetAbridgedDataModeEnum> {
  const _GnssobservationSetAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  GnssobservationSetAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      GnssobservationSetAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Set of GNSSObservation data.
class GnssobservationSetAbridged {
  GnssobservationSetAbridged._(this._bc, this._bcOffset);
  factory GnssobservationSetAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GnssobservationSetAbridged> reader = _GnssobservationSetAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: GNSSObSet-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The marker type of the observing receiver (AIRBORNE, ANIMAL, BALLISTIC, FIXED BUOY, FLOATING BUOY, FLOATING ICE, GEODETIC, GLACIER, GROUNDCRAFT, HUMAN, NON GEODETIC, NON PHYSICAL, SPACEBORNE, WATERCRAFT).  Reference RINEX 3+ for further information concerning marker types.
  ///  Example: /// Example: SPACEBORNE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get markerType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the primary satellite on-orbit object.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Observation Time, in ISO8601 UTC format with microsecond precision.  This timestamp applies to all observations within the set.
  ///  Example: /// Example: 2022-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get ts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Time, in seconds, that the receiver has been unable to compute a GNSS fix.
  ///  Example: /// Example: 200
  ///  Constraints: No constraints specified.
  int get outage => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Geometric Dilution of Precision.
  ///  Example: /// Example: 0.33
  ///  Constraints: No constraints specified.
  double get gDop => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Horizontal Dilution of Precision.
  ///  Example: /// Example: 0.03
  ///  Constraints: No constraints specified.
  double get hDop => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Position Dilution of Precision.
  ///  Example: /// Example: 0.002
  ///  Constraints: No constraints specified.
  double get pDop => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Time Dilution of Precision.
  ///  Example: /// Example: 0.05
  ///  Constraints: No constraints specified.
  double get tDop => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Vertical Dilution of Precision.
  ///  Example: /// Example: 0.03
  ///  Constraints: No constraints specified.
  double get vDop => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris.  If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Observation records if each receiver is synced to the ephemeris points.
  ///  Example: /// Example: ES-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get esId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The number or ID of the GNSS receiver associated with this data.  Each GNSS Observation Set is associated with only one receiver.  If reporting for multiple receivers a separate set should be generated for each.  A null value is assumed to indicate that only one receiver is present, or reported.
  ///  Example: /// Example: RECEIVER-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get receiver => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
  ///  Example: /// Example: [1.23, 3.23]
  ///  Constraints: No constraints specified.
  List<String>? get boresight => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  ///  The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at observation time (ts). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
  ///  Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  ///  Constraints: No constraints specified.
  List<String>? get quat => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 36);
  ///  WGS-84 spacecraft latitude sub-point at observation time (ts), represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 32.021
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  WGS-84 spacecraft longitude sub-point at observation time (ts), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 125.123
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Spacecraft altitude at observation time (ts), expressed in kilometers above WGS-84 ellipsoid.
  ///  Example: /// Example: 200
  ///  Constraints: No constraints specified.
  double get alt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Three element array, expressing the ECI J2K spacecraft velocity components, in km/second, at observation time (ts).  The array element order is [xvel, yvel, zvel].
  ///  Example: /// Example: [2.03, 0.003, 0.12]
  ///  Constraints: No constraints specified.
  List<String>? get satVelocity => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);
  ///  Array of the strings containing the individual observation code sets that are contained within this GNSS Observation set.  Each string is a three-character representation of the measurement type, the channel, and the coding, in compliance with the RINEX 3+ standard (Pseudorange (C), Carrier Phase (L), Doppler (D), Signal Strength C/No (S), or Channel Number (X)).  See the GNSS Observation ob field for the units of measure associated with each observation type.
  ///  Example: /// Example: ['ACL']
  ///  Constraints: No constraints specified.
  List<String>? get obsCodes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 46);
  ///  Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get trackingStatus => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 48, 0);
  ///  The current navigation status as defined by the data source. In general the navigation status specifies whether the signal is normal, degraded, or unavailable. For status value definitions please reach out to data source provider.
  ///  Example: /// Example: degraded
  ///  Constraints: No constraints specified.
  String? get navigationStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  GNSS Automatic Gain Control State.
  ///  Example: /// Example: 20
  ///  Constraints: No constraints specified.
  int get agcState => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this GNSS Observation Set. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['SV', 'SV']
  ///  Constraints: No constraints specified.
  List<String>? get srcTyps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 54);
  ///  Array of UUIDs of the UDL data records that are related to this GNSS Observation Set. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/statevector/{uuid}).
  ///  Example: /// Example: ['SV_ID', 'SV_ID']
  ///  Constraints: No constraints specified.
  List<String>? get srcIds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 56);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 58);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  GnssobservationSetAbridgedDataModeEnum get dataMode => GnssobservationSetAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 70, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  GNSSObservations associated with this GNSSObservationSet.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get gnssObservationList => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 74);

  @override
  String toString() {
    return 'GnssobservationSetAbridged{id: ${id}, classificationMarking: ${classificationMarking}, markerType: ${markerType}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, ts: ${ts}, outage: ${outage}, gDop: ${gDop}, hDop: ${hDop}, pDop: ${pDop}, tDop: ${tDop}, vDop: ${vDop}, esId: ${esId}, receiver: ${receiver}, boresight: ${boresight}, quat: ${quat}, lat: ${lat}, lon: ${lon}, alt: ${alt}, satVelocity: ${satVelocity}, obsCodes: ${obsCodes}, trackingStatus: ${trackingStatus}, navigationStatus: ${navigationStatus}, agcState: ${agcState}, srcTyps: ${srcTyps}, srcIds: ${srcIds}, tags: ${tags}, transactionId: ${transactionId}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}, gnssObservationList: ${gnssObservationList}}';
  }
}

class _GnssobservationSetAbridgedReader extends fb.TableReader<GnssobservationSetAbridged> {
  const _GnssobservationSetAbridgedReader();

  @override
  GnssobservationSetAbridged createObject(fb.BufferContext bc, int offset) => 
    GnssobservationSetAbridged._(bc, offset);
}

class GnssobservationSetAbridgedBuilder {
  GnssobservationSetAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(36);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMarkerTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(4, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addOutage(int? outage) {
    fbBuilder.addInt32(7, outage);
    return fbBuilder.offset;
  }
  int addGDop(double? gDop) {
    fbBuilder.addFloat64(8, gDop);
    return fbBuilder.offset;
  }
  int addHDop(double? hDop) {
    fbBuilder.addFloat64(9, hDop);
    return fbBuilder.offset;
  }
  int addPDop(double? pDop) {
    fbBuilder.addFloat64(10, pDop);
    return fbBuilder.offset;
  }
  int addTDop(double? tDop) {
    fbBuilder.addFloat64(11, tDop);
    return fbBuilder.offset;
  }
  int addVDop(double? vDop) {
    fbBuilder.addFloat64(12, vDop);
    return fbBuilder.offset;
  }
  int addEsIdOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addReceiverOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addBoresightOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addQuatOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(17, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(18, lon);
    return fbBuilder.offset;
  }
  int addAlt(double? alt) {
    fbBuilder.addFloat64(19, alt);
    return fbBuilder.offset;
  }
  int addSatVelocityOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addObsCodesOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addTrackingStatus(int? trackingStatus) {
    fbBuilder.addInt32(22, trackingStatus);
    return fbBuilder.offset;
  }
  int addNavigationStatusOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addAgcState(int? agcState) {
    fbBuilder.addInt32(24, agcState);
    return fbBuilder.offset;
  }
  int addSrcTypsOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addSrcIdsOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addDataMode(GnssobservationSetAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(33, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addGnssObservationListOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GnssobservationSetAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _markerType;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final String? _ts;
  final int? _outage;
  final double? _gDop;
  final double? _hDop;
  final double? _pDop;
  final double? _tDop;
  final double? _vDop;
  final String? _esId;
  final String? _receiver;
  final List<String>? _boresight;
  final List<String>? _quat;
  final double? _lat;
  final double? _lon;
  final double? _alt;
  final List<String>? _satVelocity;
  final List<String>? _obsCodes;
  final int? _trackingStatus;
  final String? _navigationStatus;
  final int? _agcState;
  final List<String>? _srcTyps;
  final List<String>? _srcIds;
  final List<String>? _tags;
  final String? _transactionId;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final GnssobservationSetAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;
  final List<String>? _gnssObservationList;

  GnssobservationSetAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? markerType,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    String? ts,
    int? outage,
    double? gDop,
    double? hDop,
    double? pDop,
    double? tDop,
    double? vDop,
    String? esId,
    String? receiver,
    List<String>? boresight,
    List<String>? quat,
    double? lat,
    double? lon,
    double? alt,
    List<String>? satVelocity,
    List<String>? obsCodes,
    int? trackingStatus,
    String? navigationStatus,
    int? agcState,
    List<String>? srcTyps,
    List<String>? srcIds,
    List<String>? tags,
    String? transactionId,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    GnssobservationSetAbridgedDataModeEnum? dataMode,
    String? origNetwork,
    List<String>? gnssObservationList,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _markerType = markerType,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _ts = ts,
        _outage = outage,
        _gDop = gDop,
        _hDop = hDop,
        _pDop = pDop,
        _tDop = tDop,
        _vDop = vDop,
        _esId = esId,
        _receiver = receiver,
        _boresight = boresight,
        _quat = quat,
        _lat = lat,
        _lon = lon,
        _alt = alt,
        _satVelocity = satVelocity,
        _obsCodes = obsCodes,
        _trackingStatus = trackingStatus,
        _navigationStatus = navigationStatus,
        _agcState = agcState,
        _srcTyps = srcTyps,
        _srcIds = srcIds,
        _tags = tags,
        _transactionId = transactionId,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork,
        _gnssObservationList = gnssObservationList;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? markerTypeOffset = _markerType == null ? null
        : fbBuilder.writeString(_markerType!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeString(_ts!);
    final int? esIdOffset = _esId == null ? null
        : fbBuilder.writeString(_esId!);
    final int? receiverOffset = _receiver == null ? null
        : fbBuilder.writeString(_receiver!);
    final int? boresightOffset = _boresight == null ? null
        : fbBuilder.writeList(_boresight!.map(fbBuilder.writeString).toList());
    final int? quatOffset = _quat == null ? null
        : fbBuilder.writeList(_quat!.map(fbBuilder.writeString).toList());
    final int? satVelocityOffset = _satVelocity == null ? null
        : fbBuilder.writeList(_satVelocity!.map(fbBuilder.writeString).toList());
    final int? obsCodesOffset = _obsCodes == null ? null
        : fbBuilder.writeList(_obsCodes!.map(fbBuilder.writeString).toList());
    final int? navigationStatusOffset = _navigationStatus == null ? null
        : fbBuilder.writeString(_navigationStatus!);
    final int? srcTypsOffset = _srcTyps == null ? null
        : fbBuilder.writeList(_srcTyps!.map(fbBuilder.writeString).toList());
    final int? srcIdsOffset = _srcIds == null ? null
        : fbBuilder.writeList(_srcIds!.map(fbBuilder.writeString).toList());
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? gnssObservationListOffset = _gnssObservationList == null ? null
        : fbBuilder.writeList(_gnssObservationList!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(36);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, markerTypeOffset);
    fbBuilder.addOffset(3, idOnOrbitOffset);
    fbBuilder.addInt32(4, _satNo);
    fbBuilder.addOffset(5, origObjectIdOffset);
    fbBuilder.addOffset(6, tsOffset);
    fbBuilder.addInt32(7, _outage);
    fbBuilder.addFloat64(8, _gDop);
    fbBuilder.addFloat64(9, _hDop);
    fbBuilder.addFloat64(10, _pDop);
    fbBuilder.addFloat64(11, _tDop);
    fbBuilder.addFloat64(12, _vDop);
    fbBuilder.addOffset(13, esIdOffset);
    fbBuilder.addOffset(14, receiverOffset);
    fbBuilder.addOffset(15, boresightOffset);
    fbBuilder.addOffset(16, quatOffset);
    fbBuilder.addFloat64(17, _lat);
    fbBuilder.addFloat64(18, _lon);
    fbBuilder.addFloat64(19, _alt);
    fbBuilder.addOffset(20, satVelocityOffset);
    fbBuilder.addOffset(21, obsCodesOffset);
    fbBuilder.addInt32(22, _trackingStatus);
    fbBuilder.addOffset(23, navigationStatusOffset);
    fbBuilder.addInt32(24, _agcState);
    fbBuilder.addOffset(25, srcTypsOffset);
    fbBuilder.addOffset(26, srcIdsOffset);
    fbBuilder.addOffset(27, tagsOffset);
    fbBuilder.addOffset(28, transactionIdOffset);
    fbBuilder.addOffset(29, createdAtOffset);
    fbBuilder.addOffset(30, createdByOffset);
    fbBuilder.addOffset(31, sourceOffset);
    fbBuilder.addOffset(32, originOffset);
    fbBuilder.addInt8(33, _dataMode?.value);
    fbBuilder.addOffset(34, origNetworkOffset);
    fbBuilder.addOffset(35, gnssObservationListOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
