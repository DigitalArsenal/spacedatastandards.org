// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AircraftSortieIngestPaperStatusEnum {
  final int value;
  const AircraftSortieIngestPaperStatusEnum._(this.value);

  factory AircraftSortieIngestPaperStatusEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AircraftSortieIngestPaperStatusEnum');
    }
    return result;
  }

  static AircraftSortieIngestPaperStatusEnum? _createOrNull(int? value) => 
      value == null ? null : AircraftSortieIngestPaperStatusEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const AircraftSortieIngestPaperStatusEnum PUBLISHED = AircraftSortieIngestPaperStatusEnum._(0);

  ///  No description available.
  static const AircraftSortieIngestPaperStatusEnum DELETED = AircraftSortieIngestPaperStatusEnum._(1);

  ///  No description available.
  static const AircraftSortieIngestPaperStatusEnum UPDATED = AircraftSortieIngestPaperStatusEnum._(2);

  ///  No description available.
  static const AircraftSortieIngestPaperStatusEnum READ = AircraftSortieIngestPaperStatusEnum._(3);
  static const Map<int, AircraftSortieIngestPaperStatusEnum> values = {
    0: PUBLISHED,
    1: DELETED,
    2: UPDATED,
    3: READ};

  static const fb.Reader<AircraftSortieIngestPaperStatusEnum> reader = _AircraftSortieIngestPaperStatusEnumReader();

  @override
  String toString() {
    return 'AircraftSortieIngestPaperStatusEnum{value: $value}';
  }
}

class _AircraftSortieIngestPaperStatusEnumReader extends fb.Reader<AircraftSortieIngestPaperStatusEnum> {
  const _AircraftSortieIngestPaperStatusEnumReader();

  @override
  int get size => 1;

  @override
  AircraftSortieIngestPaperStatusEnum read(fb.BufferContext bc, int offset) =>
      AircraftSortieIngestPaperStatusEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class AircraftSortieIngestPprStatusEnum {
  final int value;
  const AircraftSortieIngestPprStatusEnum._(this.value);

  factory AircraftSortieIngestPprStatusEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AircraftSortieIngestPprStatusEnum');
    }
    return result;
  }

  static AircraftSortieIngestPprStatusEnum? _createOrNull(int? value) => 
      value == null ? null : AircraftSortieIngestPprStatusEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const AircraftSortieIngestPprStatusEnum NOT_REQUIRED = AircraftSortieIngestPprStatusEnum._(0);

  ///  No description available.
  static const AircraftSortieIngestPprStatusEnum REQUIRED_NOT_REQUESTED = AircraftSortieIngestPprStatusEnum._(1);

  ///  No description available.
  static const AircraftSortieIngestPprStatusEnum GRANTED = AircraftSortieIngestPprStatusEnum._(2);

  ///  No description available.
  static const AircraftSortieIngestPprStatusEnum PENDING = AircraftSortieIngestPprStatusEnum._(3);
  static const Map<int, AircraftSortieIngestPprStatusEnum> values = {
    0: NOT_REQUIRED,
    1: REQUIRED_NOT_REQUESTED,
    2: GRANTED,
    3: PENDING};

  static const fb.Reader<AircraftSortieIngestPprStatusEnum> reader = _AircraftSortieIngestPprStatusEnumReader();

  @override
  String toString() {
    return 'AircraftSortieIngestPprStatusEnum{value: $value}';
  }
}

class _AircraftSortieIngestPprStatusEnumReader extends fb.Reader<AircraftSortieIngestPprStatusEnum> {
  const _AircraftSortieIngestPprStatusEnumReader();

  @override
  int get size => 1;

  @override
  AircraftSortieIngestPprStatusEnum read(fb.BufferContext bc, int offset) =>
      AircraftSortieIngestPprStatusEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class AircraftSortieIngestRvnReqEnum {
  final int value;
  const AircraftSortieIngestRvnReqEnum._(this.value);

  factory AircraftSortieIngestRvnReqEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AircraftSortieIngestRvnReqEnum');
    }
    return result;
  }

  static AircraftSortieIngestRvnReqEnum? _createOrNull(int? value) => 
      value == null ? null : AircraftSortieIngestRvnReqEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const AircraftSortieIngestRvnReqEnum N = AircraftSortieIngestRvnReqEnum._(0);

  ///  No description available.
  static const AircraftSortieIngestRvnReqEnum R = AircraftSortieIngestRvnReqEnum._(1);

  ///  No description available.
  static const AircraftSortieIngestRvnReqEnum C6 = AircraftSortieIngestRvnReqEnum._(2);

  ///  No description available.
  static const AircraftSortieIngestRvnReqEnum R6 = AircraftSortieIngestRvnReqEnum._(3);
  static const Map<int, AircraftSortieIngestRvnReqEnum> values = {
    0: N,
    1: R,
    2: C6,
    3: R6};

  static const fb.Reader<AircraftSortieIngestRvnReqEnum> reader = _AircraftSortieIngestRvnReqEnumReader();

  @override
  String toString() {
    return 'AircraftSortieIngestRvnReqEnum{value: $value}';
  }
}

class _AircraftSortieIngestRvnReqEnumReader extends fb.Reader<AircraftSortieIngestRvnReqEnum> {
  const _AircraftSortieIngestRvnReqEnumReader();

  @override
  int get size => 1;

  @override
  AircraftSortieIngestRvnReqEnum read(fb.BufferContext bc, int offset) =>
      AircraftSortieIngestRvnReqEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class AircraftSortieIngestDataModeEnum {
  final int value;
  const AircraftSortieIngestDataModeEnum._(this.value);

  factory AircraftSortieIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AircraftSortieIngestDataModeEnum');
    }
    return result;
  }

  static AircraftSortieIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AircraftSortieIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AircraftSortieIngestDataModeEnum REAL = AircraftSortieIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AircraftSortieIngestDataModeEnum TEST = AircraftSortieIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AircraftSortieIngestDataModeEnum SIMULATED = AircraftSortieIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AircraftSortieIngestDataModeEnum EXERCISE = AircraftSortieIngestDataModeEnum._(3);
  static const Map<int, AircraftSortieIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AircraftSortieIngestDataModeEnum> reader = _AircraftSortieIngestDataModeEnumReader();

  @override
  String toString() {
    return 'AircraftSortieIngestDataModeEnum{value: $value}';
  }
}

class _AircraftSortieIngestDataModeEnumReader extends fb.Reader<AircraftSortieIngestDataModeEnum> {
  const _AircraftSortieIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AircraftSortieIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      AircraftSortieIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
class AircraftSortieIngest {
  AircraftSortieIngest._(this._bc, this._bcOffset);
  factory AircraftSortieIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AircraftSortieIngest> reader = _AircraftSortieIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: AIRCRAFTSORTIE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The sortie identifier provided by the originating source.
  ///  Example: /// Example: A0640
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origSortieId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the aircraft.
  ///  Example: /// Example: REF-AIRCRAFT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idAircraft => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Alternate Aircraft Identifier provided by source.
  ///  Example: /// Example: ALT-AIRCRAFT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get aircraftAltId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The tail number of the aircraft assigned to this sortie.
  ///  Example: /// Example: Tail_1
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get tailNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The aircraft Model Design Series designation assigned to this sortie.
  ///  Example: /// Example: C017A
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get aircraftMds => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
  ///  Example: /// Example: AE123C
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get aircraftAdsb => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  ///  Example: /// Example: 2021-01-01
  ///  Constraints: No constraints specified.
  String? get sortieDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The external system line number of this sortie.
  ///  Example: /// Example: 99
  ///  Constraints: No constraints specified.
  int get lineNumber => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 22, 0);
  ///  The unique identifier of the mission to which this sortie is assigned.
  ///  Example: /// Example: fa18d96e-91ea-60da-a7a8-1af6500066c8
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idMission => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The mission ID according to the source system.
  ///  Example: /// Example: ABLE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get missionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The Air Mobility Command (AMC) mission number of the sortie.
  ///  Example: /// Example: AJM512571333
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get amcMsnNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The type of mission (e.g. SAAM, CHNL, etc.).
  ///  Example: /// Example: SAAM
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get amcMsnType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The call sign assigned to the aircraft on this sortie.
  ///  Example: /// Example: BAKER
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get callSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Joint Chiefs of Staff priority of this sortie.
  ///  Example: /// Example: 1A3
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get jcsPriority => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The planned primary Standard Conventional Load of the aircraft for this sortie.
  ///  Example: /// Example: ABC
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get primaryScl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The planned secondary Standard Conventional Load of the aircraft for this sortie.
  ///  Example: /// Example: ABC
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get secondaryScl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Aircraft configuration required for the mission.
  ///  Example: /// Example: C-1
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get reqConfig => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are determined by the data source.
  ///  Example: /// Example: C-1
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get cargoConfig => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Mass of fuel required for this leg of the sortie, in kilograms.
  ///  Example: /// Example: 20000.1
  ///  Constraints: No constraints specified.
  double get fuelReq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Liquid oxygen required on the aircraft for the crew compartment, in liters.
  ///  Example: /// Example: 12.3
  ///  Constraints: No constraints specified.
  double get oxyReqCrew => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Liquid oxygen onboard the aircraft for the crew compartment, in liters.
  ///  Example: /// Example: 12.3
  ///  Constraints: No constraints specified.
  double get oxyOnCrew => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Liquid oxygen required on the aircraft for the troop compartment, in liters.
  ///  Example: /// Example: 12.3
  ///  Constraints: No constraints specified.
  double get oxyReqPax => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Liquid oxygen onboard the aircraft for the troop compartment, in liters.
  ///  Example: /// Example: 12.3
  ///  Constraints: No constraints specified.
  double get oxyOnPax => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  The Alert Status code.
  ///  Example: /// Example: C1
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get alertStatusCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  The amount of time allowed between launch order and takeoff, in seconds.
  ///  Example: /// Example: 22
  ///  Constraints: No constraints specified.
  int get alertStatus => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  The current state of this sortie.
  ///  Example: /// Example: Park
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get currentState => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  The itinerary identifier of the departure location.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  int get depItinerary => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 60, 0);
  ///  The departure International Civil Aviation Organization (ICAO) of this sortie.
  ///  Example: /// Example: KCOS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get depIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  The departure International Aviation Transport Association (IATA) code of this sortie.
  ///  Example: /// Example: AAA
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get depIata => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  The departure Federal Aviation Administration (FAA) code of this sortie.
  ///  Example: /// Example: FAA1
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get depFaa => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get plannedDepTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get estDepTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  The actual departure time, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get actualDepTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  The estimated time the Aircraft will begin to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T00:55:01.123Z
  ///  Constraints: No constraints specified.
  String? get estBlockOutTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  The actual time the Aircraft begins to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T00:55:01.123Z
  ///  Constraints: No constraints specified.
  String? get actualBlockOutTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Purpose code at the departure location of this sortie.
  ///  Example: /// Example: P
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get depPurposeCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  The itinerary identifier of the arrival location.
  ///  Example: /// Example: 101
  ///  Constraints: No constraints specified.
  int get arrItinerary => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 80, 0);
  ///  The arrival International Civil Aviation Organization (ICAO) of this sortie.
  ///  Example: /// Example: KCOS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get arrIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  The arrival International Aviation Transport Association (IATA) code of this sortie.
  ///  Example: /// Example: AAA
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get arrIata => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  The arrival Federal Aviation Administration (FAA) code of this sortie.
  ///  Example: /// Example: FAA1
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get arrFaa => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  The scheduled time that the Aircraft sortie is planned to arrive,  in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get plannedArrTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get estArrTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  The actual arrival time, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get actualArrTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  The estimated time the Aircraft will come to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:06:01.123Z
  ///  Constraints: No constraints specified.
  String? get estBlockInTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  The actual time the Aircraft comes to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:06:01.123Z
  ///  Constraints: No constraints specified.
  String? get actualBlockInTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Purpose code at the arrival location of this sortie.
  ///  Example: /// Example: O
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get arrPurposeCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Due home date by which the aircraft must return to its home station, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-03T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get dhd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Reason the aircraft must return to home station by its due home date.
  ///  Example: /// Example: Due for maintenance
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get dhdReason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Aircraft event text.
  ///  Example: /// Example: Example event
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get aircraftEvent => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Indicates the group responsible for recording the completion time of the next event in the sequence of events assigned to this sortie (e.g. OPS - Operations, MX - Maintenance, TR - Transportation, etc.).
  ///  Example: /// Example: OPS
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get soe => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  The leg number of this sortie.
  ///  Example: /// Example: 14
  ///  Constraints: No constraints specified.
  int get legNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 108, 0);
  ///  The planned flight time for this sortie, in minutes.
  ///  Example: /// Example: 104.5
  ///  Constraints: No constraints specified.
  double get flightTime => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  Scheduled ground time, in minutes.
  ///  Example: /// Example: 387.8
  ///  Constraints: No constraints specified.
  double get gndTime => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  When crew papers are associated to this sortie, the system updates this value. This field is the URI location in the document repository of that raw file. To download the raw file, prepend https://udl-hostname/scs/download?id= to this field's value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 114);
  ///  The version number of the crew paper.
  ///  Example: /// Example: 1.1
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get papersVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);
  ///  Name of the uploaded PDF.
  ///  Example: /// Example: ExampleFileName
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get filename => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  Size of the supporting PDF, in bytes.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get filesize => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 120, 0);
  ///  The status of the supporting document.
  ///  Example: /// Example: PUBLISHED
  ///  Constraints: Minimum length = 0, Maximum length = 9
  AircraftSortieIngestPaperStatusEnum get paperStatus => AircraftSortieIngestPaperStatusEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 122, 0));
  ///  The prior permission required (PPR) status.
  ///  Example: /// Example: PENDING
  ///  Constraints: Minimum length = 0, Maximum length = 22
  AircraftSortieIngestPprStatusEnum get pprStatus => AircraftSortieIngestPprStatusEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 124, 0));
  ///  Time the associated mission data was last updated in relation to the aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this time is coming from an external system, it may not sync with the latest mission time associated to this record.
  ///  Example: /// Example: 2024-09-09T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get missionUpdate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 126);
  ///  The primary delay code.
  ///  Example: /// Example: 500
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get delayCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 128);
  ///  The last name of the aircraft commander.
  ///  Example: /// Example: Smith
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get commanderName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 130);
  ///  Desk phone number of the flight manager assigned to the sortie. Null when no flight manager is assigned.
  ///  Example: /// Example: 7198675309
  ///  Constraints: Minimum length = 0, Maximum length = 45
  String? get fmDeskNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 132);
  ///  Last name of the flight manager assigned to the sortie. Null when no flight manager is assigned.
  ///  Example: /// Example: Smith
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get fmName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 134);
  ///  Type of Ravens required for this sortie (N - None, R - Raven (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required (Ground time over 6 hours)).
  ///  Example: /// Example: R
  ///  Constraints: Minimum length = 0, Maximum length = 2
  AircraftSortieIngestRvnReqEnum get rvnReq => AircraftSortieIngestRvnReqEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 136, 0));
  ///  The number of passengers tasked for this sortie.
  ///  Example: /// Example: 17
  ///  Constraints: No constraints specified.
  int get passengers => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 138, 0);
  ///  The POI parking location.
  ///  Example: /// Example: KCOS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get parkingLoc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 140);
  ///  Remarks concerning the sortie objective.
  ///  Example: /// Example: Some objective remark about aircraft A
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get objectiveRemarks => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 142);
  ///  Remarks concerning the aircraft.
  ///  Example: /// Example: Some remark about aircraft A
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get aircraftRemarks => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 144);
  ///  Remarks concerning the schedule.
  ///  Example: /// Example: Some schedule remark about aircraft A
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get scheduleRemarks => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 146);
  ///  Remarks concerning the results of this sortie.
  ///  Example: /// Example: Some remark about aircraft A
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get resultRemarks => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 148);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 150);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 152);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 154);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 156);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 158);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AircraftSortieIngestDataModeEnum get dataMode => AircraftSortieIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 160, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 162);

  @override
  String toString() {
    return 'AircraftSortieIngest{id: ${id}, classificationMarking: ${classificationMarking}, origSortieId: ${origSortieId}, idAircraft: ${idAircraft}, aircraftAltId: ${aircraftAltId}, tailNumber: ${tailNumber}, aircraftMds: ${aircraftMds}, aircraftAdsb: ${aircraftAdsb}, sortieDate: ${sortieDate}, lineNumber: ${lineNumber}, idMission: ${idMission}, missionId: ${missionId}, amcMsnNum: ${amcMsnNum}, amcMsnType: ${amcMsnType}, callSign: ${callSign}, jcsPriority: ${jcsPriority}, primaryScl: ${primaryScl}, secondaryScl: ${secondaryScl}, reqConfig: ${reqConfig}, cargoConfig: ${cargoConfig}, fuelReq: ${fuelReq}, oxyReqCrew: ${oxyReqCrew}, oxyOnCrew: ${oxyOnCrew}, oxyReqPax: ${oxyReqPax}, oxyOnPax: ${oxyOnPax}, alertStatusCode: ${alertStatusCode}, alertStatus: ${alertStatus}, currentState: ${currentState}, depItinerary: ${depItinerary}, depIcao: ${depIcao}, depIata: ${depIata}, depFaa: ${depFaa}, plannedDepTime: ${plannedDepTime}, estDepTime: ${estDepTime}, actualDepTime: ${actualDepTime}, estBlockOutTime: ${estBlockOutTime}, actualBlockOutTime: ${actualBlockOutTime}, depPurposeCode: ${depPurposeCode}, arrItinerary: ${arrItinerary}, arrIcao: ${arrIcao}, arrIata: ${arrIata}, arrFaa: ${arrFaa}, plannedArrTime: ${plannedArrTime}, estArrTime: ${estArrTime}, actualArrTime: ${actualArrTime}, estBlockInTime: ${estBlockInTime}, actualBlockInTime: ${actualBlockInTime}, arrPurposeCode: ${arrPurposeCode}, dhd: ${dhd}, dhdReason: ${dhdReason}, aircraftEvent: ${aircraftEvent}, soe: ${soe}, legNum: ${legNum}, flightTime: ${flightTime}, gndTime: ${gndTime}, rawFileUri: ${rawFileUri}, papersVersion: ${papersVersion}, filename: ${filename}, filesize: ${filesize}, paperStatus: ${paperStatus}, pprStatus: ${pprStatus}, missionUpdate: ${missionUpdate}, delayCode: ${delayCode}, commanderName: ${commanderName}, fmDeskNum: ${fmDeskNum}, fmName: ${fmName}, rvnReq: ${rvnReq}, passengers: ${passengers}, parkingLoc: ${parkingLoc}, objectiveRemarks: ${objectiveRemarks}, aircraftRemarks: ${aircraftRemarks}, scheduleRemarks: ${scheduleRemarks}, resultRemarks: ${resultRemarks}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _AircraftSortieIngestReader extends fb.TableReader<AircraftSortieIngest> {
  const _AircraftSortieIngestReader();

  @override
  AircraftSortieIngest createObject(fb.BufferContext bc, int offset) => 
    AircraftSortieIngest._(bc, offset);
}

class AircraftSortieIngestBuilder {
  AircraftSortieIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(80);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOrigSortieIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdAircraftOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addAircraftAltIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTailNumberOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addAircraftMdsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addAircraftAdsbOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addSortieDateOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addLineNumber(int? lineNumber) {
    fbBuilder.addInt32(9, lineNumber);
    return fbBuilder.offset;
  }
  int addIdMissionOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addMissionIdOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addAmcMsnNumOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addAmcMsnTypeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCallSignOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addJcsPriorityOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addPrimarySclOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addSecondarySclOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addReqConfigOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addCargoConfigOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addFuelReq(double? fuelReq) {
    fbBuilder.addFloat64(20, fuelReq);
    return fbBuilder.offset;
  }
  int addOxyReqCrew(double? oxyReqCrew) {
    fbBuilder.addFloat64(21, oxyReqCrew);
    return fbBuilder.offset;
  }
  int addOxyOnCrew(double? oxyOnCrew) {
    fbBuilder.addFloat64(22, oxyOnCrew);
    return fbBuilder.offset;
  }
  int addOxyReqPax(double? oxyReqPax) {
    fbBuilder.addFloat64(23, oxyReqPax);
    return fbBuilder.offset;
  }
  int addOxyOnPax(double? oxyOnPax) {
    fbBuilder.addFloat64(24, oxyOnPax);
    return fbBuilder.offset;
  }
  int addAlertStatusCodeOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addAlertStatus(int? alertStatus) {
    fbBuilder.addInt32(26, alertStatus);
    return fbBuilder.offset;
  }
  int addCurrentStateOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addDepItinerary(int? depItinerary) {
    fbBuilder.addInt32(28, depItinerary);
    return fbBuilder.offset;
  }
  int addDepIcaoOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addDepIataOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addDepFaaOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addPlannedDepTimeOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addEstDepTimeOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addActualDepTimeOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addEstBlockOutTimeOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addActualBlockOutTimeOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addDepPurposeCodeOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addArrItinerary(int? arrItinerary) {
    fbBuilder.addInt32(38, arrItinerary);
    return fbBuilder.offset;
  }
  int addArrIcaoOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addArrIataOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addArrFaaOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addPlannedArrTimeOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addEstArrTimeOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addActualArrTimeOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addEstBlockInTimeOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addActualBlockInTimeOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addArrPurposeCodeOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addDhdOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addDhdReasonOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addAircraftEventOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addSoeOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addLegNum(int? legNum) {
    fbBuilder.addInt32(52, legNum);
    return fbBuilder.offset;
  }
  int addFlightTime(double? flightTime) {
    fbBuilder.addFloat64(53, flightTime);
    return fbBuilder.offset;
  }
  int addGndTime(double? gndTime) {
    fbBuilder.addFloat64(54, gndTime);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(55, offset);
    return fbBuilder.offset;
  }
  int addPapersVersionOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addFilenameOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addFilesize(int? filesize) {
    fbBuilder.addInt32(58, filesize);
    return fbBuilder.offset;
  }
  int addPaperStatus(AircraftSortieIngestPaperStatusEnum? paperStatus) {
    fbBuilder.addInt8(59, paperStatus?.value);
    return fbBuilder.offset;
  }
  int addPprStatus(AircraftSortieIngestPprStatusEnum? pprStatus) {
    fbBuilder.addInt8(60, pprStatus?.value);
    return fbBuilder.offset;
  }
  int addMissionUpdateOffset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addDelayCodeOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addCommanderNameOffset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addFmDeskNumOffset(int? offset) {
    fbBuilder.addOffset(64, offset);
    return fbBuilder.offset;
  }
  int addFmNameOffset(int? offset) {
    fbBuilder.addOffset(65, offset);
    return fbBuilder.offset;
  }
  int addRvnReq(AircraftSortieIngestRvnReqEnum? rvnReq) {
    fbBuilder.addInt8(66, rvnReq?.value);
    return fbBuilder.offset;
  }
  int addPassengers(int? passengers) {
    fbBuilder.addInt32(67, passengers);
    return fbBuilder.offset;
  }
  int addParkingLocOffset(int? offset) {
    fbBuilder.addOffset(68, offset);
    return fbBuilder.offset;
  }
  int addObjectiveRemarksOffset(int? offset) {
    fbBuilder.addOffset(69, offset);
    return fbBuilder.offset;
  }
  int addAircraftRemarksOffset(int? offset) {
    fbBuilder.addOffset(70, offset);
    return fbBuilder.offset;
  }
  int addScheduleRemarksOffset(int? offset) {
    fbBuilder.addOffset(71, offset);
    return fbBuilder.offset;
  }
  int addResultRemarksOffset(int? offset) {
    fbBuilder.addOffset(72, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(73, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(74, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(75, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(76, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(77, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AircraftSortieIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(78, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(79, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AircraftSortieIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _origSortieId;
  final String? _idAircraft;
  final String? _aircraftAltId;
  final String? _tailNumber;
  final String? _aircraftMds;
  final String? _aircraftAdsb;
  final String? _sortieDate;
  final int? _lineNumber;
  final String? _idMission;
  final String? _missionId;
  final String? _amcMsnNum;
  final String? _amcMsnType;
  final String? _callSign;
  final String? _jcsPriority;
  final String? _primaryScl;
  final String? _secondaryScl;
  final String? _reqConfig;
  final String? _cargoConfig;
  final double? _fuelReq;
  final double? _oxyReqCrew;
  final double? _oxyOnCrew;
  final double? _oxyReqPax;
  final double? _oxyOnPax;
  final String? _alertStatusCode;
  final int? _alertStatus;
  final String? _currentState;
  final int? _depItinerary;
  final String? _depIcao;
  final String? _depIata;
  final String? _depFaa;
  final String? _plannedDepTime;
  final String? _estDepTime;
  final String? _actualDepTime;
  final String? _estBlockOutTime;
  final String? _actualBlockOutTime;
  final String? _depPurposeCode;
  final int? _arrItinerary;
  final String? _arrIcao;
  final String? _arrIata;
  final String? _arrFaa;
  final String? _plannedArrTime;
  final String? _estArrTime;
  final String? _actualArrTime;
  final String? _estBlockInTime;
  final String? _actualBlockInTime;
  final String? _arrPurposeCode;
  final String? _dhd;
  final String? _dhdReason;
  final String? _aircraftEvent;
  final String? _soe;
  final int? _legNum;
  final double? _flightTime;
  final double? _gndTime;
  final String? _rawFileUri;
  final String? _papersVersion;
  final String? _filename;
  final int? _filesize;
  final AircraftSortieIngestPaperStatusEnum? _paperStatus;
  final AircraftSortieIngestPprStatusEnum? _pprStatus;
  final String? _missionUpdate;
  final String? _delayCode;
  final String? _commanderName;
  final String? _fmDeskNum;
  final String? _fmName;
  final AircraftSortieIngestRvnReqEnum? _rvnReq;
  final int? _passengers;
  final String? _parkingLoc;
  final String? _objectiveRemarks;
  final String? _aircraftRemarks;
  final String? _scheduleRemarks;
  final String? _resultRemarks;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final AircraftSortieIngestDataModeEnum? _dataMode;
  final String? _origNetwork;

  AircraftSortieIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? origSortieId,
    String? idAircraft,
    String? aircraftAltId,
    String? tailNumber,
    String? aircraftMds,
    String? aircraftAdsb,
    String? sortieDate,
    int? lineNumber,
    String? idMission,
    String? missionId,
    String? amcMsnNum,
    String? amcMsnType,
    String? callSign,
    String? jcsPriority,
    String? primaryScl,
    String? secondaryScl,
    String? reqConfig,
    String? cargoConfig,
    double? fuelReq,
    double? oxyReqCrew,
    double? oxyOnCrew,
    double? oxyReqPax,
    double? oxyOnPax,
    String? alertStatusCode,
    int? alertStatus,
    String? currentState,
    int? depItinerary,
    String? depIcao,
    String? depIata,
    String? depFaa,
    String? plannedDepTime,
    String? estDepTime,
    String? actualDepTime,
    String? estBlockOutTime,
    String? actualBlockOutTime,
    String? depPurposeCode,
    int? arrItinerary,
    String? arrIcao,
    String? arrIata,
    String? arrFaa,
    String? plannedArrTime,
    String? estArrTime,
    String? actualArrTime,
    String? estBlockInTime,
    String? actualBlockInTime,
    String? arrPurposeCode,
    String? dhd,
    String? dhdReason,
    String? aircraftEvent,
    String? soe,
    int? legNum,
    double? flightTime,
    double? gndTime,
    String? rawFileUri,
    String? papersVersion,
    String? filename,
    int? filesize,
    AircraftSortieIngestPaperStatusEnum? paperStatus,
    AircraftSortieIngestPprStatusEnum? pprStatus,
    String? missionUpdate,
    String? delayCode,
    String? commanderName,
    String? fmDeskNum,
    String? fmName,
    AircraftSortieIngestRvnReqEnum? rvnReq,
    int? passengers,
    String? parkingLoc,
    String? objectiveRemarks,
    String? aircraftRemarks,
    String? scheduleRemarks,
    String? resultRemarks,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    String? origin,
    AircraftSortieIngestDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _origSortieId = origSortieId,
        _idAircraft = idAircraft,
        _aircraftAltId = aircraftAltId,
        _tailNumber = tailNumber,
        _aircraftMds = aircraftMds,
        _aircraftAdsb = aircraftAdsb,
        _sortieDate = sortieDate,
        _lineNumber = lineNumber,
        _idMission = idMission,
        _missionId = missionId,
        _amcMsnNum = amcMsnNum,
        _amcMsnType = amcMsnType,
        _callSign = callSign,
        _jcsPriority = jcsPriority,
        _primaryScl = primaryScl,
        _secondaryScl = secondaryScl,
        _reqConfig = reqConfig,
        _cargoConfig = cargoConfig,
        _fuelReq = fuelReq,
        _oxyReqCrew = oxyReqCrew,
        _oxyOnCrew = oxyOnCrew,
        _oxyReqPax = oxyReqPax,
        _oxyOnPax = oxyOnPax,
        _alertStatusCode = alertStatusCode,
        _alertStatus = alertStatus,
        _currentState = currentState,
        _depItinerary = depItinerary,
        _depIcao = depIcao,
        _depIata = depIata,
        _depFaa = depFaa,
        _plannedDepTime = plannedDepTime,
        _estDepTime = estDepTime,
        _actualDepTime = actualDepTime,
        _estBlockOutTime = estBlockOutTime,
        _actualBlockOutTime = actualBlockOutTime,
        _depPurposeCode = depPurposeCode,
        _arrItinerary = arrItinerary,
        _arrIcao = arrIcao,
        _arrIata = arrIata,
        _arrFaa = arrFaa,
        _plannedArrTime = plannedArrTime,
        _estArrTime = estArrTime,
        _actualArrTime = actualArrTime,
        _estBlockInTime = estBlockInTime,
        _actualBlockInTime = actualBlockInTime,
        _arrPurposeCode = arrPurposeCode,
        _dhd = dhd,
        _dhdReason = dhdReason,
        _aircraftEvent = aircraftEvent,
        _soe = soe,
        _legNum = legNum,
        _flightTime = flightTime,
        _gndTime = gndTime,
        _rawFileUri = rawFileUri,
        _papersVersion = papersVersion,
        _filename = filename,
        _filesize = filesize,
        _paperStatus = paperStatus,
        _pprStatus = pprStatus,
        _missionUpdate = missionUpdate,
        _delayCode = delayCode,
        _commanderName = commanderName,
        _fmDeskNum = fmDeskNum,
        _fmName = fmName,
        _rvnReq = rvnReq,
        _passengers = passengers,
        _parkingLoc = parkingLoc,
        _objectiveRemarks = objectiveRemarks,
        _aircraftRemarks = aircraftRemarks,
        _scheduleRemarks = scheduleRemarks,
        _resultRemarks = resultRemarks,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? origSortieIdOffset = _origSortieId == null ? null
        : fbBuilder.writeString(_origSortieId!);
    final int? idAircraftOffset = _idAircraft == null ? null
        : fbBuilder.writeString(_idAircraft!);
    final int? aircraftAltIdOffset = _aircraftAltId == null ? null
        : fbBuilder.writeString(_aircraftAltId!);
    final int? tailNumberOffset = _tailNumber == null ? null
        : fbBuilder.writeString(_tailNumber!);
    final int? aircraftMdsOffset = _aircraftMds == null ? null
        : fbBuilder.writeString(_aircraftMds!);
    final int? aircraftAdsbOffset = _aircraftAdsb == null ? null
        : fbBuilder.writeString(_aircraftAdsb!);
    final int? sortieDateOffset = _sortieDate == null ? null
        : fbBuilder.writeString(_sortieDate!);
    final int? idMissionOffset = _idMission == null ? null
        : fbBuilder.writeString(_idMission!);
    final int? missionIdOffset = _missionId == null ? null
        : fbBuilder.writeString(_missionId!);
    final int? amcMsnNumOffset = _amcMsnNum == null ? null
        : fbBuilder.writeString(_amcMsnNum!);
    final int? amcMsnTypeOffset = _amcMsnType == null ? null
        : fbBuilder.writeString(_amcMsnType!);
    final int? callSignOffset = _callSign == null ? null
        : fbBuilder.writeString(_callSign!);
    final int? jcsPriorityOffset = _jcsPriority == null ? null
        : fbBuilder.writeString(_jcsPriority!);
    final int? primarySclOffset = _primaryScl == null ? null
        : fbBuilder.writeString(_primaryScl!);
    final int? secondarySclOffset = _secondaryScl == null ? null
        : fbBuilder.writeString(_secondaryScl!);
    final int? reqConfigOffset = _reqConfig == null ? null
        : fbBuilder.writeString(_reqConfig!);
    final int? cargoConfigOffset = _cargoConfig == null ? null
        : fbBuilder.writeString(_cargoConfig!);
    final int? alertStatusCodeOffset = _alertStatusCode == null ? null
        : fbBuilder.writeString(_alertStatusCode!);
    final int? currentStateOffset = _currentState == null ? null
        : fbBuilder.writeString(_currentState!);
    final int? depIcaoOffset = _depIcao == null ? null
        : fbBuilder.writeString(_depIcao!);
    final int? depIataOffset = _depIata == null ? null
        : fbBuilder.writeString(_depIata!);
    final int? depFaaOffset = _depFaa == null ? null
        : fbBuilder.writeString(_depFaa!);
    final int? plannedDepTimeOffset = _plannedDepTime == null ? null
        : fbBuilder.writeString(_plannedDepTime!);
    final int? estDepTimeOffset = _estDepTime == null ? null
        : fbBuilder.writeString(_estDepTime!);
    final int? actualDepTimeOffset = _actualDepTime == null ? null
        : fbBuilder.writeString(_actualDepTime!);
    final int? estBlockOutTimeOffset = _estBlockOutTime == null ? null
        : fbBuilder.writeString(_estBlockOutTime!);
    final int? actualBlockOutTimeOffset = _actualBlockOutTime == null ? null
        : fbBuilder.writeString(_actualBlockOutTime!);
    final int? depPurposeCodeOffset = _depPurposeCode == null ? null
        : fbBuilder.writeString(_depPurposeCode!);
    final int? arrIcaoOffset = _arrIcao == null ? null
        : fbBuilder.writeString(_arrIcao!);
    final int? arrIataOffset = _arrIata == null ? null
        : fbBuilder.writeString(_arrIata!);
    final int? arrFaaOffset = _arrFaa == null ? null
        : fbBuilder.writeString(_arrFaa!);
    final int? plannedArrTimeOffset = _plannedArrTime == null ? null
        : fbBuilder.writeString(_plannedArrTime!);
    final int? estArrTimeOffset = _estArrTime == null ? null
        : fbBuilder.writeString(_estArrTime!);
    final int? actualArrTimeOffset = _actualArrTime == null ? null
        : fbBuilder.writeString(_actualArrTime!);
    final int? estBlockInTimeOffset = _estBlockInTime == null ? null
        : fbBuilder.writeString(_estBlockInTime!);
    final int? actualBlockInTimeOffset = _actualBlockInTime == null ? null
        : fbBuilder.writeString(_actualBlockInTime!);
    final int? arrPurposeCodeOffset = _arrPurposeCode == null ? null
        : fbBuilder.writeString(_arrPurposeCode!);
    final int? dhdOffset = _dhd == null ? null
        : fbBuilder.writeString(_dhd!);
    final int? dhdReasonOffset = _dhdReason == null ? null
        : fbBuilder.writeString(_dhdReason!);
    final int? aircraftEventOffset = _aircraftEvent == null ? null
        : fbBuilder.writeString(_aircraftEvent!);
    final int? soeOffset = _soe == null ? null
        : fbBuilder.writeString(_soe!);
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? papersVersionOffset = _papersVersion == null ? null
        : fbBuilder.writeString(_papersVersion!);
    final int? filenameOffset = _filename == null ? null
        : fbBuilder.writeString(_filename!);
    final int? missionUpdateOffset = _missionUpdate == null ? null
        : fbBuilder.writeString(_missionUpdate!);
    final int? delayCodeOffset = _delayCode == null ? null
        : fbBuilder.writeString(_delayCode!);
    final int? commanderNameOffset = _commanderName == null ? null
        : fbBuilder.writeString(_commanderName!);
    final int? fmDeskNumOffset = _fmDeskNum == null ? null
        : fbBuilder.writeString(_fmDeskNum!);
    final int? fmNameOffset = _fmName == null ? null
        : fbBuilder.writeString(_fmName!);
    final int? parkingLocOffset = _parkingLoc == null ? null
        : fbBuilder.writeString(_parkingLoc!);
    final int? objectiveRemarksOffset = _objectiveRemarks == null ? null
        : fbBuilder.writeString(_objectiveRemarks!);
    final int? aircraftRemarksOffset = _aircraftRemarks == null ? null
        : fbBuilder.writeString(_aircraftRemarks!);
    final int? scheduleRemarksOffset = _scheduleRemarks == null ? null
        : fbBuilder.writeString(_scheduleRemarks!);
    final int? resultRemarksOffset = _resultRemarks == null ? null
        : fbBuilder.writeString(_resultRemarks!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(80);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, origSortieIdOffset);
    fbBuilder.addOffset(3, idAircraftOffset);
    fbBuilder.addOffset(4, aircraftAltIdOffset);
    fbBuilder.addOffset(5, tailNumberOffset);
    fbBuilder.addOffset(6, aircraftMdsOffset);
    fbBuilder.addOffset(7, aircraftAdsbOffset);
    fbBuilder.addOffset(8, sortieDateOffset);
    fbBuilder.addInt32(9, _lineNumber);
    fbBuilder.addOffset(10, idMissionOffset);
    fbBuilder.addOffset(11, missionIdOffset);
    fbBuilder.addOffset(12, amcMsnNumOffset);
    fbBuilder.addOffset(13, amcMsnTypeOffset);
    fbBuilder.addOffset(14, callSignOffset);
    fbBuilder.addOffset(15, jcsPriorityOffset);
    fbBuilder.addOffset(16, primarySclOffset);
    fbBuilder.addOffset(17, secondarySclOffset);
    fbBuilder.addOffset(18, reqConfigOffset);
    fbBuilder.addOffset(19, cargoConfigOffset);
    fbBuilder.addFloat64(20, _fuelReq);
    fbBuilder.addFloat64(21, _oxyReqCrew);
    fbBuilder.addFloat64(22, _oxyOnCrew);
    fbBuilder.addFloat64(23, _oxyReqPax);
    fbBuilder.addFloat64(24, _oxyOnPax);
    fbBuilder.addOffset(25, alertStatusCodeOffset);
    fbBuilder.addInt32(26, _alertStatus);
    fbBuilder.addOffset(27, currentStateOffset);
    fbBuilder.addInt32(28, _depItinerary);
    fbBuilder.addOffset(29, depIcaoOffset);
    fbBuilder.addOffset(30, depIataOffset);
    fbBuilder.addOffset(31, depFaaOffset);
    fbBuilder.addOffset(32, plannedDepTimeOffset);
    fbBuilder.addOffset(33, estDepTimeOffset);
    fbBuilder.addOffset(34, actualDepTimeOffset);
    fbBuilder.addOffset(35, estBlockOutTimeOffset);
    fbBuilder.addOffset(36, actualBlockOutTimeOffset);
    fbBuilder.addOffset(37, depPurposeCodeOffset);
    fbBuilder.addInt32(38, _arrItinerary);
    fbBuilder.addOffset(39, arrIcaoOffset);
    fbBuilder.addOffset(40, arrIataOffset);
    fbBuilder.addOffset(41, arrFaaOffset);
    fbBuilder.addOffset(42, plannedArrTimeOffset);
    fbBuilder.addOffset(43, estArrTimeOffset);
    fbBuilder.addOffset(44, actualArrTimeOffset);
    fbBuilder.addOffset(45, estBlockInTimeOffset);
    fbBuilder.addOffset(46, actualBlockInTimeOffset);
    fbBuilder.addOffset(47, arrPurposeCodeOffset);
    fbBuilder.addOffset(48, dhdOffset);
    fbBuilder.addOffset(49, dhdReasonOffset);
    fbBuilder.addOffset(50, aircraftEventOffset);
    fbBuilder.addOffset(51, soeOffset);
    fbBuilder.addInt32(52, _legNum);
    fbBuilder.addFloat64(53, _flightTime);
    fbBuilder.addFloat64(54, _gndTime);
    fbBuilder.addOffset(55, rawFileUriOffset);
    fbBuilder.addOffset(56, papersVersionOffset);
    fbBuilder.addOffset(57, filenameOffset);
    fbBuilder.addInt32(58, _filesize);
    fbBuilder.addInt8(59, _paperStatus?.value);
    fbBuilder.addInt8(60, _pprStatus?.value);
    fbBuilder.addOffset(61, missionUpdateOffset);
    fbBuilder.addOffset(62, delayCodeOffset);
    fbBuilder.addOffset(63, commanderNameOffset);
    fbBuilder.addOffset(64, fmDeskNumOffset);
    fbBuilder.addOffset(65, fmNameOffset);
    fbBuilder.addInt8(66, _rvnReq?.value);
    fbBuilder.addInt32(67, _passengers);
    fbBuilder.addOffset(68, parkingLocOffset);
    fbBuilder.addOffset(69, objectiveRemarksOffset);
    fbBuilder.addOffset(70, aircraftRemarksOffset);
    fbBuilder.addOffset(71, scheduleRemarksOffset);
    fbBuilder.addOffset(72, resultRemarksOffset);
    fbBuilder.addOffset(73, createdAtOffset);
    fbBuilder.addOffset(74, createdByOffset);
    fbBuilder.addOffset(75, sourceDlOffset);
    fbBuilder.addOffset(76, sourceOffset);
    fbBuilder.addOffset(77, originOffset);
    fbBuilder.addInt8(78, _dataMode?.value);
    fbBuilder.addOffset(79, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
