// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Health state information.
class EvacHealthStateFull {
  EvacHealthStateFull._(this._bc, this._bcOffset);
  factory EvacHealthStateFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EvacHealthStateFull> reader = _EvacHealthStateFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION, LIFE SIGN, RADIATION, SHOCK, THERMAL).
  ///  Example: /// Example: COGNITIVE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Medical color code used to quickly identify various medical state (e.g. AMBER, BLACK, BLUE, GRAY, NORMAL, RED).
  ///  Example: /// Example: BLUE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get healthStateCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Medical confidence factor.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get medConfFactor => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
  ///  Example: /// Example: 2021-10-15T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get time => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'EvacHealthStateFull{type: ${type}, healthStateCode: ${healthStateCode}, medConfFactor: ${medConfFactor}, time: ${time}}';
  }
}

class _EvacHealthStateFullReader extends fb.TableReader<EvacHealthStateFull> {
  const _EvacHealthStateFullReader();

  @override
  EvacHealthStateFull createObject(fb.BufferContext bc, int offset) => 
    EvacHealthStateFull._(bc, offset);
}

class EvacHealthStateFullBuilder {
  EvacHealthStateFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHealthStateCodeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMedConfFactor(int? medConfFactor) {
    fbBuilder.addInt32(2, medConfFactor);
    return fbBuilder.offset;
  }
  int addTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EvacHealthStateFullObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _healthStateCode;
  final int? _medConfFactor;
  final String? _time;

  EvacHealthStateFullObjectBuilder({
    String? type,
    String? healthStateCode,
    int? medConfFactor,
    String? time,
  })
      : _type = type,
        _healthStateCode = healthStateCode,
        _medConfFactor = medConfFactor,
        _time = time;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? healthStateCodeOffset = _healthStateCode == null ? null
        : fbBuilder.writeString(_healthStateCode!);
    final int? timeOffset = _time == null ? null
        : fbBuilder.writeString(_time!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, healthStateCodeOffset);
    fbBuilder.addInt32(2, _medConfFactor);
    fbBuilder.addOffset(3, timeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
