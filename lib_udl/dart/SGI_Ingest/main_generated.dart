// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SgiIngestStateEnum {
  final int value;
  const SgiIngestStateEnum._(this.value);

  factory SgiIngestStateEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SgiIngestStateEnum');
    }
    return result;
  }

  static SgiIngestStateEnum? _createOrNull(int? value) => 
      value == null ? null : SgiIngestStateEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SgiIngestStateEnum I = SgiIngestStateEnum._(0);

  ///  No description available.
  static const SgiIngestStateEnum N = SgiIngestStateEnum._(1);

  ///  No description available.
  static const SgiIngestStateEnum P = SgiIngestStateEnum._(2);
  static const Map<int, SgiIngestStateEnum> values = {
    0: I,
    1: N,
    2: P};

  static const fb.Reader<SgiIngestStateEnum> reader = _SgiIngestStateEnumReader();

  @override
  String toString() {
    return 'SgiIngestStateEnum{value: $value}';
  }
}

class _SgiIngestStateEnumReader extends fb.Reader<SgiIngestStateEnum> {
  const _SgiIngestStateEnumReader();

  @override
  int get size => 1;

  @override
  SgiIngestStateEnum read(fb.BufferContext bc, int offset) =>
      SgiIngestStateEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SgiIngestPrecedenceEnum {
  final int value;
  const SgiIngestPrecedenceEnum._(this.value);

  factory SgiIngestPrecedenceEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SgiIngestPrecedenceEnum');
    }
    return result;
  }

  static SgiIngestPrecedenceEnum? _createOrNull(int? value) => 
      value == null ? null : SgiIngestPrecedenceEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SgiIngestPrecedenceEnum O = SgiIngestPrecedenceEnum._(0);

  ///  No description available.
  static const SgiIngestPrecedenceEnum P = SgiIngestPrecedenceEnum._(1);

  ///  No description available.
  static const SgiIngestPrecedenceEnum R = SgiIngestPrecedenceEnum._(2);

  ///  No description available.
  static const SgiIngestPrecedenceEnum Y = SgiIngestPrecedenceEnum._(3);

  ///  No description available.
  static const SgiIngestPrecedenceEnum Z = SgiIngestPrecedenceEnum._(4);
  static const Map<int, SgiIngestPrecedenceEnum> values = {
    0: O,
    1: P,
    2: R,
    3: Y,
    4: Z};

  static const fb.Reader<SgiIngestPrecedenceEnum> reader = _SgiIngestPrecedenceEnumReader();

  @override
  String toString() {
    return 'SgiIngestPrecedenceEnum{value: $value}';
  }
}

class _SgiIngestPrecedenceEnumReader extends fb.Reader<SgiIngestPrecedenceEnum> {
  const _SgiIngestPrecedenceEnumReader();

  @override
  int get size => 1;

  @override
  SgiIngestPrecedenceEnum read(fb.BufferContext bc, int offset) =>
      SgiIngestPrecedenceEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SgiIngestDataModeEnum {
  final int value;
  const SgiIngestDataModeEnum._(this.value);

  factory SgiIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SgiIngestDataModeEnum');
    }
    return result;
  }

  static SgiIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SgiIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SgiIngestDataModeEnum REAL = SgiIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SgiIngestDataModeEnum TEST = SgiIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SgiIngestDataModeEnum SIMULATED = SgiIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SgiIngestDataModeEnum EXERCISE = SgiIngestDataModeEnum._(3);
  static const Map<int, SgiIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SgiIngestDataModeEnum> reader = _SgiIngestDataModeEnumReader();

  @override
  String toString() {
    return 'SgiIngestDataModeEnum{value: $value}';
  }
}

class _SgiIngestDataModeEnumReader extends fb.Reader<SgiIngestDataModeEnum> {
  const _SgiIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SgiIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      SgiIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of space weather/solar, geomagnetic, and radiation belt indices.
class SgiIngest {
  SgiIngest._(this._bc, this._bcOffset);
  factory SgiIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SgiIngest> reader = _SgiIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SGI-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  ISO8601 UTC Time the data was received and processed from the source. Typically a source provides data for a date window with each transmission including past, present, and future predicted values.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get effectiveDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  ISO8601 UTC Time of the index value. This could be a past, current, or future predicted value. Note: sgiDate defines the start time of the time window for this  data record.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get sgiDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The type of data contained in this record (e.g. HASDM, JBH09, K-Index, PSD-dB, RBI, RFI-SFU, etc).
  ///  Example: /// Example: JBH09
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  State indicating Issued (I), Nowcast (N), or Predicted (P) values for this record.
  ///  Example: /// Example: I
  ///  Constraints: Minimum length = 0, Maximum length = 1
  SgiIngestStateEnum get state => SgiIngestStateEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 14, 0));
  ///  The name/location of the station that collected the geomagnetic data for this record.
  ///  Example: /// Example: Boulder
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get stationName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: 57c96c97-e076-48af-a068-73ee2cb37e65
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Optional identifier provided by the reporting source to indicate the sensor identifier which produced this data. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The transmitted DCA mode of the record (1-3).
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get mode => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 22, 0);
  ///  The precedence of data in this record (O = Immediate, P = Priority, R = Routine, Y = Emergency, Z = Flash).
  ///  Example: /// Example: R
  ///  Constraints: Minimum length = 0, Maximum length = 1
  SgiIngestPrecedenceEnum get precedence => SgiIngestPrecedenceEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 24, 0));
  ///  Array containing the degree of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
  ///  Example: /// Example: [1, 2, 3]
  ///  Constraints: No constraints specified.
  List<String>? get coeffDegree => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 26);
  ///  Array containing the order of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
  ///  Example: /// Example: [1, 2, 3]
  ///  Constraints: No constraints specified.
  List<String>? get coeffOrder => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 28);
  ///  Array containing the cosine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  ///  Example: /// Example: [1.23, 342.3, 1.32]
  ///  Constraints: No constraints specified.
  List<String>? get ctce => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  Array containing the sine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  ///  Example: /// Example: [1.23, 342.3, 1.32]
  ///  Constraints: No constraints specified.
  List<String>? get stce => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  Array containing the cosine spherical-harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  ///  Example: /// Example: [1.23, 342.3, 1.32]
  ///  Constraints: No constraints specified.
  List<String>? get ctci => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  ///  Array containing the sine spherical harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  ///  Example: /// Example: [1.23, 342.3, 1.32]
  ///  Constraints: No constraints specified.
  List<String>? get stci => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 36);
  ///  Extreme Ultraviolet (EUV) proxy, E10.7, in x10-22 Watts per meter squared per Hertz, is the integrated solar EUV energy flux at the top of atmosphere and normalized to solar flux units.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get e10 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  E54 (E10-Bar), in x10-22 Watts per meter squared per Hertz, uses the past 54-days E10 values to determine the E10 average.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get e54 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Daily S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get s10 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  54 day S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get s54 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Daily M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get m10 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  54 day M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get m54 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Daily Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get y10 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  54 day Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get y54 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Daily solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get f10 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  54 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get f54 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  81 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get f81 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Ap is the planetary geomagnetic 2 nT index (00-21 UT) for the timespan specified in apDuration. If apDuration is null, a 3 hour duration should be assumed.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get ap => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  The time, in hours, for which the Ap index value is valid. If null, a span of 3 hours is assumed.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get apDuration => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 62, 0);
  ///  The maximum measured K-Index at the associated station during the kpDuration timespan. The K-Index is a unitless measure (0 - 9) of the deviation in the Earth's magnetic field from normal at the station geographic location, with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get kIndex => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 64, 0);
  ///  The Planetary K-index (Kp) over the kpDuration timespan. The Kp-Index is the average K-Index for the entire Earth, utilizing a unitless scale (0-9, in incremenets of 1/3), with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
  ///  Example: /// Example: 4.66
  ///  Constraints: No constraints specified.
  double get kp => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  The time, in hours, over which the K, Kp, and/or gamma index values are measured.  If null, a span of 3 hours is assumed.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get kpDuration => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 68, 0);
  ///  The maximum measured gamma deflection during the kpDuration timespan. If kpDuration is null, a 3 hour duration should be assumed.
  ///  Example: /// Example: 25
  ///  Constraints: No constraints specified.
  int get gamma => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 70, 0);
  ///  Disturbance Storm Time geomagnetic index in nT.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get dst => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  delta exospheric temperature correction in units of K.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get dtc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  Region code for the associated radiation belt index. This is the code associated with the corresponding radiation belt location. See the provider card for reference to specific region code definitions.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get rbRegionCode => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 76, 0);
  ///  The value of the radiation belt index. This is the ratio of current intensity of a radiation belt to long-term average value. It's long-term average should be close to 1. Depending on the type of belt sensor, this ratio may measure Flux (number of particles / (cm^2 sec energy solid-angle)), dose rate (rad per second), or relative counts of particles per time (counts per second). The index value may also be normalized, the normalization value typically represents an average of the sensor measurements taken within a region over a given time interval. See the normFactor field for the specific normalization factor, if provided.
  ///  Example: /// Example: 1.02947164506
  ///  Constraints: No constraints specified.
  double get rbIndex => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  The normalization factor that has already been applied to the index value prior to record ingest. Typically used to normalize the index value to a particular interval. Units of the normalization factor may vary depending on the provider of this data (REACH, POES, CEASE3, etc.).
  ///  Example: /// Example: 2.12679e-07
  ///  Constraints: No constraints specified.
  double get normFactor => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  The timespan over which the associated radiation belt index is factored. If rbDuration is null, a 24 hour duration should be assumed. Note: rbDuration defines the length of the time window for this data record. The time window start time is defined by sgiDate, and the time window end time is defined by sgiDate plus rbDuration.
  ///  Example: /// Example: 24
  ///  Constraints: No constraints specified.
  int get rbDuration => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 82, 0);
  ///  Signal analyzer's input attenuation level, in decibels. Attenuation is a setting on the hardware that measures the power of a signal.
  ///  Example: /// Example: 5.1
  ///  Constraints: No constraints specified.
  double get analyzerAttenuation => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Observed baseline values of the frequencies specified in the frequencies field, in solar flux units. The baseline values will be used to help detect abnormal readings from the sun that might indicate a flare or other solar activity.
  ///  Example: /// Example: [15, 32, 25, 134, 0, 6, 19, 8]
  ///  Constraints: No constraints specified.
  List<String>? get observedBaseline => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 86);
  ///  Array of individual power spectral density (PSD) frequencies of the signal, in megahertz. This array should correspond with the same-sized array of powers.
  ///  Example: /// Example: [25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875]
  ///  Constraints: No constraints specified.
  List<String>? get frequencies => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 88);
  ///  Array of individual power spectral density (PSD) powers of the signal, in watts. This array should correspond with the same-sized array of frequencies.
  ///  Example: /// Example: [67.1, 65.2, 68.1, 74.3, 68.1, 96.4, 97.3, 68.1]
  ///  Constraints: No constraints specified.
  List<String>? get powers => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 90);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: rawFileURI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 96);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SgiIngestDataModeEnum get dataMode => SgiIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 104, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);

  @override
  String toString() {
    return 'SgiIngest{id: ${id}, classificationMarking: ${classificationMarking}, effectiveDate: ${effectiveDate}, sgiDate: ${sgiDate}, type: ${type}, state: ${state}, stationName: ${stationName}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, mode: ${mode}, precedence: ${precedence}, coeffDegree: ${coeffDegree}, coeffOrder: ${coeffOrder}, ctce: ${ctce}, stce: ${stce}, ctci: ${ctci}, stci: ${stci}, e10: ${e10}, e54: ${e54}, s10: ${s10}, s54: ${s54}, m10: ${m10}, m54: ${m54}, y10: ${y10}, y54: ${y54}, f10: ${f10}, f54: ${f54}, f81: ${f81}, ap: ${ap}, apDuration: ${apDuration}, kIndex: ${kIndex}, kp: ${kp}, kpDuration: ${kpDuration}, gamma: ${gamma}, dst: ${dst}, dtc: ${dtc}, rbRegionCode: ${rbRegionCode}, rbIndex: ${rbIndex}, normFactor: ${normFactor}, rbDuration: ${rbDuration}, analyzerAttenuation: ${analyzerAttenuation}, observedBaseline: ${observedBaseline}, frequencies: ${frequencies}, powers: ${powers}, rawFileUri: ${rawFileUri}, transactionId: ${transactionId}, tags: ${tags}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}}';
  }
}

class _SgiIngestReader extends fb.TableReader<SgiIngest> {
  const _SgiIngestReader();

  @override
  SgiIngest createObject(fb.BufferContext bc, int offset) => 
    SgiIngest._(bc, offset);
}

class SgiIngestBuilder {
  SgiIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(53);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEffectiveDateOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSgiDateOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addState(SgiIngestStateEnum? state) {
    fbBuilder.addInt8(5, state?.value);
    return fbBuilder.offset;
  }
  int addStationNameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addMode(int? mode) {
    fbBuilder.addInt32(9, mode);
    return fbBuilder.offset;
  }
  int addPrecedence(SgiIngestPrecedenceEnum? precedence) {
    fbBuilder.addInt8(10, precedence?.value);
    return fbBuilder.offset;
  }
  int addCoeffDegreeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCoeffOrderOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addCtceOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addStceOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCtciOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addStciOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addE10(double? e10) {
    fbBuilder.addFloat64(17, e10);
    return fbBuilder.offset;
  }
  int addE54(double? e54) {
    fbBuilder.addFloat64(18, e54);
    return fbBuilder.offset;
  }
  int addS10(double? s10) {
    fbBuilder.addFloat64(19, s10);
    return fbBuilder.offset;
  }
  int addS54(double? s54) {
    fbBuilder.addFloat64(20, s54);
    return fbBuilder.offset;
  }
  int addM10(double? m10) {
    fbBuilder.addFloat64(21, m10);
    return fbBuilder.offset;
  }
  int addM54(double? m54) {
    fbBuilder.addFloat64(22, m54);
    return fbBuilder.offset;
  }
  int addY10(double? y10) {
    fbBuilder.addFloat64(23, y10);
    return fbBuilder.offset;
  }
  int addY54(double? y54) {
    fbBuilder.addFloat64(24, y54);
    return fbBuilder.offset;
  }
  int addF10(double? f10) {
    fbBuilder.addFloat64(25, f10);
    return fbBuilder.offset;
  }
  int addF54(double? f54) {
    fbBuilder.addFloat64(26, f54);
    return fbBuilder.offset;
  }
  int addF81(double? f81) {
    fbBuilder.addFloat64(27, f81);
    return fbBuilder.offset;
  }
  int addAp(double? ap) {
    fbBuilder.addFloat64(28, ap);
    return fbBuilder.offset;
  }
  int addApDuration(int? apDuration) {
    fbBuilder.addInt32(29, apDuration);
    return fbBuilder.offset;
  }
  int addKIndex(int? kIndex) {
    fbBuilder.addInt32(30, kIndex);
    return fbBuilder.offset;
  }
  int addKp(double? kp) {
    fbBuilder.addFloat64(31, kp);
    return fbBuilder.offset;
  }
  int addKpDuration(int? kpDuration) {
    fbBuilder.addInt32(32, kpDuration);
    return fbBuilder.offset;
  }
  int addGamma(int? gamma) {
    fbBuilder.addInt32(33, gamma);
    return fbBuilder.offset;
  }
  int addDst(double? dst) {
    fbBuilder.addFloat64(34, dst);
    return fbBuilder.offset;
  }
  int addDtc(double? dtc) {
    fbBuilder.addFloat64(35, dtc);
    return fbBuilder.offset;
  }
  int addRbRegionCode(int? rbRegionCode) {
    fbBuilder.addInt32(36, rbRegionCode);
    return fbBuilder.offset;
  }
  int addRbIndex(double? rbIndex) {
    fbBuilder.addFloat64(37, rbIndex);
    return fbBuilder.offset;
  }
  int addNormFactor(double? normFactor) {
    fbBuilder.addFloat64(38, normFactor);
    return fbBuilder.offset;
  }
  int addRbDuration(int? rbDuration) {
    fbBuilder.addInt32(39, rbDuration);
    return fbBuilder.offset;
  }
  int addAnalyzerAttenuation(double? analyzerAttenuation) {
    fbBuilder.addFloat64(40, analyzerAttenuation);
    return fbBuilder.offset;
  }
  int addObservedBaselineOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addFrequenciesOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addPowersOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SgiIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(50, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SgiIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _effectiveDate;
  final String? _sgiDate;
  final String? _type;
  final SgiIngestStateEnum? _state;
  final String? _stationName;
  final String? _idSensor;
  final String? _origSensorId;
  final int? _mode;
  final SgiIngestPrecedenceEnum? _precedence;
  final List<String>? _coeffDegree;
  final List<String>? _coeffOrder;
  final List<String>? _ctce;
  final List<String>? _stce;
  final List<String>? _ctci;
  final List<String>? _stci;
  final double? _e10;
  final double? _e54;
  final double? _s10;
  final double? _s54;
  final double? _m10;
  final double? _m54;
  final double? _y10;
  final double? _y54;
  final double? _f10;
  final double? _f54;
  final double? _f81;
  final double? _ap;
  final int? _apDuration;
  final int? _kIndex;
  final double? _kp;
  final int? _kpDuration;
  final int? _gamma;
  final double? _dst;
  final double? _dtc;
  final int? _rbRegionCode;
  final double? _rbIndex;
  final double? _normFactor;
  final int? _rbDuration;
  final double? _analyzerAttenuation;
  final List<String>? _observedBaseline;
  final List<String>? _frequencies;
  final List<String>? _powers;
  final String? _rawFileUri;
  final String? _transactionId;
  final List<String>? _tags;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SgiIngestDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;

  SgiIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? effectiveDate,
    String? sgiDate,
    String? type,
    SgiIngestStateEnum? state,
    String? stationName,
    String? idSensor,
    String? origSensorId,
    int? mode,
    SgiIngestPrecedenceEnum? precedence,
    List<String>? coeffDegree,
    List<String>? coeffOrder,
    List<String>? ctce,
    List<String>? stce,
    List<String>? ctci,
    List<String>? stci,
    double? e10,
    double? e54,
    double? s10,
    double? s54,
    double? m10,
    double? m54,
    double? y10,
    double? y54,
    double? f10,
    double? f54,
    double? f81,
    double? ap,
    int? apDuration,
    int? kIndex,
    double? kp,
    int? kpDuration,
    int? gamma,
    double? dst,
    double? dtc,
    int? rbRegionCode,
    double? rbIndex,
    double? normFactor,
    int? rbDuration,
    double? analyzerAttenuation,
    List<String>? observedBaseline,
    List<String>? frequencies,
    List<String>? powers,
    String? rawFileUri,
    String? transactionId,
    List<String>? tags,
    String? source,
    String? origin,
    String? origNetwork,
    SgiIngestDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _effectiveDate = effectiveDate,
        _sgiDate = sgiDate,
        _type = type,
        _state = state,
        _stationName = stationName,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _mode = mode,
        _precedence = precedence,
        _coeffDegree = coeffDegree,
        _coeffOrder = coeffOrder,
        _ctce = ctce,
        _stce = stce,
        _ctci = ctci,
        _stci = stci,
        _e10 = e10,
        _e54 = e54,
        _s10 = s10,
        _s54 = s54,
        _m10 = m10,
        _m54 = m54,
        _y10 = y10,
        _y54 = y54,
        _f10 = f10,
        _f54 = f54,
        _f81 = f81,
        _ap = ap,
        _apDuration = apDuration,
        _kIndex = kIndex,
        _kp = kp,
        _kpDuration = kpDuration,
        _gamma = gamma,
        _dst = dst,
        _dtc = dtc,
        _rbRegionCode = rbRegionCode,
        _rbIndex = rbIndex,
        _normFactor = normFactor,
        _rbDuration = rbDuration,
        _analyzerAttenuation = analyzerAttenuation,
        _observedBaseline = observedBaseline,
        _frequencies = frequencies,
        _powers = powers,
        _rawFileUri = rawFileUri,
        _transactionId = transactionId,
        _tags = tags,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? effectiveDateOffset = _effectiveDate == null ? null
        : fbBuilder.writeString(_effectiveDate!);
    final int? sgiDateOffset = _sgiDate == null ? null
        : fbBuilder.writeString(_sgiDate!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? stationNameOffset = _stationName == null ? null
        : fbBuilder.writeString(_stationName!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? coeffDegreeOffset = _coeffDegree == null ? null
        : fbBuilder.writeList(_coeffDegree!.map(fbBuilder.writeString).toList());
    final int? coeffOrderOffset = _coeffOrder == null ? null
        : fbBuilder.writeList(_coeffOrder!.map(fbBuilder.writeString).toList());
    final int? ctceOffset = _ctce == null ? null
        : fbBuilder.writeList(_ctce!.map(fbBuilder.writeString).toList());
    final int? stceOffset = _stce == null ? null
        : fbBuilder.writeList(_stce!.map(fbBuilder.writeString).toList());
    final int? ctciOffset = _ctci == null ? null
        : fbBuilder.writeList(_ctci!.map(fbBuilder.writeString).toList());
    final int? stciOffset = _stci == null ? null
        : fbBuilder.writeList(_stci!.map(fbBuilder.writeString).toList());
    final int? observedBaselineOffset = _observedBaseline == null ? null
        : fbBuilder.writeList(_observedBaseline!.map(fbBuilder.writeString).toList());
    final int? frequenciesOffset = _frequencies == null ? null
        : fbBuilder.writeList(_frequencies!.map(fbBuilder.writeString).toList());
    final int? powersOffset = _powers == null ? null
        : fbBuilder.writeList(_powers!.map(fbBuilder.writeString).toList());
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    fbBuilder.startTable(53);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, effectiveDateOffset);
    fbBuilder.addOffset(3, sgiDateOffset);
    fbBuilder.addOffset(4, typeOffset);
    fbBuilder.addInt8(5, _state?.value);
    fbBuilder.addOffset(6, stationNameOffset);
    fbBuilder.addOffset(7, idSensorOffset);
    fbBuilder.addOffset(8, origSensorIdOffset);
    fbBuilder.addInt32(9, _mode);
    fbBuilder.addInt8(10, _precedence?.value);
    fbBuilder.addOffset(11, coeffDegreeOffset);
    fbBuilder.addOffset(12, coeffOrderOffset);
    fbBuilder.addOffset(13, ctceOffset);
    fbBuilder.addOffset(14, stceOffset);
    fbBuilder.addOffset(15, ctciOffset);
    fbBuilder.addOffset(16, stciOffset);
    fbBuilder.addFloat64(17, _e10);
    fbBuilder.addFloat64(18, _e54);
    fbBuilder.addFloat64(19, _s10);
    fbBuilder.addFloat64(20, _s54);
    fbBuilder.addFloat64(21, _m10);
    fbBuilder.addFloat64(22, _m54);
    fbBuilder.addFloat64(23, _y10);
    fbBuilder.addFloat64(24, _y54);
    fbBuilder.addFloat64(25, _f10);
    fbBuilder.addFloat64(26, _f54);
    fbBuilder.addFloat64(27, _f81);
    fbBuilder.addFloat64(28, _ap);
    fbBuilder.addInt32(29, _apDuration);
    fbBuilder.addInt32(30, _kIndex);
    fbBuilder.addFloat64(31, _kp);
    fbBuilder.addInt32(32, _kpDuration);
    fbBuilder.addInt32(33, _gamma);
    fbBuilder.addFloat64(34, _dst);
    fbBuilder.addFloat64(35, _dtc);
    fbBuilder.addInt32(36, _rbRegionCode);
    fbBuilder.addFloat64(37, _rbIndex);
    fbBuilder.addFloat64(38, _normFactor);
    fbBuilder.addInt32(39, _rbDuration);
    fbBuilder.addFloat64(40, _analyzerAttenuation);
    fbBuilder.addOffset(41, observedBaselineOffset);
    fbBuilder.addOffset(42, frequenciesOffset);
    fbBuilder.addOffset(43, powersOffset);
    fbBuilder.addOffset(44, rawFileUriOffset);
    fbBuilder.addOffset(45, transactionIdOffset);
    fbBuilder.addOffset(46, tagsOffset);
    fbBuilder.addOffset(47, sourceOffset);
    fbBuilder.addOffset(48, originOffset);
    fbBuilder.addOffset(49, origNetworkOffset);
    fbBuilder.addInt8(50, _dataMode?.value);
    fbBuilder.addOffset(51, createdAtOffset);
    fbBuilder.addOffset(52, createdByOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
