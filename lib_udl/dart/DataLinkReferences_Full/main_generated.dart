// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
class DataLinkReferencesFull {
  DataLinkReferencesFull._(this._bc, this._bcOffset);
  factory DataLinkReferencesFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DataLinkReferencesFull> reader = _DataLinkReferencesFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Specifies an alphabetic serial identifier a reference pertaining to the data link message.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get refSerialId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Specifies the type of document referenced.
  ///  Example: /// Example: ABSTAT
  ///  Constraints: Minimum length = 0, Maximum length = 56
  String? get refType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The originator of this reference.
  ///  Example: /// Example: CENTCOM
  ///  Constraints: Minimum length = 0, Maximum length = 30
  String? get refOriginator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T13:55:43.123Z
  ///  Constraints: No constraints specified.
  String? get refTs => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Serial number assigned to this reference.
  ///  Example: /// Example: 1402001
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get refSerialNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Indicates any special actions, restrictions, guidance, or information relating to this reference.
  ///  Example: /// Example: NOTAL
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get refSpecialNotation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
  ///  Example: /// Example: ['RDU', 'C-123-92']
  ///  Constraints: No constraints specified.
  List<String>? get refSics => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'DataLinkReferencesFull{refSerialId: ${refSerialId}, refType: ${refType}, refOriginator: ${refOriginator}, refTs: ${refTs}, refSerialNum: ${refSerialNum}, refSpecialNotation: ${refSpecialNotation}, refSics: ${refSics}}';
  }
}

class _DataLinkReferencesFullReader extends fb.TableReader<DataLinkReferencesFull> {
  const _DataLinkReferencesFullReader();

  @override
  DataLinkReferencesFull createObject(fb.BufferContext bc, int offset) => 
    DataLinkReferencesFull._(bc, offset);
}

class DataLinkReferencesFullBuilder {
  DataLinkReferencesFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addRefSerialIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRefTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRefOriginatorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addRefTsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addRefSerialNumOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addRefSpecialNotationOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addRefSicsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DataLinkReferencesFullObjectBuilder extends fb.ObjectBuilder {
  final String? _refSerialId;
  final String? _refType;
  final String? _refOriginator;
  final String? _refTs;
  final String? _refSerialNum;
  final String? _refSpecialNotation;
  final List<String>? _refSics;

  DataLinkReferencesFullObjectBuilder({
    String? refSerialId,
    String? refType,
    String? refOriginator,
    String? refTs,
    String? refSerialNum,
    String? refSpecialNotation,
    List<String>? refSics,
  })
      : _refSerialId = refSerialId,
        _refType = refType,
        _refOriginator = refOriginator,
        _refTs = refTs,
        _refSerialNum = refSerialNum,
        _refSpecialNotation = refSpecialNotation,
        _refSics = refSics;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? refSerialIdOffset = _refSerialId == null ? null
        : fbBuilder.writeString(_refSerialId!);
    final int? refTypeOffset = _refType == null ? null
        : fbBuilder.writeString(_refType!);
    final int? refOriginatorOffset = _refOriginator == null ? null
        : fbBuilder.writeString(_refOriginator!);
    final int? refTsOffset = _refTs == null ? null
        : fbBuilder.writeString(_refTs!);
    final int? refSerialNumOffset = _refSerialNum == null ? null
        : fbBuilder.writeString(_refSerialNum!);
    final int? refSpecialNotationOffset = _refSpecialNotation == null ? null
        : fbBuilder.writeString(_refSpecialNotation!);
    final int? refSicsOffset = _refSics == null ? null
        : fbBuilder.writeList(_refSics!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, refSerialIdOffset);
    fbBuilder.addOffset(1, refTypeOffset);
    fbBuilder.addOffset(2, refOriginatorOffset);
    fbBuilder.addOffset(3, refTsOffset);
    fbBuilder.addOffset(4, refSerialNumOffset);
    fbBuilder.addOffset(5, refSpecialNotationOffset);
    fbBuilder.addOffset(6, refSicsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
