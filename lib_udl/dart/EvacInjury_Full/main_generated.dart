// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Injury specifics.
class EvacInjuryFull {
  EvacInjuryFull._(this._bc, this._bcOffset);
  factory EvacInjuryFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EvacInjuryFull> reader = _EvacInjuryFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION, BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS, FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA, IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER, IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT, PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).
  ///  Example: /// Example: ABRASION
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Body part location of the injury.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
  ///  Example: /// Example: ARM LEFT FRONT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get bodyPart => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The time of the injury, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-10-15T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get time => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Additional comments on the patient's injury information.
  ///  Example: /// Example: Comments on the patient's injury.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get comments => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'EvacInjuryFull{type: ${type}, bodyPart: ${bodyPart}, time: ${time}, comments: ${comments}}';
  }
}

class _EvacInjuryFullReader extends fb.TableReader<EvacInjuryFull> {
  const _EvacInjuryFullReader();

  @override
  EvacInjuryFull createObject(fb.BufferContext bc, int offset) => 
    EvacInjuryFull._(bc, offset);
}

class EvacInjuryFullBuilder {
  EvacInjuryFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addBodyPartOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCommentsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EvacInjuryFullObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _bodyPart;
  final String? _time;
  final String? _comments;

  EvacInjuryFullObjectBuilder({
    String? type,
    String? bodyPart,
    String? time,
    String? comments,
  })
      : _type = type,
        _bodyPart = bodyPart,
        _time = time,
        _comments = comments;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? bodyPartOffset = _bodyPart == null ? null
        : fbBuilder.writeString(_bodyPart!);
    final int? timeOffset = _time == null ? null
        : fbBuilder.writeString(_time!);
    final int? commentsOffset = _comments == null ? null
        : fbBuilder.writeString(_comments!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, bodyPartOffset);
    fbBuilder.addOffset(2, timeOffset);
    fbBuilder.addOffset(3, commentsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
