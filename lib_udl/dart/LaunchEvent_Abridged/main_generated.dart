// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class LaunchEventAbridgedDataModeEnum {
  final int value;
  const LaunchEventAbridgedDataModeEnum._(this.value);

  factory LaunchEventAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum LaunchEventAbridgedDataModeEnum');
    }
    return result;
  }

  static LaunchEventAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : LaunchEventAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const LaunchEventAbridgedDataModeEnum REAL = LaunchEventAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const LaunchEventAbridgedDataModeEnum TEST = LaunchEventAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const LaunchEventAbridgedDataModeEnum SIMULATED = LaunchEventAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const LaunchEventAbridgedDataModeEnum EXERCISE = LaunchEventAbridgedDataModeEnum._(3);
  static const Map<int, LaunchEventAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<LaunchEventAbridgedDataModeEnum> reader = _LaunchEventAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'LaunchEventAbridgedDataModeEnum{value: $value}';
  }
}

class _LaunchEventAbridgedDataModeEnumReader extends fb.Reader<LaunchEventAbridgedDataModeEnum> {
  const _LaunchEventAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  LaunchEventAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      LaunchEventAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Information on known launch events.
class LaunchEventAbridged {
  LaunchEventAbridged._(this._bc, this._bcOffset);
  factory LaunchEventAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LaunchEventAbridged> reader = _LaunchEventAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: LAUNCHEVENT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Unique identifier of the target on-orbit object, if correlated.
  ///  Example: /// Example: REF-ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Optional target-id, if missing in UDL.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The sources or SCG references from which the classification of this data is derived.
  ///  Example: /// Example: Example source
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get derivedFrom => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The declassification date of this data, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:02:02.123Z
  ///  Constraints: No constraints specified.
  String? get declassificationDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Declassification string of this data.
  ///  Example: /// Example: Example Declassification
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get declassificationString => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Timestamp of the originating message in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T00:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get msgCreateDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The DISOB launch Failure Code, if applicable.
  ///  Example: /// Example: Example failure code
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get launchFailureCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The launch date, in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T00:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get launchDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The Basic Encyclopedia Number, if applicable.
  ///  Example: /// Example: ENC-123
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get beNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The OSuffix, if applicable.
  ///  Example: /// Example: oSuffix
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get oSuffix => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The Launch facility name.
  ///  Example: /// Example: Example launch facility name
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get launchFacilityName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  LaunchEventAbridgedDataModeEnum get dataMode => LaunchEventAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 38, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 42, 0);

  @override
  String toString() {
    return 'LaunchEventAbridged{id: ${id}, idOnOrbit: ${idOnOrbit}, origObjectId: ${origObjectId}, classificationMarking: ${classificationMarking}, derivedFrom: ${derivedFrom}, declassificationDate: ${declassificationDate}, declassificationString: ${declassificationString}, msgCreateDate: ${msgCreateDate}, launchFailureCode: ${launchFailureCode}, launchDate: ${launchDate}, beNumber: ${beNumber}, oSuffix: ${oSuffix}, launchFacilityName: ${launchFacilityName}, createdAt: ${createdAt}, createdBy: ${createdBy}, origin: ${origin}, source: ${source}, dataMode: ${dataMode}, origNetwork: ${origNetwork}, satNo: ${satNo}}';
  }
}

class _LaunchEventAbridgedReader extends fb.TableReader<LaunchEventAbridged> {
  const _LaunchEventAbridgedReader();

  @override
  LaunchEventAbridged createObject(fb.BufferContext bc, int offset) => 
    LaunchEventAbridged._(bc, offset);
}

class LaunchEventAbridgedBuilder {
  LaunchEventAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(20);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDerivedFromOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addDeclassificationDateOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addDeclassificationStringOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addMsgCreateDateOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addLaunchFailureCodeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addLaunchDateOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addBeNumberOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addOSuffixOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addLaunchFacilityNameOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addDataMode(LaunchEventAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(17, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(19, satNo);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LaunchEventAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idOnOrbit;
  final String? _origObjectId;
  final String? _classificationMarking;
  final String? _derivedFrom;
  final String? _declassificationDate;
  final String? _declassificationString;
  final String? _msgCreateDate;
  final String? _launchFailureCode;
  final String? _launchDate;
  final String? _beNumber;
  final String? _oSuffix;
  final String? _launchFacilityName;
  final String? _createdAt;
  final String? _createdBy;
  final String? _origin;
  final String? _source;
  final LaunchEventAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;
  final int? _satNo;

  LaunchEventAbridgedObjectBuilder({
    String? id,
    String? idOnOrbit,
    String? origObjectId,
    String? classificationMarking,
    String? derivedFrom,
    String? declassificationDate,
    String? declassificationString,
    String? msgCreateDate,
    String? launchFailureCode,
    String? launchDate,
    String? beNumber,
    String? oSuffix,
    String? launchFacilityName,
    String? createdAt,
    String? createdBy,
    String? origin,
    String? source,
    LaunchEventAbridgedDataModeEnum? dataMode,
    String? origNetwork,
    int? satNo,
  })
      : _id = id,
        _idOnOrbit = idOnOrbit,
        _origObjectId = origObjectId,
        _classificationMarking = classificationMarking,
        _derivedFrom = derivedFrom,
        _declassificationDate = declassificationDate,
        _declassificationString = declassificationString,
        _msgCreateDate = msgCreateDate,
        _launchFailureCode = launchFailureCode,
        _launchDate = launchDate,
        _beNumber = beNumber,
        _oSuffix = oSuffix,
        _launchFacilityName = launchFacilityName,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _origin = origin,
        _source = source,
        _dataMode = dataMode,
        _origNetwork = origNetwork,
        _satNo = satNo;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? derivedFromOffset = _derivedFrom == null ? null
        : fbBuilder.writeString(_derivedFrom!);
    final int? declassificationDateOffset = _declassificationDate == null ? null
        : fbBuilder.writeString(_declassificationDate!);
    final int? declassificationStringOffset = _declassificationString == null ? null
        : fbBuilder.writeString(_declassificationString!);
    final int? msgCreateDateOffset = _msgCreateDate == null ? null
        : fbBuilder.writeString(_msgCreateDate!);
    final int? launchFailureCodeOffset = _launchFailureCode == null ? null
        : fbBuilder.writeString(_launchFailureCode!);
    final int? launchDateOffset = _launchDate == null ? null
        : fbBuilder.writeString(_launchDate!);
    final int? beNumberOffset = _beNumber == null ? null
        : fbBuilder.writeString(_beNumber!);
    final int? oSuffixOffset = _oSuffix == null ? null
        : fbBuilder.writeString(_oSuffix!);
    final int? launchFacilityNameOffset = _launchFacilityName == null ? null
        : fbBuilder.writeString(_launchFacilityName!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(20);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idOnOrbitOffset);
    fbBuilder.addOffset(2, origObjectIdOffset);
    fbBuilder.addOffset(3, classificationMarkingOffset);
    fbBuilder.addOffset(4, derivedFromOffset);
    fbBuilder.addOffset(5, declassificationDateOffset);
    fbBuilder.addOffset(6, declassificationStringOffset);
    fbBuilder.addOffset(7, msgCreateDateOffset);
    fbBuilder.addOffset(8, launchFailureCodeOffset);
    fbBuilder.addOffset(9, launchDateOffset);
    fbBuilder.addOffset(10, beNumberOffset);
    fbBuilder.addOffset(11, oSuffixOffset);
    fbBuilder.addOffset(12, launchFacilityNameOffset);
    fbBuilder.addOffset(13, createdAtOffset);
    fbBuilder.addOffset(14, createdByOffset);
    fbBuilder.addOffset(15, originOffset);
    fbBuilder.addOffset(16, sourceOffset);
    fbBuilder.addInt8(17, _dataMode?.value);
    fbBuilder.addOffset(18, origNetworkOffset);
    fbBuilder.addInt32(19, _satNo);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
