// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class MtiIngestDataModeEnum {
  final int value;
  const MtiIngestDataModeEnum._(this.value);

  factory MtiIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum MtiIngestDataModeEnum');
    }
    return result;
  }

  static MtiIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : MtiIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const MtiIngestDataModeEnum REAL = MtiIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const MtiIngestDataModeEnum TEST = MtiIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const MtiIngestDataModeEnum SIMULATED = MtiIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const MtiIngestDataModeEnum EXERCISE = MtiIngestDataModeEnum._(3);
  static const Map<int, MtiIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<MtiIngestDataModeEnum> reader = _MtiIngestDataModeEnumReader();

  @override
  String toString() {
    return 'MtiIngestDataModeEnum{value: $value}';
  }
}

class _MtiIngestDataModeEnumReader extends fb.Reader<MtiIngestDataModeEnum> {
  const _MtiIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  MtiIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      MtiIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
class MtiIngest {
  MtiIngest._(this._bc, this._bcOffset);
  factory MtiIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MtiIngest> reader = _MtiIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: MTI-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  MtiIngestDataModeEnum get dataMode => MtiIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 12, 0));
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Nationality of the platform providing the data.
  ///  Example: /// Example: NATIONALITY
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get p3 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Control / handling marking.
  ///  Example: /// Example: MARKING
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get p6 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Data record exercise indicator.
  ///  Example: /// Example: INDICATOR
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get p7 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  ID of the platform providing the data (tail number for air platform, name and numerical designator for space-based platforms).
  ///  Example: /// Example: P8-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get p8 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Integer field, assigned by the platform, that uniquely identifies the mission for the platform.
  ///  Example: /// Example: 45
  ///  Constraints: No constraints specified.
  int get p9 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: 45
  ///  Constraints: No constraints specified.
  int get p10 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get missions => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get dwells => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get hrrs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get jobDefs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 36);
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get freeTexts => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 38);
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get platformLocs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 40);
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get jobRequests => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);

  @override
  String toString() {
    return 'MtiIngest{classificationMarking: ${classificationMarking}, source: ${source}, origin: ${origin}, id: ${id}, dataMode: ${dataMode}, createdBy: ${createdBy}, createdAt: ${createdAt}, p3: ${p3}, p6: ${p6}, p7: ${p7}, p8: ${p8}, p9: ${p9}, p10: ${p10}, missions: ${missions}, dwells: ${dwells}, hrrs: ${hrrs}, jobDefs: ${jobDefs}, freeTexts: ${freeTexts}, platformLocs: ${platformLocs}, jobRequests: ${jobRequests}, origNetwork: ${origNetwork}}';
  }
}

class _MtiIngestReader extends fb.TableReader<MtiIngest> {
  const _MtiIngestReader();

  @override
  MtiIngest createObject(fb.BufferContext bc, int offset) => 
    MtiIngest._(bc, offset);
}

class MtiIngestBuilder {
  MtiIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(21);
  }

  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDataMode(MtiIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(4, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addP3Offset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addP6Offset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addP7Offset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addP8Offset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addP9(int? p9) {
    fbBuilder.addInt32(11, p9);
    return fbBuilder.offset;
  }
  int addP10(int? p10) {
    fbBuilder.addInt32(12, p10);
    return fbBuilder.offset;
  }
  int addMissionsOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addDwellsOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addHrrsOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addJobDefsOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addFreeTextsOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addPlatformLocsOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addJobRequestsOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MtiIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _classificationMarking;
  final String? _source;
  final String? _origin;
  final String? _id;
  final MtiIngestDataModeEnum? _dataMode;
  final String? _createdBy;
  final String? _createdAt;
  final String? _p3;
  final String? _p6;
  final String? _p7;
  final String? _p8;
  final int? _p9;
  final int? _p10;
  final List<String>? _missions;
  final List<String>? _dwells;
  final List<String>? _hrrs;
  final List<String>? _jobDefs;
  final List<String>? _freeTexts;
  final List<String>? _platformLocs;
  final List<String>? _jobRequests;
  final String? _origNetwork;

  MtiIngestObjectBuilder({
    String? classificationMarking,
    String? source,
    String? origin,
    String? id,
    MtiIngestDataModeEnum? dataMode,
    String? createdBy,
    String? createdAt,
    String? p3,
    String? p6,
    String? p7,
    String? p8,
    int? p9,
    int? p10,
    List<String>? missions,
    List<String>? dwells,
    List<String>? hrrs,
    List<String>? jobDefs,
    List<String>? freeTexts,
    List<String>? platformLocs,
    List<String>? jobRequests,
    String? origNetwork,
  })
      : _classificationMarking = classificationMarking,
        _source = source,
        _origin = origin,
        _id = id,
        _dataMode = dataMode,
        _createdBy = createdBy,
        _createdAt = createdAt,
        _p3 = p3,
        _p6 = p6,
        _p7 = p7,
        _p8 = p8,
        _p9 = p9,
        _p10 = p10,
        _missions = missions,
        _dwells = dwells,
        _hrrs = hrrs,
        _jobDefs = jobDefs,
        _freeTexts = freeTexts,
        _platformLocs = platformLocs,
        _jobRequests = jobRequests,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? p3Offset = _p3 == null ? null
        : fbBuilder.writeString(_p3!);
    final int? p6Offset = _p6 == null ? null
        : fbBuilder.writeString(_p6!);
    final int? p7Offset = _p7 == null ? null
        : fbBuilder.writeString(_p7!);
    final int? p8Offset = _p8 == null ? null
        : fbBuilder.writeString(_p8!);
    final int? missionsOffset = _missions == null ? null
        : fbBuilder.writeList(_missions!.map(fbBuilder.writeString).toList());
    final int? dwellsOffset = _dwells == null ? null
        : fbBuilder.writeList(_dwells!.map(fbBuilder.writeString).toList());
    final int? hrrsOffset = _hrrs == null ? null
        : fbBuilder.writeList(_hrrs!.map(fbBuilder.writeString).toList());
    final int? jobDefsOffset = _jobDefs == null ? null
        : fbBuilder.writeList(_jobDefs!.map(fbBuilder.writeString).toList());
    final int? freeTextsOffset = _freeTexts == null ? null
        : fbBuilder.writeList(_freeTexts!.map(fbBuilder.writeString).toList());
    final int? platformLocsOffset = _platformLocs == null ? null
        : fbBuilder.writeList(_platformLocs!.map(fbBuilder.writeString).toList());
    final int? jobRequestsOffset = _jobRequests == null ? null
        : fbBuilder.writeList(_jobRequests!.map(fbBuilder.writeString).toList());
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(21);
    fbBuilder.addOffset(0, classificationMarkingOffset);
    fbBuilder.addOffset(1, sourceOffset);
    fbBuilder.addOffset(2, originOffset);
    fbBuilder.addOffset(3, idOffset);
    fbBuilder.addInt8(4, _dataMode?.value);
    fbBuilder.addOffset(5, createdByOffset);
    fbBuilder.addOffset(6, createdAtOffset);
    fbBuilder.addOffset(7, p3Offset);
    fbBuilder.addOffset(8, p6Offset);
    fbBuilder.addOffset(9, p7Offset);
    fbBuilder.addOffset(10, p8Offset);
    fbBuilder.addInt32(11, _p9);
    fbBuilder.addInt32(12, _p10);
    fbBuilder.addOffset(13, missionsOffset);
    fbBuilder.addOffset(14, dwellsOffset);
    fbBuilder.addOffset(15, hrrsOffset);
    fbBuilder.addOffset(16, jobDefsOffset);
    fbBuilder.addOffset(17, freeTextsOffset);
    fbBuilder.addOffset(18, platformLocsOffset);
    fbBuilder.addOffset(19, jobRequestsOffset);
    fbBuilder.addOffset(20, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
