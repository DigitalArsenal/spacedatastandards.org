// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class OnorbitAntennaFullDataModeEnum {
  final int value;
  const OnorbitAntennaFullDataModeEnum._(this.value);

  factory OnorbitAntennaFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OnorbitAntennaFullDataModeEnum');
    }
    return result;
  }

  static OnorbitAntennaFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : OnorbitAntennaFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const OnorbitAntennaFullDataModeEnum REAL = OnorbitAntennaFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const OnorbitAntennaFullDataModeEnum TEST = OnorbitAntennaFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const OnorbitAntennaFullDataModeEnum SIMULATED = OnorbitAntennaFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const OnorbitAntennaFullDataModeEnum EXERCISE = OnorbitAntennaFullDataModeEnum._(3);
  static const Map<int, OnorbitAntennaFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<OnorbitAntennaFullDataModeEnum> reader = _OnorbitAntennaFullDataModeEnumReader();

  @override
  String toString() {
    return 'OnorbitAntennaFullDataModeEnum{value: $value}';
  }
}

class _OnorbitAntennaFullDataModeEnumReader extends fb.Reader<OnorbitAntennaFullDataModeEnum> {
  const _OnorbitAntennaFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  OnorbitAntennaFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      OnorbitAntennaFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Read-only collection of antennas on this on-orbit object.
class OnorbitAntennaFull {
  OnorbitAntennaFull._(this._bc, this._bcOffset);
  factory OnorbitAntennaFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OnorbitAntennaFull> reader = _OnorbitAntennaFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ONORBITANTENNA-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  ID of the on-orbit object.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  ID of the antenna.
  ///  Example: /// Example: ANTENNA-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idAntenna => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  OnorbitAntennaFullDataModeEnum get dataMode => OnorbitAntennaFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 24, 0));
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get antenna => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);

  @override
  String toString() {
    return 'OnorbitAntennaFull{id: ${id}, idOnOrbit: ${idOnOrbit}, idAntenna: ${idAntenna}, classificationMarking: ${classificationMarking}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, antenna: ${antenna}, origNetwork: ${origNetwork}}';
  }
}

class _OnorbitAntennaFullReader extends fb.TableReader<OnorbitAntennaFull> {
  const _OnorbitAntennaFullReader();

  @override
  OnorbitAntennaFull createObject(fb.BufferContext bc, int offset) => 
    OnorbitAntennaFull._(bc, offset);
}

class OnorbitAntennaFullBuilder {
  OnorbitAntennaFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(13);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdAntennaOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addDataMode(OnorbitAntennaFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(10, dataMode?.value);
    return fbBuilder.offset;
  }
  int addAntennaOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OnorbitAntennaFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idOnOrbit;
  final String? _idAntenna;
  final String? _classificationMarking;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final OnorbitAntennaFullDataModeEnum? _dataMode;
  final String? _antenna;
  final String? _origNetwork;

  OnorbitAntennaFullObjectBuilder({
    String? id,
    String? idOnOrbit,
    String? idAntenna,
    String? classificationMarking,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    OnorbitAntennaFullDataModeEnum? dataMode,
    String? antenna,
    String? origNetwork,
  })
      : _id = id,
        _idOnOrbit = idOnOrbit,
        _idAntenna = idAntenna,
        _classificationMarking = classificationMarking,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _antenna = antenna,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? idAntennaOffset = _idAntenna == null ? null
        : fbBuilder.writeString(_idAntenna!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? antennaOffset = _antenna == null ? null
        : fbBuilder.writeString(_antenna!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(13);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idOnOrbitOffset);
    fbBuilder.addOffset(2, idAntennaOffset);
    fbBuilder.addOffset(3, classificationMarkingOffset);
    fbBuilder.addOffset(4, createdAtOffset);
    fbBuilder.addOffset(5, createdByOffset);
    fbBuilder.addOffset(6, updatedAtOffset);
    fbBuilder.addOffset(7, updatedByOffset);
    fbBuilder.addOffset(8, sourceOffset);
    fbBuilder.addOffset(9, originOffset);
    fbBuilder.addInt8(10, _dataMode?.value);
    fbBuilder.addOffset(11, antennaOffset);
    fbBuilder.addOffset(12, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
