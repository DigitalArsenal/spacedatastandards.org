// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SarobservationFullDataModeEnum {
  final int value;
  const SarobservationFullDataModeEnum._(this.value);

  factory SarobservationFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SarobservationFullDataModeEnum');
    }
    return result;
  }

  static SarobservationFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SarobservationFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SarobservationFullDataModeEnum REAL = SarobservationFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SarobservationFullDataModeEnum TEST = SarobservationFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SarobservationFullDataModeEnum SIMULATED = SarobservationFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SarobservationFullDataModeEnum EXERCISE = SarobservationFullDataModeEnum._(3);
  static const Map<int, SarobservationFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SarobservationFullDataModeEnum> reader = _SarobservationFullDataModeEnumReader();

  @override
  String toString() {
    return 'SarobservationFullDataModeEnum{value: $value}';
  }
}

class _SarobservationFullDataModeEnumReader extends fb.Reader<SarobservationFullDataModeEnum> {
  const _SarobservationFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SarobservationFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      SarobservationFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of observation data for SAR based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
class SarobservationFull {
  SarobservationFull._(this._bc, this._bcOffset);
  factory SarobservationFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SarobservationFull> reader = _SarobservationFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SAROBSERVATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the spacecraft hosting the sensor associated with this collection.
  ///  Example: /// Example: 36036
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.
  ///  Example: /// Example: 36036
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: 36036
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: 36036-1L
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: SMOS-1L
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: EXTERNAL-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Optional identifier to indicate the specific collection tasking which produced this observation.
  ///  Example: /// Example: COLLECTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get collectionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Identifier of the specific detection within a collection which produced this observation.
  ///  Example: /// Example: DETECTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get detectionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Collection start time in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2023-04-22T17:35:00.123456Z
  ///  Constraints: No constraints specified.
  String? get collectionStart => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Collection end time in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2023-04-22T17:38:10.20177Z
  ///  Constraints: No constraints specified.
  String? get collectionEnd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2023-04-22T17:36:35.100885Z
  ///  Constraints: No constraints specified.
  String? get centerTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The detection start time in ISO 8601 UTC format, with microsecond precision.
  ///  Example: /// Example: 2023-07-08T17:35:01.615396Z
  ///  Constraints: No constraints specified.
  String? get detectionStart => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The detection end time in ISO 8601 UTC format, with microsecond precision.
  ///  Example: /// Example: 2023-07-08T17:35:20.77219Z
  ///  Constraints: No constraints specified.
  String? get detectionEnd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The duration, in seconds, of this detection.
  ///  Example: /// Example: 79.156794
  ///  Constraints: No constraints specified.
  double get dwellTime => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.
  ///  Example: /// Example: ASCENDING
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get orbitState => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).
  ///  Example: /// Example: SPOTLIGHT
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get sarMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.
  ///  Example: /// Example: L
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get operatingBand => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The operating frequency, in Mhz, for the collection.
  ///  Example: /// Example: 2345.6
  ///  Constraints: No constraints specified.
  double get operatingFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Signal to noise ratio, in dB.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get snr => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
  ///  Example: /// Example: H
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get txPolarization => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
  ///  Example: /// Example: H
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get rxPolarization => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The graze angle (also referred to as look angle) for the collection in degrees.
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  double get grazeAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  The center incidence angle in degrees.
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  double get incidenceAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  The squint angle for the collection in degrees.
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  double get squintAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  The bandwidth frequency of the pulse in Mhz.
  ///  Example: /// Example: 500.1
  ///  Constraints: No constraints specified.
  double get pulseBandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  The duration of a pulse in seconds.
  ///  Example: /// Example: 1.1e-05
  ///  Constraints: No constraints specified.
  double get pulseDuration => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Required sweep angle for the continuous spot scene in degrees.
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  double get continuousSpotAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Slant distance from sensor to center point of imaging event in kilometers.
  ///  Example: /// Example: 60.1
  ///  Constraints: No constraints specified.
  double get slantRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Specifies the closest range, in kilometers, from the flight path to target during the collection.
  ///  Example: /// Example: 12.1
  ///  Constraints: No constraints specified.
  double get nearRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Specifies the farthest range, in kilometers, from the flight path to target during the collection.
  ///  Example: /// Example: 34.1
  ///  Constraints: No constraints specified.
  double get farRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  The length of the collection as projected on the ground in kilometers.
  ///  Example: /// Example: 12.1
  ///  Constraints: No constraints specified.
  double get swathLength => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Optional geographical region or polygon (lat/lon pairs) of the area surrounding the image event as projected on the ground.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  String? get area => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  String? get atext => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: No constraints specified.
  String? get agjson => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Type of region as projected on the ground (POLYGON, POINT, LINE).
  ///  Example: /// Example: POLYGON
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get atype => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get andims => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 78, 0);
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get asrid => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 80, 0);
  ///  The pixel spacing in the range direction measured in meters.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  double get spacingRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  The pixel spacing in the azimuth direction measured in meters.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  double get spacingAzimuth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  The number of looks in the azimuth direction.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get looksAzimuth => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 86, 0);
  ///  The number of looks in the range direction.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get looksRange => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 88, 0);
  ///  The resolution in the range direction measured in meters.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  double get resolutionRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  The resolution in the azimuth direction measured in meters.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  double get resolutionAzimuth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  The antenna pointing direction (LEFT, RIGHT).
  ///  Example: /// Example: RIGHT
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get obDirection => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  The coordinate system used for the sensor velocity and target position vectors for the collection.
  ///  Example: /// Example: ECEF
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get coordSys => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  The collection target X position in kilometers.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  double get targetposx => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  The collection target Y position in kilometers.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  double get targetposy => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  The collection target Z position in kilometers.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  double get targetposz => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  Sensor altitude during collection in kilometers.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senalt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  Sensor platform X-velocity during collection in kilometers/second.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senvelx => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  Sensor platform Y-velocity during collection in kilometers/second.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senvely => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  Sensor platform Z-velocity during collection in kilometers/second.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senvelz => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  double get senlatStart => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get senlonStart => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  double get senlatEnd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 116, 0.0);
  ///  WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get senlonEnd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 120);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 122);
  ///  Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['ESID', 'GROUNDIMAGE']
  ///  Constraints: No constraints specified.
  List<String>? get srcTyps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 124);
  ///  Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).
  ///  Example: /// Example: ['f7e01cd4-626b-441f-a423-17b160eb78ba', '223833c4-be0d-4fdb-a2e4-325a48eccced']
  ///  Constraints: No constraints specified.
  List<String>? get srcIds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 126);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get onOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 128);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2023-04-22T17:51:40.854Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 130);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 132);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 134);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 136);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 138);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 140);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SarobservationFullDataModeEnum get dataMode => SarobservationFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 142, 0));

  @override
  String toString() {
    return 'SarobservationFull{id: ${id}, classificationMarking: ${classificationMarking}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, externalId: ${externalId}, collectionId: ${collectionId}, detectionId: ${detectionId}, collectionStart: ${collectionStart}, collectionEnd: ${collectionEnd}, centerTime: ${centerTime}, detectionStart: ${detectionStart}, detectionEnd: ${detectionEnd}, dwellTime: ${dwellTime}, orbitState: ${orbitState}, sarMode: ${sarMode}, operatingBand: ${operatingBand}, operatingFreq: ${operatingFreq}, snr: ${snr}, txPolarization: ${txPolarization}, rxPolarization: ${rxPolarization}, grazeAngle: ${grazeAngle}, incidenceAngle: ${incidenceAngle}, squintAngle: ${squintAngle}, pulseBandwidth: ${pulseBandwidth}, pulseDuration: ${pulseDuration}, continuousSpotAngle: ${continuousSpotAngle}, slantRange: ${slantRange}, nearRange: ${nearRange}, farRange: ${farRange}, swathLength: ${swathLength}, area: ${area}, atext: ${atext}, agjson: ${agjson}, atype: ${atype}, andims: ${andims}, asrid: ${asrid}, spacingRange: ${spacingRange}, spacingAzimuth: ${spacingAzimuth}, looksAzimuth: ${looksAzimuth}, looksRange: ${looksRange}, resolutionRange: ${resolutionRange}, resolutionAzimuth: ${resolutionAzimuth}, obDirection: ${obDirection}, coordSys: ${coordSys}, targetposx: ${targetposx}, targetposy: ${targetposy}, targetposz: ${targetposz}, senalt: ${senalt}, senvelx: ${senvelx}, senvely: ${senvely}, senvelz: ${senvelz}, senlatStart: ${senlatStart}, senlonStart: ${senlonStart}, senlatEnd: ${senlatEnd}, senlonEnd: ${senlonEnd}, transactionId: ${transactionId}, tags: ${tags}, srcTyps: ${srcTyps}, srcIds: ${srcIds}, onOrbit: ${onOrbit}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, sourceDl: ${sourceDl}, dataMode: ${dataMode}}';
  }
}

class _SarobservationFullReader extends fb.TableReader<SarobservationFull> {
  const _SarobservationFullReader();

  @override
  SarobservationFull createObject(fb.BufferContext bc, int offset) => 
    SarobservationFull._(bc, offset);
}

class SarobservationFullBuilder {
  SarobservationFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(70);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(3, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addCollectionIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addDetectionIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCollectionStartOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addCollectionEndOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCenterTimeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addDetectionStartOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addDetectionEndOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addDwellTime(double? dwellTime) {
    fbBuilder.addFloat64(15, dwellTime);
    return fbBuilder.offset;
  }
  int addOrbitStateOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addSarModeOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addOperatingBandOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addOperatingFreq(double? operatingFreq) {
    fbBuilder.addFloat64(19, operatingFreq);
    return fbBuilder.offset;
  }
  int addSnr(double? snr) {
    fbBuilder.addFloat64(20, snr);
    return fbBuilder.offset;
  }
  int addTxPolarizationOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addRxPolarizationOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addGrazeAngle(double? grazeAngle) {
    fbBuilder.addFloat64(23, grazeAngle);
    return fbBuilder.offset;
  }
  int addIncidenceAngle(double? incidenceAngle) {
    fbBuilder.addFloat64(24, incidenceAngle);
    return fbBuilder.offset;
  }
  int addSquintAngle(double? squintAngle) {
    fbBuilder.addFloat64(25, squintAngle);
    return fbBuilder.offset;
  }
  int addPulseBandwidth(double? pulseBandwidth) {
    fbBuilder.addFloat64(26, pulseBandwidth);
    return fbBuilder.offset;
  }
  int addPulseDuration(double? pulseDuration) {
    fbBuilder.addFloat64(27, pulseDuration);
    return fbBuilder.offset;
  }
  int addContinuousSpotAngle(double? continuousSpotAngle) {
    fbBuilder.addFloat64(28, continuousSpotAngle);
    return fbBuilder.offset;
  }
  int addSlantRange(double? slantRange) {
    fbBuilder.addFloat64(29, slantRange);
    return fbBuilder.offset;
  }
  int addNearRange(double? nearRange) {
    fbBuilder.addFloat64(30, nearRange);
    return fbBuilder.offset;
  }
  int addFarRange(double? farRange) {
    fbBuilder.addFloat64(31, farRange);
    return fbBuilder.offset;
  }
  int addSwathLength(double? swathLength) {
    fbBuilder.addFloat64(32, swathLength);
    return fbBuilder.offset;
  }
  int addAreaOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addAtextOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addAgjsonOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addAtypeOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addAndims(int? andims) {
    fbBuilder.addInt32(37, andims);
    return fbBuilder.offset;
  }
  int addAsrid(int? asrid) {
    fbBuilder.addInt32(38, asrid);
    return fbBuilder.offset;
  }
  int addSpacingRange(double? spacingRange) {
    fbBuilder.addFloat64(39, spacingRange);
    return fbBuilder.offset;
  }
  int addSpacingAzimuth(double? spacingAzimuth) {
    fbBuilder.addFloat64(40, spacingAzimuth);
    return fbBuilder.offset;
  }
  int addLooksAzimuth(int? looksAzimuth) {
    fbBuilder.addInt32(41, looksAzimuth);
    return fbBuilder.offset;
  }
  int addLooksRange(int? looksRange) {
    fbBuilder.addInt32(42, looksRange);
    return fbBuilder.offset;
  }
  int addResolutionRange(double? resolutionRange) {
    fbBuilder.addFloat64(43, resolutionRange);
    return fbBuilder.offset;
  }
  int addResolutionAzimuth(double? resolutionAzimuth) {
    fbBuilder.addFloat64(44, resolutionAzimuth);
    return fbBuilder.offset;
  }
  int addObDirectionOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addCoordSysOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addTargetposx(double? targetposx) {
    fbBuilder.addFloat64(47, targetposx);
    return fbBuilder.offset;
  }
  int addTargetposy(double? targetposy) {
    fbBuilder.addFloat64(48, targetposy);
    return fbBuilder.offset;
  }
  int addTargetposz(double? targetposz) {
    fbBuilder.addFloat64(49, targetposz);
    return fbBuilder.offset;
  }
  int addSenalt(double? senalt) {
    fbBuilder.addFloat64(50, senalt);
    return fbBuilder.offset;
  }
  int addSenvelx(double? senvelx) {
    fbBuilder.addFloat64(51, senvelx);
    return fbBuilder.offset;
  }
  int addSenvely(double? senvely) {
    fbBuilder.addFloat64(52, senvely);
    return fbBuilder.offset;
  }
  int addSenvelz(double? senvelz) {
    fbBuilder.addFloat64(53, senvelz);
    return fbBuilder.offset;
  }
  int addSenlatStart(double? senlatStart) {
    fbBuilder.addFloat64(54, senlatStart);
    return fbBuilder.offset;
  }
  int addSenlonStart(double? senlonStart) {
    fbBuilder.addFloat64(55, senlonStart);
    return fbBuilder.offset;
  }
  int addSenlatEnd(double? senlatEnd) {
    fbBuilder.addFloat64(56, senlatEnd);
    return fbBuilder.offset;
  }
  int addSenlonEnd(double? senlonEnd) {
    fbBuilder.addFloat64(57, senlonEnd);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(58, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(59, offset);
    return fbBuilder.offset;
  }
  int addSrcTypsOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }
  int addSrcIdsOffset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(64, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(65, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(66, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(67, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(68, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SarobservationFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(69, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SarobservationFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final String? _idSensor;
  final String? _origSensorId;
  final String? _externalId;
  final String? _collectionId;
  final String? _detectionId;
  final String? _collectionStart;
  final String? _collectionEnd;
  final String? _centerTime;
  final String? _detectionStart;
  final String? _detectionEnd;
  final double? _dwellTime;
  final String? _orbitState;
  final String? _sarMode;
  final String? _operatingBand;
  final double? _operatingFreq;
  final double? _snr;
  final String? _txPolarization;
  final String? _rxPolarization;
  final double? _grazeAngle;
  final double? _incidenceAngle;
  final double? _squintAngle;
  final double? _pulseBandwidth;
  final double? _pulseDuration;
  final double? _continuousSpotAngle;
  final double? _slantRange;
  final double? _nearRange;
  final double? _farRange;
  final double? _swathLength;
  final String? _area;
  final String? _atext;
  final String? _agjson;
  final String? _atype;
  final int? _andims;
  final int? _asrid;
  final double? _spacingRange;
  final double? _spacingAzimuth;
  final int? _looksAzimuth;
  final int? _looksRange;
  final double? _resolutionRange;
  final double? _resolutionAzimuth;
  final String? _obDirection;
  final String? _coordSys;
  final double? _targetposx;
  final double? _targetposy;
  final double? _targetposz;
  final double? _senalt;
  final double? _senvelx;
  final double? _senvely;
  final double? _senvelz;
  final double? _senlatStart;
  final double? _senlonStart;
  final double? _senlatEnd;
  final double? _senlonEnd;
  final String? _transactionId;
  final List<String>? _tags;
  final List<String>? _srcTyps;
  final List<String>? _srcIds;
  final String? _onOrbit;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final String? _sourceDl;
  final SarobservationFullDataModeEnum? _dataMode;

  SarobservationFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    String? idSensor,
    String? origSensorId,
    String? externalId,
    String? collectionId,
    String? detectionId,
    String? collectionStart,
    String? collectionEnd,
    String? centerTime,
    String? detectionStart,
    String? detectionEnd,
    double? dwellTime,
    String? orbitState,
    String? sarMode,
    String? operatingBand,
    double? operatingFreq,
    double? snr,
    String? txPolarization,
    String? rxPolarization,
    double? grazeAngle,
    double? incidenceAngle,
    double? squintAngle,
    double? pulseBandwidth,
    double? pulseDuration,
    double? continuousSpotAngle,
    double? slantRange,
    double? nearRange,
    double? farRange,
    double? swathLength,
    String? area,
    String? atext,
    String? agjson,
    String? atype,
    int? andims,
    int? asrid,
    double? spacingRange,
    double? spacingAzimuth,
    int? looksAzimuth,
    int? looksRange,
    double? resolutionRange,
    double? resolutionAzimuth,
    String? obDirection,
    String? coordSys,
    double? targetposx,
    double? targetposy,
    double? targetposz,
    double? senalt,
    double? senvelx,
    double? senvely,
    double? senvelz,
    double? senlatStart,
    double? senlonStart,
    double? senlatEnd,
    double? senlonEnd,
    String? transactionId,
    List<String>? tags,
    List<String>? srcTyps,
    List<String>? srcIds,
    String? onOrbit,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    String? sourceDl,
    SarobservationFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _externalId = externalId,
        _collectionId = collectionId,
        _detectionId = detectionId,
        _collectionStart = collectionStart,
        _collectionEnd = collectionEnd,
        _centerTime = centerTime,
        _detectionStart = detectionStart,
        _detectionEnd = detectionEnd,
        _dwellTime = dwellTime,
        _orbitState = orbitState,
        _sarMode = sarMode,
        _operatingBand = operatingBand,
        _operatingFreq = operatingFreq,
        _snr = snr,
        _txPolarization = txPolarization,
        _rxPolarization = rxPolarization,
        _grazeAngle = grazeAngle,
        _incidenceAngle = incidenceAngle,
        _squintAngle = squintAngle,
        _pulseBandwidth = pulseBandwidth,
        _pulseDuration = pulseDuration,
        _continuousSpotAngle = continuousSpotAngle,
        _slantRange = slantRange,
        _nearRange = nearRange,
        _farRange = farRange,
        _swathLength = swathLength,
        _area = area,
        _atext = atext,
        _agjson = agjson,
        _atype = atype,
        _andims = andims,
        _asrid = asrid,
        _spacingRange = spacingRange,
        _spacingAzimuth = spacingAzimuth,
        _looksAzimuth = looksAzimuth,
        _looksRange = looksRange,
        _resolutionRange = resolutionRange,
        _resolutionAzimuth = resolutionAzimuth,
        _obDirection = obDirection,
        _coordSys = coordSys,
        _targetposx = targetposx,
        _targetposy = targetposy,
        _targetposz = targetposz,
        _senalt = senalt,
        _senvelx = senvelx,
        _senvely = senvely,
        _senvelz = senvelz,
        _senlatStart = senlatStart,
        _senlonStart = senlonStart,
        _senlatEnd = senlatEnd,
        _senlonEnd = senlonEnd,
        _transactionId = transactionId,
        _tags = tags,
        _srcTyps = srcTyps,
        _srcIds = srcIds,
        _onOrbit = onOrbit,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _sourceDl = sourceDl,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    final int? collectionIdOffset = _collectionId == null ? null
        : fbBuilder.writeString(_collectionId!);
    final int? detectionIdOffset = _detectionId == null ? null
        : fbBuilder.writeString(_detectionId!);
    final int? collectionStartOffset = _collectionStart == null ? null
        : fbBuilder.writeString(_collectionStart!);
    final int? collectionEndOffset = _collectionEnd == null ? null
        : fbBuilder.writeString(_collectionEnd!);
    final int? centerTimeOffset = _centerTime == null ? null
        : fbBuilder.writeString(_centerTime!);
    final int? detectionStartOffset = _detectionStart == null ? null
        : fbBuilder.writeString(_detectionStart!);
    final int? detectionEndOffset = _detectionEnd == null ? null
        : fbBuilder.writeString(_detectionEnd!);
    final int? orbitStateOffset = _orbitState == null ? null
        : fbBuilder.writeString(_orbitState!);
    final int? sarModeOffset = _sarMode == null ? null
        : fbBuilder.writeString(_sarMode!);
    final int? operatingBandOffset = _operatingBand == null ? null
        : fbBuilder.writeString(_operatingBand!);
    final int? txPolarizationOffset = _txPolarization == null ? null
        : fbBuilder.writeString(_txPolarization!);
    final int? rxPolarizationOffset = _rxPolarization == null ? null
        : fbBuilder.writeString(_rxPolarization!);
    final int? areaOffset = _area == null ? null
        : fbBuilder.writeString(_area!);
    final int? atextOffset = _atext == null ? null
        : fbBuilder.writeString(_atext!);
    final int? agjsonOffset = _agjson == null ? null
        : fbBuilder.writeString(_agjson!);
    final int? atypeOffset = _atype == null ? null
        : fbBuilder.writeString(_atype!);
    final int? obDirectionOffset = _obDirection == null ? null
        : fbBuilder.writeString(_obDirection!);
    final int? coordSysOffset = _coordSys == null ? null
        : fbBuilder.writeString(_coordSys!);
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? srcTypsOffset = _srcTyps == null ? null
        : fbBuilder.writeList(_srcTyps!.map(fbBuilder.writeString).toList());
    final int? srcIdsOffset = _srcIds == null ? null
        : fbBuilder.writeList(_srcIds!.map(fbBuilder.writeString).toList());
    final int? onOrbitOffset = _onOrbit == null ? null
        : fbBuilder.writeString(_onOrbit!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    fbBuilder.startTable(70);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idOnOrbitOffset);
    fbBuilder.addInt32(3, _satNo);
    fbBuilder.addOffset(4, origObjectIdOffset);
    fbBuilder.addOffset(5, idSensorOffset);
    fbBuilder.addOffset(6, origSensorIdOffset);
    fbBuilder.addOffset(7, externalIdOffset);
    fbBuilder.addOffset(8, collectionIdOffset);
    fbBuilder.addOffset(9, detectionIdOffset);
    fbBuilder.addOffset(10, collectionStartOffset);
    fbBuilder.addOffset(11, collectionEndOffset);
    fbBuilder.addOffset(12, centerTimeOffset);
    fbBuilder.addOffset(13, detectionStartOffset);
    fbBuilder.addOffset(14, detectionEndOffset);
    fbBuilder.addFloat64(15, _dwellTime);
    fbBuilder.addOffset(16, orbitStateOffset);
    fbBuilder.addOffset(17, sarModeOffset);
    fbBuilder.addOffset(18, operatingBandOffset);
    fbBuilder.addFloat64(19, _operatingFreq);
    fbBuilder.addFloat64(20, _snr);
    fbBuilder.addOffset(21, txPolarizationOffset);
    fbBuilder.addOffset(22, rxPolarizationOffset);
    fbBuilder.addFloat64(23, _grazeAngle);
    fbBuilder.addFloat64(24, _incidenceAngle);
    fbBuilder.addFloat64(25, _squintAngle);
    fbBuilder.addFloat64(26, _pulseBandwidth);
    fbBuilder.addFloat64(27, _pulseDuration);
    fbBuilder.addFloat64(28, _continuousSpotAngle);
    fbBuilder.addFloat64(29, _slantRange);
    fbBuilder.addFloat64(30, _nearRange);
    fbBuilder.addFloat64(31, _farRange);
    fbBuilder.addFloat64(32, _swathLength);
    fbBuilder.addOffset(33, areaOffset);
    fbBuilder.addOffset(34, atextOffset);
    fbBuilder.addOffset(35, agjsonOffset);
    fbBuilder.addOffset(36, atypeOffset);
    fbBuilder.addInt32(37, _andims);
    fbBuilder.addInt32(38, _asrid);
    fbBuilder.addFloat64(39, _spacingRange);
    fbBuilder.addFloat64(40, _spacingAzimuth);
    fbBuilder.addInt32(41, _looksAzimuth);
    fbBuilder.addInt32(42, _looksRange);
    fbBuilder.addFloat64(43, _resolutionRange);
    fbBuilder.addFloat64(44, _resolutionAzimuth);
    fbBuilder.addOffset(45, obDirectionOffset);
    fbBuilder.addOffset(46, coordSysOffset);
    fbBuilder.addFloat64(47, _targetposx);
    fbBuilder.addFloat64(48, _targetposy);
    fbBuilder.addFloat64(49, _targetposz);
    fbBuilder.addFloat64(50, _senalt);
    fbBuilder.addFloat64(51, _senvelx);
    fbBuilder.addFloat64(52, _senvely);
    fbBuilder.addFloat64(53, _senvelz);
    fbBuilder.addFloat64(54, _senlatStart);
    fbBuilder.addFloat64(55, _senlonStart);
    fbBuilder.addFloat64(56, _senlatEnd);
    fbBuilder.addFloat64(57, _senlonEnd);
    fbBuilder.addOffset(58, transactionIdOffset);
    fbBuilder.addOffset(59, tagsOffset);
    fbBuilder.addOffset(60, srcTypsOffset);
    fbBuilder.addOffset(61, srcIdsOffset);
    fbBuilder.addOffset(62, onOrbitOffset);
    fbBuilder.addOffset(63, createdAtOffset);
    fbBuilder.addOffset(64, createdByOffset);
    fbBuilder.addOffset(65, sourceOffset);
    fbBuilder.addOffset(66, originOffset);
    fbBuilder.addOffset(67, origNetworkOffset);
    fbBuilder.addOffset(68, sourceDlOffset);
    fbBuilder.addInt8(69, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
