// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AirfieldAbridgedDataModeEnum {
  final int value;
  const AirfieldAbridgedDataModeEnum._(this.value);

  factory AirfieldAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AirfieldAbridgedDataModeEnum');
    }
    return result;
  }

  static AirfieldAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AirfieldAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AirfieldAbridgedDataModeEnum REAL = AirfieldAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AirfieldAbridgedDataModeEnum TEST = AirfieldAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AirfieldAbridgedDataModeEnum SIMULATED = AirfieldAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AirfieldAbridgedDataModeEnum EXERCISE = AirfieldAbridgedDataModeEnum._(3);
  static const Map<int, AirfieldAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AirfieldAbridgedDataModeEnum> reader = _AirfieldAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'AirfieldAbridgedDataModeEnum{value: $value}';
  }
}

class _AirfieldAbridgedDataModeEnumReader extends fb.Reader<AirfieldAbridgedDataModeEnum> {
  const _AirfieldAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AirfieldAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      AirfieldAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Properties and characteristics of an airfield, which includes location, airfield codes, suitability codes, and remarks.
class AirfieldAbridged {
  AirfieldAbridged._(this._bc, this._bcOffset);
  factory AirfieldAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirfieldAbridged> reader = _AirfieldAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 3f28f60b-3a50-2aef-ac88-8e9d0e39912b
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The ID of the parent site.
  ///  Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSite => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Alternate Airfield identifier provided by source.
  ///  Example: /// Example: 45301
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get altAirfieldId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The airfield's World Area Code installation number (WAC-INNR).
  ///  Example: /// Example: 0409-00039
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get wacInnr => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Air Mobility Command (AMC) Zone availability Report identifier.
  ///  Example: /// Example: 231
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get zarId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The International Civil Aviation Organization (ICAO) code of the airfield.
  ///  Example: /// Example: KCOS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get icao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The International Aviation Transport Association (IATA) code of the airfield.
  ///  Example: /// Example: AAA
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get iata => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The Federal Aviation Administration (FAA) location identifier of this airfield.
  ///  Example: /// Example: FAA1
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get faa => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The host nation code of this airfield, used for non-DoD/FAA locations.
  ///  Example: /// Example: ZPU
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get hostNatCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The name of the airfield.
  ///  Example: /// Example: USAF Academy AFLD
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport, etc.).
  ///  Example: /// Example: Commercial
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Elevation of the airfield above mean sea level, in feet.
  ///  Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 33.562
  ///  Constraints: No constraints specified.
  double get elevFt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Elevation of the airfield above mean sea level, in meters.
  ///  Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 10.29
  ///  Constraints: No constraints specified.
  double get elevM => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  The magnetic declination/variation of the airfield's location from true north, in degrees.  Positive values east of true north and negative values west of true north.
  ///  Example: /// Example: 7.35
  ///  Constraints: No constraints specified.
  double get magDec => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Region where the airfield resides.
  ///  Example: /// Example: North America
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get regionName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Closest city to the airfield's location.
  ///  Example: /// Example: Colorado Springs
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get city => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  State or province of the airfield's location.
  ///  Example: /// Example: Colorado
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get state => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Air Force geographic location code of the airfield.
  ///  Example: /// Example: XLSX
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get geoloc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Time difference between the location of the airfield and the Greenwich Mean Time (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets and time zones west of Greenwich are negative.
  ///  Example: /// Example: -4:30
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get gmtOffset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Associated suitability codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
  ///  Example: /// Example: ABCDEF
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get suitabilityCodes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Applicable miscellaneous codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
  ///  Example: /// Example: AMZ
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get miscCodes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  The number of runways at the site.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get runways => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  The length of the longest runway at this airfield in feet.
  ///  Example: /// Example: 1000
  ///  Constraints: No constraints specified.
  int get maxRunwayLength => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  The URL link to information about airfield.
  ///  Example: /// Example: URL Link to the Airfield
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get infoUrl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AirfieldAbridgedDataModeEnum get dataMode => AirfieldAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 72, 0));

  @override
  String toString() {
    return 'AirfieldAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idSite: ${idSite}, altAirfieldId: ${altAirfieldId}, wacInnr: ${wacInnr}, zarId: ${zarId}, icao: ${icao}, iata: ${iata}, faa: ${faa}, hostNatCode: ${hostNatCode}, name: ${name}, type: ${type}, lat: ${lat}, lon: ${lon}, elevFt: ${elevFt}, elevM: ${elevM}, magDec: ${magDec}, regionName: ${regionName}, countryCode: ${countryCode}, city: ${city}, state: ${state}, geoloc: ${geoloc}, gmtOffset: ${gmtOffset}, suitabilityCodes: ${suitabilityCodes}, miscCodes: ${miscCodes}, runways: ${runways}, maxRunwayLength: ${maxRunwayLength}, infoUrl: ${infoUrl}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _AirfieldAbridgedReader extends fb.TableReader<AirfieldAbridged> {
  const _AirfieldAbridgedReader();

  @override
  AirfieldAbridged createObject(fb.BufferContext bc, int offset) => 
    AirfieldAbridged._(bc, offset);
}

class AirfieldAbridgedBuilder {
  AirfieldAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(35);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdSiteOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAltAirfieldIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addWacInnrOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addZarIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addIcaoOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addIataOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addFaaOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addHostNatCodeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(12, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(13, lon);
    return fbBuilder.offset;
  }
  int addElevFt(double? elevFt) {
    fbBuilder.addFloat64(14, elevFt);
    return fbBuilder.offset;
  }
  int addElevM(double? elevM) {
    fbBuilder.addFloat64(15, elevM);
    return fbBuilder.offset;
  }
  int addMagDec(double? magDec) {
    fbBuilder.addFloat64(16, magDec);
    return fbBuilder.offset;
  }
  int addRegionNameOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addCityOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addStateOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addGeolocOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addGmtOffsetOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addSuitabilityCodesOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addMiscCodesOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addRunways(int? runways) {
    fbBuilder.addInt32(25, runways);
    return fbBuilder.offset;
  }
  int addMaxRunwayLength(int? maxRunwayLength) {
    fbBuilder.addInt32(26, maxRunwayLength);
    return fbBuilder.offset;
  }
  int addInfoUrlOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AirfieldAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(34, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirfieldAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idSite;
  final String? _altAirfieldId;
  final String? _wacInnr;
  final String? _zarId;
  final String? _icao;
  final String? _iata;
  final String? _faa;
  final String? _hostNatCode;
  final String? _name;
  final String? _type;
  final double? _lat;
  final double? _lon;
  final double? _elevFt;
  final double? _elevM;
  final double? _magDec;
  final String? _regionName;
  final String? _countryCode;
  final String? _city;
  final String? _state;
  final String? _geoloc;
  final String? _gmtOffset;
  final String? _suitabilityCodes;
  final String? _miscCodes;
  final int? _runways;
  final int? _maxRunwayLength;
  final String? _infoUrl;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final AirfieldAbridgedDataModeEnum? _dataMode;

  AirfieldAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idSite,
    String? altAirfieldId,
    String? wacInnr,
    String? zarId,
    String? icao,
    String? iata,
    String? faa,
    String? hostNatCode,
    String? name,
    String? type,
    double? lat,
    double? lon,
    double? elevFt,
    double? elevM,
    double? magDec,
    String? regionName,
    String? countryCode,
    String? city,
    String? state,
    String? geoloc,
    String? gmtOffset,
    String? suitabilityCodes,
    String? miscCodes,
    int? runways,
    int? maxRunwayLength,
    String? infoUrl,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    AirfieldAbridgedDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idSite = idSite,
        _altAirfieldId = altAirfieldId,
        _wacInnr = wacInnr,
        _zarId = zarId,
        _icao = icao,
        _iata = iata,
        _faa = faa,
        _hostNatCode = hostNatCode,
        _name = name,
        _type = type,
        _lat = lat,
        _lon = lon,
        _elevFt = elevFt,
        _elevM = elevM,
        _magDec = magDec,
        _regionName = regionName,
        _countryCode = countryCode,
        _city = city,
        _state = state,
        _geoloc = geoloc,
        _gmtOffset = gmtOffset,
        _suitabilityCodes = suitabilityCodes,
        _miscCodes = miscCodes,
        _runways = runways,
        _maxRunwayLength = maxRunwayLength,
        _infoUrl = infoUrl,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idSiteOffset = _idSite == null ? null
        : fbBuilder.writeString(_idSite!);
    final int? altAirfieldIdOffset = _altAirfieldId == null ? null
        : fbBuilder.writeString(_altAirfieldId!);
    final int? wacInnrOffset = _wacInnr == null ? null
        : fbBuilder.writeString(_wacInnr!);
    final int? zarIdOffset = _zarId == null ? null
        : fbBuilder.writeString(_zarId!);
    final int? icaoOffset = _icao == null ? null
        : fbBuilder.writeString(_icao!);
    final int? iataOffset = _iata == null ? null
        : fbBuilder.writeString(_iata!);
    final int? faaOffset = _faa == null ? null
        : fbBuilder.writeString(_faa!);
    final int? hostNatCodeOffset = _hostNatCode == null ? null
        : fbBuilder.writeString(_hostNatCode!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? regionNameOffset = _regionName == null ? null
        : fbBuilder.writeString(_regionName!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? cityOffset = _city == null ? null
        : fbBuilder.writeString(_city!);
    final int? stateOffset = _state == null ? null
        : fbBuilder.writeString(_state!);
    final int? geolocOffset = _geoloc == null ? null
        : fbBuilder.writeString(_geoloc!);
    final int? gmtOffsetOffset = _gmtOffset == null ? null
        : fbBuilder.writeString(_gmtOffset!);
    final int? suitabilityCodesOffset = _suitabilityCodes == null ? null
        : fbBuilder.writeString(_suitabilityCodes!);
    final int? miscCodesOffset = _miscCodes == null ? null
        : fbBuilder.writeString(_miscCodes!);
    final int? infoUrlOffset = _infoUrl == null ? null
        : fbBuilder.writeString(_infoUrl!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(35);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idSiteOffset);
    fbBuilder.addOffset(3, altAirfieldIdOffset);
    fbBuilder.addOffset(4, wacInnrOffset);
    fbBuilder.addOffset(5, zarIdOffset);
    fbBuilder.addOffset(6, icaoOffset);
    fbBuilder.addOffset(7, iataOffset);
    fbBuilder.addOffset(8, faaOffset);
    fbBuilder.addOffset(9, hostNatCodeOffset);
    fbBuilder.addOffset(10, nameOffset);
    fbBuilder.addOffset(11, typeOffset);
    fbBuilder.addFloat64(12, _lat);
    fbBuilder.addFloat64(13, _lon);
    fbBuilder.addFloat64(14, _elevFt);
    fbBuilder.addFloat64(15, _elevM);
    fbBuilder.addFloat64(16, _magDec);
    fbBuilder.addOffset(17, regionNameOffset);
    fbBuilder.addOffset(18, countryCodeOffset);
    fbBuilder.addOffset(19, cityOffset);
    fbBuilder.addOffset(20, stateOffset);
    fbBuilder.addOffset(21, geolocOffset);
    fbBuilder.addOffset(22, gmtOffsetOffset);
    fbBuilder.addOffset(23, suitabilityCodesOffset);
    fbBuilder.addOffset(24, miscCodesOffset);
    fbBuilder.addInt32(25, _runways);
    fbBuilder.addInt32(26, _maxRunwayLength);
    fbBuilder.addOffset(27, infoUrlOffset);
    fbBuilder.addOffset(28, createdAtOffset);
    fbBuilder.addOffset(29, createdByOffset);
    fbBuilder.addOffset(30, sourceDlOffset);
    fbBuilder.addOffset(31, sourceOffset);
    fbBuilder.addOffset(32, originOffset);
    fbBuilder.addOffset(33, origNetworkOffset);
    fbBuilder.addInt8(34, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
