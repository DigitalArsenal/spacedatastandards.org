// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SiteStatusIngestInstStatusEnum {
  final int value;
  const SiteStatusIngestInstStatusEnum._(this.value);

  factory SiteStatusIngestInstStatusEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusIngestInstStatusEnum');
    }
    return result;
  }

  static SiteStatusIngestInstStatusEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusIngestInstStatusEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SiteStatusIngestInstStatusEnum FMC = SiteStatusIngestInstStatusEnum._(0);

  ///  No description available.
  static const SiteStatusIngestInstStatusEnum PMC = SiteStatusIngestInstStatusEnum._(1);

  ///  No description available.
  static const SiteStatusIngestInstStatusEnum NMC = SiteStatusIngestInstStatusEnum._(2);

  ///  No description available.
  static const SiteStatusIngestInstStatusEnum UNK = SiteStatusIngestInstStatusEnum._(3);
  static const Map<int, SiteStatusIngestInstStatusEnum> values = {
    0: FMC,
    1: PMC,
    2: NMC,
    3: UNK};

  static const fb.Reader<SiteStatusIngestInstStatusEnum> reader = _SiteStatusIngestInstStatusEnumReader();

  @override
  String toString() {
    return 'SiteStatusIngestInstStatusEnum{value: $value}';
  }
}

class _SiteStatusIngestInstStatusEnumReader extends fb.Reader<SiteStatusIngestInstStatusEnum> {
  const _SiteStatusIngestInstStatusEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusIngestInstStatusEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusIngestInstStatusEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SiteStatusIngestFpconEnum {
  final int value;
  const SiteStatusIngestFpconEnum._(this.value);

  factory SiteStatusIngestFpconEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusIngestFpconEnum');
    }
    return result;
  }

  static SiteStatusIngestFpconEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusIngestFpconEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SiteStatusIngestFpconEnum NORMAL = SiteStatusIngestFpconEnum._(0);

  ///  No description available.
  static const SiteStatusIngestFpconEnum ALPHA = SiteStatusIngestFpconEnum._(1);

  ///  No description available.
  static const SiteStatusIngestFpconEnum BRAVO = SiteStatusIngestFpconEnum._(2);

  ///  No description available.
  static const SiteStatusIngestFpconEnum CHARLIE = SiteStatusIngestFpconEnum._(3);

  ///  No description available.
  static const SiteStatusIngestFpconEnum DELTA = SiteStatusIngestFpconEnum._(4);
  static const Map<int, SiteStatusIngestFpconEnum> values = {
    0: NORMAL,
    1: ALPHA,
    2: BRAVO,
    3: CHARLIE,
    4: DELTA};

  static const fb.Reader<SiteStatusIngestFpconEnum> reader = _SiteStatusIngestFpconEnumReader();

  @override
  String toString() {
    return 'SiteStatusIngestFpconEnum{value: $value}';
  }
}

class _SiteStatusIngestFpconEnumReader extends fb.Reader<SiteStatusIngestFpconEnum> {
  const _SiteStatusIngestFpconEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusIngestFpconEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusIngestFpconEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SiteStatusIngestHpconEnum {
  final int value;
  const SiteStatusIngestHpconEnum._(this.value);

  factory SiteStatusIngestHpconEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusIngestHpconEnum');
    }
    return result;
  }

  static SiteStatusIngestHpconEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusIngestHpconEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SiteStatusIngestHpconEnum E0 = SiteStatusIngestHpconEnum._(0);

  ///  No description available.
  static const SiteStatusIngestHpconEnum ALPHA = SiteStatusIngestHpconEnum._(1);

  ///  No description available.
  static const SiteStatusIngestHpconEnum BRAVO = SiteStatusIngestHpconEnum._(2);

  ///  No description available.
  static const SiteStatusIngestHpconEnum CHARLIE = SiteStatusIngestHpconEnum._(3);

  ///  No description available.
  static const SiteStatusIngestHpconEnum DELTA = SiteStatusIngestHpconEnum._(4);
  static const Map<int, SiteStatusIngestHpconEnum> values = {
    0: E0,
    1: ALPHA,
    2: BRAVO,
    3: CHARLIE,
    4: DELTA};

  static const fb.Reader<SiteStatusIngestHpconEnum> reader = _SiteStatusIngestHpconEnumReader();

  @override
  String toString() {
    return 'SiteStatusIngestHpconEnum{value: $value}';
  }
}

class _SiteStatusIngestHpconEnumReader extends fb.Reader<SiteStatusIngestHpconEnum> {
  const _SiteStatusIngestHpconEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusIngestHpconEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusIngestHpconEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SiteStatusIngestCpconEnum {
  final int value;
  const SiteStatusIngestCpconEnum._(this.value);

  factory SiteStatusIngestCpconEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusIngestCpconEnum');
    }
    return result;
  }

  static SiteStatusIngestCpconEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusIngestCpconEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SiteStatusIngestCpconEnum E1 = SiteStatusIngestCpconEnum._(0);

  ///  No description available.
  static const SiteStatusIngestCpconEnum E2 = SiteStatusIngestCpconEnum._(1);

  ///  No description available.
  static const SiteStatusIngestCpconEnum E3 = SiteStatusIngestCpconEnum._(2);

  ///  No description available.
  static const SiteStatusIngestCpconEnum E4 = SiteStatusIngestCpconEnum._(3);

  ///  No description available.
  static const SiteStatusIngestCpconEnum E5 = SiteStatusIngestCpconEnum._(4);
  static const Map<int, SiteStatusIngestCpconEnum> values = {
    0: E1,
    1: E2,
    2: E3,
    3: E4,
    4: E5};

  static const fb.Reader<SiteStatusIngestCpconEnum> reader = _SiteStatusIngestCpconEnumReader();

  @override
  String toString() {
    return 'SiteStatusIngestCpconEnum{value: $value}';
  }
}

class _SiteStatusIngestCpconEnumReader extends fb.Reader<SiteStatusIngestCpconEnum> {
  const _SiteStatusIngestCpconEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusIngestCpconEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusIngestCpconEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SiteStatusIngestCatEnum {
  final int value;
  const SiteStatusIngestCatEnum._(this.value);

  factory SiteStatusIngestCatEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusIngestCatEnum');
    }
    return result;
  }

  static SiteStatusIngestCatEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusIngestCatEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SiteStatusIngestCatEnum COLD = SiteStatusIngestCatEnum._(0);

  ///  No description available.
  static const SiteStatusIngestCatEnum WARM = SiteStatusIngestCatEnum._(1);

  ///  No description available.
  static const SiteStatusIngestCatEnum HOT = SiteStatusIngestCatEnum._(2);
  static const Map<int, SiteStatusIngestCatEnum> values = {
    0: COLD,
    1: WARM,
    2: HOT};

  static const fb.Reader<SiteStatusIngestCatEnum> reader = _SiteStatusIngestCatEnumReader();

  @override
  String toString() {
    return 'SiteStatusIngestCatEnum{value: $value}';
  }
}

class _SiteStatusIngestCatEnumReader extends fb.Reader<SiteStatusIngestCatEnum> {
  const _SiteStatusIngestCatEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusIngestCatEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusIngestCatEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SiteStatusIngestEocEnum {
  final int value;
  const SiteStatusIngestEocEnum._(this.value);

  factory SiteStatusIngestEocEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusIngestEocEnum');
    }
    return result;
  }

  static SiteStatusIngestEocEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusIngestEocEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SiteStatusIngestEocEnum COLD = SiteStatusIngestEocEnum._(0);

  ///  No description available.
  static const SiteStatusIngestEocEnum WARM = SiteStatusIngestEocEnum._(1);

  ///  No description available.
  static const SiteStatusIngestEocEnum HOT = SiteStatusIngestEocEnum._(2);
  static const Map<int, SiteStatusIngestEocEnum> values = {
    0: COLD,
    1: WARM,
    2: HOT};

  static const fb.Reader<SiteStatusIngestEocEnum> reader = _SiteStatusIngestEocEnumReader();

  @override
  String toString() {
    return 'SiteStatusIngestEocEnum{value: $value}';
  }
}

class _SiteStatusIngestEocEnumReader extends fb.Reader<SiteStatusIngestEocEnum> {
  const _SiteStatusIngestEocEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusIngestEocEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusIngestEocEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SiteStatusIngestDataModeEnum {
  final int value;
  const SiteStatusIngestDataModeEnum._(this.value);

  factory SiteStatusIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusIngestDataModeEnum');
    }
    return result;
  }

  static SiteStatusIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SiteStatusIngestDataModeEnum REAL = SiteStatusIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SiteStatusIngestDataModeEnum TEST = SiteStatusIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SiteStatusIngestDataModeEnum SIMULATED = SiteStatusIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SiteStatusIngestDataModeEnum EXERCISE = SiteStatusIngestDataModeEnum._(3);
  static const Map<int, SiteStatusIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SiteStatusIngestDataModeEnum> reader = _SiteStatusIngestDataModeEnumReader();

  @override
  String toString() {
    return 'SiteStatusIngestDataModeEnum{value: $value}';
  }
}

class _SiteStatusIngestDataModeEnumReader extends fb.Reader<SiteStatusIngestDataModeEnum> {
  const _SiteStatusIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// No description available.
class SiteStatusIngest {
  SiteStatusIngest._(this._bc, this._bcOffset);
  factory SiteStatusIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SiteStatusIngest> reader = _SiteStatusIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SITESTATUS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The ID of the site, if this status is associated with a fixed site or platform.
  ///  Example: /// Example: 41e3e554-9790-40b9-bd7b-f30d864dcad8
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idSite => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
  ///  Example: /// Example: ADOC
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get siteType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Alternate Identifier for a mobile or transportable platform provided by source.
  ///  Example: /// Example: MOBILEALT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get mobileAltId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The POI (point of interest) ID related to this platform, if available.
  ///  Example: /// Example: d4a91864-6140-4b8d-67cd-45421c75f696
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get poiid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The track ID related to this platform (if mobile or transportable), if available.
  ///  Example: /// Example: PCM4923-1656174732-4-1-257
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trackId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Link-16 specific reference track number.
  ///  Example: /// Example: TrkNm
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get trackRefL16 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).
  ///  Example: /// Example: Fully Operational
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get opsCapability => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The status of the installation.
  ///  FMC - Fully Mission Capable
  ///   PMC - Partially Mission Capable
  ///  NMC - Non Mission Capable
  ///  UNK - Unknown.
  ///  Example: /// Example: PMC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  SiteStatusIngestInstStatusEnum get instStatus => SiteStatusIngestInstStatusEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 22, 0));
  ///  Force Protection Condition (FPCON).
  ///  NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.
  ///  ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.
  ///  BRAVO - Applies when an increased or predictable threat of terrorist activity exists.
  ///  CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.
  ///  DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
  ///  Example: /// Example: BRAVO
  ///  Constraints: Minimum length = 0, Maximum length = 7
  SiteStatusIngestFpconEnum get fpcon => SiteStatusIngestFpconEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 24, 0));
  ///  Health Protection Condition (HPCON).
  ///  0 - Routine, no community transmission.
  ///  ALPHA - Limited, community transmission beginning.
  ///  BRAVO - Moderate, increased community transmission.
  ///  CHARLIE - Substantial, sustained community transmission.
  ///  DELTA - Severe, widespread community transmission.
  ///  Example: /// Example: CHARLIE
  ///  Constraints: Minimum length = 0, Maximum length = 7
  SiteStatusIngestHpconEnum get hpcon => SiteStatusIngestHpconEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 26, 0));
  ///  Cyberspace Protection Condition (CPCON).
  ///  1 - VERY HIGH - Critical functions.
  ///  2 - HIGH - Critical and essential functions.
  ///  3 - MEDIUM - Critical, essential, and support functions.
  ///  4 - LOW - All functions.
  ///  5 - VERY LOW - All functions.
  ///  Example: /// Example: 4
  ///  Constraints: Minimum length = 0, Maximum length = 1
  SiteStatusIngestCpconEnum get cpcon => SiteStatusIngestCpconEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 28, 0));
  ///  Time of report, in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get reportTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.
  ///  Example: /// Example: Activation
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get timeFunction => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Description of the current weather conditions over a site.
  ///  Example: /// Example: Heavy rain
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get weatherMessage => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get pes => const fb.BoolReader().vTableGet(_bc, _bcOffset, 36, false);
  ///  Estimated number of hot missiles of all types remaining in weapons system inventory.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get hotInventory => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 38, 0);
  ///  Estimated number of cold missiles of all types remaining in weapons system inventory.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get coldInventory => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
  ///  Example: /// Example: Initialization
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get samMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  SAM sensor radar surveillance mode (Active, Passive, Off).
  ///  Example: /// Example: Active
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get radiateMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The primary component degrading the operational capability of the platform or system.
  ///  Example: /// Example: opsImpairment
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get opsImpairment => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  The communications component causing the platform or system to be less than fully operational.
  ///  Example: /// Example: commImpairment
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get commImpairment => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Crisis Action Team (CAT).
  ///  COLD - Not in use.
  ///  WARM - Facility prepped/possible skeleton crew.
  ///  HOT - Fully active.
  ///  Example: /// Example: COLD
  ///  Constraints: Minimum length = 0, Maximum length = 4
  SiteStatusIngestCatEnum get cat => SiteStatusIngestCatEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 50, 0));
  ///  Emergency Operations Center (EOC) status.
  ///  COLD - Not in use.
  ///  WARM - Facility prepped/possible skeleton crew.
  ///  HOT - Fully active.
  ///  Example: /// Example: WARM
  ///  Constraints: Minimum length = 0, Maximum length = 4
  SiteStatusIngestEocEnum get eoc => SiteStatusIngestEocEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 52, 0));
  ///  Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.
  ///  Example: /// Example: ['ATDL', 'IJMS', 'LINK-1']
  ///  Constraints: No constraints specified.
  List<String>? get link => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 54);
  ///  Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.
  ///  Example: /// Example: ['AVAILABLE', 'DEGRADED', 'NOT AVAILABLE']
  ///  Constraints: No constraints specified.
  List<String>? get linkStatus => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 56);
  ///  Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.
  ///  Example: /// Example: ['ILLUMINATING', 'MODE-4', 'MODE-3']
  ///  Constraints: No constraints specified.
  List<String>? get radarSystem => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 58);
  ///  Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.
  ///  Example: /// Example: ['OPERATIONAL', 'OFF', 'NON-OPERATIONAL']
  ///  Constraints: No constraints specified.
  List<String>? get radarStatus => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 60);
  ///  Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.
  ///  Example: /// Example: ['GMD', 'HARPOON', 'JAVELIN']
  ///  Constraints: No constraints specified.
  List<String>? get missile => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 62);
  ///  Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.
  ///  Example: /// Example: [5, 10, 100]
  ///  Constraints: No constraints specified.
  List<String>? get missileInventory => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 64);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SiteStatusIngestDataModeEnum get dataMode => SiteStatusIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 76, 0));

  @override
  String toString() {
    return 'SiteStatusIngest{id: ${id}, classificationMarking: ${classificationMarking}, idSite: ${idSite}, siteType: ${siteType}, mobileAltId: ${mobileAltId}, poiid: ${poiid}, trackId: ${trackId}, trackRefL16: ${trackRefL16}, opsCapability: ${opsCapability}, instStatus: ${instStatus}, fpcon: ${fpcon}, hpcon: ${hpcon}, cpcon: ${cpcon}, reportTime: ${reportTime}, timeFunction: ${timeFunction}, weatherMessage: ${weatherMessage}, pes: ${pes}, hotInventory: ${hotInventory}, coldInventory: ${coldInventory}, samMode: ${samMode}, radiateMode: ${radiateMode}, opsImpairment: ${opsImpairment}, commImpairment: ${commImpairment}, cat: ${cat}, eoc: ${eoc}, link: ${link}, linkStatus: ${linkStatus}, radarSystem: ${radarSystem}, radarStatus: ${radarStatus}, missile: ${missile}, missileInventory: ${missileInventory}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _SiteStatusIngestReader extends fb.TableReader<SiteStatusIngest> {
  const _SiteStatusIngestReader();

  @override
  SiteStatusIngest createObject(fb.BufferContext bc, int offset) => 
    SiteStatusIngest._(bc, offset);
}

class SiteStatusIngestBuilder {
  SiteStatusIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(37);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdSiteOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSiteTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMobileAltIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPoiidOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTrackIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTrackRefL16Offset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOpsCapabilityOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addInstStatus(SiteStatusIngestInstStatusEnum? instStatus) {
    fbBuilder.addInt8(9, instStatus?.value);
    return fbBuilder.offset;
  }
  int addFpcon(SiteStatusIngestFpconEnum? fpcon) {
    fbBuilder.addInt8(10, fpcon?.value);
    return fbBuilder.offset;
  }
  int addHpcon(SiteStatusIngestHpconEnum? hpcon) {
    fbBuilder.addInt8(11, hpcon?.value);
    return fbBuilder.offset;
  }
  int addCpcon(SiteStatusIngestCpconEnum? cpcon) {
    fbBuilder.addInt8(12, cpcon?.value);
    return fbBuilder.offset;
  }
  int addReportTimeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addTimeFunctionOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addWeatherMessageOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addPes(bool? pes) {
    fbBuilder.addBool(16, pes);
    return fbBuilder.offset;
  }
  int addHotInventory(int? hotInventory) {
    fbBuilder.addInt32(17, hotInventory);
    return fbBuilder.offset;
  }
  int addColdInventory(int? coldInventory) {
    fbBuilder.addInt32(18, coldInventory);
    return fbBuilder.offset;
  }
  int addSamModeOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addRadiateModeOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addOpsImpairmentOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addCommImpairmentOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addCat(SiteStatusIngestCatEnum? cat) {
    fbBuilder.addInt8(23, cat?.value);
    return fbBuilder.offset;
  }
  int addEoc(SiteStatusIngestEocEnum? eoc) {
    fbBuilder.addInt8(24, eoc?.value);
    return fbBuilder.offset;
  }
  int addLinkOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addLinkStatusOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addRadarSystemOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addRadarStatusOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addMissileOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addMissileInventoryOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SiteStatusIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(36, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SiteStatusIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idSite;
  final String? _siteType;
  final String? _mobileAltId;
  final String? _poiid;
  final String? _trackId;
  final String? _trackRefL16;
  final String? _opsCapability;
  final SiteStatusIngestInstStatusEnum? _instStatus;
  final SiteStatusIngestFpconEnum? _fpcon;
  final SiteStatusIngestHpconEnum? _hpcon;
  final SiteStatusIngestCpconEnum? _cpcon;
  final String? _reportTime;
  final String? _timeFunction;
  final String? _weatherMessage;
  final bool? _pes;
  final int? _hotInventory;
  final int? _coldInventory;
  final String? _samMode;
  final String? _radiateMode;
  final String? _opsImpairment;
  final String? _commImpairment;
  final SiteStatusIngestCatEnum? _cat;
  final SiteStatusIngestEocEnum? _eoc;
  final List<String>? _link;
  final List<String>? _linkStatus;
  final List<String>? _radarSystem;
  final List<String>? _radarStatus;
  final List<String>? _missile;
  final List<String>? _missileInventory;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SiteStatusIngestDataModeEnum? _dataMode;

  SiteStatusIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idSite,
    String? siteType,
    String? mobileAltId,
    String? poiid,
    String? trackId,
    String? trackRefL16,
    String? opsCapability,
    SiteStatusIngestInstStatusEnum? instStatus,
    SiteStatusIngestFpconEnum? fpcon,
    SiteStatusIngestHpconEnum? hpcon,
    SiteStatusIngestCpconEnum? cpcon,
    String? reportTime,
    String? timeFunction,
    String? weatherMessage,
    bool? pes,
    int? hotInventory,
    int? coldInventory,
    String? samMode,
    String? radiateMode,
    String? opsImpairment,
    String? commImpairment,
    SiteStatusIngestCatEnum? cat,
    SiteStatusIngestEocEnum? eoc,
    List<String>? link,
    List<String>? linkStatus,
    List<String>? radarSystem,
    List<String>? radarStatus,
    List<String>? missile,
    List<String>? missileInventory,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    SiteStatusIngestDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idSite = idSite,
        _siteType = siteType,
        _mobileAltId = mobileAltId,
        _poiid = poiid,
        _trackId = trackId,
        _trackRefL16 = trackRefL16,
        _opsCapability = opsCapability,
        _instStatus = instStatus,
        _fpcon = fpcon,
        _hpcon = hpcon,
        _cpcon = cpcon,
        _reportTime = reportTime,
        _timeFunction = timeFunction,
        _weatherMessage = weatherMessage,
        _pes = pes,
        _hotInventory = hotInventory,
        _coldInventory = coldInventory,
        _samMode = samMode,
        _radiateMode = radiateMode,
        _opsImpairment = opsImpairment,
        _commImpairment = commImpairment,
        _cat = cat,
        _eoc = eoc,
        _link = link,
        _linkStatus = linkStatus,
        _radarSystem = radarSystem,
        _radarStatus = radarStatus,
        _missile = missile,
        _missileInventory = missileInventory,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idSiteOffset = _idSite == null ? null
        : fbBuilder.writeString(_idSite!);
    final int? siteTypeOffset = _siteType == null ? null
        : fbBuilder.writeString(_siteType!);
    final int? mobileAltIdOffset = _mobileAltId == null ? null
        : fbBuilder.writeString(_mobileAltId!);
    final int? poiidOffset = _poiid == null ? null
        : fbBuilder.writeString(_poiid!);
    final int? trackIdOffset = _trackId == null ? null
        : fbBuilder.writeString(_trackId!);
    final int? trackRefL16Offset = _trackRefL16 == null ? null
        : fbBuilder.writeString(_trackRefL16!);
    final int? opsCapabilityOffset = _opsCapability == null ? null
        : fbBuilder.writeString(_opsCapability!);
    final int? reportTimeOffset = _reportTime == null ? null
        : fbBuilder.writeString(_reportTime!);
    final int? timeFunctionOffset = _timeFunction == null ? null
        : fbBuilder.writeString(_timeFunction!);
    final int? weatherMessageOffset = _weatherMessage == null ? null
        : fbBuilder.writeString(_weatherMessage!);
    final int? samModeOffset = _samMode == null ? null
        : fbBuilder.writeString(_samMode!);
    final int? radiateModeOffset = _radiateMode == null ? null
        : fbBuilder.writeString(_radiateMode!);
    final int? opsImpairmentOffset = _opsImpairment == null ? null
        : fbBuilder.writeString(_opsImpairment!);
    final int? commImpairmentOffset = _commImpairment == null ? null
        : fbBuilder.writeString(_commImpairment!);
    final int? linkOffset = _link == null ? null
        : fbBuilder.writeList(_link!.map(fbBuilder.writeString).toList());
    final int? linkStatusOffset = _linkStatus == null ? null
        : fbBuilder.writeList(_linkStatus!.map(fbBuilder.writeString).toList());
    final int? radarSystemOffset = _radarSystem == null ? null
        : fbBuilder.writeList(_radarSystem!.map(fbBuilder.writeString).toList());
    final int? radarStatusOffset = _radarStatus == null ? null
        : fbBuilder.writeList(_radarStatus!.map(fbBuilder.writeString).toList());
    final int? missileOffset = _missile == null ? null
        : fbBuilder.writeList(_missile!.map(fbBuilder.writeString).toList());
    final int? missileInventoryOffset = _missileInventory == null ? null
        : fbBuilder.writeList(_missileInventory!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(37);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idSiteOffset);
    fbBuilder.addOffset(3, siteTypeOffset);
    fbBuilder.addOffset(4, mobileAltIdOffset);
    fbBuilder.addOffset(5, poiidOffset);
    fbBuilder.addOffset(6, trackIdOffset);
    fbBuilder.addOffset(7, trackRefL16Offset);
    fbBuilder.addOffset(8, opsCapabilityOffset);
    fbBuilder.addInt8(9, _instStatus?.value);
    fbBuilder.addInt8(10, _fpcon?.value);
    fbBuilder.addInt8(11, _hpcon?.value);
    fbBuilder.addInt8(12, _cpcon?.value);
    fbBuilder.addOffset(13, reportTimeOffset);
    fbBuilder.addOffset(14, timeFunctionOffset);
    fbBuilder.addOffset(15, weatherMessageOffset);
    fbBuilder.addBool(16, _pes);
    fbBuilder.addInt32(17, _hotInventory);
    fbBuilder.addInt32(18, _coldInventory);
    fbBuilder.addOffset(19, samModeOffset);
    fbBuilder.addOffset(20, radiateModeOffset);
    fbBuilder.addOffset(21, opsImpairmentOffset);
    fbBuilder.addOffset(22, commImpairmentOffset);
    fbBuilder.addInt8(23, _cat?.value);
    fbBuilder.addInt8(24, _eoc?.value);
    fbBuilder.addOffset(25, linkOffset);
    fbBuilder.addOffset(26, linkStatusOffset);
    fbBuilder.addOffset(27, radarSystemOffset);
    fbBuilder.addOffset(28, radarStatusOffset);
    fbBuilder.addOffset(29, missileOffset);
    fbBuilder.addOffset(30, missileInventoryOffset);
    fbBuilder.addOffset(31, createdAtOffset);
    fbBuilder.addOffset(32, createdByOffset);
    fbBuilder.addOffset(33, sourceOffset);
    fbBuilder.addOffset(34, originOffset);
    fbBuilder.addOffset(35, origNetworkOffset);
    fbBuilder.addInt8(36, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
