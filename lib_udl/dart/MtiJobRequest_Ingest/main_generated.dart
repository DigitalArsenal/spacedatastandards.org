// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
class MtiJobRequestIngest {
  MtiJobRequestIngest._(this._bc, this._bcOffset);
  factory MtiJobRequestIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MtiJobRequestIngest> reader = _MtiJobRequestIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The requestor of the sensor service.
  ///  Example: /// Example: REQUESTER
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get r1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Identifier for the tasking message sent by the requesting station.
  ///  Example: /// Example: IDENTIFIER
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get r2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The priority of the request relative to other requests originated by the requesting station.
  ///  Example: /// Example: 15
  ///  Constraints: No constraints specified.
  int get r3 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  North-South position of the first corner (Point A) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get r4 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  East-West position of the first corner (Point A) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get r5 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  North-South position of the second corner (Point B) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get r6 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  East-West position of the second corner (Point B) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get r7 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  North-South position of the third corner (Point C) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get r8 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  East-West position of the third corner (Point C) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get r9 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  North-South position of the fourth corner (Point D) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get r10 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  East-West position of the fourth corner (Point D) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get r11 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Identifies the radar mode requested by the requestor.
  ///  Example: /// Example: MODE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get r12 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Specifies the radar range resolution requested by the requestor, expressed in centimeters.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get r13 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Specifies the radar cross-range resolution requested by the requestor, expressed in decimeters.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  int get r14 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 30, 0);
  ///  Specifies the Earliest Start Time for which the service is requested.  Composite of fields R15-R20.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get jobReqEst => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Specifies the maximum time from the requested start time after which the request is to be abandoned, expressed in seconds.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get r21 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Specifies the time duration for the radar job, measured from the actual start of the job, expressed in seconds.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get r22 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 36, 0);
  ///  Specifies the revisit interval for the radar job, expressed in deciseconds.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  int get r23 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 38, 0);
  ///  the type of sensor or the platform.
  ///  Example: /// Example: TYPE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get r24 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The particular variant of the sensor type.
  ///  Example: /// Example: VARIANT
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get r25 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Flag field indicating that it is an initial request (flag = 0) or the desire of the requestor to cancel (flag = 1) the requested job.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get r26 => const fb.BoolReader().vTableGet(_bc, _bcOffset, 44, false);

  @override
  String toString() {
    return 'MtiJobRequestIngest{r1: ${r1}, r2: ${r2}, r3: ${r3}, r4: ${r4}, r5: ${r5}, r6: ${r6}, r7: ${r7}, r8: ${r8}, r9: ${r9}, r10: ${r10}, r11: ${r11}, r12: ${r12}, r13: ${r13}, r14: ${r14}, jobReqEst: ${jobReqEst}, r21: ${r21}, r22: ${r22}, r23: ${r23}, r24: ${r24}, r25: ${r25}, r26: ${r26}}';
  }
}

class _MtiJobRequestIngestReader extends fb.TableReader<MtiJobRequestIngest> {
  const _MtiJobRequestIngestReader();

  @override
  MtiJobRequestIngest createObject(fb.BufferContext bc, int offset) => 
    MtiJobRequestIngest._(bc, offset);
}

class MtiJobRequestIngestBuilder {
  MtiJobRequestIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(21);
  }

  int addR1Offset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addR2Offset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addR3(int? r3) {
    fbBuilder.addInt32(2, r3);
    return fbBuilder.offset;
  }
  int addR4(double? r4) {
    fbBuilder.addFloat64(3, r4);
    return fbBuilder.offset;
  }
  int addR5(double? r5) {
    fbBuilder.addFloat64(4, r5);
    return fbBuilder.offset;
  }
  int addR6(double? r6) {
    fbBuilder.addFloat64(5, r6);
    return fbBuilder.offset;
  }
  int addR7(double? r7) {
    fbBuilder.addFloat64(6, r7);
    return fbBuilder.offset;
  }
  int addR8(double? r8) {
    fbBuilder.addFloat64(7, r8);
    return fbBuilder.offset;
  }
  int addR9(double? r9) {
    fbBuilder.addFloat64(8, r9);
    return fbBuilder.offset;
  }
  int addR10(double? r10) {
    fbBuilder.addFloat64(9, r10);
    return fbBuilder.offset;
  }
  int addR11(double? r11) {
    fbBuilder.addFloat64(10, r11);
    return fbBuilder.offset;
  }
  int addR12Offset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addR13(int? r13) {
    fbBuilder.addInt32(12, r13);
    return fbBuilder.offset;
  }
  int addR14(int? r14) {
    fbBuilder.addInt32(13, r14);
    return fbBuilder.offset;
  }
  int addJobReqEstOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addR21(int? r21) {
    fbBuilder.addInt32(15, r21);
    return fbBuilder.offset;
  }
  int addR22(int? r22) {
    fbBuilder.addInt32(16, r22);
    return fbBuilder.offset;
  }
  int addR23(int? r23) {
    fbBuilder.addInt32(17, r23);
    return fbBuilder.offset;
  }
  int addR24Offset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addR25Offset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addR26(bool? r26) {
    fbBuilder.addBool(20, r26);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MtiJobRequestIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _r1;
  final String? _r2;
  final int? _r3;
  final double? _r4;
  final double? _r5;
  final double? _r6;
  final double? _r7;
  final double? _r8;
  final double? _r9;
  final double? _r10;
  final double? _r11;
  final String? _r12;
  final int? _r13;
  final int? _r14;
  final String? _jobReqEst;
  final int? _r21;
  final int? _r22;
  final int? _r23;
  final String? _r24;
  final String? _r25;
  final bool? _r26;

  MtiJobRequestIngestObjectBuilder({
    String? r1,
    String? r2,
    int? r3,
    double? r4,
    double? r5,
    double? r6,
    double? r7,
    double? r8,
    double? r9,
    double? r10,
    double? r11,
    String? r12,
    int? r13,
    int? r14,
    String? jobReqEst,
    int? r21,
    int? r22,
    int? r23,
    String? r24,
    String? r25,
    bool? r26,
  })
      : _r1 = r1,
        _r2 = r2,
        _r3 = r3,
        _r4 = r4,
        _r5 = r5,
        _r6 = r6,
        _r7 = r7,
        _r8 = r8,
        _r9 = r9,
        _r10 = r10,
        _r11 = r11,
        _r12 = r12,
        _r13 = r13,
        _r14 = r14,
        _jobReqEst = jobReqEst,
        _r21 = r21,
        _r22 = r22,
        _r23 = r23,
        _r24 = r24,
        _r25 = r25,
        _r26 = r26;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? r1Offset = _r1 == null ? null
        : fbBuilder.writeString(_r1!);
    final int? r2Offset = _r2 == null ? null
        : fbBuilder.writeString(_r2!);
    final int? r12Offset = _r12 == null ? null
        : fbBuilder.writeString(_r12!);
    final int? jobReqEstOffset = _jobReqEst == null ? null
        : fbBuilder.writeString(_jobReqEst!);
    final int? r24Offset = _r24 == null ? null
        : fbBuilder.writeString(_r24!);
    final int? r25Offset = _r25 == null ? null
        : fbBuilder.writeString(_r25!);
    fbBuilder.startTable(21);
    fbBuilder.addOffset(0, r1Offset);
    fbBuilder.addOffset(1, r2Offset);
    fbBuilder.addInt32(2, _r3);
    fbBuilder.addFloat64(3, _r4);
    fbBuilder.addFloat64(4, _r5);
    fbBuilder.addFloat64(5, _r6);
    fbBuilder.addFloat64(6, _r7);
    fbBuilder.addFloat64(7, _r8);
    fbBuilder.addFloat64(8, _r9);
    fbBuilder.addFloat64(9, _r10);
    fbBuilder.addFloat64(10, _r11);
    fbBuilder.addOffset(11, r12Offset);
    fbBuilder.addInt32(12, _r13);
    fbBuilder.addInt32(13, _r14);
    fbBuilder.addOffset(14, jobReqEstOffset);
    fbBuilder.addInt32(15, _r21);
    fbBuilder.addInt32(16, _r22);
    fbBuilder.addInt32(17, _r23);
    fbBuilder.addOffset(18, r24Offset);
    fbBuilder.addOffset(19, r25Offset);
    fbBuilder.addBool(20, _r26);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
