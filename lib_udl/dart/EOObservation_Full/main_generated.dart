// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class EoobservationFullDataModeEnum {
  final int value;
  const EoobservationFullDataModeEnum._(this.value);

  factory EoobservationFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EoobservationFullDataModeEnum');
    }
    return result;
  }

  static EoobservationFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : EoobservationFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const EoobservationFullDataModeEnum REAL = EoobservationFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const EoobservationFullDataModeEnum TEST = EoobservationFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const EoobservationFullDataModeEnum SIMULATED = EoobservationFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const EoobservationFullDataModeEnum EXERCISE = EoobservationFullDataModeEnum._(3);
  static const Map<int, EoobservationFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<EoobservationFullDataModeEnum> reader = _EoobservationFullDataModeEnumReader();

  @override
  String toString() {
    return 'EoobservationFullDataModeEnum{value: $value}';
  }
}

class _EoobservationFullDataModeEnumReader extends fb.Reader<EoobservationFullDataModeEnum> {
  const _EoobservationFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  EoobservationFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      EoobservationFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class EoobservationFullReferenceFrameEnum {
  final int value;
  const EoobservationFullReferenceFrameEnum._(this.value);

  factory EoobservationFullReferenceFrameEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EoobservationFullReferenceFrameEnum');
    }
    return result;
  }

  static EoobservationFullReferenceFrameEnum? _createOrNull(int? value) => 
      value == null ? null : EoobservationFullReferenceFrameEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const EoobservationFullReferenceFrameEnum J2000 = EoobservationFullReferenceFrameEnum._(0);

  ///  No description available.
  static const EoobservationFullReferenceFrameEnum GCRF = EoobservationFullReferenceFrameEnum._(1);

  ///  No description available.
  static const EoobservationFullReferenceFrameEnum ITRF = EoobservationFullReferenceFrameEnum._(2);

  ///  No description available.
  static const EoobservationFullReferenceFrameEnum TEME = EoobservationFullReferenceFrameEnum._(3);
  static const Map<int, EoobservationFullReferenceFrameEnum> values = {
    0: J2000,
    1: GCRF,
    2: ITRF,
    3: TEME};

  static const fb.Reader<EoobservationFullReferenceFrameEnum> reader = _EoobservationFullReferenceFrameEnumReader();

  @override
  String toString() {
    return 'EoobservationFullReferenceFrameEnum{value: $value}';
  }
}

class _EoobservationFullReferenceFrameEnumReader extends fb.Reader<EoobservationFullReferenceFrameEnum> {
  const _EoobservationFullReferenceFrameEnumReader();

  @override
  int get size => 1;

  @override
  EoobservationFullReferenceFrameEnum read(fb.BufferContext bc, int offset) =>
      EoobservationFullReferenceFrameEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class EoobservationFullSenReferenceFrameEnum {
  final int value;
  const EoobservationFullSenReferenceFrameEnum._(this.value);

  factory EoobservationFullSenReferenceFrameEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EoobservationFullSenReferenceFrameEnum');
    }
    return result;
  }

  static EoobservationFullSenReferenceFrameEnum? _createOrNull(int? value) => 
      value == null ? null : EoobservationFullSenReferenceFrameEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const EoobservationFullSenReferenceFrameEnum J2000 = EoobservationFullSenReferenceFrameEnum._(0);

  ///  No description available.
  static const EoobservationFullSenReferenceFrameEnum EFG_TDR = EoobservationFullSenReferenceFrameEnum._(1);

  ///  No description available.
  static const EoobservationFullSenReferenceFrameEnum ECR_ECEF = EoobservationFullSenReferenceFrameEnum._(2);

  ///  No description available.
  static const EoobservationFullSenReferenceFrameEnum TEME = EoobservationFullSenReferenceFrameEnum._(3);

  ///  No description available.
  static const EoobservationFullSenReferenceFrameEnum ITRF = EoobservationFullSenReferenceFrameEnum._(4);

  ///  No description available.
  static const EoobservationFullSenReferenceFrameEnum GCRF = EoobservationFullSenReferenceFrameEnum._(5);
  static const Map<int, EoobservationFullSenReferenceFrameEnum> values = {
    0: J2000,
    1: EFG_TDR,
    2: ECR_ECEF,
    3: TEME,
    4: ITRF,
    5: GCRF};

  static const fb.Reader<EoobservationFullSenReferenceFrameEnum> reader = _EoobservationFullSenReferenceFrameEnumReader();

  @override
  String toString() {
    return 'EoobservationFullSenReferenceFrameEnum{value: $value}';
  }
}

class _EoobservationFullSenReferenceFrameEnumReader extends fb.Reader<EoobservationFullSenReferenceFrameEnum> {
  const _EoobservationFullSenReferenceFrameEnumReader();

  @override
  int get size => 1;

  @override
  EoobservationFullSenReferenceFrameEnum read(fb.BufferContext bc, int offset) =>
      EoobservationFullSenReferenceFrameEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.
class EoobservationFull {
  EoobservationFull._(this._bc, this._bcOffset);
  factory EoobservationFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EoobservationFull> reader = _EoobservationFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: EOOBSERVATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Ob detection time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get obTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Object Correlation Quality value (non-standardized). Users should consult data providers regarding the expected range of values.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get corrQuality => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Unique identifier of the target on-orbit object, if correlated.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Unique identifier of the Sky Imagery.
  ///  Example: /// Example: SKYIMAGERY-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSkyImagery => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
  ///  Example: /// Example: AUTOTRACK
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get collectMethod => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  ///  Optional identifier to indicate the specific tasking which produced this observation.
  ///  Example: /// Example: TASK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get taskId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Optional identifier of the track to which this observation belongs.
  ///  Example: /// Example: TRACK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trackId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  ///  Example: /// Example: FIRST
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get obPosition => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get uct => const fb.BoolReader().vTableGet(_bc, _bcOffset, 34, false);
  ///  Line of sight azimuth angle in degrees and topocentric frame.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get azimuth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  One sigma uncertainty in the line of sight azimuth angle, in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get azimuthUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Sensor line of sight azimuth angle bias in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get azimuthBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Rate of change of the line of sight azimuth in degrees per second.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get azimuthRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Line of sight elevation in degrees and topocentric frame.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get elevation => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  One sigma uncertainty in the line of sight elevation angle, in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get elevationUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Sensor line of sight elevation bias in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get elevationBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Rate of change of the line of sight elevation in degrees per second.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get elevationRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Line of sight range in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get range => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  One sigma uncertainty in the line of sight range, in kilometers.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get rangeUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Sensor line of sight range bias in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get rangeBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Rate of change of the line of sight range in km/sec.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get rangeRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  One sigma uncertainty in the line of sight range rate, in kilometers/second.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get rangeRateUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Line of sight right ascension, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get ra => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get raRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  One sigma uncertainty in the line of sight right ascension angle, in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get raUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Sensor line of sight right ascension bias in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get raBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Line of sight declination, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get declination => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get declinationRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  One sigma uncertainty in the line of sight declination angle, in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get declinationUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  Sensor line of sight declination angle bias in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get declinationBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get losx => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get losy => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get losz => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  One sigma uncertainty in the line of sight pointing in micro-radians.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get losUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get losxvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get losyvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get loszvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  double get senlat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get senlon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  Sensor altitude at obTime (if mobile/onorbit) in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senalt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senx => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get seny => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senz => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senvelx => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senvely => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senvelz => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).
  ///  Example: /// Example: [0.4492, 0.02, 0.8765, 0.2213]
  ///  Constraints: No constraints specified.
  List<String>? get senQuat => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 110);
  ///  The number of RSOs detected in the sensor field of view.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get fovCount => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 112, 0);
  ///  Image exposure duration in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get expDuration => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  Formula: 2.5 * log_10 (zero_mag_counts / expDuration).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get zeroptd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 116, 0.0);
  ///  Net object signature = counts / expDuration.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get netObjSig => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  ///  Net object signature uncertainty = counts uncertainty / expDuration.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get netObjSigUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 120, 0.0);
  ///  Calibrated magnitude in units of magnitudes.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get mag => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  Uncertainty of calibrated magnitude in units of magnitudes.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get magUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  Formula: mag - 5.0 * log_10(geo_range / 1000000.0).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get magNormRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  ///  For GEO detections, the latitude in degrees north.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get geolat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 128, 0.0);
  ///  For GEO detections, the longitude in degrees east.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get geolon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 130, 0.0);
  ///  For GEO detections, the altitude in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get geoalt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  ///  For GEO detections, the range in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get georange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 134, 0.0);
  ///  Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get skyBkgrnd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 136, 0.0);
  ///  Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get primaryExtinction => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 138, 0.0);
  ///  Primary Extinction Coefficient Uncertainty, in Magnitudes.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get primaryExtinctionUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 140, 0.0);
  ///  The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get solarPhaseAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 142, 0.0);
  ///  The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing and positive when opening.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get solarEqPhaseAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 144, 0.0);
  ///  Angle from the sun to the equatorial plane.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get solarDecAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  ///  Shutter delay in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get shutterDelay => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 148, 0.0);
  ///  Sensor timing bias in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get timingBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 150, 0.0);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 152);
  ///  Intensity of the target for IR observations, in kw/sr/um.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get intensity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 154, 0.0);
  ///  Background intensity for IR observations, in kw/sr/um.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get bgIntensity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 156, 0.0);
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: PROVIDED_DATA1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get descriptor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 158);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 160);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 162);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  EoobservationFullDataModeEnum get dataMode => EoobservationFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 164, 0));
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 166);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 168);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 170);
  ///  This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get zeroPtdUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 172, 0.0);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get eoobservationDetails => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 174);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get onOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 176);
  ///  The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  EoobservationFullReferenceFrameEnum get referenceFrame => EoobservationFullReferenceFrameEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 178, 0));
  ///  The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  EoobservationFullSenReferenceFrameEnum get senReferenceFrame => EoobservationFullSenReferenceFrameEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 180, 0));
  ///  Boolean indicating that the target object was in umbral eclipse at the time of this observation.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get umbra => const fb.BoolReader().vTableGet(_bc, _bcOffset, 182, false);
  ///  Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get penumbra => const fb.BoolReader().vTableGet(_bc, _bcOffset, 184, false);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 186);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 188);
  ///  Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  ///  Example: /// Example: OPTICAL
  ///  Constraints: No constraints specified.
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 190);

  @override
  String toString() {
    return 'EoobservationFull{id: ${id}, classificationMarking: ${classificationMarking}, obTime: ${obTime}, corrQuality: ${corrQuality}, idOnOrbit: ${idOnOrbit}, idSensor: ${idSensor}, idSkyImagery: ${idSkyImagery}, collectMethod: ${collectMethod}, satNo: ${satNo}, taskId: ${taskId}, transactionId: ${transactionId}, trackId: ${trackId}, obPosition: ${obPosition}, origObjectId: ${origObjectId}, origSensorId: ${origSensorId}, uct: ${uct}, azimuth: ${azimuth}, azimuthUnc: ${azimuthUnc}, azimuthBias: ${azimuthBias}, azimuthRate: ${azimuthRate}, elevation: ${elevation}, elevationUnc: ${elevationUnc}, elevationBias: ${elevationBias}, elevationRate: ${elevationRate}, range: ${range}, rangeUnc: ${rangeUnc}, rangeBias: ${rangeBias}, rangeRate: ${rangeRate}, rangeRateUnc: ${rangeRateUnc}, ra: ${ra}, raRate: ${raRate}, raUnc: ${raUnc}, raBias: ${raBias}, declination: ${declination}, declinationRate: ${declinationRate}, declinationUnc: ${declinationUnc}, declinationBias: ${declinationBias}, losx: ${losx}, losy: ${losy}, losz: ${losz}, losUnc: ${losUnc}, losxvel: ${losxvel}, losyvel: ${losyvel}, loszvel: ${loszvel}, senlat: ${senlat}, senlon: ${senlon}, senalt: ${senalt}, senx: ${senx}, seny: ${seny}, senz: ${senz}, senvelx: ${senvelx}, senvely: ${senvely}, senvelz: ${senvelz}, senQuat: ${senQuat}, fovCount: ${fovCount}, expDuration: ${expDuration}, zeroptd: ${zeroptd}, netObjSig: ${netObjSig}, netObjSigUnc: ${netObjSigUnc}, mag: ${mag}, magUnc: ${magUnc}, magNormRange: ${magNormRange}, geolat: ${geolat}, geolon: ${geolon}, geoalt: ${geoalt}, georange: ${georange}, skyBkgrnd: ${skyBkgrnd}, primaryExtinction: ${primaryExtinction}, primaryExtinctionUnc: ${primaryExtinctionUnc}, solarPhaseAngle: ${solarPhaseAngle}, solarEqPhaseAngle: ${solarEqPhaseAngle}, solarDecAngle: ${solarDecAngle}, shutterDelay: ${shutterDelay}, timingBias: ${timingBias}, rawFileUri: ${rawFileUri}, intensity: ${intensity}, bgIntensity: ${bgIntensity}, descriptor: ${descriptor}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, tags: ${tags}, createdAt: ${createdAt}, createdBy: ${createdBy}, zeroPtdUnc: ${zeroPtdUnc}, eoobservationDetails: ${eoobservationDetails}, onOrbit: ${onOrbit}, referenceFrame: ${referenceFrame}, senReferenceFrame: ${senReferenceFrame}, umbra: ${umbra}, penumbra: ${penumbra}, origNetwork: ${origNetwork}, sourceDl: ${sourceDl}, type: ${type}}';
  }
}

class _EoobservationFullReader extends fb.TableReader<EoobservationFull> {
  const _EoobservationFullReader();

  @override
  EoobservationFull createObject(fb.BufferContext bc, int offset) => 
    EoobservationFull._(bc, offset);
}

class EoobservationFullBuilder {
  EoobservationFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(94);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addObTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCorrQuality(double? corrQuality) {
    fbBuilder.addFloat64(3, corrQuality);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addIdSkyImageryOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCollectMethodOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(8, satNo);
    return fbBuilder.offset;
  }
  int addTaskIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addTrackIdOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addObPositionOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addUct(bool? uct) {
    fbBuilder.addBool(15, uct);
    return fbBuilder.offset;
  }
  int addAzimuth(double? azimuth) {
    fbBuilder.addFloat64(16, azimuth);
    return fbBuilder.offset;
  }
  int addAzimuthUnc(double? azimuthUnc) {
    fbBuilder.addFloat64(17, azimuthUnc);
    return fbBuilder.offset;
  }
  int addAzimuthBias(double? azimuthBias) {
    fbBuilder.addFloat64(18, azimuthBias);
    return fbBuilder.offset;
  }
  int addAzimuthRate(double? azimuthRate) {
    fbBuilder.addFloat64(19, azimuthRate);
    return fbBuilder.offset;
  }
  int addElevation(double? elevation) {
    fbBuilder.addFloat64(20, elevation);
    return fbBuilder.offset;
  }
  int addElevationUnc(double? elevationUnc) {
    fbBuilder.addFloat64(21, elevationUnc);
    return fbBuilder.offset;
  }
  int addElevationBias(double? elevationBias) {
    fbBuilder.addFloat64(22, elevationBias);
    return fbBuilder.offset;
  }
  int addElevationRate(double? elevationRate) {
    fbBuilder.addFloat64(23, elevationRate);
    return fbBuilder.offset;
  }
  int addRange(double? range) {
    fbBuilder.addFloat64(24, range);
    return fbBuilder.offset;
  }
  int addRangeUnc(double? rangeUnc) {
    fbBuilder.addFloat64(25, rangeUnc);
    return fbBuilder.offset;
  }
  int addRangeBias(double? rangeBias) {
    fbBuilder.addFloat64(26, rangeBias);
    return fbBuilder.offset;
  }
  int addRangeRate(double? rangeRate) {
    fbBuilder.addFloat64(27, rangeRate);
    return fbBuilder.offset;
  }
  int addRangeRateUnc(double? rangeRateUnc) {
    fbBuilder.addFloat64(28, rangeRateUnc);
    return fbBuilder.offset;
  }
  int addRa(double? ra) {
    fbBuilder.addFloat64(29, ra);
    return fbBuilder.offset;
  }
  int addRaRate(double? raRate) {
    fbBuilder.addFloat64(30, raRate);
    return fbBuilder.offset;
  }
  int addRaUnc(double? raUnc) {
    fbBuilder.addFloat64(31, raUnc);
    return fbBuilder.offset;
  }
  int addRaBias(double? raBias) {
    fbBuilder.addFloat64(32, raBias);
    return fbBuilder.offset;
  }
  int addDeclination(double? declination) {
    fbBuilder.addFloat64(33, declination);
    return fbBuilder.offset;
  }
  int addDeclinationRate(double? declinationRate) {
    fbBuilder.addFloat64(34, declinationRate);
    return fbBuilder.offset;
  }
  int addDeclinationUnc(double? declinationUnc) {
    fbBuilder.addFloat64(35, declinationUnc);
    return fbBuilder.offset;
  }
  int addDeclinationBias(double? declinationBias) {
    fbBuilder.addFloat64(36, declinationBias);
    return fbBuilder.offset;
  }
  int addLosx(double? losx) {
    fbBuilder.addFloat64(37, losx);
    return fbBuilder.offset;
  }
  int addLosy(double? losy) {
    fbBuilder.addFloat64(38, losy);
    return fbBuilder.offset;
  }
  int addLosz(double? losz) {
    fbBuilder.addFloat64(39, losz);
    return fbBuilder.offset;
  }
  int addLosUnc(double? losUnc) {
    fbBuilder.addFloat64(40, losUnc);
    return fbBuilder.offset;
  }
  int addLosxvel(double? losxvel) {
    fbBuilder.addFloat64(41, losxvel);
    return fbBuilder.offset;
  }
  int addLosyvel(double? losyvel) {
    fbBuilder.addFloat64(42, losyvel);
    return fbBuilder.offset;
  }
  int addLoszvel(double? loszvel) {
    fbBuilder.addFloat64(43, loszvel);
    return fbBuilder.offset;
  }
  int addSenlat(double? senlat) {
    fbBuilder.addFloat64(44, senlat);
    return fbBuilder.offset;
  }
  int addSenlon(double? senlon) {
    fbBuilder.addFloat64(45, senlon);
    return fbBuilder.offset;
  }
  int addSenalt(double? senalt) {
    fbBuilder.addFloat64(46, senalt);
    return fbBuilder.offset;
  }
  int addSenx(double? senx) {
    fbBuilder.addFloat64(47, senx);
    return fbBuilder.offset;
  }
  int addSeny(double? seny) {
    fbBuilder.addFloat64(48, seny);
    return fbBuilder.offset;
  }
  int addSenz(double? senz) {
    fbBuilder.addFloat64(49, senz);
    return fbBuilder.offset;
  }
  int addSenvelx(double? senvelx) {
    fbBuilder.addFloat64(50, senvelx);
    return fbBuilder.offset;
  }
  int addSenvely(double? senvely) {
    fbBuilder.addFloat64(51, senvely);
    return fbBuilder.offset;
  }
  int addSenvelz(double? senvelz) {
    fbBuilder.addFloat64(52, senvelz);
    return fbBuilder.offset;
  }
  int addSenQuatOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addFovCount(int? fovCount) {
    fbBuilder.addInt32(54, fovCount);
    return fbBuilder.offset;
  }
  int addExpDuration(double? expDuration) {
    fbBuilder.addFloat64(55, expDuration);
    return fbBuilder.offset;
  }
  int addZeroptd(double? zeroptd) {
    fbBuilder.addFloat64(56, zeroptd);
    return fbBuilder.offset;
  }
  int addNetObjSig(double? netObjSig) {
    fbBuilder.addFloat64(57, netObjSig);
    return fbBuilder.offset;
  }
  int addNetObjSigUnc(double? netObjSigUnc) {
    fbBuilder.addFloat64(58, netObjSigUnc);
    return fbBuilder.offset;
  }
  int addMag(double? mag) {
    fbBuilder.addFloat64(59, mag);
    return fbBuilder.offset;
  }
  int addMagUnc(double? magUnc) {
    fbBuilder.addFloat64(60, magUnc);
    return fbBuilder.offset;
  }
  int addMagNormRange(double? magNormRange) {
    fbBuilder.addFloat64(61, magNormRange);
    return fbBuilder.offset;
  }
  int addGeolat(double? geolat) {
    fbBuilder.addFloat64(62, geolat);
    return fbBuilder.offset;
  }
  int addGeolon(double? geolon) {
    fbBuilder.addFloat64(63, geolon);
    return fbBuilder.offset;
  }
  int addGeoalt(double? geoalt) {
    fbBuilder.addFloat64(64, geoalt);
    return fbBuilder.offset;
  }
  int addGeorange(double? georange) {
    fbBuilder.addFloat64(65, georange);
    return fbBuilder.offset;
  }
  int addSkyBkgrnd(double? skyBkgrnd) {
    fbBuilder.addFloat64(66, skyBkgrnd);
    return fbBuilder.offset;
  }
  int addPrimaryExtinction(double? primaryExtinction) {
    fbBuilder.addFloat64(67, primaryExtinction);
    return fbBuilder.offset;
  }
  int addPrimaryExtinctionUnc(double? primaryExtinctionUnc) {
    fbBuilder.addFloat64(68, primaryExtinctionUnc);
    return fbBuilder.offset;
  }
  int addSolarPhaseAngle(double? solarPhaseAngle) {
    fbBuilder.addFloat64(69, solarPhaseAngle);
    return fbBuilder.offset;
  }
  int addSolarEqPhaseAngle(double? solarEqPhaseAngle) {
    fbBuilder.addFloat64(70, solarEqPhaseAngle);
    return fbBuilder.offset;
  }
  int addSolarDecAngle(double? solarDecAngle) {
    fbBuilder.addFloat64(71, solarDecAngle);
    return fbBuilder.offset;
  }
  int addShutterDelay(double? shutterDelay) {
    fbBuilder.addFloat64(72, shutterDelay);
    return fbBuilder.offset;
  }
  int addTimingBias(double? timingBias) {
    fbBuilder.addFloat64(73, timingBias);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(74, offset);
    return fbBuilder.offset;
  }
  int addIntensity(double? intensity) {
    fbBuilder.addFloat64(75, intensity);
    return fbBuilder.offset;
  }
  int addBgIntensity(double? bgIntensity) {
    fbBuilder.addFloat64(76, bgIntensity);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(77, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(78, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(79, offset);
    return fbBuilder.offset;
  }
  int addDataMode(EoobservationFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(80, dataMode?.value);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(81, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(82, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(83, offset);
    return fbBuilder.offset;
  }
  int addZeroPtdUnc(double? zeroPtdUnc) {
    fbBuilder.addFloat64(84, zeroPtdUnc);
    return fbBuilder.offset;
  }
  int addEoobservationDetailsOffset(int? offset) {
    fbBuilder.addOffset(85, offset);
    return fbBuilder.offset;
  }
  int addOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(86, offset);
    return fbBuilder.offset;
  }
  int addReferenceFrame(EoobservationFullReferenceFrameEnum? referenceFrame) {
    fbBuilder.addInt8(87, referenceFrame?.value);
    return fbBuilder.offset;
  }
  int addSenReferenceFrame(EoobservationFullSenReferenceFrameEnum? senReferenceFrame) {
    fbBuilder.addInt8(88, senReferenceFrame?.value);
    return fbBuilder.offset;
  }
  int addUmbra(bool? umbra) {
    fbBuilder.addBool(89, umbra);
    return fbBuilder.offset;
  }
  int addPenumbra(bool? penumbra) {
    fbBuilder.addBool(90, penumbra);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(91, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(92, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(93, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EoobservationFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _obTime;
  final double? _corrQuality;
  final String? _idOnOrbit;
  final String? _idSensor;
  final String? _idSkyImagery;
  final String? _collectMethod;
  final int? _satNo;
  final String? _taskId;
  final String? _transactionId;
  final String? _trackId;
  final String? _obPosition;
  final String? _origObjectId;
  final String? _origSensorId;
  final bool? _uct;
  final double? _azimuth;
  final double? _azimuthUnc;
  final double? _azimuthBias;
  final double? _azimuthRate;
  final double? _elevation;
  final double? _elevationUnc;
  final double? _elevationBias;
  final double? _elevationRate;
  final double? _range;
  final double? _rangeUnc;
  final double? _rangeBias;
  final double? _rangeRate;
  final double? _rangeRateUnc;
  final double? _ra;
  final double? _raRate;
  final double? _raUnc;
  final double? _raBias;
  final double? _declination;
  final double? _declinationRate;
  final double? _declinationUnc;
  final double? _declinationBias;
  final double? _losx;
  final double? _losy;
  final double? _losz;
  final double? _losUnc;
  final double? _losxvel;
  final double? _losyvel;
  final double? _loszvel;
  final double? _senlat;
  final double? _senlon;
  final double? _senalt;
  final double? _senx;
  final double? _seny;
  final double? _senz;
  final double? _senvelx;
  final double? _senvely;
  final double? _senvelz;
  final List<String>? _senQuat;
  final int? _fovCount;
  final double? _expDuration;
  final double? _zeroptd;
  final double? _netObjSig;
  final double? _netObjSigUnc;
  final double? _mag;
  final double? _magUnc;
  final double? _magNormRange;
  final double? _geolat;
  final double? _geolon;
  final double? _geoalt;
  final double? _georange;
  final double? _skyBkgrnd;
  final double? _primaryExtinction;
  final double? _primaryExtinctionUnc;
  final double? _solarPhaseAngle;
  final double? _solarEqPhaseAngle;
  final double? _solarDecAngle;
  final double? _shutterDelay;
  final double? _timingBias;
  final String? _rawFileUri;
  final double? _intensity;
  final double? _bgIntensity;
  final String? _descriptor;
  final String? _source;
  final String? _origin;
  final EoobservationFullDataModeEnum? _dataMode;
  final List<String>? _tags;
  final String? _createdAt;
  final String? _createdBy;
  final double? _zeroPtdUnc;
  final String? _eoobservationDetails;
  final String? _onOrbit;
  final EoobservationFullReferenceFrameEnum? _referenceFrame;
  final EoobservationFullSenReferenceFrameEnum? _senReferenceFrame;
  final bool? _umbra;
  final bool? _penumbra;
  final String? _origNetwork;
  final String? _sourceDl;
  final String? _type;

  EoobservationFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? obTime,
    double? corrQuality,
    String? idOnOrbit,
    String? idSensor,
    String? idSkyImagery,
    String? collectMethod,
    int? satNo,
    String? taskId,
    String? transactionId,
    String? trackId,
    String? obPosition,
    String? origObjectId,
    String? origSensorId,
    bool? uct,
    double? azimuth,
    double? azimuthUnc,
    double? azimuthBias,
    double? azimuthRate,
    double? elevation,
    double? elevationUnc,
    double? elevationBias,
    double? elevationRate,
    double? range,
    double? rangeUnc,
    double? rangeBias,
    double? rangeRate,
    double? rangeRateUnc,
    double? ra,
    double? raRate,
    double? raUnc,
    double? raBias,
    double? declination,
    double? declinationRate,
    double? declinationUnc,
    double? declinationBias,
    double? losx,
    double? losy,
    double? losz,
    double? losUnc,
    double? losxvel,
    double? losyvel,
    double? loszvel,
    double? senlat,
    double? senlon,
    double? senalt,
    double? senx,
    double? seny,
    double? senz,
    double? senvelx,
    double? senvely,
    double? senvelz,
    List<String>? senQuat,
    int? fovCount,
    double? expDuration,
    double? zeroptd,
    double? netObjSig,
    double? netObjSigUnc,
    double? mag,
    double? magUnc,
    double? magNormRange,
    double? geolat,
    double? geolon,
    double? geoalt,
    double? georange,
    double? skyBkgrnd,
    double? primaryExtinction,
    double? primaryExtinctionUnc,
    double? solarPhaseAngle,
    double? solarEqPhaseAngle,
    double? solarDecAngle,
    double? shutterDelay,
    double? timingBias,
    String? rawFileUri,
    double? intensity,
    double? bgIntensity,
    String? descriptor,
    String? source,
    String? origin,
    EoobservationFullDataModeEnum? dataMode,
    List<String>? tags,
    String? createdAt,
    String? createdBy,
    double? zeroPtdUnc,
    String? eoobservationDetails,
    String? onOrbit,
    EoobservationFullReferenceFrameEnum? referenceFrame,
    EoobservationFullSenReferenceFrameEnum? senReferenceFrame,
    bool? umbra,
    bool? penumbra,
    String? origNetwork,
    String? sourceDl,
    String? type,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _obTime = obTime,
        _corrQuality = corrQuality,
        _idOnOrbit = idOnOrbit,
        _idSensor = idSensor,
        _idSkyImagery = idSkyImagery,
        _collectMethod = collectMethod,
        _satNo = satNo,
        _taskId = taskId,
        _transactionId = transactionId,
        _trackId = trackId,
        _obPosition = obPosition,
        _origObjectId = origObjectId,
        _origSensorId = origSensorId,
        _uct = uct,
        _azimuth = azimuth,
        _azimuthUnc = azimuthUnc,
        _azimuthBias = azimuthBias,
        _azimuthRate = azimuthRate,
        _elevation = elevation,
        _elevationUnc = elevationUnc,
        _elevationBias = elevationBias,
        _elevationRate = elevationRate,
        _range = range,
        _rangeUnc = rangeUnc,
        _rangeBias = rangeBias,
        _rangeRate = rangeRate,
        _rangeRateUnc = rangeRateUnc,
        _ra = ra,
        _raRate = raRate,
        _raUnc = raUnc,
        _raBias = raBias,
        _declination = declination,
        _declinationRate = declinationRate,
        _declinationUnc = declinationUnc,
        _declinationBias = declinationBias,
        _losx = losx,
        _losy = losy,
        _losz = losz,
        _losUnc = losUnc,
        _losxvel = losxvel,
        _losyvel = losyvel,
        _loszvel = loszvel,
        _senlat = senlat,
        _senlon = senlon,
        _senalt = senalt,
        _senx = senx,
        _seny = seny,
        _senz = senz,
        _senvelx = senvelx,
        _senvely = senvely,
        _senvelz = senvelz,
        _senQuat = senQuat,
        _fovCount = fovCount,
        _expDuration = expDuration,
        _zeroptd = zeroptd,
        _netObjSig = netObjSig,
        _netObjSigUnc = netObjSigUnc,
        _mag = mag,
        _magUnc = magUnc,
        _magNormRange = magNormRange,
        _geolat = geolat,
        _geolon = geolon,
        _geoalt = geoalt,
        _georange = georange,
        _skyBkgrnd = skyBkgrnd,
        _primaryExtinction = primaryExtinction,
        _primaryExtinctionUnc = primaryExtinctionUnc,
        _solarPhaseAngle = solarPhaseAngle,
        _solarEqPhaseAngle = solarEqPhaseAngle,
        _solarDecAngle = solarDecAngle,
        _shutterDelay = shutterDelay,
        _timingBias = timingBias,
        _rawFileUri = rawFileUri,
        _intensity = intensity,
        _bgIntensity = bgIntensity,
        _descriptor = descriptor,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _tags = tags,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _zeroPtdUnc = zeroPtdUnc,
        _eoobservationDetails = eoobservationDetails,
        _onOrbit = onOrbit,
        _referenceFrame = referenceFrame,
        _senReferenceFrame = senReferenceFrame,
        _umbra = umbra,
        _penumbra = penumbra,
        _origNetwork = origNetwork,
        _sourceDl = sourceDl,
        _type = type;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? obTimeOffset = _obTime == null ? null
        : fbBuilder.writeString(_obTime!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? idSkyImageryOffset = _idSkyImagery == null ? null
        : fbBuilder.writeString(_idSkyImagery!);
    final int? collectMethodOffset = _collectMethod == null ? null
        : fbBuilder.writeString(_collectMethod!);
    final int? taskIdOffset = _taskId == null ? null
        : fbBuilder.writeString(_taskId!);
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? trackIdOffset = _trackId == null ? null
        : fbBuilder.writeString(_trackId!);
    final int? obPositionOffset = _obPosition == null ? null
        : fbBuilder.writeString(_obPosition!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? senQuatOffset = _senQuat == null ? null
        : fbBuilder.writeList(_senQuat!.map(fbBuilder.writeString).toList());
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? descriptorOffset = _descriptor == null ? null
        : fbBuilder.writeString(_descriptor!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? eoobservationDetailsOffset = _eoobservationDetails == null ? null
        : fbBuilder.writeString(_eoobservationDetails!);
    final int? onOrbitOffset = _onOrbit == null ? null
        : fbBuilder.writeString(_onOrbit!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    fbBuilder.startTable(94);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, obTimeOffset);
    fbBuilder.addFloat64(3, _corrQuality);
    fbBuilder.addOffset(4, idOnOrbitOffset);
    fbBuilder.addOffset(5, idSensorOffset);
    fbBuilder.addOffset(6, idSkyImageryOffset);
    fbBuilder.addOffset(7, collectMethodOffset);
    fbBuilder.addInt32(8, _satNo);
    fbBuilder.addOffset(9, taskIdOffset);
    fbBuilder.addOffset(10, transactionIdOffset);
    fbBuilder.addOffset(11, trackIdOffset);
    fbBuilder.addOffset(12, obPositionOffset);
    fbBuilder.addOffset(13, origObjectIdOffset);
    fbBuilder.addOffset(14, origSensorIdOffset);
    fbBuilder.addBool(15, _uct);
    fbBuilder.addFloat64(16, _azimuth);
    fbBuilder.addFloat64(17, _azimuthUnc);
    fbBuilder.addFloat64(18, _azimuthBias);
    fbBuilder.addFloat64(19, _azimuthRate);
    fbBuilder.addFloat64(20, _elevation);
    fbBuilder.addFloat64(21, _elevationUnc);
    fbBuilder.addFloat64(22, _elevationBias);
    fbBuilder.addFloat64(23, _elevationRate);
    fbBuilder.addFloat64(24, _range);
    fbBuilder.addFloat64(25, _rangeUnc);
    fbBuilder.addFloat64(26, _rangeBias);
    fbBuilder.addFloat64(27, _rangeRate);
    fbBuilder.addFloat64(28, _rangeRateUnc);
    fbBuilder.addFloat64(29, _ra);
    fbBuilder.addFloat64(30, _raRate);
    fbBuilder.addFloat64(31, _raUnc);
    fbBuilder.addFloat64(32, _raBias);
    fbBuilder.addFloat64(33, _declination);
    fbBuilder.addFloat64(34, _declinationRate);
    fbBuilder.addFloat64(35, _declinationUnc);
    fbBuilder.addFloat64(36, _declinationBias);
    fbBuilder.addFloat64(37, _losx);
    fbBuilder.addFloat64(38, _losy);
    fbBuilder.addFloat64(39, _losz);
    fbBuilder.addFloat64(40, _losUnc);
    fbBuilder.addFloat64(41, _losxvel);
    fbBuilder.addFloat64(42, _losyvel);
    fbBuilder.addFloat64(43, _loszvel);
    fbBuilder.addFloat64(44, _senlat);
    fbBuilder.addFloat64(45, _senlon);
    fbBuilder.addFloat64(46, _senalt);
    fbBuilder.addFloat64(47, _senx);
    fbBuilder.addFloat64(48, _seny);
    fbBuilder.addFloat64(49, _senz);
    fbBuilder.addFloat64(50, _senvelx);
    fbBuilder.addFloat64(51, _senvely);
    fbBuilder.addFloat64(52, _senvelz);
    fbBuilder.addOffset(53, senQuatOffset);
    fbBuilder.addInt32(54, _fovCount);
    fbBuilder.addFloat64(55, _expDuration);
    fbBuilder.addFloat64(56, _zeroptd);
    fbBuilder.addFloat64(57, _netObjSig);
    fbBuilder.addFloat64(58, _netObjSigUnc);
    fbBuilder.addFloat64(59, _mag);
    fbBuilder.addFloat64(60, _magUnc);
    fbBuilder.addFloat64(61, _magNormRange);
    fbBuilder.addFloat64(62, _geolat);
    fbBuilder.addFloat64(63, _geolon);
    fbBuilder.addFloat64(64, _geoalt);
    fbBuilder.addFloat64(65, _georange);
    fbBuilder.addFloat64(66, _skyBkgrnd);
    fbBuilder.addFloat64(67, _primaryExtinction);
    fbBuilder.addFloat64(68, _primaryExtinctionUnc);
    fbBuilder.addFloat64(69, _solarPhaseAngle);
    fbBuilder.addFloat64(70, _solarEqPhaseAngle);
    fbBuilder.addFloat64(71, _solarDecAngle);
    fbBuilder.addFloat64(72, _shutterDelay);
    fbBuilder.addFloat64(73, _timingBias);
    fbBuilder.addOffset(74, rawFileUriOffset);
    fbBuilder.addFloat64(75, _intensity);
    fbBuilder.addFloat64(76, _bgIntensity);
    fbBuilder.addOffset(77, descriptorOffset);
    fbBuilder.addOffset(78, sourceOffset);
    fbBuilder.addOffset(79, originOffset);
    fbBuilder.addInt8(80, _dataMode?.value);
    fbBuilder.addOffset(81, tagsOffset);
    fbBuilder.addOffset(82, createdAtOffset);
    fbBuilder.addOffset(83, createdByOffset);
    fbBuilder.addFloat64(84, _zeroPtdUnc);
    fbBuilder.addOffset(85, eoobservationDetailsOffset);
    fbBuilder.addOffset(86, onOrbitOffset);
    fbBuilder.addInt8(87, _referenceFrame?.value);
    fbBuilder.addInt8(88, _senReferenceFrame?.value);
    fbBuilder.addBool(89, _umbra);
    fbBuilder.addBool(90, _penumbra);
    fbBuilder.addOffset(91, origNetworkOffset);
    fbBuilder.addOffset(92, sourceDlOffset);
    fbBuilder.addOffset(93, typeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
