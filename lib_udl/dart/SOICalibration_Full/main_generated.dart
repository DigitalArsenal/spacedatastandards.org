// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Schema for SOI Calibration data.
class SoicalibrationFull {
  SoicalibrationFull._(this._bc, this._bcOffset);
  factory SoicalibrationFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SoicalibrationFull> reader = _SoicalibrationFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.
  ///  Example: /// Example: 0.2
  ///  Constraints: No constraints specified.
  double get calExtinctionCoeff => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 4, 0.0);
  ///  Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  ///  Example: /// Example: 30086.25
  ///  Constraints: No constraints specified.
  double get calSkyBg => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  Background intensity, at calibration, specified in kilowatts per steradian per micrometer.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get calBgIntensity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).
  ///  Example: /// Example: 19.23664587
  ///  Constraints: No constraints specified.
  double get calSpectralFilterSolarMag => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).
  ///  Example: /// Example: 25.15682157
  ///  Constraints: No constraints specified.
  double get calZeroPoint => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get calNumDetectedStars => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get calNumCorrelatedStars => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
  ///  Example: /// Example: 0.06474939
  ///  Constraints: No constraints specified.
  double get calExtinctionCoeffUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).
  ///  Example: /// Example: 0.19708838
  ///  Constraints: No constraints specified.
  double get calExtinctionCoeffMaxUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Start time of calibration in ISO 8601 UTC time, with millisecond precision.
  ///  Example: /// Example: 2023-01-02T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get calTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Type of calibration (e.g. PRE, MID, POST).
  ///  Example: /// Example: PRE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get calType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);

  @override
  String toString() {
    return 'SoicalibrationFull{calExtinctionCoeff: ${calExtinctionCoeff}, calSkyBg: ${calSkyBg}, calBgIntensity: ${calBgIntensity}, calSpectralFilterSolarMag: ${calSpectralFilterSolarMag}, calZeroPoint: ${calZeroPoint}, calNumDetectedStars: ${calNumDetectedStars}, calNumCorrelatedStars: ${calNumCorrelatedStars}, calExtinctionCoeffUnc: ${calExtinctionCoeffUnc}, calExtinctionCoeffMaxUnc: ${calExtinctionCoeffMaxUnc}, calTime: ${calTime}, calType: ${calType}}';
  }
}

class _SoicalibrationFullReader extends fb.TableReader<SoicalibrationFull> {
  const _SoicalibrationFullReader();

  @override
  SoicalibrationFull createObject(fb.BufferContext bc, int offset) => 
    SoicalibrationFull._(bc, offset);
}

class SoicalibrationFullBuilder {
  SoicalibrationFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addCalExtinctionCoeff(double? calExtinctionCoeff) {
    fbBuilder.addFloat64(0, calExtinctionCoeff);
    return fbBuilder.offset;
  }
  int addCalSkyBg(double? calSkyBg) {
    fbBuilder.addFloat64(1, calSkyBg);
    return fbBuilder.offset;
  }
  int addCalBgIntensity(double? calBgIntensity) {
    fbBuilder.addFloat64(2, calBgIntensity);
    return fbBuilder.offset;
  }
  int addCalSpectralFilterSolarMag(double? calSpectralFilterSolarMag) {
    fbBuilder.addFloat64(3, calSpectralFilterSolarMag);
    return fbBuilder.offset;
  }
  int addCalZeroPoint(double? calZeroPoint) {
    fbBuilder.addFloat64(4, calZeroPoint);
    return fbBuilder.offset;
  }
  int addCalNumDetectedStars(int? calNumDetectedStars) {
    fbBuilder.addInt32(5, calNumDetectedStars);
    return fbBuilder.offset;
  }
  int addCalNumCorrelatedStars(int? calNumCorrelatedStars) {
    fbBuilder.addInt32(6, calNumCorrelatedStars);
    return fbBuilder.offset;
  }
  int addCalExtinctionCoeffUnc(double? calExtinctionCoeffUnc) {
    fbBuilder.addFloat64(7, calExtinctionCoeffUnc);
    return fbBuilder.offset;
  }
  int addCalExtinctionCoeffMaxUnc(double? calExtinctionCoeffMaxUnc) {
    fbBuilder.addFloat64(8, calExtinctionCoeffMaxUnc);
    return fbBuilder.offset;
  }
  int addCalTimeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCalTypeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SoicalibrationFullObjectBuilder extends fb.ObjectBuilder {
  final double? _calExtinctionCoeff;
  final double? _calSkyBg;
  final double? _calBgIntensity;
  final double? _calSpectralFilterSolarMag;
  final double? _calZeroPoint;
  final int? _calNumDetectedStars;
  final int? _calNumCorrelatedStars;
  final double? _calExtinctionCoeffUnc;
  final double? _calExtinctionCoeffMaxUnc;
  final String? _calTime;
  final String? _calType;

  SoicalibrationFullObjectBuilder({
    double? calExtinctionCoeff,
    double? calSkyBg,
    double? calBgIntensity,
    double? calSpectralFilterSolarMag,
    double? calZeroPoint,
    int? calNumDetectedStars,
    int? calNumCorrelatedStars,
    double? calExtinctionCoeffUnc,
    double? calExtinctionCoeffMaxUnc,
    String? calTime,
    String? calType,
  })
      : _calExtinctionCoeff = calExtinctionCoeff,
        _calSkyBg = calSkyBg,
        _calBgIntensity = calBgIntensity,
        _calSpectralFilterSolarMag = calSpectralFilterSolarMag,
        _calZeroPoint = calZeroPoint,
        _calNumDetectedStars = calNumDetectedStars,
        _calNumCorrelatedStars = calNumCorrelatedStars,
        _calExtinctionCoeffUnc = calExtinctionCoeffUnc,
        _calExtinctionCoeffMaxUnc = calExtinctionCoeffMaxUnc,
        _calTime = calTime,
        _calType = calType;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? calTimeOffset = _calTime == null ? null
        : fbBuilder.writeString(_calTime!);
    final int? calTypeOffset = _calType == null ? null
        : fbBuilder.writeString(_calType!);
    fbBuilder.startTable(11);
    fbBuilder.addFloat64(0, _calExtinctionCoeff);
    fbBuilder.addFloat64(1, _calSkyBg);
    fbBuilder.addFloat64(2, _calBgIntensity);
    fbBuilder.addFloat64(3, _calSpectralFilterSolarMag);
    fbBuilder.addFloat64(4, _calZeroPoint);
    fbBuilder.addInt32(5, _calNumDetectedStars);
    fbBuilder.addInt32(6, _calNumCorrelatedStars);
    fbBuilder.addFloat64(7, _calExtinctionCoeffUnc);
    fbBuilder.addFloat64(8, _calExtinctionCoeffMaxUnc);
    fbBuilder.addOffset(9, calTimeOffset);
    fbBuilder.addOffset(10, calTypeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
