// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// An Optical SOI record contains observation information taken from a sensor about a Space Object.
class OpticalSoiobservationFull {
  OpticalSoiobservationFull._(this._bc, this._bcOffset);
  factory OpticalSoiobservationFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OpticalSoiobservationFull> reader = _OpticalSoiobservationFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Observation detection start time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.888456Z
  ///  Constraints: No constraints specified.
  String? get obStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
  ///  Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
  ///  Constraints: No constraints specified.
  List<String>? get intensityTimes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  ///  The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get currentSpectralFilterNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  Image exposure duration in seconds.
  ///  Example: /// Example: 0.455
  ///  Constraints: No constraints specified.
  double get expDuration => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
  ///  Example: /// Example: [1.1, 1.1, 1.1]
  ///  Constraints: No constraints specified.
  List<String>? get intensities => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 12);
  ///  Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
  ///  Example: /// Example: [0.32, 0.32, 0.32]
  ///  Constraints: No constraints specified.
  List<String>? get extinctionCoeffs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);
  ///  Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
  ///  Example: /// Example: [0.06, 0.06, 0.06]
  ///  Constraints: No constraints specified.
  List<String>? get extinctionCoeffsUnc => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 16);
  ///  Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  ///  Example: /// Example: [100625.375, 100625.375, 100625.375]
  ///  Constraints: No constraints specified.
  List<String>? get skyBgs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 18);
  ///  Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  ///  Example: /// Example: [100625.375, 100625.375, 100625.375]
  ///  Constraints: No constraints specified.
  List<String>? get localSkyBgs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);
  ///  Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
  ///  Example: /// Example: [0.065, 0.065, 0.065]
  ///  Constraints: No constraints specified.
  List<String>? get localSkyBgsUnc => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 22);
  ///  Array of the number of detected stars in the FOV with a value for each element in the intensities field.
  ///  Example: /// Example: [6, 6, 6]
  ///  Constraints: No constraints specified.
  List<String>? get numDetectedStars => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 24);
  ///  Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
  ///  Example: /// Example: [3, 3, 3]
  ///  Constraints: No constraints specified.
  List<String>? get numCorrelatedStars => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 26);
  ///  Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
  ///  Example: /// Example: [24.711, 24.711, 24.711]
  ///  Constraints: No constraints specified.
  List<String>? get zeroPoints => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 28);
  ///  Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
  ///  Example: /// Example: [107.4, 107.4, 107.4]
  ///  Constraints: No constraints specified.
  List<String>? get ras => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
  ///  Example: /// Example: [-0.45, -0.45, -0.45]
  ///  Constraints: No constraints specified.
  List<String>? get declinations => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
  ///  Example: /// Example: [0, 0, 0]
  ///  Constraints: No constraints specified.
  List<String>? get raRates => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  ///  Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
  ///  Example: /// Example: [0.1, 0.2, 1]
  ///  Constraints: No constraints specified.
  List<String>? get percentSats => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 36);

  @override
  String toString() {
    return 'OpticalSoiobservationFull{obStartTime: ${obStartTime}, intensityTimes: ${intensityTimes}, currentSpectralFilterNum: ${currentSpectralFilterNum}, expDuration: ${expDuration}, intensities: ${intensities}, extinctionCoeffs: ${extinctionCoeffs}, extinctionCoeffsUnc: ${extinctionCoeffsUnc}, skyBgs: ${skyBgs}, localSkyBgs: ${localSkyBgs}, localSkyBgsUnc: ${localSkyBgsUnc}, numDetectedStars: ${numDetectedStars}, numCorrelatedStars: ${numCorrelatedStars}, zeroPoints: ${zeroPoints}, ras: ${ras}, declinations: ${declinations}, raRates: ${raRates}, percentSats: ${percentSats}}';
  }
}

class _OpticalSoiobservationFullReader extends fb.TableReader<OpticalSoiobservationFull> {
  const _OpticalSoiobservationFullReader();

  @override
  OpticalSoiobservationFull createObject(fb.BufferContext bc, int offset) => 
    OpticalSoiobservationFull._(bc, offset);
}

class OpticalSoiobservationFullBuilder {
  OpticalSoiobservationFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(17);
  }

  int addObStartTimeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIntensityTimesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCurrentSpectralFilterNum(int? currentSpectralFilterNum) {
    fbBuilder.addInt32(2, currentSpectralFilterNum);
    return fbBuilder.offset;
  }
  int addExpDuration(double? expDuration) {
    fbBuilder.addFloat64(3, expDuration);
    return fbBuilder.offset;
  }
  int addIntensitiesOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addExtinctionCoeffsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addExtinctionCoeffsUncOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addSkyBgsOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addLocalSkyBgsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addLocalSkyBgsUncOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addNumDetectedStarsOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addNumCorrelatedStarsOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addZeroPointsOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addRasOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addDeclinationsOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addRaRatesOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addPercentSatsOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OpticalSoiobservationFullObjectBuilder extends fb.ObjectBuilder {
  final String? _obStartTime;
  final List<String>? _intensityTimes;
  final int? _currentSpectralFilterNum;
  final double? _expDuration;
  final List<String>? _intensities;
  final List<String>? _extinctionCoeffs;
  final List<String>? _extinctionCoeffsUnc;
  final List<String>? _skyBgs;
  final List<String>? _localSkyBgs;
  final List<String>? _localSkyBgsUnc;
  final List<String>? _numDetectedStars;
  final List<String>? _numCorrelatedStars;
  final List<String>? _zeroPoints;
  final List<String>? _ras;
  final List<String>? _declinations;
  final List<String>? _raRates;
  final List<String>? _percentSats;

  OpticalSoiobservationFullObjectBuilder({
    String? obStartTime,
    List<String>? intensityTimes,
    int? currentSpectralFilterNum,
    double? expDuration,
    List<String>? intensities,
    List<String>? extinctionCoeffs,
    List<String>? extinctionCoeffsUnc,
    List<String>? skyBgs,
    List<String>? localSkyBgs,
    List<String>? localSkyBgsUnc,
    List<String>? numDetectedStars,
    List<String>? numCorrelatedStars,
    List<String>? zeroPoints,
    List<String>? ras,
    List<String>? declinations,
    List<String>? raRates,
    List<String>? percentSats,
  })
      : _obStartTime = obStartTime,
        _intensityTimes = intensityTimes,
        _currentSpectralFilterNum = currentSpectralFilterNum,
        _expDuration = expDuration,
        _intensities = intensities,
        _extinctionCoeffs = extinctionCoeffs,
        _extinctionCoeffsUnc = extinctionCoeffsUnc,
        _skyBgs = skyBgs,
        _localSkyBgs = localSkyBgs,
        _localSkyBgsUnc = localSkyBgsUnc,
        _numDetectedStars = numDetectedStars,
        _numCorrelatedStars = numCorrelatedStars,
        _zeroPoints = zeroPoints,
        _ras = ras,
        _declinations = declinations,
        _raRates = raRates,
        _percentSats = percentSats;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? obStartTimeOffset = _obStartTime == null ? null
        : fbBuilder.writeString(_obStartTime!);
    final int? intensityTimesOffset = _intensityTimes == null ? null
        : fbBuilder.writeList(_intensityTimes!.map(fbBuilder.writeString).toList());
    final int? intensitiesOffset = _intensities == null ? null
        : fbBuilder.writeList(_intensities!.map(fbBuilder.writeString).toList());
    final int? extinctionCoeffsOffset = _extinctionCoeffs == null ? null
        : fbBuilder.writeList(_extinctionCoeffs!.map(fbBuilder.writeString).toList());
    final int? extinctionCoeffsUncOffset = _extinctionCoeffsUnc == null ? null
        : fbBuilder.writeList(_extinctionCoeffsUnc!.map(fbBuilder.writeString).toList());
    final int? skyBgsOffset = _skyBgs == null ? null
        : fbBuilder.writeList(_skyBgs!.map(fbBuilder.writeString).toList());
    final int? localSkyBgsOffset = _localSkyBgs == null ? null
        : fbBuilder.writeList(_localSkyBgs!.map(fbBuilder.writeString).toList());
    final int? localSkyBgsUncOffset = _localSkyBgsUnc == null ? null
        : fbBuilder.writeList(_localSkyBgsUnc!.map(fbBuilder.writeString).toList());
    final int? numDetectedStarsOffset = _numDetectedStars == null ? null
        : fbBuilder.writeList(_numDetectedStars!.map(fbBuilder.writeString).toList());
    final int? numCorrelatedStarsOffset = _numCorrelatedStars == null ? null
        : fbBuilder.writeList(_numCorrelatedStars!.map(fbBuilder.writeString).toList());
    final int? zeroPointsOffset = _zeroPoints == null ? null
        : fbBuilder.writeList(_zeroPoints!.map(fbBuilder.writeString).toList());
    final int? rasOffset = _ras == null ? null
        : fbBuilder.writeList(_ras!.map(fbBuilder.writeString).toList());
    final int? declinationsOffset = _declinations == null ? null
        : fbBuilder.writeList(_declinations!.map(fbBuilder.writeString).toList());
    final int? raRatesOffset = _raRates == null ? null
        : fbBuilder.writeList(_raRates!.map(fbBuilder.writeString).toList());
    final int? percentSatsOffset = _percentSats == null ? null
        : fbBuilder.writeList(_percentSats!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(17);
    fbBuilder.addOffset(0, obStartTimeOffset);
    fbBuilder.addOffset(1, intensityTimesOffset);
    fbBuilder.addInt32(2, _currentSpectralFilterNum);
    fbBuilder.addFloat64(3, _expDuration);
    fbBuilder.addOffset(4, intensitiesOffset);
    fbBuilder.addOffset(5, extinctionCoeffsOffset);
    fbBuilder.addOffset(6, extinctionCoeffsUncOffset);
    fbBuilder.addOffset(7, skyBgsOffset);
    fbBuilder.addOffset(8, localSkyBgsOffset);
    fbBuilder.addOffset(9, localSkyBgsUncOffset);
    fbBuilder.addOffset(10, numDetectedStarsOffset);
    fbBuilder.addOffset(11, numCorrelatedStarsOffset);
    fbBuilder.addOffset(12, zeroPointsOffset);
    fbBuilder.addOffset(13, rasOffset);
    fbBuilder.addOffset(14, declinationsOffset);
    fbBuilder.addOffset(15, raRatesOffset);
    fbBuilder.addOffset(16, percentSatsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
