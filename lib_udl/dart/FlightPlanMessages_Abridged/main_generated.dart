// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
class FlightPlanMessagesAbridged {
  FlightPlanMessagesAbridged._(this._bc, this._bcOffset);
  factory FlightPlanMessagesAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlightPlanMessagesAbridged> reader = _FlightPlanMessagesAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The severity of the message.
  ///  Example: /// Example: SEVERE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get severity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The waypoint number for which the message was generated, or enter "PLAN" for a message impacting the entire route.
  ///  Example: /// Example: 20
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get wpNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
  ///  Example: /// Example: PRIMARY
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get routePath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The text of the message.
  ///  Example: /// Example: Message text
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get msgText => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'FlightPlanMessagesAbridged{severity: ${severity}, wpNum: ${wpNum}, routePath: ${routePath}, msgText: ${msgText}}';
  }
}

class _FlightPlanMessagesAbridgedReader extends fb.TableReader<FlightPlanMessagesAbridged> {
  const _FlightPlanMessagesAbridgedReader();

  @override
  FlightPlanMessagesAbridged createObject(fb.BufferContext bc, int offset) => 
    FlightPlanMessagesAbridged._(bc, offset);
}

class FlightPlanMessagesAbridgedBuilder {
  FlightPlanMessagesAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addSeverityOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addWpNumOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRoutePathOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMsgTextOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlightPlanMessagesAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _severity;
  final String? _wpNum;
  final String? _routePath;
  final String? _msgText;

  FlightPlanMessagesAbridgedObjectBuilder({
    String? severity,
    String? wpNum,
    String? routePath,
    String? msgText,
  })
      : _severity = severity,
        _wpNum = wpNum,
        _routePath = routePath,
        _msgText = msgText;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? severityOffset = _severity == null ? null
        : fbBuilder.writeString(_severity!);
    final int? wpNumOffset = _wpNum == null ? null
        : fbBuilder.writeString(_wpNum!);
    final int? routePathOffset = _routePath == null ? null
        : fbBuilder.writeString(_routePath!);
    final int? msgTextOffset = _msgText == null ? null
        : fbBuilder.writeString(_msgText!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, severityOffset);
    fbBuilder.addOffset(1, wpNumOffset);
    fbBuilder.addOffset(2, routePathOffset);
    fbBuilder.addOffset(3, msgTextOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
