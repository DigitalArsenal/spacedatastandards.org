// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SubStatusIngestTypeEnum {
  final int value;
  const SubStatusIngestTypeEnum._(this.value);

  factory SubStatusIngestTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SubStatusIngestTypeEnum');
    }
    return result;
  }

  static SubStatusIngestTypeEnum? _createOrNull(int? value) => 
      value == null ? null : SubStatusIngestTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SubStatusIngestTypeEnum MWCAP = SubStatusIngestTypeEnum._(0);

  ///  No description available.
  static const SubStatusIngestTypeEnum SSCAP = SubStatusIngestTypeEnum._(1);

  ///  No description available.
  static const SubStatusIngestTypeEnum MDCAP = SubStatusIngestTypeEnum._(2);
  static const Map<int, SubStatusIngestTypeEnum> values = {
    0: MWCAP,
    1: SSCAP,
    2: MDCAP};

  static const fb.Reader<SubStatusIngestTypeEnum> reader = _SubStatusIngestTypeEnumReader();

  @override
  String toString() {
    return 'SubStatusIngestTypeEnum{value: $value}';
  }
}

class _SubStatusIngestTypeEnumReader extends fb.Reader<SubStatusIngestTypeEnum> {
  const _SubStatusIngestTypeEnumReader();

  @override
  int get size => 1;

  @override
  SubStatusIngestTypeEnum read(fb.BufferContext bc, int offset) =>
      SubStatusIngestTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SubStatusIngestStatusEnum {
  final int value;
  const SubStatusIngestStatusEnum._(this.value);

  factory SubStatusIngestStatusEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SubStatusIngestStatusEnum');
    }
    return result;
  }

  static SubStatusIngestStatusEnum? _createOrNull(int? value) => 
      value == null ? null : SubStatusIngestStatusEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SubStatusIngestStatusEnum FMC = SubStatusIngestStatusEnum._(0);

  ///  No description available.
  static const SubStatusIngestStatusEnum NMC = SubStatusIngestStatusEnum._(1);

  ///  No description available.
  static const SubStatusIngestStatusEnum PMC = SubStatusIngestStatusEnum._(2);

  ///  No description available.
  static const SubStatusIngestStatusEnum UNK = SubStatusIngestStatusEnum._(3);
  static const Map<int, SubStatusIngestStatusEnum> values = {
    0: FMC,
    1: NMC,
    2: PMC,
    3: UNK};

  static const fb.Reader<SubStatusIngestStatusEnum> reader = _SubStatusIngestStatusEnumReader();

  @override
  String toString() {
    return 'SubStatusIngestStatusEnum{value: $value}';
  }
}

class _SubStatusIngestStatusEnumReader extends fb.Reader<SubStatusIngestStatusEnum> {
  const _SubStatusIngestStatusEnumReader();

  @override
  int get size => 1;

  @override
  SubStatusIngestStatusEnum read(fb.BufferContext bc, int offset) =>
      SubStatusIngestStatusEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SubStatusIngestDataModeEnum {
  final int value;
  const SubStatusIngestDataModeEnum._(this.value);

  factory SubStatusIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SubStatusIngestDataModeEnum');
    }
    return result;
  }

  static SubStatusIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SubStatusIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SubStatusIngestDataModeEnum REAL = SubStatusIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SubStatusIngestDataModeEnum TEST = SubStatusIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SubStatusIngestDataModeEnum SIMULATED = SubStatusIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SubStatusIngestDataModeEnum EXERCISE = SubStatusIngestDataModeEnum._(3);
  static const Map<int, SubStatusIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SubStatusIngestDataModeEnum> reader = _SubStatusIngestDataModeEnumReader();

  @override
  String toString() {
    return 'SubStatusIngestDataModeEnum{value: $value}';
  }
}

class _SubStatusIngestDataModeEnumReader extends fb.Reader<SubStatusIngestDataModeEnum> {
  const _SubStatusIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SubStatusIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      SubStatusIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Additional sub-system or capability status for the parent entity.
class SubStatusIngest {
  SubStatusIngest._(this._bc, this._bcOffset);
  factory SubStatusIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SubStatusIngest> reader = _SubStatusIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SUBSTATUS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.
  ///  Example: /// Example: mdCap
  ///  Constraints: Minimum length = 1, Maximum length = 16
  SubStatusIngestTypeEnum get type => SubStatusIngestTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Id of the parent status.
  ///  Example: /// Example: REF-STATUS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get statusId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.
  ///  Example: /// Example: FMC
  ///  Constraints: Minimum length = 1, Maximum length = 16
  SubStatusIngestStatusEnum get status => SubStatusIngestStatusEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 12, 0));
  ///  Descriptions and/or comments associated with the sub-status.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 1, Maximum length = 4096
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: TST1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SubStatusIngestDataModeEnum get dataMode => SubStatusIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 22, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);

  @override
  String toString() {
    return 'SubStatusIngest{id: ${id}, type: ${type}, classificationMarking: ${classificationMarking}, statusId: ${statusId}, status: ${status}, notes: ${notes}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}}';
  }
}

class _SubStatusIngestReader extends fb.TableReader<SubStatusIngest> {
  const _SubStatusIngestReader();

  @override
  SubStatusIngest createObject(fb.BufferContext bc, int offset) => 
    SubStatusIngest._(bc, offset);
}

class SubStatusIngestBuilder {
  SubStatusIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addType(SubStatusIngestTypeEnum? type) {
    fbBuilder.addInt8(1, type?.value);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addStatusIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStatus(SubStatusIngestStatusEnum? status) {
    fbBuilder.addInt8(4, status?.value);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SubStatusIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(9, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SubStatusIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final SubStatusIngestTypeEnum? _type;
  final String? _classificationMarking;
  final String? _statusId;
  final SubStatusIngestStatusEnum? _status;
  final String? _notes;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SubStatusIngestDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;

  SubStatusIngestObjectBuilder({
    String? id,
    SubStatusIngestTypeEnum? type,
    String? classificationMarking,
    String? statusId,
    SubStatusIngestStatusEnum? status,
    String? notes,
    String? source,
    String? origin,
    String? origNetwork,
    SubStatusIngestDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
  })
      : _id = id,
        _type = type,
        _classificationMarking = classificationMarking,
        _statusId = statusId,
        _status = status,
        _notes = notes,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? statusIdOffset = _statusId == null ? null
        : fbBuilder.writeString(_statusId!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    fbBuilder.startTable(12);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addInt8(1, _type?.value);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, statusIdOffset);
    fbBuilder.addInt8(4, _status?.value);
    fbBuilder.addOffset(5, notesOffset);
    fbBuilder.addOffset(6, sourceOffset);
    fbBuilder.addOffset(7, originOffset);
    fbBuilder.addOffset(8, origNetworkOffset);
    fbBuilder.addInt8(9, _dataMode?.value);
    fbBuilder.addOffset(10, createdAtOffset);
    fbBuilder.addOffset(11, createdByOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
