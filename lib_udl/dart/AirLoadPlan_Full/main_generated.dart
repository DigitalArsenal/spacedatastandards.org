// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AirLoadPlanFullDataModeEnum {
  final int value;
  const AirLoadPlanFullDataModeEnum._(this.value);

  factory AirLoadPlanFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AirLoadPlanFullDataModeEnum');
    }
    return result;
  }

  static AirLoadPlanFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AirLoadPlanFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AirLoadPlanFullDataModeEnum REAL = AirLoadPlanFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AirLoadPlanFullDataModeEnum TEST = AirLoadPlanFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AirLoadPlanFullDataModeEnum SIMULATED = AirLoadPlanFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AirLoadPlanFullDataModeEnum EXERCISE = AirLoadPlanFullDataModeEnum._(3);
  static const Map<int, AirLoadPlanFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AirLoadPlanFullDataModeEnum> reader = _AirLoadPlanFullDataModeEnumReader();

  @override
  String toString() {
    return 'AirLoadPlanFullDataModeEnum{value: $value}';
  }
}

class _AirLoadPlanFullDataModeEnumReader extends fb.Reader<AirLoadPlanFullDataModeEnum> {
  const _AirLoadPlanFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AirLoadPlanFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      AirLoadPlanFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Information related to how an aircraft is loaded with cargo, equipment, and passengers.
class AirLoadPlanFull {
  AirLoadPlanFull._(this._bc, this._bcOffset);
  factory AirLoadPlanFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirLoadPlanFull> reader = _AirLoadPlanFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The UDL ID of the mission this record is associated with.
  ///  Example: /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idMission => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The mission number of the mission supporting this load plan.
  ///  Example: /// Example: AJM123456123
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get missionNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The UDL ID of the aircraft sortie this record is associated with.
  ///  Example: /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSortie => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The leg number of the mission supporting this load plan.
  ///  Example: /// Example: 200
  ///  Constraints: No constraints specified.
  int get legNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  The call sign of the mission supporting this load plan.
  ///  Example: /// Example: RCH1234
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get callSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The tail number of the aircraft supporting this load plan.
  ///  Example: /// Example: 77187
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get tailNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The Model Design Series designation of the aircraft supporting this load plan.
  ///  Example: /// Example: C17A
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get aircraftMds => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The departure International Civil Organization (ICAO) code of the departure airfield.
  ///  Example: /// Example: KCHS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get depIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
  ///  Example: /// Example: W99
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get depAirfield => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
  ///  Example: /// Example: 2023-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get estDepTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The arrival International Civil Organization (ICAO) code of the landing airfield.
  ///  Example: /// Example: ETAR
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get arrIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
  ///  Example: /// Example: W99
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get arrAirfield => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get estArrTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The number of crew members on the aircraft.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get crewSize => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 36, 0);
  ///  Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
  ///  Example: /// Example: C-1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get cargoConfig => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
  ///  Example: /// Example: Standard
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get equipConfig => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
  ///  Example: /// Example: ER
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get tankConfig => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  double get basicWeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  double get basicMoment => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  The weight of usable fuel on board the aircraft, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  double get fuelWeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  double get fuelMoment => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  The estimated weight of usable fuel upon landing, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  double get estLandingFuelWeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  double get estLandingFuelMoment => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  The basic weight of the aircraft including passengers and equipment, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  double get operatingWeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  double get operatingMoment => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  The weight of the cargo on board the aircraft, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  double get cargoWeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  double get cargoMoment => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  double get zeroFuelWeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  double get zeroFuelMoment => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
  ///  Example: /// Example: 39.5
  ///  Constraints: No constraints specified.
  double get zeroFuelCg => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  double get grossWeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  double get grossMoment => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
  ///  Example: /// Example: 38.8
  ///  Constraints: No constraints specified.
  double get grossCg => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  The gross weight of the aircraft upon landing, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  double get landingWeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  double get landingMoment => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
  ///  Example: /// Example: 38.2
  ///  Constraints: No constraints specified.
  double get landingCg => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get cargoBayFsmin => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 82, 0);
  ///  Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
  ///  Example: /// Example: 20
  ///  Constraints: No constraints specified.
  int get cargoBayFsmax => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 84, 0);
  ///  Width of the cargo bay, in meters.
  ///  Example: /// Example: 3.1
  ///  Constraints: No constraints specified.
  double get cargoBayWidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2023-03-21T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Source of the data.
  ///  Example: /// Example: source
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AirLoadPlanFullDataModeEnum get dataMode => AirLoadPlanFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 104, 0));

  @override
  String toString() {
    return 'AirLoadPlanFull{id: ${id}, classificationMarking: ${classificationMarking}, externalId: ${externalId}, idMission: ${idMission}, missionNumber: ${missionNumber}, idSortie: ${idSortie}, legNum: ${legNum}, callSign: ${callSign}, tailNumber: ${tailNumber}, aircraftMds: ${aircraftMds}, depIcao: ${depIcao}, depAirfield: ${depAirfield}, estDepTime: ${estDepTime}, arrIcao: ${arrIcao}, arrAirfield: ${arrAirfield}, estArrTime: ${estArrTime}, crewSize: ${crewSize}, cargoConfig: ${cargoConfig}, equipConfig: ${equipConfig}, tankConfig: ${tankConfig}, basicWeight: ${basicWeight}, basicMoment: ${basicMoment}, fuelWeight: ${fuelWeight}, fuelMoment: ${fuelMoment}, estLandingFuelWeight: ${estLandingFuelWeight}, estLandingFuelMoment: ${estLandingFuelMoment}, operatingWeight: ${operatingWeight}, operatingMoment: ${operatingMoment}, cargoWeight: ${cargoWeight}, cargoMoment: ${cargoMoment}, zeroFuelWeight: ${zeroFuelWeight}, zeroFuelMoment: ${zeroFuelMoment}, zeroFuelCg: ${zeroFuelCg}, grossWeight: ${grossWeight}, grossMoment: ${grossMoment}, grossCg: ${grossCg}, landingWeight: ${landingWeight}, landingMoment: ${landingMoment}, landingCg: ${landingCg}, cargoBayFsmin: ${cargoBayFsmin}, cargoBayFsmax: ${cargoBayFsmax}, cargoBayWidth: ${cargoBayWidth}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _AirLoadPlanFullReader extends fb.TableReader<AirLoadPlanFull> {
  const _AirLoadPlanFullReader();

  @override
  AirLoadPlanFull createObject(fb.BufferContext bc, int offset) => 
    AirLoadPlanFull._(bc, offset);
}

class AirLoadPlanFullBuilder {
  AirLoadPlanFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(51);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdMissionOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMissionNumberOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdSortieOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addLegNum(int? legNum) {
    fbBuilder.addInt32(6, legNum);
    return fbBuilder.offset;
  }
  int addCallSignOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addTailNumberOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addAircraftMdsOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addDepIcaoOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addDepAirfieldOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addEstDepTimeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addArrIcaoOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addArrAirfieldOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addEstArrTimeOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addCrewSize(int? crewSize) {
    fbBuilder.addInt32(16, crewSize);
    return fbBuilder.offset;
  }
  int addCargoConfigOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addEquipConfigOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addTankConfigOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addBasicWeight(double? basicWeight) {
    fbBuilder.addFloat64(20, basicWeight);
    return fbBuilder.offset;
  }
  int addBasicMoment(double? basicMoment) {
    fbBuilder.addFloat64(21, basicMoment);
    return fbBuilder.offset;
  }
  int addFuelWeight(double? fuelWeight) {
    fbBuilder.addFloat64(22, fuelWeight);
    return fbBuilder.offset;
  }
  int addFuelMoment(double? fuelMoment) {
    fbBuilder.addFloat64(23, fuelMoment);
    return fbBuilder.offset;
  }
  int addEstLandingFuelWeight(double? estLandingFuelWeight) {
    fbBuilder.addFloat64(24, estLandingFuelWeight);
    return fbBuilder.offset;
  }
  int addEstLandingFuelMoment(double? estLandingFuelMoment) {
    fbBuilder.addFloat64(25, estLandingFuelMoment);
    return fbBuilder.offset;
  }
  int addOperatingWeight(double? operatingWeight) {
    fbBuilder.addFloat64(26, operatingWeight);
    return fbBuilder.offset;
  }
  int addOperatingMoment(double? operatingMoment) {
    fbBuilder.addFloat64(27, operatingMoment);
    return fbBuilder.offset;
  }
  int addCargoWeight(double? cargoWeight) {
    fbBuilder.addFloat64(28, cargoWeight);
    return fbBuilder.offset;
  }
  int addCargoMoment(double? cargoMoment) {
    fbBuilder.addFloat64(29, cargoMoment);
    return fbBuilder.offset;
  }
  int addZeroFuelWeight(double? zeroFuelWeight) {
    fbBuilder.addFloat64(30, zeroFuelWeight);
    return fbBuilder.offset;
  }
  int addZeroFuelMoment(double? zeroFuelMoment) {
    fbBuilder.addFloat64(31, zeroFuelMoment);
    return fbBuilder.offset;
  }
  int addZeroFuelCg(double? zeroFuelCg) {
    fbBuilder.addFloat64(32, zeroFuelCg);
    return fbBuilder.offset;
  }
  int addGrossWeight(double? grossWeight) {
    fbBuilder.addFloat64(33, grossWeight);
    return fbBuilder.offset;
  }
  int addGrossMoment(double? grossMoment) {
    fbBuilder.addFloat64(34, grossMoment);
    return fbBuilder.offset;
  }
  int addGrossCg(double? grossCg) {
    fbBuilder.addFloat64(35, grossCg);
    return fbBuilder.offset;
  }
  int addLandingWeight(double? landingWeight) {
    fbBuilder.addFloat64(36, landingWeight);
    return fbBuilder.offset;
  }
  int addLandingMoment(double? landingMoment) {
    fbBuilder.addFloat64(37, landingMoment);
    return fbBuilder.offset;
  }
  int addLandingCg(double? landingCg) {
    fbBuilder.addFloat64(38, landingCg);
    return fbBuilder.offset;
  }
  int addCargoBayFsmin(int? cargoBayFsmin) {
    fbBuilder.addInt32(39, cargoBayFsmin);
    return fbBuilder.offset;
  }
  int addCargoBayFsmax(int? cargoBayFsmax) {
    fbBuilder.addInt32(40, cargoBayFsmax);
    return fbBuilder.offset;
  }
  int addCargoBayWidth(double? cargoBayWidth) {
    fbBuilder.addFloat64(41, cargoBayWidth);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AirLoadPlanFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(50, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirLoadPlanFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _externalId;
  final String? _idMission;
  final String? _missionNumber;
  final String? _idSortie;
  final int? _legNum;
  final String? _callSign;
  final String? _tailNumber;
  final String? _aircraftMds;
  final String? _depIcao;
  final String? _depAirfield;
  final String? _estDepTime;
  final String? _arrIcao;
  final String? _arrAirfield;
  final String? _estArrTime;
  final int? _crewSize;
  final String? _cargoConfig;
  final String? _equipConfig;
  final String? _tankConfig;
  final double? _basicWeight;
  final double? _basicMoment;
  final double? _fuelWeight;
  final double? _fuelMoment;
  final double? _estLandingFuelWeight;
  final double? _estLandingFuelMoment;
  final double? _operatingWeight;
  final double? _operatingMoment;
  final double? _cargoWeight;
  final double? _cargoMoment;
  final double? _zeroFuelWeight;
  final double? _zeroFuelMoment;
  final double? _zeroFuelCg;
  final double? _grossWeight;
  final double? _grossMoment;
  final double? _grossCg;
  final double? _landingWeight;
  final double? _landingMoment;
  final double? _landingCg;
  final int? _cargoBayFsmin;
  final int? _cargoBayFsmax;
  final double? _cargoBayWidth;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final AirLoadPlanFullDataModeEnum? _dataMode;

  AirLoadPlanFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? externalId,
    String? idMission,
    String? missionNumber,
    String? idSortie,
    int? legNum,
    String? callSign,
    String? tailNumber,
    String? aircraftMds,
    String? depIcao,
    String? depAirfield,
    String? estDepTime,
    String? arrIcao,
    String? arrAirfield,
    String? estArrTime,
    int? crewSize,
    String? cargoConfig,
    String? equipConfig,
    String? tankConfig,
    double? basicWeight,
    double? basicMoment,
    double? fuelWeight,
    double? fuelMoment,
    double? estLandingFuelWeight,
    double? estLandingFuelMoment,
    double? operatingWeight,
    double? operatingMoment,
    double? cargoWeight,
    double? cargoMoment,
    double? zeroFuelWeight,
    double? zeroFuelMoment,
    double? zeroFuelCg,
    double? grossWeight,
    double? grossMoment,
    double? grossCg,
    double? landingWeight,
    double? landingMoment,
    double? landingCg,
    int? cargoBayFsmin,
    int? cargoBayFsmax,
    double? cargoBayWidth,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    AirLoadPlanFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _externalId = externalId,
        _idMission = idMission,
        _missionNumber = missionNumber,
        _idSortie = idSortie,
        _legNum = legNum,
        _callSign = callSign,
        _tailNumber = tailNumber,
        _aircraftMds = aircraftMds,
        _depIcao = depIcao,
        _depAirfield = depAirfield,
        _estDepTime = estDepTime,
        _arrIcao = arrIcao,
        _arrAirfield = arrAirfield,
        _estArrTime = estArrTime,
        _crewSize = crewSize,
        _cargoConfig = cargoConfig,
        _equipConfig = equipConfig,
        _tankConfig = tankConfig,
        _basicWeight = basicWeight,
        _basicMoment = basicMoment,
        _fuelWeight = fuelWeight,
        _fuelMoment = fuelMoment,
        _estLandingFuelWeight = estLandingFuelWeight,
        _estLandingFuelMoment = estLandingFuelMoment,
        _operatingWeight = operatingWeight,
        _operatingMoment = operatingMoment,
        _cargoWeight = cargoWeight,
        _cargoMoment = cargoMoment,
        _zeroFuelWeight = zeroFuelWeight,
        _zeroFuelMoment = zeroFuelMoment,
        _zeroFuelCg = zeroFuelCg,
        _grossWeight = grossWeight,
        _grossMoment = grossMoment,
        _grossCg = grossCg,
        _landingWeight = landingWeight,
        _landingMoment = landingMoment,
        _landingCg = landingCg,
        _cargoBayFsmin = cargoBayFsmin,
        _cargoBayFsmax = cargoBayFsmax,
        _cargoBayWidth = cargoBayWidth,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    final int? idMissionOffset = _idMission == null ? null
        : fbBuilder.writeString(_idMission!);
    final int? missionNumberOffset = _missionNumber == null ? null
        : fbBuilder.writeString(_missionNumber!);
    final int? idSortieOffset = _idSortie == null ? null
        : fbBuilder.writeString(_idSortie!);
    final int? callSignOffset = _callSign == null ? null
        : fbBuilder.writeString(_callSign!);
    final int? tailNumberOffset = _tailNumber == null ? null
        : fbBuilder.writeString(_tailNumber!);
    final int? aircraftMdsOffset = _aircraftMds == null ? null
        : fbBuilder.writeString(_aircraftMds!);
    final int? depIcaoOffset = _depIcao == null ? null
        : fbBuilder.writeString(_depIcao!);
    final int? depAirfieldOffset = _depAirfield == null ? null
        : fbBuilder.writeString(_depAirfield!);
    final int? estDepTimeOffset = _estDepTime == null ? null
        : fbBuilder.writeString(_estDepTime!);
    final int? arrIcaoOffset = _arrIcao == null ? null
        : fbBuilder.writeString(_arrIcao!);
    final int? arrAirfieldOffset = _arrAirfield == null ? null
        : fbBuilder.writeString(_arrAirfield!);
    final int? estArrTimeOffset = _estArrTime == null ? null
        : fbBuilder.writeString(_estArrTime!);
    final int? cargoConfigOffset = _cargoConfig == null ? null
        : fbBuilder.writeString(_cargoConfig!);
    final int? equipConfigOffset = _equipConfig == null ? null
        : fbBuilder.writeString(_equipConfig!);
    final int? tankConfigOffset = _tankConfig == null ? null
        : fbBuilder.writeString(_tankConfig!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(51);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, externalIdOffset);
    fbBuilder.addOffset(3, idMissionOffset);
    fbBuilder.addOffset(4, missionNumberOffset);
    fbBuilder.addOffset(5, idSortieOffset);
    fbBuilder.addInt32(6, _legNum);
    fbBuilder.addOffset(7, callSignOffset);
    fbBuilder.addOffset(8, tailNumberOffset);
    fbBuilder.addOffset(9, aircraftMdsOffset);
    fbBuilder.addOffset(10, depIcaoOffset);
    fbBuilder.addOffset(11, depAirfieldOffset);
    fbBuilder.addOffset(12, estDepTimeOffset);
    fbBuilder.addOffset(13, arrIcaoOffset);
    fbBuilder.addOffset(14, arrAirfieldOffset);
    fbBuilder.addOffset(15, estArrTimeOffset);
    fbBuilder.addInt32(16, _crewSize);
    fbBuilder.addOffset(17, cargoConfigOffset);
    fbBuilder.addOffset(18, equipConfigOffset);
    fbBuilder.addOffset(19, tankConfigOffset);
    fbBuilder.addFloat64(20, _basicWeight);
    fbBuilder.addFloat64(21, _basicMoment);
    fbBuilder.addFloat64(22, _fuelWeight);
    fbBuilder.addFloat64(23, _fuelMoment);
    fbBuilder.addFloat64(24, _estLandingFuelWeight);
    fbBuilder.addFloat64(25, _estLandingFuelMoment);
    fbBuilder.addFloat64(26, _operatingWeight);
    fbBuilder.addFloat64(27, _operatingMoment);
    fbBuilder.addFloat64(28, _cargoWeight);
    fbBuilder.addFloat64(29, _cargoMoment);
    fbBuilder.addFloat64(30, _zeroFuelWeight);
    fbBuilder.addFloat64(31, _zeroFuelMoment);
    fbBuilder.addFloat64(32, _zeroFuelCg);
    fbBuilder.addFloat64(33, _grossWeight);
    fbBuilder.addFloat64(34, _grossMoment);
    fbBuilder.addFloat64(35, _grossCg);
    fbBuilder.addFloat64(36, _landingWeight);
    fbBuilder.addFloat64(37, _landingMoment);
    fbBuilder.addFloat64(38, _landingCg);
    fbBuilder.addInt32(39, _cargoBayFsmin);
    fbBuilder.addInt32(40, _cargoBayFsmax);
    fbBuilder.addFloat64(41, _cargoBayWidth);
    fbBuilder.addOffset(42, createdAtOffset);
    fbBuilder.addOffset(43, createdByOffset);
    fbBuilder.addOffset(44, updatedAtOffset);
    fbBuilder.addOffset(45, updatedByOffset);
    fbBuilder.addOffset(46, sourceDlOffset);
    fbBuilder.addOffset(47, sourceOffset);
    fbBuilder.addOffset(48, originOffset);
    fbBuilder.addOffset(49, origNetworkOffset);
    fbBuilder.addInt8(50, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
