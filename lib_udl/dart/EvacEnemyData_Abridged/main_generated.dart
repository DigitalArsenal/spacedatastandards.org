// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Data defining any enemy intelligence reported by the requestor.
class EvacEnemyDataAbridged {
  EvacEnemyDataAbridged._(this._bc, this._bcOffset);
  factory EvacEnemyDataAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EvacEnemyDataAbridged> reader = _EvacEnemyDataAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
  ///  Example: /// Example: NORTH
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get dirToEnemy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
  ///  Example: /// Example: SMALL ARMS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get hostileFireType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Comments provided by friendlies about the evac zone.
  ///  Example: /// Example: Comments from friendlies.
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get friendliesRemarks => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Hot Landing Zone remarks.
  ///  Example: /// Example: Remarks about hot landing zone.
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get hlzRemarks => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'EvacEnemyDataAbridged{dirToEnemy: ${dirToEnemy}, hostileFireType: ${hostileFireType}, friendliesRemarks: ${friendliesRemarks}, hlzRemarks: ${hlzRemarks}}';
  }
}

class _EvacEnemyDataAbridgedReader extends fb.TableReader<EvacEnemyDataAbridged> {
  const _EvacEnemyDataAbridgedReader();

  @override
  EvacEnemyDataAbridged createObject(fb.BufferContext bc, int offset) => 
    EvacEnemyDataAbridged._(bc, offset);
}

class EvacEnemyDataAbridgedBuilder {
  EvacEnemyDataAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addDirToEnemyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHostileFireTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFriendliesRemarksOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addHlzRemarksOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EvacEnemyDataAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _dirToEnemy;
  final String? _hostileFireType;
  final String? _friendliesRemarks;
  final String? _hlzRemarks;

  EvacEnemyDataAbridgedObjectBuilder({
    String? dirToEnemy,
    String? hostileFireType,
    String? friendliesRemarks,
    String? hlzRemarks,
  })
      : _dirToEnemy = dirToEnemy,
        _hostileFireType = hostileFireType,
        _friendliesRemarks = friendliesRemarks,
        _hlzRemarks = hlzRemarks;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dirToEnemyOffset = _dirToEnemy == null ? null
        : fbBuilder.writeString(_dirToEnemy!);
    final int? hostileFireTypeOffset = _hostileFireType == null ? null
        : fbBuilder.writeString(_hostileFireType!);
    final int? friendliesRemarksOffset = _friendliesRemarks == null ? null
        : fbBuilder.writeString(_friendliesRemarks!);
    final int? hlzRemarksOffset = _hlzRemarks == null ? null
        : fbBuilder.writeString(_hlzRemarks!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, dirToEnemyOffset);
    fbBuilder.addOffset(1, hostileFireTypeOffset);
    fbBuilder.addOffset(2, friendliesRemarksOffset);
    fbBuilder.addOffset(3, hlzRemarksOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
