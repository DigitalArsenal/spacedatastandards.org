// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class ConjunctionAbridgedDataModeEnum {
  final int value;
  const ConjunctionAbridgedDataModeEnum._(this.value);

  factory ConjunctionAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ConjunctionAbridgedDataModeEnum');
    }
    return result;
  }

  static ConjunctionAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : ConjunctionAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const ConjunctionAbridgedDataModeEnum REAL = ConjunctionAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const ConjunctionAbridgedDataModeEnum TEST = ConjunctionAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const ConjunctionAbridgedDataModeEnum SIMULATED = ConjunctionAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const ConjunctionAbridgedDataModeEnum EXERCISE = ConjunctionAbridgedDataModeEnum._(3);
  static const Map<int, ConjunctionAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<ConjunctionAbridgedDataModeEnum> reader = _ConjunctionAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'ConjunctionAbridgedDataModeEnum{value: $value}';
  }
}

class _ConjunctionAbridgedDataModeEnumReader extends fb.Reader<ConjunctionAbridgedDataModeEnum> {
  const _ConjunctionAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  ConjunctionAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      ConjunctionAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Stores the results of a particular Conjunction Assessment (CA) run.
class ConjunctionAbridged {
  ConjunctionAbridged._(this._bc, this._bcOffset);
  factory ConjunctionAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConjunctionAbridged> reader = _ConjunctionAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: CONJUNCTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the primary satellite on-orbit object, if correlated.
  ///  Example: /// Example: ONORBIT1-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the secondary satellite on-orbit object, if correlated.
  ///  Example: /// Example: ONORBIT2-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The type of data represented in this conjunction record (e.g. CONJUNCTION, CARA-WORKLIST, etc.).  If type is null the record is assumed to be a Conjunction.
  ///  Example: /// Example: CONJUNCTION
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Time of closest approach (TCA) in UTC.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get tca => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Distance between objects at Time of Closest Approach (TCA) in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get missDistance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that Object1 and Object2 will collide.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get collisionProb => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  The method that was used to calculate the collision probability, ex. FOSTER-1992.
  ///  Example: /// Example: FOSTER-1992
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get collisionProbMethod => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The filename of the primary (object1) ephemeris used in the screening, if applicable.
  ///  Example: /// Example: MEME_SPCFT_ABC_2180000_ops_nomnvr_unclassified.oem
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get ephemName1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris used in the screening, if applicable.
  ///  Example: /// Example: a2ae2356-6d83-4e4b-896d-ddd1958800fa
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get esId1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The filename of the secondary (object2) ephemeris used in the screening, if applicable.
  ///  Example: /// Example: MEME_SPCFT_DEF_2170000_ops_nomnvr_unclassified.txt
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get ephemName2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Unique identifier of the parent Ephemeris Set of the secondary (object2) ephemeris used in the screening, if applicable.
  ///  Example: /// Example: 6fa31433-8beb-4b9b-8bf9-326dbd041c3f
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get esId2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Distance between objects along Radial Vector at Time of Closest Approach in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get relPosR => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Distance between objects along Tangential Vector in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get relPosT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Distance between objects along Normal vector in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get relPosN => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Closing velocity magnitude (relative speed) at Time of Closest Approach in meters/sec.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get relVelMag => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Closing velocity between objects along Radial Vector at Time of Closest Approach in meters/sec.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get relVelR => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Closing velocity between objects along Tangential Vector in meters/sec.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get relVelT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Closing velocity between objects along Normal Vector in meters/sec.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get relVelN => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  The start time in UTC of the screening period for the conjunction assessment.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get screenEntryTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The stop time in UTC of the screening period for the conjunction assessment.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get screenExitTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Component size of screen in X component of  RTN (Radial, Transverse and Normal) frame in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get screenVolumeX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Component size of screen in Y component of  RTN (Radial, Transverse and Normal) frame in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get screenVolumeY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Component size of screen in Z component of  RTN (Radial, Transverse and Normal) frame in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get screenVolumeZ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  The shape (BOX, ELLIPSOID) of the screening volume.
  ///  Example: /// Example: ELLIPSOID
  ///  Constraints: Minimum length = 0, Maximum length = 12
  String? get volShape => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  The time at which the secondary (object2) enters the screening volume, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:02:01.123456Z
  ///  Constraints: No constraints specified.
  String? get volEntryTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  The time at which the secondary (object2) exits the screening volume, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:02:28.123456Z
  ///  Constraints: No constraints specified.
  String? get volExitTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Penetration Level Sigma.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get penetrationLevelSigma => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Optional ID of the UDL State Vector at TCA of the primary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector1.
  ///  Example: /// Example: REF-STATEVECTOR1-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idStateVector1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Time of last positive metric observation of the primary satellite.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get lastObTime1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  The value of the primary (object1) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
  ///  Example: /// Example: 0.016386
  ///  Constraints: No constraints specified.
  double get cdAoM1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  The value of the primary (object1) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
  ///  Example: /// Example: 0.013814
  ///  Constraints: No constraints specified.
  double get crAoM1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
  ///  Example: /// Example: 0.033814
  ///  Constraints: No constraints specified.
  double get thrustAccel1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Optional ID of the UDL State Vector at TCA of the secondary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector2.
  ///  Example: /// Example: REF-STATEVECTOR2-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idStateVector2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Time of last positive metric observation of the secondary satellite.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get lastObTime2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  The value of the secondary (object2) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
  ///  Example: /// Example: 0.016386
  ///  Constraints: No constraints specified.
  double get cdAoM2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  The value of the secondary (object2) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
  ///  Example: /// Example: 0.013814
  ///  Constraints: No constraints specified.
  double get crAoM2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
  ///  Example: /// Example: 0.033814
  ///  Constraints: No constraints specified.
  double get thrustAccel2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  Additional notes from data providers.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get comments => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Commander's critical information requirements notes.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get ccir => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Emergency comments.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get concernNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Flag indicating if State department was notified.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get stateDeptNotified => const fb.BoolReader().vTableGet(_bc, _bcOffset, 88, false);
  ///  Flag indicating if owner was contacted.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get ownerContacted => const fb.BoolReader().vTableGet(_bc, _bcOffset, 90, false);
  ///  Link to filename associated with JMS record.
  ///  Example: /// Example: Example link
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Spacecraft name(s) for which the Collision message is provided.
  ///  Example: /// Example: Message for space craft A
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get messageFor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  JMS provided message ID link.
  ///  Example: /// Example: MESSAGE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get messageId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get uvwWarn => const fb.BoolReader().vTableGet(_bc, _bcOffset, 98, false);
  ///  Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get smallRelVelWarning => const fb.BoolReader().vTableGet(_bc, _bcOffset, 100, false);
  ///  Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get largeRelPosWarning => const fb.BoolReader().vTableGet(_bc, _bcOffset, 102, false);
  ///  Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get smallCovWarning => const fb.BoolReader().vTableGet(_bc, _bcOffset, 104, false);
  ///  Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get largeCovWarning => const fb.BoolReader().vTableGet(_bc, _bcOffset, 106, false);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  Creating agency or owner/operator (may be different than provider who submitted the conjunction message).
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get originator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 114);
  ///  Optional source-provided identifier for this conjunction event. In the case where multiple conjunction records are submitted for the same event, this field can be used to tie them together to the same event.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get eventId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: sample_descriptor here
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get descriptor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  ConjunctionAbridgedDataModeEnum get dataMode => ConjunctionAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 120, 0));
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 122);
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 124);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get stateVector1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 126);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get stateVector2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 128);
  ///  Satellite/catalog number of the target on-orbit primary object.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get satNo1 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 130, 0);
  ///  Satellite/catalog number of the target on-orbit secondary object.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get satNo2 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 132, 0);
  ///  Optional place holder for an OnOrbit ID that does not exist in UDL.
  ///  Example: /// Example: ORIGONORBIT1-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origIdOnOrbit1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 134);
  ///  Optional place holder for an OnOrbit ID that does not exist in UDL.
  ///  Example: /// Example: ORIGONORBIT2-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origIdOnOrbit2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 136);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 138);

  @override
  String toString() {
    return 'ConjunctionAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idOnOrbit1: ${idOnOrbit1}, idOnOrbit2: ${idOnOrbit2}, type: ${type}, tca: ${tca}, missDistance: ${missDistance}, collisionProb: ${collisionProb}, collisionProbMethod: ${collisionProbMethod}, ephemName1: ${ephemName1}, esId1: ${esId1}, ephemName2: ${ephemName2}, esId2: ${esId2}, relPosR: ${relPosR}, relPosT: ${relPosT}, relPosN: ${relPosN}, relVelMag: ${relVelMag}, relVelR: ${relVelR}, relVelT: ${relVelT}, relVelN: ${relVelN}, screenEntryTime: ${screenEntryTime}, screenExitTime: ${screenExitTime}, screenVolumeX: ${screenVolumeX}, screenVolumeY: ${screenVolumeY}, screenVolumeZ: ${screenVolumeZ}, volShape: ${volShape}, volEntryTime: ${volEntryTime}, volExitTime: ${volExitTime}, penetrationLevelSigma: ${penetrationLevelSigma}, idStateVector1: ${idStateVector1}, lastObTime1: ${lastObTime1}, cdAoM1: ${cdAoM1}, crAoM1: ${crAoM1}, thrustAccel1: ${thrustAccel1}, idStateVector2: ${idStateVector2}, lastObTime2: ${lastObTime2}, cdAoM2: ${cdAoM2}, crAoM2: ${crAoM2}, thrustAccel2: ${thrustAccel2}, comments: ${comments}, ccir: ${ccir}, concernNotes: ${concernNotes}, stateDeptNotified: ${stateDeptNotified}, ownerContacted: ${ownerContacted}, rawFileUri: ${rawFileUri}, messageFor: ${messageFor}, messageId: ${messageId}, uvwWarn: ${uvwWarn}, smallRelVelWarning: ${smallRelVelWarning}, largeRelPosWarning: ${largeRelPosWarning}, smallCovWarning: ${smallCovWarning}, largeCovWarning: ${largeCovWarning}, transactionId: ${transactionId}, source: ${source}, origin: ${origin}, originator: ${originator}, eventId: ${eventId}, descriptor: ${descriptor}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, stateVector1: ${stateVector1}, stateVector2: ${stateVector2}, satNo1: ${satNo1}, satNo2: ${satNo2}, origIdOnOrbit1: ${origIdOnOrbit1}, origIdOnOrbit2: ${origIdOnOrbit2}, origNetwork: ${origNetwork}}';
  }
}

class _ConjunctionAbridgedReader extends fb.TableReader<ConjunctionAbridged> {
  const _ConjunctionAbridgedReader();

  @override
  ConjunctionAbridged createObject(fb.BufferContext bc, int offset) => 
    ConjunctionAbridged._(bc, offset);
}

class ConjunctionAbridgedBuilder {
  ConjunctionAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(68);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbit1Offset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbit2Offset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTcaOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addMissDistance(double? missDistance) {
    fbBuilder.addFloat64(6, missDistance);
    return fbBuilder.offset;
  }
  int addCollisionProb(double? collisionProb) {
    fbBuilder.addFloat64(7, collisionProb);
    return fbBuilder.offset;
  }
  int addCollisionProbMethodOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addEphemName1Offset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addEsId1Offset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addEphemName2Offset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addEsId2Offset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addRelPosR(double? relPosR) {
    fbBuilder.addFloat64(13, relPosR);
    return fbBuilder.offset;
  }
  int addRelPosT(double? relPosT) {
    fbBuilder.addFloat64(14, relPosT);
    return fbBuilder.offset;
  }
  int addRelPosN(double? relPosN) {
    fbBuilder.addFloat64(15, relPosN);
    return fbBuilder.offset;
  }
  int addRelVelMag(double? relVelMag) {
    fbBuilder.addFloat64(16, relVelMag);
    return fbBuilder.offset;
  }
  int addRelVelR(double? relVelR) {
    fbBuilder.addFloat64(17, relVelR);
    return fbBuilder.offset;
  }
  int addRelVelT(double? relVelT) {
    fbBuilder.addFloat64(18, relVelT);
    return fbBuilder.offset;
  }
  int addRelVelN(double? relVelN) {
    fbBuilder.addFloat64(19, relVelN);
    return fbBuilder.offset;
  }
  int addScreenEntryTimeOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addScreenExitTimeOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addScreenVolumeX(double? screenVolumeX) {
    fbBuilder.addFloat64(22, screenVolumeX);
    return fbBuilder.offset;
  }
  int addScreenVolumeY(double? screenVolumeY) {
    fbBuilder.addFloat64(23, screenVolumeY);
    return fbBuilder.offset;
  }
  int addScreenVolumeZ(double? screenVolumeZ) {
    fbBuilder.addFloat64(24, screenVolumeZ);
    return fbBuilder.offset;
  }
  int addVolShapeOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addVolEntryTimeOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addVolExitTimeOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addPenetrationLevelSigma(double? penetrationLevelSigma) {
    fbBuilder.addFloat64(28, penetrationLevelSigma);
    return fbBuilder.offset;
  }
  int addIdStateVector1Offset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addLastObTime1Offset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addCdAoM1(double? cdAoM1) {
    fbBuilder.addFloat64(31, cdAoM1);
    return fbBuilder.offset;
  }
  int addCrAoM1(double? crAoM1) {
    fbBuilder.addFloat64(32, crAoM1);
    return fbBuilder.offset;
  }
  int addThrustAccel1(double? thrustAccel1) {
    fbBuilder.addFloat64(33, thrustAccel1);
    return fbBuilder.offset;
  }
  int addIdStateVector2Offset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addLastObTime2Offset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addCdAoM2(double? cdAoM2) {
    fbBuilder.addFloat64(36, cdAoM2);
    return fbBuilder.offset;
  }
  int addCrAoM2(double? crAoM2) {
    fbBuilder.addFloat64(37, crAoM2);
    return fbBuilder.offset;
  }
  int addThrustAccel2(double? thrustAccel2) {
    fbBuilder.addFloat64(38, thrustAccel2);
    return fbBuilder.offset;
  }
  int addCommentsOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addCcirOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addConcernNotesOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addStateDeptNotified(bool? stateDeptNotified) {
    fbBuilder.addBool(42, stateDeptNotified);
    return fbBuilder.offset;
  }
  int addOwnerContacted(bool? ownerContacted) {
    fbBuilder.addBool(43, ownerContacted);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addMessageForOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addMessageIdOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addUvwWarn(bool? uvwWarn) {
    fbBuilder.addBool(47, uvwWarn);
    return fbBuilder.offset;
  }
  int addSmallRelVelWarning(bool? smallRelVelWarning) {
    fbBuilder.addBool(48, smallRelVelWarning);
    return fbBuilder.offset;
  }
  int addLargeRelPosWarning(bool? largeRelPosWarning) {
    fbBuilder.addBool(49, largeRelPosWarning);
    return fbBuilder.offset;
  }
  int addSmallCovWarning(bool? smallCovWarning) {
    fbBuilder.addBool(50, smallCovWarning);
    return fbBuilder.offset;
  }
  int addLargeCovWarning(bool? largeCovWarning) {
    fbBuilder.addBool(51, largeCovWarning);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addOriginatorOffset(int? offset) {
    fbBuilder.addOffset(55, offset);
    return fbBuilder.offset;
  }
  int addEventIdOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addDataMode(ConjunctionAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(58, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(59, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }
  int addStateVector1Offset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addStateVector2Offset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addSatNo1(int? satNo1) {
    fbBuilder.addInt32(63, satNo1);
    return fbBuilder.offset;
  }
  int addSatNo2(int? satNo2) {
    fbBuilder.addInt32(64, satNo2);
    return fbBuilder.offset;
  }
  int addOrigIdOnOrbit1Offset(int? offset) {
    fbBuilder.addOffset(65, offset);
    return fbBuilder.offset;
  }
  int addOrigIdOnOrbit2Offset(int? offset) {
    fbBuilder.addOffset(66, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(67, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConjunctionAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idOnOrbit1;
  final String? _idOnOrbit2;
  final String? _type;
  final String? _tca;
  final double? _missDistance;
  final double? _collisionProb;
  final String? _collisionProbMethod;
  final String? _ephemName1;
  final String? _esId1;
  final String? _ephemName2;
  final String? _esId2;
  final double? _relPosR;
  final double? _relPosT;
  final double? _relPosN;
  final double? _relVelMag;
  final double? _relVelR;
  final double? _relVelT;
  final double? _relVelN;
  final String? _screenEntryTime;
  final String? _screenExitTime;
  final double? _screenVolumeX;
  final double? _screenVolumeY;
  final double? _screenVolumeZ;
  final String? _volShape;
  final String? _volEntryTime;
  final String? _volExitTime;
  final double? _penetrationLevelSigma;
  final String? _idStateVector1;
  final String? _lastObTime1;
  final double? _cdAoM1;
  final double? _crAoM1;
  final double? _thrustAccel1;
  final String? _idStateVector2;
  final String? _lastObTime2;
  final double? _cdAoM2;
  final double? _crAoM2;
  final double? _thrustAccel2;
  final String? _comments;
  final String? _ccir;
  final String? _concernNotes;
  final bool? _stateDeptNotified;
  final bool? _ownerContacted;
  final String? _rawFileUri;
  final String? _messageFor;
  final String? _messageId;
  final bool? _uvwWarn;
  final bool? _smallRelVelWarning;
  final bool? _largeRelPosWarning;
  final bool? _smallCovWarning;
  final bool? _largeCovWarning;
  final String? _transactionId;
  final String? _source;
  final String? _origin;
  final String? _originator;
  final String? _eventId;
  final String? _descriptor;
  final ConjunctionAbridgedDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _stateVector1;
  final String? _stateVector2;
  final int? _satNo1;
  final int? _satNo2;
  final String? _origIdOnOrbit1;
  final String? _origIdOnOrbit2;
  final String? _origNetwork;

  ConjunctionAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idOnOrbit1,
    String? idOnOrbit2,
    String? type,
    String? tca,
    double? missDistance,
    double? collisionProb,
    String? collisionProbMethod,
    String? ephemName1,
    String? esId1,
    String? ephemName2,
    String? esId2,
    double? relPosR,
    double? relPosT,
    double? relPosN,
    double? relVelMag,
    double? relVelR,
    double? relVelT,
    double? relVelN,
    String? screenEntryTime,
    String? screenExitTime,
    double? screenVolumeX,
    double? screenVolumeY,
    double? screenVolumeZ,
    String? volShape,
    String? volEntryTime,
    String? volExitTime,
    double? penetrationLevelSigma,
    String? idStateVector1,
    String? lastObTime1,
    double? cdAoM1,
    double? crAoM1,
    double? thrustAccel1,
    String? idStateVector2,
    String? lastObTime2,
    double? cdAoM2,
    double? crAoM2,
    double? thrustAccel2,
    String? comments,
    String? ccir,
    String? concernNotes,
    bool? stateDeptNotified,
    bool? ownerContacted,
    String? rawFileUri,
    String? messageFor,
    String? messageId,
    bool? uvwWarn,
    bool? smallRelVelWarning,
    bool? largeRelPosWarning,
    bool? smallCovWarning,
    bool? largeCovWarning,
    String? transactionId,
    String? source,
    String? origin,
    String? originator,
    String? eventId,
    String? descriptor,
    ConjunctionAbridgedDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? stateVector1,
    String? stateVector2,
    int? satNo1,
    int? satNo2,
    String? origIdOnOrbit1,
    String? origIdOnOrbit2,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idOnOrbit1 = idOnOrbit1,
        _idOnOrbit2 = idOnOrbit2,
        _type = type,
        _tca = tca,
        _missDistance = missDistance,
        _collisionProb = collisionProb,
        _collisionProbMethod = collisionProbMethod,
        _ephemName1 = ephemName1,
        _esId1 = esId1,
        _ephemName2 = ephemName2,
        _esId2 = esId2,
        _relPosR = relPosR,
        _relPosT = relPosT,
        _relPosN = relPosN,
        _relVelMag = relVelMag,
        _relVelR = relVelR,
        _relVelT = relVelT,
        _relVelN = relVelN,
        _screenEntryTime = screenEntryTime,
        _screenExitTime = screenExitTime,
        _screenVolumeX = screenVolumeX,
        _screenVolumeY = screenVolumeY,
        _screenVolumeZ = screenVolumeZ,
        _volShape = volShape,
        _volEntryTime = volEntryTime,
        _volExitTime = volExitTime,
        _penetrationLevelSigma = penetrationLevelSigma,
        _idStateVector1 = idStateVector1,
        _lastObTime1 = lastObTime1,
        _cdAoM1 = cdAoM1,
        _crAoM1 = crAoM1,
        _thrustAccel1 = thrustAccel1,
        _idStateVector2 = idStateVector2,
        _lastObTime2 = lastObTime2,
        _cdAoM2 = cdAoM2,
        _crAoM2 = crAoM2,
        _thrustAccel2 = thrustAccel2,
        _comments = comments,
        _ccir = ccir,
        _concernNotes = concernNotes,
        _stateDeptNotified = stateDeptNotified,
        _ownerContacted = ownerContacted,
        _rawFileUri = rawFileUri,
        _messageFor = messageFor,
        _messageId = messageId,
        _uvwWarn = uvwWarn,
        _smallRelVelWarning = smallRelVelWarning,
        _largeRelPosWarning = largeRelPosWarning,
        _smallCovWarning = smallCovWarning,
        _largeCovWarning = largeCovWarning,
        _transactionId = transactionId,
        _source = source,
        _origin = origin,
        _originator = originator,
        _eventId = eventId,
        _descriptor = descriptor,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _stateVector1 = stateVector1,
        _stateVector2 = stateVector2,
        _satNo1 = satNo1,
        _satNo2 = satNo2,
        _origIdOnOrbit1 = origIdOnOrbit1,
        _origIdOnOrbit2 = origIdOnOrbit2,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idOnOrbit1Offset = _idOnOrbit1 == null ? null
        : fbBuilder.writeString(_idOnOrbit1!);
    final int? idOnOrbit2Offset = _idOnOrbit2 == null ? null
        : fbBuilder.writeString(_idOnOrbit2!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? tcaOffset = _tca == null ? null
        : fbBuilder.writeString(_tca!);
    final int? collisionProbMethodOffset = _collisionProbMethod == null ? null
        : fbBuilder.writeString(_collisionProbMethod!);
    final int? ephemName1Offset = _ephemName1 == null ? null
        : fbBuilder.writeString(_ephemName1!);
    final int? esId1Offset = _esId1 == null ? null
        : fbBuilder.writeString(_esId1!);
    final int? ephemName2Offset = _ephemName2 == null ? null
        : fbBuilder.writeString(_ephemName2!);
    final int? esId2Offset = _esId2 == null ? null
        : fbBuilder.writeString(_esId2!);
    final int? screenEntryTimeOffset = _screenEntryTime == null ? null
        : fbBuilder.writeString(_screenEntryTime!);
    final int? screenExitTimeOffset = _screenExitTime == null ? null
        : fbBuilder.writeString(_screenExitTime!);
    final int? volShapeOffset = _volShape == null ? null
        : fbBuilder.writeString(_volShape!);
    final int? volEntryTimeOffset = _volEntryTime == null ? null
        : fbBuilder.writeString(_volEntryTime!);
    final int? volExitTimeOffset = _volExitTime == null ? null
        : fbBuilder.writeString(_volExitTime!);
    final int? idStateVector1Offset = _idStateVector1 == null ? null
        : fbBuilder.writeString(_idStateVector1!);
    final int? lastObTime1Offset = _lastObTime1 == null ? null
        : fbBuilder.writeString(_lastObTime1!);
    final int? idStateVector2Offset = _idStateVector2 == null ? null
        : fbBuilder.writeString(_idStateVector2!);
    final int? lastObTime2Offset = _lastObTime2 == null ? null
        : fbBuilder.writeString(_lastObTime2!);
    final int? commentsOffset = _comments == null ? null
        : fbBuilder.writeString(_comments!);
    final int? ccirOffset = _ccir == null ? null
        : fbBuilder.writeString(_ccir!);
    final int? concernNotesOffset = _concernNotes == null ? null
        : fbBuilder.writeString(_concernNotes!);
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? messageForOffset = _messageFor == null ? null
        : fbBuilder.writeString(_messageFor!);
    final int? messageIdOffset = _messageId == null ? null
        : fbBuilder.writeString(_messageId!);
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? originatorOffset = _originator == null ? null
        : fbBuilder.writeString(_originator!);
    final int? eventIdOffset = _eventId == null ? null
        : fbBuilder.writeString(_eventId!);
    final int? descriptorOffset = _descriptor == null ? null
        : fbBuilder.writeString(_descriptor!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? stateVector1Offset = _stateVector1 == null ? null
        : fbBuilder.writeString(_stateVector1!);
    final int? stateVector2Offset = _stateVector2 == null ? null
        : fbBuilder.writeString(_stateVector2!);
    final int? origIdOnOrbit1Offset = _origIdOnOrbit1 == null ? null
        : fbBuilder.writeString(_origIdOnOrbit1!);
    final int? origIdOnOrbit2Offset = _origIdOnOrbit2 == null ? null
        : fbBuilder.writeString(_origIdOnOrbit2!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(68);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idOnOrbit1Offset);
    fbBuilder.addOffset(3, idOnOrbit2Offset);
    fbBuilder.addOffset(4, typeOffset);
    fbBuilder.addOffset(5, tcaOffset);
    fbBuilder.addFloat64(6, _missDistance);
    fbBuilder.addFloat64(7, _collisionProb);
    fbBuilder.addOffset(8, collisionProbMethodOffset);
    fbBuilder.addOffset(9, ephemName1Offset);
    fbBuilder.addOffset(10, esId1Offset);
    fbBuilder.addOffset(11, ephemName2Offset);
    fbBuilder.addOffset(12, esId2Offset);
    fbBuilder.addFloat64(13, _relPosR);
    fbBuilder.addFloat64(14, _relPosT);
    fbBuilder.addFloat64(15, _relPosN);
    fbBuilder.addFloat64(16, _relVelMag);
    fbBuilder.addFloat64(17, _relVelR);
    fbBuilder.addFloat64(18, _relVelT);
    fbBuilder.addFloat64(19, _relVelN);
    fbBuilder.addOffset(20, screenEntryTimeOffset);
    fbBuilder.addOffset(21, screenExitTimeOffset);
    fbBuilder.addFloat64(22, _screenVolumeX);
    fbBuilder.addFloat64(23, _screenVolumeY);
    fbBuilder.addFloat64(24, _screenVolumeZ);
    fbBuilder.addOffset(25, volShapeOffset);
    fbBuilder.addOffset(26, volEntryTimeOffset);
    fbBuilder.addOffset(27, volExitTimeOffset);
    fbBuilder.addFloat64(28, _penetrationLevelSigma);
    fbBuilder.addOffset(29, idStateVector1Offset);
    fbBuilder.addOffset(30, lastObTime1Offset);
    fbBuilder.addFloat64(31, _cdAoM1);
    fbBuilder.addFloat64(32, _crAoM1);
    fbBuilder.addFloat64(33, _thrustAccel1);
    fbBuilder.addOffset(34, idStateVector2Offset);
    fbBuilder.addOffset(35, lastObTime2Offset);
    fbBuilder.addFloat64(36, _cdAoM2);
    fbBuilder.addFloat64(37, _crAoM2);
    fbBuilder.addFloat64(38, _thrustAccel2);
    fbBuilder.addOffset(39, commentsOffset);
    fbBuilder.addOffset(40, ccirOffset);
    fbBuilder.addOffset(41, concernNotesOffset);
    fbBuilder.addBool(42, _stateDeptNotified);
    fbBuilder.addBool(43, _ownerContacted);
    fbBuilder.addOffset(44, rawFileUriOffset);
    fbBuilder.addOffset(45, messageForOffset);
    fbBuilder.addOffset(46, messageIdOffset);
    fbBuilder.addBool(47, _uvwWarn);
    fbBuilder.addBool(48, _smallRelVelWarning);
    fbBuilder.addBool(49, _largeRelPosWarning);
    fbBuilder.addBool(50, _smallCovWarning);
    fbBuilder.addBool(51, _largeCovWarning);
    fbBuilder.addOffset(52, transactionIdOffset);
    fbBuilder.addOffset(53, sourceOffset);
    fbBuilder.addOffset(54, originOffset);
    fbBuilder.addOffset(55, originatorOffset);
    fbBuilder.addOffset(56, eventIdOffset);
    fbBuilder.addOffset(57, descriptorOffset);
    fbBuilder.addInt8(58, _dataMode?.value);
    fbBuilder.addOffset(59, createdAtOffset);
    fbBuilder.addOffset(60, createdByOffset);
    fbBuilder.addOffset(61, stateVector1Offset);
    fbBuilder.addOffset(62, stateVector2Offset);
    fbBuilder.addInt32(63, _satNo1);
    fbBuilder.addInt32(64, _satNo2);
    fbBuilder.addOffset(65, origIdOnOrbit1Offset);
    fbBuilder.addOffset(66, origIdOnOrbit2Offset);
    fbBuilder.addOffset(67, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
