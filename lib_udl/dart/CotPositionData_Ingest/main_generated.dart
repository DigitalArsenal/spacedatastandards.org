// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Schema for the CotPositionData to post.
class CotPositionDataIngest {
  CotPositionDataIngest._(this._bc, this._bcOffset);
  factory CotPositionDataIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CotPositionDataIngest> reader = _CotPositionDataIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Name of the POI target Object.
  ///  Example: /// Example: POI_NAME
  ///  Constraints: Minimum length = 1, Maximum length = 2147483647
  String? get callSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Team role  (Team Member| Team Lead | HQ | Sniper | Medic | Forward Observer | RTO | K9).
  ///  Example: /// Example: Team Member
  ///  Constraints: Minimum length = 1, Maximum length = 2147483647
  String? get teamRole => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Description of the POI target Object.
  ///  Example: /// Example: Description of the object
  ///  Constraints: Minimum length = 1, Maximum length = 2147483647
  String? get team => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'CotPositionDataIngest{callSign: ${callSign}, teamRole: ${teamRole}, team: ${team}}';
  }
}

class _CotPositionDataIngestReader extends fb.TableReader<CotPositionDataIngest> {
  const _CotPositionDataIngestReader();

  @override
  CotPositionDataIngest createObject(fb.BufferContext bc, int offset) => 
    CotPositionDataIngest._(bc, offset);
}

class CotPositionDataIngestBuilder {
  CotPositionDataIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addCallSignOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTeamRoleOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTeamOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CotPositionDataIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _callSign;
  final String? _teamRole;
  final String? _team;

  CotPositionDataIngestObjectBuilder({
    String? callSign,
    String? teamRole,
    String? team,
  })
      : _callSign = callSign,
        _teamRole = teamRole,
        _team = team;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? callSignOffset = _callSign == null ? null
        : fbBuilder.writeString(_callSign!);
    final int? teamRoleOffset = _teamRole == null ? null
        : fbBuilder.writeString(_teamRole!);
    final int? teamOffset = _team == null ? null
        : fbBuilder.writeString(_team!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, callSignOffset);
    fbBuilder.addOffset(1, teamRoleOffset);
    fbBuilder.addOffset(2, teamOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
