// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class StatusIngestStateEnum {
  final int value;
  const StatusIngestStateEnum._(this.value);

  factory StatusIngestStateEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StatusIngestStateEnum');
    }
    return result;
  }

  static StatusIngestStateEnum? _createOrNull(int? value) => 
      value == null ? null : StatusIngestStateEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const StatusIngestStateEnum UNKNOWN = StatusIngestStateEnum._(0);

  ///  No description available.
  static const StatusIngestStateEnum DEAD = StatusIngestStateEnum._(1);

  ///  No description available.
  static const StatusIngestStateEnum ACTIVE = StatusIngestStateEnum._(2);

  ///  No description available.
  static const StatusIngestStateEnum RF_ACTIVE = StatusIngestStateEnum._(3);

  ///  No description available.
  static const StatusIngestStateEnum STANDBY = StatusIngestStateEnum._(4);
  static const Map<int, StatusIngestStateEnum> values = {
    0: UNKNOWN,
    1: DEAD,
    2: ACTIVE,
    3: RF_ACTIVE,
    4: STANDBY};

  static const fb.Reader<StatusIngestStateEnum> reader = _StatusIngestStateEnumReader();

  @override
  String toString() {
    return 'StatusIngestStateEnum{value: $value}';
  }
}

class _StatusIngestStateEnumReader extends fb.Reader<StatusIngestStateEnum> {
  const _StatusIngestStateEnumReader();

  @override
  int get size => 1;

  @override
  StatusIngestStateEnum read(fb.BufferContext bc, int offset) =>
      StatusIngestStateEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class StatusIngestSysCapEnum {
  final int value;
  const StatusIngestSysCapEnum._(this.value);

  factory StatusIngestSysCapEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StatusIngestSysCapEnum');
    }
    return result;
  }

  static StatusIngestSysCapEnum? _createOrNull(int? value) => 
      value == null ? null : StatusIngestSysCapEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const StatusIngestSysCapEnum FMC = StatusIngestSysCapEnum._(0);

  ///  No description available.
  static const StatusIngestSysCapEnum NMC = StatusIngestSysCapEnum._(1);

  ///  No description available.
  static const StatusIngestSysCapEnum PMC = StatusIngestSysCapEnum._(2);

  ///  No description available.
  static const StatusIngestSysCapEnum UNK = StatusIngestSysCapEnum._(3);
  static const Map<int, StatusIngestSysCapEnum> values = {
    0: FMC,
    1: NMC,
    2: PMC,
    3: UNK};

  static const fb.Reader<StatusIngestSysCapEnum> reader = _StatusIngestSysCapEnumReader();

  @override
  String toString() {
    return 'StatusIngestSysCapEnum{value: $value}';
  }
}

class _StatusIngestSysCapEnumReader extends fb.Reader<StatusIngestSysCapEnum> {
  const _StatusIngestSysCapEnumReader();

  @override
  int get size => 1;

  @override
  StatusIngestSysCapEnum read(fb.BufferContext bc, int offset) =>
      StatusIngestSysCapEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class StatusIngestOpsCapEnum {
  final int value;
  const StatusIngestOpsCapEnum._(this.value);

  factory StatusIngestOpsCapEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StatusIngestOpsCapEnum');
    }
    return result;
  }

  static StatusIngestOpsCapEnum? _createOrNull(int? value) => 
      value == null ? null : StatusIngestOpsCapEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const StatusIngestOpsCapEnum FMC = StatusIngestOpsCapEnum._(0);

  ///  No description available.
  static const StatusIngestOpsCapEnum NMC = StatusIngestOpsCapEnum._(1);

  ///  No description available.
  static const StatusIngestOpsCapEnum PMC = StatusIngestOpsCapEnum._(2);

  ///  No description available.
  static const StatusIngestOpsCapEnum UNK = StatusIngestOpsCapEnum._(3);
  static const Map<int, StatusIngestOpsCapEnum> values = {
    0: FMC,
    1: NMC,
    2: PMC,
    3: UNK};

  static const fb.Reader<StatusIngestOpsCapEnum> reader = _StatusIngestOpsCapEnumReader();

  @override
  String toString() {
    return 'StatusIngestOpsCapEnum{value: $value}';
  }
}

class _StatusIngestOpsCapEnumReader extends fb.Reader<StatusIngestOpsCapEnum> {
  const _StatusIngestOpsCapEnumReader();

  @override
  int get size => 1;

  @override
  StatusIngestOpsCapEnum read(fb.BufferContext bc, int offset) =>
      StatusIngestOpsCapEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class StatusIngestDataModeEnum {
  final int value;
  const StatusIngestDataModeEnum._(this.value);

  factory StatusIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StatusIngestDataModeEnum');
    }
    return result;
  }

  static StatusIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : StatusIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const StatusIngestDataModeEnum REAL = StatusIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const StatusIngestDataModeEnum TEST = StatusIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const StatusIngestDataModeEnum SIMULATED = StatusIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const StatusIngestDataModeEnum EXERCISE = StatusIngestDataModeEnum._(3);
  static const Map<int, StatusIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<StatusIngestDataModeEnum> reader = _StatusIngestDataModeEnumReader();

  @override
  String toString() {
    return 'StatusIngestDataModeEnum{value: $value}';
  }
}

class _StatusIngestDataModeEnumReader extends fb.Reader<StatusIngestDataModeEnum> {
  const _StatusIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  StatusIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      StatusIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Status for a particular Entity. An entity may have multiple status records collected by various sources.
class StatusIngest {
  StatusIngest._(this._bc, this._bcOffset);
  factory StatusIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatusIngest> reader = _StatusIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: STATUS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The sources or SCG references from which the classification of this data is derived.
  ///  Example: /// Example: SOME_SOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get derivedFrom => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The declassification date of this data, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:02:02.123Z
  ///  Constraints: No constraints specified.
  String? get declassificationDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Declassification string of this data.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get declassificationString => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the parent entity.
  ///  Example: /// Example: ENTITY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idEntity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).
  ///  Example: /// Example: ACTIVE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  StatusIngestStateEnum get state => StatusIngestStateEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 16, 0));
  ///  System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
  ///  Example: /// Example: FMC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  StatusIngestSysCapEnum get sysCap => StatusIngestSysCapEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 18, 0));
  ///  Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
  ///  Example: /// Example: FMC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  StatusIngestOpsCapEnum get opsCap => StatusIngestOpsCapEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 20, 0));
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get subStatusCollection => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 24);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  StatusIngestDataModeEnum get dataMode => StatusIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 26, 0));
  ///  Comments describing the status creation and or updates to an entity.
  ///  Example: /// Example: Example Notes
  ///  Constraints: No constraints specified.
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: TST1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);

  @override
  String toString() {
    return 'StatusIngest{id: ${id}, classificationMarking: ${classificationMarking}, derivedFrom: ${derivedFrom}, declassificationDate: ${declassificationDate}, declassificationString: ${declassificationString}, idEntity: ${idEntity}, state: ${state}, sysCap: ${sysCap}, opsCap: ${opsCap}, source: ${source}, subStatusCollection: ${subStatusCollection}, dataMode: ${dataMode}, notes: ${notes}, createdAt: ${createdAt}, createdBy: ${createdBy}, origin: ${origin}, origNetwork: ${origNetwork}}';
  }
}

class _StatusIngestReader extends fb.TableReader<StatusIngest> {
  const _StatusIngestReader();

  @override
  StatusIngest createObject(fb.BufferContext bc, int offset) => 
    StatusIngest._(bc, offset);
}

class StatusIngestBuilder {
  StatusIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(17);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDerivedFromOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDeclassificationDateOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDeclassificationStringOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdEntityOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addState(StatusIngestStateEnum? state) {
    fbBuilder.addInt8(6, state?.value);
    return fbBuilder.offset;
  }
  int addSysCap(StatusIngestSysCapEnum? sysCap) {
    fbBuilder.addInt8(7, sysCap?.value);
    return fbBuilder.offset;
  }
  int addOpsCap(StatusIngestOpsCapEnum? opsCap) {
    fbBuilder.addInt8(8, opsCap?.value);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSubStatusCollectionOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addDataMode(StatusIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(11, dataMode?.value);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatusIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _derivedFrom;
  final String? _declassificationDate;
  final String? _declassificationString;
  final String? _idEntity;
  final StatusIngestStateEnum? _state;
  final StatusIngestSysCapEnum? _sysCap;
  final StatusIngestOpsCapEnum? _opsCap;
  final String? _source;
  final List<String>? _subStatusCollection;
  final StatusIngestDataModeEnum? _dataMode;
  final String? _notes;
  final String? _createdAt;
  final String? _createdBy;
  final String? _origin;
  final String? _origNetwork;

  StatusIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? derivedFrom,
    String? declassificationDate,
    String? declassificationString,
    String? idEntity,
    StatusIngestStateEnum? state,
    StatusIngestSysCapEnum? sysCap,
    StatusIngestOpsCapEnum? opsCap,
    String? source,
    List<String>? subStatusCollection,
    StatusIngestDataModeEnum? dataMode,
    String? notes,
    String? createdAt,
    String? createdBy,
    String? origin,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _derivedFrom = derivedFrom,
        _declassificationDate = declassificationDate,
        _declassificationString = declassificationString,
        _idEntity = idEntity,
        _state = state,
        _sysCap = sysCap,
        _opsCap = opsCap,
        _source = source,
        _subStatusCollection = subStatusCollection,
        _dataMode = dataMode,
        _notes = notes,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _origin = origin,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? derivedFromOffset = _derivedFrom == null ? null
        : fbBuilder.writeString(_derivedFrom!);
    final int? declassificationDateOffset = _declassificationDate == null ? null
        : fbBuilder.writeString(_declassificationDate!);
    final int? declassificationStringOffset = _declassificationString == null ? null
        : fbBuilder.writeString(_declassificationString!);
    final int? idEntityOffset = _idEntity == null ? null
        : fbBuilder.writeString(_idEntity!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? subStatusCollectionOffset = _subStatusCollection == null ? null
        : fbBuilder.writeList(_subStatusCollection!.map(fbBuilder.writeString).toList());
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(17);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, derivedFromOffset);
    fbBuilder.addOffset(3, declassificationDateOffset);
    fbBuilder.addOffset(4, declassificationStringOffset);
    fbBuilder.addOffset(5, idEntityOffset);
    fbBuilder.addInt8(6, _state?.value);
    fbBuilder.addInt8(7, _sysCap?.value);
    fbBuilder.addInt8(8, _opsCap?.value);
    fbBuilder.addOffset(9, sourceOffset);
    fbBuilder.addOffset(10, subStatusCollectionOffset);
    fbBuilder.addInt8(11, _dataMode?.value);
    fbBuilder.addOffset(12, notesOffset);
    fbBuilder.addOffset(13, createdAtOffset);
    fbBuilder.addOffset(14, createdByOffset);
    fbBuilder.addOffset(15, originOffset);
    fbBuilder.addOffset(16, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
