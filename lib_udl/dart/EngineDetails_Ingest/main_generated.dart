// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class EngineDetailsIngestDataModeEnum {
  final int value;
  const EngineDetailsIngestDataModeEnum._(this.value);

  factory EngineDetailsIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EngineDetailsIngestDataModeEnum');
    }
    return result;
  }

  static EngineDetailsIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : EngineDetailsIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const EngineDetailsIngestDataModeEnum REAL = EngineDetailsIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const EngineDetailsIngestDataModeEnum TEST = EngineDetailsIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const EngineDetailsIngestDataModeEnum SIMULATED = EngineDetailsIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const EngineDetailsIngestDataModeEnum EXERCISE = EngineDetailsIngestDataModeEnum._(3);
  static const Map<int, EngineDetailsIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<EngineDetailsIngestDataModeEnum> reader = _EngineDetailsIngestDataModeEnumReader();

  @override
  String toString() {
    return 'EngineDetailsIngestDataModeEnum{value: $value}';
  }
}

class _EngineDetailsIngestDataModeEnumReader extends fb.Reader<EngineDetailsIngestDataModeEnum> {
  const _EngineDetailsIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  EngineDetailsIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      EngineDetailsIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.
class EngineDetailsIngest {
  EngineDetailsIngest._(this._bc, this._bcOffset);
  factory EngineDetailsIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EngineDetailsIngest> reader = _EngineDetailsIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ENGINEDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Identifier of the parent engine record.
  ///  Example: /// Example: ENGINE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idEngine => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Engine type or family.
  ///  Example: /// Example: ENGINE_TYPE1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get family => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
  ///  Example: /// Example: Pressure Fed
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get cycleType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).
  ///  Example: /// Example: Electric
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get characteristicType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Organization ID of the engine manufacturer.
  ///  Example: /// Example: MANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get manufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Launch engine specific impulse in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get specificImpulse => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Launch engine maximum burn time in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get burnTime => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Engine maximum thrust at sea level in Kilo-Newtons.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get seaLevelThrust => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Engine maximum thrust in a vacuum in Kilo-Newtons.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get vacuumThrust => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Engine chamber pressure in bars.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get chamberPressure => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Engine nozzle expansion ratio.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get nozzleExpansionRatio => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Engine maximum number of firings.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get maxFirings => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 30, 0);
  ///  Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).
  ///  Example: /// Example: Liquid
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get propellant => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
  ///  Example: /// Example: Liquid Oxygen
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get oxidizer => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Notes/Description of the engine.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  EngineDetailsIngestDataModeEnum get dataMode => EngineDetailsIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 48, 0));
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 50);

  @override
  String toString() {
    return 'EngineDetailsIngest{id: ${id}, idEngine: ${idEngine}, classificationMarking: ${classificationMarking}, family: ${family}, cycleType: ${cycleType}, characteristicType: ${characteristicType}, manufacturerOrgId: ${manufacturerOrgId}, specificImpulse: ${specificImpulse}, burnTime: ${burnTime}, seaLevelThrust: ${seaLevelThrust}, vacuumThrust: ${vacuumThrust}, chamberPressure: ${chamberPressure}, nozzleExpansionRatio: ${nozzleExpansionRatio}, maxFirings: ${maxFirings}, propellant: ${propellant}, oxidizer: ${oxidizer}, notes: ${notes}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, tags: ${tags}}';
  }
}

class _EngineDetailsIngestReader extends fb.TableReader<EngineDetailsIngest> {
  const _EngineDetailsIngestReader();

  @override
  EngineDetailsIngest createObject(fb.BufferContext bc, int offset) => 
    EngineDetailsIngest._(bc, offset);
}

class EngineDetailsIngestBuilder {
  EngineDetailsIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(24);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdEngineOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addFamilyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addCycleTypeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCharacteristicTypeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addSpecificImpulse(double? specificImpulse) {
    fbBuilder.addFloat64(7, specificImpulse);
    return fbBuilder.offset;
  }
  int addBurnTime(double? burnTime) {
    fbBuilder.addFloat64(8, burnTime);
    return fbBuilder.offset;
  }
  int addSeaLevelThrust(double? seaLevelThrust) {
    fbBuilder.addFloat64(9, seaLevelThrust);
    return fbBuilder.offset;
  }
  int addVacuumThrust(double? vacuumThrust) {
    fbBuilder.addFloat64(10, vacuumThrust);
    return fbBuilder.offset;
  }
  int addChamberPressure(double? chamberPressure) {
    fbBuilder.addFloat64(11, chamberPressure);
    return fbBuilder.offset;
  }
  int addNozzleExpansionRatio(double? nozzleExpansionRatio) {
    fbBuilder.addFloat64(12, nozzleExpansionRatio);
    return fbBuilder.offset;
  }
  int addMaxFirings(int? maxFirings) {
    fbBuilder.addInt32(13, maxFirings);
    return fbBuilder.offset;
  }
  int addPropellantOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addOxidizerOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addDataMode(EngineDetailsIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(22, dataMode?.value);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EngineDetailsIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idEngine;
  final String? _classificationMarking;
  final String? _family;
  final String? _cycleType;
  final String? _characteristicType;
  final String? _manufacturerOrgId;
  final double? _specificImpulse;
  final double? _burnTime;
  final double? _seaLevelThrust;
  final double? _vacuumThrust;
  final double? _chamberPressure;
  final double? _nozzleExpansionRatio;
  final int? _maxFirings;
  final String? _propellant;
  final String? _oxidizer;
  final String? _notes;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final EngineDetailsIngestDataModeEnum? _dataMode;
  final List<String>? _tags;

  EngineDetailsIngestObjectBuilder({
    String? id,
    String? idEngine,
    String? classificationMarking,
    String? family,
    String? cycleType,
    String? characteristicType,
    String? manufacturerOrgId,
    double? specificImpulse,
    double? burnTime,
    double? seaLevelThrust,
    double? vacuumThrust,
    double? chamberPressure,
    double? nozzleExpansionRatio,
    int? maxFirings,
    String? propellant,
    String? oxidizer,
    String? notes,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    EngineDetailsIngestDataModeEnum? dataMode,
    List<String>? tags,
  })
      : _id = id,
        _idEngine = idEngine,
        _classificationMarking = classificationMarking,
        _family = family,
        _cycleType = cycleType,
        _characteristicType = characteristicType,
        _manufacturerOrgId = manufacturerOrgId,
        _specificImpulse = specificImpulse,
        _burnTime = burnTime,
        _seaLevelThrust = seaLevelThrust,
        _vacuumThrust = vacuumThrust,
        _chamberPressure = chamberPressure,
        _nozzleExpansionRatio = nozzleExpansionRatio,
        _maxFirings = maxFirings,
        _propellant = propellant,
        _oxidizer = oxidizer,
        _notes = notes,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _tags = tags;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idEngineOffset = _idEngine == null ? null
        : fbBuilder.writeString(_idEngine!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? familyOffset = _family == null ? null
        : fbBuilder.writeString(_family!);
    final int? cycleTypeOffset = _cycleType == null ? null
        : fbBuilder.writeString(_cycleType!);
    final int? characteristicTypeOffset = _characteristicType == null ? null
        : fbBuilder.writeString(_characteristicType!);
    final int? manufacturerOrgIdOffset = _manufacturerOrgId == null ? null
        : fbBuilder.writeString(_manufacturerOrgId!);
    final int? propellantOffset = _propellant == null ? null
        : fbBuilder.writeString(_propellant!);
    final int? oxidizerOffset = _oxidizer == null ? null
        : fbBuilder.writeString(_oxidizer!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(24);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idEngineOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, familyOffset);
    fbBuilder.addOffset(4, cycleTypeOffset);
    fbBuilder.addOffset(5, characteristicTypeOffset);
    fbBuilder.addOffset(6, manufacturerOrgIdOffset);
    fbBuilder.addFloat64(7, _specificImpulse);
    fbBuilder.addFloat64(8, _burnTime);
    fbBuilder.addFloat64(9, _seaLevelThrust);
    fbBuilder.addFloat64(10, _vacuumThrust);
    fbBuilder.addFloat64(11, _chamberPressure);
    fbBuilder.addFloat64(12, _nozzleExpansionRatio);
    fbBuilder.addInt32(13, _maxFirings);
    fbBuilder.addOffset(14, propellantOffset);
    fbBuilder.addOffset(15, oxidizerOffset);
    fbBuilder.addOffset(16, notesOffset);
    fbBuilder.addOffset(17, createdAtOffset);
    fbBuilder.addOffset(18, createdByOffset);
    fbBuilder.addOffset(19, sourceOffset);
    fbBuilder.addOffset(20, originOffset);
    fbBuilder.addOffset(21, origNetworkOffset);
    fbBuilder.addInt8(22, _dataMode?.value);
    fbBuilder.addOffset(23, tagsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
