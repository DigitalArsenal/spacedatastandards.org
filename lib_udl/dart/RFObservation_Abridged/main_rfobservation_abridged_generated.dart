// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library rfobservation_abridged;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './main_generated.dart' as ;

///  Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).
class RfobservationAbridged {
  RfobservationAbridged._(this._bc, this._bcOffset);
  factory RfobservationAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RfobservationAbridged> reader = _RfobservationAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: RFOBSERVATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Ob detection time in ISO 8601 UTC with microsecond precision.
  ///  Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get obTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the target on-orbit object, if correlated.
  ///  Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Unique identifier of the reporting sensor.
  ///  Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
  ///  Example: RF
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: 32258
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  Optional identifier to indicate the specific tasking which produced this observation.
  ///  Example: TASK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get taskId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Optional identifier of the track to which this observation belongs.
  ///  Example: TRACK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trackId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: ORIG-OBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: ORIG-SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: False
  ///  Constraints: No constraints specified.
  bool get uct => const fb.BoolReader().vTableGet(_bc, _bcOffset, 28, false);
  ///  Optional identifier provided by observation source to indicate the transponder used for this measurement.
  ///  Example: TRANSPONDER-A
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transponder => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  azimuth angle in degrees and J2000 coordinate frame.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get azimuth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  One sigma uncertainty in the azimuth angle measurement, in degrees.
  ///  Example: 2.1
  ///  Constraints: No constraints specified.
  double get azimuthUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Rate of change of the azimuth in degrees per second.
  ///  Example: 1.1
  ///  Constraints: No constraints specified.
  double get azimuthRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  elevation in degrees and J2000 coordinate frame.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get elevation => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  One sigma uncertainty in the elevation angle measurement, in degrees.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get elevationUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Rate of change of the elevation in degrees per second.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get elevationRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Target range in km.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get range => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  One sigma uncertainty in the range measurement, in kilometers.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get rangeUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Rate of change of the range in km/sec.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get rangeRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  One sigma uncertainty in the range rate measurement, in kilometers/second.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get rangeRateUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Target track or apparent range in km.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get trackRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  ///  Example: 45.2
  ///  Constraints: No constraints specified.
  double get senlat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: 80.3
  ///  Constraints: No constraints specified.
  double get senlon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get senalt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  ELINT notation.
  ///  Example: Ex. ELINT
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get elnot => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Center carrier frequency in Hz.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get frequency => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Nominal or expected center carrier frequency in Hz.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get nominalFrequency => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Start carrier frequency in Hz.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get startFrequency => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  End carrier frequency in Hz.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get endFrequency => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Measured power of the center carrier frequency in dBW.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get relativeCarrierPower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Measured spectrum analyzer power of the center carrier frequency in dBW.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get spectrumAnalyzerPower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get relativeNoiseFloor => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  Reference signal level, in dBW.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get referenceLevel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get pgri => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Confidence in the signal and its measurements and characterization.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get confidence => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  True if the signal is incoming, false if outgoing.
  ///  Example: False
  ///  Constraints: No constraints specified.
  bool get incoming => const fb.BoolReader().vTableGet(_bc, _bcOffset, 82, false);
  ///  Switch Point of the RFObservation record.
  ///  Example: 10
  ///  Constraints: No constraints specified.
  int get switchPoint => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 84, 0);
  ///  Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get baudRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  Signal to noise ratio, in dB.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get snr => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  Nominal or expected signal to noise ratio, in dB.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get nominalSnr => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  The antenna pointing dependent polarizer angle, in degrees.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get polarity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
  ///  Example: H
  ///  Constraints: Minimum length = 0, Maximum length = 16
  RfobservationAbridgedPolarityTypeEnum get polarityType => RfobservationAbridgedPolarityTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 94, 0));
  ///  Channel of the RFObservation record.
  ///  Example: 10
  ///  Constraints: No constraints specified.
  int get channel => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 96, 0);
  ///  Measured carrier power over noise (dBW/Hz).
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get powerOverNoise => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  Expected carrier power over noise (dBW/Hz).
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get nominalPowerOverNoise => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  Measured bandwidth in Hz.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get bandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  Expected bandwidth in Hz.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get nominalBandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  Resolution bandwidth in Hz.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get resolutionBandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  Video bandwidth in Hz.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get videoBandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  Measured Equivalent Isotopically Radiated Power in dBW.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get eirp => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  Expected Equivalent Isotopically Radiated Power in dBW.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get nominalEirp => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  Minimum measured PSD value of the trace in dBW.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get minPSD => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  Maximum measured PSD value of the trace in dBW.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get maxPSD => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 116, 0.0);
  ///  Frequency Shift of the RFObservation record.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get frequencyShift => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  ///  Peak of the RFObservation record.
  ///  Example: False
  ///  Constraints: No constraints specified.
  bool get peak => const fb.BoolReader().vTableGet(_bc, _bcOffset, 120, false);
  ///  Antenna name of the RFObservation record.
  ///  Example: Antenna1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get antennaName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 122);
  ///  Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
  ///  Example: DETECTED
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get detectionStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 124);
  ///  Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
  ///  Example: SURVEY
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get collectionMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 126);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileURI => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 128);
  ///  Source of the data.
  ///  Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 130);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 132);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
  ///  Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  RfobservationAbridgedDataModeEnum get dataMode => RfobservationAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 134, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 136);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 138);
  ///  Noise power density, in dBW-Hz.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get noisePwrDensity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 140, 0.0);
  ///  Carrier standard (e.g. DVB-S2, 802.11g, etc.).
  ///  Example: DVB-S2
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get carrierStandard => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 142);
  ///  Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
  ///  Example: Auto
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get modulation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 144);
  ///  Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
  ///  Example: 7
  ///  Constraints: No constraints specified.
  int get innerCodingRate => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 146, 0);
  ///  Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
  ///  Example: 4
  ///  Constraints: No constraints specified.
  int get outerCodingRate => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 148, 0);
  ///  Transmit pulse shaping filter typ (e.g. RRC).
  ///  Example: RRC
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get transmitFilterType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 150);
  ///  Transmit pulse shaping filter roll-off value.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get transmitFilterRollOff => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 152, 0.0);
  ///  Symbol to noise ratio, in dB.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get symbolToNoiseRatio => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 154, 0.0);
  ///  The ratio of bit errors per number of received bits.
  ///  Example: 10.1
  ///  Constraints: No constraints specified.
  double get bitErrorRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 156, 0.0);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 158);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 160);
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: descriptor
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get descriptor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 162);
  ///  Optional URL containing additional information on this observation.
  ///  Example: https://some-url
  ///  Constraints: Minimum length = 0, Maximum length = 2048
  String? get url => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 164);

  @override
  String toString() {
    return 'RfobservationAbridged{id: ${id}, classificationMarking: ${classificationMarking}, obTime: ${obTime}, idOnOrbit: ${idOnOrbit}, idSensor: ${idSensor}, type: ${type}, satNo: ${satNo}, taskId: ${taskId}, transactionId: ${transactionId}, trackId: ${trackId}, origObjectId: ${origObjectId}, origSensorId: ${origSensorId}, uct: ${uct}, transponder: ${transponder}, azimuth: ${azimuth}, azimuthUnc: ${azimuthUnc}, azimuthRate: ${azimuthRate}, elevation: ${elevation}, elevationUnc: ${elevationUnc}, elevationRate: ${elevationRate}, range: ${range}, rangeUnc: ${rangeUnc}, rangeRate: ${rangeRate}, rangeRateUnc: ${rangeRateUnc}, trackRange: ${trackRange}, senlat: ${senlat}, senlon: ${senlon}, senalt: ${senalt}, elnot: ${elnot}, frequency: ${frequency}, nominalFrequency: ${nominalFrequency}, startFrequency: ${startFrequency}, endFrequency: ${endFrequency}, relativeCarrierPower: ${relativeCarrierPower}, spectrumAnalyzerPower: ${spectrumAnalyzerPower}, relativeNoiseFloor: ${relativeNoiseFloor}, referenceLevel: ${referenceLevel}, pgri: ${pgri}, confidence: ${confidence}, incoming: ${incoming}, switchPoint: ${switchPoint}, baudRate: ${baudRate}, snr: ${snr}, nominalSnr: ${nominalSnr}, polarity: ${polarity}, polarityType: ${polarityType}, channel: ${channel}, powerOverNoise: ${powerOverNoise}, nominalPowerOverNoise: ${nominalPowerOverNoise}, bandwidth: ${bandwidth}, nominalBandwidth: ${nominalBandwidth}, resolutionBandwidth: ${resolutionBandwidth}, videoBandwidth: ${videoBandwidth}, eirp: ${eirp}, nominalEirp: ${nominalEirp}, minPSD: ${minPSD}, maxPSD: ${maxPSD}, frequencyShift: ${frequencyShift}, peak: ${peak}, antennaName: ${antennaName}, detectionStatus: ${detectionStatus}, collectionMode: ${collectionMode}, rawFileURI: ${rawFileURI}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, noisePwrDensity: ${noisePwrDensity}, carrierStandard: ${carrierStandard}, modulation: ${modulation}, innerCodingRate: ${innerCodingRate}, outerCodingRate: ${outerCodingRate}, transmitFilterType: ${transmitFilterType}, transmitFilterRollOff: ${transmitFilterRollOff}, symbolToNoiseRatio: ${symbolToNoiseRatio}, bitErrorRate: ${bitErrorRate}, origNetwork: ${origNetwork}, sourceDL: ${sourceDL}, descriptor: ${descriptor}, url: ${url}}';
  }
}

class _RfobservationAbridgedReader extends fb.TableReader<RfobservationAbridged> {
  const _RfobservationAbridgedReader();

  @override
  RfobservationAbridged createObject(fb.BufferContext bc, int offset) => 
    RfobservationAbridged._(bc, offset);
}

class RfobservationAbridgedBuilder {
  RfobservationAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(81);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addObTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(6, satNo);
    return fbBuilder.offset;
  }
  int addTaskIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addTrackIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addUct(bool? uct) {
    fbBuilder.addBool(12, uct);
    return fbBuilder.offset;
  }
  int addTransponderOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addAzimuth(double? azimuth) {
    fbBuilder.addFloat64(14, azimuth);
    return fbBuilder.offset;
  }
  int addAzimuthUnc(double? azimuthUnc) {
    fbBuilder.addFloat64(15, azimuthUnc);
    return fbBuilder.offset;
  }
  int addAzimuthRate(double? azimuthRate) {
    fbBuilder.addFloat64(16, azimuthRate);
    return fbBuilder.offset;
  }
  int addElevation(double? elevation) {
    fbBuilder.addFloat64(17, elevation);
    return fbBuilder.offset;
  }
  int addElevationUnc(double? elevationUnc) {
    fbBuilder.addFloat64(18, elevationUnc);
    return fbBuilder.offset;
  }
  int addElevationRate(double? elevationRate) {
    fbBuilder.addFloat64(19, elevationRate);
    return fbBuilder.offset;
  }
  int addRange(double? range) {
    fbBuilder.addFloat64(20, range);
    return fbBuilder.offset;
  }
  int addRangeUnc(double? rangeUnc) {
    fbBuilder.addFloat64(21, rangeUnc);
    return fbBuilder.offset;
  }
  int addRangeRate(double? rangeRate) {
    fbBuilder.addFloat64(22, rangeRate);
    return fbBuilder.offset;
  }
  int addRangeRateUnc(double? rangeRateUnc) {
    fbBuilder.addFloat64(23, rangeRateUnc);
    return fbBuilder.offset;
  }
  int addTrackRange(double? trackRange) {
    fbBuilder.addFloat64(24, trackRange);
    return fbBuilder.offset;
  }
  int addSenlat(double? senlat) {
    fbBuilder.addFloat64(25, senlat);
    return fbBuilder.offset;
  }
  int addSenlon(double? senlon) {
    fbBuilder.addFloat64(26, senlon);
    return fbBuilder.offset;
  }
  int addSenalt(double? senalt) {
    fbBuilder.addFloat64(27, senalt);
    return fbBuilder.offset;
  }
  int addElnotOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addFrequency(double? frequency) {
    fbBuilder.addFloat64(29, frequency);
    return fbBuilder.offset;
  }
  int addNominalFrequency(double? nominalFrequency) {
    fbBuilder.addFloat64(30, nominalFrequency);
    return fbBuilder.offset;
  }
  int addStartFrequency(double? startFrequency) {
    fbBuilder.addFloat64(31, startFrequency);
    return fbBuilder.offset;
  }
  int addEndFrequency(double? endFrequency) {
    fbBuilder.addFloat64(32, endFrequency);
    return fbBuilder.offset;
  }
  int addRelativeCarrierPower(double? relativeCarrierPower) {
    fbBuilder.addFloat64(33, relativeCarrierPower);
    return fbBuilder.offset;
  }
  int addSpectrumAnalyzerPower(double? spectrumAnalyzerPower) {
    fbBuilder.addFloat64(34, spectrumAnalyzerPower);
    return fbBuilder.offset;
  }
  int addRelativeNoiseFloor(double? relativeNoiseFloor) {
    fbBuilder.addFloat64(35, relativeNoiseFloor);
    return fbBuilder.offset;
  }
  int addReferenceLevel(double? referenceLevel) {
    fbBuilder.addFloat64(36, referenceLevel);
    return fbBuilder.offset;
  }
  int addPgri(double? pgri) {
    fbBuilder.addFloat64(37, pgri);
    return fbBuilder.offset;
  }
  int addConfidence(double? confidence) {
    fbBuilder.addFloat64(38, confidence);
    return fbBuilder.offset;
  }
  int addIncoming(bool? incoming) {
    fbBuilder.addBool(39, incoming);
    return fbBuilder.offset;
  }
  int addSwitchPoint(int? switchPoint) {
    fbBuilder.addInt32(40, switchPoint);
    return fbBuilder.offset;
  }
  int addBaudRate(double? baudRate) {
    fbBuilder.addFloat64(41, baudRate);
    return fbBuilder.offset;
  }
  int addSnr(double? snr) {
    fbBuilder.addFloat64(42, snr);
    return fbBuilder.offset;
  }
  int addNominalSnr(double? nominalSnr) {
    fbBuilder.addFloat64(43, nominalSnr);
    return fbBuilder.offset;
  }
  int addPolarity(double? polarity) {
    fbBuilder.addFloat64(44, polarity);
    return fbBuilder.offset;
  }
  int addPolarityType(RfobservationAbridgedPolarityTypeEnum? polarityType) {
    fbBuilder.addInt8(45, polarityType?.value);
    return fbBuilder.offset;
  }
  int addChannel(int? channel) {
    fbBuilder.addInt32(46, channel);
    return fbBuilder.offset;
  }
  int addPowerOverNoise(double? powerOverNoise) {
    fbBuilder.addFloat64(47, powerOverNoise);
    return fbBuilder.offset;
  }
  int addNominalPowerOverNoise(double? nominalPowerOverNoise) {
    fbBuilder.addFloat64(48, nominalPowerOverNoise);
    return fbBuilder.offset;
  }
  int addBandwidth(double? bandwidth) {
    fbBuilder.addFloat64(49, bandwidth);
    return fbBuilder.offset;
  }
  int addNominalBandwidth(double? nominalBandwidth) {
    fbBuilder.addFloat64(50, nominalBandwidth);
    return fbBuilder.offset;
  }
  int addResolutionBandwidth(double? resolutionBandwidth) {
    fbBuilder.addFloat64(51, resolutionBandwidth);
    return fbBuilder.offset;
  }
  int addVideoBandwidth(double? videoBandwidth) {
    fbBuilder.addFloat64(52, videoBandwidth);
    return fbBuilder.offset;
  }
  int addEirp(double? eirp) {
    fbBuilder.addFloat64(53, eirp);
    return fbBuilder.offset;
  }
  int addNominalEirp(double? nominalEirp) {
    fbBuilder.addFloat64(54, nominalEirp);
    return fbBuilder.offset;
  }
  int addMinPsd(double? minPsd) {
    fbBuilder.addFloat64(55, minPsd);
    return fbBuilder.offset;
  }
  int addMaxPsd(double? maxPsd) {
    fbBuilder.addFloat64(56, maxPsd);
    return fbBuilder.offset;
  }
  int addFrequencyShift(double? frequencyShift) {
    fbBuilder.addFloat64(57, frequencyShift);
    return fbBuilder.offset;
  }
  int addPeak(bool? peak) {
    fbBuilder.addBool(58, peak);
    return fbBuilder.offset;
  }
  int addAntennaNameOffset(int? offset) {
    fbBuilder.addOffset(59, offset);
    return fbBuilder.offset;
  }
  int addDetectionStatusOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }
  int addCollectionModeOffset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(64, offset);
    return fbBuilder.offset;
  }
  int addDataMode(RfobservationAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(65, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(66, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(67, offset);
    return fbBuilder.offset;
  }
  int addNoisePwrDensity(double? noisePwrDensity) {
    fbBuilder.addFloat64(68, noisePwrDensity);
    return fbBuilder.offset;
  }
  int addCarrierStandardOffset(int? offset) {
    fbBuilder.addOffset(69, offset);
    return fbBuilder.offset;
  }
  int addModulationOffset(int? offset) {
    fbBuilder.addOffset(70, offset);
    return fbBuilder.offset;
  }
  int addInnerCodingRate(int? innerCodingRate) {
    fbBuilder.addInt32(71, innerCodingRate);
    return fbBuilder.offset;
  }
  int addOuterCodingRate(int? outerCodingRate) {
    fbBuilder.addInt32(72, outerCodingRate);
    return fbBuilder.offset;
  }
  int addTransmitFilterTypeOffset(int? offset) {
    fbBuilder.addOffset(73, offset);
    return fbBuilder.offset;
  }
  int addTransmitFilterRollOff(double? transmitFilterRollOff) {
    fbBuilder.addFloat64(74, transmitFilterRollOff);
    return fbBuilder.offset;
  }
  int addSymbolToNoiseRatio(double? symbolToNoiseRatio) {
    fbBuilder.addFloat64(75, symbolToNoiseRatio);
    return fbBuilder.offset;
  }
  int addBitErrorRate(double? bitErrorRate) {
    fbBuilder.addFloat64(76, bitErrorRate);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(77, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(78, offset);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(79, offset);
    return fbBuilder.offset;
  }
  int addUrlOffset(int? offset) {
    fbBuilder.addOffset(80, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RfobservationAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _obTime;
  final String? _idOnOrbit;
  final String? _idSensor;
  final String? _type;
  final int? _satNo;
  final String? _taskId;
  final String? _transactionId;
  final String? _trackId;
  final String? _origObjectId;
  final String? _origSensorId;
  final bool? _uct;
  final String? _transponder;
  final double? _azimuth;
  final double? _azimuthUnc;
  final double? _azimuthRate;
  final double? _elevation;
  final double? _elevationUnc;
  final double? _elevationRate;
  final double? _range;
  final double? _rangeUnc;
  final double? _rangeRate;
  final double? _rangeRateUnc;
  final double? _trackRange;
  final double? _senlat;
  final double? _senlon;
  final double? _senalt;
  final String? _elnot;
  final double? _frequency;
  final double? _nominalFrequency;
  final double? _startFrequency;
  final double? _endFrequency;
  final double? _relativeCarrierPower;
  final double? _spectrumAnalyzerPower;
  final double? _relativeNoiseFloor;
  final double? _referenceLevel;
  final double? _pgri;
  final double? _confidence;
  final bool? _incoming;
  final int? _switchPoint;
  final double? _baudRate;
  final double? _snr;
  final double? _nominalSnr;
  final double? _polarity;
  final RfobservationAbridgedPolarityTypeEnum? _polarityType;
  final int? _channel;
  final double? _powerOverNoise;
  final double? _nominalPowerOverNoise;
  final double? _bandwidth;
  final double? _nominalBandwidth;
  final double? _resolutionBandwidth;
  final double? _videoBandwidth;
  final double? _eirp;
  final double? _nominalEirp;
  final double? _minPsd;
  final double? _maxPsd;
  final double? _frequencyShift;
  final bool? _peak;
  final String? _antennaName;
  final String? _detectionStatus;
  final String? _collectionMode;
  final String? _rawFileUri;
  final String? _source;
  final String? _origin;
  final RfobservationAbridgedDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final double? _noisePwrDensity;
  final String? _carrierStandard;
  final String? _modulation;
  final int? _innerCodingRate;
  final int? _outerCodingRate;
  final String? _transmitFilterType;
  final double? _transmitFilterRollOff;
  final double? _symbolToNoiseRatio;
  final double? _bitErrorRate;
  final String? _origNetwork;
  final String? _sourceDl;
  final String? _descriptor;
  final String? _url;

  RfobservationAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? obTime,
    String? idOnOrbit,
    String? idSensor,
    String? type,
    int? satNo,
    String? taskId,
    String? transactionId,
    String? trackId,
    String? origObjectId,
    String? origSensorId,
    bool? uct,
    String? transponder,
    double? azimuth,
    double? azimuthUnc,
    double? azimuthRate,
    double? elevation,
    double? elevationUnc,
    double? elevationRate,
    double? range,
    double? rangeUnc,
    double? rangeRate,
    double? rangeRateUnc,
    double? trackRange,
    double? senlat,
    double? senlon,
    double? senalt,
    String? elnot,
    double? frequency,
    double? nominalFrequency,
    double? startFrequency,
    double? endFrequency,
    double? relativeCarrierPower,
    double? spectrumAnalyzerPower,
    double? relativeNoiseFloor,
    double? referenceLevel,
    double? pgri,
    double? confidence,
    bool? incoming,
    int? switchPoint,
    double? baudRate,
    double? snr,
    double? nominalSnr,
    double? polarity,
    RfobservationAbridgedPolarityTypeEnum? polarityType,
    int? channel,
    double? powerOverNoise,
    double? nominalPowerOverNoise,
    double? bandwidth,
    double? nominalBandwidth,
    double? resolutionBandwidth,
    double? videoBandwidth,
    double? eirp,
    double? nominalEirp,
    double? minPsd,
    double? maxPsd,
    double? frequencyShift,
    bool? peak,
    String? antennaName,
    String? detectionStatus,
    String? collectionMode,
    String? rawFileUri,
    String? source,
    String? origin,
    RfobservationAbridgedDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    double? noisePwrDensity,
    String? carrierStandard,
    String? modulation,
    int? innerCodingRate,
    int? outerCodingRate,
    String? transmitFilterType,
    double? transmitFilterRollOff,
    double? symbolToNoiseRatio,
    double? bitErrorRate,
    String? origNetwork,
    String? sourceDl,
    String? descriptor,
    String? url,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _obTime = obTime,
        _idOnOrbit = idOnOrbit,
        _idSensor = idSensor,
        _type = type,
        _satNo = satNo,
        _taskId = taskId,
        _transactionId = transactionId,
        _trackId = trackId,
        _origObjectId = origObjectId,
        _origSensorId = origSensorId,
        _uct = uct,
        _transponder = transponder,
        _azimuth = azimuth,
        _azimuthUnc = azimuthUnc,
        _azimuthRate = azimuthRate,
        _elevation = elevation,
        _elevationUnc = elevationUnc,
        _elevationRate = elevationRate,
        _range = range,
        _rangeUnc = rangeUnc,
        _rangeRate = rangeRate,
        _rangeRateUnc = rangeRateUnc,
        _trackRange = trackRange,
        _senlat = senlat,
        _senlon = senlon,
        _senalt = senalt,
        _elnot = elnot,
        _frequency = frequency,
        _nominalFrequency = nominalFrequency,
        _startFrequency = startFrequency,
        _endFrequency = endFrequency,
        _relativeCarrierPower = relativeCarrierPower,
        _spectrumAnalyzerPower = spectrumAnalyzerPower,
        _relativeNoiseFloor = relativeNoiseFloor,
        _referenceLevel = referenceLevel,
        _pgri = pgri,
        _confidence = confidence,
        _incoming = incoming,
        _switchPoint = switchPoint,
        _baudRate = baudRate,
        _snr = snr,
        _nominalSnr = nominalSnr,
        _polarity = polarity,
        _polarityType = polarityType,
        _channel = channel,
        _powerOverNoise = powerOverNoise,
        _nominalPowerOverNoise = nominalPowerOverNoise,
        _bandwidth = bandwidth,
        _nominalBandwidth = nominalBandwidth,
        _resolutionBandwidth = resolutionBandwidth,
        _videoBandwidth = videoBandwidth,
        _eirp = eirp,
        _nominalEirp = nominalEirp,
        _minPsd = minPsd,
        _maxPsd = maxPsd,
        _frequencyShift = frequencyShift,
        _peak = peak,
        _antennaName = antennaName,
        _detectionStatus = detectionStatus,
        _collectionMode = collectionMode,
        _rawFileUri = rawFileUri,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _noisePwrDensity = noisePwrDensity,
        _carrierStandard = carrierStandard,
        _modulation = modulation,
        _innerCodingRate = innerCodingRate,
        _outerCodingRate = outerCodingRate,
        _transmitFilterType = transmitFilterType,
        _transmitFilterRollOff = transmitFilterRollOff,
        _symbolToNoiseRatio = symbolToNoiseRatio,
        _bitErrorRate = bitErrorRate,
        _origNetwork = origNetwork,
        _sourceDl = sourceDl,
        _descriptor = descriptor,
        _url = url;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? obTimeOffset = _obTime == null ? null
        : fbBuilder.writeString(_obTime!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? taskIdOffset = _taskId == null ? null
        : fbBuilder.writeString(_taskId!);
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? trackIdOffset = _trackId == null ? null
        : fbBuilder.writeString(_trackId!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? transponderOffset = _transponder == null ? null
        : fbBuilder.writeString(_transponder!);
    final int? elnotOffset = _elnot == null ? null
        : fbBuilder.writeString(_elnot!);
    final int? antennaNameOffset = _antennaName == null ? null
        : fbBuilder.writeString(_antennaName!);
    final int? detectionStatusOffset = _detectionStatus == null ? null
        : fbBuilder.writeString(_detectionStatus!);
    final int? collectionModeOffset = _collectionMode == null ? null
        : fbBuilder.writeString(_collectionMode!);
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? carrierStandardOffset = _carrierStandard == null ? null
        : fbBuilder.writeString(_carrierStandard!);
    final int? modulationOffset = _modulation == null ? null
        : fbBuilder.writeString(_modulation!);
    final int? transmitFilterTypeOffset = _transmitFilterType == null ? null
        : fbBuilder.writeString(_transmitFilterType!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? descriptorOffset = _descriptor == null ? null
        : fbBuilder.writeString(_descriptor!);
    final int? urlOffset = _url == null ? null
        : fbBuilder.writeString(_url!);
    fbBuilder.startTable(81);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, obTimeOffset);
    fbBuilder.addOffset(3, idOnOrbitOffset);
    fbBuilder.addOffset(4, idSensorOffset);
    fbBuilder.addOffset(5, typeOffset);
    fbBuilder.addInt32(6, _satNo);
    fbBuilder.addOffset(7, taskIdOffset);
    fbBuilder.addOffset(8, transactionIdOffset);
    fbBuilder.addOffset(9, trackIdOffset);
    fbBuilder.addOffset(10, origObjectIdOffset);
    fbBuilder.addOffset(11, origSensorIdOffset);
    fbBuilder.addBool(12, _uct);
    fbBuilder.addOffset(13, transponderOffset);
    fbBuilder.addFloat64(14, _azimuth);
    fbBuilder.addFloat64(15, _azimuthUnc);
    fbBuilder.addFloat64(16, _azimuthRate);
    fbBuilder.addFloat64(17, _elevation);
    fbBuilder.addFloat64(18, _elevationUnc);
    fbBuilder.addFloat64(19, _elevationRate);
    fbBuilder.addFloat64(20, _range);
    fbBuilder.addFloat64(21, _rangeUnc);
    fbBuilder.addFloat64(22, _rangeRate);
    fbBuilder.addFloat64(23, _rangeRateUnc);
    fbBuilder.addFloat64(24, _trackRange);
    fbBuilder.addFloat64(25, _senlat);
    fbBuilder.addFloat64(26, _senlon);
    fbBuilder.addFloat64(27, _senalt);
    fbBuilder.addOffset(28, elnotOffset);
    fbBuilder.addFloat64(29, _frequency);
    fbBuilder.addFloat64(30, _nominalFrequency);
    fbBuilder.addFloat64(31, _startFrequency);
    fbBuilder.addFloat64(32, _endFrequency);
    fbBuilder.addFloat64(33, _relativeCarrierPower);
    fbBuilder.addFloat64(34, _spectrumAnalyzerPower);
    fbBuilder.addFloat64(35, _relativeNoiseFloor);
    fbBuilder.addFloat64(36, _referenceLevel);
    fbBuilder.addFloat64(37, _pgri);
    fbBuilder.addFloat64(38, _confidence);
    fbBuilder.addBool(39, _incoming);
    fbBuilder.addInt32(40, _switchPoint);
    fbBuilder.addFloat64(41, _baudRate);
    fbBuilder.addFloat64(42, _snr);
    fbBuilder.addFloat64(43, _nominalSnr);
    fbBuilder.addFloat64(44, _polarity);
    fbBuilder.addInt8(45, _polarityType?.value);
    fbBuilder.addInt32(46, _channel);
    fbBuilder.addFloat64(47, _powerOverNoise);
    fbBuilder.addFloat64(48, _nominalPowerOverNoise);
    fbBuilder.addFloat64(49, _bandwidth);
    fbBuilder.addFloat64(50, _nominalBandwidth);
    fbBuilder.addFloat64(51, _resolutionBandwidth);
    fbBuilder.addFloat64(52, _videoBandwidth);
    fbBuilder.addFloat64(53, _eirp);
    fbBuilder.addFloat64(54, _nominalEirp);
    fbBuilder.addFloat64(55, _minPsd);
    fbBuilder.addFloat64(56, _maxPsd);
    fbBuilder.addFloat64(57, _frequencyShift);
    fbBuilder.addBool(58, _peak);
    fbBuilder.addOffset(59, antennaNameOffset);
    fbBuilder.addOffset(60, detectionStatusOffset);
    fbBuilder.addOffset(61, collectionModeOffset);
    fbBuilder.addOffset(62, rawFileUriOffset);
    fbBuilder.addOffset(63, sourceOffset);
    fbBuilder.addOffset(64, originOffset);
    fbBuilder.addInt8(65, _dataMode?.value);
    fbBuilder.addOffset(66, createdAtOffset);
    fbBuilder.addOffset(67, createdByOffset);
    fbBuilder.addFloat64(68, _noisePwrDensity);
    fbBuilder.addOffset(69, carrierStandardOffset);
    fbBuilder.addOffset(70, modulationOffset);
    fbBuilder.addInt32(71, _innerCodingRate);
    fbBuilder.addInt32(72, _outerCodingRate);
    fbBuilder.addOffset(73, transmitFilterTypeOffset);
    fbBuilder.addFloat64(74, _transmitFilterRollOff);
    fbBuilder.addFloat64(75, _symbolToNoiseRatio);
    fbBuilder.addFloat64(76, _bitErrorRate);
    fbBuilder.addOffset(77, origNetworkOffset);
    fbBuilder.addOffset(78, sourceDlOffset);
    fbBuilder.addOffset(79, descriptorOffset);
    fbBuilder.addOffset(80, urlOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
