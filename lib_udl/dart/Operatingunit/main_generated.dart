// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class OperatingunitDataModeEnum {
  final int value;
  const OperatingunitDataModeEnum._(this.value);

  factory OperatingunitDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OperatingunitDataModeEnum');
    }
    return result;
  }

  static OperatingunitDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : OperatingunitDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const OperatingunitDataModeEnum REAL = OperatingunitDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const OperatingunitDataModeEnum TEST = OperatingunitDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const OperatingunitDataModeEnum SIMULATED = OperatingunitDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const OperatingunitDataModeEnum EXERCISE = OperatingunitDataModeEnum._(3);
  static const Map<int, OperatingunitDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<OperatingunitDataModeEnum> reader = _OperatingunitDataModeEnumReader();

  @override
  String toString() {
    return 'OperatingunitDataModeEnum{value: $value}';
  }
}

class _OperatingunitDataModeEnumReader extends fb.Reader<OperatingunitDataModeEnum> {
  const _OperatingunitDataModeEnumReader();

  @override
  int get size => 1;

  @override
  OperatingunitDataModeEnum read(fb.BufferContext bc, int offset) =>
      OperatingunitDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.
class Operatingunit {
  Operatingunit._(this._bc, this._bcOffset);
  factory Operatingunit(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Operatingunit> reader = _OperatingunitReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: OPERATINGUNIT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idOperatingUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the operating unit record from the originating system.
  ///  Example: /// Example: 32100000000021
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get altOperatingUnitId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Name of the operating unit.
  ///  Example: /// Example: SOME_NAME
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Description of the operating unit.
  ///  Example: /// Example: Description of unit
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the location record for this operating unit.
  ///  Example: /// Example: LOCATION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idLocation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Unique identifier of the contact for this operating unit.
  ///  Example: /// Example: CONTACT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idContact => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Unique identifier of the organization record for this operating unit.
  ///  Example: /// Example: ORGANIZATION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOrganization => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.
  ///  Example: /// Example: AZXAZ12345
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get unitIdentifier => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: IQ
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
  ///  Example: /// Example: IZ
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get altCountryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  World Aeronautical Chart identifier for the area in which a designated operating unit is located.
  ///  Example: /// Example: 0427
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get wac => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: OPR
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get operStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: RDY
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get condition => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get conditionAvail => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  int get eval => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: EOB
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get fpa => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
  ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
  ///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
  ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///  PENDING: Track object which has not been evaluated.
  ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get ident => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: OTHR
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get allegiance => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
  ///  Example: /// Example: HL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get altAllegiance => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Location name for the coordinates.
  ///  Example: /// Example: LOCATION_NAME
  ///  Constraints: Minimum length = 0, Maximum length = 54
  String? get locName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: GR
  ///  Constraints: Minimum length = 0, Maximum length = 9
  String? get locReason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: NV
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get force => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.
  ///  Example: /// Example: FORCE-NAME
  ///  Constraints: Minimum length = 0, Maximum length = 54
  String? get forceName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: MIL
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get functRole => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: W6
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get msnPrimary => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: QK
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get msnPrimarySpecialty => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get masterUnit => const fb.BoolReader().vTableGet(_bc, _bcOffset, 58, false);
  ///  This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get stylizedUnit => const fb.BoolReader().vTableGet(_bc, _bcOffset, 60, false);
  ///  Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: 5
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get divCat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: SHIP
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get echelon => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: 68
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get echelonTier => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get fleetId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: ND
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get deployStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  The country code of the observed flag flown.
  ///  Example: /// Example: IZ
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get flagFlown => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: WGS
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get coordDatum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  "Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
  ///  Pos. 1-2.  Latitude Degrees     [00-90]
  ///  Pos. 3-4.  Latitude Minutes     [00-59]
  ///  Pos. 5-6.  Latitude Seconds     [00-59]
  ///  Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
  ///  Pos. 10. Latitude Hemisphere       [NS] 
  ///  Pos. 11-13. Longitude Degrees     [00-180] 
  ///  Pos. 14-15. Longitude Minutes     [00-59] 
  ///  Pos. 16-17. Longitude Seconds     [00-59] 
  ///  Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
  ///  Pos. 21. Longitude Hemisphere     [EW]
  ///  Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]".
  ///  Example: /// Example: 340000000N0430000000E
  ///  Constraints: Minimum length = 0, Maximum length = 21
  String? get coord => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Indicates the plus or minus error assessed against the method used to derive the coordinate.
  ///  Example: /// Example: 12.345
  ///  Constraints: No constraints specified.
  double get coordDerivAcc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
  ///  Example: /// Example: 123.45
  ///  Constraints: No constraints specified.
  double get elevMsl => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
  ///  Example: /// Example: 50
  ///  Constraints: No constraints specified.
  int get elevMslConfLvl => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 86, 0);
  ///  Indicates the plus or minus error assessed against the method used to derive the elevation.
  ///  Example: /// Example: 12.34
  ///  Constraints: No constraints specified.
  double get elevMslDerivAcc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  The distance between Mean Sea Level and a referenced ellipsoid.
  ///  Example: /// Example: 12.34
  ///  Constraints: No constraints specified.
  double get geoidalMslSep => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  "Indicates the grid system used in the development of the milGrid coordinates. Values are:
  ///  UPS - Universal Polar System
  ///  UTM - Universal Transverse Mercator".
  ///  Example: /// Example: UTM
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get milGridSys => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  ///  4Q (grid zone designator, GZD)
  ///  FJ (the 100,000-meter square identifier)
  ///  12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  ///  Example: /// Example: 4QFJ12345678
  ///  Constraints: Minimum length = 0, Maximum length = 15
  String? get milGrid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Universal Transverse Mercator (UTM) grid coordinates.
  ///  Pos. 1-2, UTM Zone Column   [01-60
  ///  Pos. 3, UTM Zone Row   [C-HJ-NP-X]
  ///  Pos. 4, UTM False Easting   [0-9]
  ///  Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
  ///  Pos. 10-11, UTM False Northing    [0-9][0-9]
  ///  Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
  ///  Example: /// Example: 19P4390691376966
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get utm => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
  ///  Example: /// Example: AL006
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get airDefArea => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: IZ07
  ///  Constraints: Minimum length = 0, Maximum length = 7
  String? get polSubdiv => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
  ///  Example: /// Example: SOGPU----------
  ///  Constraints: Minimum length = 0, Maximum length = 15
  String? get symCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
  ///  0 - Does not meet criteria above
  ///  1 - Primary importance to system
  ///  2 - Secondary importance to system
  ///  3 - Tertiary importance to system
  ///  O - Other. Explain in Remarks.
  ///  Example: /// Example: 1
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get classRating => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:
  ///  A - Active
  ///  I - Inactive
  ///  K - Acknowledged
  ///  L - Local
  ///  Q - A nominated (NOM) or Data Change Request (DCR) record
  ///  R - Production reduced by CMD decision
  ///  W - Working Record.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get recStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
  ///  Example: /// Example: 2008-06-10
  ///  Constraints: No constraints specified.
  String? get reviewDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Responsible Producer - Organization that is responsible for the maintenance of the record.
  ///  Example: /// Example: RT
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get resProd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);
  ///  The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: Provider Reference Documentation
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get referenceDoc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get operatingUnitRemarks => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 114);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 120);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 122);
  ///  Source of the data.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 124);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 126);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  OperatingunitDataModeEnum get dataMode => OperatingunitDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 128, 0));
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get organization => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 130);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get location => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 132);

  @override
  String toString() {
    return 'Operatingunit{idOperatingUnit: ${idOperatingUnit}, classificationMarking: ${classificationMarking}, altOperatingUnitId: ${altOperatingUnitId}, name: ${name}, description: ${description}, idLocation: ${idLocation}, idContact: ${idContact}, idOrganization: ${idOrganization}, unitIdentifier: ${unitIdentifier}, countryCode: ${countryCode}, altCountryCode: ${altCountryCode}, wac: ${wac}, operStatus: ${operStatus}, condition: ${condition}, conditionAvail: ${conditionAvail}, eval: ${eval}, fpa: ${fpa}, ident: ${ident}, allegiance: ${allegiance}, altAllegiance: ${altAllegiance}, locName: ${locName}, locReason: ${locReason}, force: ${force}, forceName: ${forceName}, functRole: ${functRole}, msnPrimary: ${msnPrimary}, msnPrimarySpecialty: ${msnPrimarySpecialty}, masterUnit: ${masterUnit}, stylizedUnit: ${stylizedUnit}, divCat: ${divCat}, echelon: ${echelon}, echelonTier: ${echelonTier}, fleetId: ${fleetId}, deployStatus: ${deployStatus}, flagFlown: ${flagFlown}, coordDatum: ${coordDatum}, coord: ${coord}, coordDerivAcc: ${coordDerivAcc}, lat: ${lat}, lon: ${lon}, elevMsl: ${elevMsl}, elevMslConfLvl: ${elevMslConfLvl}, elevMslDerivAcc: ${elevMslDerivAcc}, geoidalMslSep: ${geoidalMslSep}, milGridSys: ${milGridSys}, milGrid: ${milGrid}, utm: ${utm}, airDefArea: ${airDefArea}, polSubdiv: ${polSubdiv}, symCode: ${symCode}, classRating: ${classRating}, recStatus: ${recStatus}, reviewDate: ${reviewDate}, resProd: ${resProd}, referenceDoc: ${referenceDoc}, operatingUnitRemarks: ${operatingUnitRemarks}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, organization: ${organization}, location: ${location}}';
  }
}

class _OperatingunitReader extends fb.TableReader<Operatingunit> {
  const _OperatingunitReader();

  @override
  Operatingunit createObject(fb.BufferContext bc, int offset) => 
    Operatingunit._(bc, offset);
}

class OperatingunitBuilder {
  OperatingunitBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(65);
  }

  int addIdOperatingUnitOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAltOperatingUnitIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdLocationOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addIdContactOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addIdOrganizationOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addUnitIdentifierOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addAltCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addWacOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addOperStatusOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addConditionOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addConditionAvailOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addEval(int? eval) {
    fbBuilder.addInt32(15, eval);
    return fbBuilder.offset;
  }
  int addFpaOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addIdentOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addAllegianceOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addAltAllegianceOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addLocNameOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addLocReasonOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addForceOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addForceNameOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addFunctRoleOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addMsnPrimaryOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addMsnPrimarySpecialtyOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addMasterUnit(bool? masterUnit) {
    fbBuilder.addBool(27, masterUnit);
    return fbBuilder.offset;
  }
  int addStylizedUnit(bool? stylizedUnit) {
    fbBuilder.addBool(28, stylizedUnit);
    return fbBuilder.offset;
  }
  int addDivCatOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addEchelonOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addEchelonTierOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addFleetIdOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addDeployStatusOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addFlagFlownOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addCoordDatumOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addCoordOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addCoordDerivAcc(double? coordDerivAcc) {
    fbBuilder.addFloat64(37, coordDerivAcc);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(38, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(39, lon);
    return fbBuilder.offset;
  }
  int addElevMsl(double? elevMsl) {
    fbBuilder.addFloat64(40, elevMsl);
    return fbBuilder.offset;
  }
  int addElevMslConfLvl(int? elevMslConfLvl) {
    fbBuilder.addInt32(41, elevMslConfLvl);
    return fbBuilder.offset;
  }
  int addElevMslDerivAcc(double? elevMslDerivAcc) {
    fbBuilder.addFloat64(42, elevMslDerivAcc);
    return fbBuilder.offset;
  }
  int addGeoidalMslSep(double? geoidalMslSep) {
    fbBuilder.addFloat64(43, geoidalMslSep);
    return fbBuilder.offset;
  }
  int addMilGridSysOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addMilGridOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addUtmOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addAirDefAreaOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addPolSubdivOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addSymCodeOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addClassRatingOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addRecStatusOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addReviewDateOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addResProdOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addReferenceDocOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addOperatingUnitRemarksOffset(int? offset) {
    fbBuilder.addOffset(55, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(58, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(59, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addDataMode(OperatingunitDataModeEnum? dataMode) {
    fbBuilder.addInt8(62, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrganizationOffset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addLocationOffset(int? offset) {
    fbBuilder.addOffset(64, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OperatingunitObjectBuilder extends fb.ObjectBuilder {
  final String? _idOperatingUnit;
  final String? _classificationMarking;
  final String? _altOperatingUnitId;
  final String? _name;
  final String? _description;
  final String? _idLocation;
  final String? _idContact;
  final String? _idOrganization;
  final String? _unitIdentifier;
  final String? _countryCode;
  final String? _altCountryCode;
  final String? _wac;
  final String? _operStatus;
  final String? _condition;
  final String? _conditionAvail;
  final int? _eval;
  final String? _fpa;
  final String? _ident;
  final String? _allegiance;
  final String? _altAllegiance;
  final String? _locName;
  final String? _locReason;
  final String? _force;
  final String? _forceName;
  final String? _functRole;
  final String? _msnPrimary;
  final String? _msnPrimarySpecialty;
  final bool? _masterUnit;
  final bool? _stylizedUnit;
  final String? _divCat;
  final String? _echelon;
  final String? _echelonTier;
  final String? _fleetId;
  final String? _deployStatus;
  final String? _flagFlown;
  final String? _coordDatum;
  final String? _coord;
  final double? _coordDerivAcc;
  final double? _lat;
  final double? _lon;
  final double? _elevMsl;
  final int? _elevMslConfLvl;
  final double? _elevMslDerivAcc;
  final double? _geoidalMslSep;
  final String? _milGridSys;
  final String? _milGrid;
  final String? _utm;
  final String? _airDefArea;
  final String? _polSubdiv;
  final String? _symCode;
  final String? _classRating;
  final String? _recStatus;
  final String? _reviewDate;
  final String? _resProd;
  final String? _referenceDoc;
  final List<String>? _operatingUnitRemarks;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final OperatingunitDataModeEnum? _dataMode;
  final String? _organization;
  final String? _location;

  OperatingunitObjectBuilder({
    String? idOperatingUnit,
    String? classificationMarking,
    String? altOperatingUnitId,
    String? name,
    String? description,
    String? idLocation,
    String? idContact,
    String? idOrganization,
    String? unitIdentifier,
    String? countryCode,
    String? altCountryCode,
    String? wac,
    String? operStatus,
    String? condition,
    String? conditionAvail,
    int? eval,
    String? fpa,
    String? ident,
    String? allegiance,
    String? altAllegiance,
    String? locName,
    String? locReason,
    String? force,
    String? forceName,
    String? functRole,
    String? msnPrimary,
    String? msnPrimarySpecialty,
    bool? masterUnit,
    bool? stylizedUnit,
    String? divCat,
    String? echelon,
    String? echelonTier,
    String? fleetId,
    String? deployStatus,
    String? flagFlown,
    String? coordDatum,
    String? coord,
    double? coordDerivAcc,
    double? lat,
    double? lon,
    double? elevMsl,
    int? elevMslConfLvl,
    double? elevMslDerivAcc,
    double? geoidalMslSep,
    String? milGridSys,
    String? milGrid,
    String? utm,
    String? airDefArea,
    String? polSubdiv,
    String? symCode,
    String? classRating,
    String? recStatus,
    String? reviewDate,
    String? resProd,
    String? referenceDoc,
    List<String>? operatingUnitRemarks,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    OperatingunitDataModeEnum? dataMode,
    String? organization,
    String? location,
  })
      : _idOperatingUnit = idOperatingUnit,
        _classificationMarking = classificationMarking,
        _altOperatingUnitId = altOperatingUnitId,
        _name = name,
        _description = description,
        _idLocation = idLocation,
        _idContact = idContact,
        _idOrganization = idOrganization,
        _unitIdentifier = unitIdentifier,
        _countryCode = countryCode,
        _altCountryCode = altCountryCode,
        _wac = wac,
        _operStatus = operStatus,
        _condition = condition,
        _conditionAvail = conditionAvail,
        _eval = eval,
        _fpa = fpa,
        _ident = ident,
        _allegiance = allegiance,
        _altAllegiance = altAllegiance,
        _locName = locName,
        _locReason = locReason,
        _force = force,
        _forceName = forceName,
        _functRole = functRole,
        _msnPrimary = msnPrimary,
        _msnPrimarySpecialty = msnPrimarySpecialty,
        _masterUnit = masterUnit,
        _stylizedUnit = stylizedUnit,
        _divCat = divCat,
        _echelon = echelon,
        _echelonTier = echelonTier,
        _fleetId = fleetId,
        _deployStatus = deployStatus,
        _flagFlown = flagFlown,
        _coordDatum = coordDatum,
        _coord = coord,
        _coordDerivAcc = coordDerivAcc,
        _lat = lat,
        _lon = lon,
        _elevMsl = elevMsl,
        _elevMslConfLvl = elevMslConfLvl,
        _elevMslDerivAcc = elevMslDerivAcc,
        _geoidalMslSep = geoidalMslSep,
        _milGridSys = milGridSys,
        _milGrid = milGrid,
        _utm = utm,
        _airDefArea = airDefArea,
        _polSubdiv = polSubdiv,
        _symCode = symCode,
        _classRating = classRating,
        _recStatus = recStatus,
        _reviewDate = reviewDate,
        _resProd = resProd,
        _referenceDoc = referenceDoc,
        _operatingUnitRemarks = operatingUnitRemarks,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _organization = organization,
        _location = location;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOperatingUnitOffset = _idOperatingUnit == null ? null
        : fbBuilder.writeString(_idOperatingUnit!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? altOperatingUnitIdOffset = _altOperatingUnitId == null ? null
        : fbBuilder.writeString(_altOperatingUnitId!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? idLocationOffset = _idLocation == null ? null
        : fbBuilder.writeString(_idLocation!);
    final int? idContactOffset = _idContact == null ? null
        : fbBuilder.writeString(_idContact!);
    final int? idOrganizationOffset = _idOrganization == null ? null
        : fbBuilder.writeString(_idOrganization!);
    final int? unitIdentifierOffset = _unitIdentifier == null ? null
        : fbBuilder.writeString(_unitIdentifier!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? altCountryCodeOffset = _altCountryCode == null ? null
        : fbBuilder.writeString(_altCountryCode!);
    final int? wacOffset = _wac == null ? null
        : fbBuilder.writeString(_wac!);
    final int? operStatusOffset = _operStatus == null ? null
        : fbBuilder.writeString(_operStatus!);
    final int? conditionOffset = _condition == null ? null
        : fbBuilder.writeString(_condition!);
    final int? conditionAvailOffset = _conditionAvail == null ? null
        : fbBuilder.writeString(_conditionAvail!);
    final int? fpaOffset = _fpa == null ? null
        : fbBuilder.writeString(_fpa!);
    final int? identOffset = _ident == null ? null
        : fbBuilder.writeString(_ident!);
    final int? allegianceOffset = _allegiance == null ? null
        : fbBuilder.writeString(_allegiance!);
    final int? altAllegianceOffset = _altAllegiance == null ? null
        : fbBuilder.writeString(_altAllegiance!);
    final int? locNameOffset = _locName == null ? null
        : fbBuilder.writeString(_locName!);
    final int? locReasonOffset = _locReason == null ? null
        : fbBuilder.writeString(_locReason!);
    final int? forceOffset = _force == null ? null
        : fbBuilder.writeString(_force!);
    final int? forceNameOffset = _forceName == null ? null
        : fbBuilder.writeString(_forceName!);
    final int? functRoleOffset = _functRole == null ? null
        : fbBuilder.writeString(_functRole!);
    final int? msnPrimaryOffset = _msnPrimary == null ? null
        : fbBuilder.writeString(_msnPrimary!);
    final int? msnPrimarySpecialtyOffset = _msnPrimarySpecialty == null ? null
        : fbBuilder.writeString(_msnPrimarySpecialty!);
    final int? divCatOffset = _divCat == null ? null
        : fbBuilder.writeString(_divCat!);
    final int? echelonOffset = _echelon == null ? null
        : fbBuilder.writeString(_echelon!);
    final int? echelonTierOffset = _echelonTier == null ? null
        : fbBuilder.writeString(_echelonTier!);
    final int? fleetIdOffset = _fleetId == null ? null
        : fbBuilder.writeString(_fleetId!);
    final int? deployStatusOffset = _deployStatus == null ? null
        : fbBuilder.writeString(_deployStatus!);
    final int? flagFlownOffset = _flagFlown == null ? null
        : fbBuilder.writeString(_flagFlown!);
    final int? coordDatumOffset = _coordDatum == null ? null
        : fbBuilder.writeString(_coordDatum!);
    final int? coordOffset = _coord == null ? null
        : fbBuilder.writeString(_coord!);
    final int? milGridSysOffset = _milGridSys == null ? null
        : fbBuilder.writeString(_milGridSys!);
    final int? milGridOffset = _milGrid == null ? null
        : fbBuilder.writeString(_milGrid!);
    final int? utmOffset = _utm == null ? null
        : fbBuilder.writeString(_utm!);
    final int? airDefAreaOffset = _airDefArea == null ? null
        : fbBuilder.writeString(_airDefArea!);
    final int? polSubdivOffset = _polSubdiv == null ? null
        : fbBuilder.writeString(_polSubdiv!);
    final int? symCodeOffset = _symCode == null ? null
        : fbBuilder.writeString(_symCode!);
    final int? classRatingOffset = _classRating == null ? null
        : fbBuilder.writeString(_classRating!);
    final int? recStatusOffset = _recStatus == null ? null
        : fbBuilder.writeString(_recStatus!);
    final int? reviewDateOffset = _reviewDate == null ? null
        : fbBuilder.writeString(_reviewDate!);
    final int? resProdOffset = _resProd == null ? null
        : fbBuilder.writeString(_resProd!);
    final int? referenceDocOffset = _referenceDoc == null ? null
        : fbBuilder.writeString(_referenceDoc!);
    final int? operatingUnitRemarksOffset = _operatingUnitRemarks == null ? null
        : fbBuilder.writeList(_operatingUnitRemarks!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? organizationOffset = _organization == null ? null
        : fbBuilder.writeString(_organization!);
    final int? locationOffset = _location == null ? null
        : fbBuilder.writeString(_location!);
    fbBuilder.startTable(65);
    fbBuilder.addOffset(0, idOperatingUnitOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, altOperatingUnitIdOffset);
    fbBuilder.addOffset(3, nameOffset);
    fbBuilder.addOffset(4, descriptionOffset);
    fbBuilder.addOffset(5, idLocationOffset);
    fbBuilder.addOffset(6, idContactOffset);
    fbBuilder.addOffset(7, idOrganizationOffset);
    fbBuilder.addOffset(8, unitIdentifierOffset);
    fbBuilder.addOffset(9, countryCodeOffset);
    fbBuilder.addOffset(10, altCountryCodeOffset);
    fbBuilder.addOffset(11, wacOffset);
    fbBuilder.addOffset(12, operStatusOffset);
    fbBuilder.addOffset(13, conditionOffset);
    fbBuilder.addOffset(14, conditionAvailOffset);
    fbBuilder.addInt32(15, _eval);
    fbBuilder.addOffset(16, fpaOffset);
    fbBuilder.addOffset(17, identOffset);
    fbBuilder.addOffset(18, allegianceOffset);
    fbBuilder.addOffset(19, altAllegianceOffset);
    fbBuilder.addOffset(20, locNameOffset);
    fbBuilder.addOffset(21, locReasonOffset);
    fbBuilder.addOffset(22, forceOffset);
    fbBuilder.addOffset(23, forceNameOffset);
    fbBuilder.addOffset(24, functRoleOffset);
    fbBuilder.addOffset(25, msnPrimaryOffset);
    fbBuilder.addOffset(26, msnPrimarySpecialtyOffset);
    fbBuilder.addBool(27, _masterUnit);
    fbBuilder.addBool(28, _stylizedUnit);
    fbBuilder.addOffset(29, divCatOffset);
    fbBuilder.addOffset(30, echelonOffset);
    fbBuilder.addOffset(31, echelonTierOffset);
    fbBuilder.addOffset(32, fleetIdOffset);
    fbBuilder.addOffset(33, deployStatusOffset);
    fbBuilder.addOffset(34, flagFlownOffset);
    fbBuilder.addOffset(35, coordDatumOffset);
    fbBuilder.addOffset(36, coordOffset);
    fbBuilder.addFloat64(37, _coordDerivAcc);
    fbBuilder.addFloat64(38, _lat);
    fbBuilder.addFloat64(39, _lon);
    fbBuilder.addFloat64(40, _elevMsl);
    fbBuilder.addInt32(41, _elevMslConfLvl);
    fbBuilder.addFloat64(42, _elevMslDerivAcc);
    fbBuilder.addFloat64(43, _geoidalMslSep);
    fbBuilder.addOffset(44, milGridSysOffset);
    fbBuilder.addOffset(45, milGridOffset);
    fbBuilder.addOffset(46, utmOffset);
    fbBuilder.addOffset(47, airDefAreaOffset);
    fbBuilder.addOffset(48, polSubdivOffset);
    fbBuilder.addOffset(49, symCodeOffset);
    fbBuilder.addOffset(50, classRatingOffset);
    fbBuilder.addOffset(51, recStatusOffset);
    fbBuilder.addOffset(52, reviewDateOffset);
    fbBuilder.addOffset(53, resProdOffset);
    fbBuilder.addOffset(54, referenceDocOffset);
    fbBuilder.addOffset(55, operatingUnitRemarksOffset);
    fbBuilder.addOffset(56, createdAtOffset);
    fbBuilder.addOffset(57, createdByOffset);
    fbBuilder.addOffset(58, updatedAtOffset);
    fbBuilder.addOffset(59, updatedByOffset);
    fbBuilder.addOffset(60, sourceOffset);
    fbBuilder.addOffset(61, originOffset);
    fbBuilder.addInt8(62, _dataMode?.value);
    fbBuilder.addOffset(63, organizationOffset);
    fbBuilder.addOffset(64, locationOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
