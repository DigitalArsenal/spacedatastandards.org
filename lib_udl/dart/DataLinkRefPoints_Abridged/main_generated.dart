// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
class DataLinkRefPointsAbridged {
  DataLinkRefPointsAbridged._(this._bc, this._bcOffset);
  factory DataLinkRefPointsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DataLinkRefPointsAbridged> reader = _DataLinkRefPointsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Type of data link reference point or grid origin.
  ///  Example: /// Example: DLRP
  ///  Constraints: Minimum length = 0, Maximum length = 7
  String? get refPointType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Identifier to designate a reference point.
  ///  Example: /// Example: L5
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get refDes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The location name of the point of reference for this data link message.
  ///  Example: /// Example: FORT BRAGG
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get refLocName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  WGS84 latitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get refLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  WGS84 longitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get refLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Indicates when a particular event or nickname becomes effective or the old event or nickname is deleted, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-08T13:55:43.123Z
  ///  Constraints: No constraints specified.
  String? get effEventTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'DataLinkRefPointsAbridged{refPointType: ${refPointType}, refDes: ${refDes}, refLocName: ${refLocName}, refLat: ${refLat}, refLon: ${refLon}, effEventTime: ${effEventTime}}';
  }
}

class _DataLinkRefPointsAbridgedReader extends fb.TableReader<DataLinkRefPointsAbridged> {
  const _DataLinkRefPointsAbridgedReader();

  @override
  DataLinkRefPointsAbridged createObject(fb.BufferContext bc, int offset) => 
    DataLinkRefPointsAbridged._(bc, offset);
}

class DataLinkRefPointsAbridgedBuilder {
  DataLinkRefPointsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addRefPointTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRefDesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRefLocNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addRefLat(double? refLat) {
    fbBuilder.addFloat64(3, refLat);
    return fbBuilder.offset;
  }
  int addRefLon(double? refLon) {
    fbBuilder.addFloat64(4, refLon);
    return fbBuilder.offset;
  }
  int addEffEventTimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DataLinkRefPointsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _refPointType;
  final String? _refDes;
  final String? _refLocName;
  final double? _refLat;
  final double? _refLon;
  final String? _effEventTime;

  DataLinkRefPointsAbridgedObjectBuilder({
    String? refPointType,
    String? refDes,
    String? refLocName,
    double? refLat,
    double? refLon,
    String? effEventTime,
  })
      : _refPointType = refPointType,
        _refDes = refDes,
        _refLocName = refLocName,
        _refLat = refLat,
        _refLon = refLon,
        _effEventTime = effEventTime;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? refPointTypeOffset = _refPointType == null ? null
        : fbBuilder.writeString(_refPointType!);
    final int? refDesOffset = _refDes == null ? null
        : fbBuilder.writeString(_refDes!);
    final int? refLocNameOffset = _refLocName == null ? null
        : fbBuilder.writeString(_refLocName!);
    final int? effEventTimeOffset = _effEventTime == null ? null
        : fbBuilder.writeString(_effEventTime!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, refPointTypeOffset);
    fbBuilder.addOffset(1, refDesOffset);
    fbBuilder.addOffset(2, refLocNameOffset);
    fbBuilder.addFloat64(3, _refLat);
    fbBuilder.addFloat64(4, _refLon);
    fbBuilder.addOffset(5, effEventTimeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
