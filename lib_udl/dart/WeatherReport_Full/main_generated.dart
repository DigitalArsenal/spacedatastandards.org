// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class WeatherReportFullDataModeEnum {
  final int value;
  const WeatherReportFullDataModeEnum._(this.value);

  factory WeatherReportFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum WeatherReportFullDataModeEnum');
    }
    return result;
  }

  static WeatherReportFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : WeatherReportFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const WeatherReportFullDataModeEnum REAL = WeatherReportFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const WeatherReportFullDataModeEnum TEST = WeatherReportFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const WeatherReportFullDataModeEnum SIMULATED = WeatherReportFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const WeatherReportFullDataModeEnum EXERCISE = WeatherReportFullDataModeEnum._(3);
  static const Map<int, WeatherReportFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<WeatherReportFullDataModeEnum> reader = _WeatherReportFullDataModeEnumReader();

  @override
  String toString() {
    return 'WeatherReportFullDataModeEnum{value: $value}';
  }
}

class _WeatherReportFullDataModeEnumReader extends fb.Reader<WeatherReportFullDataModeEnum> {
  const _WeatherReportFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  WeatherReportFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      WeatherReportFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// These services provide for posting and querying Weather Over Target information. The information contained within describes the current weather conditions over a target area or region to include navigational considerations such as altimeter settings, visibility, cloud heights etc.
class WeatherReportFull {
  WeatherReportFull._(this._bc, this._bcOffset);
  factory WeatherReportFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WeatherReportFull> reader = _WeatherReportFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: WEATHER-REPORT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the sensor making the weather measurement.
  ///  Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Identifier of the weather over target, which should remain the same on subsequent Weather Over Target records.
  ///  Example: /// Example: WEATHER-ID
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get weatherId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Identifier of the ground imagery associated for this weather over target report.
  ///  Example: /// Example: GROUND-IMAGERY-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idGroundImagery => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Identifier of the Site that is associated with this weather report.
  ///  Example: /// Example: AIRFIELD-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSite => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Identifier of the Airfield associated with this weather report.
  ///  Example: /// Example: 8fb38d6d-a3de-45dd-8974-4e3ed73e9449
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idAirfield => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The International Civil Aviation Organization (ICAO) code of the airfield associated with this weather report.
  ///  Example: /// Example: KAFF
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get icao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Optional observation or forecast ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: GDSSMB022408301601304517
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Optional location ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: TMDS060AD4OG03CC
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalLocationId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Identifies the type of weather report (e.g. OBSERVATION, FORECAST, etc.).
  ///  Example: /// Example: FORECAST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get reportType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get obTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Valid start time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get forecastStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Valid end time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T18:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get forecastEndTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The central WGS-84 latitude of the weather report, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 56.12
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  The central WGS-84 longitude of the weather report, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -156.6
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Point height above ellipsoid (WGS-84), in meters.
  ///  Example: /// Example: 123.12
  ///  Constraints: No constraints specified.
  double get alt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Altitude of a pressure surface in the atmosphere above mean sea level, in meters.
  ///  Example: /// Example: 1000.0
  ///  Constraints: No constraints specified.
  double get geoPotentialAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Specific pressures or heights where measurements are taken, labeled as either MANDATORY or SIGNIFICANT levels. Mandatory levels are at particular pressures at geopotential heights. Significant levels are at particular geometric heights.
  ///  Example: /// Example: MANDATORY
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get dataLevel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  String? get area => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  String? get atext => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: No constraints specified.
  String? get agjson => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Type of region as projected on the ground.
  ///  Example: /// Example: ST_Polygon
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get atype => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get andims => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 4326
  ///  Constraints: No constraints specified.
  int get asrid => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  Expresses the speed of the wind in meters/second.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get windSpd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Average wind speed over a 1 minute period, in meters/second.
  ///  Example: /// Example: 12.1
  ///  Constraints: No constraints specified.
  double get windSpdAvg => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Expresses the max gust speed of the wind, in meters/second.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get windGust => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Expresses the max gust speed of the wind recorded in a 10 minute period, in meters/second.
  ///  Example: /// Example: 13.2
  ///  Constraints: No constraints specified.
  double get windGust10 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  The change in wind speed between two different altitudes divided by the vertical distance between them, in units of 1/sec.
  ///  Example: /// Example: 3.8
  ///  Constraints: No constraints specified.
  double get vshear => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  The change in wind speed between two different lateral positions at a given altitude divided by the horizontal distance between them, in units of 1/sec.
  ///  Example: /// Example: 3.8
  ///  Constraints: No constraints specified.
  double get hshear => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Average radial velocity of wind as measured by radar with multi-beam configurations. Radial velocity is the component of wind velocity moving directly toward or away from a sensor's radar beam, in meters per second. Values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar).
  ///  Example: /// Example: -0.04
  ///  Constraints: No constraints specified.
  double get radVel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Component of wind velocity moving directly toward or away from radar beam 1, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  ///  Example: /// Example: 4.4
  ///  Constraints: No constraints specified.
  double get radVelBeam1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Component of wind velocity moving directly toward or away from radar beam 2, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  ///  Example: /// Example: -0.2
  ///  Constraints: No constraints specified.
  double get radVelBeam2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  Component of wind velocity moving directly toward or away from radar beam 3, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  ///  Example: /// Example: -0.2
  ///  Constraints: No constraints specified.
  double get radVelBeam3 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  Component of wind velocity moving directly toward or away from radar beam 4, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  ///  Example: /// Example: 11.4
  ///  Constraints: No constraints specified.
  double get radVelBeam4 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Component of wind velocity moving directly toward or away from radar beam 5, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  ///  Example: /// Example: 4.1
  ///  Constraints: No constraints specified.
  double get radVelBeam5 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Direction the wind is blowing, in degrees clockwise from true north.
  ///  Example: /// Example: 75.1234
  ///  Constraints: No constraints specified.
  double get windDir => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  Average wind direction over a 1 minute period, in degrees clockwise from true north.
  ///  Example: /// Example: 57.1
  ///  Constraints: No constraints specified.
  double get windDirAvg => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  Wind direction corresponding to the peak wind speed during a 1 minute period, in degrees clockwise from true north.
  ///  Example: /// Example: 78.4
  ///  Constraints: No constraints specified.
  double get windDirPeak => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Wind direction corresponding to the peak wind speed during a 10 minute period, in degrees clockwise from true north.
  ///  Example: /// Example: 44.5
  ///  Constraints: No constraints specified.
  double get windDirPeak10 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  The perceived temperature in degrees C.
  ///  Example: /// Example: 15.6
  ///  Constraints: No constraints specified.
  double get windChill => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  The difference in wind direction recorded over a period of time, in degrees.
  ///  Example: /// Example: 9.1
  ///  Constraints: No constraints specified.
  double get dirDev => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  Boolean describing whether or not the wind direction and/or speed is variable.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get windVar => const fb.BoolReader().vTableGet(_bc, _bcOffset, 92, false);
  ///  Covariance matrix, in knots and second based units.  The array values represent the lower triangular half of the covariance matrix. The size of the covariance matrix is 2x2.  The covariance elements are position dependent within the array with values ordered as follows:
  ///  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y
  ///  x&nbsp;&nbsp;&nbsp;&nbsp;1
  ///  y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
  ///  The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  List<String>? get windCov => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 94);
  ///  Array of cloud cover descriptions - each element can be maximum of 16 characters long. Intended as, but not constrained to, MIL-STD-6016 cloud cover designations (e.g. SKY CLEAR, SCATTERED, BROKEN, OVERCAST, SKY OBSCURED). Each element of the array corresponds to the elements in the cloudHght array specified respectively.
  ///  Example: /// Example: ['OVERCAST', 'BROKEN']
  ///  Constraints: No constraints specified.
  List<String>? get cloudCover => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 96);
  ///  Array of cloud base heights in meters described by the cloudHght array. Each element of the array corresponds to the elements in the cloudCover array specified respectively.
  ///  Example: /// Example: [1.2, 2.2]
  ///  Constraints: No constraints specified.
  List<String>? get cloudHght => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 98);
  ///  Describes the actual weather at position. Intended as, but not constrained to, MIL-STD-6016 actual weather (e.g. NO STATEMENT, NO SIGNIFICANT WEATHER, DRIZZLE, RAIN, SNOW, SNOW GRAINS, DIAMOND DUST, ICE PELLETS, HAIL, SMALL HAIL, MIST, FOG, SMOKE, VOLCANIC ASH, WIDESPREAD DUST, SAND, HAZE, WELL DEVELOPED DUST, SQUALLS, FUNNEL CLOUDS, SANDSTORM, DUSTSTORM, LOW CLOUDS, CLOUDY, GROUND FOG, DUST, HEAVY RAIN, THUNDERSTORMS AWT, HEAVY THUNDERSTORMS, HURRICANE TYPHOON CYCLONE, TROPICAL STORM, TORNADO, HIGH WINDS, LIGHTNING, FREEZING DRIZZLE, FREEZING RAIN, HEAVY SNOW, ICING, SNOW OR RAIN AND SNOW MIXED, SHOWERS, CLEAR).
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get actWeather => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Used in conjunction with actWeather and weatherInt. Intended as, but not constrained to, MIL-STD-6016 actual weather descriptor (e.g. NO STATEMENT, SHALLOW, PATCHES, LOW DRIFTING, BLOWING, SHOWERS, THUNDERSTORMS, SUPERCOOLED).
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get weatherDesc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Weather Intensity. Used in conjunction with actWeather and weatherDesc. Intended as, but not constrained to, MIL-STD-6016 weather intensity (e.g. NO STATEMENT, LIGHT, MODERATE, HEAVY, IN VICINITY).
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get weatherInt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  The Raw Meteorological Aerodrome Report (METAR) string.
  ///  Example: /// Example: KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get rawMetar => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  Terminal Aerodrome Forecast (TAF) containing detailed weather predictions for a specific airport or aerodrome.
  ///  Example: /// Example: KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z=
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get rawTaf => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Altimeter set to read zero at mean sea level in kilopascals.
  ///  Example: /// Example: 1234.456
  ///  Constraints: No constraints specified.
  double get qnh => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  Visual distance in meters.
  ///  Example: /// Example: 1234.456
  ///  Constraints: No constraints specified.
  double get visibility => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  The measurement of air temperature in degrees C.
  ///  Example: /// Example: 23.45
  ///  Constraints: No constraints specified.
  double get temperature => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  The measurement of soil temperature in degrees C.
  ///  Example: /// Example: 22.4
  ///  Constraints: No constraints specified.
  double get soilTemp => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 116, 0.0);
  ///  The measurement of air pressure in the atmosphere in kilopascals.
  ///  Example: /// Example: 101.2
  ///  Constraints: No constraints specified.
  double get barPress => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  ///  The speed at which water is being applied to a specific area in millimeters per hour.
  ///  Example: /// Example: 3.4
  ///  Constraints: No constraints specified.
  double get precipRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 120, 0.0);
  ///  The amount of rain that has fallen in the past hour, in centimeters.
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  double get rainHour => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  The power per unit area received from the Sun in the form of electromagnetic radiation as measured in the wavelength range of the measuring instrument. The solar irradiance is measured in watt per square meter (W/m2).
  ///  Example: /// Example: 1234.456
  ///  Constraints: No constraints specified.
  double get solarRad => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  The amount of radiation that reaches earth's surface after being scattered by the atmosphere, in Watts per square meter.
  ///  Example: /// Example: 234.5
  ///  Constraints: No constraints specified.
  double get difRad => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  ///  The amount of radiation that changes direction as a function of atmospheric density, in Watts per square meter.
  ///  Example: /// Example: 56.7
  ///  Constraints: No constraints specified.
  double get refRad => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 128, 0.0);
  ///  Sensor WGS84 latitude at obTime in degrees. -90 to 90 degrees (negative values south of equator). This includes pilot reports or other means of weather observation.
  ///  Example: /// Example: 12.456
  ///  Constraints: No constraints specified.
  double get senlat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 130, 0.0);
  ///  Sensor WGS84 longitude at obTime in degrees. -180 to 180 degrees (negative values west of Prime Meridian). This includes pilot reports or other means of weather observation.
  ///  Example: /// Example: 123.456
  ///  Constraints: No constraints specified.
  double get senlon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  ///  Sensor altitude at obTime in km. This includes pilot reports or other means of weather observation.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get senalt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 134, 0.0);
  ///  The temperature at which air is saturated with water vapor, in degrees C.
  ///  Example: /// Example: 15.6
  ///  Constraints: No constraints specified.
  double get dewPoint => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 136, 0.0);
  ///  The percentage of water vapor in the atmosphere.
  ///  Example: /// Example: 34.456
  ///  Constraints: No constraints specified.
  double get relHumidity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 138, 0.0);
  ///  An indication of how much the atmosphere refracts light.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get indexRefraction => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 140, 0.0);
  ///  The volumetric percentage of soil water contained in a given volume of soil.
  ///  Example: /// Example: 3.5
  ///  Constraints: No constraints specified.
  double get soilMoisture => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 142, 0.0);
  ///  Describes in which direction (if any) that better weather conditions exist. Intended as, but not constrained to, MIL-STD-6016 surrounding weather designations (e.g. NO STATEMENT, BETTER TO NORTH, BETTER TO EAST, BETTER TO SOUTH, BETTER TO WEST).
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get surroundingWeather => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 144);
  ///  Amplifies the actual weather being reported. Intended as, but not constrained to, MIL-STD-6016 weather amplification designations (e.g. NO STATEMENT, NO SCATTERED BROKEN MEDIUM CLOUD, SCATTERED BROKEN MEDIUM CLOUDS, GUSTY WINDS AT SERVICE, FOG IN VALLEYS, HIGHER TERRAIN OBSCURED, SURFACE CONDITIONS VARIABLE, SURFACE WIND NE, SURFACE WIND SE, SURFACE WIND SW, SURFACE WIND NW, PRESENCE OF CUMULONIMBUS).
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get weatherAmp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 146);
  ///  Reports the lowest altitude at which contrails are occurring, in meters.
  ///  Example: /// Example: 123.123
  ///  Constraints: No constraints specified.
  double get contrailHghtLower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 148, 0.0);
  ///  Reports the highest altitude at which contrails are occurring, in meters.
  ///  Example: /// Example: 123.123
  ///  Constraints: No constraints specified.
  double get contrailHghtUpper => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 150, 0.0);
  ///  Reports the highest altitude at which icing or freezing rain is occurring, in meters.
  ///  Example: /// Example: 123.123
  ///  Constraints: No constraints specified.
  double get icingUpperLimit => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 152, 0.0);
  ///  Reports the lowest altitude at which icing or freezing rain is occurring, in meters.
  ///  Example: /// Example: 123.123
  ///  Constraints: No constraints specified.
  double get icingLowerLimit => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 154, 0.0);
  ///  Describes the flight conditions in route to the target  (NO STATEMENT, MAINLY IFR, MAINLY VFR, THUNDERSTORMS).
  ///  MAINLY IFR:&nbsp;&nbsp;Predominantly Instrument Flight Rules.
  ///  MAINLY VFR:&nbsp;&nbsp;Predominantly Visual Flight Rules.
  ///  THUNDERSTORMS:&nbsp;&nbsp;Thunderstorms expected in route.
  ///  Example: /// Example: THUNDERSTORMS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get enRouteWeather => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 156);
  ///  Flag indicating detection of a cloud-to-cloud lightning event.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get ccEvent => const fb.BoolReader().vTableGet(_bc, _bcOffset, 158, false);
  ///  Array of UDL record types (SENSOR, WEATHERDATA) that are related to this WeatherReport record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['SENSOR', 'WEATHERDATA']
  ///  Constraints: No constraints specified.
  List<String>? get srcTyps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 160);
  ///  Array of UUID(s) of the UDL data record(s) that are related to this WeatherReport record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  ///  Example: /// Example: ['e609a90d-4059-4043-9f1a-fd7b49a3e1d0', 'c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52']
  ///  Constraints: No constraints specified.
  List<String>? get srcIds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 162);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 164);
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 166);
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 168);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 170);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 172);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  WeatherReportFullDataModeEnum get dataMode => WeatherReportFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 174, 0));

  @override
  String toString() {
    return 'WeatherReportFull{id: ${id}, classificationMarking: ${classificationMarking}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, weatherId: ${weatherId}, idGroundImagery: ${idGroundImagery}, idSite: ${idSite}, idAirfield: ${idAirfield}, icao: ${icao}, externalId: ${externalId}, externalLocationId: ${externalLocationId}, reportType: ${reportType}, obTime: ${obTime}, forecastStartTime: ${forecastStartTime}, forecastEndTime: ${forecastEndTime}, lat: ${lat}, lon: ${lon}, alt: ${alt}, geoPotentialAlt: ${geoPotentialAlt}, dataLevel: ${dataLevel}, area: ${area}, atext: ${atext}, agjson: ${agjson}, atype: ${atype}, andims: ${andims}, asrid: ${asrid}, windSpd: ${windSpd}, windSpdAvg: ${windSpdAvg}, windGust: ${windGust}, windGust10: ${windGust10}, vshear: ${vshear}, hshear: ${hshear}, radVel: ${radVel}, radVelBeam1: ${radVelBeam1}, radVelBeam2: ${radVelBeam2}, radVelBeam3: ${radVelBeam3}, radVelBeam4: ${radVelBeam4}, radVelBeam5: ${radVelBeam5}, windDir: ${windDir}, windDirAvg: ${windDirAvg}, windDirPeak: ${windDirPeak}, windDirPeak10: ${windDirPeak10}, windChill: ${windChill}, dirDev: ${dirDev}, windVar: ${windVar}, windCov: ${windCov}, cloudCover: ${cloudCover}, cloudHght: ${cloudHght}, actWeather: ${actWeather}, weatherDesc: ${weatherDesc}, weatherInt: ${weatherInt}, rawMetar: ${rawMetar}, rawTaf: ${rawTaf}, qnh: ${qnh}, visibility: ${visibility}, temperature: ${temperature}, soilTemp: ${soilTemp}, barPress: ${barPress}, precipRate: ${precipRate}, rainHour: ${rainHour}, solarRad: ${solarRad}, difRad: ${difRad}, refRad: ${refRad}, senlat: ${senlat}, senlon: ${senlon}, senalt: ${senalt}, dewPoint: ${dewPoint}, relHumidity: ${relHumidity}, indexRefraction: ${indexRefraction}, soilMoisture: ${soilMoisture}, surroundingWeather: ${surroundingWeather}, weatherAmp: ${weatherAmp}, contrailHghtLower: ${contrailHghtLower}, contrailHghtUpper: ${contrailHghtUpper}, icingUpperLimit: ${icingUpperLimit}, icingLowerLimit: ${icingLowerLimit}, enRouteWeather: ${enRouteWeather}, ccEvent: ${ccEvent}, srcTyps: ${srcTyps}, srcIds: ${srcIds}, origNetwork: ${origNetwork}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}}';
  }
}

class _WeatherReportFullReader extends fb.TableReader<WeatherReportFull> {
  const _WeatherReportFullReader();

  @override
  WeatherReportFull createObject(fb.BufferContext bc, int offset) => 
    WeatherReportFull._(bc, offset);
}

class WeatherReportFullBuilder {
  WeatherReportFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(86);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addWeatherIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdGroundImageryOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addIdSiteOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addIdAirfieldOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addIcaoOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addExternalLocationIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addReportTypeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addObTimeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addForecastStartTimeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addForecastEndTimeOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(15, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(16, lon);
    return fbBuilder.offset;
  }
  int addAlt(double? alt) {
    fbBuilder.addFloat64(17, alt);
    return fbBuilder.offset;
  }
  int addGeoPotentialAlt(double? geoPotentialAlt) {
    fbBuilder.addFloat64(18, geoPotentialAlt);
    return fbBuilder.offset;
  }
  int addDataLevelOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addAreaOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addAtextOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addAgjsonOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addAtypeOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addAndims(int? andims) {
    fbBuilder.addInt32(24, andims);
    return fbBuilder.offset;
  }
  int addAsrid(int? asrid) {
    fbBuilder.addInt32(25, asrid);
    return fbBuilder.offset;
  }
  int addWindSpd(double? windSpd) {
    fbBuilder.addFloat64(26, windSpd);
    return fbBuilder.offset;
  }
  int addWindSpdAvg(double? windSpdAvg) {
    fbBuilder.addFloat64(27, windSpdAvg);
    return fbBuilder.offset;
  }
  int addWindGust(double? windGust) {
    fbBuilder.addFloat64(28, windGust);
    return fbBuilder.offset;
  }
  int addWindGust10(double? windGust10) {
    fbBuilder.addFloat64(29, windGust10);
    return fbBuilder.offset;
  }
  int addVshear(double? vshear) {
    fbBuilder.addFloat64(30, vshear);
    return fbBuilder.offset;
  }
  int addHshear(double? hshear) {
    fbBuilder.addFloat64(31, hshear);
    return fbBuilder.offset;
  }
  int addRadVel(double? radVel) {
    fbBuilder.addFloat64(32, radVel);
    return fbBuilder.offset;
  }
  int addRadVelBeam1(double? radVelBeam1) {
    fbBuilder.addFloat64(33, radVelBeam1);
    return fbBuilder.offset;
  }
  int addRadVelBeam2(double? radVelBeam2) {
    fbBuilder.addFloat64(34, radVelBeam2);
    return fbBuilder.offset;
  }
  int addRadVelBeam3(double? radVelBeam3) {
    fbBuilder.addFloat64(35, radVelBeam3);
    return fbBuilder.offset;
  }
  int addRadVelBeam4(double? radVelBeam4) {
    fbBuilder.addFloat64(36, radVelBeam4);
    return fbBuilder.offset;
  }
  int addRadVelBeam5(double? radVelBeam5) {
    fbBuilder.addFloat64(37, radVelBeam5);
    return fbBuilder.offset;
  }
  int addWindDir(double? windDir) {
    fbBuilder.addFloat64(38, windDir);
    return fbBuilder.offset;
  }
  int addWindDirAvg(double? windDirAvg) {
    fbBuilder.addFloat64(39, windDirAvg);
    return fbBuilder.offset;
  }
  int addWindDirPeak(double? windDirPeak) {
    fbBuilder.addFloat64(40, windDirPeak);
    return fbBuilder.offset;
  }
  int addWindDirPeak10(double? windDirPeak10) {
    fbBuilder.addFloat64(41, windDirPeak10);
    return fbBuilder.offset;
  }
  int addWindChill(double? windChill) {
    fbBuilder.addFloat64(42, windChill);
    return fbBuilder.offset;
  }
  int addDirDev(double? dirDev) {
    fbBuilder.addFloat64(43, dirDev);
    return fbBuilder.offset;
  }
  int addWindVar(bool? windVar) {
    fbBuilder.addBool(44, windVar);
    return fbBuilder.offset;
  }
  int addWindCovOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addCloudCoverOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addCloudHghtOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addActWeatherOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addWeatherDescOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addWeatherIntOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addRawMetarOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addRawTafOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addQnh(double? qnh) {
    fbBuilder.addFloat64(53, qnh);
    return fbBuilder.offset;
  }
  int addVisibility(double? visibility) {
    fbBuilder.addFloat64(54, visibility);
    return fbBuilder.offset;
  }
  int addTemperature(double? temperature) {
    fbBuilder.addFloat64(55, temperature);
    return fbBuilder.offset;
  }
  int addSoilTemp(double? soilTemp) {
    fbBuilder.addFloat64(56, soilTemp);
    return fbBuilder.offset;
  }
  int addBarPress(double? barPress) {
    fbBuilder.addFloat64(57, barPress);
    return fbBuilder.offset;
  }
  int addPrecipRate(double? precipRate) {
    fbBuilder.addFloat64(58, precipRate);
    return fbBuilder.offset;
  }
  int addRainHour(double? rainHour) {
    fbBuilder.addFloat64(59, rainHour);
    return fbBuilder.offset;
  }
  int addSolarRad(double? solarRad) {
    fbBuilder.addFloat64(60, solarRad);
    return fbBuilder.offset;
  }
  int addDifRad(double? difRad) {
    fbBuilder.addFloat64(61, difRad);
    return fbBuilder.offset;
  }
  int addRefRad(double? refRad) {
    fbBuilder.addFloat64(62, refRad);
    return fbBuilder.offset;
  }
  int addSenlat(double? senlat) {
    fbBuilder.addFloat64(63, senlat);
    return fbBuilder.offset;
  }
  int addSenlon(double? senlon) {
    fbBuilder.addFloat64(64, senlon);
    return fbBuilder.offset;
  }
  int addSenalt(double? senalt) {
    fbBuilder.addFloat64(65, senalt);
    return fbBuilder.offset;
  }
  int addDewPoint(double? dewPoint) {
    fbBuilder.addFloat64(66, dewPoint);
    return fbBuilder.offset;
  }
  int addRelHumidity(double? relHumidity) {
    fbBuilder.addFloat64(67, relHumidity);
    return fbBuilder.offset;
  }
  int addIndexRefraction(double? indexRefraction) {
    fbBuilder.addFloat64(68, indexRefraction);
    return fbBuilder.offset;
  }
  int addSoilMoisture(double? soilMoisture) {
    fbBuilder.addFloat64(69, soilMoisture);
    return fbBuilder.offset;
  }
  int addSurroundingWeatherOffset(int? offset) {
    fbBuilder.addOffset(70, offset);
    return fbBuilder.offset;
  }
  int addWeatherAmpOffset(int? offset) {
    fbBuilder.addOffset(71, offset);
    return fbBuilder.offset;
  }
  int addContrailHghtLower(double? contrailHghtLower) {
    fbBuilder.addFloat64(72, contrailHghtLower);
    return fbBuilder.offset;
  }
  int addContrailHghtUpper(double? contrailHghtUpper) {
    fbBuilder.addFloat64(73, contrailHghtUpper);
    return fbBuilder.offset;
  }
  int addIcingUpperLimit(double? icingUpperLimit) {
    fbBuilder.addFloat64(74, icingUpperLimit);
    return fbBuilder.offset;
  }
  int addIcingLowerLimit(double? icingLowerLimit) {
    fbBuilder.addFloat64(75, icingLowerLimit);
    return fbBuilder.offset;
  }
  int addEnRouteWeatherOffset(int? offset) {
    fbBuilder.addOffset(76, offset);
    return fbBuilder.offset;
  }
  int addCcEvent(bool? ccEvent) {
    fbBuilder.addBool(77, ccEvent);
    return fbBuilder.offset;
  }
  int addSrcTypsOffset(int? offset) {
    fbBuilder.addOffset(78, offset);
    return fbBuilder.offset;
  }
  int addSrcIdsOffset(int? offset) {
    fbBuilder.addOffset(79, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(80, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(81, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(82, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(83, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(84, offset);
    return fbBuilder.offset;
  }
  int addDataMode(WeatherReportFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(85, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WeatherReportFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idSensor;
  final String? _origSensorId;
  final String? _weatherId;
  final String? _idGroundImagery;
  final String? _idSite;
  final String? _idAirfield;
  final String? _icao;
  final String? _externalId;
  final String? _externalLocationId;
  final String? _reportType;
  final String? _obTime;
  final String? _forecastStartTime;
  final String? _forecastEndTime;
  final double? _lat;
  final double? _lon;
  final double? _alt;
  final double? _geoPotentialAlt;
  final String? _dataLevel;
  final String? _area;
  final String? _atext;
  final String? _agjson;
  final String? _atype;
  final int? _andims;
  final int? _asrid;
  final double? _windSpd;
  final double? _windSpdAvg;
  final double? _windGust;
  final double? _windGust10;
  final double? _vshear;
  final double? _hshear;
  final double? _radVel;
  final double? _radVelBeam1;
  final double? _radVelBeam2;
  final double? _radVelBeam3;
  final double? _radVelBeam4;
  final double? _radVelBeam5;
  final double? _windDir;
  final double? _windDirAvg;
  final double? _windDirPeak;
  final double? _windDirPeak10;
  final double? _windChill;
  final double? _dirDev;
  final bool? _windVar;
  final List<String>? _windCov;
  final List<String>? _cloudCover;
  final List<String>? _cloudHght;
  final String? _actWeather;
  final String? _weatherDesc;
  final String? _weatherInt;
  final String? _rawMetar;
  final String? _rawTaf;
  final double? _qnh;
  final double? _visibility;
  final double? _temperature;
  final double? _soilTemp;
  final double? _barPress;
  final double? _precipRate;
  final double? _rainHour;
  final double? _solarRad;
  final double? _difRad;
  final double? _refRad;
  final double? _senlat;
  final double? _senlon;
  final double? _senalt;
  final double? _dewPoint;
  final double? _relHumidity;
  final double? _indexRefraction;
  final double? _soilMoisture;
  final String? _surroundingWeather;
  final String? _weatherAmp;
  final double? _contrailHghtLower;
  final double? _contrailHghtUpper;
  final double? _icingUpperLimit;
  final double? _icingLowerLimit;
  final String? _enRouteWeather;
  final bool? _ccEvent;
  final List<String>? _srcTyps;
  final List<String>? _srcIds;
  final String? _origNetwork;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final WeatherReportFullDataModeEnum? _dataMode;

  WeatherReportFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idSensor,
    String? origSensorId,
    String? weatherId,
    String? idGroundImagery,
    String? idSite,
    String? idAirfield,
    String? icao,
    String? externalId,
    String? externalLocationId,
    String? reportType,
    String? obTime,
    String? forecastStartTime,
    String? forecastEndTime,
    double? lat,
    double? lon,
    double? alt,
    double? geoPotentialAlt,
    String? dataLevel,
    String? area,
    String? atext,
    String? agjson,
    String? atype,
    int? andims,
    int? asrid,
    double? windSpd,
    double? windSpdAvg,
    double? windGust,
    double? windGust10,
    double? vshear,
    double? hshear,
    double? radVel,
    double? radVelBeam1,
    double? radVelBeam2,
    double? radVelBeam3,
    double? radVelBeam4,
    double? radVelBeam5,
    double? windDir,
    double? windDirAvg,
    double? windDirPeak,
    double? windDirPeak10,
    double? windChill,
    double? dirDev,
    bool? windVar,
    List<String>? windCov,
    List<String>? cloudCover,
    List<String>? cloudHght,
    String? actWeather,
    String? weatherDesc,
    String? weatherInt,
    String? rawMetar,
    String? rawTaf,
    double? qnh,
    double? visibility,
    double? temperature,
    double? soilTemp,
    double? barPress,
    double? precipRate,
    double? rainHour,
    double? solarRad,
    double? difRad,
    double? refRad,
    double? senlat,
    double? senlon,
    double? senalt,
    double? dewPoint,
    double? relHumidity,
    double? indexRefraction,
    double? soilMoisture,
    String? surroundingWeather,
    String? weatherAmp,
    double? contrailHghtLower,
    double? contrailHghtUpper,
    double? icingUpperLimit,
    double? icingLowerLimit,
    String? enRouteWeather,
    bool? ccEvent,
    List<String>? srcTyps,
    List<String>? srcIds,
    String? origNetwork,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    WeatherReportFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _weatherId = weatherId,
        _idGroundImagery = idGroundImagery,
        _idSite = idSite,
        _idAirfield = idAirfield,
        _icao = icao,
        _externalId = externalId,
        _externalLocationId = externalLocationId,
        _reportType = reportType,
        _obTime = obTime,
        _forecastStartTime = forecastStartTime,
        _forecastEndTime = forecastEndTime,
        _lat = lat,
        _lon = lon,
        _alt = alt,
        _geoPotentialAlt = geoPotentialAlt,
        _dataLevel = dataLevel,
        _area = area,
        _atext = atext,
        _agjson = agjson,
        _atype = atype,
        _andims = andims,
        _asrid = asrid,
        _windSpd = windSpd,
        _windSpdAvg = windSpdAvg,
        _windGust = windGust,
        _windGust10 = windGust10,
        _vshear = vshear,
        _hshear = hshear,
        _radVel = radVel,
        _radVelBeam1 = radVelBeam1,
        _radVelBeam2 = radVelBeam2,
        _radVelBeam3 = radVelBeam3,
        _radVelBeam4 = radVelBeam4,
        _radVelBeam5 = radVelBeam5,
        _windDir = windDir,
        _windDirAvg = windDirAvg,
        _windDirPeak = windDirPeak,
        _windDirPeak10 = windDirPeak10,
        _windChill = windChill,
        _dirDev = dirDev,
        _windVar = windVar,
        _windCov = windCov,
        _cloudCover = cloudCover,
        _cloudHght = cloudHght,
        _actWeather = actWeather,
        _weatherDesc = weatherDesc,
        _weatherInt = weatherInt,
        _rawMetar = rawMetar,
        _rawTaf = rawTaf,
        _qnh = qnh,
        _visibility = visibility,
        _temperature = temperature,
        _soilTemp = soilTemp,
        _barPress = barPress,
        _precipRate = precipRate,
        _rainHour = rainHour,
        _solarRad = solarRad,
        _difRad = difRad,
        _refRad = refRad,
        _senlat = senlat,
        _senlon = senlon,
        _senalt = senalt,
        _dewPoint = dewPoint,
        _relHumidity = relHumidity,
        _indexRefraction = indexRefraction,
        _soilMoisture = soilMoisture,
        _surroundingWeather = surroundingWeather,
        _weatherAmp = weatherAmp,
        _contrailHghtLower = contrailHghtLower,
        _contrailHghtUpper = contrailHghtUpper,
        _icingUpperLimit = icingUpperLimit,
        _icingLowerLimit = icingLowerLimit,
        _enRouteWeather = enRouteWeather,
        _ccEvent = ccEvent,
        _srcTyps = srcTyps,
        _srcIds = srcIds,
        _origNetwork = origNetwork,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? weatherIdOffset = _weatherId == null ? null
        : fbBuilder.writeString(_weatherId!);
    final int? idGroundImageryOffset = _idGroundImagery == null ? null
        : fbBuilder.writeString(_idGroundImagery!);
    final int? idSiteOffset = _idSite == null ? null
        : fbBuilder.writeString(_idSite!);
    final int? idAirfieldOffset = _idAirfield == null ? null
        : fbBuilder.writeString(_idAirfield!);
    final int? icaoOffset = _icao == null ? null
        : fbBuilder.writeString(_icao!);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    final int? externalLocationIdOffset = _externalLocationId == null ? null
        : fbBuilder.writeString(_externalLocationId!);
    final int? reportTypeOffset = _reportType == null ? null
        : fbBuilder.writeString(_reportType!);
    final int? obTimeOffset = _obTime == null ? null
        : fbBuilder.writeString(_obTime!);
    final int? forecastStartTimeOffset = _forecastStartTime == null ? null
        : fbBuilder.writeString(_forecastStartTime!);
    final int? forecastEndTimeOffset = _forecastEndTime == null ? null
        : fbBuilder.writeString(_forecastEndTime!);
    final int? dataLevelOffset = _dataLevel == null ? null
        : fbBuilder.writeString(_dataLevel!);
    final int? areaOffset = _area == null ? null
        : fbBuilder.writeString(_area!);
    final int? atextOffset = _atext == null ? null
        : fbBuilder.writeString(_atext!);
    final int? agjsonOffset = _agjson == null ? null
        : fbBuilder.writeString(_agjson!);
    final int? atypeOffset = _atype == null ? null
        : fbBuilder.writeString(_atype!);
    final int? windCovOffset = _windCov == null ? null
        : fbBuilder.writeList(_windCov!.map(fbBuilder.writeString).toList());
    final int? cloudCoverOffset = _cloudCover == null ? null
        : fbBuilder.writeList(_cloudCover!.map(fbBuilder.writeString).toList());
    final int? cloudHghtOffset = _cloudHght == null ? null
        : fbBuilder.writeList(_cloudHght!.map(fbBuilder.writeString).toList());
    final int? actWeatherOffset = _actWeather == null ? null
        : fbBuilder.writeString(_actWeather!);
    final int? weatherDescOffset = _weatherDesc == null ? null
        : fbBuilder.writeString(_weatherDesc!);
    final int? weatherIntOffset = _weatherInt == null ? null
        : fbBuilder.writeString(_weatherInt!);
    final int? rawMetarOffset = _rawMetar == null ? null
        : fbBuilder.writeString(_rawMetar!);
    final int? rawTafOffset = _rawTaf == null ? null
        : fbBuilder.writeString(_rawTaf!);
    final int? surroundingWeatherOffset = _surroundingWeather == null ? null
        : fbBuilder.writeString(_surroundingWeather!);
    final int? weatherAmpOffset = _weatherAmp == null ? null
        : fbBuilder.writeString(_weatherAmp!);
    final int? enRouteWeatherOffset = _enRouteWeather == null ? null
        : fbBuilder.writeString(_enRouteWeather!);
    final int? srcTypsOffset = _srcTyps == null ? null
        : fbBuilder.writeList(_srcTyps!.map(fbBuilder.writeString).toList());
    final int? srcIdsOffset = _srcIds == null ? null
        : fbBuilder.writeList(_srcIds!.map(fbBuilder.writeString).toList());
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    fbBuilder.startTable(86);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idSensorOffset);
    fbBuilder.addOffset(3, origSensorIdOffset);
    fbBuilder.addOffset(4, weatherIdOffset);
    fbBuilder.addOffset(5, idGroundImageryOffset);
    fbBuilder.addOffset(6, idSiteOffset);
    fbBuilder.addOffset(7, idAirfieldOffset);
    fbBuilder.addOffset(8, icaoOffset);
    fbBuilder.addOffset(9, externalIdOffset);
    fbBuilder.addOffset(10, externalLocationIdOffset);
    fbBuilder.addOffset(11, reportTypeOffset);
    fbBuilder.addOffset(12, obTimeOffset);
    fbBuilder.addOffset(13, forecastStartTimeOffset);
    fbBuilder.addOffset(14, forecastEndTimeOffset);
    fbBuilder.addFloat64(15, _lat);
    fbBuilder.addFloat64(16, _lon);
    fbBuilder.addFloat64(17, _alt);
    fbBuilder.addFloat64(18, _geoPotentialAlt);
    fbBuilder.addOffset(19, dataLevelOffset);
    fbBuilder.addOffset(20, areaOffset);
    fbBuilder.addOffset(21, atextOffset);
    fbBuilder.addOffset(22, agjsonOffset);
    fbBuilder.addOffset(23, atypeOffset);
    fbBuilder.addInt32(24, _andims);
    fbBuilder.addInt32(25, _asrid);
    fbBuilder.addFloat64(26, _windSpd);
    fbBuilder.addFloat64(27, _windSpdAvg);
    fbBuilder.addFloat64(28, _windGust);
    fbBuilder.addFloat64(29, _windGust10);
    fbBuilder.addFloat64(30, _vshear);
    fbBuilder.addFloat64(31, _hshear);
    fbBuilder.addFloat64(32, _radVel);
    fbBuilder.addFloat64(33, _radVelBeam1);
    fbBuilder.addFloat64(34, _radVelBeam2);
    fbBuilder.addFloat64(35, _radVelBeam3);
    fbBuilder.addFloat64(36, _radVelBeam4);
    fbBuilder.addFloat64(37, _radVelBeam5);
    fbBuilder.addFloat64(38, _windDir);
    fbBuilder.addFloat64(39, _windDirAvg);
    fbBuilder.addFloat64(40, _windDirPeak);
    fbBuilder.addFloat64(41, _windDirPeak10);
    fbBuilder.addFloat64(42, _windChill);
    fbBuilder.addFloat64(43, _dirDev);
    fbBuilder.addBool(44, _windVar);
    fbBuilder.addOffset(45, windCovOffset);
    fbBuilder.addOffset(46, cloudCoverOffset);
    fbBuilder.addOffset(47, cloudHghtOffset);
    fbBuilder.addOffset(48, actWeatherOffset);
    fbBuilder.addOffset(49, weatherDescOffset);
    fbBuilder.addOffset(50, weatherIntOffset);
    fbBuilder.addOffset(51, rawMetarOffset);
    fbBuilder.addOffset(52, rawTafOffset);
    fbBuilder.addFloat64(53, _qnh);
    fbBuilder.addFloat64(54, _visibility);
    fbBuilder.addFloat64(55, _temperature);
    fbBuilder.addFloat64(56, _soilTemp);
    fbBuilder.addFloat64(57, _barPress);
    fbBuilder.addFloat64(58, _precipRate);
    fbBuilder.addFloat64(59, _rainHour);
    fbBuilder.addFloat64(60, _solarRad);
    fbBuilder.addFloat64(61, _difRad);
    fbBuilder.addFloat64(62, _refRad);
    fbBuilder.addFloat64(63, _senlat);
    fbBuilder.addFloat64(64, _senlon);
    fbBuilder.addFloat64(65, _senalt);
    fbBuilder.addFloat64(66, _dewPoint);
    fbBuilder.addFloat64(67, _relHumidity);
    fbBuilder.addFloat64(68, _indexRefraction);
    fbBuilder.addFloat64(69, _soilMoisture);
    fbBuilder.addOffset(70, surroundingWeatherOffset);
    fbBuilder.addOffset(71, weatherAmpOffset);
    fbBuilder.addFloat64(72, _contrailHghtLower);
    fbBuilder.addFloat64(73, _contrailHghtUpper);
    fbBuilder.addFloat64(74, _icingUpperLimit);
    fbBuilder.addFloat64(75, _icingLowerLimit);
    fbBuilder.addOffset(76, enRouteWeatherOffset);
    fbBuilder.addBool(77, _ccEvent);
    fbBuilder.addOffset(78, srcTypsOffset);
    fbBuilder.addOffset(79, srcIdsOffset);
    fbBuilder.addOffset(80, origNetworkOffset);
    fbBuilder.addOffset(81, createdAtOffset);
    fbBuilder.addOffset(82, createdByOffset);
    fbBuilder.addOffset(83, sourceOffset);
    fbBuilder.addOffset(84, originOffset);
    fbBuilder.addInt8(85, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
