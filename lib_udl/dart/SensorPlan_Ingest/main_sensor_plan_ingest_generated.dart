// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library sensor_plan_ingest;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './main_generated.dart' as ;

///  A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.
class SensorPlanIngest {
  SensorPlanIngest._(this._bc, this._bcOffset);
  factory SensorPlanIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SensorPlanIngest> reader = _SensorPlanIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: SENSORPLAN-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).
  ///  Example: PLAN
  ///  Constraints: Minimum length = 1, Maximum length = 12
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The type of records that comprise this parent set (COLLECT, CONTACT).
  ///  Example: COLLECT
  ///  Constraints: Minimum length = 1, Maximum length = 12
  String? get recType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The start time of the plan or schedule, in ISO 8601 UTC format.
  ///  Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The end time of the plan or schedule, in ISO 8601 UTC format.
  ///  Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get endTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Name associated with this plan or schedule.
  ///  Example: EXAMPLE NAME
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Unique identifier of the requested/schedule/planned sensor associated with this request.
  ///  Example: REF-SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The purpose/description of this plan or schedule.
  ///  Example: Example purpose
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get purpose => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The sensor or ground network associated with this plan or schedule.
  ///  Example: NETWORK
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get senNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.
  ///  Example: 2
  ///  Constraints: No constraints specified.
  int get reqTotal => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  The customer for this plan or schedule.
  ///  Example: CUSTOMER
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get customer => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).
  ///  Example: ACCEPTED
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Source of the data.
  ///  Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
  ///  Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SensorPlanIngestDataModeEnum get dataMode => SensorPlanIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 40, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The list of collect requests belonging to the SensorPlan. Each collect request is associated with a parent SensorPlan via the IdPlan. If provided, the list must have the same size as reqTotal.
  ///  Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get collectRequests => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 46);

  @override
  String toString() {
    return 'SensorPlanIngest{id: ${id}, classificationMarking: ${classificationMarking}, type: ${type}, recType: ${recType}, startTime: ${startTime}, endTime: ${endTime}, name: ${name}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, purpose: ${purpose}, senNetwork: ${senNetwork}, reqTotal: ${reqTotal}, customer: ${customer}, status: ${status}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}, collectRequests: ${collectRequests}, tags: ${tags}}';
  }
}

class _SensorPlanIngestReader extends fb.TableReader<SensorPlanIngest> {
  const _SensorPlanIngestReader();

  @override
  SensorPlanIngest createObject(fb.BufferContext bc, int offset) => 
    SensorPlanIngest._(bc, offset);
}

class SensorPlanIngestBuilder {
  SensorPlanIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(22);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addRecTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addPurposeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSenNetworkOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addReqTotal(int? reqTotal) {
    fbBuilder.addInt32(11, reqTotal);
    return fbBuilder.offset;
  }
  int addCustomerOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SensorPlanIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(18, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addCollectRequestsOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SensorPlanIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _type;
  final String? _recType;
  final String? _startTime;
  final String? _endTime;
  final String? _name;
  final String? _idSensor;
  final String? _origSensorId;
  final String? _purpose;
  final String? _senNetwork;
  final int? _reqTotal;
  final String? _customer;
  final String? _status;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final SensorPlanIngestDataModeEnum? _dataMode;
  final String? _origNetwork;
  final List<String>? _collectRequests;
  final List<String>? _tags;

  SensorPlanIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? type,
    String? recType,
    String? startTime,
    String? endTime,
    String? name,
    String? idSensor,
    String? origSensorId,
    String? purpose,
    String? senNetwork,
    int? reqTotal,
    String? customer,
    String? status,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    SensorPlanIngestDataModeEnum? dataMode,
    String? origNetwork,
    List<String>? collectRequests,
    List<String>? tags,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _type = type,
        _recType = recType,
        _startTime = startTime,
        _endTime = endTime,
        _name = name,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _purpose = purpose,
        _senNetwork = senNetwork,
        _reqTotal = reqTotal,
        _customer = customer,
        _status = status,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork,
        _collectRequests = collectRequests,
        _tags = tags;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? recTypeOffset = _recType == null ? null
        : fbBuilder.writeString(_recType!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? endTimeOffset = _endTime == null ? null
        : fbBuilder.writeString(_endTime!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? purposeOffset = _purpose == null ? null
        : fbBuilder.writeString(_purpose!);
    final int? senNetworkOffset = _senNetwork == null ? null
        : fbBuilder.writeString(_senNetwork!);
    final int? customerOffset = _customer == null ? null
        : fbBuilder.writeString(_customer!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? collectRequestsOffset = _collectRequests == null ? null
        : fbBuilder.writeList(_collectRequests!.map(fbBuilder.writeString).toList());
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(22);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, typeOffset);
    fbBuilder.addOffset(3, recTypeOffset);
    fbBuilder.addOffset(4, startTimeOffset);
    fbBuilder.addOffset(5, endTimeOffset);
    fbBuilder.addOffset(6, nameOffset);
    fbBuilder.addOffset(7, idSensorOffset);
    fbBuilder.addOffset(8, origSensorIdOffset);
    fbBuilder.addOffset(9, purposeOffset);
    fbBuilder.addOffset(10, senNetworkOffset);
    fbBuilder.addInt32(11, _reqTotal);
    fbBuilder.addOffset(12, customerOffset);
    fbBuilder.addOffset(13, statusOffset);
    fbBuilder.addOffset(14, createdAtOffset);
    fbBuilder.addOffset(15, createdByOffset);
    fbBuilder.addOffset(16, sourceOffset);
    fbBuilder.addOffset(17, originOffset);
    fbBuilder.addInt8(18, _dataMode?.value);
    fbBuilder.addOffset(19, origNetworkOffset);
    fbBuilder.addOffset(20, collectRequestsOffset);
    fbBuilder.addOffset(21, tagsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
