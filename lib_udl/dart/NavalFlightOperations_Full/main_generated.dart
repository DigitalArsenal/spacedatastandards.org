// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection that specifies the naval flight operations for this ATO.
class NavalFlightOperationsFull {
  NavalFlightOperationsFull._(this._bc, this._bcOffset);
  factory NavalFlightOperationsFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NavalFlightOperationsFull> reader = _NavalFlightOperationsFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
  ///  Example: /// Example: USS WASP
  ///  Constraints: Minimum length = 1, Maximum length = 48
  String? get shipName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The time when flight operations begin in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get fltOpStart => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The time when flight operations end in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get fltOpStop => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  An array of times at which an aircraft will be launched and/or recovered in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: ['2021-02-25T12:00:00.123Z']
  ///  Constraints: No constraints specified.
  List<String>? get schdLaunchRcvyTime => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'NavalFlightOperationsFull{shipName: ${shipName}, fltOpStart: ${fltOpStart}, fltOpStop: ${fltOpStop}, schdLaunchRcvyTime: ${schdLaunchRcvyTime}}';
  }
}

class _NavalFlightOperationsFullReader extends fb.TableReader<NavalFlightOperationsFull> {
  const _NavalFlightOperationsFullReader();

  @override
  NavalFlightOperationsFull createObject(fb.BufferContext bc, int offset) => 
    NavalFlightOperationsFull._(bc, offset);
}

class NavalFlightOperationsFullBuilder {
  NavalFlightOperationsFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addShipNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFltOpStartOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFltOpStopOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSchdLaunchRcvyTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NavalFlightOperationsFullObjectBuilder extends fb.ObjectBuilder {
  final String? _shipName;
  final String? _fltOpStart;
  final String? _fltOpStop;
  final List<String>? _schdLaunchRcvyTime;

  NavalFlightOperationsFullObjectBuilder({
    String? shipName,
    String? fltOpStart,
    String? fltOpStop,
    List<String>? schdLaunchRcvyTime,
  })
      : _shipName = shipName,
        _fltOpStart = fltOpStart,
        _fltOpStop = fltOpStop,
        _schdLaunchRcvyTime = schdLaunchRcvyTime;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? shipNameOffset = _shipName == null ? null
        : fbBuilder.writeString(_shipName!);
    final int? fltOpStartOffset = _fltOpStart == null ? null
        : fbBuilder.writeString(_fltOpStart!);
    final int? fltOpStopOffset = _fltOpStop == null ? null
        : fbBuilder.writeString(_fltOpStop!);
    final int? schdLaunchRcvyTimeOffset = _schdLaunchRcvyTime == null ? null
        : fbBuilder.writeList(_schdLaunchRcvyTime!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, shipNameOffset);
    fbBuilder.addOffset(1, fltOpStartOffset);
    fbBuilder.addOffset(2, fltOpStopOffset);
    fbBuilder.addOffset(3, schdLaunchRcvyTimeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
