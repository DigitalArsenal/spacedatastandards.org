// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class EquipmentIngestDataModeEnum {
  final int value;
  const EquipmentIngestDataModeEnum._(this.value);

  factory EquipmentIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EquipmentIngestDataModeEnum');
    }
    return result;
  }

  static EquipmentIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : EquipmentIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const EquipmentIngestDataModeEnum REAL = EquipmentIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const EquipmentIngestDataModeEnum TEST = EquipmentIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const EquipmentIngestDataModeEnum SIMULATED = EquipmentIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const EquipmentIngestDataModeEnum EXERCISE = EquipmentIngestDataModeEnum._(3);
  static const Map<int, EquipmentIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<EquipmentIngestDataModeEnum> reader = _EquipmentIngestDataModeEnumReader();

  @override
  String toString() {
    return 'EquipmentIngestDataModeEnum{value: $value}';
  }
}

class _EquipmentIngestDataModeEnumReader extends fb.Reader<EquipmentIngestDataModeEnum> {
  const _EquipmentIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  EquipmentIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      EquipmentIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Properties and characteristics of equipment that can be associated with a site or other entity.
class EquipmentIngest {
  EquipmentIngest._(this._bc, this._bcOffset);
  factory EquipmentIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EquipmentIngest> reader = _EquipmentIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the Parent equipment record associated with this equipment record.
  ///  Example: /// Example: PARENT-EQUIPMENT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idParentEquipment => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the Site Entity associated with the equipment record.
  ///  Example: /// Example: SITE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSite => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Unique identifier of the operating unit associated with the equipment record.
  ///  Example: /// Example: UNIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOperatingUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the Equipment record from the originating system.
  ///  Example: /// Example: ORIG-EQP-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get altEqpId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Designated equipment code assigned to the item of equipment or an abbreviation record type unique identifier. Users should consult the data provider for information on the equipment code structure.
  ///  Example: /// Example: X12345
  ///  Constraints: Minimum length = 0, Maximum length = 7
  String? get eqpCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Uniquely identifies each item or group of equipment associated with a unit, facility or site.
  ///  Example: /// Example: 001
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get eqpIdNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The DoD Standard Country Code designator for the country or political entity to which the equipment geographic coordinates reside. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: IQ
  ///  Constraints: Minimum length = 1, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
  ///  Example: /// Example: IZ
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get altCountryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  World Aeronautical Chart identifier for the area in which a designated place is located.
  ///  Example: /// Example: 0427
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get wac => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Provider specific sequential number assigned to the equipment.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get seqNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  Generic type this specific piece of equipment belongs to, and the identifying nomenclature which describes the equipment.
  ///  Example: /// Example: AMPHIBIOUS WARFARE SHIP
  ///  Constraints: Minimum length = 0, Maximum length = 54
  String? get nomen => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: OPR
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get operStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The physical manner of being or state of existence of the entity.  A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: RDY
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get condition => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Availability of the entity relative to its condition.  Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get conditionAvail => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  int get eval => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 36, 0);
  ///  Functional Production Area (FPA) under the Shared Production Program (SPP).  Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: NOB
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get fpa => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Indicates the function or mission of this equipment, which may or may not be engaged in at any particular time.  Typically refers to a unit, organization, or installation/facility performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: OCC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get function => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
  ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
  ///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
  ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///  PENDING: Track object which has not been evaluated.
  ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get ident => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The DoD Standard Country Code designator for the country or political entity to which the equipment owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: OTHR
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get allegiance => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
  ///  Example: /// Example: HL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get altAllegiance => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Indicates the reason that the equipment is at that location. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: GR
  ///  Constraints: Minimum length = 0, Maximum length = 9
  String? get locReason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Internationally recognized water area in which the vessel is most likely to be deployed or in which it normally operates most frequently.
  ///  Example: /// Example: Territorial Sea
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get operAreaPrimary => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Principal operational function being performed.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: JG
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get functPrimary => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: WGS
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get coordDatum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc. specified in degrees, minute, and seconds.
  ///  Pos. 1-2.  Latitude Degrees     [00-90]
  ///  Pos. 3-4.  Latitude Minutes     [00-59]
  ///  Pos. 5-6.  Latitude Seconds     [00-59]
  ///  Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
  ///  Pos. 10. Latitude Hemisphere       [NS] 
  ///  Pos. 11-13. Longitude Degrees     [00-180] 
  ///  Pos. 14-15. Longitude Minutes     [00-59] 
  ///  Pos. 16-17. Longitude Seconds     [00-59] 
  ///  Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
  ///  Pos. 21. Longitude Hemisphere     [EW]
  ///  Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]].
  ///  Example: /// Example: 340000000N0430000000E
  ///  Constraints: Minimum length = 0, Maximum length = 21
  String? get coord => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Indicates the plus or minus error assessed against the method used to derive the coordinate.
  ///  Example: /// Example: 12.345
  ///  Constraints: No constraints specified.
  double get coordDerivAcc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 39.019242
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -104.251659
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Ground elevation, in meters, of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
  ///  Example: /// Example: 123.45
  ///  Constraints: No constraints specified.
  double get elevMsl => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy. Confidence level has a range of values from 0 to 100, with 100 being highest level of confidence.
  ///  Example: /// Example: 50
  ///  Constraints: No constraints specified.
  int get elevMslConfLvl => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 66, 0);
  ///  Indicates the plus or minus error assessed against the method used to derive the elevation, measured in meters.
  ///  Example: /// Example: 12.34
  ///  Constraints: No constraints specified.
  double get elevMslDerivAcc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  The distance between Mean Sea Level and a referenced ellipsoid, measured in meters.
  ///  Example: /// Example: 12.34
  ///  Constraints: No constraints specified.
  double get geoidalMslSep => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Indicates the grid system used in the development of the milGrid coordinates. Values are:
  ///  UPS - Universal Polar System
  ///  UTM - Universal Transverse Mercator.
  ///  Example: /// Example: UTM
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get milGridSys => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  ///  4Q (grid zone designator, GZD)
  ///  FJ (the 100,000-meter square identifier)
  ///  12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  ///  Example: /// Example: 4QFJ12345678
  ///  Constraints: Minimum length = 0, Maximum length = 15
  String? get milGrid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Universal Transverse Mercator (UTM) grid coordinates.
  ///  Pos. 1-2, UTM Zone Column   [01-60
  ///  Pos. 3, UTM Zone Row   [C-HJ-NP-X]
  ///  Pos. 4, UTM False Easting   [0-9]
  ///  Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
  ///  Pos. 10-11, UTM False Northing    [0-9][0-9]
  ///  Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
  ///  Example: /// Example: 19P4390691376966
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get utm => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
  ///  Example: /// Example: AL006
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get airDefArea => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: IZ07
  ///  Constraints: Minimum length = 0, Maximum length = 7
  String? get polSubdiv => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Relative to the parent entity, the total number of military personnel or equipment assessed to be on-hand (OH).
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  int get qtyOh => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 82, 0);
  ///  A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
  ///  Example: /// Example: SOGPU----------
  ///  Constraints: Minimum length = 0, Maximum length = 15
  String? get symCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Indicates the importance of the equipment. Referenced, but not constrained to, the following class ratings type classifications.
  ///  0 - Not of significant importance of the system
  ///  1 - Primary importance to system
  ///  2 - Secondary importance to system
  ///  3 - Tertiary importance to system
  ///  O - Other. Explain in Remarks.
  ///  Example: /// Example: 1
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get classRating => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Referenced, but not constrained to, the following record status type classifications.
  ///  A - Active
  ///  I - Inactive
  ///  K - Acknowledged
  ///  L - Local
  ///  Q - A nominated (NOM) or Data Change Request (DCR) record
  ///  R - Production reduced by CMD decision
  ///  W - Working Record.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get recStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
  ///  Example: /// Example: 2008-06-10
  ///  Constraints: No constraints specified.
  String? get reviewDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  Responsible Producer - Organization that is responsible for the maintenance of the record.
  ///  Example: /// Example: RT
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get resProd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: Provider Reference Documentation
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get referenceDoc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Array of UDL record types such as AIRCRAFT, VESSEL, EO, MTI that are related to this equipment record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['AIRCRAFT']
  ///  Constraints: No constraints specified.
  List<String>? get srcTyps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 96);
  ///  Array of UUID(s) of the UDL data record(s) that are related to this equipment record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  ///  Example: /// Example: ['SRC_ID_1']
  ///  Constraints: No constraints specified.
  List<String>? get srcIds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 98);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  EquipmentIngestDataModeEnum get dataMode => EquipmentIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 108, 0));

  @override
  String toString() {
    return 'EquipmentIngest{id: ${id}, classificationMarking: ${classificationMarking}, idParentEquipment: ${idParentEquipment}, idSite: ${idSite}, idOperatingUnit: ${idOperatingUnit}, altEqpId: ${altEqpId}, eqpCode: ${eqpCode}, eqpIdNum: ${eqpIdNum}, countryCode: ${countryCode}, altCountryCode: ${altCountryCode}, wac: ${wac}, seqNum: ${seqNum}, nomen: ${nomen}, operStatus: ${operStatus}, condition: ${condition}, conditionAvail: ${conditionAvail}, eval: ${eval}, fpa: ${fpa}, function: ${function}, ident: ${ident}, allegiance: ${allegiance}, altAllegiance: ${altAllegiance}, locReason: ${locReason}, operAreaPrimary: ${operAreaPrimary}, functPrimary: ${functPrimary}, coordDatum: ${coordDatum}, coord: ${coord}, coordDerivAcc: ${coordDerivAcc}, lat: ${lat}, lon: ${lon}, elevMsl: ${elevMsl}, elevMslConfLvl: ${elevMslConfLvl}, elevMslDerivAcc: ${elevMslDerivAcc}, geoidalMslSep: ${geoidalMslSep}, milGridSys: ${milGridSys}, milGrid: ${milGrid}, utm: ${utm}, airDefArea: ${airDefArea}, polSubdiv: ${polSubdiv}, qtyOh: ${qtyOh}, symCode: ${symCode}, classRating: ${classRating}, recStatus: ${recStatus}, reviewDate: ${reviewDate}, resProd: ${resProd}, referenceDoc: ${referenceDoc}, srcTyps: ${srcTyps}, srcIds: ${srcIds}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}}';
  }
}

class _EquipmentIngestReader extends fb.TableReader<EquipmentIngest> {
  const _EquipmentIngestReader();

  @override
  EquipmentIngest createObject(fb.BufferContext bc, int offset) => 
    EquipmentIngest._(bc, offset);
}

class EquipmentIngestBuilder {
  EquipmentIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(53);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdParentEquipmentOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdSiteOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIdOperatingUnitOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addAltEqpIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addEqpCodeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addEqpIdNumOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addAltCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addWacOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addSeqNum(int? seqNum) {
    fbBuilder.addInt32(11, seqNum);
    return fbBuilder.offset;
  }
  int addNomenOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOperStatusOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addConditionOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addConditionAvailOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addEval(int? eval) {
    fbBuilder.addInt32(16, eval);
    return fbBuilder.offset;
  }
  int addFpaOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addFunctionOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addIdentOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addAllegianceOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addAltAllegianceOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addLocReasonOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addOperAreaPrimaryOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addFunctPrimaryOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addCoordDatumOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addCoordOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addCoordDerivAcc(double? coordDerivAcc) {
    fbBuilder.addFloat64(27, coordDerivAcc);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(28, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(29, lon);
    return fbBuilder.offset;
  }
  int addElevMsl(double? elevMsl) {
    fbBuilder.addFloat64(30, elevMsl);
    return fbBuilder.offset;
  }
  int addElevMslConfLvl(int? elevMslConfLvl) {
    fbBuilder.addInt32(31, elevMslConfLvl);
    return fbBuilder.offset;
  }
  int addElevMslDerivAcc(double? elevMslDerivAcc) {
    fbBuilder.addFloat64(32, elevMslDerivAcc);
    return fbBuilder.offset;
  }
  int addGeoidalMslSep(double? geoidalMslSep) {
    fbBuilder.addFloat64(33, geoidalMslSep);
    return fbBuilder.offset;
  }
  int addMilGridSysOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addMilGridOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addUtmOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addAirDefAreaOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addPolSubdivOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addQtyOh(int? qtyOh) {
    fbBuilder.addInt32(39, qtyOh);
    return fbBuilder.offset;
  }
  int addSymCodeOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addClassRatingOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addRecStatusOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addReviewDateOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addResProdOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addReferenceDocOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addSrcTypsOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addSrcIdsOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addDataMode(EquipmentIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(52, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EquipmentIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idParentEquipment;
  final String? _idSite;
  final String? _idOperatingUnit;
  final String? _altEqpId;
  final String? _eqpCode;
  final String? _eqpIdNum;
  final String? _countryCode;
  final String? _altCountryCode;
  final String? _wac;
  final int? _seqNum;
  final String? _nomen;
  final String? _operStatus;
  final String? _condition;
  final String? _conditionAvail;
  final int? _eval;
  final String? _fpa;
  final String? _function;
  final String? _ident;
  final String? _allegiance;
  final String? _altAllegiance;
  final String? _locReason;
  final String? _operAreaPrimary;
  final String? _functPrimary;
  final String? _coordDatum;
  final String? _coord;
  final double? _coordDerivAcc;
  final double? _lat;
  final double? _lon;
  final double? _elevMsl;
  final int? _elevMslConfLvl;
  final double? _elevMslDerivAcc;
  final double? _geoidalMslSep;
  final String? _milGridSys;
  final String? _milGrid;
  final String? _utm;
  final String? _airDefArea;
  final String? _polSubdiv;
  final int? _qtyOh;
  final String? _symCode;
  final String? _classRating;
  final String? _recStatus;
  final String? _reviewDate;
  final String? _resProd;
  final String? _referenceDoc;
  final List<String>? _srcTyps;
  final List<String>? _srcIds;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final EquipmentIngestDataModeEnum? _dataMode;

  EquipmentIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idParentEquipment,
    String? idSite,
    String? idOperatingUnit,
    String? altEqpId,
    String? eqpCode,
    String? eqpIdNum,
    String? countryCode,
    String? altCountryCode,
    String? wac,
    int? seqNum,
    String? nomen,
    String? operStatus,
    String? condition,
    String? conditionAvail,
    int? eval,
    String? fpa,
    String? function,
    String? ident,
    String? allegiance,
    String? altAllegiance,
    String? locReason,
    String? operAreaPrimary,
    String? functPrimary,
    String? coordDatum,
    String? coord,
    double? coordDerivAcc,
    double? lat,
    double? lon,
    double? elevMsl,
    int? elevMslConfLvl,
    double? elevMslDerivAcc,
    double? geoidalMslSep,
    String? milGridSys,
    String? milGrid,
    String? utm,
    String? airDefArea,
    String? polSubdiv,
    int? qtyOh,
    String? symCode,
    String? classRating,
    String? recStatus,
    String? reviewDate,
    String? resProd,
    String? referenceDoc,
    List<String>? srcTyps,
    List<String>? srcIds,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    EquipmentIngestDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idParentEquipment = idParentEquipment,
        _idSite = idSite,
        _idOperatingUnit = idOperatingUnit,
        _altEqpId = altEqpId,
        _eqpCode = eqpCode,
        _eqpIdNum = eqpIdNum,
        _countryCode = countryCode,
        _altCountryCode = altCountryCode,
        _wac = wac,
        _seqNum = seqNum,
        _nomen = nomen,
        _operStatus = operStatus,
        _condition = condition,
        _conditionAvail = conditionAvail,
        _eval = eval,
        _fpa = fpa,
        _function = function,
        _ident = ident,
        _allegiance = allegiance,
        _altAllegiance = altAllegiance,
        _locReason = locReason,
        _operAreaPrimary = operAreaPrimary,
        _functPrimary = functPrimary,
        _coordDatum = coordDatum,
        _coord = coord,
        _coordDerivAcc = coordDerivAcc,
        _lat = lat,
        _lon = lon,
        _elevMsl = elevMsl,
        _elevMslConfLvl = elevMslConfLvl,
        _elevMslDerivAcc = elevMslDerivAcc,
        _geoidalMslSep = geoidalMslSep,
        _milGridSys = milGridSys,
        _milGrid = milGrid,
        _utm = utm,
        _airDefArea = airDefArea,
        _polSubdiv = polSubdiv,
        _qtyOh = qtyOh,
        _symCode = symCode,
        _classRating = classRating,
        _recStatus = recStatus,
        _reviewDate = reviewDate,
        _resProd = resProd,
        _referenceDoc = referenceDoc,
        _srcTyps = srcTyps,
        _srcIds = srcIds,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idParentEquipmentOffset = _idParentEquipment == null ? null
        : fbBuilder.writeString(_idParentEquipment!);
    final int? idSiteOffset = _idSite == null ? null
        : fbBuilder.writeString(_idSite!);
    final int? idOperatingUnitOffset = _idOperatingUnit == null ? null
        : fbBuilder.writeString(_idOperatingUnit!);
    final int? altEqpIdOffset = _altEqpId == null ? null
        : fbBuilder.writeString(_altEqpId!);
    final int? eqpCodeOffset = _eqpCode == null ? null
        : fbBuilder.writeString(_eqpCode!);
    final int? eqpIdNumOffset = _eqpIdNum == null ? null
        : fbBuilder.writeString(_eqpIdNum!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? altCountryCodeOffset = _altCountryCode == null ? null
        : fbBuilder.writeString(_altCountryCode!);
    final int? wacOffset = _wac == null ? null
        : fbBuilder.writeString(_wac!);
    final int? nomenOffset = _nomen == null ? null
        : fbBuilder.writeString(_nomen!);
    final int? operStatusOffset = _operStatus == null ? null
        : fbBuilder.writeString(_operStatus!);
    final int? conditionOffset = _condition == null ? null
        : fbBuilder.writeString(_condition!);
    final int? conditionAvailOffset = _conditionAvail == null ? null
        : fbBuilder.writeString(_conditionAvail!);
    final int? fpaOffset = _fpa == null ? null
        : fbBuilder.writeString(_fpa!);
    final int? functionOffset = _function == null ? null
        : fbBuilder.writeString(_function!);
    final int? identOffset = _ident == null ? null
        : fbBuilder.writeString(_ident!);
    final int? allegianceOffset = _allegiance == null ? null
        : fbBuilder.writeString(_allegiance!);
    final int? altAllegianceOffset = _altAllegiance == null ? null
        : fbBuilder.writeString(_altAllegiance!);
    final int? locReasonOffset = _locReason == null ? null
        : fbBuilder.writeString(_locReason!);
    final int? operAreaPrimaryOffset = _operAreaPrimary == null ? null
        : fbBuilder.writeString(_operAreaPrimary!);
    final int? functPrimaryOffset = _functPrimary == null ? null
        : fbBuilder.writeString(_functPrimary!);
    final int? coordDatumOffset = _coordDatum == null ? null
        : fbBuilder.writeString(_coordDatum!);
    final int? coordOffset = _coord == null ? null
        : fbBuilder.writeString(_coord!);
    final int? milGridSysOffset = _milGridSys == null ? null
        : fbBuilder.writeString(_milGridSys!);
    final int? milGridOffset = _milGrid == null ? null
        : fbBuilder.writeString(_milGrid!);
    final int? utmOffset = _utm == null ? null
        : fbBuilder.writeString(_utm!);
    final int? airDefAreaOffset = _airDefArea == null ? null
        : fbBuilder.writeString(_airDefArea!);
    final int? polSubdivOffset = _polSubdiv == null ? null
        : fbBuilder.writeString(_polSubdiv!);
    final int? symCodeOffset = _symCode == null ? null
        : fbBuilder.writeString(_symCode!);
    final int? classRatingOffset = _classRating == null ? null
        : fbBuilder.writeString(_classRating!);
    final int? recStatusOffset = _recStatus == null ? null
        : fbBuilder.writeString(_recStatus!);
    final int? reviewDateOffset = _reviewDate == null ? null
        : fbBuilder.writeString(_reviewDate!);
    final int? resProdOffset = _resProd == null ? null
        : fbBuilder.writeString(_resProd!);
    final int? referenceDocOffset = _referenceDoc == null ? null
        : fbBuilder.writeString(_referenceDoc!);
    final int? srcTypsOffset = _srcTyps == null ? null
        : fbBuilder.writeList(_srcTyps!.map(fbBuilder.writeString).toList());
    final int? srcIdsOffset = _srcIds == null ? null
        : fbBuilder.writeList(_srcIds!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    fbBuilder.startTable(53);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idParentEquipmentOffset);
    fbBuilder.addOffset(3, idSiteOffset);
    fbBuilder.addOffset(4, idOperatingUnitOffset);
    fbBuilder.addOffset(5, altEqpIdOffset);
    fbBuilder.addOffset(6, eqpCodeOffset);
    fbBuilder.addOffset(7, eqpIdNumOffset);
    fbBuilder.addOffset(8, countryCodeOffset);
    fbBuilder.addOffset(9, altCountryCodeOffset);
    fbBuilder.addOffset(10, wacOffset);
    fbBuilder.addInt32(11, _seqNum);
    fbBuilder.addOffset(12, nomenOffset);
    fbBuilder.addOffset(13, operStatusOffset);
    fbBuilder.addOffset(14, conditionOffset);
    fbBuilder.addOffset(15, conditionAvailOffset);
    fbBuilder.addInt32(16, _eval);
    fbBuilder.addOffset(17, fpaOffset);
    fbBuilder.addOffset(18, functionOffset);
    fbBuilder.addOffset(19, identOffset);
    fbBuilder.addOffset(20, allegianceOffset);
    fbBuilder.addOffset(21, altAllegianceOffset);
    fbBuilder.addOffset(22, locReasonOffset);
    fbBuilder.addOffset(23, operAreaPrimaryOffset);
    fbBuilder.addOffset(24, functPrimaryOffset);
    fbBuilder.addOffset(25, coordDatumOffset);
    fbBuilder.addOffset(26, coordOffset);
    fbBuilder.addFloat64(27, _coordDerivAcc);
    fbBuilder.addFloat64(28, _lat);
    fbBuilder.addFloat64(29, _lon);
    fbBuilder.addFloat64(30, _elevMsl);
    fbBuilder.addInt32(31, _elevMslConfLvl);
    fbBuilder.addFloat64(32, _elevMslDerivAcc);
    fbBuilder.addFloat64(33, _geoidalMslSep);
    fbBuilder.addOffset(34, milGridSysOffset);
    fbBuilder.addOffset(35, milGridOffset);
    fbBuilder.addOffset(36, utmOffset);
    fbBuilder.addOffset(37, airDefAreaOffset);
    fbBuilder.addOffset(38, polSubdivOffset);
    fbBuilder.addInt32(39, _qtyOh);
    fbBuilder.addOffset(40, symCodeOffset);
    fbBuilder.addOffset(41, classRatingOffset);
    fbBuilder.addOffset(42, recStatusOffset);
    fbBuilder.addOffset(43, reviewDateOffset);
    fbBuilder.addOffset(44, resProdOffset);
    fbBuilder.addOffset(45, referenceDocOffset);
    fbBuilder.addOffset(46, srcTypsOffset);
    fbBuilder.addOffset(47, srcIdsOffset);
    fbBuilder.addOffset(48, createdAtOffset);
    fbBuilder.addOffset(49, createdByOffset);
    fbBuilder.addOffset(50, sourceOffset);
    fbBuilder.addOffset(51, originOffset);
    fbBuilder.addInt8(52, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
