// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class PersonnelRecoveryAbridgedDataModeEnum {
  final int value;
  const PersonnelRecoveryAbridgedDataModeEnum._(this.value);

  factory PersonnelRecoveryAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum PersonnelRecoveryAbridgedDataModeEnum');
    }
    return result;
  }

  static PersonnelRecoveryAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : PersonnelRecoveryAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const PersonnelRecoveryAbridgedDataModeEnum REAL = PersonnelRecoveryAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const PersonnelRecoveryAbridgedDataModeEnum TEST = PersonnelRecoveryAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const PersonnelRecoveryAbridgedDataModeEnum SIMULATED = PersonnelRecoveryAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const PersonnelRecoveryAbridgedDataModeEnum EXERCISE = PersonnelRecoveryAbridgedDataModeEnum._(3);
  static const Map<int, PersonnelRecoveryAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<PersonnelRecoveryAbridgedDataModeEnum> reader = _PersonnelRecoveryAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'PersonnelRecoveryAbridgedDataModeEnum{value: $value}';
  }
}

class _PersonnelRecoveryAbridgedDataModeEnumReader extends fb.Reader<PersonnelRecoveryAbridgedDataModeEnum> {
  const _PersonnelRecoveryAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  PersonnelRecoveryAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      PersonnelRecoveryAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Provides information concerning search and rescue operations and other situations involving personnel recovery.
class PersonnelRecoveryAbridged {
  PersonnelRecoveryAbridged._(this._bc, this._bcOffset);
  factory PersonnelRecoveryAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersonnelRecoveryAbridged> reader = _PersonnelRecoveryAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: PERSONNEL_RECOVERY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Specifies the type of incident resulting in a recovery or evacuation mission.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Emergency Type (e.g. NO STATEMENT, DOWN AIRCRAFT, MAN IN WATER, DITCHING, BAILOUT, DISTRESSED VEHICLE, GROUND INCIDENT, MEDICAL, ISOLATED PERSONS, etc.).
  ///  Example: /// Example: MEDICAL
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Time stamp of the original personnel recovery message, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-10-15T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get msgTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  UUID identifying the Personnel Recovery  mission, which should remain the same on subsequent posts related to the same recovery mission.
  ///  Example: /// Example: RECOV-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get recovId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of a weather report associated with this recovery.
  ///  Example: /// Example: WEATHER_REPORT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idWeatherReport => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 75.1234
  ///  Constraints: No constraints specified.
  double get pickupLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 175.1234
  ///  Constraints: No constraints specified.
  double get pickupLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point eight below ellipsoid.
  ///  Example: /// Example: 30.1234
  ///  Constraints: No constraints specified.
  double get pickupAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Flag indicating the cancellation of this recovery.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get termInd => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);
  ///  The confirmation status of the isolated personnel identity. Intended as, but not constrained to, MIL-STD-6016 J6.1 Authentication Status, Isolated Personnel (NO STATEMENT, AUTHENTICATED, NOT AUTHENTICATED, AUTHENTICATED UNDER DURESS, NOT APPLICABLE):
  ///  AUTHENTICATED:  Confirmed Friend
  ///  NOT AUTHENTICATED: Unconfirmed status
  ///  AUTHENTICATED UNDER DURESS:  Authentication comprised by hostiles.
  ///  NOT APPLICABLE:  Authentication not required.
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get authStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The count of persons requiring recovery.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numPersons => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  The military classification of the personnel to be recovered. Intended as, but not constrained to, MIL-STD-6016 J6.1 Isolated Personnel Classification (NO STATEMENT, MILITARY, GOVERNMENT CIVILIAN, GOVERNMENT CONTRACTOR, CIVILIAN, MULTIPLE CLASSIFICATIONS).
  ///  Example: /// Example: CIVILIAN
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get milClass => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The country of origin or political entity of an isolated person subject to rescue or evacuation. If natAlliance is set to 126, then natAlliance1 must be non 0. If natAlliance is any number other than 126, then natAlliance1 will be set to 0 regardless. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s).
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get natAlliance => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 30, 0);
  ///  Extended country of origin or political entity of an isolated person subject to rescue or evacuation. Specify an entry here only if natAlliance is 126. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s), 1.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get natAlliance1 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  The survivor service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVIILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
  ///  Example: /// Example: NEUTRAL CIVILIAN
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get identity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
  ///  Example: /// Example: LL PHONE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get commEq1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
  ///  Example: /// Example: LL PHONE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get commEq2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
  ///  Example: /// Example: LL PHONE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get commEq3 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Transmit voice frequency in 5Hz increments.
  ///  Example: /// Example: 5.5
  ///  Constraints: No constraints specified.
  double get txFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Receive voice frequency in 5Hz increments. This field will auto populate with the txFreq value if the post element is null.
  ///  Example: /// Example: 5.5
  ///  Constraints: No constraints specified.
  double get rxFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Number of littered personnel requiring recovery.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get numNonAmbulatory => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 46, 0);
  ///  Number of ambulatory personnel requiring recovery.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numAmbulatory => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 48, 0);
  ///  Number of injured, but ambulatory, personnel requiring recovery.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get numAmbulatoryInjured => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 50, 0);
  ///  Survivor radio equipment. Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Type (NO STATEMENT, PRQ7SEL, PRC90, PRC112, PRC112B B1, PRC112C, PRC112D, PRC148 MBITR, PRC148 JEM, PRC149, PRC152, ACRPLB, OTHER).
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get survivorRadio => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Preloaded message conveying the situation confronting the isolated person(s). Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Messages (e.g. INJURED CANT MOVE NO KNOWN HOSTILES, INJURED CANT MOVE HOSTILES NEARBY, UNINJURED CANT MOVE HOSTILES NEARBY, UNINJURED NO KNOWN HOSTILES, INJURED LIMITED MOBILITY).
  ///  Example: /// Example: UNINJURED CANT MOVE HOSTILES NEARBY
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get survivorMessages => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Flag indicating whether a radio identifier is reported.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get beaconInd => const fb.BoolReader().vTableGet(_bc, _bcOffset, 56, false);
  ///  The call sign of the personnel to be recovered.
  ///  Example: /// Example: BADGER
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get callSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Additional specific messages received from survivor.
  ///  Example: /// Example: Additional message from survivor.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get textMsg => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Mechanism used to verify the survivors identity.
  ///  Example: /// Example: PASSPORT
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get authMethod => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get objectiveAreaInfo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get executionInfo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  PersonnelRecoveryAbridgedDataModeEnum get dataMode => PersonnelRecoveryAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 78, 0));

  @override
  String toString() {
    return 'PersonnelRecoveryAbridged{id: ${id}, classificationMarking: ${classificationMarking}, type: ${type}, msgTime: ${msgTime}, recovId: ${recovId}, idWeatherReport: ${idWeatherReport}, pickupLat: ${pickupLat}, pickupLon: ${pickupLon}, pickupAlt: ${pickupAlt}, termInd: ${termInd}, authStatus: ${authStatus}, numPersons: ${numPersons}, milClass: ${milClass}, natAlliance: ${natAlliance}, natAlliance1: ${natAlliance1}, identity: ${identity}, commEq1: ${commEq1}, commEq2: ${commEq2}, commEq3: ${commEq3}, txFreq: ${txFreq}, rxFreq: ${rxFreq}, numNonAmbulatory: ${numNonAmbulatory}, numAmbulatory: ${numAmbulatory}, numAmbulatoryInjured: ${numAmbulatoryInjured}, survivorRadio: ${survivorRadio}, survivorMessages: ${survivorMessages}, beaconInd: ${beaconInd}, callSign: ${callSign}, textMsg: ${textMsg}, authMethod: ${authMethod}, objectiveAreaInfo: ${objectiveAreaInfo}, executionInfo: ${executionInfo}, origNetwork: ${origNetwork}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}}';
  }
}

class _PersonnelRecoveryAbridgedReader extends fb.TableReader<PersonnelRecoveryAbridged> {
  const _PersonnelRecoveryAbridgedReader();

  @override
  PersonnelRecoveryAbridged createObject(fb.BufferContext bc, int offset) => 
    PersonnelRecoveryAbridged._(bc, offset);
}

class PersonnelRecoveryAbridgedBuilder {
  PersonnelRecoveryAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(38);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMsgTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addRecovIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdWeatherReportOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addPickupLat(double? pickupLat) {
    fbBuilder.addFloat64(6, pickupLat);
    return fbBuilder.offset;
  }
  int addPickupLon(double? pickupLon) {
    fbBuilder.addFloat64(7, pickupLon);
    return fbBuilder.offset;
  }
  int addPickupAlt(double? pickupAlt) {
    fbBuilder.addFloat64(8, pickupAlt);
    return fbBuilder.offset;
  }
  int addTermInd(bool? termInd) {
    fbBuilder.addBool(9, termInd);
    return fbBuilder.offset;
  }
  int addAuthStatusOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addNumPersons(int? numPersons) {
    fbBuilder.addInt32(11, numPersons);
    return fbBuilder.offset;
  }
  int addMilClassOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addNatAlliance(int? natAlliance) {
    fbBuilder.addInt32(13, natAlliance);
    return fbBuilder.offset;
  }
  int addNatAlliance1(int? natAlliance1) {
    fbBuilder.addInt32(14, natAlliance1);
    return fbBuilder.offset;
  }
  int addIdentityOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addCommEq1Offset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addCommEq2Offset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addCommEq3Offset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addTxFreq(double? txFreq) {
    fbBuilder.addFloat64(19, txFreq);
    return fbBuilder.offset;
  }
  int addRxFreq(double? rxFreq) {
    fbBuilder.addFloat64(20, rxFreq);
    return fbBuilder.offset;
  }
  int addNumNonAmbulatory(int? numNonAmbulatory) {
    fbBuilder.addInt32(21, numNonAmbulatory);
    return fbBuilder.offset;
  }
  int addNumAmbulatory(int? numAmbulatory) {
    fbBuilder.addInt32(22, numAmbulatory);
    return fbBuilder.offset;
  }
  int addNumAmbulatoryInjured(int? numAmbulatoryInjured) {
    fbBuilder.addInt32(23, numAmbulatoryInjured);
    return fbBuilder.offset;
  }
  int addSurvivorRadioOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addSurvivorMessagesOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addBeaconInd(bool? beaconInd) {
    fbBuilder.addBool(26, beaconInd);
    return fbBuilder.offset;
  }
  int addCallSignOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addTextMsgOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addAuthMethodOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addObjectiveAreaInfoOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addExecutionInfoOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addDataMode(PersonnelRecoveryAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(37, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersonnelRecoveryAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _type;
  final String? _msgTime;
  final String? _recovId;
  final String? _idWeatherReport;
  final double? _pickupLat;
  final double? _pickupLon;
  final double? _pickupAlt;
  final bool? _termInd;
  final String? _authStatus;
  final int? _numPersons;
  final String? _milClass;
  final int? _natAlliance;
  final int? _natAlliance1;
  final String? _identity;
  final String? _commEq1;
  final String? _commEq2;
  final String? _commEq3;
  final double? _txFreq;
  final double? _rxFreq;
  final int? _numNonAmbulatory;
  final int? _numAmbulatory;
  final int? _numAmbulatoryInjured;
  final String? _survivorRadio;
  final String? _survivorMessages;
  final bool? _beaconInd;
  final String? _callSign;
  final String? _textMsg;
  final String? _authMethod;
  final String? _objectiveAreaInfo;
  final String? _executionInfo;
  final String? _origNetwork;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final PersonnelRecoveryAbridgedDataModeEnum? _dataMode;

  PersonnelRecoveryAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? type,
    String? msgTime,
    String? recovId,
    String? idWeatherReport,
    double? pickupLat,
    double? pickupLon,
    double? pickupAlt,
    bool? termInd,
    String? authStatus,
    int? numPersons,
    String? milClass,
    int? natAlliance,
    int? natAlliance1,
    String? identity,
    String? commEq1,
    String? commEq2,
    String? commEq3,
    double? txFreq,
    double? rxFreq,
    int? numNonAmbulatory,
    int? numAmbulatory,
    int? numAmbulatoryInjured,
    String? survivorRadio,
    String? survivorMessages,
    bool? beaconInd,
    String? callSign,
    String? textMsg,
    String? authMethod,
    String? objectiveAreaInfo,
    String? executionInfo,
    String? origNetwork,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    PersonnelRecoveryAbridgedDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _type = type,
        _msgTime = msgTime,
        _recovId = recovId,
        _idWeatherReport = idWeatherReport,
        _pickupLat = pickupLat,
        _pickupLon = pickupLon,
        _pickupAlt = pickupAlt,
        _termInd = termInd,
        _authStatus = authStatus,
        _numPersons = numPersons,
        _milClass = milClass,
        _natAlliance = natAlliance,
        _natAlliance1 = natAlliance1,
        _identity = identity,
        _commEq1 = commEq1,
        _commEq2 = commEq2,
        _commEq3 = commEq3,
        _txFreq = txFreq,
        _rxFreq = rxFreq,
        _numNonAmbulatory = numNonAmbulatory,
        _numAmbulatory = numAmbulatory,
        _numAmbulatoryInjured = numAmbulatoryInjured,
        _survivorRadio = survivorRadio,
        _survivorMessages = survivorMessages,
        _beaconInd = beaconInd,
        _callSign = callSign,
        _textMsg = textMsg,
        _authMethod = authMethod,
        _objectiveAreaInfo = objectiveAreaInfo,
        _executionInfo = executionInfo,
        _origNetwork = origNetwork,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? msgTimeOffset = _msgTime == null ? null
        : fbBuilder.writeString(_msgTime!);
    final int? recovIdOffset = _recovId == null ? null
        : fbBuilder.writeString(_recovId!);
    final int? idWeatherReportOffset = _idWeatherReport == null ? null
        : fbBuilder.writeString(_idWeatherReport!);
    final int? authStatusOffset = _authStatus == null ? null
        : fbBuilder.writeString(_authStatus!);
    final int? milClassOffset = _milClass == null ? null
        : fbBuilder.writeString(_milClass!);
    final int? identityOffset = _identity == null ? null
        : fbBuilder.writeString(_identity!);
    final int? commEq1Offset = _commEq1 == null ? null
        : fbBuilder.writeString(_commEq1!);
    final int? commEq2Offset = _commEq2 == null ? null
        : fbBuilder.writeString(_commEq2!);
    final int? commEq3Offset = _commEq3 == null ? null
        : fbBuilder.writeString(_commEq3!);
    final int? survivorRadioOffset = _survivorRadio == null ? null
        : fbBuilder.writeString(_survivorRadio!);
    final int? survivorMessagesOffset = _survivorMessages == null ? null
        : fbBuilder.writeString(_survivorMessages!);
    final int? callSignOffset = _callSign == null ? null
        : fbBuilder.writeString(_callSign!);
    final int? textMsgOffset = _textMsg == null ? null
        : fbBuilder.writeString(_textMsg!);
    final int? authMethodOffset = _authMethod == null ? null
        : fbBuilder.writeString(_authMethod!);
    final int? objectiveAreaInfoOffset = _objectiveAreaInfo == null ? null
        : fbBuilder.writeString(_objectiveAreaInfo!);
    final int? executionInfoOffset = _executionInfo == null ? null
        : fbBuilder.writeString(_executionInfo!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    fbBuilder.startTable(38);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, typeOffset);
    fbBuilder.addOffset(3, msgTimeOffset);
    fbBuilder.addOffset(4, recovIdOffset);
    fbBuilder.addOffset(5, idWeatherReportOffset);
    fbBuilder.addFloat64(6, _pickupLat);
    fbBuilder.addFloat64(7, _pickupLon);
    fbBuilder.addFloat64(8, _pickupAlt);
    fbBuilder.addBool(9, _termInd);
    fbBuilder.addOffset(10, authStatusOffset);
    fbBuilder.addInt32(11, _numPersons);
    fbBuilder.addOffset(12, milClassOffset);
    fbBuilder.addInt32(13, _natAlliance);
    fbBuilder.addInt32(14, _natAlliance1);
    fbBuilder.addOffset(15, identityOffset);
    fbBuilder.addOffset(16, commEq1Offset);
    fbBuilder.addOffset(17, commEq2Offset);
    fbBuilder.addOffset(18, commEq3Offset);
    fbBuilder.addFloat64(19, _txFreq);
    fbBuilder.addFloat64(20, _rxFreq);
    fbBuilder.addInt32(21, _numNonAmbulatory);
    fbBuilder.addInt32(22, _numAmbulatory);
    fbBuilder.addInt32(23, _numAmbulatoryInjured);
    fbBuilder.addOffset(24, survivorRadioOffset);
    fbBuilder.addOffset(25, survivorMessagesOffset);
    fbBuilder.addBool(26, _beaconInd);
    fbBuilder.addOffset(27, callSignOffset);
    fbBuilder.addOffset(28, textMsgOffset);
    fbBuilder.addOffset(29, authMethodOffset);
    fbBuilder.addOffset(30, objectiveAreaInfoOffset);
    fbBuilder.addOffset(31, executionInfoOffset);
    fbBuilder.addOffset(32, origNetworkOffset);
    fbBuilder.addOffset(33, createdAtOffset);
    fbBuilder.addOffset(34, createdByOffset);
    fbBuilder.addOffset(35, sourceOffset);
    fbBuilder.addOffset(36, originOffset);
    fbBuilder.addInt8(37, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
