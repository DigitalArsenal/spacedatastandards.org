// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class RfgeoLocationIngestDataModeEnum {
  final int value;
  const RfgeoLocationIngestDataModeEnum._(this.value);

  factory RfgeoLocationIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum RfgeoLocationIngestDataModeEnum');
    }
    return result;
  }

  static RfgeoLocationIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : RfgeoLocationIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const RfgeoLocationIngestDataModeEnum REAL = RfgeoLocationIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const RfgeoLocationIngestDataModeEnum TEST = RfgeoLocationIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const RfgeoLocationIngestDataModeEnum SIMULATED = RfgeoLocationIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const RfgeoLocationIngestDataModeEnum EXERCISE = RfgeoLocationIngestDataModeEnum._(3);
  static const Map<int, RfgeoLocationIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<RfgeoLocationIngestDataModeEnum> reader = _RfgeoLocationIngestDataModeEnumReader();

  @override
  String toString() {
    return 'RfgeoLocationIngestDataModeEnum{value: $value}';
  }
}

class _RfgeoLocationIngestDataModeEnumReader extends fb.Reader<RfgeoLocationIngestDataModeEnum> {
  const _RfgeoLocationIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  RfgeoLocationIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      RfgeoLocationIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of geolocation data for a radio frequency (RF) signal or emitter.
class RfgeoLocationIngest {
  RfgeoLocationIngest._(this._bc, this._bcOffset);
  factory RfgeoLocationIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RfgeoLocationIngest> reader = _RfgeoLocationIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The order identifier for this RF Geo Location data set.
  ///  Example: /// Example: 155240
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get orderId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2024-05-31T23:06:18.123456Z
  ///  Constraints: No constraints specified.
  String? get createdTs => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2024-05-31T21:16:58.123456Z
  ///  Constraints: No constraints specified.
  String? get receivedTs => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2024-05-31T21:12:12.123456Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2024-05-31T21:16:15.123456Z
  ///  Constraints: No constraints specified.
  String? get endTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.
  ///  Example: /// Example: HawkEye360-7
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 101
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  ///  Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The name of the satellite constellation.
  ///  Example: /// Example: HawkEye360
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get constellation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The name of the signal of interest.
  ///  Example: /// Example: GPS
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get signalOfInterest => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
  ///  Example: /// Example: RFEMITTER-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idRfemitter => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.
  ///  Example: /// Example: ORIGRFEMITTER-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origRfemitterId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The count of single-burst observations used for this geolocation observation.
  ///  Example: /// Example: 17
  ///  Constraints: No constraints specified.
  int get numBursts => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  The minimum detected frequency in megahertz.
  ///  Example: /// Example: 1575.42
  ///  Constraints: No constraints specified.
  double get minFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  The maximum detected frequency in megahertz.
  ///  Example: /// Example: 1575.42
  ///  Constraints: No constraints specified.
  double get maxFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  The detected signal frequency in megahertz.
  ///  Example: /// Example: 1575.42
  ///  Constraints: No constraints specified.
  double get centerFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 41.172
  ///  Constraints: No constraints specified.
  double get detectLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 37.019
  ///  Constraints: No constraints specified.
  double get detectLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  The altitude relative to WGS-84 ellipsoid, in meters.
  ///  Example: /// Example: 123.456
  ///  Constraints: No constraints specified.
  double get detectAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.
  ///  Example: /// Example: 9435.896
  ///  Constraints: No constraints specified.
  double get confSemiMajor => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.
  ///  Example: /// Example: 2751.929
  ///  Constraints: No constraints specified.
  double get confSemiMinor => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.
  ///  Example: /// Example: 89.852
  ///  Constraints: No constraints specified.
  double get confOrientation => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.
  ///  Example: /// Example: 81577480.056
  ///  Constraints: No constraints specified.
  double get confArea => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Type of region as projected on the ground.
  ///  Example: /// Example: MultiPolygon
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get atype => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: No constraints specified.
  String? get agjson => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  String? get atext => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  String? get area => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get andims => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 62, 0);
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get asrid => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 64, 0);
  ///  Optional external identifier referencing the entity used in the calculation of the geolocation.
  ///  Example: /// Example: 80fd25a8-8b41-448d-888a-91c9dfcd940b
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get passGroupId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  The RFGeo algorithm type and version used in geolocation calculations.
  ///  Example: /// Example: v1.0-3-gps_nb_3ball
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get algVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: 780180925
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 72);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  RfgeoLocationIngestDataModeEnum get dataMode => RfgeoLocationIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 86, 0));

  @override
  String toString() {
    return 'RfgeoLocationIngest{id: ${id}, classificationMarking: ${classificationMarking}, orderId: ${orderId}, createdTs: ${createdTs}, receivedTs: ${receivedTs}, startTime: ${startTime}, endTime: ${endTime}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, constellation: ${constellation}, signalOfInterest: ${signalOfInterest}, idRfemitter: ${idRfemitter}, origRfemitterId: ${origRfemitterId}, numBursts: ${numBursts}, minFreq: ${minFreq}, maxFreq: ${maxFreq}, centerFreq: ${centerFreq}, detectLat: ${detectLat}, detectLon: ${detectLon}, detectAlt: ${detectAlt}, confSemiMajor: ${confSemiMajor}, confSemiMinor: ${confSemiMinor}, confOrientation: ${confOrientation}, confArea: ${confArea}, atype: ${atype}, agjson: ${agjson}, atext: ${atext}, area: ${area}, andims: ${andims}, asrid: ${asrid}, passGroupId: ${passGroupId}, algVersion: ${algVersion}, externalId: ${externalId}, tags: ${tags}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, sourceDl: ${sourceDl}, dataMode: ${dataMode}}';
  }
}

class _RfgeoLocationIngestReader extends fb.TableReader<RfgeoLocationIngest> {
  const _RfgeoLocationIngestReader();

  @override
  RfgeoLocationIngest createObject(fb.BufferContext bc, int offset) => 
    RfgeoLocationIngest._(bc, offset);
}

class RfgeoLocationIngestBuilder {
  RfgeoLocationIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(42);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOrderIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCreatedTsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addReceivedTsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(8, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addConstellationOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addSignalOfInterestOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addIdRfemitterOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOrigRfemitterIdOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addNumBursts(int? numBursts) {
    fbBuilder.addInt32(14, numBursts);
    return fbBuilder.offset;
  }
  int addMinFreq(double? minFreq) {
    fbBuilder.addFloat64(15, minFreq);
    return fbBuilder.offset;
  }
  int addMaxFreq(double? maxFreq) {
    fbBuilder.addFloat64(16, maxFreq);
    return fbBuilder.offset;
  }
  int addCenterFreq(double? centerFreq) {
    fbBuilder.addFloat64(17, centerFreq);
    return fbBuilder.offset;
  }
  int addDetectLat(double? detectLat) {
    fbBuilder.addFloat64(18, detectLat);
    return fbBuilder.offset;
  }
  int addDetectLon(double? detectLon) {
    fbBuilder.addFloat64(19, detectLon);
    return fbBuilder.offset;
  }
  int addDetectAlt(double? detectAlt) {
    fbBuilder.addFloat64(20, detectAlt);
    return fbBuilder.offset;
  }
  int addConfSemiMajor(double? confSemiMajor) {
    fbBuilder.addFloat64(21, confSemiMajor);
    return fbBuilder.offset;
  }
  int addConfSemiMinor(double? confSemiMinor) {
    fbBuilder.addFloat64(22, confSemiMinor);
    return fbBuilder.offset;
  }
  int addConfOrientation(double? confOrientation) {
    fbBuilder.addFloat64(23, confOrientation);
    return fbBuilder.offset;
  }
  int addConfArea(double? confArea) {
    fbBuilder.addFloat64(24, confArea);
    return fbBuilder.offset;
  }
  int addAtypeOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addAgjsonOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addAtextOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addAreaOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addAndims(int? andims) {
    fbBuilder.addInt32(29, andims);
    return fbBuilder.offset;
  }
  int addAsrid(int? asrid) {
    fbBuilder.addInt32(30, asrid);
    return fbBuilder.offset;
  }
  int addPassGroupIdOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addAlgVersionOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addDataMode(RfgeoLocationIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(41, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RfgeoLocationIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _orderId;
  final String? _createdTs;
  final String? _receivedTs;
  final String? _startTime;
  final String? _endTime;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final String? _constellation;
  final String? _signalOfInterest;
  final String? _idRfemitter;
  final String? _origRfemitterId;
  final int? _numBursts;
  final double? _minFreq;
  final double? _maxFreq;
  final double? _centerFreq;
  final double? _detectLat;
  final double? _detectLon;
  final double? _detectAlt;
  final double? _confSemiMajor;
  final double? _confSemiMinor;
  final double? _confOrientation;
  final double? _confArea;
  final String? _atype;
  final String? _agjson;
  final String? _atext;
  final String? _area;
  final int? _andims;
  final int? _asrid;
  final String? _passGroupId;
  final String? _algVersion;
  final String? _externalId;
  final List<String>? _tags;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final String? _sourceDl;
  final RfgeoLocationIngestDataModeEnum? _dataMode;

  RfgeoLocationIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? orderId,
    String? createdTs,
    String? receivedTs,
    String? startTime,
    String? endTime,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    String? constellation,
    String? signalOfInterest,
    String? idRfemitter,
    String? origRfemitterId,
    int? numBursts,
    double? minFreq,
    double? maxFreq,
    double? centerFreq,
    double? detectLat,
    double? detectLon,
    double? detectAlt,
    double? confSemiMajor,
    double? confSemiMinor,
    double? confOrientation,
    double? confArea,
    String? atype,
    String? agjson,
    String? atext,
    String? area,
    int? andims,
    int? asrid,
    String? passGroupId,
    String? algVersion,
    String? externalId,
    List<String>? tags,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    String? sourceDl,
    RfgeoLocationIngestDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _orderId = orderId,
        _createdTs = createdTs,
        _receivedTs = receivedTs,
        _startTime = startTime,
        _endTime = endTime,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _constellation = constellation,
        _signalOfInterest = signalOfInterest,
        _idRfemitter = idRfemitter,
        _origRfemitterId = origRfemitterId,
        _numBursts = numBursts,
        _minFreq = minFreq,
        _maxFreq = maxFreq,
        _centerFreq = centerFreq,
        _detectLat = detectLat,
        _detectLon = detectLon,
        _detectAlt = detectAlt,
        _confSemiMajor = confSemiMajor,
        _confSemiMinor = confSemiMinor,
        _confOrientation = confOrientation,
        _confArea = confArea,
        _atype = atype,
        _agjson = agjson,
        _atext = atext,
        _area = area,
        _andims = andims,
        _asrid = asrid,
        _passGroupId = passGroupId,
        _algVersion = algVersion,
        _externalId = externalId,
        _tags = tags,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _sourceDl = sourceDl,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? orderIdOffset = _orderId == null ? null
        : fbBuilder.writeString(_orderId!);
    final int? createdTsOffset = _createdTs == null ? null
        : fbBuilder.writeString(_createdTs!);
    final int? receivedTsOffset = _receivedTs == null ? null
        : fbBuilder.writeString(_receivedTs!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? endTimeOffset = _endTime == null ? null
        : fbBuilder.writeString(_endTime!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? constellationOffset = _constellation == null ? null
        : fbBuilder.writeString(_constellation!);
    final int? signalOfInterestOffset = _signalOfInterest == null ? null
        : fbBuilder.writeString(_signalOfInterest!);
    final int? idRfemitterOffset = _idRfemitter == null ? null
        : fbBuilder.writeString(_idRfemitter!);
    final int? origRfemitterIdOffset = _origRfemitterId == null ? null
        : fbBuilder.writeString(_origRfemitterId!);
    final int? atypeOffset = _atype == null ? null
        : fbBuilder.writeString(_atype!);
    final int? agjsonOffset = _agjson == null ? null
        : fbBuilder.writeString(_agjson!);
    final int? atextOffset = _atext == null ? null
        : fbBuilder.writeString(_atext!);
    final int? areaOffset = _area == null ? null
        : fbBuilder.writeString(_area!);
    final int? passGroupIdOffset = _passGroupId == null ? null
        : fbBuilder.writeString(_passGroupId!);
    final int? algVersionOffset = _algVersion == null ? null
        : fbBuilder.writeString(_algVersion!);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    fbBuilder.startTable(42);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, orderIdOffset);
    fbBuilder.addOffset(3, createdTsOffset);
    fbBuilder.addOffset(4, receivedTsOffset);
    fbBuilder.addOffset(5, startTimeOffset);
    fbBuilder.addOffset(6, endTimeOffset);
    fbBuilder.addOffset(7, idOnOrbitOffset);
    fbBuilder.addInt32(8, _satNo);
    fbBuilder.addOffset(9, origObjectIdOffset);
    fbBuilder.addOffset(10, constellationOffset);
    fbBuilder.addOffset(11, signalOfInterestOffset);
    fbBuilder.addOffset(12, idRfemitterOffset);
    fbBuilder.addOffset(13, origRfemitterIdOffset);
    fbBuilder.addInt32(14, _numBursts);
    fbBuilder.addFloat64(15, _minFreq);
    fbBuilder.addFloat64(16, _maxFreq);
    fbBuilder.addFloat64(17, _centerFreq);
    fbBuilder.addFloat64(18, _detectLat);
    fbBuilder.addFloat64(19, _detectLon);
    fbBuilder.addFloat64(20, _detectAlt);
    fbBuilder.addFloat64(21, _confSemiMajor);
    fbBuilder.addFloat64(22, _confSemiMinor);
    fbBuilder.addFloat64(23, _confOrientation);
    fbBuilder.addFloat64(24, _confArea);
    fbBuilder.addOffset(25, atypeOffset);
    fbBuilder.addOffset(26, agjsonOffset);
    fbBuilder.addOffset(27, atextOffset);
    fbBuilder.addOffset(28, areaOffset);
    fbBuilder.addInt32(29, _andims);
    fbBuilder.addInt32(30, _asrid);
    fbBuilder.addOffset(31, passGroupIdOffset);
    fbBuilder.addOffset(32, algVersionOffset);
    fbBuilder.addOffset(33, externalIdOffset);
    fbBuilder.addOffset(34, tagsOffset);
    fbBuilder.addOffset(35, createdAtOffset);
    fbBuilder.addOffset(36, createdByOffset);
    fbBuilder.addOffset(37, sourceOffset);
    fbBuilder.addOffset(38, originOffset);
    fbBuilder.addOffset(39, origNetworkOffset);
    fbBuilder.addOffset(40, sourceDlOffset);
    fbBuilder.addInt8(41, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
