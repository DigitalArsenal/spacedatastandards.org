// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class TrackAbridgedDataModeEnum {
  final int value;
  const TrackAbridgedDataModeEnum._(this.value);

  factory TrackAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum TrackAbridgedDataModeEnum');
    }
    return result;
  }

  static TrackAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : TrackAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const TrackAbridgedDataModeEnum REAL = TrackAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const TrackAbridgedDataModeEnum TEST = TrackAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const TrackAbridgedDataModeEnum SIMULATED = TrackAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const TrackAbridgedDataModeEnum EXERCISE = TrackAbridgedDataModeEnum._(3);
  static const Map<int, TrackAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<TrackAbridgedDataModeEnum> reader = _TrackAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'TrackAbridgedDataModeEnum{value: $value}';
  }
}

class _TrackAbridgedDataModeEnumReader extends fb.Reader<TrackAbridgedDataModeEnum> {
  const _TrackAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  TrackAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      TrackAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// A track is a position and optionally a heading/velocity of an object such as an aircraft at a particular timestamp. It also includes optional information regarding the identity/type of the target object, if known.
class TrackAbridged {
  TrackAbridged._(this._bc, this._bcOffset);
  factory TrackAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TrackAbridged> reader = _TrackAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: TRACK-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
  ///  Example: /// Example: Contact Info
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get cntct => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Message Timestamp.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get msgTs => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Mission ID related to the track.
  ///  Example: /// Example: msnId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get msnId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Nationality or organization of the tracking/reporting system or platform (e.g. FR, NATO, US, etc.).
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get assetNat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Id/name of the platform providing the track data (i.e., tail number for air platform, tower ID for tower based sensor, site id for fixed radar).
  ///  Example: /// Example: asset
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get asset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Id/name of sensor providing the track data.
  ///  Example: /// Example: sen
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get sen => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Sensor quality.
  ///  Example: /// Example: senQual
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get senQual => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  UUID identifying the track, which should remain the same on subsequent tracks of the same object.
  ///  Example: /// Example: trkId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trkId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
  ///  Example: /// Example: trkNum
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get trkNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Status of the track (e.g., INITIATING, MAINTAINING, DROPPING, TERMINATED, etc.).
  ///  Example: /// Example: INITIATING
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get trkStat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Nationality or organization of the track object (e.g. FR, NATO, US, etc.).
  ///  Example: /// Example: NATO
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get objNat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The UID or designation of the tracked object.
  ///  Example: /// Example: objId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get objId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The generic classification of the track object/group (e.g., HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
  ///  Example: /// Example: WATERCRAFT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get objType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The object specific type. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations. The specific type can be reported as either a combination of the code and environment (e.g. 155/SURFACE) or as the descriptive representation (e.g. AUDACE DDG), which are equivalent.
  ///  Example: /// Example: LIGHT_TANK
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get objSpec => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
  ///  Example: /// Example: COMBAT_VEHICLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get objPlat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
  ///  Example: /// Example: HOLDING
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get objAct => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The type of source information from which the track was derived. Intended as, but not constrained to, NATO STANAG 4676 modality types (AIS, BFT, BIOMETRIC, COMINT, DOPPLER, ELINT, HRR, HUMINT, IMAGE, MASINT, MIXED, OSINT, OTHER):
  ///  AIS: Derived from an automated identification system source.
  ///  BFT: Derived from a blue force tracking source.
  ///  BIOMETRICS: Derived from a biometrics source.
  ///  COMINT: Derived from a communications intelligence source.
  ///  DOPPLER: Derived from a radar doppler source.
  ///  ELINT: Derived from an electronics intelligence source.
  ///  HRR: Derived from a radar high range resolution source.
  ///  HUMINT: Derived from a human intelligence source.
  ///  IMAGE: Derived from a still or motion imagery source.
  ///  MASINT: Derived from a measurement and signals intelligence source.
  ///  MIXED: Derived from a combination of two or more sources.
  ///  OSINT: Derived from an open source intelligence source.
  ///  OTHER: Derived from other types of unspecified sources.
  ///  Example: /// Example: MASINT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get modType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  UUID of the track item object, applies to STANAG-4676 messages.
  ///  Example: /// Example: trkItmId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trkItmId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Track timestamp in ISO8601 UTC format.
  ///  Example: /// Example: 2021-06-07T14:17:39.653Z
  ///  Constraints: No constraints specified.
  String? get ts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Value indicating track quality (not standardized).
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get trkQual => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 50, 0);
  ///  Means by which the track data was created (e.g., MEASURED, AUTOMATIC PREDICTED, etc.).
  ///  Example: /// Example: MEASURED
  ///  Constraints: No constraints specified.
  String? get trkPtType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
  ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///  PENDING: Track object which has not been evaluated.
  ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get objIdent => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Track object identity credibility.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get identCred => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  Track object identity reliability.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get identRel => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 58, 0);
  ///  Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
  ///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
  ///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
  ///  KILO: Friendly high-value object.
  ///  TRAVELLER: Suspect land or surface track following a recognized traffic route.
  ///  ZOMBIE: Suspect track, object, or entity of special interest.
  ///  Example: /// Example: ZOMBIE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get identAmp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
  ///  AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
  ///  LAND: On the surface of dry land.
  ///  SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
  ///  SURFACE: On the surface of a body of water.
  ///  SUBSURFACE: Below the surface of a body of water.
  ///  UNKNOWN: Environment is not known.
  ///  Example: /// Example: LAND
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get env => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Track environment confidence estimate (not standardized).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get envConf => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get trkConf => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Track object location in ECEF [x, y, z], meters.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  List<String>? get ecefPos => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 68);
  ///  Track object velocity in ECEF [x', y', z'], meters/sec.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  List<String>? get ecefVel => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 70);
  ///  Track object acceleration in ECEF [x'', y'', z''], meters/sec^2.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  List<String>? get ecefAcc => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 72);
  ///  WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get alt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Track object spd, in meters/sec.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get spd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  The track object heading, in degrees clockwise from true North at the object location.
  ///  Example: /// Example: 19.7
  ///  Constraints: No constraints specified.
  double get hdng => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
  ///  Example: /// Example: 88.37
  ///  Constraints: No constraints specified.
  double get course => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Origin of a local coordinate system [lat, lon, altitude].  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  List<String>? get lco => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 86);
  ///  x, y, and z-axis rotations about ECEF that define a local cartesian system.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  List<String>? get lcs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 88);
  ///  Estimate of the position, [x, y, z], of the track object in the defined cartesian system, in meters.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  List<String>? get lcPos => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 90);
  ///  Estimate of the velocity, [x', y', z'], of the track object in the defined cartesian system, in meters/sec.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  List<String>? get lcVel => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 92);
  ///  Estimate of the acceleration, [x'', y'', z''], of the track object in the defined cartesian system, in meters/sec^2.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  List<String>? get lcAcc => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 94);
  ///  East, North, Up velocity components, in meters/sec.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  List<String>? get eNuvel => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 96);
  ///  East, North, Up position components, in meters.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  List<String>? get eNupos => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 98);
  ///  Covariance matrix, in meter and second based units, for the defined cartesian system.
  ///  The array values represent the lower triangular half of the position-velocity covariance matrix.  The size of the covariance matrix is dynamic.  The values are output as an array of values corresponding to the position-velocity covariance element positions, ordered as follows:
  ///  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
  ///  x&nbsp;&nbsp;&nbsp;&nbsp;1
  ///  y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
  ///  z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
  ///  x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
  ///  y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
  ///  z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
  ///  The covariance matrix will be as large as the last element needed, and with unused values zero-filled to maintain proper element positioning in the array.  For example, for a 2D (x, y) position-only covariance, the covariance matrix will be 2x2 and the array would contain the 3 elements corresponding to the x, and y position.  Another example, now for a 2D (x, y) position-velocity covariance, the covariance matrix will be 5x5 and the array would contain the 15 elements corresponding to the relevant x, y, x', and y' values (with the z-row and z-column being all zeros). The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
  ///  Example: /// Example: [1.1, 2.2, 3.3]
  ///  Constraints: No constraints specified.
  List<String>? get cov => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 100);
  ///  Uncertainty ellipsoid [semi-major axis (m), semi-minor axis (m), orientation (deg)].
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  List<String>? get errEllp => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 102);
  ///  Array of UDL record types (POI, MTI, TRACK, GROUNDIMAGE) that contributed to the generation of this fused track.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array, used in the track fusion. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['MTI', 'POI']
  ///  Constraints: No constraints specified.
  List<String>? get srcTyps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 104);
  ///  Array of UUIDs of the UDL data records that contributed to the generation of this fused track. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array, used in the track fusion.  The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/poi/{uuid}).
  ///  Example: /// Example: ['f7c70cc8-f9b7-4467-b4ad-3904e360e842', '1da3fab000014e3133709830937387405']
  ///  Constraints: No constraints specified.
  List<String>? get srcIds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 106);
  ///  The call sign currently assigned to this track object.
  ///  Example: /// Example: callSign
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get callSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Flag indicating that this track is fused from multiple sensor sources.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get multiSource => const fb.BoolReader().vTableGet(_bc, _bcOffset, 110, false);
  ///  The J-series message type, if this track is derived from a J-series message.
  ///  Example: /// Example: J12.5
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get jSeries => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  The number of objects or units moving as a group and represented as a single entity in this track message. If null, the track is assumed to represent a single object. Note that if this track derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
  ///  Example: /// Example: 14
  ///  Constraints: No constraints specified.
  int get strength => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 114, 0);
  ///  Mode-1 interrogation response (mission code), indicating mission or aircraft type.
  ///  Example: /// Example: 1234
  ///  Constraints: No constraints specified.
  int get m1 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 116, 0);
  ///  Mode-1 validity status.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get m1v => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 118, 0);
  ///  Mode-2 interrogation response (military identification code).
  ///  Example: /// Example: 1234
  ///  Constraints: No constraints specified.
  int get m2 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 120, 0);
  ///  Mode-2 validity status.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get m2v => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 122, 0);
  ///  Mode-3/A interrogation response (aircraft identification), provides a 4-digit octal identification code for the aircraft, assigned by the air traffic controller. Mode-3/A is shared military/civilian use.
  ///  Example: /// Example: 2636
  ///  Constraints: No constraints specified.
  int get m3a => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 124, 0);
  ///  Mode-3/A validity status.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get m3av => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 126, 0);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 128);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 130);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 132);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 134);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  TrackAbridgedDataModeEnum get dataMode => TrackAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 136, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 138);

  @override
  String toString() {
    return 'TrackAbridged{id: ${id}, classificationMarking: ${classificationMarking}, cntct: ${cntct}, createdAt: ${createdAt}, createdBy: ${createdBy}, msgTs: ${msgTs}, msnId: ${msnId}, assetNat: ${assetNat}, asset: ${asset}, sen: ${sen}, senQual: ${senQual}, trkId: ${trkId}, trkNum: ${trkNum}, trkStat: ${trkStat}, objNat: ${objNat}, objId: ${objId}, objType: ${objType}, objSpec: ${objSpec}, objPlat: ${objPlat}, objAct: ${objAct}, modType: ${modType}, trkItmId: ${trkItmId}, ts: ${ts}, trkQual: ${trkQual}, trkPtType: ${trkPtType}, objIdent: ${objIdent}, identCred: ${identCred}, identRel: ${identRel}, identAmp: ${identAmp}, env: ${env}, envConf: ${envConf}, trkConf: ${trkConf}, ecefPos: ${ecefPos}, ecefVel: ${ecefVel}, ecefAcc: ${ecefAcc}, lat: ${lat}, lon: ${lon}, alt: ${alt}, spd: ${spd}, hdng: ${hdng}, course: ${course}, lco: ${lco}, lcs: ${lcs}, lcPos: ${lcPos}, lcVel: ${lcVel}, lcAcc: ${lcAcc}, eNuvel: ${eNuvel}, eNupos: ${eNupos}, cov: ${cov}, errEllp: ${errEllp}, srcTyps: ${srcTyps}, srcIds: ${srcIds}, callSign: ${callSign}, multiSource: ${multiSource}, jSeries: ${jSeries}, strength: ${strength}, m1: ${m1}, m1v: ${m1v}, m2: ${m2}, m2v: ${m2v}, m3a: ${m3a}, m3av: ${m3av}, tags: ${tags}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _TrackAbridgedReader extends fb.TableReader<TrackAbridged> {
  const _TrackAbridgedReader();

  @override
  TrackAbridged createObject(fb.BufferContext bc, int offset) => 
    TrackAbridged._(bc, offset);
}

class TrackAbridgedBuilder {
  TrackAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(68);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCntctOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMsgTsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addMsnIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addAssetNatOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addAssetOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addSenOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSenQualOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addTrkIdOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addTrkNumOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addTrkStatOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addObjNatOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addObjIdOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addObjTypeOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addObjSpecOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addObjPlatOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addObjActOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addModTypeOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addTrkItmIdOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addTrkQual(int? trkQual) {
    fbBuilder.addInt32(23, trkQual);
    return fbBuilder.offset;
  }
  int addTrkPtTypeOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addObjIdentOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addIdentCred(int? identCred) {
    fbBuilder.addInt32(26, identCred);
    return fbBuilder.offset;
  }
  int addIdentRel(int? identRel) {
    fbBuilder.addInt32(27, identRel);
    return fbBuilder.offset;
  }
  int addIdentAmpOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addEnvOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addEnvConf(double? envConf) {
    fbBuilder.addFloat64(30, envConf);
    return fbBuilder.offset;
  }
  int addTrkConf(double? trkConf) {
    fbBuilder.addFloat64(31, trkConf);
    return fbBuilder.offset;
  }
  int addEcefPosOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addEcefVelOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addEcefAccOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(35, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(36, lon);
    return fbBuilder.offset;
  }
  int addAlt(double? alt) {
    fbBuilder.addFloat64(37, alt);
    return fbBuilder.offset;
  }
  int addSpd(double? spd) {
    fbBuilder.addFloat64(38, spd);
    return fbBuilder.offset;
  }
  int addHdng(double? hdng) {
    fbBuilder.addFloat64(39, hdng);
    return fbBuilder.offset;
  }
  int addCourse(double? course) {
    fbBuilder.addFloat64(40, course);
    return fbBuilder.offset;
  }
  int addLcoOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addLcsOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addLcPosOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addLcVelOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addLcAccOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addENuvelOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addENuposOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addCovOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addErrEllpOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addSrcTypsOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addSrcIdsOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addCallSignOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addMultiSource(bool? multiSource) {
    fbBuilder.addBool(53, multiSource);
    return fbBuilder.offset;
  }
  int addJSeriesOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addStrength(int? strength) {
    fbBuilder.addInt32(55, strength);
    return fbBuilder.offset;
  }
  int addM1(int? m1) {
    fbBuilder.addInt32(56, m1);
    return fbBuilder.offset;
  }
  int addM1v(int? m1v) {
    fbBuilder.addInt32(57, m1v);
    return fbBuilder.offset;
  }
  int addM2(int? m2) {
    fbBuilder.addInt32(58, m2);
    return fbBuilder.offset;
  }
  int addM2v(int? m2v) {
    fbBuilder.addInt32(59, m2v);
    return fbBuilder.offset;
  }
  int addM3a(int? m3a) {
    fbBuilder.addInt32(60, m3a);
    return fbBuilder.offset;
  }
  int addM3av(int? m3av) {
    fbBuilder.addInt32(61, m3av);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(64, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(65, offset);
    return fbBuilder.offset;
  }
  int addDataMode(TrackAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(66, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(67, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TrackAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _cntct;
  final String? _createdAt;
  final String? _createdBy;
  final String? _msgTs;
  final String? _msnId;
  final String? _assetNat;
  final String? _asset;
  final String? _sen;
  final String? _senQual;
  final String? _trkId;
  final String? _trkNum;
  final String? _trkStat;
  final String? _objNat;
  final String? _objId;
  final String? _objType;
  final String? _objSpec;
  final String? _objPlat;
  final String? _objAct;
  final String? _modType;
  final String? _trkItmId;
  final String? _ts;
  final int? _trkQual;
  final String? _trkPtType;
  final String? _objIdent;
  final int? _identCred;
  final int? _identRel;
  final String? _identAmp;
  final String? _env;
  final double? _envConf;
  final double? _trkConf;
  final List<String>? _ecefPos;
  final List<String>? _ecefVel;
  final List<String>? _ecefAcc;
  final double? _lat;
  final double? _lon;
  final double? _alt;
  final double? _spd;
  final double? _hdng;
  final double? _course;
  final List<String>? _lco;
  final List<String>? _lcs;
  final List<String>? _lcPos;
  final List<String>? _lcVel;
  final List<String>? _lcAcc;
  final List<String>? _eNuvel;
  final List<String>? _eNupos;
  final List<String>? _cov;
  final List<String>? _errEllp;
  final List<String>? _srcTyps;
  final List<String>? _srcIds;
  final String? _callSign;
  final bool? _multiSource;
  final String? _jSeries;
  final int? _strength;
  final int? _m1;
  final int? _m1v;
  final int? _m2;
  final int? _m2v;
  final int? _m3a;
  final int? _m3av;
  final List<String>? _tags;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final TrackAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;

  TrackAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? cntct,
    String? createdAt,
    String? createdBy,
    String? msgTs,
    String? msnId,
    String? assetNat,
    String? asset,
    String? sen,
    String? senQual,
    String? trkId,
    String? trkNum,
    String? trkStat,
    String? objNat,
    String? objId,
    String? objType,
    String? objSpec,
    String? objPlat,
    String? objAct,
    String? modType,
    String? trkItmId,
    String? ts,
    int? trkQual,
    String? trkPtType,
    String? objIdent,
    int? identCred,
    int? identRel,
    String? identAmp,
    String? env,
    double? envConf,
    double? trkConf,
    List<String>? ecefPos,
    List<String>? ecefVel,
    List<String>? ecefAcc,
    double? lat,
    double? lon,
    double? alt,
    double? spd,
    double? hdng,
    double? course,
    List<String>? lco,
    List<String>? lcs,
    List<String>? lcPos,
    List<String>? lcVel,
    List<String>? lcAcc,
    List<String>? eNuvel,
    List<String>? eNupos,
    List<String>? cov,
    List<String>? errEllp,
    List<String>? srcTyps,
    List<String>? srcIds,
    String? callSign,
    bool? multiSource,
    String? jSeries,
    int? strength,
    int? m1,
    int? m1v,
    int? m2,
    int? m2v,
    int? m3a,
    int? m3av,
    List<String>? tags,
    String? sourceDl,
    String? source,
    String? origin,
    TrackAbridgedDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _cntct = cntct,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _msgTs = msgTs,
        _msnId = msnId,
        _assetNat = assetNat,
        _asset = asset,
        _sen = sen,
        _senQual = senQual,
        _trkId = trkId,
        _trkNum = trkNum,
        _trkStat = trkStat,
        _objNat = objNat,
        _objId = objId,
        _objType = objType,
        _objSpec = objSpec,
        _objPlat = objPlat,
        _objAct = objAct,
        _modType = modType,
        _trkItmId = trkItmId,
        _ts = ts,
        _trkQual = trkQual,
        _trkPtType = trkPtType,
        _objIdent = objIdent,
        _identCred = identCred,
        _identRel = identRel,
        _identAmp = identAmp,
        _env = env,
        _envConf = envConf,
        _trkConf = trkConf,
        _ecefPos = ecefPos,
        _ecefVel = ecefVel,
        _ecefAcc = ecefAcc,
        _lat = lat,
        _lon = lon,
        _alt = alt,
        _spd = spd,
        _hdng = hdng,
        _course = course,
        _lco = lco,
        _lcs = lcs,
        _lcPos = lcPos,
        _lcVel = lcVel,
        _lcAcc = lcAcc,
        _eNuvel = eNuvel,
        _eNupos = eNupos,
        _cov = cov,
        _errEllp = errEllp,
        _srcTyps = srcTyps,
        _srcIds = srcIds,
        _callSign = callSign,
        _multiSource = multiSource,
        _jSeries = jSeries,
        _strength = strength,
        _m1 = m1,
        _m1v = m1v,
        _m2 = m2,
        _m2v = m2v,
        _m3a = m3a,
        _m3av = m3av,
        _tags = tags,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? cntctOffset = _cntct == null ? null
        : fbBuilder.writeString(_cntct!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? msgTsOffset = _msgTs == null ? null
        : fbBuilder.writeString(_msgTs!);
    final int? msnIdOffset = _msnId == null ? null
        : fbBuilder.writeString(_msnId!);
    final int? assetNatOffset = _assetNat == null ? null
        : fbBuilder.writeString(_assetNat!);
    final int? assetOffset = _asset == null ? null
        : fbBuilder.writeString(_asset!);
    final int? senOffset = _sen == null ? null
        : fbBuilder.writeString(_sen!);
    final int? senQualOffset = _senQual == null ? null
        : fbBuilder.writeString(_senQual!);
    final int? trkIdOffset = _trkId == null ? null
        : fbBuilder.writeString(_trkId!);
    final int? trkNumOffset = _trkNum == null ? null
        : fbBuilder.writeString(_trkNum!);
    final int? trkStatOffset = _trkStat == null ? null
        : fbBuilder.writeString(_trkStat!);
    final int? objNatOffset = _objNat == null ? null
        : fbBuilder.writeString(_objNat!);
    final int? objIdOffset = _objId == null ? null
        : fbBuilder.writeString(_objId!);
    final int? objTypeOffset = _objType == null ? null
        : fbBuilder.writeString(_objType!);
    final int? objSpecOffset = _objSpec == null ? null
        : fbBuilder.writeString(_objSpec!);
    final int? objPlatOffset = _objPlat == null ? null
        : fbBuilder.writeString(_objPlat!);
    final int? objActOffset = _objAct == null ? null
        : fbBuilder.writeString(_objAct!);
    final int? modTypeOffset = _modType == null ? null
        : fbBuilder.writeString(_modType!);
    final int? trkItmIdOffset = _trkItmId == null ? null
        : fbBuilder.writeString(_trkItmId!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeString(_ts!);
    final int? trkPtTypeOffset = _trkPtType == null ? null
        : fbBuilder.writeString(_trkPtType!);
    final int? objIdentOffset = _objIdent == null ? null
        : fbBuilder.writeString(_objIdent!);
    final int? identAmpOffset = _identAmp == null ? null
        : fbBuilder.writeString(_identAmp!);
    final int? envOffset = _env == null ? null
        : fbBuilder.writeString(_env!);
    final int? ecefPosOffset = _ecefPos == null ? null
        : fbBuilder.writeList(_ecefPos!.map(fbBuilder.writeString).toList());
    final int? ecefVelOffset = _ecefVel == null ? null
        : fbBuilder.writeList(_ecefVel!.map(fbBuilder.writeString).toList());
    final int? ecefAccOffset = _ecefAcc == null ? null
        : fbBuilder.writeList(_ecefAcc!.map(fbBuilder.writeString).toList());
    final int? lcoOffset = _lco == null ? null
        : fbBuilder.writeList(_lco!.map(fbBuilder.writeString).toList());
    final int? lcsOffset = _lcs == null ? null
        : fbBuilder.writeList(_lcs!.map(fbBuilder.writeString).toList());
    final int? lcPosOffset = _lcPos == null ? null
        : fbBuilder.writeList(_lcPos!.map(fbBuilder.writeString).toList());
    final int? lcVelOffset = _lcVel == null ? null
        : fbBuilder.writeList(_lcVel!.map(fbBuilder.writeString).toList());
    final int? lcAccOffset = _lcAcc == null ? null
        : fbBuilder.writeList(_lcAcc!.map(fbBuilder.writeString).toList());
    final int? eNuvelOffset = _eNuvel == null ? null
        : fbBuilder.writeList(_eNuvel!.map(fbBuilder.writeString).toList());
    final int? eNuposOffset = _eNupos == null ? null
        : fbBuilder.writeList(_eNupos!.map(fbBuilder.writeString).toList());
    final int? covOffset = _cov == null ? null
        : fbBuilder.writeList(_cov!.map(fbBuilder.writeString).toList());
    final int? errEllpOffset = _errEllp == null ? null
        : fbBuilder.writeList(_errEllp!.map(fbBuilder.writeString).toList());
    final int? srcTypsOffset = _srcTyps == null ? null
        : fbBuilder.writeList(_srcTyps!.map(fbBuilder.writeString).toList());
    final int? srcIdsOffset = _srcIds == null ? null
        : fbBuilder.writeList(_srcIds!.map(fbBuilder.writeString).toList());
    final int? callSignOffset = _callSign == null ? null
        : fbBuilder.writeString(_callSign!);
    final int? jSeriesOffset = _jSeries == null ? null
        : fbBuilder.writeString(_jSeries!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(68);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, cntctOffset);
    fbBuilder.addOffset(3, createdAtOffset);
    fbBuilder.addOffset(4, createdByOffset);
    fbBuilder.addOffset(5, msgTsOffset);
    fbBuilder.addOffset(6, msnIdOffset);
    fbBuilder.addOffset(7, assetNatOffset);
    fbBuilder.addOffset(8, assetOffset);
    fbBuilder.addOffset(9, senOffset);
    fbBuilder.addOffset(10, senQualOffset);
    fbBuilder.addOffset(11, trkIdOffset);
    fbBuilder.addOffset(12, trkNumOffset);
    fbBuilder.addOffset(13, trkStatOffset);
    fbBuilder.addOffset(14, objNatOffset);
    fbBuilder.addOffset(15, objIdOffset);
    fbBuilder.addOffset(16, objTypeOffset);
    fbBuilder.addOffset(17, objSpecOffset);
    fbBuilder.addOffset(18, objPlatOffset);
    fbBuilder.addOffset(19, objActOffset);
    fbBuilder.addOffset(20, modTypeOffset);
    fbBuilder.addOffset(21, trkItmIdOffset);
    fbBuilder.addOffset(22, tsOffset);
    fbBuilder.addInt32(23, _trkQual);
    fbBuilder.addOffset(24, trkPtTypeOffset);
    fbBuilder.addOffset(25, objIdentOffset);
    fbBuilder.addInt32(26, _identCred);
    fbBuilder.addInt32(27, _identRel);
    fbBuilder.addOffset(28, identAmpOffset);
    fbBuilder.addOffset(29, envOffset);
    fbBuilder.addFloat64(30, _envConf);
    fbBuilder.addFloat64(31, _trkConf);
    fbBuilder.addOffset(32, ecefPosOffset);
    fbBuilder.addOffset(33, ecefVelOffset);
    fbBuilder.addOffset(34, ecefAccOffset);
    fbBuilder.addFloat64(35, _lat);
    fbBuilder.addFloat64(36, _lon);
    fbBuilder.addFloat64(37, _alt);
    fbBuilder.addFloat64(38, _spd);
    fbBuilder.addFloat64(39, _hdng);
    fbBuilder.addFloat64(40, _course);
    fbBuilder.addOffset(41, lcoOffset);
    fbBuilder.addOffset(42, lcsOffset);
    fbBuilder.addOffset(43, lcPosOffset);
    fbBuilder.addOffset(44, lcVelOffset);
    fbBuilder.addOffset(45, lcAccOffset);
    fbBuilder.addOffset(46, eNuvelOffset);
    fbBuilder.addOffset(47, eNuposOffset);
    fbBuilder.addOffset(48, covOffset);
    fbBuilder.addOffset(49, errEllpOffset);
    fbBuilder.addOffset(50, srcTypsOffset);
    fbBuilder.addOffset(51, srcIdsOffset);
    fbBuilder.addOffset(52, callSignOffset);
    fbBuilder.addBool(53, _multiSource);
    fbBuilder.addOffset(54, jSeriesOffset);
    fbBuilder.addInt32(55, _strength);
    fbBuilder.addInt32(56, _m1);
    fbBuilder.addInt32(57, _m1v);
    fbBuilder.addInt32(58, _m2);
    fbBuilder.addInt32(59, _m2v);
    fbBuilder.addInt32(60, _m3a);
    fbBuilder.addInt32(61, _m3av);
    fbBuilder.addOffset(62, tagsOffset);
    fbBuilder.addOffset(63, sourceDlOffset);
    fbBuilder.addOffset(64, sourceOffset);
    fbBuilder.addOffset(65, originOffset);
    fbBuilder.addInt8(66, _dataMode?.value);
    fbBuilder.addOffset(67, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
