// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// The timePeriod set describes the effective datetime for a given airspace control means.
class AirspaceTimePeriodAbridged {
  AirspaceTimePeriodAbridged._(this._bc, this._bcOffset);
  factory AirspaceTimePeriodAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirspaceTimePeriodAbridged> reader = _AirspaceTimePeriodAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The airspace time code associated with the ACO. Can be DISCRETE, a fixed time block, or INTERVAL, a repeating time block.
  ///  Example: /// Example: DISCRETE
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get timeMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The start time designating that the airspace control order is active.
  ///  Example: /// Example: 141325ZFEB2002
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get timeStart => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The end time designating that the airspace control order is no longer active. Can contain datetime information or a stop time qualifier code, such as AFTER, NET, UFN, etc.
  ///  Example: /// Example: 141325ZFEB2002
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get timeEnd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Mandatory if timeMode is INTERVAL. Can be on of the interval frequency codes, such as BIWEEKLY, DAILY, YEARLY, etc.
  ///  Example: /// Example: ['WEEKLY']
  ///  Constraints: No constraints specified.
  List<String>? get intFreq => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);
  ///  Mandatory if timeMode is INTERVAL. Can be a numerical multiplier on an interval frequency code, a stop time qualifier code such as AFTER, NET, UFN, etc, or a datetime like string.
  ///  Example: /// Example: ['65WK']
  ///  Constraints: No constraints specified.
  List<String>? get intDur => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'AirspaceTimePeriodAbridged{timeMode: ${timeMode}, timeStart: ${timeStart}, timeEnd: ${timeEnd}, intFreq: ${intFreq}, intDur: ${intDur}}';
  }
}

class _AirspaceTimePeriodAbridgedReader extends fb.TableReader<AirspaceTimePeriodAbridged> {
  const _AirspaceTimePeriodAbridgedReader();

  @override
  AirspaceTimePeriodAbridged createObject(fb.BufferContext bc, int offset) => 
    AirspaceTimePeriodAbridged._(bc, offset);
}

class AirspaceTimePeriodAbridgedBuilder {
  AirspaceTimePeriodAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTimeModeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTimeStartOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTimeEndOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIntFreqOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIntDurOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirspaceTimePeriodAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _timeMode;
  final String? _timeStart;
  final String? _timeEnd;
  final List<String>? _intFreq;
  final List<String>? _intDur;

  AirspaceTimePeriodAbridgedObjectBuilder({
    String? timeMode,
    String? timeStart,
    String? timeEnd,
    List<String>? intFreq,
    List<String>? intDur,
  })
      : _timeMode = timeMode,
        _timeStart = timeStart,
        _timeEnd = timeEnd,
        _intFreq = intFreq,
        _intDur = intDur;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? timeModeOffset = _timeMode == null ? null
        : fbBuilder.writeString(_timeMode!);
    final int? timeStartOffset = _timeStart == null ? null
        : fbBuilder.writeString(_timeStart!);
    final int? timeEndOffset = _timeEnd == null ? null
        : fbBuilder.writeString(_timeEnd!);
    final int? intFreqOffset = _intFreq == null ? null
        : fbBuilder.writeList(_intFreq!.map(fbBuilder.writeString).toList());
    final int? intDurOffset = _intDur == null ? null
        : fbBuilder.writeList(_intDur!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, timeModeOffset);
    fbBuilder.addOffset(1, timeStartOffset);
    fbBuilder.addOffset(2, timeEndOffset);
    fbBuilder.addOffset(3, intFreqOffset);
    fbBuilder.addOffset(4, intDurOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
