// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class ElsetIngestDataModeEnum {
  final int value;
  const ElsetIngestDataModeEnum._(this.value);

  factory ElsetIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ElsetIngestDataModeEnum');
    }
    return result;
  }

  static ElsetIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : ElsetIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const ElsetIngestDataModeEnum REAL = ElsetIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const ElsetIngestDataModeEnum TEST = ElsetIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const ElsetIngestDataModeEnum SIMULATED = ElsetIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const ElsetIngestDataModeEnum EXERCISE = ElsetIngestDataModeEnum._(3);
  static const Map<int, ElsetIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<ElsetIngestDataModeEnum> reader = _ElsetIngestDataModeEnumReader();

  @override
  String toString() {
    return 'ElsetIngestDataModeEnum{value: $value}';
  }
}

class _ElsetIngestDataModeEnumReader extends fb.Reader<ElsetIngestDataModeEnum> {
  const _ElsetIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  ElsetIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      ElsetIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class ElsetIngestSourcedDataTypesEnum {
  final int value;
  const ElsetIngestSourcedDataTypesEnum._(this.value);

  factory ElsetIngestSourcedDataTypesEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ElsetIngestSourcedDataTypesEnum');
    }
    return result;
  }

  static ElsetIngestSourcedDataTypesEnum? _createOrNull(int? value) => 
      value == null ? null : ElsetIngestSourcedDataTypesEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const ElsetIngestSourcedDataTypesEnum EO = ElsetIngestSourcedDataTypesEnum._(0);

  ///  No description available.
  static const ElsetIngestSourcedDataTypesEnum RADAR = ElsetIngestSourcedDataTypesEnum._(1);

  ///  No description available.
  static const ElsetIngestSourcedDataTypesEnum RF = ElsetIngestSourcedDataTypesEnum._(2);

  ///  No description available.
  static const ElsetIngestSourcedDataTypesEnum DOA = ElsetIngestSourcedDataTypesEnum._(3);

  ///  No description available.
  static const ElsetIngestSourcedDataTypesEnum ELSET = ElsetIngestSourcedDataTypesEnum._(4);

  ///  No description available.
  static const ElsetIngestSourcedDataTypesEnum SV = ElsetIngestSourcedDataTypesEnum._(5);
  static const Map<int, ElsetIngestSourcedDataTypesEnum> values = {
    0: EO,
    1: RADAR,
    2: RF,
    3: DOA,
    4: ELSET,
    5: SV};

  static const fb.Reader<ElsetIngestSourcedDataTypesEnum> reader = _ElsetIngestSourcedDataTypesEnumReader();

  @override
  String toString() {
    return 'ElsetIngestSourcedDataTypesEnum{value: $value}';
  }
}

class _ElsetIngestSourcedDataTypesEnumReader extends fb.Reader<ElsetIngestSourcedDataTypesEnum> {
  const _ElsetIngestSourcedDataTypesEnumReader();

  @override
  int get size => 1;

  @override
  ElsetIngestSourcedDataTypesEnum read(fb.BufferContext bc, int offset) =>
      ElsetIngestSourcedDataTypesEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.
class ElsetIngest {
  ElsetIngest._(this._bc, this._bcOffset);
  factory ElsetIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ElsetIngest> reader = _ElsetIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ELSET-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idElset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  Elset epoch time in ISO 8601 UTC format, with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get epoch => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get meanMotion => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get uct => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  ///  The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  ///  Example: /// Example: 0.333
  ///  Constraints: No constraints specified.
  double get eccentricity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  double get inclination => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get raan => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get argOfPerigee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get meanAnomaly => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  ///  Example: /// Example: 111
  ///  Constraints: No constraints specified.
  int get revNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get bStar => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.
  ///  Example: /// Example: 0.0126
  ///  Constraints: No constraints specified.
  double get agom => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
  ///  Example: /// Example: 0.00815
  ///  Constraints: No constraints specified.
  double get ballisticCoeff => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get meanMotionDot => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get meanMotionDdot => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get semiMajorAxis => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Period of the orbit equal to inverse of mean motion, in minutes.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get period => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get apogee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get perigee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOrbitDetermination => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  ///  Example: /// Example: Example line1
  ///  Constraints: Minimum length = 0, Maximum length = 69
  String? get line1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  ///  Example: /// Example: Example line2
  ///  Constraints: Minimum length = 0, Maximum length = 69
  String? get line2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: Example description
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get descriptor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  ElsetIngestDataModeEnum get dataMode => ElsetIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 70, 0));
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 72);
  ///  Optional algorithm used to produce this record.
  ///  Example: /// Example: Example algorithm
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get algorithm => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  ///  Example: /// Example: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2']
  ///  Constraints: No constraints specified.
  List<String>? get sourcedData => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 76);
  ///  Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
  ///  Example: /// Example: ['RADAR', 'RF']
  ///  Constraints: No constraints specified.
  ElsetIngestSourcedDataTypesEnum get sourcedDataTypes => ElsetIngestSourcedDataTypesEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 78, 0));
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  The ephemeris type associated with this TLE:
  ///  0:&nbsp;SGP4 if orbital period&nbsp;&lt;&nbsp;225 minutes, and SDP4 otherwise
  ///  1:&nbsp;SGP
  ///  2:&nbsp;SGP4
  ///  3:&nbsp;SDP4
  ///  4:&nbsp;SGP8, also referred to as SGP4-XP
  ///  5:&nbsp;SDP8
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get ephemType => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 82, 0);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);

  @override
  String toString() {
    return 'ElsetIngest{idElset: ${idElset}, classificationMarking: ${classificationMarking}, satNo: ${satNo}, epoch: ${epoch}, meanMotion: ${meanMotion}, idOnOrbit: ${idOnOrbit}, uct: ${uct}, eccentricity: ${eccentricity}, inclination: ${inclination}, raan: ${raan}, argOfPerigee: ${argOfPerigee}, meanAnomaly: ${meanAnomaly}, revNo: ${revNo}, bStar: ${bStar}, agom: ${agom}, ballisticCoeff: ${ballisticCoeff}, meanMotionDot: ${meanMotionDot}, meanMotionDdot: ${meanMotionDdot}, semiMajorAxis: ${semiMajorAxis}, period: ${period}, apogee: ${apogee}, perigee: ${perigee}, origObjectId: ${origObjectId}, idOrbitDetermination: ${idOrbitDetermination}, line1: ${line1}, line2: ${line2}, descriptor: ${descriptor}, createdAt: ${createdAt}, createdBy: ${createdBy}, rawFileUri: ${rawFileUri}, origin: ${origin}, sourceDl: ${sourceDl}, source: ${source}, dataMode: ${dataMode}, tags: ${tags}, algorithm: ${algorithm}, sourcedData: ${sourcedData}, sourcedDataTypes: ${sourcedDataTypes}, transactionId: ${transactionId}, ephemType: ${ephemType}, origNetwork: ${origNetwork}}';
  }
}

class _ElsetIngestReader extends fb.TableReader<ElsetIngest> {
  const _ElsetIngestReader();

  @override
  ElsetIngest createObject(fb.BufferContext bc, int offset) => 
    ElsetIngest._(bc, offset);
}

class ElsetIngestBuilder {
  ElsetIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(41);
  }

  int addIdElsetOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(2, satNo);
    return fbBuilder.offset;
  }
  int addEpochOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMeanMotion(double? meanMotion) {
    fbBuilder.addFloat64(4, meanMotion);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addUct(bool? uct) {
    fbBuilder.addBool(6, uct);
    return fbBuilder.offset;
  }
  int addEccentricity(double? eccentricity) {
    fbBuilder.addFloat64(7, eccentricity);
    return fbBuilder.offset;
  }
  int addInclination(double? inclination) {
    fbBuilder.addFloat64(8, inclination);
    return fbBuilder.offset;
  }
  int addRaan(double? raan) {
    fbBuilder.addFloat64(9, raan);
    return fbBuilder.offset;
  }
  int addArgOfPerigee(double? argOfPerigee) {
    fbBuilder.addFloat64(10, argOfPerigee);
    return fbBuilder.offset;
  }
  int addMeanAnomaly(double? meanAnomaly) {
    fbBuilder.addFloat64(11, meanAnomaly);
    return fbBuilder.offset;
  }
  int addRevNo(int? revNo) {
    fbBuilder.addInt32(12, revNo);
    return fbBuilder.offset;
  }
  int addBStar(double? bStar) {
    fbBuilder.addFloat64(13, bStar);
    return fbBuilder.offset;
  }
  int addAgom(double? agom) {
    fbBuilder.addFloat64(14, agom);
    return fbBuilder.offset;
  }
  int addBallisticCoeff(double? ballisticCoeff) {
    fbBuilder.addFloat64(15, ballisticCoeff);
    return fbBuilder.offset;
  }
  int addMeanMotionDot(double? meanMotionDot) {
    fbBuilder.addFloat64(16, meanMotionDot);
    return fbBuilder.offset;
  }
  int addMeanMotionDdot(double? meanMotionDdot) {
    fbBuilder.addFloat64(17, meanMotionDdot);
    return fbBuilder.offset;
  }
  int addSemiMajorAxis(double? semiMajorAxis) {
    fbBuilder.addFloat64(18, semiMajorAxis);
    return fbBuilder.offset;
  }
  int addPeriod(double? period) {
    fbBuilder.addFloat64(19, period);
    return fbBuilder.offset;
  }
  int addApogee(double? apogee) {
    fbBuilder.addFloat64(20, apogee);
    return fbBuilder.offset;
  }
  int addPerigee(double? perigee) {
    fbBuilder.addFloat64(21, perigee);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addIdOrbitDeterminationOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addLine1Offset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addLine2Offset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addDataMode(ElsetIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(33, dataMode?.value);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addAlgorithmOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addSourcedDataOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addSourcedDataTypes(ElsetIngestSourcedDataTypesEnum? sourcedDataTypes) {
    fbBuilder.addInt8(37, sourcedDataTypes?.value);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addEphemType(int? ephemType) {
    fbBuilder.addInt32(39, ephemType);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ElsetIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _idElset;
  final String? _classificationMarking;
  final int? _satNo;
  final String? _epoch;
  final double? _meanMotion;
  final String? _idOnOrbit;
  final bool? _uct;
  final double? _eccentricity;
  final double? _inclination;
  final double? _raan;
  final double? _argOfPerigee;
  final double? _meanAnomaly;
  final int? _revNo;
  final double? _bStar;
  final double? _agom;
  final double? _ballisticCoeff;
  final double? _meanMotionDot;
  final double? _meanMotionDdot;
  final double? _semiMajorAxis;
  final double? _period;
  final double? _apogee;
  final double? _perigee;
  final String? _origObjectId;
  final String? _idOrbitDetermination;
  final String? _line1;
  final String? _line2;
  final String? _descriptor;
  final String? _createdAt;
  final String? _createdBy;
  final String? _rawFileUri;
  final String? _origin;
  final String? _sourceDl;
  final String? _source;
  final ElsetIngestDataModeEnum? _dataMode;
  final List<String>? _tags;
  final String? _algorithm;
  final List<String>? _sourcedData;
  final ElsetIngestSourcedDataTypesEnum? _sourcedDataTypes;
  final String? _transactionId;
  final int? _ephemType;
  final String? _origNetwork;

  ElsetIngestObjectBuilder({
    String? idElset,
    String? classificationMarking,
    int? satNo,
    String? epoch,
    double? meanMotion,
    String? idOnOrbit,
    bool? uct,
    double? eccentricity,
    double? inclination,
    double? raan,
    double? argOfPerigee,
    double? meanAnomaly,
    int? revNo,
    double? bStar,
    double? agom,
    double? ballisticCoeff,
    double? meanMotionDot,
    double? meanMotionDdot,
    double? semiMajorAxis,
    double? period,
    double? apogee,
    double? perigee,
    String? origObjectId,
    String? idOrbitDetermination,
    String? line1,
    String? line2,
    String? descriptor,
    String? createdAt,
    String? createdBy,
    String? rawFileUri,
    String? origin,
    String? sourceDl,
    String? source,
    ElsetIngestDataModeEnum? dataMode,
    List<String>? tags,
    String? algorithm,
    List<String>? sourcedData,
    ElsetIngestSourcedDataTypesEnum? sourcedDataTypes,
    String? transactionId,
    int? ephemType,
    String? origNetwork,
  })
      : _idElset = idElset,
        _classificationMarking = classificationMarking,
        _satNo = satNo,
        _epoch = epoch,
        _meanMotion = meanMotion,
        _idOnOrbit = idOnOrbit,
        _uct = uct,
        _eccentricity = eccentricity,
        _inclination = inclination,
        _raan = raan,
        _argOfPerigee = argOfPerigee,
        _meanAnomaly = meanAnomaly,
        _revNo = revNo,
        _bStar = bStar,
        _agom = agom,
        _ballisticCoeff = ballisticCoeff,
        _meanMotionDot = meanMotionDot,
        _meanMotionDdot = meanMotionDdot,
        _semiMajorAxis = semiMajorAxis,
        _period = period,
        _apogee = apogee,
        _perigee = perigee,
        _origObjectId = origObjectId,
        _idOrbitDetermination = idOrbitDetermination,
        _line1 = line1,
        _line2 = line2,
        _descriptor = descriptor,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _rawFileUri = rawFileUri,
        _origin = origin,
        _sourceDl = sourceDl,
        _source = source,
        _dataMode = dataMode,
        _tags = tags,
        _algorithm = algorithm,
        _sourcedData = sourcedData,
        _sourcedDataTypes = sourcedDataTypes,
        _transactionId = transactionId,
        _ephemType = ephemType,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idElsetOffset = _idElset == null ? null
        : fbBuilder.writeString(_idElset!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? epochOffset = _epoch == null ? null
        : fbBuilder.writeString(_epoch!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? idOrbitDeterminationOffset = _idOrbitDetermination == null ? null
        : fbBuilder.writeString(_idOrbitDetermination!);
    final int? line1Offset = _line1 == null ? null
        : fbBuilder.writeString(_line1!);
    final int? line2Offset = _line2 == null ? null
        : fbBuilder.writeString(_line2!);
    final int? descriptorOffset = _descriptor == null ? null
        : fbBuilder.writeString(_descriptor!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? algorithmOffset = _algorithm == null ? null
        : fbBuilder.writeString(_algorithm!);
    final int? sourcedDataOffset = _sourcedData == null ? null
        : fbBuilder.writeList(_sourcedData!.map(fbBuilder.writeString).toList());
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(41);
    fbBuilder.addOffset(0, idElsetOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addInt32(2, _satNo);
    fbBuilder.addOffset(3, epochOffset);
    fbBuilder.addFloat64(4, _meanMotion);
    fbBuilder.addOffset(5, idOnOrbitOffset);
    fbBuilder.addBool(6, _uct);
    fbBuilder.addFloat64(7, _eccentricity);
    fbBuilder.addFloat64(8, _inclination);
    fbBuilder.addFloat64(9, _raan);
    fbBuilder.addFloat64(10, _argOfPerigee);
    fbBuilder.addFloat64(11, _meanAnomaly);
    fbBuilder.addInt32(12, _revNo);
    fbBuilder.addFloat64(13, _bStar);
    fbBuilder.addFloat64(14, _agom);
    fbBuilder.addFloat64(15, _ballisticCoeff);
    fbBuilder.addFloat64(16, _meanMotionDot);
    fbBuilder.addFloat64(17, _meanMotionDdot);
    fbBuilder.addFloat64(18, _semiMajorAxis);
    fbBuilder.addFloat64(19, _period);
    fbBuilder.addFloat64(20, _apogee);
    fbBuilder.addFloat64(21, _perigee);
    fbBuilder.addOffset(22, origObjectIdOffset);
    fbBuilder.addOffset(23, idOrbitDeterminationOffset);
    fbBuilder.addOffset(24, line1Offset);
    fbBuilder.addOffset(25, line2Offset);
    fbBuilder.addOffset(26, descriptorOffset);
    fbBuilder.addOffset(27, createdAtOffset);
    fbBuilder.addOffset(28, createdByOffset);
    fbBuilder.addOffset(29, rawFileUriOffset);
    fbBuilder.addOffset(30, originOffset);
    fbBuilder.addOffset(31, sourceDlOffset);
    fbBuilder.addOffset(32, sourceOffset);
    fbBuilder.addInt8(33, _dataMode?.value);
    fbBuilder.addOffset(34, tagsOffset);
    fbBuilder.addOffset(35, algorithmOffset);
    fbBuilder.addOffset(36, sourcedDataOffset);
    fbBuilder.addInt8(37, _sourcedDataTypes?.value);
    fbBuilder.addOffset(38, transactionIdOffset);
    fbBuilder.addInt32(39, _ephemType);
    fbBuilder.addOffset(40, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
