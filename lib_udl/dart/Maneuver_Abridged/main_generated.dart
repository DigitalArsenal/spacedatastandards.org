// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class ManeuverAbridgedDataModeEnum {
  final int value;
  const ManeuverAbridgedDataModeEnum._(this.value);

  factory ManeuverAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ManeuverAbridgedDataModeEnum');
    }
    return result;
  }

  static ManeuverAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : ManeuverAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const ManeuverAbridgedDataModeEnum REAL = ManeuverAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const ManeuverAbridgedDataModeEnum TEST = ManeuverAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const ManeuverAbridgedDataModeEnum SIMULATED = ManeuverAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const ManeuverAbridgedDataModeEnum EXERCISE = ManeuverAbridgedDataModeEnum._(3);
  static const Map<int, ManeuverAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<ManeuverAbridgedDataModeEnum> reader = _ManeuverAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'ManeuverAbridgedDataModeEnum{value: $value}';
  }
}

class _ManeuverAbridgedDataModeEnumReader extends fb.Reader<ManeuverAbridgedDataModeEnum> {
  const _ManeuverAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  ManeuverAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      ManeuverAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of on-orbit object maneuver information for detected, possible, and confirmed maneuvers.
class ManeuverAbridged {
  ManeuverAbridged._(this._bc, this._bcOffset);
  factory ManeuverAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ManeuverAbridged> reader = _ManeuverAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: MANEUVER-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  The time that the report or alert of this maneuver was generated, in ISO 8601 UTC format.
  ///  Example: /// Example: 2023-11-16T04:15:00.0001Z
  ///  Constraints: No constraints specified.
  String? get reportTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Maneuver event start time in ISO 8601 UTC with microsecond precision. For maneuvers without start and end times, the start time is considered to be the maneuver event time.
  ///  Example: /// Example: 2023-11-16T01:05:16.835689Z
  ///  Constraints: No constraints specified.
  String? get eventStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Maneuver event end time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2023-11-16T01:09:01.350012Z
  ///  Constraints: No constraints specified.
  String? get eventEndTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The estimated total active burn time of a maneuver, in seconds. This includes the sum of all burns in numAccelPoints. Not to be confused with the total duration of the maneuver.
  ///  Example: /// Example: 600.72
  ///  Constraints: No constraints specified.
  double get totalBurnTime => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2023-11-16T03:55:51Z
  ///  Constraints: No constraints specified.
  String? get odFitEndTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  ///  Example: /// Example: 12
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Optional ID of the sensor that detected this maneuver (for example, if detected by passive RF anomalies).
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Boolean indicating this maneuver was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get uct => const fb.BoolReader().vTableGet(_bc, _bcOffset, 24, false);
  ///  Uncertainty in the occurrence of this maneuver (0 - 1).
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get maneuverUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Optional purpose of the maneuver if known (e.g. North-South Station Keeping, East-West Station Keeping, Longitude Shift, Unknown).
  ///  Example: /// Example: North-South Station Keeping
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get characterization => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Uncertainty in the characterization or purpose assessment of this maneuver (0 - 1).
  ///  Example: /// Example: 0.15
  ///  Constraints: No constraints specified.
  double get characterizationUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Optional source-provided identifier for this maneuver event. In the case where multiple maneuver records are submitted for the same event, this field can be used to tie them together to the same event.
  ///  Example: /// Example: EVENT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get eventId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Identifier provided by source to indicate the target on-orbit object performing this maneuver. This may be an internal identifier and not necessarily a valid satellite number/ID.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED).
  ///  CANCELLED:  A previously planned maneuver whose execution was cancelled.
  ///  PLANNED:  A maneuver planned to take place at the eventStartTime.
  ///  POSSIBLE:  A possible maneuver detected by observation of the spacecraft or by evaluation of the spacecraft orbit.
  ///  REDACTED:  A redaction of a reported possible maneuver that has been determined to have not taken place after further observation/evaluation.
  ///  VERIFIED:  A maneuver whose execution has been verified, either by the owner/operator or observation/evaluation.
  ///  Example: /// Example: POSSIBLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Magnitude, in km, of the difference in the pre- and post-maneuver position vectors at the maneuver event time.
  ///  Example: /// Example: 0.715998327
  ///  Constraints: No constraints specified.
  double get deltaPos => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
  ///  Example: /// Example: -0.022172844
  ///  Constraints: No constraints specified.
  double get deltaPosU => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
  ///  Example: /// Example: -0.033700154
  ///  Constraints: No constraints specified.
  double get deltaPosV => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
  ///  Example: /// Example: -0.714861014
  ///  Constraints: No constraints specified.
  double get deltaPosW => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors at the maneuver event time.
  ///  Example: /// Example: 0.000631505
  ///  Constraints: No constraints specified.
  double get deltaVel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
  ///  Example: /// Example: 3.50165629389647e-05
  ///  Constraints: No constraints specified.
  double get deltaVelU => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
  ///  Example: /// Example: 0.000544413
  ///  Constraints: No constraints specified.
  double get deltaVelV => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
  ///  Example: /// Example: -0.000318099
  ///  Constraints: No constraints specified.
  double get deltaVelW => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Difference in mass before and after the maneuver, in kg.
  ///  Example: /// Example: 0.15
  ///  Constraints: No constraints specified.
  double get deltaMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Optional identifier of the element set for the pre-maneuver orbit.
  ///  Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get preEventIdElset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get preEventElset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Optional identifier of the state vector for the pre-maneuver trajectory of the spacecraft.
  ///  Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get preEventIdStateVector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get preEventStateVector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Pre-event X component of position in ECI space, in km.
  ///  Example: /// Example: 3584.432545
  ///  Constraints: No constraints specified.
  double get prePosX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Pre-event Y component of position in ECI space, in km.
  ///  Example: /// Example: 42028.43245
  ///  Constraints: No constraints specified.
  double get prePosY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Pre-event Z component of position in ECI space, in km.
  ///  Example: /// Example: -1.97765
  ///  Constraints: No constraints specified.
  double get prePosZ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Pre-event X component of velocity in ECI space, in km/sec.
  ///  Example: /// Example: -2.543266
  ///  Constraints: No constraints specified.
  double get preVelX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  Pre-event Y component of velocity in ECI space, in km/sec.
  ///  Example: /// Example: 0.24876
  ///  Constraints: No constraints specified.
  double get preVelY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  Pre-event Z component of velocity in ECI space, in km/sec.
  ///  Example: /// Example: 0.0067352
  ///  Constraints: No constraints specified.
  double get preVelZ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Pre-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
  ///  Example: /// Example: 4.51e-07
  ///  Constraints: No constraints specified.
  double get preRadiationPressCoeff => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Pre-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
  ///  Example: /// Example: 0.000437116
  ///  Constraints: No constraints specified.
  double get preBallisticCoeff => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  Pre-event spacecraft apogee (measured from Earth center), in kilometers.
  ///  Example: /// Example: 35802
  ///  Constraints: No constraints specified.
  double get preApogee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  Pre-event spacecraft perigee (measured from Earth center), in kilometers.
  ///  Example: /// Example: 35786.5
  ///  Constraints: No constraints specified.
  double get prePerigee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Pre-event spacecraft orbital inclination, in degrees. 0-180.
  ///  Example: /// Example: 0.0336
  ///  Constraints: No constraints specified.
  double get preInclination => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  Pre-event spacecraft eccentricity.
  ///  Example: /// Example: 0.00017
  ///  Constraints: No constraints specified.
  double get preEccentricity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  Pre-event spacecraft orbital period, in minutes.
  ///  Example: /// Example: 1436.12
  ///  Constraints: No constraints specified.
  double get prePeriod => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
  ///  Example: /// Example: 98.3336
  ///  Constraints: No constraints specified.
  double get preRaan => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
  ///  Example: /// Example: 42165.1
  ///  Constraints: No constraints specified.
  double get preSma => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -93.12
  ///  Constraints: No constraints specified.
  double get preGeoLongitude => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
  ///  Example: /// Example: -0.0125
  ///  Constraints: No constraints specified.
  double get preDriftRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  Pre-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
  ///  Example: /// Example: 0.215
  ///  Constraints: No constraints specified.
  double get preSigmaU => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  Pre-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
  ///  Example: /// Example: 1.97
  ///  Constraints: No constraints specified.
  double get preSigmaV => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  Pre-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
  ///  Example: /// Example: 0.208
  ///  Constraints: No constraints specified.
  double get preSigmaW => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  Optional identifier of the element set for the post-maneuver orbit.
  ///  Example: /// Example: 225adf4c-8606-40a8-929e-63e22cffe220
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get postEventIdElset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get postEventElset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Optional identifier of the state vector for the post-maneuver trajectory of the spacecraft.
  ///  Example: /// Example: d83a23f8-1496-485a-bd88-ec5808c73299
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get postEventIdStateVector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get postEventStateVector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  Post-event X component of position in ECI space, in km.
  ///  Example: /// Example: 3589.351957
  ///  Constraints: No constraints specified.
  double get postPosX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  Post-event Y component of position in ECI space, in km.
  ///  Example: /// Example: 42017.26823
  ///  Constraints: No constraints specified.
  double get postPosY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 116, 0.0);
  ///  Post-event Z component of position in ECI space, in km.
  ///  Example: /// Example: -1.27161796
  ///  Constraints: No constraints specified.
  double get postPosZ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  ///  Post-event X component of velocity in ECI space, in km/sec.
  ///  Example: /// Example: -3.063152826
  ///  Constraints: No constraints specified.
  double get postVelX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 120, 0.0);
  ///  Post-event Y component of velocity in ECI space, in km/sec.
  ///  Example: /// Example: 0.261586769
  ///  Constraints: No constraints specified.
  double get postVelY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  Post-event Z component of velocity in ECI space, in km/sec.
  ///  Example: /// Example: 0.006842148
  ///  Constraints: No constraints specified.
  double get postVelZ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  Post-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
  ///  Example: /// Example: 4.51e-07
  ///  Constraints: No constraints specified.
  double get postRadiationPressCoeff => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  ///  Post-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
  ///  Example: /// Example: 0.000433209
  ///  Constraints: No constraints specified.
  double get postBallisticCoeff => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 128, 0.0);
  ///  Post-event spacecraft apogee (measured from Earth center), in kilometers.
  ///  Example: /// Example: 35800.1
  ///  Constraints: No constraints specified.
  double get postApogee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 130, 0.0);
  ///  Post-event spacecraft perigee (measured from Earth center), in kilometers.
  ///  Example: /// Example: 35787.9
  ///  Constraints: No constraints specified.
  double get postPerigee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  ///  Post-event spacecraft orbital inclination, in degrees. 0-180.
  ///  Example: /// Example: 0.0327
  ///  Constraints: No constraints specified.
  double get postInclination => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 134, 0.0);
  ///  Post-event spacecraft eccentricity.
  ///  Example: /// Example: 0.000164
  ///  Constraints: No constraints specified.
  double get postEccentricity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 136, 0.0);
  ///  Post-event spacecraft orbital period, in minutes.
  ///  Example: /// Example: 1436.01
  ///  Constraints: No constraints specified.
  double get postPeriod => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 138, 0.0);
  ///  Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
  ///  Example: /// Example: 98.3335
  ///  Constraints: No constraints specified.
  double get postRaan => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 140, 0.0);
  ///  Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
  ///  Example: /// Example: 42164.87
  ///  Constraints: No constraints specified.
  double get postSma => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 142, 0.0);
  ///  Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -93.15
  ///  Constraints: No constraints specified.
  double get postGeoLongitude => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 144, 0.0);
  ///  Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
  ///  Example: /// Example: -0.0125
  ///  Constraints: No constraints specified.
  double get postDriftRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  ///  Post-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
  ///  Example: /// Example: 12.285
  ///  Constraints: No constraints specified.
  double get postSigmaU => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 148, 0.0);
  ///  Post-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
  ///  Example: /// Example: 71.339
  ///  Constraints: No constraints specified.
  double get postSigmaV => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 150, 0.0);
  ///  Post-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
  ///  Example: /// Example: 12.77
  ///  Constraints: No constraints specified.
  double get postSigmaW => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 152, 0.0);
  ///  Optional maneuver cross-track/radial/in-track covariance array, in meter and second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C, CT_R, CT_I, CT_C, CT_T.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get cov => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 154);
  ///   Estimated mass of the object following the maneuver, in kg.
  ///  Example: /// Example: 1844.5
  ///  Constraints: No constraints specified.
  double get postMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 156, 0.0);
  ///  Estimated area of the object following the maneuver, in meters squared.
  ///  Example: /// Example: 35.77
  ///  Constraints: No constraints specified.
  double get postArea => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 158, 0.0);
  ///  Number of observations used to generate the maneuver data.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get numObs => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 160, 0);
  ///  Description and notes of the maneuver.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 162);
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: Example descriptor
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get descriptor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 164);
  ///  Name of the state model used to generate the maneuver data.
  ///  Example: /// Example: Example name
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get stateModel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 166);
  ///  Version of the state model used to generate the maneuver data.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  double get stateModelVersion => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 168, 0.0);
  ///  The total number of estimated acceleration points during the maneuver.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get numAccelPoints => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 170, 0);
  ///  Array of elapsed times, in seconds from maneuver start time, at which each acceleration point is estimated. Number of elements must match the numAccelPoints.
  ///  Example: /// Example: [10.25, 50.56, 150.78]
  ///  Constraints: No constraints specified.
  List<String>? get mnvrAccelTimes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 172);
  ///  Array of estimated acceleration values, in meters per second squared. Number of elements must match the numAccelPoints.
  ///  Example: /// Example: [0.05, 0.1, 0.05]
  ///  Constraints: No constraints specified.
  List<String>? get mnvrAccels => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 174);
  ///  Array of the 1-sigma uncertainties in estimated accelerations, in meters per second squared. Number of elements must match the numAccelPoints.
  ///  Example: /// Example: [0.0005, 0.001, 0.0005]
  ///  Constraints: No constraints specified.
  List<String>? get mnvrAccelUncs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 176);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 178);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 180);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  ManeuverAbridgedDataModeEnum get dataMode => ManeuverAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 182, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 184);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 186);
  ///  Optional algorithm used to produce this record.
  ///  Example: /// Example: Example algorithm
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get algorithm => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 188);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 190);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 192);

  @override
  String toString() {
    return 'ManeuverAbridged{id: ${id}, classificationMarking: ${classificationMarking}, satNo: ${satNo}, reportTime: ${reportTime}, eventStartTime: ${eventStartTime}, eventEndTime: ${eventEndTime}, totalBurnTime: ${totalBurnTime}, odFitEndTime: ${odFitEndTime}, idOnOrbit: ${idOnOrbit}, idSensor: ${idSensor}, uct: ${uct}, maneuverUnc: ${maneuverUnc}, characterization: ${characterization}, characterizationUnc: ${characterizationUnc}, eventId: ${eventId}, origObjectId: ${origObjectId}, origSensorId: ${origSensorId}, status: ${status}, deltaPos: ${deltaPos}, deltaPosU: ${deltaPosU}, deltaPosV: ${deltaPosV}, deltaPosW: ${deltaPosW}, deltaVel: ${deltaVel}, deltaVelU: ${deltaVelU}, deltaVelV: ${deltaVelV}, deltaVelW: ${deltaVelW}, deltaMass: ${deltaMass}, preEventIdElset: ${preEventIdElset}, preEventElset: ${preEventElset}, preEventIdStateVector: ${preEventIdStateVector}, preEventStateVector: ${preEventStateVector}, prePosX: ${prePosX}, prePosY: ${prePosY}, prePosZ: ${prePosZ}, preVelX: ${preVelX}, preVelY: ${preVelY}, preVelZ: ${preVelZ}, preRadiationPressCoeff: ${preRadiationPressCoeff}, preBallisticCoeff: ${preBallisticCoeff}, preApogee: ${preApogee}, prePerigee: ${prePerigee}, preInclination: ${preInclination}, preEccentricity: ${preEccentricity}, prePeriod: ${prePeriod}, preRaan: ${preRaan}, preSma: ${preSma}, preGeoLongitude: ${preGeoLongitude}, preDriftRate: ${preDriftRate}, preSigmaU: ${preSigmaU}, preSigmaV: ${preSigmaV}, preSigmaW: ${preSigmaW}, postEventIdElset: ${postEventIdElset}, postEventElset: ${postEventElset}, postEventIdStateVector: ${postEventIdStateVector}, postEventStateVector: ${postEventStateVector}, postPosX: ${postPosX}, postPosY: ${postPosY}, postPosZ: ${postPosZ}, postVelX: ${postVelX}, postVelY: ${postVelY}, postVelZ: ${postVelZ}, postRadiationPressCoeff: ${postRadiationPressCoeff}, postBallisticCoeff: ${postBallisticCoeff}, postApogee: ${postApogee}, postPerigee: ${postPerigee}, postInclination: ${postInclination}, postEccentricity: ${postEccentricity}, postPeriod: ${postPeriod}, postRaan: ${postRaan}, postSma: ${postSma}, postGeoLongitude: ${postGeoLongitude}, postDriftRate: ${postDriftRate}, postSigmaU: ${postSigmaU}, postSigmaV: ${postSigmaV}, postSigmaW: ${postSigmaW}, cov: ${cov}, postMass: ${postMass}, postArea: ${postArea}, numObs: ${numObs}, description: ${description}, descriptor: ${descriptor}, stateModel: ${stateModel}, stateModelVersion: ${stateModelVersion}, numAccelPoints: ${numAccelPoints}, mnvrAccelTimes: ${mnvrAccelTimes}, mnvrAccels: ${mnvrAccels}, mnvrAccelUncs: ${mnvrAccelUncs}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, algorithm: ${algorithm}, transactionId: ${transactionId}, origNetwork: ${origNetwork}}';
  }
}

class _ManeuverAbridgedReader extends fb.TableReader<ManeuverAbridged> {
  const _ManeuverAbridgedReader();

  @override
  ManeuverAbridged createObject(fb.BufferContext bc, int offset) => 
    ManeuverAbridged._(bc, offset);
}

class ManeuverAbridgedBuilder {
  ManeuverAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(95);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(2, satNo);
    return fbBuilder.offset;
  }
  int addReportTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addEventStartTimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addEventEndTimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTotalBurnTime(double? totalBurnTime) {
    fbBuilder.addFloat64(6, totalBurnTime);
    return fbBuilder.offset;
  }
  int addOdFitEndTimeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addUct(bool? uct) {
    fbBuilder.addBool(10, uct);
    return fbBuilder.offset;
  }
  int addManeuverUnc(double? maneuverUnc) {
    fbBuilder.addFloat64(11, maneuverUnc);
    return fbBuilder.offset;
  }
  int addCharacterizationOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addCharacterizationUnc(double? characterizationUnc) {
    fbBuilder.addFloat64(13, characterizationUnc);
    return fbBuilder.offset;
  }
  int addEventIdOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addDeltaPos(double? deltaPos) {
    fbBuilder.addFloat64(18, deltaPos);
    return fbBuilder.offset;
  }
  int addDeltaPosU(double? deltaPosU) {
    fbBuilder.addFloat64(19, deltaPosU);
    return fbBuilder.offset;
  }
  int addDeltaPosV(double? deltaPosV) {
    fbBuilder.addFloat64(20, deltaPosV);
    return fbBuilder.offset;
  }
  int addDeltaPosW(double? deltaPosW) {
    fbBuilder.addFloat64(21, deltaPosW);
    return fbBuilder.offset;
  }
  int addDeltaVel(double? deltaVel) {
    fbBuilder.addFloat64(22, deltaVel);
    return fbBuilder.offset;
  }
  int addDeltaVelU(double? deltaVelU) {
    fbBuilder.addFloat64(23, deltaVelU);
    return fbBuilder.offset;
  }
  int addDeltaVelV(double? deltaVelV) {
    fbBuilder.addFloat64(24, deltaVelV);
    return fbBuilder.offset;
  }
  int addDeltaVelW(double? deltaVelW) {
    fbBuilder.addFloat64(25, deltaVelW);
    return fbBuilder.offset;
  }
  int addDeltaMass(double? deltaMass) {
    fbBuilder.addFloat64(26, deltaMass);
    return fbBuilder.offset;
  }
  int addPreEventIdElsetOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addPreEventElsetOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addPreEventIdStateVectorOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addPreEventStateVectorOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addPrePosX(double? prePosX) {
    fbBuilder.addFloat64(31, prePosX);
    return fbBuilder.offset;
  }
  int addPrePosY(double? prePosY) {
    fbBuilder.addFloat64(32, prePosY);
    return fbBuilder.offset;
  }
  int addPrePosZ(double? prePosZ) {
    fbBuilder.addFloat64(33, prePosZ);
    return fbBuilder.offset;
  }
  int addPreVelX(double? preVelX) {
    fbBuilder.addFloat64(34, preVelX);
    return fbBuilder.offset;
  }
  int addPreVelY(double? preVelY) {
    fbBuilder.addFloat64(35, preVelY);
    return fbBuilder.offset;
  }
  int addPreVelZ(double? preVelZ) {
    fbBuilder.addFloat64(36, preVelZ);
    return fbBuilder.offset;
  }
  int addPreRadiationPressCoeff(double? preRadiationPressCoeff) {
    fbBuilder.addFloat64(37, preRadiationPressCoeff);
    return fbBuilder.offset;
  }
  int addPreBallisticCoeff(double? preBallisticCoeff) {
    fbBuilder.addFloat64(38, preBallisticCoeff);
    return fbBuilder.offset;
  }
  int addPreApogee(double? preApogee) {
    fbBuilder.addFloat64(39, preApogee);
    return fbBuilder.offset;
  }
  int addPrePerigee(double? prePerigee) {
    fbBuilder.addFloat64(40, prePerigee);
    return fbBuilder.offset;
  }
  int addPreInclination(double? preInclination) {
    fbBuilder.addFloat64(41, preInclination);
    return fbBuilder.offset;
  }
  int addPreEccentricity(double? preEccentricity) {
    fbBuilder.addFloat64(42, preEccentricity);
    return fbBuilder.offset;
  }
  int addPrePeriod(double? prePeriod) {
    fbBuilder.addFloat64(43, prePeriod);
    return fbBuilder.offset;
  }
  int addPreRaan(double? preRaan) {
    fbBuilder.addFloat64(44, preRaan);
    return fbBuilder.offset;
  }
  int addPreSma(double? preSma) {
    fbBuilder.addFloat64(45, preSma);
    return fbBuilder.offset;
  }
  int addPreGeoLongitude(double? preGeoLongitude) {
    fbBuilder.addFloat64(46, preGeoLongitude);
    return fbBuilder.offset;
  }
  int addPreDriftRate(double? preDriftRate) {
    fbBuilder.addFloat64(47, preDriftRate);
    return fbBuilder.offset;
  }
  int addPreSigmaU(double? preSigmaU) {
    fbBuilder.addFloat64(48, preSigmaU);
    return fbBuilder.offset;
  }
  int addPreSigmaV(double? preSigmaV) {
    fbBuilder.addFloat64(49, preSigmaV);
    return fbBuilder.offset;
  }
  int addPreSigmaW(double? preSigmaW) {
    fbBuilder.addFloat64(50, preSigmaW);
    return fbBuilder.offset;
  }
  int addPostEventIdElsetOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addPostEventElsetOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addPostEventIdStateVectorOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addPostEventStateVectorOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addPostPosX(double? postPosX) {
    fbBuilder.addFloat64(55, postPosX);
    return fbBuilder.offset;
  }
  int addPostPosY(double? postPosY) {
    fbBuilder.addFloat64(56, postPosY);
    return fbBuilder.offset;
  }
  int addPostPosZ(double? postPosZ) {
    fbBuilder.addFloat64(57, postPosZ);
    return fbBuilder.offset;
  }
  int addPostVelX(double? postVelX) {
    fbBuilder.addFloat64(58, postVelX);
    return fbBuilder.offset;
  }
  int addPostVelY(double? postVelY) {
    fbBuilder.addFloat64(59, postVelY);
    return fbBuilder.offset;
  }
  int addPostVelZ(double? postVelZ) {
    fbBuilder.addFloat64(60, postVelZ);
    return fbBuilder.offset;
  }
  int addPostRadiationPressCoeff(double? postRadiationPressCoeff) {
    fbBuilder.addFloat64(61, postRadiationPressCoeff);
    return fbBuilder.offset;
  }
  int addPostBallisticCoeff(double? postBallisticCoeff) {
    fbBuilder.addFloat64(62, postBallisticCoeff);
    return fbBuilder.offset;
  }
  int addPostApogee(double? postApogee) {
    fbBuilder.addFloat64(63, postApogee);
    return fbBuilder.offset;
  }
  int addPostPerigee(double? postPerigee) {
    fbBuilder.addFloat64(64, postPerigee);
    return fbBuilder.offset;
  }
  int addPostInclination(double? postInclination) {
    fbBuilder.addFloat64(65, postInclination);
    return fbBuilder.offset;
  }
  int addPostEccentricity(double? postEccentricity) {
    fbBuilder.addFloat64(66, postEccentricity);
    return fbBuilder.offset;
  }
  int addPostPeriod(double? postPeriod) {
    fbBuilder.addFloat64(67, postPeriod);
    return fbBuilder.offset;
  }
  int addPostRaan(double? postRaan) {
    fbBuilder.addFloat64(68, postRaan);
    return fbBuilder.offset;
  }
  int addPostSma(double? postSma) {
    fbBuilder.addFloat64(69, postSma);
    return fbBuilder.offset;
  }
  int addPostGeoLongitude(double? postGeoLongitude) {
    fbBuilder.addFloat64(70, postGeoLongitude);
    return fbBuilder.offset;
  }
  int addPostDriftRate(double? postDriftRate) {
    fbBuilder.addFloat64(71, postDriftRate);
    return fbBuilder.offset;
  }
  int addPostSigmaU(double? postSigmaU) {
    fbBuilder.addFloat64(72, postSigmaU);
    return fbBuilder.offset;
  }
  int addPostSigmaV(double? postSigmaV) {
    fbBuilder.addFloat64(73, postSigmaV);
    return fbBuilder.offset;
  }
  int addPostSigmaW(double? postSigmaW) {
    fbBuilder.addFloat64(74, postSigmaW);
    return fbBuilder.offset;
  }
  int addCovOffset(int? offset) {
    fbBuilder.addOffset(75, offset);
    return fbBuilder.offset;
  }
  int addPostMass(double? postMass) {
    fbBuilder.addFloat64(76, postMass);
    return fbBuilder.offset;
  }
  int addPostArea(double? postArea) {
    fbBuilder.addFloat64(77, postArea);
    return fbBuilder.offset;
  }
  int addNumObs(int? numObs) {
    fbBuilder.addInt32(78, numObs);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(79, offset);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(80, offset);
    return fbBuilder.offset;
  }
  int addStateModelOffset(int? offset) {
    fbBuilder.addOffset(81, offset);
    return fbBuilder.offset;
  }
  int addStateModelVersion(double? stateModelVersion) {
    fbBuilder.addFloat64(82, stateModelVersion);
    return fbBuilder.offset;
  }
  int addNumAccelPoints(int? numAccelPoints) {
    fbBuilder.addInt32(83, numAccelPoints);
    return fbBuilder.offset;
  }
  int addMnvrAccelTimesOffset(int? offset) {
    fbBuilder.addOffset(84, offset);
    return fbBuilder.offset;
  }
  int addMnvrAccelsOffset(int? offset) {
    fbBuilder.addOffset(85, offset);
    return fbBuilder.offset;
  }
  int addMnvrAccelUncsOffset(int? offset) {
    fbBuilder.addOffset(86, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(87, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(88, offset);
    return fbBuilder.offset;
  }
  int addDataMode(ManeuverAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(89, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(90, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(91, offset);
    return fbBuilder.offset;
  }
  int addAlgorithmOffset(int? offset) {
    fbBuilder.addOffset(92, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(93, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(94, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ManeuverAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final int? _satNo;
  final String? _reportTime;
  final String? _eventStartTime;
  final String? _eventEndTime;
  final double? _totalBurnTime;
  final String? _odFitEndTime;
  final String? _idOnOrbit;
  final String? _idSensor;
  final bool? _uct;
  final double? _maneuverUnc;
  final String? _characterization;
  final double? _characterizationUnc;
  final String? _eventId;
  final String? _origObjectId;
  final String? _origSensorId;
  final String? _status;
  final double? _deltaPos;
  final double? _deltaPosU;
  final double? _deltaPosV;
  final double? _deltaPosW;
  final double? _deltaVel;
  final double? _deltaVelU;
  final double? _deltaVelV;
  final double? _deltaVelW;
  final double? _deltaMass;
  final String? _preEventIdElset;
  final String? _preEventElset;
  final String? _preEventIdStateVector;
  final String? _preEventStateVector;
  final double? _prePosX;
  final double? _prePosY;
  final double? _prePosZ;
  final double? _preVelX;
  final double? _preVelY;
  final double? _preVelZ;
  final double? _preRadiationPressCoeff;
  final double? _preBallisticCoeff;
  final double? _preApogee;
  final double? _prePerigee;
  final double? _preInclination;
  final double? _preEccentricity;
  final double? _prePeriod;
  final double? _preRaan;
  final double? _preSma;
  final double? _preGeoLongitude;
  final double? _preDriftRate;
  final double? _preSigmaU;
  final double? _preSigmaV;
  final double? _preSigmaW;
  final String? _postEventIdElset;
  final String? _postEventElset;
  final String? _postEventIdStateVector;
  final String? _postEventStateVector;
  final double? _postPosX;
  final double? _postPosY;
  final double? _postPosZ;
  final double? _postVelX;
  final double? _postVelY;
  final double? _postVelZ;
  final double? _postRadiationPressCoeff;
  final double? _postBallisticCoeff;
  final double? _postApogee;
  final double? _postPerigee;
  final double? _postInclination;
  final double? _postEccentricity;
  final double? _postPeriod;
  final double? _postRaan;
  final double? _postSma;
  final double? _postGeoLongitude;
  final double? _postDriftRate;
  final double? _postSigmaU;
  final double? _postSigmaV;
  final double? _postSigmaW;
  final List<String>? _cov;
  final double? _postMass;
  final double? _postArea;
  final int? _numObs;
  final String? _description;
  final String? _descriptor;
  final String? _stateModel;
  final double? _stateModelVersion;
  final int? _numAccelPoints;
  final List<String>? _mnvrAccelTimes;
  final List<String>? _mnvrAccels;
  final List<String>? _mnvrAccelUncs;
  final String? _source;
  final String? _origin;
  final ManeuverAbridgedDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _algorithm;
  final String? _transactionId;
  final String? _origNetwork;

  ManeuverAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    int? satNo,
    String? reportTime,
    String? eventStartTime,
    String? eventEndTime,
    double? totalBurnTime,
    String? odFitEndTime,
    String? idOnOrbit,
    String? idSensor,
    bool? uct,
    double? maneuverUnc,
    String? characterization,
    double? characterizationUnc,
    String? eventId,
    String? origObjectId,
    String? origSensorId,
    String? status,
    double? deltaPos,
    double? deltaPosU,
    double? deltaPosV,
    double? deltaPosW,
    double? deltaVel,
    double? deltaVelU,
    double? deltaVelV,
    double? deltaVelW,
    double? deltaMass,
    String? preEventIdElset,
    String? preEventElset,
    String? preEventIdStateVector,
    String? preEventStateVector,
    double? prePosX,
    double? prePosY,
    double? prePosZ,
    double? preVelX,
    double? preVelY,
    double? preVelZ,
    double? preRadiationPressCoeff,
    double? preBallisticCoeff,
    double? preApogee,
    double? prePerigee,
    double? preInclination,
    double? preEccentricity,
    double? prePeriod,
    double? preRaan,
    double? preSma,
    double? preGeoLongitude,
    double? preDriftRate,
    double? preSigmaU,
    double? preSigmaV,
    double? preSigmaW,
    String? postEventIdElset,
    String? postEventElset,
    String? postEventIdStateVector,
    String? postEventStateVector,
    double? postPosX,
    double? postPosY,
    double? postPosZ,
    double? postVelX,
    double? postVelY,
    double? postVelZ,
    double? postRadiationPressCoeff,
    double? postBallisticCoeff,
    double? postApogee,
    double? postPerigee,
    double? postInclination,
    double? postEccentricity,
    double? postPeriod,
    double? postRaan,
    double? postSma,
    double? postGeoLongitude,
    double? postDriftRate,
    double? postSigmaU,
    double? postSigmaV,
    double? postSigmaW,
    List<String>? cov,
    double? postMass,
    double? postArea,
    int? numObs,
    String? description,
    String? descriptor,
    String? stateModel,
    double? stateModelVersion,
    int? numAccelPoints,
    List<String>? mnvrAccelTimes,
    List<String>? mnvrAccels,
    List<String>? mnvrAccelUncs,
    String? source,
    String? origin,
    ManeuverAbridgedDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? algorithm,
    String? transactionId,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _satNo = satNo,
        _reportTime = reportTime,
        _eventStartTime = eventStartTime,
        _eventEndTime = eventEndTime,
        _totalBurnTime = totalBurnTime,
        _odFitEndTime = odFitEndTime,
        _idOnOrbit = idOnOrbit,
        _idSensor = idSensor,
        _uct = uct,
        _maneuverUnc = maneuverUnc,
        _characterization = characterization,
        _characterizationUnc = characterizationUnc,
        _eventId = eventId,
        _origObjectId = origObjectId,
        _origSensorId = origSensorId,
        _status = status,
        _deltaPos = deltaPos,
        _deltaPosU = deltaPosU,
        _deltaPosV = deltaPosV,
        _deltaPosW = deltaPosW,
        _deltaVel = deltaVel,
        _deltaVelU = deltaVelU,
        _deltaVelV = deltaVelV,
        _deltaVelW = deltaVelW,
        _deltaMass = deltaMass,
        _preEventIdElset = preEventIdElset,
        _preEventElset = preEventElset,
        _preEventIdStateVector = preEventIdStateVector,
        _preEventStateVector = preEventStateVector,
        _prePosX = prePosX,
        _prePosY = prePosY,
        _prePosZ = prePosZ,
        _preVelX = preVelX,
        _preVelY = preVelY,
        _preVelZ = preVelZ,
        _preRadiationPressCoeff = preRadiationPressCoeff,
        _preBallisticCoeff = preBallisticCoeff,
        _preApogee = preApogee,
        _prePerigee = prePerigee,
        _preInclination = preInclination,
        _preEccentricity = preEccentricity,
        _prePeriod = prePeriod,
        _preRaan = preRaan,
        _preSma = preSma,
        _preGeoLongitude = preGeoLongitude,
        _preDriftRate = preDriftRate,
        _preSigmaU = preSigmaU,
        _preSigmaV = preSigmaV,
        _preSigmaW = preSigmaW,
        _postEventIdElset = postEventIdElset,
        _postEventElset = postEventElset,
        _postEventIdStateVector = postEventIdStateVector,
        _postEventStateVector = postEventStateVector,
        _postPosX = postPosX,
        _postPosY = postPosY,
        _postPosZ = postPosZ,
        _postVelX = postVelX,
        _postVelY = postVelY,
        _postVelZ = postVelZ,
        _postRadiationPressCoeff = postRadiationPressCoeff,
        _postBallisticCoeff = postBallisticCoeff,
        _postApogee = postApogee,
        _postPerigee = postPerigee,
        _postInclination = postInclination,
        _postEccentricity = postEccentricity,
        _postPeriod = postPeriod,
        _postRaan = postRaan,
        _postSma = postSma,
        _postGeoLongitude = postGeoLongitude,
        _postDriftRate = postDriftRate,
        _postSigmaU = postSigmaU,
        _postSigmaV = postSigmaV,
        _postSigmaW = postSigmaW,
        _cov = cov,
        _postMass = postMass,
        _postArea = postArea,
        _numObs = numObs,
        _description = description,
        _descriptor = descriptor,
        _stateModel = stateModel,
        _stateModelVersion = stateModelVersion,
        _numAccelPoints = numAccelPoints,
        _mnvrAccelTimes = mnvrAccelTimes,
        _mnvrAccels = mnvrAccels,
        _mnvrAccelUncs = mnvrAccelUncs,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _algorithm = algorithm,
        _transactionId = transactionId,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? reportTimeOffset = _reportTime == null ? null
        : fbBuilder.writeString(_reportTime!);
    final int? eventStartTimeOffset = _eventStartTime == null ? null
        : fbBuilder.writeString(_eventStartTime!);
    final int? eventEndTimeOffset = _eventEndTime == null ? null
        : fbBuilder.writeString(_eventEndTime!);
    final int? odFitEndTimeOffset = _odFitEndTime == null ? null
        : fbBuilder.writeString(_odFitEndTime!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? characterizationOffset = _characterization == null ? null
        : fbBuilder.writeString(_characterization!);
    final int? eventIdOffset = _eventId == null ? null
        : fbBuilder.writeString(_eventId!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? preEventIdElsetOffset = _preEventIdElset == null ? null
        : fbBuilder.writeString(_preEventIdElset!);
    final int? preEventElsetOffset = _preEventElset == null ? null
        : fbBuilder.writeString(_preEventElset!);
    final int? preEventIdStateVectorOffset = _preEventIdStateVector == null ? null
        : fbBuilder.writeString(_preEventIdStateVector!);
    final int? preEventStateVectorOffset = _preEventStateVector == null ? null
        : fbBuilder.writeString(_preEventStateVector!);
    final int? postEventIdElsetOffset = _postEventIdElset == null ? null
        : fbBuilder.writeString(_postEventIdElset!);
    final int? postEventElsetOffset = _postEventElset == null ? null
        : fbBuilder.writeString(_postEventElset!);
    final int? postEventIdStateVectorOffset = _postEventIdStateVector == null ? null
        : fbBuilder.writeString(_postEventIdStateVector!);
    final int? postEventStateVectorOffset = _postEventStateVector == null ? null
        : fbBuilder.writeString(_postEventStateVector!);
    final int? covOffset = _cov == null ? null
        : fbBuilder.writeList(_cov!.map(fbBuilder.writeString).toList());
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? descriptorOffset = _descriptor == null ? null
        : fbBuilder.writeString(_descriptor!);
    final int? stateModelOffset = _stateModel == null ? null
        : fbBuilder.writeString(_stateModel!);
    final int? mnvrAccelTimesOffset = _mnvrAccelTimes == null ? null
        : fbBuilder.writeList(_mnvrAccelTimes!.map(fbBuilder.writeString).toList());
    final int? mnvrAccelsOffset = _mnvrAccels == null ? null
        : fbBuilder.writeList(_mnvrAccels!.map(fbBuilder.writeString).toList());
    final int? mnvrAccelUncsOffset = _mnvrAccelUncs == null ? null
        : fbBuilder.writeList(_mnvrAccelUncs!.map(fbBuilder.writeString).toList());
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? algorithmOffset = _algorithm == null ? null
        : fbBuilder.writeString(_algorithm!);
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(95);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addInt32(2, _satNo);
    fbBuilder.addOffset(3, reportTimeOffset);
    fbBuilder.addOffset(4, eventStartTimeOffset);
    fbBuilder.addOffset(5, eventEndTimeOffset);
    fbBuilder.addFloat64(6, _totalBurnTime);
    fbBuilder.addOffset(7, odFitEndTimeOffset);
    fbBuilder.addOffset(8, idOnOrbitOffset);
    fbBuilder.addOffset(9, idSensorOffset);
    fbBuilder.addBool(10, _uct);
    fbBuilder.addFloat64(11, _maneuverUnc);
    fbBuilder.addOffset(12, characterizationOffset);
    fbBuilder.addFloat64(13, _characterizationUnc);
    fbBuilder.addOffset(14, eventIdOffset);
    fbBuilder.addOffset(15, origObjectIdOffset);
    fbBuilder.addOffset(16, origSensorIdOffset);
    fbBuilder.addOffset(17, statusOffset);
    fbBuilder.addFloat64(18, _deltaPos);
    fbBuilder.addFloat64(19, _deltaPosU);
    fbBuilder.addFloat64(20, _deltaPosV);
    fbBuilder.addFloat64(21, _deltaPosW);
    fbBuilder.addFloat64(22, _deltaVel);
    fbBuilder.addFloat64(23, _deltaVelU);
    fbBuilder.addFloat64(24, _deltaVelV);
    fbBuilder.addFloat64(25, _deltaVelW);
    fbBuilder.addFloat64(26, _deltaMass);
    fbBuilder.addOffset(27, preEventIdElsetOffset);
    fbBuilder.addOffset(28, preEventElsetOffset);
    fbBuilder.addOffset(29, preEventIdStateVectorOffset);
    fbBuilder.addOffset(30, preEventStateVectorOffset);
    fbBuilder.addFloat64(31, _prePosX);
    fbBuilder.addFloat64(32, _prePosY);
    fbBuilder.addFloat64(33, _prePosZ);
    fbBuilder.addFloat64(34, _preVelX);
    fbBuilder.addFloat64(35, _preVelY);
    fbBuilder.addFloat64(36, _preVelZ);
    fbBuilder.addFloat64(37, _preRadiationPressCoeff);
    fbBuilder.addFloat64(38, _preBallisticCoeff);
    fbBuilder.addFloat64(39, _preApogee);
    fbBuilder.addFloat64(40, _prePerigee);
    fbBuilder.addFloat64(41, _preInclination);
    fbBuilder.addFloat64(42, _preEccentricity);
    fbBuilder.addFloat64(43, _prePeriod);
    fbBuilder.addFloat64(44, _preRaan);
    fbBuilder.addFloat64(45, _preSma);
    fbBuilder.addFloat64(46, _preGeoLongitude);
    fbBuilder.addFloat64(47, _preDriftRate);
    fbBuilder.addFloat64(48, _preSigmaU);
    fbBuilder.addFloat64(49, _preSigmaV);
    fbBuilder.addFloat64(50, _preSigmaW);
    fbBuilder.addOffset(51, postEventIdElsetOffset);
    fbBuilder.addOffset(52, postEventElsetOffset);
    fbBuilder.addOffset(53, postEventIdStateVectorOffset);
    fbBuilder.addOffset(54, postEventStateVectorOffset);
    fbBuilder.addFloat64(55, _postPosX);
    fbBuilder.addFloat64(56, _postPosY);
    fbBuilder.addFloat64(57, _postPosZ);
    fbBuilder.addFloat64(58, _postVelX);
    fbBuilder.addFloat64(59, _postVelY);
    fbBuilder.addFloat64(60, _postVelZ);
    fbBuilder.addFloat64(61, _postRadiationPressCoeff);
    fbBuilder.addFloat64(62, _postBallisticCoeff);
    fbBuilder.addFloat64(63, _postApogee);
    fbBuilder.addFloat64(64, _postPerigee);
    fbBuilder.addFloat64(65, _postInclination);
    fbBuilder.addFloat64(66, _postEccentricity);
    fbBuilder.addFloat64(67, _postPeriod);
    fbBuilder.addFloat64(68, _postRaan);
    fbBuilder.addFloat64(69, _postSma);
    fbBuilder.addFloat64(70, _postGeoLongitude);
    fbBuilder.addFloat64(71, _postDriftRate);
    fbBuilder.addFloat64(72, _postSigmaU);
    fbBuilder.addFloat64(73, _postSigmaV);
    fbBuilder.addFloat64(74, _postSigmaW);
    fbBuilder.addOffset(75, covOffset);
    fbBuilder.addFloat64(76, _postMass);
    fbBuilder.addFloat64(77, _postArea);
    fbBuilder.addInt32(78, _numObs);
    fbBuilder.addOffset(79, descriptionOffset);
    fbBuilder.addOffset(80, descriptorOffset);
    fbBuilder.addOffset(81, stateModelOffset);
    fbBuilder.addFloat64(82, _stateModelVersion);
    fbBuilder.addInt32(83, _numAccelPoints);
    fbBuilder.addOffset(84, mnvrAccelTimesOffset);
    fbBuilder.addOffset(85, mnvrAccelsOffset);
    fbBuilder.addOffset(86, mnvrAccelUncsOffset);
    fbBuilder.addOffset(87, sourceOffset);
    fbBuilder.addOffset(88, originOffset);
    fbBuilder.addInt8(89, _dataMode?.value);
    fbBuilder.addOffset(90, createdAtOffset);
    fbBuilder.addOffset(91, createdByOffset);
    fbBuilder.addOffset(92, algorithmOffset);
    fbBuilder.addOffset(93, transactionIdOffset);
    fbBuilder.addOffset(94, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
