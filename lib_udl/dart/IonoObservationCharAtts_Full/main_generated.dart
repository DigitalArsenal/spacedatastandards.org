// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Characteristic attributes of a IonoObservation.
class IonoObservationCharAttsFull {
  IonoObservationCharAttsFull._(this._bc, this._bcOffset);
  factory IonoObservationCharAttsFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IonoObservationCharAttsFull> reader = _IonoObservationCharAttsFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.
  ///  Example: /// Example: 04
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get ursiId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.
  ///  Example: /// Example: hprimeF2
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get charName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.
  ///  Example: /// Example: 1.26
  ///  Constraints: No constraints specified.
  double get lowerBound => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.
  ///  Example: /// Example: 2.57
  ///  Constraints: No constraints specified.
  double get upperBound => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
  ///  Example: /// Example: T
  ///  Constraints: No constraints specified.
  String? get q => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
  ///  Example: /// Example: K
  ///  Constraints: No constraints specified.
  String? get d => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Name of the climate model.
  ///  Example: /// Example: IRI
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get climateModelName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  List of options for the climate model.
  ///  Example: /// Example: ['URSI-88', 'No storm']
  ///  Constraints: No constraints specified.
  List<String>? get climateModelOptions => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 18);
  ///  Input parameters for the climate model.
  ///  Example: /// Example: ['ISSN1 88.1', 'Option 2']
  ///  Constraints: No constraints specified.
  List<String>? get climateModelInputParams => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);
  ///  Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).
  ///  Example: /// Example: 1sigma
  ///  Constraints: No constraints specified.
  String? get uncertaintyBoundType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'IonoObservationCharAttsFull{ursiId: ${ursiId}, charName: ${charName}, lowerBound: ${lowerBound}, upperBound: ${upperBound}, q: ${q}, d: ${d}, climateModelName: ${climateModelName}, climateModelOptions: ${climateModelOptions}, climateModelInputParams: ${climateModelInputParams}, uncertaintyBoundType: ${uncertaintyBoundType}}';
  }
}

class _IonoObservationCharAttsFullReader extends fb.TableReader<IonoObservationCharAttsFull> {
  const _IonoObservationCharAttsFullReader();

  @override
  IonoObservationCharAttsFull createObject(fb.BufferContext bc, int offset) => 
    IonoObservationCharAttsFull._(bc, offset);
}

class IonoObservationCharAttsFullBuilder {
  IonoObservationCharAttsFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addUrsiIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addCharNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLowerBound(double? lowerBound) {
    fbBuilder.addFloat64(2, lowerBound);
    return fbBuilder.offset;
  }
  int addUpperBound(double? upperBound) {
    fbBuilder.addFloat64(3, upperBound);
    return fbBuilder.offset;
  }
  int addQOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addDOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addClimateModelNameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addClimateModelOptionsOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addClimateModelInputParamsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addUncertaintyBoundTypeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IonoObservationCharAttsFullObjectBuilder extends fb.ObjectBuilder {
  final String? _ursiId;
  final String? _charName;
  final double? _lowerBound;
  final double? _upperBound;
  final String? _q;
  final String? _d;
  final String? _climateModelName;
  final List<String>? _climateModelOptions;
  final List<String>? _climateModelInputParams;
  final String? _uncertaintyBoundType;

  IonoObservationCharAttsFullObjectBuilder({
    String? ursiId,
    String? charName,
    double? lowerBound,
    double? upperBound,
    String? q,
    String? d,
    String? climateModelName,
    List<String>? climateModelOptions,
    List<String>? climateModelInputParams,
    String? uncertaintyBoundType,
  })
      : _ursiId = ursiId,
        _charName = charName,
        _lowerBound = lowerBound,
        _upperBound = upperBound,
        _q = q,
        _d = d,
        _climateModelName = climateModelName,
        _climateModelOptions = climateModelOptions,
        _climateModelInputParams = climateModelInputParams,
        _uncertaintyBoundType = uncertaintyBoundType;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ursiIdOffset = _ursiId == null ? null
        : fbBuilder.writeString(_ursiId!);
    final int? charNameOffset = _charName == null ? null
        : fbBuilder.writeString(_charName!);
    final int? qOffset = _q == null ? null
        : fbBuilder.writeString(_q!);
    final int? dOffset = _d == null ? null
        : fbBuilder.writeString(_d!);
    final int? climateModelNameOffset = _climateModelName == null ? null
        : fbBuilder.writeString(_climateModelName!);
    final int? climateModelOptionsOffset = _climateModelOptions == null ? null
        : fbBuilder.writeList(_climateModelOptions!.map(fbBuilder.writeString).toList());
    final int? climateModelInputParamsOffset = _climateModelInputParams == null ? null
        : fbBuilder.writeList(_climateModelInputParams!.map(fbBuilder.writeString).toList());
    final int? uncertaintyBoundTypeOffset = _uncertaintyBoundType == null ? null
        : fbBuilder.writeString(_uncertaintyBoundType!);
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, ursiIdOffset);
    fbBuilder.addOffset(1, charNameOffset);
    fbBuilder.addFloat64(2, _lowerBound);
    fbBuilder.addFloat64(3, _upperBound);
    fbBuilder.addOffset(4, qOffset);
    fbBuilder.addOffset(5, dOffset);
    fbBuilder.addOffset(6, climateModelNameOffset);
    fbBuilder.addOffset(7, climateModelOptionsOffset);
    fbBuilder.addOffset(8, climateModelInputParamsOffset);
    fbBuilder.addOffset(9, uncertaintyBoundTypeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
