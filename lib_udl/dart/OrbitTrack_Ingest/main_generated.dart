// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class OrbitTrackIngestObjIdentEnum {
  final int value;
  const OrbitTrackIngestObjIdentEnum._(this.value);

  factory OrbitTrackIngestObjIdentEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OrbitTrackIngestObjIdentEnum');
    }
    return result;
  }

  static OrbitTrackIngestObjIdentEnum? _createOrNull(int? value) => 
      value == null ? null : OrbitTrackIngestObjIdentEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 6;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  static const OrbitTrackIngestObjIdentEnum ASSUMED_FRIEND = OrbitTrackIngestObjIdentEnum._(0);

  ///  Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  static const OrbitTrackIngestObjIdentEnum FRIEND = OrbitTrackIngestObjIdentEnum._(1);

  ///  Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  static const OrbitTrackIngestObjIdentEnum HOSTILE = OrbitTrackIngestObjIdentEnum._(2);

  ///  Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  static const OrbitTrackIngestObjIdentEnum NEUTRAL = OrbitTrackIngestObjIdentEnum._(3);

  ///  Track object which has not been evaluated.
  static const OrbitTrackIngestObjIdentEnum PENDING = OrbitTrackIngestObjIdentEnum._(4);

  ///  Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  static const OrbitTrackIngestObjIdentEnum SUSPECT = OrbitTrackIngestObjIdentEnum._(5);

  ///  Track object which has been evaluated and does not meet criteria for any standard identity.
  static const OrbitTrackIngestObjIdentEnum UNKNOWN = OrbitTrackIngestObjIdentEnum._(6);
  static const Map<int, OrbitTrackIngestObjIdentEnum> values = {
    0: ASSUMED_FRIEND,
    1: FRIEND,
    2: HOSTILE,
    3: NEUTRAL,
    4: PENDING,
    5: SUSPECT,
    6: UNKNOWN};

  static const fb.Reader<OrbitTrackIngestObjIdentEnum> reader = _OrbitTrackIngestObjIdentEnumReader();

  @override
  String toString() {
    return 'OrbitTrackIngestObjIdentEnum{value: $value}';
  }
}

class _OrbitTrackIngestObjIdentEnumReader extends fb.Reader<OrbitTrackIngestObjIdentEnum> {
  const _OrbitTrackIngestObjIdentEnumReader();

  @override
  int get size => 1;

  @override
  OrbitTrackIngestObjIdentEnum read(fb.BufferContext bc, int offset) =>
      OrbitTrackIngestObjIdentEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class OrbitTrackIngestObjectTypeEnum {
  final int value;
  const OrbitTrackIngestObjectTypeEnum._(this.value);

  factory OrbitTrackIngestObjectTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OrbitTrackIngestObjectTypeEnum');
    }
    return result;
  }

  static OrbitTrackIngestObjectTypeEnum? _createOrNull(int? value) => 
      value == null ? null : OrbitTrackIngestObjectTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const OrbitTrackIngestObjectTypeEnum DEBRIS = OrbitTrackIngestObjectTypeEnum._(0);

  ///  No description available.
  static const OrbitTrackIngestObjectTypeEnum MANNED = OrbitTrackIngestObjectTypeEnum._(1);

  ///  No description available.
  static const OrbitTrackIngestObjectTypeEnum PAYLOAD = OrbitTrackIngestObjectTypeEnum._(2);

  ///  No description available.
  static const OrbitTrackIngestObjectTypeEnum PLATFORM = OrbitTrackIngestObjectTypeEnum._(3);

  ///  No description available.
  static const OrbitTrackIngestObjectTypeEnum ROCKET_BODY = OrbitTrackIngestObjectTypeEnum._(4);

  ///  No description available.
  static const OrbitTrackIngestObjectTypeEnum UNKNOWN = OrbitTrackIngestObjectTypeEnum._(5);
  static const Map<int, OrbitTrackIngestObjectTypeEnum> values = {
    0: DEBRIS,
    1: MANNED,
    2: PAYLOAD,
    3: PLATFORM,
    4: ROCKET_BODY,
    5: UNKNOWN};

  static const fb.Reader<OrbitTrackIngestObjectTypeEnum> reader = _OrbitTrackIngestObjectTypeEnumReader();

  @override
  String toString() {
    return 'OrbitTrackIngestObjectTypeEnum{value: $value}';
  }
}

class _OrbitTrackIngestObjectTypeEnumReader extends fb.Reader<OrbitTrackIngestObjectTypeEnum> {
  const _OrbitTrackIngestObjectTypeEnumReader();

  @override
  int get size => 1;

  @override
  OrbitTrackIngestObjectTypeEnum read(fb.BufferContext bc, int offset) =>
      OrbitTrackIngestObjectTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class OrbitTrackIngestDataModeEnum {
  final int value;
  const OrbitTrackIngestDataModeEnum._(this.value);

  factory OrbitTrackIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OrbitTrackIngestDataModeEnum');
    }
    return result;
  }

  static OrbitTrackIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : OrbitTrackIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const OrbitTrackIngestDataModeEnum REAL = OrbitTrackIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const OrbitTrackIngestDataModeEnum TEST = OrbitTrackIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const OrbitTrackIngestDataModeEnum SIMULATED = OrbitTrackIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const OrbitTrackIngestDataModeEnum EXERCISE = OrbitTrackIngestDataModeEnum._(3);
  static const Map<int, OrbitTrackIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<OrbitTrackIngestDataModeEnum> reader = _OrbitTrackIngestDataModeEnumReader();

  @override
  String toString() {
    return 'OrbitTrackIngestDataModeEnum{value: $value}';
  }
}

class _OrbitTrackIngestDataModeEnumReader extends fb.Reader<OrbitTrackIngestDataModeEnum> {
  const _OrbitTrackIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  OrbitTrackIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      OrbitTrackIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Keplerian orbital elements describing an orbit for a particular on-orbit satellite and applicable sensor data aiding in the orbit prediction.
class OrbitTrackIngest {
  OrbitTrackIngest._(this._bc, this._bcOffset);
  factory OrbitTrackIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OrbitTrackIngest> reader = _OrbitTrackIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: ORBIT_TRACK_ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the target on-orbit object, if correlated.
  ///  Example: /// Example: 32375
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 37375
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Optional identifier provided by observation source to indicate the target on-orbit object of this track. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: L2045
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the Elset associated with this object.
  ///  Example: /// Example: c715a619-8695-44d2-9e7d-effd257b4843
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idElset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Track timestamp in ISO8601 UTC format, with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get ts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  WGS-84 latitude of the track object subpoint, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 19.88550102
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  WGS-84 longitude of the track object subpoint, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 46.74596844
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Track point altitude relative to WGS-84 ellipsoid, in meters.
  ///  Example: /// Example: 585.71
  ///  Constraints: No constraints specified.
  double get alt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Radio frequency of the track, measured in megahertz (MHz).
  ///  Example: /// Example: 1.5273
  ///  Constraints: No constraints specified.
  double get rdfRf => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  International radio call sign assigned to the track. This is an 8-character alphanumeric code.
  ///  Example: /// Example: Charlie
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get callSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Report number received from the reporting source for this track.
  ///  Example: /// Example: 123
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get rptNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
  ///   ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///   FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///   HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///   NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///   PENDING: Track object which has not been evaluated.
  ///   SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///   UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  OrbitTrackIngestObjIdentEnum get objIdent => OrbitTrackIngestObjIdentEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 30, 0));
  ///  Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
  ///   FAKER: Friendly track, object, or entity acting as an exercise hostile.
  ///   JOKER: Friendly track, object, or entity acting as an exercise suspect.
  ///   KILO: Friendly high-value object.
  ///   TRAVELLER: Suspect land or surface track following a recognized traffic route.
  ///   ZOMBIE: Suspect track, object, or entity of special interest.
  ///  Example: /// Example: JOKER
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get identAmp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Status of the satellite.
  ///  Example: /// Example: INACTIVE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get satStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The on-orbit category assigned to this track object (DEBRIS, MANNED, PAYLOAD, PLATFORM, ROCKET BODY, UNKNOWN).
  ///  Example: /// Example: PAYLOAD
  ///  Constraints: Minimum length = 0, Maximum length = 32
  OrbitTrackIngestObjectTypeEnum get objectType => OrbitTrackIngestObjectTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 36, 0));
  ///  The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Predicted change in Mean Motion (velocity) in radians/herg^2.  herg is a unit of time measure equal to 806.8120769 seconds, and is the orbital period of an imaginary satellite rotating about the Earth at zero altitude.
  ///  Example: /// Example: 0.5868
  ///  Constraints: No constraints specified.
  double get decay => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  One-line Charlie elements set.
  ///  Example: /// Example: 323751332255940400010000003635829600010200072500098205001150
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get charlieLine => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouData array and is required if aouData is not null. See the aouData field definition for specific information.
  ///  Example: /// Example: ELLIPSE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get aouType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Three element array representing an Area of Uncertainty (AoU).  The array element definitions and units are type specific depending on the aouType specified in this record:
  ///  ELLIPSE:
  ///     brg - orientation in degrees of the ellipse
  ///     a1 - semi-major axis in meters
  ///     a2 - semi-minor axis in meters
  ///  BEARING (BEARING BOX or MTST BEARING BOX):
  ///     brg - orientation in degrees of the bearing box 
  ///     a1 - length of bearing box in meters 
  ///     a2 - half-width of bearing box in meters 
  ///  OTHER (All other type values):
  ///     brg - line of bearing in degrees true 
  ///     a1 - bearing error in degrees 
  ///     a2 - estimated range in meters.
  ///  Example: /// Example: [34.3, 26.5, 1.2]
  ///  Constraints: No constraints specified.
  List<String>? get aouData => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 46);
  ///  Track object speed, in km/sec.
  ///  Example: /// Example: 15.03443
  ///  Constraints: No constraints specified.
  double get spd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  The angle formed between the line of sight of the observer and the horizon at track timestamp, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
  ///  Example: /// Example: 15.2
  ///  Constraints: No constraints specified.
  double get angElev => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
  ///  Example: /// Example: 90
  ///  Constraints: No constraints specified.
  double get cntnmnt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Source cross-reference code for the command that originated the track report.
  ///  Example: /// Example: XE
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get xref => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  The cross-reference code of the channel on which this track report was received, if the report came over a comms channel.
  ///  Example: /// Example: FHKX
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get chXref => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Free-form remarks entered for the satellite.
  ///  Example: /// Example: A note regarding this spacecraft
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get amplification => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  A text aplifier displaying IFF/SIF/AIS Identification modes and codes.
  ///  Example: /// Example: ID Mode
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get iff => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get reinforced => const fb.BoolReader().vTableGet(_bc, _bcOffset, 62, false);
  ///  Flag indicating that this track represents a reduced object or group.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get reduced => const fb.BoolReader().vTableGet(_bc, _bcOffset, 64, false);
  ///  Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get hq => const fb.BoolReader().vTableGet(_bc, _bcOffset, 66, false);
  ///  Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get dummy => const fb.BoolReader().vTableGet(_bc, _bcOffset, 68, false);
  ///  Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get taskForce => const fb.BoolReader().vTableGet(_bc, _bcOffset, 70, false);
  ///  Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get feint => const fb.BoolReader().vTableGet(_bc, _bcOffset, 72, false);
  ///  Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get installation => const fb.BoolReader().vTableGet(_bc, _bcOffset, 74, false);
  ///  The type of vehicle with which the device is associated.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: SPACE
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get vehType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  UUID identifying the track, which should remain the same on subsequent tracks of the same object.
  ///  Example: /// Example: 3668f135-fcba-4630-a43d-e7782e11d988
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trkId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  TrackSensor Collection.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get trackSensors => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 80);
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2021-02-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  OrbitTrackIngestDataModeEnum get dataMode => OrbitTrackIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 90, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);

  @override
  String toString() {
    return 'OrbitTrackIngest{id: ${id}, classificationMarking: ${classificationMarking}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, idElset: ${idElset}, ts: ${ts}, lat: ${lat}, lon: ${lon}, alt: ${alt}, rdfRf: ${rdfRf}, callSign: ${callSign}, rptNum: ${rptNum}, objIdent: ${objIdent}, identAmp: ${identAmp}, satStatus: ${satStatus}, objectType: ${objectType}, countryCode: ${countryCode}, decay: ${decay}, charlieLine: ${charlieLine}, aouType: ${aouType}, aouData: ${aouData}, spd: ${spd}, angElev: ${angElev}, cntnmnt: ${cntnmnt}, xref: ${xref}, chXref: ${chXref}, amplification: ${amplification}, iff: ${iff}, reinforced: ${reinforced}, reduced: ${reduced}, hq: ${hq}, dummy: ${dummy}, taskForce: ${taskForce}, feint: ${feint}, installation: ${installation}, vehType: ${vehType}, trkId: ${trkId}, trackSensors: ${trackSensors}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _OrbitTrackIngestReader extends fb.TableReader<OrbitTrackIngest> {
  const _OrbitTrackIngestReader();

  @override
  OrbitTrackIngest createObject(fb.BufferContext bc, int offset) => 
    OrbitTrackIngest._(bc, offset);
}

class OrbitTrackIngestBuilder {
  OrbitTrackIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(45);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(3, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdElsetOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(7, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(8, lon);
    return fbBuilder.offset;
  }
  int addAlt(double? alt) {
    fbBuilder.addFloat64(9, alt);
    return fbBuilder.offset;
  }
  int addRdfRf(double? rdfRf) {
    fbBuilder.addFloat64(10, rdfRf);
    return fbBuilder.offset;
  }
  int addCallSignOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addRptNumOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addObjIdent(OrbitTrackIngestObjIdentEnum? objIdent) {
    fbBuilder.addInt8(13, objIdent?.value);
    return fbBuilder.offset;
  }
  int addIdentAmpOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addSatStatusOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addObjectType(OrbitTrackIngestObjectTypeEnum? objectType) {
    fbBuilder.addInt8(16, objectType?.value);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addDecay(double? decay) {
    fbBuilder.addFloat64(18, decay);
    return fbBuilder.offset;
  }
  int addCharlieLineOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addAouTypeOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addAouDataOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addSpd(double? spd) {
    fbBuilder.addFloat64(22, spd);
    return fbBuilder.offset;
  }
  int addAngElev(double? angElev) {
    fbBuilder.addFloat64(23, angElev);
    return fbBuilder.offset;
  }
  int addCntnmnt(double? cntnmnt) {
    fbBuilder.addFloat64(24, cntnmnt);
    return fbBuilder.offset;
  }
  int addXrefOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addChXrefOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addAmplificationOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addIffOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addReinforced(bool? reinforced) {
    fbBuilder.addBool(29, reinforced);
    return fbBuilder.offset;
  }
  int addReduced(bool? reduced) {
    fbBuilder.addBool(30, reduced);
    return fbBuilder.offset;
  }
  int addHq(bool? hq) {
    fbBuilder.addBool(31, hq);
    return fbBuilder.offset;
  }
  int addDummy(bool? dummy) {
    fbBuilder.addBool(32, dummy);
    return fbBuilder.offset;
  }
  int addTaskForce(bool? taskForce) {
    fbBuilder.addBool(33, taskForce);
    return fbBuilder.offset;
  }
  int addFeint(bool? feint) {
    fbBuilder.addBool(34, feint);
    return fbBuilder.offset;
  }
  int addInstallation(bool? installation) {
    fbBuilder.addBool(35, installation);
    return fbBuilder.offset;
  }
  int addVehTypeOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addTrkIdOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addTrackSensorsOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addDataMode(OrbitTrackIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(43, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OrbitTrackIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final String? _idElset;
  final String? _ts;
  final double? _lat;
  final double? _lon;
  final double? _alt;
  final double? _rdfRf;
  final String? _callSign;
  final String? _rptNum;
  final OrbitTrackIngestObjIdentEnum? _objIdent;
  final String? _identAmp;
  final String? _satStatus;
  final OrbitTrackIngestObjectTypeEnum? _objectType;
  final String? _countryCode;
  final double? _decay;
  final String? _charlieLine;
  final String? _aouType;
  final List<String>? _aouData;
  final double? _spd;
  final double? _angElev;
  final double? _cntnmnt;
  final String? _xref;
  final String? _chXref;
  final String? _amplification;
  final String? _iff;
  final bool? _reinforced;
  final bool? _reduced;
  final bool? _hq;
  final bool? _dummy;
  final bool? _taskForce;
  final bool? _feint;
  final bool? _installation;
  final String? _vehType;
  final String? _trkId;
  final List<String>? _trackSensors;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final OrbitTrackIngestDataModeEnum? _dataMode;
  final String? _origNetwork;

  OrbitTrackIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    String? idElset,
    String? ts,
    double? lat,
    double? lon,
    double? alt,
    double? rdfRf,
    String? callSign,
    String? rptNum,
    OrbitTrackIngestObjIdentEnum? objIdent,
    String? identAmp,
    String? satStatus,
    OrbitTrackIngestObjectTypeEnum? objectType,
    String? countryCode,
    double? decay,
    String? charlieLine,
    String? aouType,
    List<String>? aouData,
    double? spd,
    double? angElev,
    double? cntnmnt,
    String? xref,
    String? chXref,
    String? amplification,
    String? iff,
    bool? reinforced,
    bool? reduced,
    bool? hq,
    bool? dummy,
    bool? taskForce,
    bool? feint,
    bool? installation,
    String? vehType,
    String? trkId,
    List<String>? trackSensors,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    OrbitTrackIngestDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _idElset = idElset,
        _ts = ts,
        _lat = lat,
        _lon = lon,
        _alt = alt,
        _rdfRf = rdfRf,
        _callSign = callSign,
        _rptNum = rptNum,
        _objIdent = objIdent,
        _identAmp = identAmp,
        _satStatus = satStatus,
        _objectType = objectType,
        _countryCode = countryCode,
        _decay = decay,
        _charlieLine = charlieLine,
        _aouType = aouType,
        _aouData = aouData,
        _spd = spd,
        _angElev = angElev,
        _cntnmnt = cntnmnt,
        _xref = xref,
        _chXref = chXref,
        _amplification = amplification,
        _iff = iff,
        _reinforced = reinforced,
        _reduced = reduced,
        _hq = hq,
        _dummy = dummy,
        _taskForce = taskForce,
        _feint = feint,
        _installation = installation,
        _vehType = vehType,
        _trkId = trkId,
        _trackSensors = trackSensors,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? idElsetOffset = _idElset == null ? null
        : fbBuilder.writeString(_idElset!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeString(_ts!);
    final int? callSignOffset = _callSign == null ? null
        : fbBuilder.writeString(_callSign!);
    final int? rptNumOffset = _rptNum == null ? null
        : fbBuilder.writeString(_rptNum!);
    final int? identAmpOffset = _identAmp == null ? null
        : fbBuilder.writeString(_identAmp!);
    final int? satStatusOffset = _satStatus == null ? null
        : fbBuilder.writeString(_satStatus!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? charlieLineOffset = _charlieLine == null ? null
        : fbBuilder.writeString(_charlieLine!);
    final int? aouTypeOffset = _aouType == null ? null
        : fbBuilder.writeString(_aouType!);
    final int? aouDataOffset = _aouData == null ? null
        : fbBuilder.writeList(_aouData!.map(fbBuilder.writeString).toList());
    final int? xrefOffset = _xref == null ? null
        : fbBuilder.writeString(_xref!);
    final int? chXrefOffset = _chXref == null ? null
        : fbBuilder.writeString(_chXref!);
    final int? amplificationOffset = _amplification == null ? null
        : fbBuilder.writeString(_amplification!);
    final int? iffOffset = _iff == null ? null
        : fbBuilder.writeString(_iff!);
    final int? vehTypeOffset = _vehType == null ? null
        : fbBuilder.writeString(_vehType!);
    final int? trkIdOffset = _trkId == null ? null
        : fbBuilder.writeString(_trkId!);
    final int? trackSensorsOffset = _trackSensors == null ? null
        : fbBuilder.writeList(_trackSensors!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(45);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idOnOrbitOffset);
    fbBuilder.addInt32(3, _satNo);
    fbBuilder.addOffset(4, origObjectIdOffset);
    fbBuilder.addOffset(5, idElsetOffset);
    fbBuilder.addOffset(6, tsOffset);
    fbBuilder.addFloat64(7, _lat);
    fbBuilder.addFloat64(8, _lon);
    fbBuilder.addFloat64(9, _alt);
    fbBuilder.addFloat64(10, _rdfRf);
    fbBuilder.addOffset(11, callSignOffset);
    fbBuilder.addOffset(12, rptNumOffset);
    fbBuilder.addInt8(13, _objIdent?.value);
    fbBuilder.addOffset(14, identAmpOffset);
    fbBuilder.addOffset(15, satStatusOffset);
    fbBuilder.addInt8(16, _objectType?.value);
    fbBuilder.addOffset(17, countryCodeOffset);
    fbBuilder.addFloat64(18, _decay);
    fbBuilder.addOffset(19, charlieLineOffset);
    fbBuilder.addOffset(20, aouTypeOffset);
    fbBuilder.addOffset(21, aouDataOffset);
    fbBuilder.addFloat64(22, _spd);
    fbBuilder.addFloat64(23, _angElev);
    fbBuilder.addFloat64(24, _cntnmnt);
    fbBuilder.addOffset(25, xrefOffset);
    fbBuilder.addOffset(26, chXrefOffset);
    fbBuilder.addOffset(27, amplificationOffset);
    fbBuilder.addOffset(28, iffOffset);
    fbBuilder.addBool(29, _reinforced);
    fbBuilder.addBool(30, _reduced);
    fbBuilder.addBool(31, _hq);
    fbBuilder.addBool(32, _dummy);
    fbBuilder.addBool(33, _taskForce);
    fbBuilder.addBool(34, _feint);
    fbBuilder.addBool(35, _installation);
    fbBuilder.addOffset(36, vehTypeOffset);
    fbBuilder.addOffset(37, trkIdOffset);
    fbBuilder.addOffset(38, trackSensorsOffset);
    fbBuilder.addOffset(39, createdAtOffset);
    fbBuilder.addOffset(40, createdByOffset);
    fbBuilder.addOffset(41, sourceOffset);
    fbBuilder.addOffset(42, originOffset);
    fbBuilder.addInt8(43, _dataMode?.value);
    fbBuilder.addOffset(44, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
