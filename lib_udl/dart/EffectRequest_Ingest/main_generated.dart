// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class EffectRequestIngestDataModeEnum {
  final int value;
  const EffectRequestIngestDataModeEnum._(this.value);

  factory EffectRequestIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EffectRequestIngestDataModeEnum');
    }
    return result;
  }

  static EffectRequestIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : EffectRequestIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const EffectRequestIngestDataModeEnum REAL = EffectRequestIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const EffectRequestIngestDataModeEnum TEST = EffectRequestIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const EffectRequestIngestDataModeEnum SIMULATED = EffectRequestIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const EffectRequestIngestDataModeEnum EXERCISE = EffectRequestIngestDataModeEnum._(3);
  static const Map<int, EffectRequestIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<EffectRequestIngestDataModeEnum> reader = _EffectRequestIngestDataModeEnumReader();

  @override
  String toString() {
    return 'EffectRequestIngestDataModeEnum{value: $value}';
  }
}

class _EffectRequestIngestDataModeEnumReader extends fb.Reader<EffectRequestIngestDataModeEnum> {
  const _EffectRequestIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  EffectRequestIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      EffectRequestIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// A request for various effects on a target.
class EffectRequestIngest {
  EffectRequestIngest._(this._bc, this._bcOffset);
  factory EffectRequestIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EffectRequestIngest> reader = _EffectRequestIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: EFFECTREQUEST-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The extenal system identifier of this request. A human readable unique id.
  ///  Example: /// Example: EXTERNALREQUEST-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalRequestId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.
  ///  Example: /// Example: ['COVER', 'DECEIVE']
  ///  Constraints: No constraints specified.
  List<String>? get effectList => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);
  ///  State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).
  ///  Example: /// Example: CREATED
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get state => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Specific descriptive instantiation of the effect, e.g., playbook to be used.
  ///  Example: /// Example: Example Notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get context => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The time the effect should start, in ISO8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The time the effect should end, in ISO8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get endTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):
  ///  BETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late
  ///  IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
  ///  NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later
  ///  NOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.
  ///  Example: /// Example: NoLaterThan
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get deadlineType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The source type of the targetId identifier (POI, TRACK).
  ///  Example: /// Example: POI
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get targetSrcType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
  ///  Example: /// Example: TARGETSRC-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get targetSrcId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The priority (LOW, MEDIUM, HIGH) of this request.
  ///  Example: /// Example: LOW
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get priority => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The type or class of the preference model used to evaluate this offer.
  ///  Example: /// Example: Preference model
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get modelClass => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.
  ///  Example: /// Example: ['COST', 'RISK']
  ///  Constraints: No constraints specified.
  List<String>? get metricTypes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.
  ///  Example: /// Example: [0.5, 0.6]
  ///  Constraints: No constraints specified.
  List<String>? get metricWeights => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  EffectRequestIngestDataModeEnum get dataMode => EffectRequestIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 42, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);

  @override
  String toString() {
    return 'EffectRequestIngest{id: ${id}, classificationMarking: ${classificationMarking}, externalRequestId: ${externalRequestId}, effectList: ${effectList}, state: ${state}, context: ${context}, startTime: ${startTime}, endTime: ${endTime}, deadlineType: ${deadlineType}, targetSrcType: ${targetSrcType}, targetSrcId: ${targetSrcId}, priority: ${priority}, modelClass: ${modelClass}, metricTypes: ${metricTypes}, metricWeights: ${metricWeights}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _EffectRequestIngestReader extends fb.TableReader<EffectRequestIngest> {
  const _EffectRequestIngestReader();

  @override
  EffectRequestIngest createObject(fb.BufferContext bc, int offset) => 
    EffectRequestIngest._(bc, offset);
}

class EffectRequestIngestBuilder {
  EffectRequestIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(21);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addExternalRequestIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addEffectListOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStateOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addContextOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addDeadlineTypeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addTargetSrcTypeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addTargetSrcIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addPriorityOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addModelClassOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addMetricTypesOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addMetricWeightsOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addDataMode(EffectRequestIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(19, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EffectRequestIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _externalRequestId;
  final List<String>? _effectList;
  final String? _state;
  final String? _context;
  final String? _startTime;
  final String? _endTime;
  final String? _deadlineType;
  final String? _targetSrcType;
  final String? _targetSrcId;
  final String? _priority;
  final String? _modelClass;
  final List<String>? _metricTypes;
  final List<String>? _metricWeights;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final EffectRequestIngestDataModeEnum? _dataMode;
  final String? _origNetwork;

  EffectRequestIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? externalRequestId,
    List<String>? effectList,
    String? state,
    String? context,
    String? startTime,
    String? endTime,
    String? deadlineType,
    String? targetSrcType,
    String? targetSrcId,
    String? priority,
    String? modelClass,
    List<String>? metricTypes,
    List<String>? metricWeights,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    EffectRequestIngestDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _externalRequestId = externalRequestId,
        _effectList = effectList,
        _state = state,
        _context = context,
        _startTime = startTime,
        _endTime = endTime,
        _deadlineType = deadlineType,
        _targetSrcType = targetSrcType,
        _targetSrcId = targetSrcId,
        _priority = priority,
        _modelClass = modelClass,
        _metricTypes = metricTypes,
        _metricWeights = metricWeights,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? externalRequestIdOffset = _externalRequestId == null ? null
        : fbBuilder.writeString(_externalRequestId!);
    final int? effectListOffset = _effectList == null ? null
        : fbBuilder.writeList(_effectList!.map(fbBuilder.writeString).toList());
    final int? stateOffset = _state == null ? null
        : fbBuilder.writeString(_state!);
    final int? contextOffset = _context == null ? null
        : fbBuilder.writeString(_context!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? endTimeOffset = _endTime == null ? null
        : fbBuilder.writeString(_endTime!);
    final int? deadlineTypeOffset = _deadlineType == null ? null
        : fbBuilder.writeString(_deadlineType!);
    final int? targetSrcTypeOffset = _targetSrcType == null ? null
        : fbBuilder.writeString(_targetSrcType!);
    final int? targetSrcIdOffset = _targetSrcId == null ? null
        : fbBuilder.writeString(_targetSrcId!);
    final int? priorityOffset = _priority == null ? null
        : fbBuilder.writeString(_priority!);
    final int? modelClassOffset = _modelClass == null ? null
        : fbBuilder.writeString(_modelClass!);
    final int? metricTypesOffset = _metricTypes == null ? null
        : fbBuilder.writeList(_metricTypes!.map(fbBuilder.writeString).toList());
    final int? metricWeightsOffset = _metricWeights == null ? null
        : fbBuilder.writeList(_metricWeights!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(21);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, externalRequestIdOffset);
    fbBuilder.addOffset(3, effectListOffset);
    fbBuilder.addOffset(4, stateOffset);
    fbBuilder.addOffset(5, contextOffset);
    fbBuilder.addOffset(6, startTimeOffset);
    fbBuilder.addOffset(7, endTimeOffset);
    fbBuilder.addOffset(8, deadlineTypeOffset);
    fbBuilder.addOffset(9, targetSrcTypeOffset);
    fbBuilder.addOffset(10, targetSrcIdOffset);
    fbBuilder.addOffset(11, priorityOffset);
    fbBuilder.addOffset(12, modelClassOffset);
    fbBuilder.addOffset(13, metricTypesOffset);
    fbBuilder.addOffset(14, metricWeightsOffset);
    fbBuilder.addOffset(15, createdAtOffset);
    fbBuilder.addOffset(16, createdByOffset);
    fbBuilder.addOffset(17, sourceOffset);
    fbBuilder.addOffset(18, originOffset);
    fbBuilder.addInt8(19, _dataMode?.value);
    fbBuilder.addOffset(20, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
