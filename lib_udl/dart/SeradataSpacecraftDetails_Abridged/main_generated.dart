// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SeradataSpacecraftDetailsAbridgedDataModeEnum {
  final int value;
  const SeradataSpacecraftDetailsAbridgedDataModeEnum._(this.value);

  factory SeradataSpacecraftDetailsAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SeradataSpacecraftDetailsAbridgedDataModeEnum');
    }
    return result;
  }

  static SeradataSpacecraftDetailsAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SeradataSpacecraftDetailsAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SeradataSpacecraftDetailsAbridgedDataModeEnum REAL = SeradataSpacecraftDetailsAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SeradataSpacecraftDetailsAbridgedDataModeEnum TEST = SeradataSpacecraftDetailsAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SeradataSpacecraftDetailsAbridgedDataModeEnum SIMULATED = SeradataSpacecraftDetailsAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SeradataSpacecraftDetailsAbridgedDataModeEnum EXERCISE = SeradataSpacecraftDetailsAbridgedDataModeEnum._(3);
  static const Map<int, SeradataSpacecraftDetailsAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SeradataSpacecraftDetailsAbridgedDataModeEnum> reader = _SeradataSpacecraftDetailsAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'SeradataSpacecraftDetailsAbridgedDataModeEnum{value: $value}';
  }
}

class _SeradataSpacecraftDetailsAbridgedDataModeEnumReader extends fb.Reader<SeradataSpacecraftDetailsAbridgedDataModeEnum> {
  const _SeradataSpacecraftDetailsAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SeradataSpacecraftDetailsAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      SeradataSpacecraftDetailsAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// On-orbit spacecraft details compiled by Seradata for a particular satellite.
class SeradataSpacecraftDetailsAbridged {
  SeradataSpacecraftDetailsAbridged._(this._bc, this._bcOffset);
  factory SeradataSpacecraftDetailsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SeradataSpacecraftDetailsAbridged> reader = _SeradataSpacecraftDetailsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SERADATASPACECRAFTDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  UUID of the parent Onorbit record, if available.
  ///  Example: /// Example: 503
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Spacecraft name.
  ///  Example: /// Example: name
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Description associated with the spacecraft.
  ///  Example: /// Example: description
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Seradata international number.
  ///  Example: /// Example: number
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get intlNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Seradata sector (e.g. Commercial, Military, Civil/Other).
  ///  Example: /// Example: Commercial
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get sector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Apogee in km.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get apogee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Perigee in km.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get perigee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Spacecraft period in minutes.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get period => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Seradata provided inclination in degrees.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get inclination => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  UUID of the prime manufacturer organization, if available.
  ///  Example: /// Example: 05c43360-382e-4aa2-b875-ed28945ff2e5
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get primeManufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).
  ///  Example: /// Example: 3-Axis
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get stabilizer => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Spacecraft design life in days.
  ///  Example: /// Example: 231
  ///  Constraints: No constraints specified.
  int get designLife => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 30, 0);
  ///  Spacecraft expected life in days.
  ///  Example: /// Example: 231
  ///  Constraints: No constraints specified.
  int get expectedLife => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Boolean indicating if the spacecraft was insured at launch.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get insuredAtLaunch => const fb.BoolReader().vTableGet(_bc, _bcOffset, 34, false);
  ///  Mass at launch in kg.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get launchMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Mass dry in kg.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get dryMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  NORAD satellite number if available.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get catalogNumber => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  Mass dry in kg.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get totalPayloadPower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Spacecraft constellation.
  ///  Example: /// Example: GPS
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get constellation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Spacecraft orbit category (e.g GEO, LEO, etc).
  ///  Example: /// Example: GEO
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get orbitCategory => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).
  ///  Example: /// Example: Geostationary
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get orbitSubCategory => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Cost of launch in M USD.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get launchCost => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Boolean indicating if the spacecraft launch cost is estimated.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get launchCostEstimated => const fb.BoolReader().vTableGet(_bc, _bcOffset, 52, false);
  ///  Boolean indicating if the spacecraft cost is estimated.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get costEstimated => const fb.BoolReader().vTableGet(_bc, _bcOffset, 54, false);
  ///  Cost of spacecraft at new in M USD.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get newCost => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Combined cost of spacecraft at new in M USD.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get combinedNewCost => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Boolean indicating if the spacecraft combined new cost is estimated.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get combinedCostEstimated => const fb.BoolReader().vTableGet(_bc, _bcOffset, 60, false);
  ///  Insured value of spacecraft at launch in M USD.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get insuredValueAtLaunch => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Boolean indicating if the spacecraft insured value at launch is estimated.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get insuredValueLaunchEstimated => const fb.BoolReader().vTableGet(_bc, _bcOffset, 64, false);
  ///  Annual insured depreciaion factor as a percent fraction.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get annualInsuredDepreciationFactor => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get annualInsuredDepreciationFactorEstimated => const fb.BoolReader().vTableGet(_bc, _bcOffset, 68, false);
  ///  Insurance premium at launch in M USD.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get insurancePremiumAtLaunch => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get insurancePremiumAtLaunchEstimated => const fb.BoolReader().vTableGet(_bc, _bcOffset, 72, false);
  ///  Number of humans carried on spacecraft.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numHumans => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 74, 0);
  ///  Cubesat dispenser type.
  ///  Example: /// Example: cubesatDispenserType
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get cubesatDispenserType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).
  ///  Example: /// Example: 2500 - 3500kg  - Large Satellite
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get massCategory => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Seradata launch ID.
  ///  Example: /// Example: 11573
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get launchId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Seradata launch ID.
  ///  Example: /// Example: 123
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get launchVehicleId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Seradata launch vehicle family.
  ///  Example: /// Example: launchProviderFlightNumber
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get launchProviderFlightNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Launch Site Name.
  ///  Example: /// Example: launchSiteName
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get launchSiteName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Seradata Launch Site ID.
  ///  Example: /// Example: 28
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get launchSiteId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Seradata launch country.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get launchCountry => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  Seradata launch provider.
  ///  Example: /// Example: launchProvider
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get launchProvider => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Seradata launch provider country.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get launchProviderCountry => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Boolean indicating if the launch was commercial.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get commercialLaunch => const fb.BoolReader().vTableGet(_bc, _bcOffset, 96, false);
  ///  Seradata launch type (e.g. Launched, Future, etc).
  ///  Example: /// Example: Future
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get launchType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).
  ///  Example: /// Example: Expendable
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get launchCharacteristic => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Seradata launch number.
  ///  Example: /// Example: FN040
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get launchNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Launch date.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get launchDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Seradata remarks on launch date.
  ///  Example: /// Example: launchDateRemarks
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get launchDateRemarks => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  Youtube link of launch.
  ///  Example: /// Example: youtubeLaunchLink
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get youtubeLaunchLink => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).
  ///  Example: /// Example: Inactive - Retired
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);
  ///  Spacecraft owner name.
  ///  Example: /// Example: owner
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get owner => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  Spacecraft owner country.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get ownerCountry => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 114);
  ///  Spacecraft operator name.
  ///  Example: /// Example: operator
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get $operator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);
  ///  Spacecraft operator country.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get operatorCountry => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  Boolean indicating if the spacecraft was leased.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get leased => const fb.BoolReader().vTableGet(_bc, _bcOffset, 120, false);
  ///  Spacecraft order date.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get orderDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 122);
  ///  Total capability lost as a percent fraction.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get capabilityLost => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  Total capacity lost as a percent fraction.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get capacityLost => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  ///  Spacecraft primary mission and group.
  ///  Example: /// Example: primaryMissionGroup
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get primaryMissionGroup => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 128);
  ///  Spacecraft additional missions and groups.
  ///  Example: /// Example: additionalMissionsGroups
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get additionalMissionsGroups => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 130);
  ///  Number of insurance claims for this spacecraft.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get totalClaims => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 132, 0);
  ///  Number of injuries related to this spacecraft.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get totalInjuries => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 134, 0);
  ///  Number of fatalities related to this spacecraft.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get totalFatalities => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 136, 0);
  ///  Spacecraft name at launch.
  ///  Example: /// Example: nameAtLaunch
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get nameAtLaunch => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 138);
  ///  Spacecraft Bus ID.
  ///  Example: /// Example: BUS-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get busId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 140);
  ///  Current age in years.
  ///  Example: /// Example: 5.898630136986301
  ///  Constraints: No constraints specified.
  double get currentAge => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 142, 0.0);
  ///  Spacecraft life lost as a percent fraction.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get lifeLost => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 144, 0.0);
  ///  WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -8.23
  ///  Constraints: No constraints specified.
  double get geoPosition => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  ///  Spacecraft total insurance losses as a fraction.
  ///  Example: /// Example: 0.393
  ///  Constraints: No constraints specified.
  double get insuranceLossesTotal => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 148, 0.0);
  ///  Spacecraft launch arranger.
  ///  Example: /// Example: launchArranger
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get launchArranger => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 150);
  ///  Spacecraft launch arranger country.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get launchArrangerCountry => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 152);
  ///  Spacecraft serial number.
  ///  Example: /// Example: serialNumber
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get serialNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 154);
  ///  Spacecraft program name.
  ///  Example: /// Example: programName
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get programName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 156);
  ///  Spacecraft reused hull name.
  ///  Example: /// Example: reusedHullName
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get reusedHullName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 158);
  ///  Spacecraft date of observation.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get dateOfObservation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 160);
  ///  Spacecraft latest latitude in degrees.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 162, 0.0);
  ///  Spacecraft latest longitude in degrees.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 164, 0.0);
  ///  Spacecraft latest altitude in km.
  ///  Example: /// Example: 36036.6330576414
  ///  Constraints: No constraints specified.
  double get altitude => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 166, 0.0);
  ///  Spacecraft collision risk 1mm sqm latest.
  ///  Example: /// Example: 1.33
  ///  Constraints: No constraints specified.
  double get collisionRiskMm => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 168, 0.0);
  ///  Spacecraft collision risk 1cm sqm latest.
  ///  Example: /// Example: 1.43
  ///  Constraints: No constraints specified.
  double get collisionRiskCm => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 170, 0.0);
  ///  Spacecraft quantity.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get quantity => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 172, 0);
  ///  Spacecraft reusable flights.
  ///  Example: /// Example: reusableFlights
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get reusableFlights => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 174);
  ///  Notes on the spacecraft.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 176);
  ///  Insurance notes for the spacecraft.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  String? get insuranceNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 178);
  ///  Insurance notes for the spacecraft.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  String? get launchNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 180);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 182);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 184);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 186);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SeradataSpacecraftDetailsAbridgedDataModeEnum get dataMode => SeradataSpacecraftDetailsAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 188, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 190);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 192);

  @override
  String toString() {
    return 'SeradataSpacecraftDetailsAbridged{id: ${id}, idOnOrbit: ${idOnOrbit}, classificationMarking: ${classificationMarking}, name: ${name}, description: ${description}, intlNumber: ${intlNumber}, sector: ${sector}, apogee: ${apogee}, perigee: ${perigee}, period: ${period}, inclination: ${inclination}, primeManufacturerOrgId: ${primeManufacturerOrgId}, stabilizer: ${stabilizer}, designLife: ${designLife}, expectedLife: ${expectedLife}, insuredAtLaunch: ${insuredAtLaunch}, launchMass: ${launchMass}, dryMass: ${dryMass}, catalogNumber: ${catalogNumber}, totalPayloadPower: ${totalPayloadPower}, constellation: ${constellation}, orbitCategory: ${orbitCategory}, orbitSubCategory: ${orbitSubCategory}, launchCost: ${launchCost}, launchCostEstimated: ${launchCostEstimated}, costEstimated: ${costEstimated}, newCost: ${newCost}, combinedNewCost: ${combinedNewCost}, combinedCostEstimated: ${combinedCostEstimated}, insuredValueAtLaunch: ${insuredValueAtLaunch}, insuredValueLaunchEstimated: ${insuredValueLaunchEstimated}, annualInsuredDepreciationFactor: ${annualInsuredDepreciationFactor}, annualInsuredDepreciationFactorEstimated: ${annualInsuredDepreciationFactorEstimated}, insurancePremiumAtLaunch: ${insurancePremiumAtLaunch}, insurancePremiumAtLaunchEstimated: ${insurancePremiumAtLaunchEstimated}, numHumans: ${numHumans}, cubesatDispenserType: ${cubesatDispenserType}, massCategory: ${massCategory}, launchId: ${launchId}, launchVehicleId: ${launchVehicleId}, launchProviderFlightNumber: ${launchProviderFlightNumber}, launchSiteName: ${launchSiteName}, launchSiteId: ${launchSiteId}, launchCountry: ${launchCountry}, launchProvider: ${launchProvider}, launchProviderCountry: ${launchProviderCountry}, commercialLaunch: ${commercialLaunch}, launchType: ${launchType}, launchCharacteristic: ${launchCharacteristic}, launchNumber: ${launchNumber}, launchDate: ${launchDate}, launchDateRemarks: ${launchDateRemarks}, youtubeLaunchLink: ${youtubeLaunchLink}, status: ${status}, owner: ${owner}, ownerCountry: ${ownerCountry}, \$operator: ${$operator}, operatorCountry: ${operatorCountry}, leased: ${leased}, orderDate: ${orderDate}, capabilityLost: ${capabilityLost}, capacityLost: ${capacityLost}, primaryMissionGroup: ${primaryMissionGroup}, additionalMissionsGroups: ${additionalMissionsGroups}, totalClaims: ${totalClaims}, totalInjuries: ${totalInjuries}, totalFatalities: ${totalFatalities}, nameAtLaunch: ${nameAtLaunch}, busId: ${busId}, currentAge: ${currentAge}, lifeLost: ${lifeLost}, geoPosition: ${geoPosition}, insuranceLossesTotal: ${insuranceLossesTotal}, launchArranger: ${launchArranger}, launchArrangerCountry: ${launchArrangerCountry}, serialNumber: ${serialNumber}, programName: ${programName}, reusedHullName: ${reusedHullName}, dateOfObservation: ${dateOfObservation}, lat: ${lat}, lon: ${lon}, altitude: ${altitude}, collisionRiskMm: ${collisionRiskMm}, collisionRiskCm: ${collisionRiskCm}, quantity: ${quantity}, reusableFlights: ${reusableFlights}, notes: ${notes}, insuranceNotes: ${insuranceNotes}, launchNotes: ${launchNotes}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}}';
  }
}

class _SeradataSpacecraftDetailsAbridgedReader extends fb.TableReader<SeradataSpacecraftDetailsAbridged> {
  const _SeradataSpacecraftDetailsAbridgedReader();

  @override
  SeradataSpacecraftDetailsAbridged createObject(fb.BufferContext bc, int offset) => 
    SeradataSpacecraftDetailsAbridged._(bc, offset);
}

class SeradataSpacecraftDetailsAbridgedBuilder {
  SeradataSpacecraftDetailsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(95);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIntlNumberOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSectorOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addApogee(double? apogee) {
    fbBuilder.addFloat64(7, apogee);
    return fbBuilder.offset;
  }
  int addPerigee(double? perigee) {
    fbBuilder.addFloat64(8, perigee);
    return fbBuilder.offset;
  }
  int addPeriod(double? period) {
    fbBuilder.addFloat64(9, period);
    return fbBuilder.offset;
  }
  int addInclination(double? inclination) {
    fbBuilder.addFloat64(10, inclination);
    return fbBuilder.offset;
  }
  int addPrimeManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addStabilizerOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addDesignLife(int? designLife) {
    fbBuilder.addInt32(13, designLife);
    return fbBuilder.offset;
  }
  int addExpectedLife(int? expectedLife) {
    fbBuilder.addInt32(14, expectedLife);
    return fbBuilder.offset;
  }
  int addInsuredAtLaunch(bool? insuredAtLaunch) {
    fbBuilder.addBool(15, insuredAtLaunch);
    return fbBuilder.offset;
  }
  int addLaunchMass(double? launchMass) {
    fbBuilder.addFloat64(16, launchMass);
    return fbBuilder.offset;
  }
  int addDryMass(double? dryMass) {
    fbBuilder.addFloat64(17, dryMass);
    return fbBuilder.offset;
  }
  int addCatalogNumber(int? catalogNumber) {
    fbBuilder.addInt32(18, catalogNumber);
    return fbBuilder.offset;
  }
  int addTotalPayloadPower(double? totalPayloadPower) {
    fbBuilder.addFloat64(19, totalPayloadPower);
    return fbBuilder.offset;
  }
  int addConstellationOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addOrbitCategoryOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addOrbitSubCategoryOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addLaunchCost(double? launchCost) {
    fbBuilder.addFloat64(23, launchCost);
    return fbBuilder.offset;
  }
  int addLaunchCostEstimated(bool? launchCostEstimated) {
    fbBuilder.addBool(24, launchCostEstimated);
    return fbBuilder.offset;
  }
  int addCostEstimated(bool? costEstimated) {
    fbBuilder.addBool(25, costEstimated);
    return fbBuilder.offset;
  }
  int addNewCost(double? newCost) {
    fbBuilder.addFloat64(26, newCost);
    return fbBuilder.offset;
  }
  int addCombinedNewCost(double? combinedNewCost) {
    fbBuilder.addFloat64(27, combinedNewCost);
    return fbBuilder.offset;
  }
  int addCombinedCostEstimated(bool? combinedCostEstimated) {
    fbBuilder.addBool(28, combinedCostEstimated);
    return fbBuilder.offset;
  }
  int addInsuredValueAtLaunch(double? insuredValueAtLaunch) {
    fbBuilder.addFloat64(29, insuredValueAtLaunch);
    return fbBuilder.offset;
  }
  int addInsuredValueLaunchEstimated(bool? insuredValueLaunchEstimated) {
    fbBuilder.addBool(30, insuredValueLaunchEstimated);
    return fbBuilder.offset;
  }
  int addAnnualInsuredDepreciationFactor(double? annualInsuredDepreciationFactor) {
    fbBuilder.addFloat64(31, annualInsuredDepreciationFactor);
    return fbBuilder.offset;
  }
  int addAnnualInsuredDepreciationFactorEstimated(bool? annualInsuredDepreciationFactorEstimated) {
    fbBuilder.addBool(32, annualInsuredDepreciationFactorEstimated);
    return fbBuilder.offset;
  }
  int addInsurancePremiumAtLaunch(double? insurancePremiumAtLaunch) {
    fbBuilder.addFloat64(33, insurancePremiumAtLaunch);
    return fbBuilder.offset;
  }
  int addInsurancePremiumAtLaunchEstimated(bool? insurancePremiumAtLaunchEstimated) {
    fbBuilder.addBool(34, insurancePremiumAtLaunchEstimated);
    return fbBuilder.offset;
  }
  int addNumHumans(int? numHumans) {
    fbBuilder.addInt32(35, numHumans);
    return fbBuilder.offset;
  }
  int addCubesatDispenserTypeOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addMassCategoryOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addLaunchIdOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addLaunchVehicleIdOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addLaunchProviderFlightNumberOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addLaunchSiteNameOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addLaunchSiteIdOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addLaunchCountryOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addLaunchProviderOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addLaunchProviderCountryOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addCommercialLaunch(bool? commercialLaunch) {
    fbBuilder.addBool(46, commercialLaunch);
    return fbBuilder.offset;
  }
  int addLaunchTypeOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addLaunchCharacteristicOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addLaunchNumberOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addLaunchDateOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addLaunchDateRemarksOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addYoutubeLaunchLinkOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addOwnerOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addOwnerCountryOffset(int? offset) {
    fbBuilder.addOffset(55, offset);
    return fbBuilder.offset;
  }
  int addOperatorOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addOperatorCountryOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addLeased(bool? leased) {
    fbBuilder.addBool(58, leased);
    return fbBuilder.offset;
  }
  int addOrderDateOffset(int? offset) {
    fbBuilder.addOffset(59, offset);
    return fbBuilder.offset;
  }
  int addCapabilityLost(double? capabilityLost) {
    fbBuilder.addFloat64(60, capabilityLost);
    return fbBuilder.offset;
  }
  int addCapacityLost(double? capacityLost) {
    fbBuilder.addFloat64(61, capacityLost);
    return fbBuilder.offset;
  }
  int addPrimaryMissionGroupOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addAdditionalMissionsGroupsOffset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addTotalClaims(int? totalClaims) {
    fbBuilder.addInt32(64, totalClaims);
    return fbBuilder.offset;
  }
  int addTotalInjuries(int? totalInjuries) {
    fbBuilder.addInt32(65, totalInjuries);
    return fbBuilder.offset;
  }
  int addTotalFatalities(int? totalFatalities) {
    fbBuilder.addInt32(66, totalFatalities);
    return fbBuilder.offset;
  }
  int addNameAtLaunchOffset(int? offset) {
    fbBuilder.addOffset(67, offset);
    return fbBuilder.offset;
  }
  int addBusIdOffset(int? offset) {
    fbBuilder.addOffset(68, offset);
    return fbBuilder.offset;
  }
  int addCurrentAge(double? currentAge) {
    fbBuilder.addFloat64(69, currentAge);
    return fbBuilder.offset;
  }
  int addLifeLost(double? lifeLost) {
    fbBuilder.addFloat64(70, lifeLost);
    return fbBuilder.offset;
  }
  int addGeoPosition(double? geoPosition) {
    fbBuilder.addFloat64(71, geoPosition);
    return fbBuilder.offset;
  }
  int addInsuranceLossesTotal(double? insuranceLossesTotal) {
    fbBuilder.addFloat64(72, insuranceLossesTotal);
    return fbBuilder.offset;
  }
  int addLaunchArrangerOffset(int? offset) {
    fbBuilder.addOffset(73, offset);
    return fbBuilder.offset;
  }
  int addLaunchArrangerCountryOffset(int? offset) {
    fbBuilder.addOffset(74, offset);
    return fbBuilder.offset;
  }
  int addSerialNumberOffset(int? offset) {
    fbBuilder.addOffset(75, offset);
    return fbBuilder.offset;
  }
  int addProgramNameOffset(int? offset) {
    fbBuilder.addOffset(76, offset);
    return fbBuilder.offset;
  }
  int addReusedHullNameOffset(int? offset) {
    fbBuilder.addOffset(77, offset);
    return fbBuilder.offset;
  }
  int addDateOfObservationOffset(int? offset) {
    fbBuilder.addOffset(78, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(79, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(80, lon);
    return fbBuilder.offset;
  }
  int addAltitude(double? altitude) {
    fbBuilder.addFloat64(81, altitude);
    return fbBuilder.offset;
  }
  int addCollisionRiskMm(double? collisionRiskMm) {
    fbBuilder.addFloat64(82, collisionRiskMm);
    return fbBuilder.offset;
  }
  int addCollisionRiskCm(double? collisionRiskCm) {
    fbBuilder.addFloat64(83, collisionRiskCm);
    return fbBuilder.offset;
  }
  int addQuantity(int? quantity) {
    fbBuilder.addInt32(84, quantity);
    return fbBuilder.offset;
  }
  int addReusableFlightsOffset(int? offset) {
    fbBuilder.addOffset(85, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(86, offset);
    return fbBuilder.offset;
  }
  int addInsuranceNotesOffset(int? offset) {
    fbBuilder.addOffset(87, offset);
    return fbBuilder.offset;
  }
  int addLaunchNotesOffset(int? offset) {
    fbBuilder.addOffset(88, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(89, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(90, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(91, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SeradataSpacecraftDetailsAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(92, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(93, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(94, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SeradataSpacecraftDetailsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idOnOrbit;
  final String? _classificationMarking;
  final String? _name;
  final String? _description;
  final String? _intlNumber;
  final String? _sector;
  final double? _apogee;
  final double? _perigee;
  final double? _period;
  final double? _inclination;
  final String? _primeManufacturerOrgId;
  final String? _stabilizer;
  final int? _designLife;
  final int? _expectedLife;
  final bool? _insuredAtLaunch;
  final double? _launchMass;
  final double? _dryMass;
  final int? _catalogNumber;
  final double? _totalPayloadPower;
  final String? _constellation;
  final String? _orbitCategory;
  final String? _orbitSubCategory;
  final double? _launchCost;
  final bool? _launchCostEstimated;
  final bool? _costEstimated;
  final double? _newCost;
  final double? _combinedNewCost;
  final bool? _combinedCostEstimated;
  final double? _insuredValueAtLaunch;
  final bool? _insuredValueLaunchEstimated;
  final double? _annualInsuredDepreciationFactor;
  final bool? _annualInsuredDepreciationFactorEstimated;
  final double? _insurancePremiumAtLaunch;
  final bool? _insurancePremiumAtLaunchEstimated;
  final int? _numHumans;
  final String? _cubesatDispenserType;
  final String? _massCategory;
  final String? _launchId;
  final String? _launchVehicleId;
  final String? _launchProviderFlightNumber;
  final String? _launchSiteName;
  final String? _launchSiteId;
  final String? _launchCountry;
  final String? _launchProvider;
  final String? _launchProviderCountry;
  final bool? _commercialLaunch;
  final String? _launchType;
  final String? _launchCharacteristic;
  final String? _launchNumber;
  final String? _launchDate;
  final String? _launchDateRemarks;
  final String? _youtubeLaunchLink;
  final String? _status;
  final String? _owner;
  final String? _ownerCountry;
  final String? _$operator;
  final String? _operatorCountry;
  final bool? _leased;
  final String? _orderDate;
  final double? _capabilityLost;
  final double? _capacityLost;
  final String? _primaryMissionGroup;
  final String? _additionalMissionsGroups;
  final int? _totalClaims;
  final int? _totalInjuries;
  final int? _totalFatalities;
  final String? _nameAtLaunch;
  final String? _busId;
  final double? _currentAge;
  final double? _lifeLost;
  final double? _geoPosition;
  final double? _insuranceLossesTotal;
  final String? _launchArranger;
  final String? _launchArrangerCountry;
  final String? _serialNumber;
  final String? _programName;
  final String? _reusedHullName;
  final String? _dateOfObservation;
  final double? _lat;
  final double? _lon;
  final double? _altitude;
  final double? _collisionRiskMm;
  final double? _collisionRiskCm;
  final int? _quantity;
  final String? _reusableFlights;
  final String? _notes;
  final String? _insuranceNotes;
  final String? _launchNotes;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SeradataSpacecraftDetailsAbridgedDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;

  SeradataSpacecraftDetailsAbridgedObjectBuilder({
    String? id,
    String? idOnOrbit,
    String? classificationMarking,
    String? name,
    String? description,
    String? intlNumber,
    String? sector,
    double? apogee,
    double? perigee,
    double? period,
    double? inclination,
    String? primeManufacturerOrgId,
    String? stabilizer,
    int? designLife,
    int? expectedLife,
    bool? insuredAtLaunch,
    double? launchMass,
    double? dryMass,
    int? catalogNumber,
    double? totalPayloadPower,
    String? constellation,
    String? orbitCategory,
    String? orbitSubCategory,
    double? launchCost,
    bool? launchCostEstimated,
    bool? costEstimated,
    double? newCost,
    double? combinedNewCost,
    bool? combinedCostEstimated,
    double? insuredValueAtLaunch,
    bool? insuredValueLaunchEstimated,
    double? annualInsuredDepreciationFactor,
    bool? annualInsuredDepreciationFactorEstimated,
    double? insurancePremiumAtLaunch,
    bool? insurancePremiumAtLaunchEstimated,
    int? numHumans,
    String? cubesatDispenserType,
    String? massCategory,
    String? launchId,
    String? launchVehicleId,
    String? launchProviderFlightNumber,
    String? launchSiteName,
    String? launchSiteId,
    String? launchCountry,
    String? launchProvider,
    String? launchProviderCountry,
    bool? commercialLaunch,
    String? launchType,
    String? launchCharacteristic,
    String? launchNumber,
    String? launchDate,
    String? launchDateRemarks,
    String? youtubeLaunchLink,
    String? status,
    String? owner,
    String? ownerCountry,
    String? $operator,
    String? operatorCountry,
    bool? leased,
    String? orderDate,
    double? capabilityLost,
    double? capacityLost,
    String? primaryMissionGroup,
    String? additionalMissionsGroups,
    int? totalClaims,
    int? totalInjuries,
    int? totalFatalities,
    String? nameAtLaunch,
    String? busId,
    double? currentAge,
    double? lifeLost,
    double? geoPosition,
    double? insuranceLossesTotal,
    String? launchArranger,
    String? launchArrangerCountry,
    String? serialNumber,
    String? programName,
    String? reusedHullName,
    String? dateOfObservation,
    double? lat,
    double? lon,
    double? altitude,
    double? collisionRiskMm,
    double? collisionRiskCm,
    int? quantity,
    String? reusableFlights,
    String? notes,
    String? insuranceNotes,
    String? launchNotes,
    String? source,
    String? origin,
    String? origNetwork,
    SeradataSpacecraftDetailsAbridgedDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
  })
      : _id = id,
        _idOnOrbit = idOnOrbit,
        _classificationMarking = classificationMarking,
        _name = name,
        _description = description,
        _intlNumber = intlNumber,
        _sector = sector,
        _apogee = apogee,
        _perigee = perigee,
        _period = period,
        _inclination = inclination,
        _primeManufacturerOrgId = primeManufacturerOrgId,
        _stabilizer = stabilizer,
        _designLife = designLife,
        _expectedLife = expectedLife,
        _insuredAtLaunch = insuredAtLaunch,
        _launchMass = launchMass,
        _dryMass = dryMass,
        _catalogNumber = catalogNumber,
        _totalPayloadPower = totalPayloadPower,
        _constellation = constellation,
        _orbitCategory = orbitCategory,
        _orbitSubCategory = orbitSubCategory,
        _launchCost = launchCost,
        _launchCostEstimated = launchCostEstimated,
        _costEstimated = costEstimated,
        _newCost = newCost,
        _combinedNewCost = combinedNewCost,
        _combinedCostEstimated = combinedCostEstimated,
        _insuredValueAtLaunch = insuredValueAtLaunch,
        _insuredValueLaunchEstimated = insuredValueLaunchEstimated,
        _annualInsuredDepreciationFactor = annualInsuredDepreciationFactor,
        _annualInsuredDepreciationFactorEstimated = annualInsuredDepreciationFactorEstimated,
        _insurancePremiumAtLaunch = insurancePremiumAtLaunch,
        _insurancePremiumAtLaunchEstimated = insurancePremiumAtLaunchEstimated,
        _numHumans = numHumans,
        _cubesatDispenserType = cubesatDispenserType,
        _massCategory = massCategory,
        _launchId = launchId,
        _launchVehicleId = launchVehicleId,
        _launchProviderFlightNumber = launchProviderFlightNumber,
        _launchSiteName = launchSiteName,
        _launchSiteId = launchSiteId,
        _launchCountry = launchCountry,
        _launchProvider = launchProvider,
        _launchProviderCountry = launchProviderCountry,
        _commercialLaunch = commercialLaunch,
        _launchType = launchType,
        _launchCharacteristic = launchCharacteristic,
        _launchNumber = launchNumber,
        _launchDate = launchDate,
        _launchDateRemarks = launchDateRemarks,
        _youtubeLaunchLink = youtubeLaunchLink,
        _status = status,
        _owner = owner,
        _ownerCountry = ownerCountry,
        _$operator = $operator,
        _operatorCountry = operatorCountry,
        _leased = leased,
        _orderDate = orderDate,
        _capabilityLost = capabilityLost,
        _capacityLost = capacityLost,
        _primaryMissionGroup = primaryMissionGroup,
        _additionalMissionsGroups = additionalMissionsGroups,
        _totalClaims = totalClaims,
        _totalInjuries = totalInjuries,
        _totalFatalities = totalFatalities,
        _nameAtLaunch = nameAtLaunch,
        _busId = busId,
        _currentAge = currentAge,
        _lifeLost = lifeLost,
        _geoPosition = geoPosition,
        _insuranceLossesTotal = insuranceLossesTotal,
        _launchArranger = launchArranger,
        _launchArrangerCountry = launchArrangerCountry,
        _serialNumber = serialNumber,
        _programName = programName,
        _reusedHullName = reusedHullName,
        _dateOfObservation = dateOfObservation,
        _lat = lat,
        _lon = lon,
        _altitude = altitude,
        _collisionRiskMm = collisionRiskMm,
        _collisionRiskCm = collisionRiskCm,
        _quantity = quantity,
        _reusableFlights = reusableFlights,
        _notes = notes,
        _insuranceNotes = insuranceNotes,
        _launchNotes = launchNotes,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? intlNumberOffset = _intlNumber == null ? null
        : fbBuilder.writeString(_intlNumber!);
    final int? sectorOffset = _sector == null ? null
        : fbBuilder.writeString(_sector!);
    final int? primeManufacturerOrgIdOffset = _primeManufacturerOrgId == null ? null
        : fbBuilder.writeString(_primeManufacturerOrgId!);
    final int? stabilizerOffset = _stabilizer == null ? null
        : fbBuilder.writeString(_stabilizer!);
    final int? constellationOffset = _constellation == null ? null
        : fbBuilder.writeString(_constellation!);
    final int? orbitCategoryOffset = _orbitCategory == null ? null
        : fbBuilder.writeString(_orbitCategory!);
    final int? orbitSubCategoryOffset = _orbitSubCategory == null ? null
        : fbBuilder.writeString(_orbitSubCategory!);
    final int? cubesatDispenserTypeOffset = _cubesatDispenserType == null ? null
        : fbBuilder.writeString(_cubesatDispenserType!);
    final int? massCategoryOffset = _massCategory == null ? null
        : fbBuilder.writeString(_massCategory!);
    final int? launchIdOffset = _launchId == null ? null
        : fbBuilder.writeString(_launchId!);
    final int? launchVehicleIdOffset = _launchVehicleId == null ? null
        : fbBuilder.writeString(_launchVehicleId!);
    final int? launchProviderFlightNumberOffset = _launchProviderFlightNumber == null ? null
        : fbBuilder.writeString(_launchProviderFlightNumber!);
    final int? launchSiteNameOffset = _launchSiteName == null ? null
        : fbBuilder.writeString(_launchSiteName!);
    final int? launchSiteIdOffset = _launchSiteId == null ? null
        : fbBuilder.writeString(_launchSiteId!);
    final int? launchCountryOffset = _launchCountry == null ? null
        : fbBuilder.writeString(_launchCountry!);
    final int? launchProviderOffset = _launchProvider == null ? null
        : fbBuilder.writeString(_launchProvider!);
    final int? launchProviderCountryOffset = _launchProviderCountry == null ? null
        : fbBuilder.writeString(_launchProviderCountry!);
    final int? launchTypeOffset = _launchType == null ? null
        : fbBuilder.writeString(_launchType!);
    final int? launchCharacteristicOffset = _launchCharacteristic == null ? null
        : fbBuilder.writeString(_launchCharacteristic!);
    final int? launchNumberOffset = _launchNumber == null ? null
        : fbBuilder.writeString(_launchNumber!);
    final int? launchDateOffset = _launchDate == null ? null
        : fbBuilder.writeString(_launchDate!);
    final int? launchDateRemarksOffset = _launchDateRemarks == null ? null
        : fbBuilder.writeString(_launchDateRemarks!);
    final int? youtubeLaunchLinkOffset = _youtubeLaunchLink == null ? null
        : fbBuilder.writeString(_youtubeLaunchLink!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? ownerOffset = _owner == null ? null
        : fbBuilder.writeString(_owner!);
    final int? ownerCountryOffset = _ownerCountry == null ? null
        : fbBuilder.writeString(_ownerCountry!);
    final int? $operatorOffset = _$operator == null ? null
        : fbBuilder.writeString(_$operator!);
    final int? operatorCountryOffset = _operatorCountry == null ? null
        : fbBuilder.writeString(_operatorCountry!);
    final int? orderDateOffset = _orderDate == null ? null
        : fbBuilder.writeString(_orderDate!);
    final int? primaryMissionGroupOffset = _primaryMissionGroup == null ? null
        : fbBuilder.writeString(_primaryMissionGroup!);
    final int? additionalMissionsGroupsOffset = _additionalMissionsGroups == null ? null
        : fbBuilder.writeString(_additionalMissionsGroups!);
    final int? nameAtLaunchOffset = _nameAtLaunch == null ? null
        : fbBuilder.writeString(_nameAtLaunch!);
    final int? busIdOffset = _busId == null ? null
        : fbBuilder.writeString(_busId!);
    final int? launchArrangerOffset = _launchArranger == null ? null
        : fbBuilder.writeString(_launchArranger!);
    final int? launchArrangerCountryOffset = _launchArrangerCountry == null ? null
        : fbBuilder.writeString(_launchArrangerCountry!);
    final int? serialNumberOffset = _serialNumber == null ? null
        : fbBuilder.writeString(_serialNumber!);
    final int? programNameOffset = _programName == null ? null
        : fbBuilder.writeString(_programName!);
    final int? reusedHullNameOffset = _reusedHullName == null ? null
        : fbBuilder.writeString(_reusedHullName!);
    final int? dateOfObservationOffset = _dateOfObservation == null ? null
        : fbBuilder.writeString(_dateOfObservation!);
    final int? reusableFlightsOffset = _reusableFlights == null ? null
        : fbBuilder.writeString(_reusableFlights!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? insuranceNotesOffset = _insuranceNotes == null ? null
        : fbBuilder.writeString(_insuranceNotes!);
    final int? launchNotesOffset = _launchNotes == null ? null
        : fbBuilder.writeString(_launchNotes!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    fbBuilder.startTable(95);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idOnOrbitOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, nameOffset);
    fbBuilder.addOffset(4, descriptionOffset);
    fbBuilder.addOffset(5, intlNumberOffset);
    fbBuilder.addOffset(6, sectorOffset);
    fbBuilder.addFloat64(7, _apogee);
    fbBuilder.addFloat64(8, _perigee);
    fbBuilder.addFloat64(9, _period);
    fbBuilder.addFloat64(10, _inclination);
    fbBuilder.addOffset(11, primeManufacturerOrgIdOffset);
    fbBuilder.addOffset(12, stabilizerOffset);
    fbBuilder.addInt32(13, _designLife);
    fbBuilder.addInt32(14, _expectedLife);
    fbBuilder.addBool(15, _insuredAtLaunch);
    fbBuilder.addFloat64(16, _launchMass);
    fbBuilder.addFloat64(17, _dryMass);
    fbBuilder.addInt32(18, _catalogNumber);
    fbBuilder.addFloat64(19, _totalPayloadPower);
    fbBuilder.addOffset(20, constellationOffset);
    fbBuilder.addOffset(21, orbitCategoryOffset);
    fbBuilder.addOffset(22, orbitSubCategoryOffset);
    fbBuilder.addFloat64(23, _launchCost);
    fbBuilder.addBool(24, _launchCostEstimated);
    fbBuilder.addBool(25, _costEstimated);
    fbBuilder.addFloat64(26, _newCost);
    fbBuilder.addFloat64(27, _combinedNewCost);
    fbBuilder.addBool(28, _combinedCostEstimated);
    fbBuilder.addFloat64(29, _insuredValueAtLaunch);
    fbBuilder.addBool(30, _insuredValueLaunchEstimated);
    fbBuilder.addFloat64(31, _annualInsuredDepreciationFactor);
    fbBuilder.addBool(32, _annualInsuredDepreciationFactorEstimated);
    fbBuilder.addFloat64(33, _insurancePremiumAtLaunch);
    fbBuilder.addBool(34, _insurancePremiumAtLaunchEstimated);
    fbBuilder.addInt32(35, _numHumans);
    fbBuilder.addOffset(36, cubesatDispenserTypeOffset);
    fbBuilder.addOffset(37, massCategoryOffset);
    fbBuilder.addOffset(38, launchIdOffset);
    fbBuilder.addOffset(39, launchVehicleIdOffset);
    fbBuilder.addOffset(40, launchProviderFlightNumberOffset);
    fbBuilder.addOffset(41, launchSiteNameOffset);
    fbBuilder.addOffset(42, launchSiteIdOffset);
    fbBuilder.addOffset(43, launchCountryOffset);
    fbBuilder.addOffset(44, launchProviderOffset);
    fbBuilder.addOffset(45, launchProviderCountryOffset);
    fbBuilder.addBool(46, _commercialLaunch);
    fbBuilder.addOffset(47, launchTypeOffset);
    fbBuilder.addOffset(48, launchCharacteristicOffset);
    fbBuilder.addOffset(49, launchNumberOffset);
    fbBuilder.addOffset(50, launchDateOffset);
    fbBuilder.addOffset(51, launchDateRemarksOffset);
    fbBuilder.addOffset(52, youtubeLaunchLinkOffset);
    fbBuilder.addOffset(53, statusOffset);
    fbBuilder.addOffset(54, ownerOffset);
    fbBuilder.addOffset(55, ownerCountryOffset);
    fbBuilder.addOffset(56, $operatorOffset);
    fbBuilder.addOffset(57, operatorCountryOffset);
    fbBuilder.addBool(58, _leased);
    fbBuilder.addOffset(59, orderDateOffset);
    fbBuilder.addFloat64(60, _capabilityLost);
    fbBuilder.addFloat64(61, _capacityLost);
    fbBuilder.addOffset(62, primaryMissionGroupOffset);
    fbBuilder.addOffset(63, additionalMissionsGroupsOffset);
    fbBuilder.addInt32(64, _totalClaims);
    fbBuilder.addInt32(65, _totalInjuries);
    fbBuilder.addInt32(66, _totalFatalities);
    fbBuilder.addOffset(67, nameAtLaunchOffset);
    fbBuilder.addOffset(68, busIdOffset);
    fbBuilder.addFloat64(69, _currentAge);
    fbBuilder.addFloat64(70, _lifeLost);
    fbBuilder.addFloat64(71, _geoPosition);
    fbBuilder.addFloat64(72, _insuranceLossesTotal);
    fbBuilder.addOffset(73, launchArrangerOffset);
    fbBuilder.addOffset(74, launchArrangerCountryOffset);
    fbBuilder.addOffset(75, serialNumberOffset);
    fbBuilder.addOffset(76, programNameOffset);
    fbBuilder.addOffset(77, reusedHullNameOffset);
    fbBuilder.addOffset(78, dateOfObservationOffset);
    fbBuilder.addFloat64(79, _lat);
    fbBuilder.addFloat64(80, _lon);
    fbBuilder.addFloat64(81, _altitude);
    fbBuilder.addFloat64(82, _collisionRiskMm);
    fbBuilder.addFloat64(83, _collisionRiskCm);
    fbBuilder.addInt32(84, _quantity);
    fbBuilder.addOffset(85, reusableFlightsOffset);
    fbBuilder.addOffset(86, notesOffset);
    fbBuilder.addOffset(87, insuranceNotesOffset);
    fbBuilder.addOffset(88, launchNotesOffset);
    fbBuilder.addOffset(89, sourceOffset);
    fbBuilder.addOffset(90, originOffset);
    fbBuilder.addOffset(91, origNetworkOffset);
    fbBuilder.addInt8(92, _dataMode?.value);
    fbBuilder.addOffset(93, createdAtOffset);
    fbBuilder.addOffset(94, createdByOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
