// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class FlightPlanAbridgedDataModeEnum {
  final int value;
  const FlightPlanAbridgedDataModeEnum._(this.value);

  factory FlightPlanAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum FlightPlanAbridgedDataModeEnum');
    }
    return result;
  }

  static FlightPlanAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : FlightPlanAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const FlightPlanAbridgedDataModeEnum REAL = FlightPlanAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const FlightPlanAbridgedDataModeEnum TEST = FlightPlanAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const FlightPlanAbridgedDataModeEnum SIMULATED = FlightPlanAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const FlightPlanAbridgedDataModeEnum EXERCISE = FlightPlanAbridgedDataModeEnum._(3);
  static const Map<int, FlightPlanAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<FlightPlanAbridgedDataModeEnum> reader = _FlightPlanAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'FlightPlanAbridgedDataModeEnum{value: $value}';
  }
}

class _FlightPlanAbridgedDataModeEnumReader extends fb.Reader<FlightPlanAbridgedDataModeEnum> {
  const _FlightPlanAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  FlightPlanAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      FlightPlanAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Flight Plan contains data specifying the details of an intended flight including schedule and expected route.
class FlightPlanAbridged {
  FlightPlanAbridged._(this._bc, this._bcOffset);
  factory FlightPlanAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlightPlanAbridged> reader = _FlightPlanAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) encode/decode procedures.
  ///  Example: /// Example: AJM7939B1123
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get amcMissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The UDL unique identifier of the aircraft sortie associated with this flight plan.
  ///  Example: /// Example: 9d60c1b1-10b1-b2a7-e403-84c5d7eeb170
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSortie => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The UDL unique identifier of the aircraft associated with this flight plan.
  ///  Example: /// Example: 4f4a67c6-40fd-11ee-be56-0242ac120002
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idAircraft => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The leg number of this flight plan.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  int get legNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  The UDL unique identifier of the departure airfield associated with this flight plan.
  ///  Example: /// Example: 2a9020f6-40fd-11ee-be56-0242ac120002
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idDepAirfield => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The airfield identifier of the departure location, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: KSLV
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get depAirfield => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The UDL unique identifier of the arrival airfield associated with this flight plan.
  ///  Example: /// Example: 363080c2-40fd-11ee-be56-0242ac120002
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idArrAirfield => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The airfield identifier of the arrival location, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: KCHS
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get arrAirfield => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The source ID of the flight plan from the generating system.
  ///  Example: /// Example: AFMAPP20322347140001
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The generation time of this flight plan in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-05-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get genTs => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  ///  Example: /// Example: KC-130 HERCULES
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get aircraftMds => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The tail number of the aircraft associated with this flight plan.
  ///  Example: /// Example: 77187
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get tailNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The call sign assigned to the aircraft for this flight plan.
  ///  Example: /// Example: HKY629
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get callSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The date and time the weather valid period begins in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-05-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get wxValidStart => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The date and time the weather valid period ends in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-05-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get wxValidEnd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The estimated time of departure for the aircraft, in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-05-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get estDepTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The percent degrade due to drag for this aircraft.
  ///  Example: /// Example: 16.9
  ///  Constraints: No constraints specified.
  double get dragIndex => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  The fuel degrade percentage used for this mission.
  ///  Example: /// Example: 10.3
  ///  Constraints: No constraints specified.
  double get fuelDegrade => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Operating weight of the aircraft in pounds.
  ///  Example: /// Example: 251830.5
  ///  Constraints: No constraints specified.
  double get opWeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  The mission index value for this mission. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
  ///  Example: /// Example: 44.1
  ///  Constraints: No constraints specified.
  double get msnIndex => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Total of all fuel required to complete the flight in pounds, including fuel to be dispensed on a refueling mission.
  ///  Example: /// Example: 180000.1
  ///  Constraints: No constraints specified.
  double get rampFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Fuel required to start engines and taxi to the end of the runway in pounds.
  ///  Example: /// Example: 1500.1
  ///  Constraints: No constraints specified.
  double get taxiFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in pounds.
  ///  Example: /// Example: 178500.1
  ///  Constraints: No constraints specified.
  double get takeoffFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Fuel required from brake release to Top of Climb in pounds.
  ///  Example: /// Example: 7000.1
  ///  Constraints: No constraints specified.
  double get climbFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Time required from brake release to Top of Climb expressed as HH:MM.
  ///  Example: /// Example: 00:13
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get climbTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Additional fuel burned at Top of Climb in pounds.
  ///  Example: /// Example: 500.1
  ///  Constraints: No constraints specified.
  double get holdDownFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Additional fuel burned at Top of Climb for icing in pounds.
  ///  Example: /// Example: 1000.1
  ///  Constraints: No constraints specified.
  double get tocIceFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Fuel remaining at Top of Climb in pounds.
  ///  Example: /// Example: 160000.1
  ///  Constraints: No constraints specified.
  double get tocFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Fuel required to fly from Top of Climb to Top of Descent in pounds.
  ///  Example: /// Example: 155000.1
  ///  Constraints: No constraints specified.
  double get enrouteFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
  ///  Example: /// Example: 06:30
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get enrouteTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
  ///  Example: /// Example: 1000.1
  ///  Constraints: No constraints specified.
  double get thunderAvoidFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Additional fuel burned at Top of Descent for icing in pounds.
  ///  Example: /// Example: 2000.1
  ///  Constraints: No constraints specified.
  double get todIceFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Additional fuel burned at Top of Descent for the operational condition in pounds.
  ///  Example: /// Example: 5000.1
  ///  Constraints: No constraints specified.
  double get opConditionFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  Fuel remaining at Top of Descent in pounds.
  ///  Example: /// Example: 32000.1
  ///  Constraints: No constraints specified.
  double get todFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  Additional fuel burned at landing/missed approach for an early descent in pounds.
  ///  Example: /// Example: 500.1
  ///  Constraints: No constraints specified.
  double get earlyDescentFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Additional fuel burned at landing/missed approach for icing during arrival in pounds.
  ///  Example: /// Example: 1000.1
  ///  Constraints: No constraints specified.
  double get arrIceFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Additional fuel burned at the destination for holding in pounds.
  ///  Example: /// Example: 6000.1
  ///  Constraints: No constraints specified.
  double get holdFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  Additional time for holding at the destination expressed as HH:MM.
  ///  Example: /// Example: 01:00
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get holdTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Fuel burned from the initial approach point to landing in pounds.
  ///  Example: /// Example: 3000.1
  ///  Constraints: No constraints specified.
  double get appLandingFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Fuel planned to be burned during the flight in pounds.
  ///  Example: /// Example: 145000.1
  ///  Constraints: No constraints specified.
  double get burnedFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  Fuel planned to be remaining on the airplane at landing in pounds.
  ///  Example: /// Example: 19000.1
  ///  Constraints: No constraints specified.
  double get landingFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  The minimum fuel on board required to divert in pounds.
  ///  Example: /// Example: 25000.1
  ///  Constraints: No constraints specified.
  double get minDivertFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  Fuel required to fly to alternate landing site 1 and land in pounds.
  ///  Example: /// Example: 6000.1
  ///  Constraints: No constraints specified.
  double get arrAlternate1Fuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  Fuel required to fly to alternate landing site 2 and land in pounds.
  ///  Example: /// Example: 6000.1
  ///  Constraints: No constraints specified.
  double get arrAlternate2Fuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  The amount of contingency fuel in pounds.
  ///  Example: /// Example: 3000.1
  ///  Constraints: No constraints specified.
  double get contingencyFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  The amount of reserve fuel in pounds.
  ///  Example: /// Example: 10000.1
  ///  Constraints: No constraints specified.
  double get reserveFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  The depressurization fuel required to fly from the Equal Time Point to the Last Suitable/First Suitable airfield at depressurization altitude in pounds.
  ///  Example: /// Example: 20000.1
  ///  Constraints: No constraints specified.
  double get depressFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  The amount of unusable fuel in pounds.
  ///  Example: /// Example: 2300.1
  ///  Constraints: No constraints specified.
  double get unusableFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  The amount of unidentified extra fuel required to get to min landing in pounds.
  ///  Example: /// Example: 5000.1
  ///  Constraints: No constraints specified.
  double get unidentExtraFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  The amount of identified extra fuel carried and not available in the burn plan in pounds.
  ///  Example: /// Example: 5000.1
  ///  Constraints: No constraints specified.
  double get identExtraFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  Total fuel remaining at alternate landing site 1 in pounds.
  ///  Example: /// Example: 18000.1
  ///  Constraints: No constraints specified.
  double get remAlternate1Fuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  Total fuel remaining at alternate landing site 2 in pounds.
  ///  Example: /// Example: 18000.1
  ///  Constraints: No constraints specified.
  double get remAlternate2Fuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  Total endurance time based on the fuel on board expressed as HH:MM.
  ///  Example: /// Example: 08:45
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get enduranceTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  Name of the planned Standard Instrument Departure (SID) procedure.
  ///  Example: /// Example: RENV3B
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get sid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 114);
  ///  Name of the planned Standard Terminal Arrival (STAR) procedure.
  ///  Example: /// Example: ADANA
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get star => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);
  ///  The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system assesses the integrity of the GPS signals. This system predicts outages for a specified geographical area. These predictions are based on the location, path, and scheduled GPS satellite outages.
  ///  Example: /// Example: Failed by FAA SAPT 184022AUG2022
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get gpsRaim => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  The departure runway for this flight.
  ///  Example: /// Example: 05L
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get depRunway => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 120);
  ///  The arrival runway for this flight.
  ///  Example: /// Example: 05L
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get arrRunway => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 122);
  ///  The 1801 fileable route of flight string for this flight. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
  ///  Example: /// Example: RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT
  ///  GORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177
  ///  ESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get routeString => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 124);
  ///  Array of country codes for the countries overflown during this flight in ISO 3166-1 Alpha-2 format.
  ///  Example: /// Example: ['US', 'CA', 'UK']
  ///  Constraints: No constraints specified.
  List<String>? get countryCodes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 126);
  ///  The Extended Operations (ETOPS) rating used to calculate this flight plan.
  ///  Example: /// Example: 85 MINUTES
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get etopsRating => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 128);
  ///  Array of Extended Operations (ETOPS) adequate landing airfields that are within the mission region.
  ///  Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
  ///  Constraints: No constraints specified.
  List<String>? get etopsAirfields => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 130);
  ///  Array of Extended Operations (ETOPS) alternate suitable landing airfields that are within the mission region.
  ///  Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
  ///  Constraints: No constraints specified.
  List<String>? get etopsAltAirfields => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 132);
  ///  The Extended Operations (ETOPS) validity window for the alternate airfield.
  ///  Example: /// Example: LPLA: 0317Z-0722Z
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get etopsValWindow => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 134);
  ///  Remarks from the planners concerning this flight plan.
  ///  Example: /// Example: Flight plan is good for 2 days before airspace closes over the UK.
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get plannerRemark => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 136);
  ///  Remarks about the planned cargo associated with this flight plan.
  ///  Example: /// Example: Expecting 55,000 lbs. If different, call us.
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get cargoRemark => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 138);
  ///  Wind factor for the first half of the route. This is the average wind factor from first Top of Climb to the mid-time of the entire route in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  ///  Example: /// Example: -1.1
  ///  Constraints: No constraints specified.
  double get windFac1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 140, 0.0);
  ///  Wind factor for the second half of the route. This is the average wind factor from the mid-time of the entire route to last Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get windFac2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 142, 0.0);
  ///  Average wind factor from Top of Climb to Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  ///  Example: /// Example: 5.1
  ///  Constraints: No constraints specified.
  double get windFacAvg => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 144, 0.0);
  ///  Average temperature deviation of the primary, divert, and alternate path for the route between first Top of Climb and last Top of Descent in degrees Celsius.
  ///  Example: /// Example: 16.1
  ///  Constraints: No constraints specified.
  double get avgTempDev => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  ///  Array of Air Traffic Control (ATC) addresses.
  ///  Example: /// Example: ['EYCBZMFO', 'EUCHZMFP', 'ETARYXYX', 'EDUUZVZI']
  ///  Constraints: No constraints specified.
  List<String>? get atcAddresses => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 148);
  ///  Air Traffic Control address filing the flight plan.
  ///  Example: /// Example: ETARYXYX
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get originator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 150);
  ///  The number of aircraft flying this flight plan.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numAircraft => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 152, 0);
  ///  The flight rules this flight plan is being filed under.
  ///  Example: /// Example: l
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get flightRules => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 154);
  ///  The type of flight (MILITARY, CIVILIAN, etc).
  ///  Example: /// Example: MILITARY
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get flightType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 156);
  ///  A character string representation of the initial filed cruise speed for this flight (prepended values of K, N, and M represent kilometers per hour, knots, and Mach, respectively).
  ///  Example: /// Example: N0305
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get initialCruiseSpeed => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 158);
  ///  A character string representation of the initial filed altitude level for this flight (prepended values of F, S, A, and M represent flight level in hundreds of feet, standard metric level in tens of meters, altitude in hundreds of feet, and altitude in tens of meters, respectively).
  ///  Example: /// Example: F270
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get initialFlightLevel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 160);
  ///  The first designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: EDDS
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get arrAlternate1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 162);
  ///  The second designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: EDDM
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get arrAlternate2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 164);
  ///  The designated alternate departure airfield, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: LFPO
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get depAlternate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 166);
  ///  The wake turbulence category for this flight. The categories are assigned by the International Civil Aviation Organization (ICAO) and are based on maximum certified takeoff mass for the purpose of separating aircraft in flight due to wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
  ///  Example: /// Example: MEDIUM
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get wakeTurbCat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 168);
  ///  The list of equipment on the aircraft as defined in the Flight Information Publications (FLIP) General Planning (GP) manual.
  ///  Example: /// Example: SDFGHIRTUWXYZ/H
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get equipment => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 170);
  ///  Additional remarks for air traffic control for this flight.
  ///  Example: /// Example: STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 172);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 174);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 176);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 178);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 180);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 182);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 184);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  FlightPlanAbridgedDataModeEnum get dataMode => FlightPlanAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 186, 0));
  ///  Collection of air refueling events occurring on this flight.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get airRefuelEvents => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 188);
  ///  Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get flightPlanMessages => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 190);
  ///  Collection of waypoints associated with this flight plan.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get flightPlanWaypoints => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 192);
  ///  Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get flightPlanPointGroups => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 194);

  @override
  String toString() {
    return 'FlightPlanAbridged{id: ${id}, classificationMarking: ${classificationMarking}, amcMissionId: ${amcMissionId}, idSortie: ${idSortie}, idAircraft: ${idAircraft}, legNum: ${legNum}, idDepAirfield: ${idDepAirfield}, depAirfield: ${depAirfield}, idArrAirfield: ${idArrAirfield}, arrAirfield: ${arrAirfield}, externalId: ${externalId}, genTs: ${genTs}, aircraftMds: ${aircraftMds}, tailNumber: ${tailNumber}, callSign: ${callSign}, wxValidStart: ${wxValidStart}, wxValidEnd: ${wxValidEnd}, estDepTime: ${estDepTime}, dragIndex: ${dragIndex}, fuelDegrade: ${fuelDegrade}, opWeight: ${opWeight}, msnIndex: ${msnIndex}, rampFuel: ${rampFuel}, taxiFuel: ${taxiFuel}, takeoffFuel: ${takeoffFuel}, climbFuel: ${climbFuel}, climbTime: ${climbTime}, holdDownFuel: ${holdDownFuel}, tocIceFuel: ${tocIceFuel}, tocFuel: ${tocFuel}, enrouteFuel: ${enrouteFuel}, enrouteTime: ${enrouteTime}, thunderAvoidFuel: ${thunderAvoidFuel}, todIceFuel: ${todIceFuel}, opConditionFuel: ${opConditionFuel}, todFuel: ${todFuel}, earlyDescentFuel: ${earlyDescentFuel}, arrIceFuel: ${arrIceFuel}, holdFuel: ${holdFuel}, holdTime: ${holdTime}, appLandingFuel: ${appLandingFuel}, burnedFuel: ${burnedFuel}, landingFuel: ${landingFuel}, minDivertFuel: ${minDivertFuel}, arrAlternate1Fuel: ${arrAlternate1Fuel}, arrAlternate2Fuel: ${arrAlternate2Fuel}, contingencyFuel: ${contingencyFuel}, reserveFuel: ${reserveFuel}, depressFuel: ${depressFuel}, unusableFuel: ${unusableFuel}, unidentExtraFuel: ${unidentExtraFuel}, identExtraFuel: ${identExtraFuel}, remAlternate1Fuel: ${remAlternate1Fuel}, remAlternate2Fuel: ${remAlternate2Fuel}, enduranceTime: ${enduranceTime}, sid: ${sid}, star: ${star}, gpsRaim: ${gpsRaim}, depRunway: ${depRunway}, arrRunway: ${arrRunway}, routeString: ${routeString}, countryCodes: ${countryCodes}, etopsRating: ${etopsRating}, etopsAirfields: ${etopsAirfields}, etopsAltAirfields: ${etopsAltAirfields}, etopsValWindow: ${etopsValWindow}, plannerRemark: ${plannerRemark}, cargoRemark: ${cargoRemark}, windFac1: ${windFac1}, windFac2: ${windFac2}, windFacAvg: ${windFacAvg}, avgTempDev: ${avgTempDev}, atcAddresses: ${atcAddresses}, originator: ${originator}, numAircraft: ${numAircraft}, flightRules: ${flightRules}, flightType: ${flightType}, initialCruiseSpeed: ${initialCruiseSpeed}, initialFlightLevel: ${initialFlightLevel}, arrAlternate1: ${arrAlternate1}, arrAlternate2: ${arrAlternate2}, depAlternate: ${depAlternate}, wakeTurbCat: ${wakeTurbCat}, equipment: ${equipment}, notes: ${notes}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, airRefuelEvents: ${airRefuelEvents}, flightPlanMessages: ${flightPlanMessages}, flightPlanWaypoints: ${flightPlanWaypoints}, flightPlanPointGroups: ${flightPlanPointGroups}}';
  }
}

class _FlightPlanAbridgedReader extends fb.TableReader<FlightPlanAbridged> {
  const _FlightPlanAbridgedReader();

  @override
  FlightPlanAbridged createObject(fb.BufferContext bc, int offset) => 
    FlightPlanAbridged._(bc, offset);
}

class FlightPlanAbridgedBuilder {
  FlightPlanAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(96);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAmcMissionIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdSortieOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIdAircraftOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addLegNum(int? legNum) {
    fbBuilder.addInt32(5, legNum);
    return fbBuilder.offset;
  }
  int addIdDepAirfieldOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addDepAirfieldOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addIdArrAirfieldOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addArrAirfieldOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addGenTsOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addAircraftMdsOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addTailNumberOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCallSignOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addWxValidStartOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addWxValidEndOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addEstDepTimeOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addDragIndex(double? dragIndex) {
    fbBuilder.addFloat64(18, dragIndex);
    return fbBuilder.offset;
  }
  int addFuelDegrade(double? fuelDegrade) {
    fbBuilder.addFloat64(19, fuelDegrade);
    return fbBuilder.offset;
  }
  int addOpWeight(double? opWeight) {
    fbBuilder.addFloat64(20, opWeight);
    return fbBuilder.offset;
  }
  int addMsnIndex(double? msnIndex) {
    fbBuilder.addFloat64(21, msnIndex);
    return fbBuilder.offset;
  }
  int addRampFuel(double? rampFuel) {
    fbBuilder.addFloat64(22, rampFuel);
    return fbBuilder.offset;
  }
  int addTaxiFuel(double? taxiFuel) {
    fbBuilder.addFloat64(23, taxiFuel);
    return fbBuilder.offset;
  }
  int addTakeoffFuel(double? takeoffFuel) {
    fbBuilder.addFloat64(24, takeoffFuel);
    return fbBuilder.offset;
  }
  int addClimbFuel(double? climbFuel) {
    fbBuilder.addFloat64(25, climbFuel);
    return fbBuilder.offset;
  }
  int addClimbTimeOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addHoldDownFuel(double? holdDownFuel) {
    fbBuilder.addFloat64(27, holdDownFuel);
    return fbBuilder.offset;
  }
  int addTocIceFuel(double? tocIceFuel) {
    fbBuilder.addFloat64(28, tocIceFuel);
    return fbBuilder.offset;
  }
  int addTocFuel(double? tocFuel) {
    fbBuilder.addFloat64(29, tocFuel);
    return fbBuilder.offset;
  }
  int addEnrouteFuel(double? enrouteFuel) {
    fbBuilder.addFloat64(30, enrouteFuel);
    return fbBuilder.offset;
  }
  int addEnrouteTimeOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addThunderAvoidFuel(double? thunderAvoidFuel) {
    fbBuilder.addFloat64(32, thunderAvoidFuel);
    return fbBuilder.offset;
  }
  int addTodIceFuel(double? todIceFuel) {
    fbBuilder.addFloat64(33, todIceFuel);
    return fbBuilder.offset;
  }
  int addOpConditionFuel(double? opConditionFuel) {
    fbBuilder.addFloat64(34, opConditionFuel);
    return fbBuilder.offset;
  }
  int addTodFuel(double? todFuel) {
    fbBuilder.addFloat64(35, todFuel);
    return fbBuilder.offset;
  }
  int addEarlyDescentFuel(double? earlyDescentFuel) {
    fbBuilder.addFloat64(36, earlyDescentFuel);
    return fbBuilder.offset;
  }
  int addArrIceFuel(double? arrIceFuel) {
    fbBuilder.addFloat64(37, arrIceFuel);
    return fbBuilder.offset;
  }
  int addHoldFuel(double? holdFuel) {
    fbBuilder.addFloat64(38, holdFuel);
    return fbBuilder.offset;
  }
  int addHoldTimeOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addAppLandingFuel(double? appLandingFuel) {
    fbBuilder.addFloat64(40, appLandingFuel);
    return fbBuilder.offset;
  }
  int addBurnedFuel(double? burnedFuel) {
    fbBuilder.addFloat64(41, burnedFuel);
    return fbBuilder.offset;
  }
  int addLandingFuel(double? landingFuel) {
    fbBuilder.addFloat64(42, landingFuel);
    return fbBuilder.offset;
  }
  int addMinDivertFuel(double? minDivertFuel) {
    fbBuilder.addFloat64(43, minDivertFuel);
    return fbBuilder.offset;
  }
  int addArrAlternate1Fuel(double? arrAlternate1Fuel) {
    fbBuilder.addFloat64(44, arrAlternate1Fuel);
    return fbBuilder.offset;
  }
  int addArrAlternate2Fuel(double? arrAlternate2Fuel) {
    fbBuilder.addFloat64(45, arrAlternate2Fuel);
    return fbBuilder.offset;
  }
  int addContingencyFuel(double? contingencyFuel) {
    fbBuilder.addFloat64(46, contingencyFuel);
    return fbBuilder.offset;
  }
  int addReserveFuel(double? reserveFuel) {
    fbBuilder.addFloat64(47, reserveFuel);
    return fbBuilder.offset;
  }
  int addDepressFuel(double? depressFuel) {
    fbBuilder.addFloat64(48, depressFuel);
    return fbBuilder.offset;
  }
  int addUnusableFuel(double? unusableFuel) {
    fbBuilder.addFloat64(49, unusableFuel);
    return fbBuilder.offset;
  }
  int addUnidentExtraFuel(double? unidentExtraFuel) {
    fbBuilder.addFloat64(50, unidentExtraFuel);
    return fbBuilder.offset;
  }
  int addIdentExtraFuel(double? identExtraFuel) {
    fbBuilder.addFloat64(51, identExtraFuel);
    return fbBuilder.offset;
  }
  int addRemAlternate1Fuel(double? remAlternate1Fuel) {
    fbBuilder.addFloat64(52, remAlternate1Fuel);
    return fbBuilder.offset;
  }
  int addRemAlternate2Fuel(double? remAlternate2Fuel) {
    fbBuilder.addFloat64(53, remAlternate2Fuel);
    return fbBuilder.offset;
  }
  int addEnduranceTimeOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addSidOffset(int? offset) {
    fbBuilder.addOffset(55, offset);
    return fbBuilder.offset;
  }
  int addStarOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addGpsRaimOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addDepRunwayOffset(int? offset) {
    fbBuilder.addOffset(58, offset);
    return fbBuilder.offset;
  }
  int addArrRunwayOffset(int? offset) {
    fbBuilder.addOffset(59, offset);
    return fbBuilder.offset;
  }
  int addRouteStringOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }
  int addCountryCodesOffset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addEtopsRatingOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addEtopsAirfieldsOffset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addEtopsAltAirfieldsOffset(int? offset) {
    fbBuilder.addOffset(64, offset);
    return fbBuilder.offset;
  }
  int addEtopsValWindowOffset(int? offset) {
    fbBuilder.addOffset(65, offset);
    return fbBuilder.offset;
  }
  int addPlannerRemarkOffset(int? offset) {
    fbBuilder.addOffset(66, offset);
    return fbBuilder.offset;
  }
  int addCargoRemarkOffset(int? offset) {
    fbBuilder.addOffset(67, offset);
    return fbBuilder.offset;
  }
  int addWindFac1(double? windFac1) {
    fbBuilder.addFloat64(68, windFac1);
    return fbBuilder.offset;
  }
  int addWindFac2(double? windFac2) {
    fbBuilder.addFloat64(69, windFac2);
    return fbBuilder.offset;
  }
  int addWindFacAvg(double? windFacAvg) {
    fbBuilder.addFloat64(70, windFacAvg);
    return fbBuilder.offset;
  }
  int addAvgTempDev(double? avgTempDev) {
    fbBuilder.addFloat64(71, avgTempDev);
    return fbBuilder.offset;
  }
  int addAtcAddressesOffset(int? offset) {
    fbBuilder.addOffset(72, offset);
    return fbBuilder.offset;
  }
  int addOriginatorOffset(int? offset) {
    fbBuilder.addOffset(73, offset);
    return fbBuilder.offset;
  }
  int addNumAircraft(int? numAircraft) {
    fbBuilder.addInt32(74, numAircraft);
    return fbBuilder.offset;
  }
  int addFlightRulesOffset(int? offset) {
    fbBuilder.addOffset(75, offset);
    return fbBuilder.offset;
  }
  int addFlightTypeOffset(int? offset) {
    fbBuilder.addOffset(76, offset);
    return fbBuilder.offset;
  }
  int addInitialCruiseSpeedOffset(int? offset) {
    fbBuilder.addOffset(77, offset);
    return fbBuilder.offset;
  }
  int addInitialFlightLevelOffset(int? offset) {
    fbBuilder.addOffset(78, offset);
    return fbBuilder.offset;
  }
  int addArrAlternate1Offset(int? offset) {
    fbBuilder.addOffset(79, offset);
    return fbBuilder.offset;
  }
  int addArrAlternate2Offset(int? offset) {
    fbBuilder.addOffset(80, offset);
    return fbBuilder.offset;
  }
  int addDepAlternateOffset(int? offset) {
    fbBuilder.addOffset(81, offset);
    return fbBuilder.offset;
  }
  int addWakeTurbCatOffset(int? offset) {
    fbBuilder.addOffset(82, offset);
    return fbBuilder.offset;
  }
  int addEquipmentOffset(int? offset) {
    fbBuilder.addOffset(83, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(84, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(85, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(86, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(87, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(88, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(89, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(90, offset);
    return fbBuilder.offset;
  }
  int addDataMode(FlightPlanAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(91, dataMode?.value);
    return fbBuilder.offset;
  }
  int addAirRefuelEventsOffset(int? offset) {
    fbBuilder.addOffset(92, offset);
    return fbBuilder.offset;
  }
  int addFlightPlanMessagesOffset(int? offset) {
    fbBuilder.addOffset(93, offset);
    return fbBuilder.offset;
  }
  int addFlightPlanWaypointsOffset(int? offset) {
    fbBuilder.addOffset(94, offset);
    return fbBuilder.offset;
  }
  int addFlightPlanPointGroupsOffset(int? offset) {
    fbBuilder.addOffset(95, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlightPlanAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _amcMissionId;
  final String? _idSortie;
  final String? _idAircraft;
  final int? _legNum;
  final String? _idDepAirfield;
  final String? _depAirfield;
  final String? _idArrAirfield;
  final String? _arrAirfield;
  final String? _externalId;
  final String? _genTs;
  final String? _aircraftMds;
  final String? _tailNumber;
  final String? _callSign;
  final String? _wxValidStart;
  final String? _wxValidEnd;
  final String? _estDepTime;
  final double? _dragIndex;
  final double? _fuelDegrade;
  final double? _opWeight;
  final double? _msnIndex;
  final double? _rampFuel;
  final double? _taxiFuel;
  final double? _takeoffFuel;
  final double? _climbFuel;
  final String? _climbTime;
  final double? _holdDownFuel;
  final double? _tocIceFuel;
  final double? _tocFuel;
  final double? _enrouteFuel;
  final String? _enrouteTime;
  final double? _thunderAvoidFuel;
  final double? _todIceFuel;
  final double? _opConditionFuel;
  final double? _todFuel;
  final double? _earlyDescentFuel;
  final double? _arrIceFuel;
  final double? _holdFuel;
  final String? _holdTime;
  final double? _appLandingFuel;
  final double? _burnedFuel;
  final double? _landingFuel;
  final double? _minDivertFuel;
  final double? _arrAlternate1Fuel;
  final double? _arrAlternate2Fuel;
  final double? _contingencyFuel;
  final double? _reserveFuel;
  final double? _depressFuel;
  final double? _unusableFuel;
  final double? _unidentExtraFuel;
  final double? _identExtraFuel;
  final double? _remAlternate1Fuel;
  final double? _remAlternate2Fuel;
  final String? _enduranceTime;
  final String? _sid;
  final String? _star;
  final String? _gpsRaim;
  final String? _depRunway;
  final String? _arrRunway;
  final String? _routeString;
  final List<String>? _countryCodes;
  final String? _etopsRating;
  final List<String>? _etopsAirfields;
  final List<String>? _etopsAltAirfields;
  final String? _etopsValWindow;
  final String? _plannerRemark;
  final String? _cargoRemark;
  final double? _windFac1;
  final double? _windFac2;
  final double? _windFacAvg;
  final double? _avgTempDev;
  final List<String>? _atcAddresses;
  final String? _originator;
  final int? _numAircraft;
  final String? _flightRules;
  final String? _flightType;
  final String? _initialCruiseSpeed;
  final String? _initialFlightLevel;
  final String? _arrAlternate1;
  final String? _arrAlternate2;
  final String? _depAlternate;
  final String? _wakeTurbCat;
  final String? _equipment;
  final String? _notes;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final FlightPlanAbridgedDataModeEnum? _dataMode;
  final List<String>? _airRefuelEvents;
  final List<String>? _flightPlanMessages;
  final List<String>? _flightPlanWaypoints;
  final List<String>? _flightPlanPointGroups;

  FlightPlanAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? amcMissionId,
    String? idSortie,
    String? idAircraft,
    int? legNum,
    String? idDepAirfield,
    String? depAirfield,
    String? idArrAirfield,
    String? arrAirfield,
    String? externalId,
    String? genTs,
    String? aircraftMds,
    String? tailNumber,
    String? callSign,
    String? wxValidStart,
    String? wxValidEnd,
    String? estDepTime,
    double? dragIndex,
    double? fuelDegrade,
    double? opWeight,
    double? msnIndex,
    double? rampFuel,
    double? taxiFuel,
    double? takeoffFuel,
    double? climbFuel,
    String? climbTime,
    double? holdDownFuel,
    double? tocIceFuel,
    double? tocFuel,
    double? enrouteFuel,
    String? enrouteTime,
    double? thunderAvoidFuel,
    double? todIceFuel,
    double? opConditionFuel,
    double? todFuel,
    double? earlyDescentFuel,
    double? arrIceFuel,
    double? holdFuel,
    String? holdTime,
    double? appLandingFuel,
    double? burnedFuel,
    double? landingFuel,
    double? minDivertFuel,
    double? arrAlternate1Fuel,
    double? arrAlternate2Fuel,
    double? contingencyFuel,
    double? reserveFuel,
    double? depressFuel,
    double? unusableFuel,
    double? unidentExtraFuel,
    double? identExtraFuel,
    double? remAlternate1Fuel,
    double? remAlternate2Fuel,
    String? enduranceTime,
    String? sid,
    String? star,
    String? gpsRaim,
    String? depRunway,
    String? arrRunway,
    String? routeString,
    List<String>? countryCodes,
    String? etopsRating,
    List<String>? etopsAirfields,
    List<String>? etopsAltAirfields,
    String? etopsValWindow,
    String? plannerRemark,
    String? cargoRemark,
    double? windFac1,
    double? windFac2,
    double? windFacAvg,
    double? avgTempDev,
    List<String>? atcAddresses,
    String? originator,
    int? numAircraft,
    String? flightRules,
    String? flightType,
    String? initialCruiseSpeed,
    String? initialFlightLevel,
    String? arrAlternate1,
    String? arrAlternate2,
    String? depAlternate,
    String? wakeTurbCat,
    String? equipment,
    String? notes,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    FlightPlanAbridgedDataModeEnum? dataMode,
    List<String>? airRefuelEvents,
    List<String>? flightPlanMessages,
    List<String>? flightPlanWaypoints,
    List<String>? flightPlanPointGroups,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _amcMissionId = amcMissionId,
        _idSortie = idSortie,
        _idAircraft = idAircraft,
        _legNum = legNum,
        _idDepAirfield = idDepAirfield,
        _depAirfield = depAirfield,
        _idArrAirfield = idArrAirfield,
        _arrAirfield = arrAirfield,
        _externalId = externalId,
        _genTs = genTs,
        _aircraftMds = aircraftMds,
        _tailNumber = tailNumber,
        _callSign = callSign,
        _wxValidStart = wxValidStart,
        _wxValidEnd = wxValidEnd,
        _estDepTime = estDepTime,
        _dragIndex = dragIndex,
        _fuelDegrade = fuelDegrade,
        _opWeight = opWeight,
        _msnIndex = msnIndex,
        _rampFuel = rampFuel,
        _taxiFuel = taxiFuel,
        _takeoffFuel = takeoffFuel,
        _climbFuel = climbFuel,
        _climbTime = climbTime,
        _holdDownFuel = holdDownFuel,
        _tocIceFuel = tocIceFuel,
        _tocFuel = tocFuel,
        _enrouteFuel = enrouteFuel,
        _enrouteTime = enrouteTime,
        _thunderAvoidFuel = thunderAvoidFuel,
        _todIceFuel = todIceFuel,
        _opConditionFuel = opConditionFuel,
        _todFuel = todFuel,
        _earlyDescentFuel = earlyDescentFuel,
        _arrIceFuel = arrIceFuel,
        _holdFuel = holdFuel,
        _holdTime = holdTime,
        _appLandingFuel = appLandingFuel,
        _burnedFuel = burnedFuel,
        _landingFuel = landingFuel,
        _minDivertFuel = minDivertFuel,
        _arrAlternate1Fuel = arrAlternate1Fuel,
        _arrAlternate2Fuel = arrAlternate2Fuel,
        _contingencyFuel = contingencyFuel,
        _reserveFuel = reserveFuel,
        _depressFuel = depressFuel,
        _unusableFuel = unusableFuel,
        _unidentExtraFuel = unidentExtraFuel,
        _identExtraFuel = identExtraFuel,
        _remAlternate1Fuel = remAlternate1Fuel,
        _remAlternate2Fuel = remAlternate2Fuel,
        _enduranceTime = enduranceTime,
        _sid = sid,
        _star = star,
        _gpsRaim = gpsRaim,
        _depRunway = depRunway,
        _arrRunway = arrRunway,
        _routeString = routeString,
        _countryCodes = countryCodes,
        _etopsRating = etopsRating,
        _etopsAirfields = etopsAirfields,
        _etopsAltAirfields = etopsAltAirfields,
        _etopsValWindow = etopsValWindow,
        _plannerRemark = plannerRemark,
        _cargoRemark = cargoRemark,
        _windFac1 = windFac1,
        _windFac2 = windFac2,
        _windFacAvg = windFacAvg,
        _avgTempDev = avgTempDev,
        _atcAddresses = atcAddresses,
        _originator = originator,
        _numAircraft = numAircraft,
        _flightRules = flightRules,
        _flightType = flightType,
        _initialCruiseSpeed = initialCruiseSpeed,
        _initialFlightLevel = initialFlightLevel,
        _arrAlternate1 = arrAlternate1,
        _arrAlternate2 = arrAlternate2,
        _depAlternate = depAlternate,
        _wakeTurbCat = wakeTurbCat,
        _equipment = equipment,
        _notes = notes,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _airRefuelEvents = airRefuelEvents,
        _flightPlanMessages = flightPlanMessages,
        _flightPlanWaypoints = flightPlanWaypoints,
        _flightPlanPointGroups = flightPlanPointGroups;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? amcMissionIdOffset = _amcMissionId == null ? null
        : fbBuilder.writeString(_amcMissionId!);
    final int? idSortieOffset = _idSortie == null ? null
        : fbBuilder.writeString(_idSortie!);
    final int? idAircraftOffset = _idAircraft == null ? null
        : fbBuilder.writeString(_idAircraft!);
    final int? idDepAirfieldOffset = _idDepAirfield == null ? null
        : fbBuilder.writeString(_idDepAirfield!);
    final int? depAirfieldOffset = _depAirfield == null ? null
        : fbBuilder.writeString(_depAirfield!);
    final int? idArrAirfieldOffset = _idArrAirfield == null ? null
        : fbBuilder.writeString(_idArrAirfield!);
    final int? arrAirfieldOffset = _arrAirfield == null ? null
        : fbBuilder.writeString(_arrAirfield!);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    final int? genTsOffset = _genTs == null ? null
        : fbBuilder.writeString(_genTs!);
    final int? aircraftMdsOffset = _aircraftMds == null ? null
        : fbBuilder.writeString(_aircraftMds!);
    final int? tailNumberOffset = _tailNumber == null ? null
        : fbBuilder.writeString(_tailNumber!);
    final int? callSignOffset = _callSign == null ? null
        : fbBuilder.writeString(_callSign!);
    final int? wxValidStartOffset = _wxValidStart == null ? null
        : fbBuilder.writeString(_wxValidStart!);
    final int? wxValidEndOffset = _wxValidEnd == null ? null
        : fbBuilder.writeString(_wxValidEnd!);
    final int? estDepTimeOffset = _estDepTime == null ? null
        : fbBuilder.writeString(_estDepTime!);
    final int? climbTimeOffset = _climbTime == null ? null
        : fbBuilder.writeString(_climbTime!);
    final int? enrouteTimeOffset = _enrouteTime == null ? null
        : fbBuilder.writeString(_enrouteTime!);
    final int? holdTimeOffset = _holdTime == null ? null
        : fbBuilder.writeString(_holdTime!);
    final int? enduranceTimeOffset = _enduranceTime == null ? null
        : fbBuilder.writeString(_enduranceTime!);
    final int? sidOffset = _sid == null ? null
        : fbBuilder.writeString(_sid!);
    final int? starOffset = _star == null ? null
        : fbBuilder.writeString(_star!);
    final int? gpsRaimOffset = _gpsRaim == null ? null
        : fbBuilder.writeString(_gpsRaim!);
    final int? depRunwayOffset = _depRunway == null ? null
        : fbBuilder.writeString(_depRunway!);
    final int? arrRunwayOffset = _arrRunway == null ? null
        : fbBuilder.writeString(_arrRunway!);
    final int? routeStringOffset = _routeString == null ? null
        : fbBuilder.writeString(_routeString!);
    final int? countryCodesOffset = _countryCodes == null ? null
        : fbBuilder.writeList(_countryCodes!.map(fbBuilder.writeString).toList());
    final int? etopsRatingOffset = _etopsRating == null ? null
        : fbBuilder.writeString(_etopsRating!);
    final int? etopsAirfieldsOffset = _etopsAirfields == null ? null
        : fbBuilder.writeList(_etopsAirfields!.map(fbBuilder.writeString).toList());
    final int? etopsAltAirfieldsOffset = _etopsAltAirfields == null ? null
        : fbBuilder.writeList(_etopsAltAirfields!.map(fbBuilder.writeString).toList());
    final int? etopsValWindowOffset = _etopsValWindow == null ? null
        : fbBuilder.writeString(_etopsValWindow!);
    final int? plannerRemarkOffset = _plannerRemark == null ? null
        : fbBuilder.writeString(_plannerRemark!);
    final int? cargoRemarkOffset = _cargoRemark == null ? null
        : fbBuilder.writeString(_cargoRemark!);
    final int? atcAddressesOffset = _atcAddresses == null ? null
        : fbBuilder.writeList(_atcAddresses!.map(fbBuilder.writeString).toList());
    final int? originatorOffset = _originator == null ? null
        : fbBuilder.writeString(_originator!);
    final int? flightRulesOffset = _flightRules == null ? null
        : fbBuilder.writeString(_flightRules!);
    final int? flightTypeOffset = _flightType == null ? null
        : fbBuilder.writeString(_flightType!);
    final int? initialCruiseSpeedOffset = _initialCruiseSpeed == null ? null
        : fbBuilder.writeString(_initialCruiseSpeed!);
    final int? initialFlightLevelOffset = _initialFlightLevel == null ? null
        : fbBuilder.writeString(_initialFlightLevel!);
    final int? arrAlternate1Offset = _arrAlternate1 == null ? null
        : fbBuilder.writeString(_arrAlternate1!);
    final int? arrAlternate2Offset = _arrAlternate2 == null ? null
        : fbBuilder.writeString(_arrAlternate2!);
    final int? depAlternateOffset = _depAlternate == null ? null
        : fbBuilder.writeString(_depAlternate!);
    final int? wakeTurbCatOffset = _wakeTurbCat == null ? null
        : fbBuilder.writeString(_wakeTurbCat!);
    final int? equipmentOffset = _equipment == null ? null
        : fbBuilder.writeString(_equipment!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? airRefuelEventsOffset = _airRefuelEvents == null ? null
        : fbBuilder.writeList(_airRefuelEvents!.map(fbBuilder.writeString).toList());
    final int? flightPlanMessagesOffset = _flightPlanMessages == null ? null
        : fbBuilder.writeList(_flightPlanMessages!.map(fbBuilder.writeString).toList());
    final int? flightPlanWaypointsOffset = _flightPlanWaypoints == null ? null
        : fbBuilder.writeList(_flightPlanWaypoints!.map(fbBuilder.writeString).toList());
    final int? flightPlanPointGroupsOffset = _flightPlanPointGroups == null ? null
        : fbBuilder.writeList(_flightPlanPointGroups!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(96);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, amcMissionIdOffset);
    fbBuilder.addOffset(3, idSortieOffset);
    fbBuilder.addOffset(4, idAircraftOffset);
    fbBuilder.addInt32(5, _legNum);
    fbBuilder.addOffset(6, idDepAirfieldOffset);
    fbBuilder.addOffset(7, depAirfieldOffset);
    fbBuilder.addOffset(8, idArrAirfieldOffset);
    fbBuilder.addOffset(9, arrAirfieldOffset);
    fbBuilder.addOffset(10, externalIdOffset);
    fbBuilder.addOffset(11, genTsOffset);
    fbBuilder.addOffset(12, aircraftMdsOffset);
    fbBuilder.addOffset(13, tailNumberOffset);
    fbBuilder.addOffset(14, callSignOffset);
    fbBuilder.addOffset(15, wxValidStartOffset);
    fbBuilder.addOffset(16, wxValidEndOffset);
    fbBuilder.addOffset(17, estDepTimeOffset);
    fbBuilder.addFloat64(18, _dragIndex);
    fbBuilder.addFloat64(19, _fuelDegrade);
    fbBuilder.addFloat64(20, _opWeight);
    fbBuilder.addFloat64(21, _msnIndex);
    fbBuilder.addFloat64(22, _rampFuel);
    fbBuilder.addFloat64(23, _taxiFuel);
    fbBuilder.addFloat64(24, _takeoffFuel);
    fbBuilder.addFloat64(25, _climbFuel);
    fbBuilder.addOffset(26, climbTimeOffset);
    fbBuilder.addFloat64(27, _holdDownFuel);
    fbBuilder.addFloat64(28, _tocIceFuel);
    fbBuilder.addFloat64(29, _tocFuel);
    fbBuilder.addFloat64(30, _enrouteFuel);
    fbBuilder.addOffset(31, enrouteTimeOffset);
    fbBuilder.addFloat64(32, _thunderAvoidFuel);
    fbBuilder.addFloat64(33, _todIceFuel);
    fbBuilder.addFloat64(34, _opConditionFuel);
    fbBuilder.addFloat64(35, _todFuel);
    fbBuilder.addFloat64(36, _earlyDescentFuel);
    fbBuilder.addFloat64(37, _arrIceFuel);
    fbBuilder.addFloat64(38, _holdFuel);
    fbBuilder.addOffset(39, holdTimeOffset);
    fbBuilder.addFloat64(40, _appLandingFuel);
    fbBuilder.addFloat64(41, _burnedFuel);
    fbBuilder.addFloat64(42, _landingFuel);
    fbBuilder.addFloat64(43, _minDivertFuel);
    fbBuilder.addFloat64(44, _arrAlternate1Fuel);
    fbBuilder.addFloat64(45, _arrAlternate2Fuel);
    fbBuilder.addFloat64(46, _contingencyFuel);
    fbBuilder.addFloat64(47, _reserveFuel);
    fbBuilder.addFloat64(48, _depressFuel);
    fbBuilder.addFloat64(49, _unusableFuel);
    fbBuilder.addFloat64(50, _unidentExtraFuel);
    fbBuilder.addFloat64(51, _identExtraFuel);
    fbBuilder.addFloat64(52, _remAlternate1Fuel);
    fbBuilder.addFloat64(53, _remAlternate2Fuel);
    fbBuilder.addOffset(54, enduranceTimeOffset);
    fbBuilder.addOffset(55, sidOffset);
    fbBuilder.addOffset(56, starOffset);
    fbBuilder.addOffset(57, gpsRaimOffset);
    fbBuilder.addOffset(58, depRunwayOffset);
    fbBuilder.addOffset(59, arrRunwayOffset);
    fbBuilder.addOffset(60, routeStringOffset);
    fbBuilder.addOffset(61, countryCodesOffset);
    fbBuilder.addOffset(62, etopsRatingOffset);
    fbBuilder.addOffset(63, etopsAirfieldsOffset);
    fbBuilder.addOffset(64, etopsAltAirfieldsOffset);
    fbBuilder.addOffset(65, etopsValWindowOffset);
    fbBuilder.addOffset(66, plannerRemarkOffset);
    fbBuilder.addOffset(67, cargoRemarkOffset);
    fbBuilder.addFloat64(68, _windFac1);
    fbBuilder.addFloat64(69, _windFac2);
    fbBuilder.addFloat64(70, _windFacAvg);
    fbBuilder.addFloat64(71, _avgTempDev);
    fbBuilder.addOffset(72, atcAddressesOffset);
    fbBuilder.addOffset(73, originatorOffset);
    fbBuilder.addInt32(74, _numAircraft);
    fbBuilder.addOffset(75, flightRulesOffset);
    fbBuilder.addOffset(76, flightTypeOffset);
    fbBuilder.addOffset(77, initialCruiseSpeedOffset);
    fbBuilder.addOffset(78, initialFlightLevelOffset);
    fbBuilder.addOffset(79, arrAlternate1Offset);
    fbBuilder.addOffset(80, arrAlternate2Offset);
    fbBuilder.addOffset(81, depAlternateOffset);
    fbBuilder.addOffset(82, wakeTurbCatOffset);
    fbBuilder.addOffset(83, equipmentOffset);
    fbBuilder.addOffset(84, notesOffset);
    fbBuilder.addOffset(85, createdAtOffset);
    fbBuilder.addOffset(86, createdByOffset);
    fbBuilder.addOffset(87, sourceDlOffset);
    fbBuilder.addOffset(88, sourceOffset);
    fbBuilder.addOffset(89, originOffset);
    fbBuilder.addOffset(90, origNetworkOffset);
    fbBuilder.addInt8(91, _dataMode?.value);
    fbBuilder.addOffset(92, airRefuelEventsOffset);
    fbBuilder.addOffset(93, flightPlanMessagesOffset);
    fbBuilder.addOffset(94, flightPlanWaypointsOffset);
    fbBuilder.addOffset(95, flightPlanPointGroupsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
