// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class ItemAbridgedDataModeEnum {
  final int value;
  const ItemAbridgedDataModeEnum._(this.value);

  factory ItemAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ItemAbridgedDataModeEnum');
    }
    return result;
  }

  static ItemAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : ItemAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const ItemAbridgedDataModeEnum REAL = ItemAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const ItemAbridgedDataModeEnum TEST = ItemAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const ItemAbridgedDataModeEnum SIMULATED = ItemAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const ItemAbridgedDataModeEnum EXERCISE = ItemAbridgedDataModeEnum._(3);
  static const Map<int, ItemAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<ItemAbridgedDataModeEnum> reader = _ItemAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'ItemAbridgedDataModeEnum{value: $value}';
  }
}

class _ItemAbridgedDataModeEnumReader extends fb.Reader<ItemAbridgedDataModeEnum> {
  const _ItemAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  ItemAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      ItemAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// No description available.
class ItemAbridged {
  ItemAbridged._(this._bc, this._bcOffset);
  factory ItemAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ItemAbridged> reader = _ItemAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The UDL ID of the air load plan this item is associated with.
  ///  Example: /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idAirLoadPlan => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
  ///  Example: /// Example: 12345ABCD
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get scanCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
  ///  Example: /// Example: bID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get scGenTool => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
  ///  Example: /// Example: CARGO
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
  ///  Example: /// Example: PALLET
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get cargoType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Name of the item. Applicable for equipment and cargo item types only.
  ///  Example: /// Example: Product Name
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
  ///  Example: /// Example: RMS
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get destination => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The departure code or location where this item has left or is leaving.
  ///  Example: /// Example: CHS
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get departure => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The name of the unit receiving this item.
  ///  Example: /// Example: 50 SBN
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get receivingUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The military branch receiving this item.
  ///  Example: /// Example: Air Force
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get receivingBranch => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  ///  Example: /// Example: 2023-03-13
  ///  Constraints: No constraints specified.
  String? get lastArrDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The unit line number of this item.
  ///  Example: /// Example: T01ME01
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get uln => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Weight of the item in kilograms (if item is a passenger, include on-person bags).
  ///  Example: /// Example: 5443.335
  ///  Constraints: No constraints specified.
  double get weight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-03-13T16:06:00.123Z
  ///  Constraints: No constraints specified.
  String? get weightTs => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The classification code of the commodity or group of commodities.
  ///  Example: /// Example: 2304116
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get commodityCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
  ///  Example: /// Example: STCC
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get commoditySys => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The code denoting the type of material item.
  ///  Example: /// Example: 530500234
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get productCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
  ///  Example: /// Example: NSN
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get productSys => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Width of the cargo in meters. Applicable for cargo item types only.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get width => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Length of the cargo in meters. Applicable for cargo item types only.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get length => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Height of the cargo in meters. Applicable for cargo item types only.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get height => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  The volume of the item, in cubic meters. Applicable for cargo item types only.
  ///  Example: /// Example: 7.8902
  ///  Constraints: No constraints specified.
  double get volume => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Center of gravity position of the item, measured from the item's front datum, in centimeters.
  ///  Example: /// Example: 112.014
  ///  Constraints: No constraints specified.
  double get cg => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
  ///  Example: /// Example: 412.1
  ///  Constraints: No constraints specified.
  double get fs => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
  ///  Example: /// Example: 3.1
  ///  Constraints: No constraints specified.
  double get centerlineOffset => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
  ///  Example: /// Example: 4000.1
  ///  Constraints: No constraints specified.
  double get moment => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get airdrop => const fb.BoolReader().vTableGet(_bc, _bcOffset, 60, false);
  ///  Transportation Control Number of the cargo. Applicable for cargo item types only.
  ///  Example: /// Example: M1358232245912XXX
  ///  Constraints: Minimum length = 0, Maximum length = 17
  String? get tcn => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Array of UN hazard classes or division codes that apply to this item.
  ///  Example: /// Example: [1.1, 1.2]
  ///  Constraints: No constraints specified.
  List<String>? get hazCodes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 64);
  ///  Net explosive weight of the item, in kilograms.
  ///  Example: /// Example: 51.437
  ///  Constraints: No constraints specified.
  double get netExpWt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Flag indicating this item acts as a container and contains additional items.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get container => const fb.BoolReader().vTableGet(_bc, _bcOffset, 68, false);
  ///  Array of tracking identifiers that are contained within this item.
  ///  Example: /// Example: ['2UJ8843K', '745YV1T65']
  ///  Constraints: No constraints specified.
  List<String>? get itemContains => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 70);
  ///  Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get numPalletPos => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 72, 0);
  ///  United States Distinguished Visitor Code, only applicable to people.
  ///  Example: /// Example: DV-2
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get dvCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Optional notes or comments about this item.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
  ///  Example: /// Example: ['key1', 'key2']
  ///  Constraints: No constraints specified.
  List<String>? get keys => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 78);
  ///  Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  ///  Example: /// Example: ['value1', 'value2']
  ///  Constraints: No constraints specified.
  List<String>? get values => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 80);
  ///  Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
  ///  Example: /// Example: Alt Data Format
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get altDataFormat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
  ///  Example: /// Example: Accepting System
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get accSystem => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Additional data required to find this item in the accepting system.
  ///  Example: /// Example: Accepting System Notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get accSysNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
  ///  Example: /// Example: ['System key1', 'System key2']
  ///  Constraints: No constraints specified.
  List<String>? get accSysKeys => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 88);
  ///  Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
  ///  Example: /// Example: ['System value1', 'System value2']
  ///  Constraints: No constraints specified.
  List<String>? get accSysValues => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 90);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2023-03-21T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  ItemAbridgedDataModeEnum get dataMode => ItemAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 104, 0));

  @override
  String toString() {
    return 'ItemAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idAirLoadPlan: ${idAirLoadPlan}, scanCode: ${scanCode}, scGenTool: ${scGenTool}, type: ${type}, cargoType: ${cargoType}, name: ${name}, destination: ${destination}, departure: ${departure}, receivingUnit: ${receivingUnit}, receivingBranch: ${receivingBranch}, lastArrDate: ${lastArrDate}, uln: ${uln}, weight: ${weight}, weightTs: ${weightTs}, commodityCode: ${commodityCode}, commoditySys: ${commoditySys}, productCode: ${productCode}, productSys: ${productSys}, width: ${width}, length: ${length}, height: ${height}, volume: ${volume}, cg: ${cg}, fs: ${fs}, centerlineOffset: ${centerlineOffset}, moment: ${moment}, airdrop: ${airdrop}, tcn: ${tcn}, hazCodes: ${hazCodes}, netExpWt: ${netExpWt}, container: ${container}, itemContains: ${itemContains}, numPalletPos: ${numPalletPos}, dvCode: ${dvCode}, notes: ${notes}, keys: ${keys}, values: ${values}, altDataFormat: ${altDataFormat}, accSystem: ${accSystem}, accSysNotes: ${accSysNotes}, accSysKeys: ${accSysKeys}, accSysValues: ${accSysValues}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _ItemAbridgedReader extends fb.TableReader<ItemAbridged> {
  const _ItemAbridgedReader();

  @override
  ItemAbridged createObject(fb.BufferContext bc, int offset) => 
    ItemAbridged._(bc, offset);
}

class ItemAbridgedBuilder {
  ItemAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(51);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdAirLoadPlanOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addScanCodeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addScGenToolOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addCargoTypeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addDestinationOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addDepartureOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addReceivingUnitOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addReceivingBranchOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addLastArrDateOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addUlnOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addWeight(double? weight) {
    fbBuilder.addFloat64(14, weight);
    return fbBuilder.offset;
  }
  int addWeightTsOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addCommodityCodeOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addCommoditySysOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addProductCodeOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addProductSysOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addWidth(double? width) {
    fbBuilder.addFloat64(20, width);
    return fbBuilder.offset;
  }
  int addLength(double? length) {
    fbBuilder.addFloat64(21, length);
    return fbBuilder.offset;
  }
  int addHeight(double? height) {
    fbBuilder.addFloat64(22, height);
    return fbBuilder.offset;
  }
  int addVolume(double? volume) {
    fbBuilder.addFloat64(23, volume);
    return fbBuilder.offset;
  }
  int addCg(double? cg) {
    fbBuilder.addFloat64(24, cg);
    return fbBuilder.offset;
  }
  int addFs(double? fs) {
    fbBuilder.addFloat64(25, fs);
    return fbBuilder.offset;
  }
  int addCenterlineOffset(double? centerlineOffset) {
    fbBuilder.addFloat64(26, centerlineOffset);
    return fbBuilder.offset;
  }
  int addMoment(double? moment) {
    fbBuilder.addFloat64(27, moment);
    return fbBuilder.offset;
  }
  int addAirdrop(bool? airdrop) {
    fbBuilder.addBool(28, airdrop);
    return fbBuilder.offset;
  }
  int addTcnOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addHazCodesOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addNetExpWt(double? netExpWt) {
    fbBuilder.addFloat64(31, netExpWt);
    return fbBuilder.offset;
  }
  int addContainer(bool? container) {
    fbBuilder.addBool(32, container);
    return fbBuilder.offset;
  }
  int addItemContainsOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addNumPalletPos(int? numPalletPos) {
    fbBuilder.addInt32(34, numPalletPos);
    return fbBuilder.offset;
  }
  int addDvCodeOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addKeysOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addAltDataFormatOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addAccSystemOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addAccSysNotesOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addAccSysKeysOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addAccSysValuesOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addDataMode(ItemAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(50, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ItemAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idAirLoadPlan;
  final String? _scanCode;
  final String? _scGenTool;
  final String? _type;
  final String? _cargoType;
  final String? _name;
  final String? _destination;
  final String? _departure;
  final String? _receivingUnit;
  final String? _receivingBranch;
  final String? _lastArrDate;
  final String? _uln;
  final double? _weight;
  final String? _weightTs;
  final String? _commodityCode;
  final String? _commoditySys;
  final String? _productCode;
  final String? _productSys;
  final double? _width;
  final double? _length;
  final double? _height;
  final double? _volume;
  final double? _cg;
  final double? _fs;
  final double? _centerlineOffset;
  final double? _moment;
  final bool? _airdrop;
  final String? _tcn;
  final List<String>? _hazCodes;
  final double? _netExpWt;
  final bool? _container;
  final List<String>? _itemContains;
  final int? _numPalletPos;
  final String? _dvCode;
  final String? _notes;
  final List<String>? _keys;
  final List<String>? _values;
  final String? _altDataFormat;
  final String? _accSystem;
  final String? _accSysNotes;
  final List<String>? _accSysKeys;
  final List<String>? _accSysValues;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final ItemAbridgedDataModeEnum? _dataMode;

  ItemAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idAirLoadPlan,
    String? scanCode,
    String? scGenTool,
    String? type,
    String? cargoType,
    String? name,
    String? destination,
    String? departure,
    String? receivingUnit,
    String? receivingBranch,
    String? lastArrDate,
    String? uln,
    double? weight,
    String? weightTs,
    String? commodityCode,
    String? commoditySys,
    String? productCode,
    String? productSys,
    double? width,
    double? length,
    double? height,
    double? volume,
    double? cg,
    double? fs,
    double? centerlineOffset,
    double? moment,
    bool? airdrop,
    String? tcn,
    List<String>? hazCodes,
    double? netExpWt,
    bool? container,
    List<String>? itemContains,
    int? numPalletPos,
    String? dvCode,
    String? notes,
    List<String>? keys,
    List<String>? values,
    String? altDataFormat,
    String? accSystem,
    String? accSysNotes,
    List<String>? accSysKeys,
    List<String>? accSysValues,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    ItemAbridgedDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idAirLoadPlan = idAirLoadPlan,
        _scanCode = scanCode,
        _scGenTool = scGenTool,
        _type = type,
        _cargoType = cargoType,
        _name = name,
        _destination = destination,
        _departure = departure,
        _receivingUnit = receivingUnit,
        _receivingBranch = receivingBranch,
        _lastArrDate = lastArrDate,
        _uln = uln,
        _weight = weight,
        _weightTs = weightTs,
        _commodityCode = commodityCode,
        _commoditySys = commoditySys,
        _productCode = productCode,
        _productSys = productSys,
        _width = width,
        _length = length,
        _height = height,
        _volume = volume,
        _cg = cg,
        _fs = fs,
        _centerlineOffset = centerlineOffset,
        _moment = moment,
        _airdrop = airdrop,
        _tcn = tcn,
        _hazCodes = hazCodes,
        _netExpWt = netExpWt,
        _container = container,
        _itemContains = itemContains,
        _numPalletPos = numPalletPos,
        _dvCode = dvCode,
        _notes = notes,
        _keys = keys,
        _values = values,
        _altDataFormat = altDataFormat,
        _accSystem = accSystem,
        _accSysNotes = accSysNotes,
        _accSysKeys = accSysKeys,
        _accSysValues = accSysValues,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idAirLoadPlanOffset = _idAirLoadPlan == null ? null
        : fbBuilder.writeString(_idAirLoadPlan!);
    final int? scanCodeOffset = _scanCode == null ? null
        : fbBuilder.writeString(_scanCode!);
    final int? scGenToolOffset = _scGenTool == null ? null
        : fbBuilder.writeString(_scGenTool!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? cargoTypeOffset = _cargoType == null ? null
        : fbBuilder.writeString(_cargoType!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? destinationOffset = _destination == null ? null
        : fbBuilder.writeString(_destination!);
    final int? departureOffset = _departure == null ? null
        : fbBuilder.writeString(_departure!);
    final int? receivingUnitOffset = _receivingUnit == null ? null
        : fbBuilder.writeString(_receivingUnit!);
    final int? receivingBranchOffset = _receivingBranch == null ? null
        : fbBuilder.writeString(_receivingBranch!);
    final int? lastArrDateOffset = _lastArrDate == null ? null
        : fbBuilder.writeString(_lastArrDate!);
    final int? ulnOffset = _uln == null ? null
        : fbBuilder.writeString(_uln!);
    final int? weightTsOffset = _weightTs == null ? null
        : fbBuilder.writeString(_weightTs!);
    final int? commodityCodeOffset = _commodityCode == null ? null
        : fbBuilder.writeString(_commodityCode!);
    final int? commoditySysOffset = _commoditySys == null ? null
        : fbBuilder.writeString(_commoditySys!);
    final int? productCodeOffset = _productCode == null ? null
        : fbBuilder.writeString(_productCode!);
    final int? productSysOffset = _productSys == null ? null
        : fbBuilder.writeString(_productSys!);
    final int? tcnOffset = _tcn == null ? null
        : fbBuilder.writeString(_tcn!);
    final int? hazCodesOffset = _hazCodes == null ? null
        : fbBuilder.writeList(_hazCodes!.map(fbBuilder.writeString).toList());
    final int? itemContainsOffset = _itemContains == null ? null
        : fbBuilder.writeList(_itemContains!.map(fbBuilder.writeString).toList());
    final int? dvCodeOffset = _dvCode == null ? null
        : fbBuilder.writeString(_dvCode!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? keysOffset = _keys == null ? null
        : fbBuilder.writeList(_keys!.map(fbBuilder.writeString).toList());
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map(fbBuilder.writeString).toList());
    final int? altDataFormatOffset = _altDataFormat == null ? null
        : fbBuilder.writeString(_altDataFormat!);
    final int? accSystemOffset = _accSystem == null ? null
        : fbBuilder.writeString(_accSystem!);
    final int? accSysNotesOffset = _accSysNotes == null ? null
        : fbBuilder.writeString(_accSysNotes!);
    final int? accSysKeysOffset = _accSysKeys == null ? null
        : fbBuilder.writeList(_accSysKeys!.map(fbBuilder.writeString).toList());
    final int? accSysValuesOffset = _accSysValues == null ? null
        : fbBuilder.writeList(_accSysValues!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(51);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idAirLoadPlanOffset);
    fbBuilder.addOffset(3, scanCodeOffset);
    fbBuilder.addOffset(4, scGenToolOffset);
    fbBuilder.addOffset(5, typeOffset);
    fbBuilder.addOffset(6, cargoTypeOffset);
    fbBuilder.addOffset(7, nameOffset);
    fbBuilder.addOffset(8, destinationOffset);
    fbBuilder.addOffset(9, departureOffset);
    fbBuilder.addOffset(10, receivingUnitOffset);
    fbBuilder.addOffset(11, receivingBranchOffset);
    fbBuilder.addOffset(12, lastArrDateOffset);
    fbBuilder.addOffset(13, ulnOffset);
    fbBuilder.addFloat64(14, _weight);
    fbBuilder.addOffset(15, weightTsOffset);
    fbBuilder.addOffset(16, commodityCodeOffset);
    fbBuilder.addOffset(17, commoditySysOffset);
    fbBuilder.addOffset(18, productCodeOffset);
    fbBuilder.addOffset(19, productSysOffset);
    fbBuilder.addFloat64(20, _width);
    fbBuilder.addFloat64(21, _length);
    fbBuilder.addFloat64(22, _height);
    fbBuilder.addFloat64(23, _volume);
    fbBuilder.addFloat64(24, _cg);
    fbBuilder.addFloat64(25, _fs);
    fbBuilder.addFloat64(26, _centerlineOffset);
    fbBuilder.addFloat64(27, _moment);
    fbBuilder.addBool(28, _airdrop);
    fbBuilder.addOffset(29, tcnOffset);
    fbBuilder.addOffset(30, hazCodesOffset);
    fbBuilder.addFloat64(31, _netExpWt);
    fbBuilder.addBool(32, _container);
    fbBuilder.addOffset(33, itemContainsOffset);
    fbBuilder.addInt32(34, _numPalletPos);
    fbBuilder.addOffset(35, dvCodeOffset);
    fbBuilder.addOffset(36, notesOffset);
    fbBuilder.addOffset(37, keysOffset);
    fbBuilder.addOffset(38, valuesOffset);
    fbBuilder.addOffset(39, altDataFormatOffset);
    fbBuilder.addOffset(40, accSystemOffset);
    fbBuilder.addOffset(41, accSysNotesOffset);
    fbBuilder.addOffset(42, accSysKeysOffset);
    fbBuilder.addOffset(43, accSysValuesOffset);
    fbBuilder.addOffset(44, createdAtOffset);
    fbBuilder.addOffset(45, createdByOffset);
    fbBuilder.addOffset(46, sourceDlOffset);
    fbBuilder.addOffset(47, sourceOffset);
    fbBuilder.addOffset(48, originOffset);
    fbBuilder.addOffset(49, origNetworkOffset);
    fbBuilder.addInt8(50, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
