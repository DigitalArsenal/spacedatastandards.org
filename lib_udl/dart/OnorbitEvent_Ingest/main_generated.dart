// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class OnorbitEventIngestDataModeEnum {
  final int value;
  const OnorbitEventIngestDataModeEnum._(this.value);

  factory OnorbitEventIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OnorbitEventIngestDataModeEnum');
    }
    return result;
  }

  static OnorbitEventIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : OnorbitEventIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const OnorbitEventIngestDataModeEnum REAL = OnorbitEventIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const OnorbitEventIngestDataModeEnum TEST = OnorbitEventIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const OnorbitEventIngestDataModeEnum SIMULATED = OnorbitEventIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const OnorbitEventIngestDataModeEnum EXERCISE = OnorbitEventIngestDataModeEnum._(3);
  static const Map<int, OnorbitEventIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<OnorbitEventIngestDataModeEnum> reader = _OnorbitEventIngestDataModeEnumReader();

  @override
  String toString() {
    return 'OnorbitEventIngestDataModeEnum{value: $value}';
  }
}

class _OnorbitEventIngestDataModeEnumReader extends fb.Reader<OnorbitEventIngestDataModeEnum> {
  const _OnorbitEventIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  OnorbitEventIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      OnorbitEventIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// No description available.
class OnorbitEventIngest {
  OnorbitEventIngest._(this._bc, this._bcOffset);
  factory OnorbitEventIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OnorbitEventIngest> reader = _OnorbitEventIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ONORBITEVENT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The sources or SCG references from which the classification of this data is derived.
  ///  Example: /// Example: DERIVED_SOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get derivedFrom => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The declassification date of this data, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:02:02.123Z
  ///  Constraints: No constraints specified.
  String? get declassificationDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Declassification string of this data.
  ///  Example: /// Example: DECLASS_STRING
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get declassificationString => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the on-orbit object for this event.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get eventTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Notes/remarks on the validity/accuracy of the eventTime.
  ///  Example: /// Example: Notes on validity
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get eventTimeNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Organization ID of the operator of the on-orbit spacecraft at the time of the event.
  ///  Example: /// Example: OPERATORORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get operatorOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Organization ID of the owner of the on-orbit spacecraft at the time of the event.
  ///  Example: /// Example: OWNERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get ownerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Unique identifier of the organization which leases this on-orbit spacecraft.
  ///  Example: /// Example: LESSEEORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get lesseeOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
  ///  Example: /// Example: OPERATEDONBEHALFOFORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get operatedOnBehalfOfOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  GEO position longitude at event time if applicable. Negative values are west.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get geoPosition => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  GEO plane slot of the spacecraft at event time.
  ///  Example: /// Example: example_slot
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get planeSlot => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  GEO slot plane number/designator of the spacecraft at event time.
  ///  Example: /// Example: PL_1
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get planeNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
  ///  Example: /// Example: Stable
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get positionStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Maximum validity time of the event.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get untilTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Date time of official loss of the spacecraft.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get officialLossDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Net amount of the insurance claim for the event, in USD.
  ///  Example: /// Example: 10000.23
  ///  Constraints: No constraints specified.
  double get netAmount => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Underlying cause of the event.
  ///  Example: /// Example: CAUSE_EXAMPLE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get underlyingCause => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Spacecraft capability loss incurred, as a fraction of 1.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get capabilityLoss => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Spacecraft capacity loss incurred, as a fraction of 1.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get capacityLoss => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Insurance loss incurred, as a fraction of 1.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get insuranceLoss => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Insurance loss incurred by 3rd party insurance, in USD.
  ///  Example: /// Example: 10000.23
  ///  Constraints: No constraints specified.
  double get thirdPartyInsuranceLoss => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Number of humans injured in the event.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get injured => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  Number of humans killed in the event.
  ///  Example: /// Example: 23
  ///  Constraints: No constraints specified.
  int get killed => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 58, 0);
  ///  Spacecraft life lost due to the event as a percent/fraction of 1.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get lifeLost => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Spacecraft age at the event in years.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  double get ageAtEvent => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Achieved phase of flight prior to the event.
  ///  Example: /// Example: Phase 2
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get achievedFlightPhase => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Phase of flight during which the event occurred.
  ///  Example: /// Example: Phase 2
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get occurrenceFlightPhase => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Faulty stage of flight for the event.
  ///  Example: /// Example: Phase 2
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get stageAtFault => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Equipment on the spacecraft which caused the event.
  ///  Example: /// Example: Example Equipment
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get equipmentAtFault => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Type of the equipment on the spacecraft which caused the event.
  ///  Example: /// Example: Example Equipment
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get equipmentTypeAtFault => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Specific part of the equipment on the spacecraft which caused the event.
  ///  Example: /// Example: Example Equipment
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get equipmentPartAtFault => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
  ///  Example: /// Example: Example Equipment
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get consequentialEquipmentFailure => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Boolean indicating if the spacecraft is inclined.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get inclined => const fb.BoolReader().vTableGet(_bc, _bcOffset, 78, false);
  ///  Notes/description of the event.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Additional remarks on the event description.
  ///  Example: /// Example: Example remarks
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get remarks => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Additional insurance notes if the event is an official loss.
  ///  Example: /// Example: Insurance notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get insuranceLossNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Notes on capability loss at the time of event.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get capabilityLossNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Additional insurance notes on coverages at the time of event.
  ///  Example: /// Example: Insurance notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get insuranceCarriedNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Additional notes on the equipment causing the event/loss.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get equipmentCausingLossNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  The type of on-orbit event being reported.
  ///  Example: /// Example: Type1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get eventType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  The result of the reported event.
  ///  Example: /// Example: Example results
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get eventResult => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  The status of the on-orbit object.
  ///  Example: /// Example: Status1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get objectStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Description of the satellite orbital position or regime.
  ///  Example: /// Example: Example description
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get satellitePosition => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  OnorbitEventIngestDataModeEnum get dataMode => OnorbitEventIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 104, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);

  @override
  String toString() {
    return 'OnorbitEventIngest{id: ${id}, classificationMarking: ${classificationMarking}, derivedFrom: ${derivedFrom}, declassificationDate: ${declassificationDate}, declassificationString: ${declassificationString}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, eventTime: ${eventTime}, eventTimeNotes: ${eventTimeNotes}, operatorOrgId: ${operatorOrgId}, ownerOrgId: ${ownerOrgId}, lesseeOrgId: ${lesseeOrgId}, operatedOnBehalfOfOrgId: ${operatedOnBehalfOfOrgId}, geoPosition: ${geoPosition}, planeSlot: ${planeSlot}, planeNumber: ${planeNumber}, positionStatus: ${positionStatus}, untilTime: ${untilTime}, officialLossDate: ${officialLossDate}, netAmount: ${netAmount}, underlyingCause: ${underlyingCause}, capabilityLoss: ${capabilityLoss}, capacityLoss: ${capacityLoss}, insuranceLoss: ${insuranceLoss}, thirdPartyInsuranceLoss: ${thirdPartyInsuranceLoss}, injured: ${injured}, killed: ${killed}, lifeLost: ${lifeLost}, ageAtEvent: ${ageAtEvent}, achievedFlightPhase: ${achievedFlightPhase}, occurrenceFlightPhase: ${occurrenceFlightPhase}, stageAtFault: ${stageAtFault}, equipmentAtFault: ${equipmentAtFault}, equipmentTypeAtFault: ${equipmentTypeAtFault}, equipmentPartAtFault: ${equipmentPartAtFault}, consequentialEquipmentFailure: ${consequentialEquipmentFailure}, inclined: ${inclined}, description: ${description}, remarks: ${remarks}, insuranceLossNotes: ${insuranceLossNotes}, capabilityLossNotes: ${capabilityLossNotes}, insuranceCarriedNotes: ${insuranceCarriedNotes}, equipmentCausingLossNotes: ${equipmentCausingLossNotes}, eventType: ${eventType}, eventResult: ${eventResult}, objectStatus: ${objectStatus}, satellitePosition: ${satellitePosition}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, origNetwork: ${origNetwork}}';
  }
}

class _OnorbitEventIngestReader extends fb.TableReader<OnorbitEventIngest> {
  const _OnorbitEventIngestReader();

  @override
  OnorbitEventIngest createObject(fb.BufferContext bc, int offset) => 
    OnorbitEventIngest._(bc, offset);
}

class OnorbitEventIngestBuilder {
  OnorbitEventIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(54);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDerivedFromOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDeclassificationDateOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDeclassificationStringOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(6, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addEventTimeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addEventTimeNotesOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addOperatorOrgIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addOwnerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addLesseeOrgIdOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOperatedOnBehalfOfOrgIdOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addGeoPosition(double? geoPosition) {
    fbBuilder.addFloat64(14, geoPosition);
    return fbBuilder.offset;
  }
  int addPlaneSlotOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addPlaneNumberOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addPositionStatusOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addUntilTimeOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addOfficialLossDateOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addNetAmount(double? netAmount) {
    fbBuilder.addFloat64(20, netAmount);
    return fbBuilder.offset;
  }
  int addUnderlyingCauseOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addCapabilityLoss(double? capabilityLoss) {
    fbBuilder.addFloat64(22, capabilityLoss);
    return fbBuilder.offset;
  }
  int addCapacityLoss(double? capacityLoss) {
    fbBuilder.addFloat64(23, capacityLoss);
    return fbBuilder.offset;
  }
  int addInsuranceLoss(double? insuranceLoss) {
    fbBuilder.addFloat64(24, insuranceLoss);
    return fbBuilder.offset;
  }
  int addThirdPartyInsuranceLoss(double? thirdPartyInsuranceLoss) {
    fbBuilder.addFloat64(25, thirdPartyInsuranceLoss);
    return fbBuilder.offset;
  }
  int addInjured(int? injured) {
    fbBuilder.addInt32(26, injured);
    return fbBuilder.offset;
  }
  int addKilled(int? killed) {
    fbBuilder.addInt32(27, killed);
    return fbBuilder.offset;
  }
  int addLifeLost(double? lifeLost) {
    fbBuilder.addFloat64(28, lifeLost);
    return fbBuilder.offset;
  }
  int addAgeAtEvent(double? ageAtEvent) {
    fbBuilder.addFloat64(29, ageAtEvent);
    return fbBuilder.offset;
  }
  int addAchievedFlightPhaseOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addOccurrenceFlightPhaseOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addStageAtFaultOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addEquipmentAtFaultOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addEquipmentTypeAtFaultOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addEquipmentPartAtFaultOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addConsequentialEquipmentFailureOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addInclined(bool? inclined) {
    fbBuilder.addBool(37, inclined);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addRemarksOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addInsuranceLossNotesOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addCapabilityLossNotesOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addInsuranceCarriedNotesOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addEquipmentCausingLossNotesOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addEventTypeOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addEventResultOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addObjectStatusOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addSatellitePositionOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addDataMode(OnorbitEventIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(50, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OnorbitEventIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _derivedFrom;
  final String? _declassificationDate;
  final String? _declassificationString;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final String? _eventTime;
  final String? _eventTimeNotes;
  final String? _operatorOrgId;
  final String? _ownerOrgId;
  final String? _lesseeOrgId;
  final String? _operatedOnBehalfOfOrgId;
  final double? _geoPosition;
  final String? _planeSlot;
  final String? _planeNumber;
  final String? _positionStatus;
  final String? _untilTime;
  final String? _officialLossDate;
  final double? _netAmount;
  final String? _underlyingCause;
  final double? _capabilityLoss;
  final double? _capacityLoss;
  final double? _insuranceLoss;
  final double? _thirdPartyInsuranceLoss;
  final int? _injured;
  final int? _killed;
  final double? _lifeLost;
  final double? _ageAtEvent;
  final String? _achievedFlightPhase;
  final String? _occurrenceFlightPhase;
  final String? _stageAtFault;
  final String? _equipmentAtFault;
  final String? _equipmentTypeAtFault;
  final String? _equipmentPartAtFault;
  final String? _consequentialEquipmentFailure;
  final bool? _inclined;
  final String? _description;
  final String? _remarks;
  final String? _insuranceLossNotes;
  final String? _capabilityLossNotes;
  final String? _insuranceCarriedNotes;
  final String? _equipmentCausingLossNotes;
  final String? _eventType;
  final String? _eventResult;
  final String? _objectStatus;
  final String? _satellitePosition;
  final String? _source;
  final String? _origin;
  final OnorbitEventIngestDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _origNetwork;

  OnorbitEventIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? derivedFrom,
    String? declassificationDate,
    String? declassificationString,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    String? eventTime,
    String? eventTimeNotes,
    String? operatorOrgId,
    String? ownerOrgId,
    String? lesseeOrgId,
    String? operatedOnBehalfOfOrgId,
    double? geoPosition,
    String? planeSlot,
    String? planeNumber,
    String? positionStatus,
    String? untilTime,
    String? officialLossDate,
    double? netAmount,
    String? underlyingCause,
    double? capabilityLoss,
    double? capacityLoss,
    double? insuranceLoss,
    double? thirdPartyInsuranceLoss,
    int? injured,
    int? killed,
    double? lifeLost,
    double? ageAtEvent,
    String? achievedFlightPhase,
    String? occurrenceFlightPhase,
    String? stageAtFault,
    String? equipmentAtFault,
    String? equipmentTypeAtFault,
    String? equipmentPartAtFault,
    String? consequentialEquipmentFailure,
    bool? inclined,
    String? description,
    String? remarks,
    String? insuranceLossNotes,
    String? capabilityLossNotes,
    String? insuranceCarriedNotes,
    String? equipmentCausingLossNotes,
    String? eventType,
    String? eventResult,
    String? objectStatus,
    String? satellitePosition,
    String? source,
    String? origin,
    OnorbitEventIngestDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _derivedFrom = derivedFrom,
        _declassificationDate = declassificationDate,
        _declassificationString = declassificationString,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _eventTime = eventTime,
        _eventTimeNotes = eventTimeNotes,
        _operatorOrgId = operatorOrgId,
        _ownerOrgId = ownerOrgId,
        _lesseeOrgId = lesseeOrgId,
        _operatedOnBehalfOfOrgId = operatedOnBehalfOfOrgId,
        _geoPosition = geoPosition,
        _planeSlot = planeSlot,
        _planeNumber = planeNumber,
        _positionStatus = positionStatus,
        _untilTime = untilTime,
        _officialLossDate = officialLossDate,
        _netAmount = netAmount,
        _underlyingCause = underlyingCause,
        _capabilityLoss = capabilityLoss,
        _capacityLoss = capacityLoss,
        _insuranceLoss = insuranceLoss,
        _thirdPartyInsuranceLoss = thirdPartyInsuranceLoss,
        _injured = injured,
        _killed = killed,
        _lifeLost = lifeLost,
        _ageAtEvent = ageAtEvent,
        _achievedFlightPhase = achievedFlightPhase,
        _occurrenceFlightPhase = occurrenceFlightPhase,
        _stageAtFault = stageAtFault,
        _equipmentAtFault = equipmentAtFault,
        _equipmentTypeAtFault = equipmentTypeAtFault,
        _equipmentPartAtFault = equipmentPartAtFault,
        _consequentialEquipmentFailure = consequentialEquipmentFailure,
        _inclined = inclined,
        _description = description,
        _remarks = remarks,
        _insuranceLossNotes = insuranceLossNotes,
        _capabilityLossNotes = capabilityLossNotes,
        _insuranceCarriedNotes = insuranceCarriedNotes,
        _equipmentCausingLossNotes = equipmentCausingLossNotes,
        _eventType = eventType,
        _eventResult = eventResult,
        _objectStatus = objectStatus,
        _satellitePosition = satellitePosition,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? derivedFromOffset = _derivedFrom == null ? null
        : fbBuilder.writeString(_derivedFrom!);
    final int? declassificationDateOffset = _declassificationDate == null ? null
        : fbBuilder.writeString(_declassificationDate!);
    final int? declassificationStringOffset = _declassificationString == null ? null
        : fbBuilder.writeString(_declassificationString!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? eventTimeOffset = _eventTime == null ? null
        : fbBuilder.writeString(_eventTime!);
    final int? eventTimeNotesOffset = _eventTimeNotes == null ? null
        : fbBuilder.writeString(_eventTimeNotes!);
    final int? operatorOrgIdOffset = _operatorOrgId == null ? null
        : fbBuilder.writeString(_operatorOrgId!);
    final int? ownerOrgIdOffset = _ownerOrgId == null ? null
        : fbBuilder.writeString(_ownerOrgId!);
    final int? lesseeOrgIdOffset = _lesseeOrgId == null ? null
        : fbBuilder.writeString(_lesseeOrgId!);
    final int? operatedOnBehalfOfOrgIdOffset = _operatedOnBehalfOfOrgId == null ? null
        : fbBuilder.writeString(_operatedOnBehalfOfOrgId!);
    final int? planeSlotOffset = _planeSlot == null ? null
        : fbBuilder.writeString(_planeSlot!);
    final int? planeNumberOffset = _planeNumber == null ? null
        : fbBuilder.writeString(_planeNumber!);
    final int? positionStatusOffset = _positionStatus == null ? null
        : fbBuilder.writeString(_positionStatus!);
    final int? untilTimeOffset = _untilTime == null ? null
        : fbBuilder.writeString(_untilTime!);
    final int? officialLossDateOffset = _officialLossDate == null ? null
        : fbBuilder.writeString(_officialLossDate!);
    final int? underlyingCauseOffset = _underlyingCause == null ? null
        : fbBuilder.writeString(_underlyingCause!);
    final int? achievedFlightPhaseOffset = _achievedFlightPhase == null ? null
        : fbBuilder.writeString(_achievedFlightPhase!);
    final int? occurrenceFlightPhaseOffset = _occurrenceFlightPhase == null ? null
        : fbBuilder.writeString(_occurrenceFlightPhase!);
    final int? stageAtFaultOffset = _stageAtFault == null ? null
        : fbBuilder.writeString(_stageAtFault!);
    final int? equipmentAtFaultOffset = _equipmentAtFault == null ? null
        : fbBuilder.writeString(_equipmentAtFault!);
    final int? equipmentTypeAtFaultOffset = _equipmentTypeAtFault == null ? null
        : fbBuilder.writeString(_equipmentTypeAtFault!);
    final int? equipmentPartAtFaultOffset = _equipmentPartAtFault == null ? null
        : fbBuilder.writeString(_equipmentPartAtFault!);
    final int? consequentialEquipmentFailureOffset = _consequentialEquipmentFailure == null ? null
        : fbBuilder.writeString(_consequentialEquipmentFailure!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? remarksOffset = _remarks == null ? null
        : fbBuilder.writeString(_remarks!);
    final int? insuranceLossNotesOffset = _insuranceLossNotes == null ? null
        : fbBuilder.writeString(_insuranceLossNotes!);
    final int? capabilityLossNotesOffset = _capabilityLossNotes == null ? null
        : fbBuilder.writeString(_capabilityLossNotes!);
    final int? insuranceCarriedNotesOffset = _insuranceCarriedNotes == null ? null
        : fbBuilder.writeString(_insuranceCarriedNotes!);
    final int? equipmentCausingLossNotesOffset = _equipmentCausingLossNotes == null ? null
        : fbBuilder.writeString(_equipmentCausingLossNotes!);
    final int? eventTypeOffset = _eventType == null ? null
        : fbBuilder.writeString(_eventType!);
    final int? eventResultOffset = _eventResult == null ? null
        : fbBuilder.writeString(_eventResult!);
    final int? objectStatusOffset = _objectStatus == null ? null
        : fbBuilder.writeString(_objectStatus!);
    final int? satellitePositionOffset = _satellitePosition == null ? null
        : fbBuilder.writeString(_satellitePosition!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(54);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, derivedFromOffset);
    fbBuilder.addOffset(3, declassificationDateOffset);
    fbBuilder.addOffset(4, declassificationStringOffset);
    fbBuilder.addOffset(5, idOnOrbitOffset);
    fbBuilder.addInt32(6, _satNo);
    fbBuilder.addOffset(7, origObjectIdOffset);
    fbBuilder.addOffset(8, eventTimeOffset);
    fbBuilder.addOffset(9, eventTimeNotesOffset);
    fbBuilder.addOffset(10, operatorOrgIdOffset);
    fbBuilder.addOffset(11, ownerOrgIdOffset);
    fbBuilder.addOffset(12, lesseeOrgIdOffset);
    fbBuilder.addOffset(13, operatedOnBehalfOfOrgIdOffset);
    fbBuilder.addFloat64(14, _geoPosition);
    fbBuilder.addOffset(15, planeSlotOffset);
    fbBuilder.addOffset(16, planeNumberOffset);
    fbBuilder.addOffset(17, positionStatusOffset);
    fbBuilder.addOffset(18, untilTimeOffset);
    fbBuilder.addOffset(19, officialLossDateOffset);
    fbBuilder.addFloat64(20, _netAmount);
    fbBuilder.addOffset(21, underlyingCauseOffset);
    fbBuilder.addFloat64(22, _capabilityLoss);
    fbBuilder.addFloat64(23, _capacityLoss);
    fbBuilder.addFloat64(24, _insuranceLoss);
    fbBuilder.addFloat64(25, _thirdPartyInsuranceLoss);
    fbBuilder.addInt32(26, _injured);
    fbBuilder.addInt32(27, _killed);
    fbBuilder.addFloat64(28, _lifeLost);
    fbBuilder.addFloat64(29, _ageAtEvent);
    fbBuilder.addOffset(30, achievedFlightPhaseOffset);
    fbBuilder.addOffset(31, occurrenceFlightPhaseOffset);
    fbBuilder.addOffset(32, stageAtFaultOffset);
    fbBuilder.addOffset(33, equipmentAtFaultOffset);
    fbBuilder.addOffset(34, equipmentTypeAtFaultOffset);
    fbBuilder.addOffset(35, equipmentPartAtFaultOffset);
    fbBuilder.addOffset(36, consequentialEquipmentFailureOffset);
    fbBuilder.addBool(37, _inclined);
    fbBuilder.addOffset(38, descriptionOffset);
    fbBuilder.addOffset(39, remarksOffset);
    fbBuilder.addOffset(40, insuranceLossNotesOffset);
    fbBuilder.addOffset(41, capabilityLossNotesOffset);
    fbBuilder.addOffset(42, insuranceCarriedNotesOffset);
    fbBuilder.addOffset(43, equipmentCausingLossNotesOffset);
    fbBuilder.addOffset(44, eventTypeOffset);
    fbBuilder.addOffset(45, eventResultOffset);
    fbBuilder.addOffset(46, objectStatusOffset);
    fbBuilder.addOffset(47, satellitePositionOffset);
    fbBuilder.addOffset(48, sourceOffset);
    fbBuilder.addOffset(49, originOffset);
    fbBuilder.addInt8(50, _dataMode?.value);
    fbBuilder.addOffset(51, createdAtOffset);
    fbBuilder.addOffset(52, createdByOffset);
    fbBuilder.addOffset(53, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
