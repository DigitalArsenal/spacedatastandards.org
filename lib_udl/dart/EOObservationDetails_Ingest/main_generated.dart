// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class EoobservationDetailsIngestDataModeEnum {
  final int value;
  const EoobservationDetailsIngestDataModeEnum._(this.value);

  factory EoobservationDetailsIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EoobservationDetailsIngestDataModeEnum');
    }
    return result;
  }

  static EoobservationDetailsIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : EoobservationDetailsIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const EoobservationDetailsIngestDataModeEnum REAL = EoobservationDetailsIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const EoobservationDetailsIngestDataModeEnum TEST = EoobservationDetailsIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const EoobservationDetailsIngestDataModeEnum SIMULATED = EoobservationDetailsIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const EoobservationDetailsIngestDataModeEnum EXERCISE = EoobservationDetailsIngestDataModeEnum._(3);
  static const Map<int, EoobservationDetailsIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<EoobservationDetailsIngestDataModeEnum> reader = _EoobservationDetailsIngestDataModeEnumReader();

  @override
  String toString() {
    return 'EoobservationDetailsIngestDataModeEnum{value: $value}';
  }
}

class _EoobservationDetailsIngestDataModeEnumReader extends fb.Reader<EoobservationDetailsIngestDataModeEnum> {
  const _EoobservationDetailsIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  EoobservationDetailsIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      EoobservationDetailsIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of additional detailed observation data for electro-optical based sensor phenomenologies.
class EoobservationDetailsIngest {
  EoobservationDetailsIngest._(this._bc, this._bcOffset);
  factory EoobservationDetailsIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EoobservationDetailsIngest> reader = _EoobservationDetailsIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the parent EOObservation.
  ///  Example: /// Example: EOOBSERVATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idEoobservation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get obTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get predictedRa => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get predictedDeclination => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get predictedAzimuth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get predictedElevation => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get sunAzimuth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get sunElevation => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  The value is the number of spectral filters used.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get numSpectralFilters => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 22, 0);
  ///  Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: ['Keyword1', 'Keyword2']
  ///  Constraints: No constraints specified.
  List<String>? get spectralFilters => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 24);
  ///  This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get spectralZmfl => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 26);
  ///  This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get spectralFilterSolarMag => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 28);
  ///  This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get zeroPoints => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get zeroPointsUnc => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get extinctionCoeffs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  ///  This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get extinctionCoeffsUnc => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 36);
  ///  Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get colorCoeffs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 38);
  ///  The value is the number of neutral density filters used.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get numNeutralDensityFilters => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: ['numNeutralDensityFilters1', 'numNeutralDensityFilters2']
  ///  Constraints: No constraints specified.
  List<String>? get neutralDensityFilterNames => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get neutralDensityFilterTransmissions => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);
  ///  This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get neutralDensityFilterTransmissionsUnc => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 46);
  ///  Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.
  ///  Example: /// Example: 234.2
  ///  Constraints: No constraints specified.
  double get gain => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Sensor instantaneous field of view (ratio of pixel pitch to focal length).
  ///  Example: /// Example: 0.2
  ///  Constraints: No constraints specified.
  double get ifov => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Pixel array size (width) in pixels.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get pixelArrayWidth => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  Pixel array size (height) in pixels.
  ///  Example: /// Example: 23
  ///  Constraints: No constraints specified.
  int get pixelArrayHeight => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  Minimum valid pixel value, this is typically 0.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get pixelMin => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.
  ///  Example: /// Example: 256
  ///  Constraints: No constraints specified.
  int get pixelMax => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 58, 0);
  ///  Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  double get centroidRow => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get centroidColumn => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Spatial variance of image distribution in vertical direction measured in pixels squared.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  double get rowVariance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Spatial variance of image distribution in horizontal direction measured in pixels squared.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  double get columnVariance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.
  ///  Example: /// Example: 0.01
  ///  Constraints: No constraints specified.
  double get rowColCov => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
  ///  Example: /// Example: [-127.153, -126.153, -125.153]
  ///  Constraints: No constraints specified.
  List<String>? get distFromStreakCenter => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 70);
  ///  An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
  ///  Example: /// Example: [21.01, 21.382, 21.725]
  ///  Constraints: No constraints specified.
  List<String>? get surfBrightness => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 72);
  ///  An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
  ///  Example: /// Example: [0.165, 0.165, 0.165]
  ///  Constraints: No constraints specified.
  List<String>? get surfBrightnessUnc => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 74);
  ///  Uncertainty in the times reported in UTC in seconds.
  ///  Example: /// Example: 13.1
  ///  Constraints: No constraints specified.
  double get timesUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Operating temperature of CCD recorded during exposure or measured during calibrations in K.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get ccdTemp => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.
  ///  Example: /// Example: 23
  ///  Constraints: No constraints specified.
  int get currentSpectralFilterNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 80, 0);
  ///  The reference number n, in neutralDensityFilters for the currently used neutral density filter.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get currentNeutralDensityFilterNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 82, 0);
  ///  The number of pixels binned horizontally.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get binningHoriz => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 84, 0);
  ///  The number of pixels binned vertically.
  ///  Example: /// Example: 14
  ///  Constraints: No constraints specified.
  int get binningVert => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 86, 0);
  ///  Number of stars used in photometric fit count.
  ///  Example: /// Example: 23
  ///  Constraints: No constraints specified.
  int get pcalNumStars => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 88, 0);
  ///  The x centroid position on the CCD of the target object in pixels.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  double get ccdObjPosX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  The y centroid position on the CCD of the target object in pixels.
  ///  Example: /// Example: 321.4
  ///  Constraints: No constraints specified.
  double get ccdObjPosY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.
  ///  Example: /// Example: 133.2
  ///  Constraints: No constraints specified.
  double get ccdObjWidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.
  ///  Example: /// Example: 4134.1
  ///  Constraints: No constraints specified.
  double get backgroundSignal => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get backgroundSignalUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get peakApertureCount => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  Peak Background Raw Counts is the largest pixel value used in background signal.
  ///  Example: /// Example: 321
  ///  Constraints: No constraints specified.
  int get peakBackgroundCount => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 102, 0);
  ///  Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).
  ///  Example: /// Example: 13.4
  ///  Constraints: No constraints specified.
  double get snrEst => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  double get magInstrumental => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  Uncertainty in the instrumental magnitude.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  double get magInstrumentalUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  Optical Cross Section computed in units m(2)/ster.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  double get opticalCrossSection => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  Uncertainty in Optical Cross Section computed in units m(2)/ster.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  double get opticalCrossSectionUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  Sun state vector in ECI J2000 coordinate frame in km.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  double get sunStatePosX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  Sun state vector in ECI J2000 coordinate frame in km.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  double get sunStatePosY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 116, 0.0);
  ///  Sun state vector in ECI J2000 coordinate frame in km.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  double get sunStatePosZ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  ///  Sun state vector in ECI J2000 coordinate frame in km/sec.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  double get sunStateVelX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 120, 0.0);
  ///  Sun state vector in ECI J2000 coordinate frame in km/sec.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  double get sunStateVelY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  Sun state vector in ECI J2000 coordinate frame in km/sec.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  double get sunStateVelZ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get numCatalogStars => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 126, 0);
  ///  Number of detected stars in the FOV with the target object. Helps identify frames with clouds.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get numDetectedStars => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 128, 0);
  ///  Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get numCorrelatedStars => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 130, 0);
  ///  Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get predictedRaUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  ///  Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get predictedDeclinationUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 134, 0.0);
  ///  Covariance (x^2) in measured Right Ascension (X) in deg^2.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get raCov => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 136, 0.0);
  ///  Covariance (Y^2) in measured declination (Y) in deg^2.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get declinationCov => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 138, 0.0);
  ///  Covariance (XY) in measured ra/declination (XY) in deg^2.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get raDeclinationCov => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 140, 0.0);
  ///  World Coordinate System (WCS) X pixel origin in astrometric fit.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get acalCrPixX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 142, 0.0);
  ///  World Coordinate System (WCS) Y pixel origin in astrometric fit.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get acalCrPixY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 144, 0.0);
  ///  World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get acalCrValX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  ///  World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get acalCrValY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 148, 0.0);
  ///  Number of stars used in astrometric fit.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get acalNumStars => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 150, 0);
  ///  Distance from the target object to the sun during the observation in meters.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get objSunRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 152, 0.0);
  ///  Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get phaseAngBisect => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 154, 0.0);
  ///  Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get solarDiskFrac => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 156, 0.0);
  ///  Time off element set.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get toes => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 158, 0.0);
  ///  Degrees Off Element Set.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  double get does => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 160, 0.0);
  ///  Source of the data, will be set to EOObservation source if blank.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 162);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  , will be set to EOObservation dataMode if blank.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  EoobservationDetailsIngestDataModeEnum get dataMode => EoobservationDetailsIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 164, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 166);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 168);

  @override
  String toString() {
    return 'EoobservationDetailsIngest{idEoobservation: ${idEoobservation}, classificationMarking: ${classificationMarking}, obTime: ${obTime}, predictedRa: ${predictedRa}, predictedDeclination: ${predictedDeclination}, predictedAzimuth: ${predictedAzimuth}, predictedElevation: ${predictedElevation}, sunAzimuth: ${sunAzimuth}, sunElevation: ${sunElevation}, numSpectralFilters: ${numSpectralFilters}, spectralFilters: ${spectralFilters}, spectralZmfl: ${spectralZmfl}, spectralFilterSolarMag: ${spectralFilterSolarMag}, zeroPoints: ${zeroPoints}, zeroPointsUnc: ${zeroPointsUnc}, extinctionCoeffs: ${extinctionCoeffs}, extinctionCoeffsUnc: ${extinctionCoeffsUnc}, colorCoeffs: ${colorCoeffs}, numNeutralDensityFilters: ${numNeutralDensityFilters}, neutralDensityFilterNames: ${neutralDensityFilterNames}, neutralDensityFilterTransmissions: ${neutralDensityFilterTransmissions}, neutralDensityFilterTransmissionsUnc: ${neutralDensityFilterTransmissionsUnc}, gain: ${gain}, ifov: ${ifov}, pixelArrayWidth: ${pixelArrayWidth}, pixelArrayHeight: ${pixelArrayHeight}, pixelMin: ${pixelMin}, pixelMax: ${pixelMax}, centroidRow: ${centroidRow}, centroidColumn: ${centroidColumn}, rowVariance: ${rowVariance}, columnVariance: ${columnVariance}, rowColCov: ${rowColCov}, distFromStreakCenter: ${distFromStreakCenter}, surfBrightness: ${surfBrightness}, surfBrightnessUnc: ${surfBrightnessUnc}, timesUnc: ${timesUnc}, ccdTemp: ${ccdTemp}, currentSpectralFilterNum: ${currentSpectralFilterNum}, currentNeutralDensityFilterNum: ${currentNeutralDensityFilterNum}, binningHoriz: ${binningHoriz}, binningVert: ${binningVert}, pcalNumStars: ${pcalNumStars}, ccdObjPosX: ${ccdObjPosX}, ccdObjPosY: ${ccdObjPosY}, ccdObjWidth: ${ccdObjWidth}, backgroundSignal: ${backgroundSignal}, backgroundSignalUnc: ${backgroundSignalUnc}, peakApertureCount: ${peakApertureCount}, peakBackgroundCount: ${peakBackgroundCount}, snrEst: ${snrEst}, magInstrumental: ${magInstrumental}, magInstrumentalUnc: ${magInstrumentalUnc}, opticalCrossSection: ${opticalCrossSection}, opticalCrossSectionUnc: ${opticalCrossSectionUnc}, sunStatePosX: ${sunStatePosX}, sunStatePosY: ${sunStatePosY}, sunStatePosZ: ${sunStatePosZ}, sunStateVelX: ${sunStateVelX}, sunStateVelY: ${sunStateVelY}, sunStateVelZ: ${sunStateVelZ}, numCatalogStars: ${numCatalogStars}, numDetectedStars: ${numDetectedStars}, numCorrelatedStars: ${numCorrelatedStars}, predictedRaUnc: ${predictedRaUnc}, predictedDeclinationUnc: ${predictedDeclinationUnc}, raCov: ${raCov}, declinationCov: ${declinationCov}, raDeclinationCov: ${raDeclinationCov}, acalCrPixX: ${acalCrPixX}, acalCrPixY: ${acalCrPixY}, acalCrValX: ${acalCrValX}, acalCrValY: ${acalCrValY}, acalNumStars: ${acalNumStars}, objSunRange: ${objSunRange}, phaseAngBisect: ${phaseAngBisect}, solarDiskFrac: ${solarDiskFrac}, toes: ${toes}, does: ${does}, source: ${source}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}}';
  }
}

class _EoobservationDetailsIngestReader extends fb.TableReader<EoobservationDetailsIngest> {
  const _EoobservationDetailsIngestReader();

  @override
  EoobservationDetailsIngest createObject(fb.BufferContext bc, int offset) => 
    EoobservationDetailsIngest._(bc, offset);
}

class EoobservationDetailsIngestBuilder {
  EoobservationDetailsIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(83);
  }

  int addIdEoobservationOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addObTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPredictedRa(double? predictedRa) {
    fbBuilder.addFloat64(3, predictedRa);
    return fbBuilder.offset;
  }
  int addPredictedDeclination(double? predictedDeclination) {
    fbBuilder.addFloat64(4, predictedDeclination);
    return fbBuilder.offset;
  }
  int addPredictedAzimuth(double? predictedAzimuth) {
    fbBuilder.addFloat64(5, predictedAzimuth);
    return fbBuilder.offset;
  }
  int addPredictedElevation(double? predictedElevation) {
    fbBuilder.addFloat64(6, predictedElevation);
    return fbBuilder.offset;
  }
  int addSunAzimuth(double? sunAzimuth) {
    fbBuilder.addFloat64(7, sunAzimuth);
    return fbBuilder.offset;
  }
  int addSunElevation(double? sunElevation) {
    fbBuilder.addFloat64(8, sunElevation);
    return fbBuilder.offset;
  }
  int addNumSpectralFilters(int? numSpectralFilters) {
    fbBuilder.addInt32(9, numSpectralFilters);
    return fbBuilder.offset;
  }
  int addSpectralFiltersOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addSpectralZmflOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addSpectralFilterSolarMagOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addZeroPointsOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addZeroPointsUncOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addExtinctionCoeffsOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addExtinctionCoeffsUncOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addColorCoeffsOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addNumNeutralDensityFilters(int? numNeutralDensityFilters) {
    fbBuilder.addInt32(18, numNeutralDensityFilters);
    return fbBuilder.offset;
  }
  int addNeutralDensityFilterNamesOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addNeutralDensityFilterTransmissionsOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addNeutralDensityFilterTransmissionsUncOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addGain(double? gain) {
    fbBuilder.addFloat64(22, gain);
    return fbBuilder.offset;
  }
  int addIfov(double? ifov) {
    fbBuilder.addFloat64(23, ifov);
    return fbBuilder.offset;
  }
  int addPixelArrayWidth(int? pixelArrayWidth) {
    fbBuilder.addInt32(24, pixelArrayWidth);
    return fbBuilder.offset;
  }
  int addPixelArrayHeight(int? pixelArrayHeight) {
    fbBuilder.addInt32(25, pixelArrayHeight);
    return fbBuilder.offset;
  }
  int addPixelMin(int? pixelMin) {
    fbBuilder.addInt32(26, pixelMin);
    return fbBuilder.offset;
  }
  int addPixelMax(int? pixelMax) {
    fbBuilder.addInt32(27, pixelMax);
    return fbBuilder.offset;
  }
  int addCentroidRow(double? centroidRow) {
    fbBuilder.addFloat64(28, centroidRow);
    return fbBuilder.offset;
  }
  int addCentroidColumn(double? centroidColumn) {
    fbBuilder.addFloat64(29, centroidColumn);
    return fbBuilder.offset;
  }
  int addRowVariance(double? rowVariance) {
    fbBuilder.addFloat64(30, rowVariance);
    return fbBuilder.offset;
  }
  int addColumnVariance(double? columnVariance) {
    fbBuilder.addFloat64(31, columnVariance);
    return fbBuilder.offset;
  }
  int addRowColCov(double? rowColCov) {
    fbBuilder.addFloat64(32, rowColCov);
    return fbBuilder.offset;
  }
  int addDistFromStreakCenterOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addSurfBrightnessOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addSurfBrightnessUncOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addTimesUnc(double? timesUnc) {
    fbBuilder.addFloat64(36, timesUnc);
    return fbBuilder.offset;
  }
  int addCcdTemp(double? ccdTemp) {
    fbBuilder.addFloat64(37, ccdTemp);
    return fbBuilder.offset;
  }
  int addCurrentSpectralFilterNum(int? currentSpectralFilterNum) {
    fbBuilder.addInt32(38, currentSpectralFilterNum);
    return fbBuilder.offset;
  }
  int addCurrentNeutralDensityFilterNum(int? currentNeutralDensityFilterNum) {
    fbBuilder.addInt32(39, currentNeutralDensityFilterNum);
    return fbBuilder.offset;
  }
  int addBinningHoriz(int? binningHoriz) {
    fbBuilder.addInt32(40, binningHoriz);
    return fbBuilder.offset;
  }
  int addBinningVert(int? binningVert) {
    fbBuilder.addInt32(41, binningVert);
    return fbBuilder.offset;
  }
  int addPcalNumStars(int? pcalNumStars) {
    fbBuilder.addInt32(42, pcalNumStars);
    return fbBuilder.offset;
  }
  int addCcdObjPosX(double? ccdObjPosX) {
    fbBuilder.addFloat64(43, ccdObjPosX);
    return fbBuilder.offset;
  }
  int addCcdObjPosY(double? ccdObjPosY) {
    fbBuilder.addFloat64(44, ccdObjPosY);
    return fbBuilder.offset;
  }
  int addCcdObjWidth(double? ccdObjWidth) {
    fbBuilder.addFloat64(45, ccdObjWidth);
    return fbBuilder.offset;
  }
  int addBackgroundSignal(double? backgroundSignal) {
    fbBuilder.addFloat64(46, backgroundSignal);
    return fbBuilder.offset;
  }
  int addBackgroundSignalUnc(double? backgroundSignalUnc) {
    fbBuilder.addFloat64(47, backgroundSignalUnc);
    return fbBuilder.offset;
  }
  int addPeakApertureCount(double? peakApertureCount) {
    fbBuilder.addFloat64(48, peakApertureCount);
    return fbBuilder.offset;
  }
  int addPeakBackgroundCount(int? peakBackgroundCount) {
    fbBuilder.addInt32(49, peakBackgroundCount);
    return fbBuilder.offset;
  }
  int addSnrEst(double? snrEst) {
    fbBuilder.addFloat64(50, snrEst);
    return fbBuilder.offset;
  }
  int addMagInstrumental(double? magInstrumental) {
    fbBuilder.addFloat64(51, magInstrumental);
    return fbBuilder.offset;
  }
  int addMagInstrumentalUnc(double? magInstrumentalUnc) {
    fbBuilder.addFloat64(52, magInstrumentalUnc);
    return fbBuilder.offset;
  }
  int addOpticalCrossSection(double? opticalCrossSection) {
    fbBuilder.addFloat64(53, opticalCrossSection);
    return fbBuilder.offset;
  }
  int addOpticalCrossSectionUnc(double? opticalCrossSectionUnc) {
    fbBuilder.addFloat64(54, opticalCrossSectionUnc);
    return fbBuilder.offset;
  }
  int addSunStatePosX(double? sunStatePosX) {
    fbBuilder.addFloat64(55, sunStatePosX);
    return fbBuilder.offset;
  }
  int addSunStatePosY(double? sunStatePosY) {
    fbBuilder.addFloat64(56, sunStatePosY);
    return fbBuilder.offset;
  }
  int addSunStatePosZ(double? sunStatePosZ) {
    fbBuilder.addFloat64(57, sunStatePosZ);
    return fbBuilder.offset;
  }
  int addSunStateVelX(double? sunStateVelX) {
    fbBuilder.addFloat64(58, sunStateVelX);
    return fbBuilder.offset;
  }
  int addSunStateVelY(double? sunStateVelY) {
    fbBuilder.addFloat64(59, sunStateVelY);
    return fbBuilder.offset;
  }
  int addSunStateVelZ(double? sunStateVelZ) {
    fbBuilder.addFloat64(60, sunStateVelZ);
    return fbBuilder.offset;
  }
  int addNumCatalogStars(int? numCatalogStars) {
    fbBuilder.addInt32(61, numCatalogStars);
    return fbBuilder.offset;
  }
  int addNumDetectedStars(int? numDetectedStars) {
    fbBuilder.addInt32(62, numDetectedStars);
    return fbBuilder.offset;
  }
  int addNumCorrelatedStars(int? numCorrelatedStars) {
    fbBuilder.addInt32(63, numCorrelatedStars);
    return fbBuilder.offset;
  }
  int addPredictedRaUnc(double? predictedRaUnc) {
    fbBuilder.addFloat64(64, predictedRaUnc);
    return fbBuilder.offset;
  }
  int addPredictedDeclinationUnc(double? predictedDeclinationUnc) {
    fbBuilder.addFloat64(65, predictedDeclinationUnc);
    return fbBuilder.offset;
  }
  int addRaCov(double? raCov) {
    fbBuilder.addFloat64(66, raCov);
    return fbBuilder.offset;
  }
  int addDeclinationCov(double? declinationCov) {
    fbBuilder.addFloat64(67, declinationCov);
    return fbBuilder.offset;
  }
  int addRaDeclinationCov(double? raDeclinationCov) {
    fbBuilder.addFloat64(68, raDeclinationCov);
    return fbBuilder.offset;
  }
  int addAcalCrPixX(double? acalCrPixX) {
    fbBuilder.addFloat64(69, acalCrPixX);
    return fbBuilder.offset;
  }
  int addAcalCrPixY(double? acalCrPixY) {
    fbBuilder.addFloat64(70, acalCrPixY);
    return fbBuilder.offset;
  }
  int addAcalCrValX(double? acalCrValX) {
    fbBuilder.addFloat64(71, acalCrValX);
    return fbBuilder.offset;
  }
  int addAcalCrValY(double? acalCrValY) {
    fbBuilder.addFloat64(72, acalCrValY);
    return fbBuilder.offset;
  }
  int addAcalNumStars(int? acalNumStars) {
    fbBuilder.addInt32(73, acalNumStars);
    return fbBuilder.offset;
  }
  int addObjSunRange(double? objSunRange) {
    fbBuilder.addFloat64(74, objSunRange);
    return fbBuilder.offset;
  }
  int addPhaseAngBisect(double? phaseAngBisect) {
    fbBuilder.addFloat64(75, phaseAngBisect);
    return fbBuilder.offset;
  }
  int addSolarDiskFrac(double? solarDiskFrac) {
    fbBuilder.addFloat64(76, solarDiskFrac);
    return fbBuilder.offset;
  }
  int addToes(double? toes) {
    fbBuilder.addFloat64(77, toes);
    return fbBuilder.offset;
  }
  int addDoes(double? does) {
    fbBuilder.addFloat64(78, does);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(79, offset);
    return fbBuilder.offset;
  }
  int addDataMode(EoobservationDetailsIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(80, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(81, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(82, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EoobservationDetailsIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _idEoobservation;
  final String? _classificationMarking;
  final String? _obTime;
  final double? _predictedRa;
  final double? _predictedDeclination;
  final double? _predictedAzimuth;
  final double? _predictedElevation;
  final double? _sunAzimuth;
  final double? _sunElevation;
  final int? _numSpectralFilters;
  final List<String>? _spectralFilters;
  final List<String>? _spectralZmfl;
  final List<String>? _spectralFilterSolarMag;
  final List<String>? _zeroPoints;
  final List<String>? _zeroPointsUnc;
  final List<String>? _extinctionCoeffs;
  final List<String>? _extinctionCoeffsUnc;
  final List<String>? _colorCoeffs;
  final int? _numNeutralDensityFilters;
  final List<String>? _neutralDensityFilterNames;
  final List<String>? _neutralDensityFilterTransmissions;
  final List<String>? _neutralDensityFilterTransmissionsUnc;
  final double? _gain;
  final double? _ifov;
  final int? _pixelArrayWidth;
  final int? _pixelArrayHeight;
  final int? _pixelMin;
  final int? _pixelMax;
  final double? _centroidRow;
  final double? _centroidColumn;
  final double? _rowVariance;
  final double? _columnVariance;
  final double? _rowColCov;
  final List<String>? _distFromStreakCenter;
  final List<String>? _surfBrightness;
  final List<String>? _surfBrightnessUnc;
  final double? _timesUnc;
  final double? _ccdTemp;
  final int? _currentSpectralFilterNum;
  final int? _currentNeutralDensityFilterNum;
  final int? _binningHoriz;
  final int? _binningVert;
  final int? _pcalNumStars;
  final double? _ccdObjPosX;
  final double? _ccdObjPosY;
  final double? _ccdObjWidth;
  final double? _backgroundSignal;
  final double? _backgroundSignalUnc;
  final double? _peakApertureCount;
  final int? _peakBackgroundCount;
  final double? _snrEst;
  final double? _magInstrumental;
  final double? _magInstrumentalUnc;
  final double? _opticalCrossSection;
  final double? _opticalCrossSectionUnc;
  final double? _sunStatePosX;
  final double? _sunStatePosY;
  final double? _sunStatePosZ;
  final double? _sunStateVelX;
  final double? _sunStateVelY;
  final double? _sunStateVelZ;
  final int? _numCatalogStars;
  final int? _numDetectedStars;
  final int? _numCorrelatedStars;
  final double? _predictedRaUnc;
  final double? _predictedDeclinationUnc;
  final double? _raCov;
  final double? _declinationCov;
  final double? _raDeclinationCov;
  final double? _acalCrPixX;
  final double? _acalCrPixY;
  final double? _acalCrValX;
  final double? _acalCrValY;
  final int? _acalNumStars;
  final double? _objSunRange;
  final double? _phaseAngBisect;
  final double? _solarDiskFrac;
  final double? _toes;
  final double? _does;
  final String? _source;
  final EoobservationDetailsIngestDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;

  EoobservationDetailsIngestObjectBuilder({
    String? idEoobservation,
    String? classificationMarking,
    String? obTime,
    double? predictedRa,
    double? predictedDeclination,
    double? predictedAzimuth,
    double? predictedElevation,
    double? sunAzimuth,
    double? sunElevation,
    int? numSpectralFilters,
    List<String>? spectralFilters,
    List<String>? spectralZmfl,
    List<String>? spectralFilterSolarMag,
    List<String>? zeroPoints,
    List<String>? zeroPointsUnc,
    List<String>? extinctionCoeffs,
    List<String>? extinctionCoeffsUnc,
    List<String>? colorCoeffs,
    int? numNeutralDensityFilters,
    List<String>? neutralDensityFilterNames,
    List<String>? neutralDensityFilterTransmissions,
    List<String>? neutralDensityFilterTransmissionsUnc,
    double? gain,
    double? ifov,
    int? pixelArrayWidth,
    int? pixelArrayHeight,
    int? pixelMin,
    int? pixelMax,
    double? centroidRow,
    double? centroidColumn,
    double? rowVariance,
    double? columnVariance,
    double? rowColCov,
    List<String>? distFromStreakCenter,
    List<String>? surfBrightness,
    List<String>? surfBrightnessUnc,
    double? timesUnc,
    double? ccdTemp,
    int? currentSpectralFilterNum,
    int? currentNeutralDensityFilterNum,
    int? binningHoriz,
    int? binningVert,
    int? pcalNumStars,
    double? ccdObjPosX,
    double? ccdObjPosY,
    double? ccdObjWidth,
    double? backgroundSignal,
    double? backgroundSignalUnc,
    double? peakApertureCount,
    int? peakBackgroundCount,
    double? snrEst,
    double? magInstrumental,
    double? magInstrumentalUnc,
    double? opticalCrossSection,
    double? opticalCrossSectionUnc,
    double? sunStatePosX,
    double? sunStatePosY,
    double? sunStatePosZ,
    double? sunStateVelX,
    double? sunStateVelY,
    double? sunStateVelZ,
    int? numCatalogStars,
    int? numDetectedStars,
    int? numCorrelatedStars,
    double? predictedRaUnc,
    double? predictedDeclinationUnc,
    double? raCov,
    double? declinationCov,
    double? raDeclinationCov,
    double? acalCrPixX,
    double? acalCrPixY,
    double? acalCrValX,
    double? acalCrValY,
    int? acalNumStars,
    double? objSunRange,
    double? phaseAngBisect,
    double? solarDiskFrac,
    double? toes,
    double? does,
    String? source,
    EoobservationDetailsIngestDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
  })
      : _idEoobservation = idEoobservation,
        _classificationMarking = classificationMarking,
        _obTime = obTime,
        _predictedRa = predictedRa,
        _predictedDeclination = predictedDeclination,
        _predictedAzimuth = predictedAzimuth,
        _predictedElevation = predictedElevation,
        _sunAzimuth = sunAzimuth,
        _sunElevation = sunElevation,
        _numSpectralFilters = numSpectralFilters,
        _spectralFilters = spectralFilters,
        _spectralZmfl = spectralZmfl,
        _spectralFilterSolarMag = spectralFilterSolarMag,
        _zeroPoints = zeroPoints,
        _zeroPointsUnc = zeroPointsUnc,
        _extinctionCoeffs = extinctionCoeffs,
        _extinctionCoeffsUnc = extinctionCoeffsUnc,
        _colorCoeffs = colorCoeffs,
        _numNeutralDensityFilters = numNeutralDensityFilters,
        _neutralDensityFilterNames = neutralDensityFilterNames,
        _neutralDensityFilterTransmissions = neutralDensityFilterTransmissions,
        _neutralDensityFilterTransmissionsUnc = neutralDensityFilterTransmissionsUnc,
        _gain = gain,
        _ifov = ifov,
        _pixelArrayWidth = pixelArrayWidth,
        _pixelArrayHeight = pixelArrayHeight,
        _pixelMin = pixelMin,
        _pixelMax = pixelMax,
        _centroidRow = centroidRow,
        _centroidColumn = centroidColumn,
        _rowVariance = rowVariance,
        _columnVariance = columnVariance,
        _rowColCov = rowColCov,
        _distFromStreakCenter = distFromStreakCenter,
        _surfBrightness = surfBrightness,
        _surfBrightnessUnc = surfBrightnessUnc,
        _timesUnc = timesUnc,
        _ccdTemp = ccdTemp,
        _currentSpectralFilterNum = currentSpectralFilterNum,
        _currentNeutralDensityFilterNum = currentNeutralDensityFilterNum,
        _binningHoriz = binningHoriz,
        _binningVert = binningVert,
        _pcalNumStars = pcalNumStars,
        _ccdObjPosX = ccdObjPosX,
        _ccdObjPosY = ccdObjPosY,
        _ccdObjWidth = ccdObjWidth,
        _backgroundSignal = backgroundSignal,
        _backgroundSignalUnc = backgroundSignalUnc,
        _peakApertureCount = peakApertureCount,
        _peakBackgroundCount = peakBackgroundCount,
        _snrEst = snrEst,
        _magInstrumental = magInstrumental,
        _magInstrumentalUnc = magInstrumentalUnc,
        _opticalCrossSection = opticalCrossSection,
        _opticalCrossSectionUnc = opticalCrossSectionUnc,
        _sunStatePosX = sunStatePosX,
        _sunStatePosY = sunStatePosY,
        _sunStatePosZ = sunStatePosZ,
        _sunStateVelX = sunStateVelX,
        _sunStateVelY = sunStateVelY,
        _sunStateVelZ = sunStateVelZ,
        _numCatalogStars = numCatalogStars,
        _numDetectedStars = numDetectedStars,
        _numCorrelatedStars = numCorrelatedStars,
        _predictedRaUnc = predictedRaUnc,
        _predictedDeclinationUnc = predictedDeclinationUnc,
        _raCov = raCov,
        _declinationCov = declinationCov,
        _raDeclinationCov = raDeclinationCov,
        _acalCrPixX = acalCrPixX,
        _acalCrPixY = acalCrPixY,
        _acalCrValX = acalCrValX,
        _acalCrValY = acalCrValY,
        _acalNumStars = acalNumStars,
        _objSunRange = objSunRange,
        _phaseAngBisect = phaseAngBisect,
        _solarDiskFrac = solarDiskFrac,
        _toes = toes,
        _does = does,
        _source = source,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idEoobservationOffset = _idEoobservation == null ? null
        : fbBuilder.writeString(_idEoobservation!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? obTimeOffset = _obTime == null ? null
        : fbBuilder.writeString(_obTime!);
    final int? spectralFiltersOffset = _spectralFilters == null ? null
        : fbBuilder.writeList(_spectralFilters!.map(fbBuilder.writeString).toList());
    final int? spectralZmflOffset = _spectralZmfl == null ? null
        : fbBuilder.writeList(_spectralZmfl!.map(fbBuilder.writeString).toList());
    final int? spectralFilterSolarMagOffset = _spectralFilterSolarMag == null ? null
        : fbBuilder.writeList(_spectralFilterSolarMag!.map(fbBuilder.writeString).toList());
    final int? zeroPointsOffset = _zeroPoints == null ? null
        : fbBuilder.writeList(_zeroPoints!.map(fbBuilder.writeString).toList());
    final int? zeroPointsUncOffset = _zeroPointsUnc == null ? null
        : fbBuilder.writeList(_zeroPointsUnc!.map(fbBuilder.writeString).toList());
    final int? extinctionCoeffsOffset = _extinctionCoeffs == null ? null
        : fbBuilder.writeList(_extinctionCoeffs!.map(fbBuilder.writeString).toList());
    final int? extinctionCoeffsUncOffset = _extinctionCoeffsUnc == null ? null
        : fbBuilder.writeList(_extinctionCoeffsUnc!.map(fbBuilder.writeString).toList());
    final int? colorCoeffsOffset = _colorCoeffs == null ? null
        : fbBuilder.writeList(_colorCoeffs!.map(fbBuilder.writeString).toList());
    final int? neutralDensityFilterNamesOffset = _neutralDensityFilterNames == null ? null
        : fbBuilder.writeList(_neutralDensityFilterNames!.map(fbBuilder.writeString).toList());
    final int? neutralDensityFilterTransmissionsOffset = _neutralDensityFilterTransmissions == null ? null
        : fbBuilder.writeList(_neutralDensityFilterTransmissions!.map(fbBuilder.writeString).toList());
    final int? neutralDensityFilterTransmissionsUncOffset = _neutralDensityFilterTransmissionsUnc == null ? null
        : fbBuilder.writeList(_neutralDensityFilterTransmissionsUnc!.map(fbBuilder.writeString).toList());
    final int? distFromStreakCenterOffset = _distFromStreakCenter == null ? null
        : fbBuilder.writeList(_distFromStreakCenter!.map(fbBuilder.writeString).toList());
    final int? surfBrightnessOffset = _surfBrightness == null ? null
        : fbBuilder.writeList(_surfBrightness!.map(fbBuilder.writeString).toList());
    final int? surfBrightnessUncOffset = _surfBrightnessUnc == null ? null
        : fbBuilder.writeList(_surfBrightnessUnc!.map(fbBuilder.writeString).toList());
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    fbBuilder.startTable(83);
    fbBuilder.addOffset(0, idEoobservationOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, obTimeOffset);
    fbBuilder.addFloat64(3, _predictedRa);
    fbBuilder.addFloat64(4, _predictedDeclination);
    fbBuilder.addFloat64(5, _predictedAzimuth);
    fbBuilder.addFloat64(6, _predictedElevation);
    fbBuilder.addFloat64(7, _sunAzimuth);
    fbBuilder.addFloat64(8, _sunElevation);
    fbBuilder.addInt32(9, _numSpectralFilters);
    fbBuilder.addOffset(10, spectralFiltersOffset);
    fbBuilder.addOffset(11, spectralZmflOffset);
    fbBuilder.addOffset(12, spectralFilterSolarMagOffset);
    fbBuilder.addOffset(13, zeroPointsOffset);
    fbBuilder.addOffset(14, zeroPointsUncOffset);
    fbBuilder.addOffset(15, extinctionCoeffsOffset);
    fbBuilder.addOffset(16, extinctionCoeffsUncOffset);
    fbBuilder.addOffset(17, colorCoeffsOffset);
    fbBuilder.addInt32(18, _numNeutralDensityFilters);
    fbBuilder.addOffset(19, neutralDensityFilterNamesOffset);
    fbBuilder.addOffset(20, neutralDensityFilterTransmissionsOffset);
    fbBuilder.addOffset(21, neutralDensityFilterTransmissionsUncOffset);
    fbBuilder.addFloat64(22, _gain);
    fbBuilder.addFloat64(23, _ifov);
    fbBuilder.addInt32(24, _pixelArrayWidth);
    fbBuilder.addInt32(25, _pixelArrayHeight);
    fbBuilder.addInt32(26, _pixelMin);
    fbBuilder.addInt32(27, _pixelMax);
    fbBuilder.addFloat64(28, _centroidRow);
    fbBuilder.addFloat64(29, _centroidColumn);
    fbBuilder.addFloat64(30, _rowVariance);
    fbBuilder.addFloat64(31, _columnVariance);
    fbBuilder.addFloat64(32, _rowColCov);
    fbBuilder.addOffset(33, distFromStreakCenterOffset);
    fbBuilder.addOffset(34, surfBrightnessOffset);
    fbBuilder.addOffset(35, surfBrightnessUncOffset);
    fbBuilder.addFloat64(36, _timesUnc);
    fbBuilder.addFloat64(37, _ccdTemp);
    fbBuilder.addInt32(38, _currentSpectralFilterNum);
    fbBuilder.addInt32(39, _currentNeutralDensityFilterNum);
    fbBuilder.addInt32(40, _binningHoriz);
    fbBuilder.addInt32(41, _binningVert);
    fbBuilder.addInt32(42, _pcalNumStars);
    fbBuilder.addFloat64(43, _ccdObjPosX);
    fbBuilder.addFloat64(44, _ccdObjPosY);
    fbBuilder.addFloat64(45, _ccdObjWidth);
    fbBuilder.addFloat64(46, _backgroundSignal);
    fbBuilder.addFloat64(47, _backgroundSignalUnc);
    fbBuilder.addFloat64(48, _peakApertureCount);
    fbBuilder.addInt32(49, _peakBackgroundCount);
    fbBuilder.addFloat64(50, _snrEst);
    fbBuilder.addFloat64(51, _magInstrumental);
    fbBuilder.addFloat64(52, _magInstrumentalUnc);
    fbBuilder.addFloat64(53, _opticalCrossSection);
    fbBuilder.addFloat64(54, _opticalCrossSectionUnc);
    fbBuilder.addFloat64(55, _sunStatePosX);
    fbBuilder.addFloat64(56, _sunStatePosY);
    fbBuilder.addFloat64(57, _sunStatePosZ);
    fbBuilder.addFloat64(58, _sunStateVelX);
    fbBuilder.addFloat64(59, _sunStateVelY);
    fbBuilder.addFloat64(60, _sunStateVelZ);
    fbBuilder.addInt32(61, _numCatalogStars);
    fbBuilder.addInt32(62, _numDetectedStars);
    fbBuilder.addInt32(63, _numCorrelatedStars);
    fbBuilder.addFloat64(64, _predictedRaUnc);
    fbBuilder.addFloat64(65, _predictedDeclinationUnc);
    fbBuilder.addFloat64(66, _raCov);
    fbBuilder.addFloat64(67, _declinationCov);
    fbBuilder.addFloat64(68, _raDeclinationCov);
    fbBuilder.addFloat64(69, _acalCrPixX);
    fbBuilder.addFloat64(70, _acalCrPixY);
    fbBuilder.addFloat64(71, _acalCrValX);
    fbBuilder.addFloat64(72, _acalCrValY);
    fbBuilder.addInt32(73, _acalNumStars);
    fbBuilder.addFloat64(74, _objSunRange);
    fbBuilder.addFloat64(75, _phaseAngBisect);
    fbBuilder.addFloat64(76, _solarDiskFrac);
    fbBuilder.addFloat64(77, _toes);
    fbBuilder.addFloat64(78, _does);
    fbBuilder.addOffset(79, sourceOffset);
    fbBuilder.addInt8(80, _dataMode?.value);
    fbBuilder.addOffset(81, createdAtOffset);
    fbBuilder.addOffset(82, createdByOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
