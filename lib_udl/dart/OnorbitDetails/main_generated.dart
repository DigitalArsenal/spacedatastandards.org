// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class OnorbitDetailsDataModeEnum {
  final int value;
  const OnorbitDetailsDataModeEnum._(this.value);

  factory OnorbitDetailsDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OnorbitDetailsDataModeEnum');
    }
    return result;
  }

  static OnorbitDetailsDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : OnorbitDetailsDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const OnorbitDetailsDataModeEnum REAL = OnorbitDetailsDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const OnorbitDetailsDataModeEnum TEST = OnorbitDetailsDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const OnorbitDetailsDataModeEnum SIMULATED = OnorbitDetailsDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const OnorbitDetailsDataModeEnum EXERCISE = OnorbitDetailsDataModeEnum._(3);
  static const Map<int, OnorbitDetailsDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<OnorbitDetailsDataModeEnum> reader = _OnorbitDetailsDataModeEnumReader();

  @override
  String toString() {
    return 'OnorbitDetailsDataModeEnum{value: $value}';
  }
}

class _OnorbitDetailsDataModeEnumReader extends fb.Reader<OnorbitDetailsDataModeEnum> {
  const _OnorbitDetailsDataModeEnumReader();

  @override
  int get size => 1;

  @override
  OnorbitDetailsDataModeEnum read(fb.BufferContext bc, int offset) =>
      OnorbitDetailsDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Contains details of the OnOrbit object.
class OnorbitDetails {
  OnorbitDetails._(this._bc, this._bcOffset);
  factory OnorbitDetails(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OnorbitDetails> reader = _OnorbitDetailsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ONORBITDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  UUID of the parent Onorbit record.
  ///  Example: /// Example: REF-ONORBIT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get lastObTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Current/latest visual magnitude in M.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get vismag => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Minimum visual magnitude in M.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  double get vismagMin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Maximum visual magnitude in M.
  ///  Example: /// Example: 15.23
  ///  Constraints: No constraints specified.
  double get vismagMax => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Mean visual magnitude in M.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get vismagMean => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Current/latest radar cross section in meters squared.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get rcs => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Minimum radar cross section in meters squared.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  double get rcsMin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Maximum radar cross section in meters squared.
  ///  Example: /// Example: 15.23
  ///  Constraints: No constraints specified.
  double get rcsMax => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Mean radar cross section in meters squared.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get rcsMean => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  The total beginning of life delta V of the spacecraft, in meters per second.
  ///  Example: /// Example: 1000.1
  ///  Constraints: No constraints specified.
  double get bolDeltaV => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Maximum delta V available for this on-orbit spacecraft, in meters per second.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get maxDeltaV => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
  ///  Example: /// Example: 50.1
  ///  Constraints: No constraints specified.
  double get deltaVunc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Estimated maximum burn duration for the object, in seconds.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get estDeltaVduration => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  The number of distinct missions the spacecraft performs.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get numMission => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 36, 0);
  ///  Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
  ///  Example: /// Example: ['Weather', 'Space Weather']
  ///  Constraints: No constraints specified.
  List<String>? get missionTypes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 38);
  ///  Type of the bus on the spacecraft.
  ///  Example: /// Example: A2100
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get busType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
  ///  Example: /// Example: 90.23
  ///  Constraints: No constraints specified.
  double get geoSlot => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  GEO drift rate, if applicable in degrees per day.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get driftRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Spacecraft dry mass (without fuel or disposables) in kilograms.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get dryMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Mass of fuel and disposables at launch time in kilograms.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get additionalMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  double get launchMassMin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Nominal mass of spacecraft and fuel at launch time, in kilograms.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get launchMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
  ///  Example: /// Example: 15.23
  ///  Constraints: No constraints specified.
  double get launchMassMax => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Spacecraft beginning of life fuel mass, in orbit, in kilograms.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get bolFuelMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  The estimated total current mass of the spacecraft, in kilograms.
  ///  Example: /// Example: 500
  ///  Constraints: No constraints specified.
  double get currentMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
  ///  Example: /// Example: 50.1
  ///  Constraints: No constraints specified.
  double get totalMassUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Spacecraft deployed area of solar array in meters squared.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get solarArrayArea => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get maneuverable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 64, false);
  ///  Estimated remaining fuel for the object in kilograms.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get fuelRemaining => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Average cross sectional area in meters squared.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get crossSection => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Average cross sectional area of the bus in meters squared.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get busCrossSection => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get maxRadius => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get colaRadius => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get adeptRadius => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  The number of sub-satellites or deployable objects on the spacecraft.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get numDeployable => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 78, 0);
  ///  Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
  ///  Example: /// Example: ['GOES-18A', 'GOES-18B']
  ///  Constraints: No constraints specified.
  List<String>? get depNames => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 80);
  ///  Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
  ///  Example: /// Example: [20, 21]
  ///  Constraints: No constraints specified.
  List<String>? get depEstMasses => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 82);
  ///  Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
  ///  Example: /// Example: [10, 5]
  ///  Constraints: No constraints specified.
  List<String>? get depMassUncs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 84);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  The name of the source who last provided an observation for this idOnOrbit.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get lastObSource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  OnorbitDetailsDataModeEnum get dataMode => OnorbitDetailsDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 92, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);

  @override
  String toString() {
    return 'OnorbitDetails{id: ${id}, idOnOrbit: ${idOnOrbit}, classificationMarking: ${classificationMarking}, lastObTime: ${lastObTime}, vismag: ${vismag}, vismagMin: ${vismagMin}, vismagMax: ${vismagMax}, vismagMean: ${vismagMean}, rcs: ${rcs}, rcsMin: ${rcsMin}, rcsMax: ${rcsMax}, rcsMean: ${rcsMean}, bolDeltaV: ${bolDeltaV}, maxDeltaV: ${maxDeltaV}, deltaVunc: ${deltaVunc}, estDeltaVduration: ${estDeltaVduration}, numMission: ${numMission}, missionTypes: ${missionTypes}, busType: ${busType}, geoSlot: ${geoSlot}, driftRate: ${driftRate}, dryMass: ${dryMass}, additionalMass: ${additionalMass}, launchMassMin: ${launchMassMin}, launchMass: ${launchMass}, launchMassMax: ${launchMassMax}, bolFuelMass: ${bolFuelMass}, currentMass: ${currentMass}, totalMassUnc: ${totalMassUnc}, solarArrayArea: ${solarArrayArea}, maneuverable: ${maneuverable}, fuelRemaining: ${fuelRemaining}, crossSection: ${crossSection}, busCrossSection: ${busCrossSection}, maxRadius: ${maxRadius}, colaRadius: ${colaRadius}, adeptRadius: ${adeptRadius}, numDeployable: ${numDeployable}, depNames: ${depNames}, depEstMasses: ${depEstMasses}, depMassUncs: ${depMassUncs}, source: ${source}, origin: ${origin}, lastObSource: ${lastObSource}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, origNetwork: ${origNetwork}}';
  }
}

class _OnorbitDetailsReader extends fb.TableReader<OnorbitDetails> {
  const _OnorbitDetailsReader();

  @override
  OnorbitDetails createObject(fb.BufferContext bc, int offset) => 
    OnorbitDetails._(bc, offset);
}

class OnorbitDetailsBuilder {
  OnorbitDetailsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(50);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLastObTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addVismag(double? vismag) {
    fbBuilder.addFloat64(4, vismag);
    return fbBuilder.offset;
  }
  int addVismagMin(double? vismagMin) {
    fbBuilder.addFloat64(5, vismagMin);
    return fbBuilder.offset;
  }
  int addVismagMax(double? vismagMax) {
    fbBuilder.addFloat64(6, vismagMax);
    return fbBuilder.offset;
  }
  int addVismagMean(double? vismagMean) {
    fbBuilder.addFloat64(7, vismagMean);
    return fbBuilder.offset;
  }
  int addRcs(double? rcs) {
    fbBuilder.addFloat64(8, rcs);
    return fbBuilder.offset;
  }
  int addRcsMin(double? rcsMin) {
    fbBuilder.addFloat64(9, rcsMin);
    return fbBuilder.offset;
  }
  int addRcsMax(double? rcsMax) {
    fbBuilder.addFloat64(10, rcsMax);
    return fbBuilder.offset;
  }
  int addRcsMean(double? rcsMean) {
    fbBuilder.addFloat64(11, rcsMean);
    return fbBuilder.offset;
  }
  int addBolDeltaV(double? bolDeltaV) {
    fbBuilder.addFloat64(12, bolDeltaV);
    return fbBuilder.offset;
  }
  int addMaxDeltaV(double? maxDeltaV) {
    fbBuilder.addFloat64(13, maxDeltaV);
    return fbBuilder.offset;
  }
  int addDeltaVunc(double? deltaVunc) {
    fbBuilder.addFloat64(14, deltaVunc);
    return fbBuilder.offset;
  }
  int addEstDeltaVduration(double? estDeltaVduration) {
    fbBuilder.addFloat64(15, estDeltaVduration);
    return fbBuilder.offset;
  }
  int addNumMission(int? numMission) {
    fbBuilder.addInt32(16, numMission);
    return fbBuilder.offset;
  }
  int addMissionTypesOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addBusTypeOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addGeoSlot(double? geoSlot) {
    fbBuilder.addFloat64(19, geoSlot);
    return fbBuilder.offset;
  }
  int addDriftRate(double? driftRate) {
    fbBuilder.addFloat64(20, driftRate);
    return fbBuilder.offset;
  }
  int addDryMass(double? dryMass) {
    fbBuilder.addFloat64(21, dryMass);
    return fbBuilder.offset;
  }
  int addAdditionalMass(double? additionalMass) {
    fbBuilder.addFloat64(22, additionalMass);
    return fbBuilder.offset;
  }
  int addLaunchMassMin(double? launchMassMin) {
    fbBuilder.addFloat64(23, launchMassMin);
    return fbBuilder.offset;
  }
  int addLaunchMass(double? launchMass) {
    fbBuilder.addFloat64(24, launchMass);
    return fbBuilder.offset;
  }
  int addLaunchMassMax(double? launchMassMax) {
    fbBuilder.addFloat64(25, launchMassMax);
    return fbBuilder.offset;
  }
  int addBolFuelMass(double? bolFuelMass) {
    fbBuilder.addFloat64(26, bolFuelMass);
    return fbBuilder.offset;
  }
  int addCurrentMass(double? currentMass) {
    fbBuilder.addFloat64(27, currentMass);
    return fbBuilder.offset;
  }
  int addTotalMassUnc(double? totalMassUnc) {
    fbBuilder.addFloat64(28, totalMassUnc);
    return fbBuilder.offset;
  }
  int addSolarArrayArea(double? solarArrayArea) {
    fbBuilder.addFloat64(29, solarArrayArea);
    return fbBuilder.offset;
  }
  int addManeuverable(bool? maneuverable) {
    fbBuilder.addBool(30, maneuverable);
    return fbBuilder.offset;
  }
  int addFuelRemaining(double? fuelRemaining) {
    fbBuilder.addFloat64(31, fuelRemaining);
    return fbBuilder.offset;
  }
  int addCrossSection(double? crossSection) {
    fbBuilder.addFloat64(32, crossSection);
    return fbBuilder.offset;
  }
  int addBusCrossSection(double? busCrossSection) {
    fbBuilder.addFloat64(33, busCrossSection);
    return fbBuilder.offset;
  }
  int addMaxRadius(double? maxRadius) {
    fbBuilder.addFloat64(34, maxRadius);
    return fbBuilder.offset;
  }
  int addColaRadius(double? colaRadius) {
    fbBuilder.addFloat64(35, colaRadius);
    return fbBuilder.offset;
  }
  int addAdeptRadius(double? adeptRadius) {
    fbBuilder.addFloat64(36, adeptRadius);
    return fbBuilder.offset;
  }
  int addNumDeployable(int? numDeployable) {
    fbBuilder.addInt32(37, numDeployable);
    return fbBuilder.offset;
  }
  int addDepNamesOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addDepEstMassesOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addDepMassUncsOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addLastObSourceOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addDataMode(OnorbitDetailsDataModeEnum? dataMode) {
    fbBuilder.addInt8(44, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OnorbitDetailsObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idOnOrbit;
  final String? _classificationMarking;
  final String? _lastObTime;
  final double? _vismag;
  final double? _vismagMin;
  final double? _vismagMax;
  final double? _vismagMean;
  final double? _rcs;
  final double? _rcsMin;
  final double? _rcsMax;
  final double? _rcsMean;
  final double? _bolDeltaV;
  final double? _maxDeltaV;
  final double? _deltaVunc;
  final double? _estDeltaVduration;
  final int? _numMission;
  final List<String>? _missionTypes;
  final String? _busType;
  final double? _geoSlot;
  final double? _driftRate;
  final double? _dryMass;
  final double? _additionalMass;
  final double? _launchMassMin;
  final double? _launchMass;
  final double? _launchMassMax;
  final double? _bolFuelMass;
  final double? _currentMass;
  final double? _totalMassUnc;
  final double? _solarArrayArea;
  final bool? _maneuverable;
  final double? _fuelRemaining;
  final double? _crossSection;
  final double? _busCrossSection;
  final double? _maxRadius;
  final double? _colaRadius;
  final double? _adeptRadius;
  final int? _numDeployable;
  final List<String>? _depNames;
  final List<String>? _depEstMasses;
  final List<String>? _depMassUncs;
  final String? _source;
  final String? _origin;
  final String? _lastObSource;
  final OnorbitDetailsDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _origNetwork;

  OnorbitDetailsObjectBuilder({
    String? id,
    String? idOnOrbit,
    String? classificationMarking,
    String? lastObTime,
    double? vismag,
    double? vismagMin,
    double? vismagMax,
    double? vismagMean,
    double? rcs,
    double? rcsMin,
    double? rcsMax,
    double? rcsMean,
    double? bolDeltaV,
    double? maxDeltaV,
    double? deltaVunc,
    double? estDeltaVduration,
    int? numMission,
    List<String>? missionTypes,
    String? busType,
    double? geoSlot,
    double? driftRate,
    double? dryMass,
    double? additionalMass,
    double? launchMassMin,
    double? launchMass,
    double? launchMassMax,
    double? bolFuelMass,
    double? currentMass,
    double? totalMassUnc,
    double? solarArrayArea,
    bool? maneuverable,
    double? fuelRemaining,
    double? crossSection,
    double? busCrossSection,
    double? maxRadius,
    double? colaRadius,
    double? adeptRadius,
    int? numDeployable,
    List<String>? depNames,
    List<String>? depEstMasses,
    List<String>? depMassUncs,
    String? source,
    String? origin,
    String? lastObSource,
    OnorbitDetailsDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? origNetwork,
  })
      : _id = id,
        _idOnOrbit = idOnOrbit,
        _classificationMarking = classificationMarking,
        _lastObTime = lastObTime,
        _vismag = vismag,
        _vismagMin = vismagMin,
        _vismagMax = vismagMax,
        _vismagMean = vismagMean,
        _rcs = rcs,
        _rcsMin = rcsMin,
        _rcsMax = rcsMax,
        _rcsMean = rcsMean,
        _bolDeltaV = bolDeltaV,
        _maxDeltaV = maxDeltaV,
        _deltaVunc = deltaVunc,
        _estDeltaVduration = estDeltaVduration,
        _numMission = numMission,
        _missionTypes = missionTypes,
        _busType = busType,
        _geoSlot = geoSlot,
        _driftRate = driftRate,
        _dryMass = dryMass,
        _additionalMass = additionalMass,
        _launchMassMin = launchMassMin,
        _launchMass = launchMass,
        _launchMassMax = launchMassMax,
        _bolFuelMass = bolFuelMass,
        _currentMass = currentMass,
        _totalMassUnc = totalMassUnc,
        _solarArrayArea = solarArrayArea,
        _maneuverable = maneuverable,
        _fuelRemaining = fuelRemaining,
        _crossSection = crossSection,
        _busCrossSection = busCrossSection,
        _maxRadius = maxRadius,
        _colaRadius = colaRadius,
        _adeptRadius = adeptRadius,
        _numDeployable = numDeployable,
        _depNames = depNames,
        _depEstMasses = depEstMasses,
        _depMassUncs = depMassUncs,
        _source = source,
        _origin = origin,
        _lastObSource = lastObSource,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? lastObTimeOffset = _lastObTime == null ? null
        : fbBuilder.writeString(_lastObTime!);
    final int? missionTypesOffset = _missionTypes == null ? null
        : fbBuilder.writeList(_missionTypes!.map(fbBuilder.writeString).toList());
    final int? busTypeOffset = _busType == null ? null
        : fbBuilder.writeString(_busType!);
    final int? depNamesOffset = _depNames == null ? null
        : fbBuilder.writeList(_depNames!.map(fbBuilder.writeString).toList());
    final int? depEstMassesOffset = _depEstMasses == null ? null
        : fbBuilder.writeList(_depEstMasses!.map(fbBuilder.writeString).toList());
    final int? depMassUncsOffset = _depMassUncs == null ? null
        : fbBuilder.writeList(_depMassUncs!.map(fbBuilder.writeString).toList());
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? lastObSourceOffset = _lastObSource == null ? null
        : fbBuilder.writeString(_lastObSource!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(50);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idOnOrbitOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, lastObTimeOffset);
    fbBuilder.addFloat64(4, _vismag);
    fbBuilder.addFloat64(5, _vismagMin);
    fbBuilder.addFloat64(6, _vismagMax);
    fbBuilder.addFloat64(7, _vismagMean);
    fbBuilder.addFloat64(8, _rcs);
    fbBuilder.addFloat64(9, _rcsMin);
    fbBuilder.addFloat64(10, _rcsMax);
    fbBuilder.addFloat64(11, _rcsMean);
    fbBuilder.addFloat64(12, _bolDeltaV);
    fbBuilder.addFloat64(13, _maxDeltaV);
    fbBuilder.addFloat64(14, _deltaVunc);
    fbBuilder.addFloat64(15, _estDeltaVduration);
    fbBuilder.addInt32(16, _numMission);
    fbBuilder.addOffset(17, missionTypesOffset);
    fbBuilder.addOffset(18, busTypeOffset);
    fbBuilder.addFloat64(19, _geoSlot);
    fbBuilder.addFloat64(20, _driftRate);
    fbBuilder.addFloat64(21, _dryMass);
    fbBuilder.addFloat64(22, _additionalMass);
    fbBuilder.addFloat64(23, _launchMassMin);
    fbBuilder.addFloat64(24, _launchMass);
    fbBuilder.addFloat64(25, _launchMassMax);
    fbBuilder.addFloat64(26, _bolFuelMass);
    fbBuilder.addFloat64(27, _currentMass);
    fbBuilder.addFloat64(28, _totalMassUnc);
    fbBuilder.addFloat64(29, _solarArrayArea);
    fbBuilder.addBool(30, _maneuverable);
    fbBuilder.addFloat64(31, _fuelRemaining);
    fbBuilder.addFloat64(32, _crossSection);
    fbBuilder.addFloat64(33, _busCrossSection);
    fbBuilder.addFloat64(34, _maxRadius);
    fbBuilder.addFloat64(35, _colaRadius);
    fbBuilder.addFloat64(36, _adeptRadius);
    fbBuilder.addInt32(37, _numDeployable);
    fbBuilder.addOffset(38, depNamesOffset);
    fbBuilder.addOffset(39, depEstMassesOffset);
    fbBuilder.addOffset(40, depMassUncsOffset);
    fbBuilder.addOffset(41, sourceOffset);
    fbBuilder.addOffset(42, originOffset);
    fbBuilder.addOffset(43, lastObSourceOffset);
    fbBuilder.addInt8(44, _dataMode?.value);
    fbBuilder.addOffset(45, createdAtOffset);
    fbBuilder.addOffset(46, createdByOffset);
    fbBuilder.addOffset(47, updatedAtOffset);
    fbBuilder.addOffset(48, updatedByOffset);
    fbBuilder.addOffset(49, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
