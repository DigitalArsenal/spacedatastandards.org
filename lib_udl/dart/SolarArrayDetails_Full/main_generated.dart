// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SolarArrayDetailsFullDataModeEnum {
  final int value;
  const SolarArrayDetailsFullDataModeEnum._(this.value);

  factory SolarArrayDetailsFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SolarArrayDetailsFullDataModeEnum');
    }
    return result;
  }

  static SolarArrayDetailsFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SolarArrayDetailsFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SolarArrayDetailsFullDataModeEnum REAL = SolarArrayDetailsFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SolarArrayDetailsFullDataModeEnum TEST = SolarArrayDetailsFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SolarArrayDetailsFullDataModeEnum SIMULATED = SolarArrayDetailsFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SolarArrayDetailsFullDataModeEnum EXERCISE = SolarArrayDetailsFullDataModeEnum._(3);
  static const Map<int, SolarArrayDetailsFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SolarArrayDetailsFullDataModeEnum> reader = _SolarArrayDetailsFullDataModeEnumReader();

  @override
  String toString() {
    return 'SolarArrayDetailsFullDataModeEnum{value: $value}';
  }
}

class _SolarArrayDetailsFullDataModeEnumReader extends fb.Reader<SolarArrayDetailsFullDataModeEnum> {
  const _SolarArrayDetailsFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SolarArrayDetailsFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      SolarArrayDetailsFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.
class SolarArrayDetailsFull {
  SolarArrayDetailsFull._(this._bc, this._bcOffset);
  factory SolarArrayDetailsFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SolarArrayDetailsFull> reader = _SolarArrayDetailsFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SOLARARRAYDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Unique identifier of the parent SolarArray.
  ///  Example: /// Example: SOLARARRAY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idSolarArray => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Type of solar array (e.g. U Shaped).
  ///  Example: /// Example: U Shaped
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Solar array technology (e.g. Ga-As).
  ///  Example: /// Example: Ga-As
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get technology => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Solar array junction technology (e.g. Triple).
  ///  Example: /// Example: Triple
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get junctionTechnology => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Unique identifier of the organization that manufactures the solar array.
  ///  Example: /// Example: MANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get manufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Solar Array span in meters.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get span => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Solar Array area in square meters.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get area => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Solar array description/notes.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SolarArrayDetailsFullDataModeEnum get dataMode => SolarArrayDetailsFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 38, 0));
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 40);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get manufacturerOrg => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);

  @override
  String toString() {
    return 'SolarArrayDetailsFull{id: ${id}, idSolarArray: ${idSolarArray}, classificationMarking: ${classificationMarking}, type: ${type}, technology: ${technology}, junctionTechnology: ${junctionTechnology}, manufacturerOrgId: ${manufacturerOrgId}, span: ${span}, area: ${area}, description: ${description}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, tags: ${tags}, manufacturerOrg: ${manufacturerOrg}}';
  }
}

class _SolarArrayDetailsFullReader extends fb.TableReader<SolarArrayDetailsFull> {
  const _SolarArrayDetailsFullReader();

  @override
  SolarArrayDetailsFull createObject(fb.BufferContext bc, int offset) => 
    SolarArrayDetailsFull._(bc, offset);
}

class SolarArrayDetailsFullBuilder {
  SolarArrayDetailsFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(20);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdSolarArrayOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTechnologyOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addJunctionTechnologyOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addSpan(double? span) {
    fbBuilder.addFloat64(7, span);
    return fbBuilder.offset;
  }
  int addArea(double? area) {
    fbBuilder.addFloat64(8, area);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SolarArrayDetailsFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(17, dataMode?.value);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addManufacturerOrgOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SolarArrayDetailsFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idSolarArray;
  final String? _classificationMarking;
  final String? _type;
  final String? _technology;
  final String? _junctionTechnology;
  final String? _manufacturerOrgId;
  final double? _span;
  final double? _area;
  final String? _description;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SolarArrayDetailsFullDataModeEnum? _dataMode;
  final List<String>? _tags;
  final String? _manufacturerOrg;

  SolarArrayDetailsFullObjectBuilder({
    String? id,
    String? idSolarArray,
    String? classificationMarking,
    String? type,
    String? technology,
    String? junctionTechnology,
    String? manufacturerOrgId,
    double? span,
    double? area,
    String? description,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    SolarArrayDetailsFullDataModeEnum? dataMode,
    List<String>? tags,
    String? manufacturerOrg,
  })
      : _id = id,
        _idSolarArray = idSolarArray,
        _classificationMarking = classificationMarking,
        _type = type,
        _technology = technology,
        _junctionTechnology = junctionTechnology,
        _manufacturerOrgId = manufacturerOrgId,
        _span = span,
        _area = area,
        _description = description,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _tags = tags,
        _manufacturerOrg = manufacturerOrg;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idSolarArrayOffset = _idSolarArray == null ? null
        : fbBuilder.writeString(_idSolarArray!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? technologyOffset = _technology == null ? null
        : fbBuilder.writeString(_technology!);
    final int? junctionTechnologyOffset = _junctionTechnology == null ? null
        : fbBuilder.writeString(_junctionTechnology!);
    final int? manufacturerOrgIdOffset = _manufacturerOrgId == null ? null
        : fbBuilder.writeString(_manufacturerOrgId!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? manufacturerOrgOffset = _manufacturerOrg == null ? null
        : fbBuilder.writeString(_manufacturerOrg!);
    fbBuilder.startTable(20);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idSolarArrayOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, typeOffset);
    fbBuilder.addOffset(4, technologyOffset);
    fbBuilder.addOffset(5, junctionTechnologyOffset);
    fbBuilder.addOffset(6, manufacturerOrgIdOffset);
    fbBuilder.addFloat64(7, _span);
    fbBuilder.addFloat64(8, _area);
    fbBuilder.addOffset(9, descriptionOffset);
    fbBuilder.addOffset(10, createdAtOffset);
    fbBuilder.addOffset(11, createdByOffset);
    fbBuilder.addOffset(12, updatedAtOffset);
    fbBuilder.addOffset(13, updatedByOffset);
    fbBuilder.addOffset(14, sourceOffset);
    fbBuilder.addOffset(15, originOffset);
    fbBuilder.addOffset(16, origNetworkOffset);
    fbBuilder.addInt8(17, _dataMode?.value);
    fbBuilder.addOffset(18, tagsOffset);
    fbBuilder.addOffset(19, manufacturerOrgOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
