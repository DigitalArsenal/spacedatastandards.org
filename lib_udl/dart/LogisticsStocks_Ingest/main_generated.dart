// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// The supply stocks for this support item.
class LogisticsStocksIngest {
  LogisticsStocksIngest._(this._bc, this._bcOffset);
  factory LogisticsStocksIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LogisticsStocksIngest> reader = _LogisticsStocksIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The ICAO code for the primary location with available parts.
  ///  Example: /// Example: PHIK
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get sourceIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The quantity of available parts needed from sourceICAO.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  int get quantity => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  ///  The datetime when the parts were sourced, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  String? get stockCheckTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The point of contact at the sourced location.
  ///  Example: /// Example: SMITH, JOHN J
  ///  Constraints: Minimum length = 0, Maximum length = 68
  String? get stockPoc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'LogisticsStocksIngest{sourceIcao: ${sourceIcao}, quantity: ${quantity}, stockCheckTime: ${stockCheckTime}, stockPoc: ${stockPoc}}';
  }
}

class _LogisticsStocksIngestReader extends fb.TableReader<LogisticsStocksIngest> {
  const _LogisticsStocksIngestReader();

  @override
  LogisticsStocksIngest createObject(fb.BufferContext bc, int offset) => 
    LogisticsStocksIngest._(bc, offset);
}

class LogisticsStocksIngestBuilder {
  LogisticsStocksIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addSourceIcaoOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addQuantity(int? quantity) {
    fbBuilder.addInt32(1, quantity);
    return fbBuilder.offset;
  }
  int addStockCheckTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addStockPocOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LogisticsStocksIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _sourceIcao;
  final int? _quantity;
  final String? _stockCheckTime;
  final String? _stockPoc;

  LogisticsStocksIngestObjectBuilder({
    String? sourceIcao,
    int? quantity,
    String? stockCheckTime,
    String? stockPoc,
  })
      : _sourceIcao = sourceIcao,
        _quantity = quantity,
        _stockCheckTime = stockCheckTime,
        _stockPoc = stockPoc;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? sourceIcaoOffset = _sourceIcao == null ? null
        : fbBuilder.writeString(_sourceIcao!);
    final int? stockCheckTimeOffset = _stockCheckTime == null ? null
        : fbBuilder.writeString(_stockCheckTime!);
    final int? stockPocOffset = _stockPoc == null ? null
        : fbBuilder.writeString(_stockPoc!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, sourceIcaoOffset);
    fbBuilder.addInt32(1, _quantity);
    fbBuilder.addOffset(2, stockCheckTimeOffset);
    fbBuilder.addOffset(3, stockPocOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
