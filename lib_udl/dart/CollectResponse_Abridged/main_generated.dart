// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class CollectResponseAbridgedDataModeEnum {
  final int value;
  const CollectResponseAbridgedDataModeEnum._(this.value);

  factory CollectResponseAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum CollectResponseAbridgedDataModeEnum');
    }
    return result;
  }

  static CollectResponseAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : CollectResponseAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const CollectResponseAbridgedDataModeEnum REAL = CollectResponseAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const CollectResponseAbridgedDataModeEnum TEST = CollectResponseAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const CollectResponseAbridgedDataModeEnum SIMULATED = CollectResponseAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const CollectResponseAbridgedDataModeEnum EXERCISE = CollectResponseAbridgedDataModeEnum._(3);
  static const Map<int, CollectResponseAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<CollectResponseAbridgedDataModeEnum> reader = _CollectResponseAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'CollectResponseAbridgedDataModeEnum{value: $value}';
  }
}

class _CollectResponseAbridgedDataModeEnumReader extends fb.Reader<CollectResponseAbridgedDataModeEnum> {
  const _CollectResponseAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  CollectResponseAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      CollectResponseAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Collect response supports the response and status of individual collect requests. Each response is referenced by the UUID of the request, and contains information including the status of the request, collection times and types, and reference(s) to the observations collected. There may be multiple responses associated with a request, either from multiple collectors or to relay status changes prior to completion and delivery.
class CollectResponseAbridged {
  CollectResponseAbridged._(this._bc, this._bcOffset);
  factory CollectResponseAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CollectResponseAbridged> reader = _CollectResponseAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: COLLECTRESPONSE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the request associated with this response.
  ///  Example: /// Example: REF-REQUEST-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idRequest => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the target on-orbit object associated with this response.
  ///  Example: /// Example: REF-ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 101
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  Optional task ID associated with the request/response.
  ///  Example: /// Example: TASK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get taskId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Unique identifier of the parent plan or schedule associated with the request/response.
  ///  Example: /// Example: REF-PLAN-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idPlan => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.
  ///  Example: /// Example: EXTERNAL-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):
  ///  ACCEPTED: The collect or contact request has been received and accepted.
  ///  CANCELLED: A previously scheduled collect or contact whose execution was cancelled.
  ///  COLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.
  ///  COMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.
  ///  DELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.
  ///  FAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.
  ///  PARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.
  ///  PROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.
  ///  REJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.
  ///  SCHEDULED: The request was received and has been scheduled for execution.
  ///  Example: /// Example: ACCEPTED
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The actual start time of the collect or contact, in ISO 8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get actualStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The actual end time of the collect or contact, in ISO 8601 UTC format.
  ///  Example: /// Example: 2018-01-01T18:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get actualEndTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Proposed alternative start time, in ISO 8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get altStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Proposed alternative end time, in ISO 8601 UTC format.
  ///  Example: /// Example: 2018-01-01T18:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get altEndTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Error code associated with this request/response.
  ///  Example: /// Example: ERROR CODE
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get errCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
  ///  Example: /// Example: ['DOA', 'DWELL']
  ///  Constraints: No constraints specified.
  List<String>? get srcTyps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  ///  Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
  ///  Example: /// Example: ['DOA_ID', 'DWELL_ID']
  ///  Constraints: No constraints specified.
  List<String>? get srcIds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 36);
  ///  Notes or comments associated with this response.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: REF-SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  CollectResponseAbridgedDataModeEnum get dataMode => CollectResponseAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 54, 0));

  @override
  String toString() {
    return 'CollectResponseAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idRequest: ${idRequest}, idOnOrbit: ${idOnOrbit}, origObjectId: ${origObjectId}, satNo: ${satNo}, taskId: ${taskId}, idPlan: ${idPlan}, externalId: ${externalId}, status: ${status}, actualStartTime: ${actualStartTime}, actualEndTime: ${actualEndTime}, altStartTime: ${altStartTime}, altEndTime: ${altEndTime}, errCode: ${errCode}, srcTyps: ${srcTyps}, srcIds: ${srcIds}, notes: ${notes}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, dataMode: ${dataMode}}';
  }
}

class _CollectResponseAbridgedReader extends fb.TableReader<CollectResponseAbridged> {
  const _CollectResponseAbridgedReader();

  @override
  CollectResponseAbridged createObject(fb.BufferContext bc, int offset) => 
    CollectResponseAbridged._(bc, offset);
}

class CollectResponseAbridgedBuilder {
  CollectResponseAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(26);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdRequestOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(5, satNo);
    return fbBuilder.offset;
  }
  int addTaskIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addIdPlanOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addActualStartTimeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addActualEndTimeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addAltStartTimeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addAltEndTimeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addErrCodeOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addSrcTypsOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addSrcIdsOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addDataMode(CollectResponseAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(25, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CollectResponseAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idRequest;
  final String? _idOnOrbit;
  final String? _origObjectId;
  final int? _satNo;
  final String? _taskId;
  final String? _idPlan;
  final String? _externalId;
  final String? _status;
  final String? _actualStartTime;
  final String? _actualEndTime;
  final String? _altStartTime;
  final String? _altEndTime;
  final String? _errCode;
  final List<String>? _srcTyps;
  final List<String>? _srcIds;
  final String? _notes;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final String? _idSensor;
  final String? _origSensorId;
  final CollectResponseAbridgedDataModeEnum? _dataMode;

  CollectResponseAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idRequest,
    String? idOnOrbit,
    String? origObjectId,
    int? satNo,
    String? taskId,
    String? idPlan,
    String? externalId,
    String? status,
    String? actualStartTime,
    String? actualEndTime,
    String? altStartTime,
    String? altEndTime,
    String? errCode,
    List<String>? srcTyps,
    List<String>? srcIds,
    String? notes,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    String? idSensor,
    String? origSensorId,
    CollectResponseAbridgedDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idRequest = idRequest,
        _idOnOrbit = idOnOrbit,
        _origObjectId = origObjectId,
        _satNo = satNo,
        _taskId = taskId,
        _idPlan = idPlan,
        _externalId = externalId,
        _status = status,
        _actualStartTime = actualStartTime,
        _actualEndTime = actualEndTime,
        _altStartTime = altStartTime,
        _altEndTime = altEndTime,
        _errCode = errCode,
        _srcTyps = srcTyps,
        _srcIds = srcIds,
        _notes = notes,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idRequestOffset = _idRequest == null ? null
        : fbBuilder.writeString(_idRequest!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? taskIdOffset = _taskId == null ? null
        : fbBuilder.writeString(_taskId!);
    final int? idPlanOffset = _idPlan == null ? null
        : fbBuilder.writeString(_idPlan!);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? actualStartTimeOffset = _actualStartTime == null ? null
        : fbBuilder.writeString(_actualStartTime!);
    final int? actualEndTimeOffset = _actualEndTime == null ? null
        : fbBuilder.writeString(_actualEndTime!);
    final int? altStartTimeOffset = _altStartTime == null ? null
        : fbBuilder.writeString(_altStartTime!);
    final int? altEndTimeOffset = _altEndTime == null ? null
        : fbBuilder.writeString(_altEndTime!);
    final int? errCodeOffset = _errCode == null ? null
        : fbBuilder.writeString(_errCode!);
    final int? srcTypsOffset = _srcTyps == null ? null
        : fbBuilder.writeList(_srcTyps!.map(fbBuilder.writeString).toList());
    final int? srcIdsOffset = _srcIds == null ? null
        : fbBuilder.writeList(_srcIds!.map(fbBuilder.writeString).toList());
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    fbBuilder.startTable(26);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idRequestOffset);
    fbBuilder.addOffset(3, idOnOrbitOffset);
    fbBuilder.addOffset(4, origObjectIdOffset);
    fbBuilder.addInt32(5, _satNo);
    fbBuilder.addOffset(6, taskIdOffset);
    fbBuilder.addOffset(7, idPlanOffset);
    fbBuilder.addOffset(8, externalIdOffset);
    fbBuilder.addOffset(9, statusOffset);
    fbBuilder.addOffset(10, actualStartTimeOffset);
    fbBuilder.addOffset(11, actualEndTimeOffset);
    fbBuilder.addOffset(12, altStartTimeOffset);
    fbBuilder.addOffset(13, altEndTimeOffset);
    fbBuilder.addOffset(14, errCodeOffset);
    fbBuilder.addOffset(15, srcTypsOffset);
    fbBuilder.addOffset(16, srcIdsOffset);
    fbBuilder.addOffset(17, notesOffset);
    fbBuilder.addOffset(18, createdAtOffset);
    fbBuilder.addOffset(19, createdByOffset);
    fbBuilder.addOffset(20, sourceOffset);
    fbBuilder.addOffset(21, originOffset);
    fbBuilder.addOffset(22, origNetworkOffset);
    fbBuilder.addOffset(23, idSensorOffset);
    fbBuilder.addOffset(24, origSensorIdOffset);
    fbBuilder.addInt8(25, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
