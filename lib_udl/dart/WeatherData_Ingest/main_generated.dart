// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class WeatherDataIngestDataModeEnum {
  final int value;
  const WeatherDataIngestDataModeEnum._(this.value);

  factory WeatherDataIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum WeatherDataIngestDataModeEnum');
    }
    return result;
  }

  static WeatherDataIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : WeatherDataIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const WeatherDataIngestDataModeEnum REAL = WeatherDataIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const WeatherDataIngestDataModeEnum TEST = WeatherDataIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const WeatherDataIngestDataModeEnum SIMULATED = WeatherDataIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const WeatherDataIngestDataModeEnum EXERCISE = WeatherDataIngestDataModeEnum._(3);
  static const Map<int, WeatherDataIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<WeatherDataIngestDataModeEnum> reader = _WeatherDataIngestDataModeEnumReader();

  @override
  String toString() {
    return 'WeatherDataIngestDataModeEnum{value: $value}';
  }
}

class _WeatherDataIngestDataModeEnumReader extends fb.Reader<WeatherDataIngestDataModeEnum> {
  const _WeatherDataIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  WeatherDataIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      WeatherDataIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// These services provide for posting and querying Weather Data. Weather Data integrates dynamic data measured by Doppler/CG such as signal power and noise levels, to produce useful weather information.
class WeatherDataIngest {
  WeatherDataIngest._(this._bc, this._bcOffset);
  factory WeatherDataIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WeatherDataIngest> reader = _WeatherDataIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: WEATHER-DATA-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the sensor making the weather measurement.
  ///  Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get obTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Array of signal power(s) measured by the sensor, in decibels. Users should consult the data provider for information on the signal powers array structure.
  ///  Example: /// Example: [116.5, 121.6]
  ///  Constraints: No constraints specified.
  List<String>? get sigPwrs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);
  ///  Array of noise level(s) measured by radar, in decibels. Users should consult the data provider for information on the noise levels array structure.
  ///  Example: /// Example: [58.2, 58.3]
  ///  Constraints: No constraints specified.
  List<String>? get noiseLvls => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 16);
  ///  Array of width(s) of the distribution in Doppler velocity measured by radar, in meters/second. Spectral width depends on the particle size distribution, the wind shear across the radar beam, and turbulence. Users should consult the data provider for information on the spectral widths array structure.
  ///  Example: /// Example: [0.3, 0.6]
  ///  Constraints: No constraints specified.
  List<String>? get specWidths => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 18);
  ///  Array of average maximum number(s) of consecutive instances in which the same first guess velocity is used in radar data processing to estimate wind speed. Users should consult the data provider for information on the first guess averages array structure.
  ///  Example: /// Example: [16, 1]
  ///  Constraints: No constraints specified.
  List<String>? get firstGuessAvgs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);
  ///  Quality control flag value, as defined by the data provider.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  int get qcValue => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 22, 0);
  ///  Datetime the system files were created.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get fileCreation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Last altitude with recorded measurements in this record, in meters.
  ///  Example: /// Example: 19505.1
  ///  Constraints: No constraints specified.
  double get termAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Average transmitted power of the radar, in kilowatts.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get avgTxPwr => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Average power of the reflected signal received by the radar, in Watts.
  ///  Example: /// Example: 714.9
  ///  Constraints: No constraints specified.
  double get avgRefPwr => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Number of sectors within the radar coverage area, each containing a number of antennas.
  ///  Example: /// Example: 20
  ///  Constraints: No constraints specified.
  int get sectorNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Number of antennas across all sectors within the radar coverage area.
  ///  Example: /// Example: 640
  ///  Constraints: No constraints specified.
  int get numElements => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Array of the number(s) of radar samples used in time domain averaging for radar data processing. Time domain averaging improves the quality of the measured signal by reducing random noise and enhancing the signal-to-noise ratio. Users should consult the data provider for information on the time domain sample numbers array structure.
  ///  Example: /// Example: [32, 30]
  ///  Constraints: No constraints specified.
  List<String>? get tdAvgSampleNums => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 36);
  ///  Checksum value for the data.
  ///  Example: /// Example: 133
  ///  Constraints: No constraints specified.
  int get checksum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 38, 0);
  ///  Array of the number(s) of measurements used in coherent integrations used for radar data processing. Users should consult the data provider for information on the coherent integrations array structure.
  ///  Example: /// Example: [4, 3]
  ///  Constraints: No constraints specified.
  List<String>? get coIntegs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 40);
  ///  Array of the number(s) of spectral averages used in radar data processing. Users should consult the data provider for information on the spectral averages array structure.
  ///  Example: /// Example: [4, 3]
  ///  Constraints: No constraints specified.
  List<String>? get specAvgs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  Array of the elapsed time(s) from the beginning of one pulse to the beginning of the next pulse for a radar beam, in microseconds. Users should consult the data provider for information on the interpulse periods array structure.
  ///  Example: /// Example: [1000.3, 1000.2]
  ///  Constraints: No constraints specified.
  List<String>? get interpulsePeriods => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);
  ///  Array of full scale Nyquist Doppler velocities measured by radar, in meters per second. Nyquist velocity refers to the maximum velocity magnitude that the radar system can unambiguously detect. Doppler velocities with absolute values exceeding the Nyquist threshold suffer from aliasing at the time of collection. Users should consult the data provider for information on the doppler velocities array structure.
  ///  Example: /// Example: [44.4, 467.3]
  ///  Constraints: No constraints specified.
  List<String>? get doppVels => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 46);
  ///  Array of the number(s) of records in consensus for a radar beam. Users should consult the data provider for information on the consensus records array structure.
  ///  Example: /// Example: [5, 2]
  ///  Constraints: No constraints specified.
  List<String>? get consRecs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 48);
  ///  Array of signal to noise ratio(s) for a radar beam, in decibels. Users should consult the data provider for information on the signal to noise ratios array structure.
  ///  Example: /// Example: [14.5, -16.2]
  ///  Constraints: No constraints specified.
  List<String>? get snrs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 50);
  ///  Signal strength of the electromagnetic energy received due to a lightning event, in kiloamps.
  ///  Example: /// Example: 163.7
  ///  Constraints: No constraints specified.
  double get sigStrength => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Semi-major axis of the 50% positional confidence ellipse, in kilometers.
  ///  Example: /// Example: 3.4
  ///  Constraints: No constraints specified.
  double get semiMajorAxis => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Semi-minor axis of the 50% positional confidence ellipse, in kilometers.
  ///  Example: /// Example: 0.3
  ///  Constraints: No constraints specified.
  double get semiMinorAxis => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Angle of orientation of the 50% positional confidence ellipse, in degrees clockwise from true north.
  ///  Example: /// Example: 75.7
  ///  Constraints: No constraints specified.
  double get angleOrientation => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Number of sensors used in the lightning event location solution.
  ///  Example: /// Example: 9
  ///  Constraints: No constraints specified.
  int get lightEventNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 60, 0);
  ///  Array of sensor(s) that participated in the lightning event location determination.
  ///  Example: /// Example: [11, 28, 190]
  ///  Constraints: No constraints specified.
  List<String>? get lightDetSensors => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 62);
  ///  The positional confidence of the calculated lightning event location using the chi-square statistical method.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  double get posConfidence => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this WeatherData record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['SENSOR', 'WEATHERREPORT']
  ///  Constraints: No constraints specified.
  List<String>? get srcTyps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 66);
  ///  Array of UUID(s) of the UDL data record(s) that are related to this WeatherData record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  ///  Example: /// Example: ['1b23ba93-0957-4654-b5ca-8c3703f3ec57', '32944ee4-0437-4d94-95ce-2f2823ffa001']
  ///  Constraints: No constraints specified.
  List<String>? get srcIds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 68);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  WeatherDataIngestDataModeEnum get dataMode => WeatherDataIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 80, 0));

  @override
  String toString() {
    return 'WeatherDataIngest{id: ${id}, classificationMarking: ${classificationMarking}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, obTime: ${obTime}, sigPwrs: ${sigPwrs}, noiseLvls: ${noiseLvls}, specWidths: ${specWidths}, firstGuessAvgs: ${firstGuessAvgs}, qcValue: ${qcValue}, fileCreation: ${fileCreation}, termAlt: ${termAlt}, avgTxPwr: ${avgTxPwr}, avgRefPwr: ${avgRefPwr}, sectorNum: ${sectorNum}, numElements: ${numElements}, tdAvgSampleNums: ${tdAvgSampleNums}, checksum: ${checksum}, coIntegs: ${coIntegs}, specAvgs: ${specAvgs}, interpulsePeriods: ${interpulsePeriods}, doppVels: ${doppVels}, consRecs: ${consRecs}, snrs: ${snrs}, sigStrength: ${sigStrength}, semiMajorAxis: ${semiMajorAxis}, semiMinorAxis: ${semiMinorAxis}, angleOrientation: ${angleOrientation}, lightEventNum: ${lightEventNum}, lightDetSensors: ${lightDetSensors}, posConfidence: ${posConfidence}, srcTyps: ${srcTyps}, srcIds: ${srcIds}, origNetwork: ${origNetwork}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}}';
  }
}

class _WeatherDataIngestReader extends fb.TableReader<WeatherDataIngest> {
  const _WeatherDataIngestReader();

  @override
  WeatherDataIngest createObject(fb.BufferContext bc, int offset) => 
    WeatherDataIngest._(bc, offset);
}

class WeatherDataIngestBuilder {
  WeatherDataIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(39);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addObTimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSigPwrsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addNoiseLvlsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addSpecWidthsOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addFirstGuessAvgsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addQcValue(int? qcValue) {
    fbBuilder.addInt32(9, qcValue);
    return fbBuilder.offset;
  }
  int addFileCreationOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addTermAlt(double? termAlt) {
    fbBuilder.addFloat64(11, termAlt);
    return fbBuilder.offset;
  }
  int addAvgTxPwr(double? avgTxPwr) {
    fbBuilder.addFloat64(12, avgTxPwr);
    return fbBuilder.offset;
  }
  int addAvgRefPwr(double? avgRefPwr) {
    fbBuilder.addFloat64(13, avgRefPwr);
    return fbBuilder.offset;
  }
  int addSectorNum(int? sectorNum) {
    fbBuilder.addInt32(14, sectorNum);
    return fbBuilder.offset;
  }
  int addNumElements(int? numElements) {
    fbBuilder.addInt32(15, numElements);
    return fbBuilder.offset;
  }
  int addTdAvgSampleNumsOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addChecksum(int? checksum) {
    fbBuilder.addInt32(17, checksum);
    return fbBuilder.offset;
  }
  int addCoIntegsOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addSpecAvgsOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addInterpulsePeriodsOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addDoppVelsOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addConsRecsOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addSnrsOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addSigStrength(double? sigStrength) {
    fbBuilder.addFloat64(24, sigStrength);
    return fbBuilder.offset;
  }
  int addSemiMajorAxis(double? semiMajorAxis) {
    fbBuilder.addFloat64(25, semiMajorAxis);
    return fbBuilder.offset;
  }
  int addSemiMinorAxis(double? semiMinorAxis) {
    fbBuilder.addFloat64(26, semiMinorAxis);
    return fbBuilder.offset;
  }
  int addAngleOrientation(double? angleOrientation) {
    fbBuilder.addFloat64(27, angleOrientation);
    return fbBuilder.offset;
  }
  int addLightEventNum(int? lightEventNum) {
    fbBuilder.addInt32(28, lightEventNum);
    return fbBuilder.offset;
  }
  int addLightDetSensorsOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addPosConfidence(double? posConfidence) {
    fbBuilder.addFloat64(30, posConfidence);
    return fbBuilder.offset;
  }
  int addSrcTypsOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addSrcIdsOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addDataMode(WeatherDataIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(38, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WeatherDataIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idSensor;
  final String? _origSensorId;
  final String? _obTime;
  final List<String>? _sigPwrs;
  final List<String>? _noiseLvls;
  final List<String>? _specWidths;
  final List<String>? _firstGuessAvgs;
  final int? _qcValue;
  final String? _fileCreation;
  final double? _termAlt;
  final double? _avgTxPwr;
  final double? _avgRefPwr;
  final int? _sectorNum;
  final int? _numElements;
  final List<String>? _tdAvgSampleNums;
  final int? _checksum;
  final List<String>? _coIntegs;
  final List<String>? _specAvgs;
  final List<String>? _interpulsePeriods;
  final List<String>? _doppVels;
  final List<String>? _consRecs;
  final List<String>? _snrs;
  final double? _sigStrength;
  final double? _semiMajorAxis;
  final double? _semiMinorAxis;
  final double? _angleOrientation;
  final int? _lightEventNum;
  final List<String>? _lightDetSensors;
  final double? _posConfidence;
  final List<String>? _srcTyps;
  final List<String>? _srcIds;
  final String? _origNetwork;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final WeatherDataIngestDataModeEnum? _dataMode;

  WeatherDataIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idSensor,
    String? origSensorId,
    String? obTime,
    List<String>? sigPwrs,
    List<String>? noiseLvls,
    List<String>? specWidths,
    List<String>? firstGuessAvgs,
    int? qcValue,
    String? fileCreation,
    double? termAlt,
    double? avgTxPwr,
    double? avgRefPwr,
    int? sectorNum,
    int? numElements,
    List<String>? tdAvgSampleNums,
    int? checksum,
    List<String>? coIntegs,
    List<String>? specAvgs,
    List<String>? interpulsePeriods,
    List<String>? doppVels,
    List<String>? consRecs,
    List<String>? snrs,
    double? sigStrength,
    double? semiMajorAxis,
    double? semiMinorAxis,
    double? angleOrientation,
    int? lightEventNum,
    List<String>? lightDetSensors,
    double? posConfidence,
    List<String>? srcTyps,
    List<String>? srcIds,
    String? origNetwork,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    WeatherDataIngestDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _obTime = obTime,
        _sigPwrs = sigPwrs,
        _noiseLvls = noiseLvls,
        _specWidths = specWidths,
        _firstGuessAvgs = firstGuessAvgs,
        _qcValue = qcValue,
        _fileCreation = fileCreation,
        _termAlt = termAlt,
        _avgTxPwr = avgTxPwr,
        _avgRefPwr = avgRefPwr,
        _sectorNum = sectorNum,
        _numElements = numElements,
        _tdAvgSampleNums = tdAvgSampleNums,
        _checksum = checksum,
        _coIntegs = coIntegs,
        _specAvgs = specAvgs,
        _interpulsePeriods = interpulsePeriods,
        _doppVels = doppVels,
        _consRecs = consRecs,
        _snrs = snrs,
        _sigStrength = sigStrength,
        _semiMajorAxis = semiMajorAxis,
        _semiMinorAxis = semiMinorAxis,
        _angleOrientation = angleOrientation,
        _lightEventNum = lightEventNum,
        _lightDetSensors = lightDetSensors,
        _posConfidence = posConfidence,
        _srcTyps = srcTyps,
        _srcIds = srcIds,
        _origNetwork = origNetwork,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? obTimeOffset = _obTime == null ? null
        : fbBuilder.writeString(_obTime!);
    final int? sigPwrsOffset = _sigPwrs == null ? null
        : fbBuilder.writeList(_sigPwrs!.map(fbBuilder.writeString).toList());
    final int? noiseLvlsOffset = _noiseLvls == null ? null
        : fbBuilder.writeList(_noiseLvls!.map(fbBuilder.writeString).toList());
    final int? specWidthsOffset = _specWidths == null ? null
        : fbBuilder.writeList(_specWidths!.map(fbBuilder.writeString).toList());
    final int? firstGuessAvgsOffset = _firstGuessAvgs == null ? null
        : fbBuilder.writeList(_firstGuessAvgs!.map(fbBuilder.writeString).toList());
    final int? fileCreationOffset = _fileCreation == null ? null
        : fbBuilder.writeString(_fileCreation!);
    final int? tdAvgSampleNumsOffset = _tdAvgSampleNums == null ? null
        : fbBuilder.writeList(_tdAvgSampleNums!.map(fbBuilder.writeString).toList());
    final int? coIntegsOffset = _coIntegs == null ? null
        : fbBuilder.writeList(_coIntegs!.map(fbBuilder.writeString).toList());
    final int? specAvgsOffset = _specAvgs == null ? null
        : fbBuilder.writeList(_specAvgs!.map(fbBuilder.writeString).toList());
    final int? interpulsePeriodsOffset = _interpulsePeriods == null ? null
        : fbBuilder.writeList(_interpulsePeriods!.map(fbBuilder.writeString).toList());
    final int? doppVelsOffset = _doppVels == null ? null
        : fbBuilder.writeList(_doppVels!.map(fbBuilder.writeString).toList());
    final int? consRecsOffset = _consRecs == null ? null
        : fbBuilder.writeList(_consRecs!.map(fbBuilder.writeString).toList());
    final int? snrsOffset = _snrs == null ? null
        : fbBuilder.writeList(_snrs!.map(fbBuilder.writeString).toList());
    final int? lightDetSensorsOffset = _lightDetSensors == null ? null
        : fbBuilder.writeList(_lightDetSensors!.map(fbBuilder.writeString).toList());
    final int? srcTypsOffset = _srcTyps == null ? null
        : fbBuilder.writeList(_srcTyps!.map(fbBuilder.writeString).toList());
    final int? srcIdsOffset = _srcIds == null ? null
        : fbBuilder.writeList(_srcIds!.map(fbBuilder.writeString).toList());
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    fbBuilder.startTable(39);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idSensorOffset);
    fbBuilder.addOffset(3, origSensorIdOffset);
    fbBuilder.addOffset(4, obTimeOffset);
    fbBuilder.addOffset(5, sigPwrsOffset);
    fbBuilder.addOffset(6, noiseLvlsOffset);
    fbBuilder.addOffset(7, specWidthsOffset);
    fbBuilder.addOffset(8, firstGuessAvgsOffset);
    fbBuilder.addInt32(9, _qcValue);
    fbBuilder.addOffset(10, fileCreationOffset);
    fbBuilder.addFloat64(11, _termAlt);
    fbBuilder.addFloat64(12, _avgTxPwr);
    fbBuilder.addFloat64(13, _avgRefPwr);
    fbBuilder.addInt32(14, _sectorNum);
    fbBuilder.addInt32(15, _numElements);
    fbBuilder.addOffset(16, tdAvgSampleNumsOffset);
    fbBuilder.addInt32(17, _checksum);
    fbBuilder.addOffset(18, coIntegsOffset);
    fbBuilder.addOffset(19, specAvgsOffset);
    fbBuilder.addOffset(20, interpulsePeriodsOffset);
    fbBuilder.addOffset(21, doppVelsOffset);
    fbBuilder.addOffset(22, consRecsOffset);
    fbBuilder.addOffset(23, snrsOffset);
    fbBuilder.addFloat64(24, _sigStrength);
    fbBuilder.addFloat64(25, _semiMajorAxis);
    fbBuilder.addFloat64(26, _semiMinorAxis);
    fbBuilder.addFloat64(27, _angleOrientation);
    fbBuilder.addInt32(28, _lightEventNum);
    fbBuilder.addOffset(29, lightDetSensorsOffset);
    fbBuilder.addFloat64(30, _posConfidence);
    fbBuilder.addOffset(31, srcTypsOffset);
    fbBuilder.addOffset(32, srcIdsOffset);
    fbBuilder.addOffset(33, origNetworkOffset);
    fbBuilder.addOffset(34, createdAtOffset);
    fbBuilder.addOffset(35, createdByOffset);
    fbBuilder.addOffset(36, sourceOffset);
    fbBuilder.addOffset(37, originOffset);
    fbBuilder.addInt8(38, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
