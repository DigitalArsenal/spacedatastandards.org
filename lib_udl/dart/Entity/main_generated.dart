// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class EntityTypeEnum {
  final int value;
  const EntityTypeEnum._(this.value);

  factory EntityTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EntityTypeEnum');
    }
    return result;
  }

  static EntityTypeEnum? _createOrNull(int? value) => 
      value == null ? null : EntityTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 10;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const EntityTypeEnum AIRCRAFT = EntityTypeEnum._(0);

  ///  No description available.
  static const EntityTypeEnum BUS = EntityTypeEnum._(1);

  ///  No description available.
  static const EntityTypeEnum COMM = EntityTypeEnum._(2);

  ///  No description available.
  static const EntityTypeEnum IR = EntityTypeEnum._(3);

  ///  No description available.
  static const EntityTypeEnum NAVIGATION = EntityTypeEnum._(4);

  ///  No description available.
  static const EntityTypeEnum ONORBIT = EntityTypeEnum._(5);

  ///  No description available.
  static const EntityTypeEnum RFEMITTER = EntityTypeEnum._(6);

  ///  No description available.
  static const EntityTypeEnum SCIENTIFIC = EntityTypeEnum._(7);

  ///  No description available.
  static const EntityTypeEnum SENSOR = EntityTypeEnum._(8);

  ///  No description available.
  static const EntityTypeEnum SITE = EntityTypeEnum._(9);

  ///  No description available.
  static const EntityTypeEnum VESSEL = EntityTypeEnum._(10);
  static const Map<int, EntityTypeEnum> values = {
    0: AIRCRAFT,
    1: BUS,
    2: COMM,
    3: IR,
    4: NAVIGATION,
    5: ONORBIT,
    6: RFEMITTER,
    7: SCIENTIFIC,
    8: SENSOR,
    9: SITE,
    10: VESSEL};

  static const fb.Reader<EntityTypeEnum> reader = _EntityTypeEnumReader();

  @override
  String toString() {
    return 'EntityTypeEnum{value: $value}';
  }
}

class _EntityTypeEnumReader extends fb.Reader<EntityTypeEnum> {
  const _EntityTypeEnumReader();

  @override
  int get size => 1;

  @override
  EntityTypeEnum read(fb.BufferContext bc, int offset) =>
      EntityTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class EntityOwnerTypeEnum {
  final int value;
  const EntityOwnerTypeEnum._(this.value);

  factory EntityOwnerTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EntityOwnerTypeEnum');
    }
    return result;
  }

  static EntityOwnerTypeEnum? _createOrNull(int? value) => 
      value == null ? null : EntityOwnerTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const EntityOwnerTypeEnum COMMERCIAL = EntityOwnerTypeEnum._(0);

  ///  No description available.
  static const EntityOwnerTypeEnum GOVERNMENT = EntityOwnerTypeEnum._(1);

  ///  No description available.
  static const EntityOwnerTypeEnum ACADEMIC = EntityOwnerTypeEnum._(2);

  ///  No description available.
  static const EntityOwnerTypeEnum CONSORTIUM = EntityOwnerTypeEnum._(3);

  ///  No description available.
  static const EntityOwnerTypeEnum OTHER = EntityOwnerTypeEnum._(4);
  static const Map<int, EntityOwnerTypeEnum> values = {
    0: COMMERCIAL,
    1: GOVERNMENT,
    2: ACADEMIC,
    3: CONSORTIUM,
    4: OTHER};

  static const fb.Reader<EntityOwnerTypeEnum> reader = _EntityOwnerTypeEnumReader();

  @override
  String toString() {
    return 'EntityOwnerTypeEnum{value: $value}';
  }
}

class _EntityOwnerTypeEnumReader extends fb.Reader<EntityOwnerTypeEnum> {
  const _EntityOwnerTypeEnumReader();

  @override
  int get size => 1;

  @override
  EntityOwnerTypeEnum read(fb.BufferContext bc, int offset) =>
      EntityOwnerTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class EntityDataModeEnum {
  final int value;
  const EntityDataModeEnum._(this.value);

  factory EntityDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EntityDataModeEnum');
    }
    return result;
  }

  static EntityDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : EntityDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const EntityDataModeEnum REAL = EntityDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const EntityDataModeEnum TEST = EntityDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const EntityDataModeEnum SIMULATED = EntityDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const EntityDataModeEnum EXERCISE = EntityDataModeEnum._(3);
  static const Map<int, EntityDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<EntityDataModeEnum> reader = _EntityDataModeEnumReader();

  @override
  String toString() {
    return 'EntityDataModeEnum{value: $value}';
  }
}

class _EntityDataModeEnumReader extends fb.Reader<EntityDataModeEnum> {
  const _EntityDataModeEnumReader();

  @override
  int get size => 1;

  @override
  EntityDataModeEnum read(fb.BufferContext bc, int offset) =>
      EntityDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.
class Entity {
  Entity._(this._bc, this._bcOffset);
  factory Entity(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Entity> reader = _EntityReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record.
  ///  Example: /// Example: ENTITY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idEntity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Unique entity name.
  ///  Example: /// Example: Example name
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
  ///  Example: /// Example: ONORBIT
  ///  Constraints: Minimum length = 1, Maximum length = 45
  EntityTypeEnum get type => EntityTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 10, 0));
  ///  Unique identifier of the entity location, if terrestrial/fixed.
  ///  Example: /// Example: LOCATION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idLocation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).
  ///  Example: /// Example: Commercial
  ///  Constraints: Minimum length = 0, Maximum length = 32
  EntityOwnerTypeEnum get ownerType => EntityOwnerTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 16, 0));
  ///  Boolean indicating if this entity is taskable.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get taskable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  ///  List of URLs to additional details/documents for this entity.
  ///  Example: /// Example: ['URL1', 'URL2']
  ///  Constraints: No constraints specified.
  List<String>? get urls => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  EntityDataModeEnum get dataMode => EntityDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 34, 0));
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get location => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get onOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get operatingUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Unique identifier of the associated operating unit object.
  ///  Example: /// Example: OPERATINGUNIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOperatingUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Read-only collection of statuses which can be collected by multiple sources.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get statusCollection => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 48);
  ///  Read-only collection of RF bands utilized by this entity for communication and/or operation.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get rfBands => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 50);

  @override
  String toString() {
    return 'Entity{idEntity: ${idEntity}, name: ${name}, classificationMarking: ${classificationMarking}, type: ${type}, idLocation: ${idLocation}, countryCode: ${countryCode}, ownerType: ${ownerType}, taskable: ${taskable}, urls: ${urls}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, location: ${location}, onOrbit: ${onOrbit}, idOnOrbit: ${idOnOrbit}, operatingUnit: ${operatingUnit}, idOperatingUnit: ${idOperatingUnit}, origNetwork: ${origNetwork}, statusCollection: ${statusCollection}, rfBands: ${rfBands}}';
  }
}

class _EntityReader extends fb.TableReader<Entity> {
  const _EntityReader();

  @override
  Entity createObject(fb.BufferContext bc, int offset) => 
    Entity._(bc, offset);
}

class EntityBuilder {
  EntityBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(24);
  }

  int addIdEntityOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addType(EntityTypeEnum? type) {
    fbBuilder.addInt8(3, type?.value);
    return fbBuilder.offset;
  }
  int addIdLocationOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addOwnerType(EntityOwnerTypeEnum? ownerType) {
    fbBuilder.addInt8(6, ownerType?.value);
    return fbBuilder.offset;
  }
  int addTaskable(bool? taskable) {
    fbBuilder.addBool(7, taskable);
    return fbBuilder.offset;
  }
  int addUrlsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addDataMode(EntityDataModeEnum? dataMode) {
    fbBuilder.addInt8(15, dataMode?.value);
    return fbBuilder.offset;
  }
  int addLocationOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addOperatingUnitOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addIdOperatingUnitOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addStatusCollectionOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addRfBandsOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EntityObjectBuilder extends fb.ObjectBuilder {
  final String? _idEntity;
  final String? _name;
  final String? _classificationMarking;
  final EntityTypeEnum? _type;
  final String? _idLocation;
  final String? _countryCode;
  final EntityOwnerTypeEnum? _ownerType;
  final bool? _taskable;
  final List<String>? _urls;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final EntityDataModeEnum? _dataMode;
  final String? _location;
  final String? _onOrbit;
  final String? _idOnOrbit;
  final String? _operatingUnit;
  final String? _idOperatingUnit;
  final String? _origNetwork;
  final List<String>? _statusCollection;
  final List<String>? _rfBands;

  EntityObjectBuilder({
    String? idEntity,
    String? name,
    String? classificationMarking,
    EntityTypeEnum? type,
    String? idLocation,
    String? countryCode,
    EntityOwnerTypeEnum? ownerType,
    bool? taskable,
    List<String>? urls,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    EntityDataModeEnum? dataMode,
    String? location,
    String? onOrbit,
    String? idOnOrbit,
    String? operatingUnit,
    String? idOperatingUnit,
    String? origNetwork,
    List<String>? statusCollection,
    List<String>? rfBands,
  })
      : _idEntity = idEntity,
        _name = name,
        _classificationMarking = classificationMarking,
        _type = type,
        _idLocation = idLocation,
        _countryCode = countryCode,
        _ownerType = ownerType,
        _taskable = taskable,
        _urls = urls,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _location = location,
        _onOrbit = onOrbit,
        _idOnOrbit = idOnOrbit,
        _operatingUnit = operatingUnit,
        _idOperatingUnit = idOperatingUnit,
        _origNetwork = origNetwork,
        _statusCollection = statusCollection,
        _rfBands = rfBands;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idEntityOffset = _idEntity == null ? null
        : fbBuilder.writeString(_idEntity!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idLocationOffset = _idLocation == null ? null
        : fbBuilder.writeString(_idLocation!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? urlsOffset = _urls == null ? null
        : fbBuilder.writeList(_urls!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? locationOffset = _location == null ? null
        : fbBuilder.writeString(_location!);
    final int? onOrbitOffset = _onOrbit == null ? null
        : fbBuilder.writeString(_onOrbit!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? operatingUnitOffset = _operatingUnit == null ? null
        : fbBuilder.writeString(_operatingUnit!);
    final int? idOperatingUnitOffset = _idOperatingUnit == null ? null
        : fbBuilder.writeString(_idOperatingUnit!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? statusCollectionOffset = _statusCollection == null ? null
        : fbBuilder.writeList(_statusCollection!.map(fbBuilder.writeString).toList());
    final int? rfBandsOffset = _rfBands == null ? null
        : fbBuilder.writeList(_rfBands!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(24);
    fbBuilder.addOffset(0, idEntityOffset);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addInt8(3, _type?.value);
    fbBuilder.addOffset(4, idLocationOffset);
    fbBuilder.addOffset(5, countryCodeOffset);
    fbBuilder.addInt8(6, _ownerType?.value);
    fbBuilder.addBool(7, _taskable);
    fbBuilder.addOffset(8, urlsOffset);
    fbBuilder.addOffset(9, createdAtOffset);
    fbBuilder.addOffset(10, createdByOffset);
    fbBuilder.addOffset(11, updatedAtOffset);
    fbBuilder.addOffset(12, updatedByOffset);
    fbBuilder.addOffset(13, sourceOffset);
    fbBuilder.addOffset(14, originOffset);
    fbBuilder.addInt8(15, _dataMode?.value);
    fbBuilder.addOffset(16, locationOffset);
    fbBuilder.addOffset(17, onOrbitOffset);
    fbBuilder.addOffset(18, idOnOrbitOffset);
    fbBuilder.addOffset(19, operatingUnitOffset);
    fbBuilder.addOffset(20, idOperatingUnitOffset);
    fbBuilder.addOffset(21, origNetworkOffset);
    fbBuilder.addOffset(22, statusCollectionOffset);
    fbBuilder.addOffset(23, rfBandsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
