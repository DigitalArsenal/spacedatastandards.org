// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of Hazardous Material information associated with this Air Transport Mission.
class AirTransportMissionHazMatFull {
  AirTransportMissionHazMatFull._(this._bc, this._bcOffset);
  factory AirTransportMissionHazMatFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirTransportMissionHazMatFull> reader = _AirTransportMissionHazMatFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The hazMat identifier provided by the originating source.
  ///  Example: /// Example: cb6289e0f38534e01291ab6421d42724
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get extHazMatId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  United Nations proper shipping name of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
  ///  Example: /// Example: LITHIUM METAL BATTERIES
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get itemName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  United Nations number or North America number that identifies hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
  ///  Example: /// Example: 0181
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get unNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Number of pieces of hazardous cargo.
  ///  Example: /// Example: 29
  ///  Constraints: No constraints specified.
  int get pieces => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Total weight of hazardous cargo, including non-explosive parts, in kilograms.
  ///  Example: /// Example: 22.1
  ///  Constraints: No constraints specified.
  double get weight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Net explosive weight of the hazardous material, in kilograms.
  ///  Example: /// Example: 12.1
  ///  Constraints: No constraints specified.
  double get netExpWt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Class and division of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get classDiv => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Compatibility group code used to specify the controls for the transportation and storage of hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get cgc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Comma delimited list of Note IDs for compatibility groups, specific to GDSS systems.
  ///  Example: /// Example: 4,5,7,8
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get cgn => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Comma delimited list of Note IDs for Item Class Segregation groups, specific to GDSS systems.
  ///  Example: /// Example: 11,12
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get applicableNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Itinerary number that identifies where the hazardous material is loaded.
  ///  Example: /// Example: 50
  ///  Constraints: No constraints specified.
  int get onItin => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 24, 0);
  ///  The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is loaded.
  ///  Example: /// Example: LIRQ
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get onIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Itinerary number that identifies where the hazardous material is unloaded.
  ///  Example: /// Example: 300
  ///  Constraints: No constraints specified.
  int get offItin => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is unloaded.
  ///  Example: /// Example: MBPV
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get offIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Flag indicating if hazardous material is associated with this air transport mission. Possible values are P (planned to be associated with the mission) or A (actually associated with the mission). Enum: [P, A].
  ///  Example: /// Example: P
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get planned => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);

  @override
  String toString() {
    return 'AirTransportMissionHazMatFull{extHazMatId: ${extHazMatId}, itemName: ${itemName}, unNum: ${unNum}, pieces: ${pieces}, weight: ${weight}, netExpWt: ${netExpWt}, classDiv: ${classDiv}, cgc: ${cgc}, cgn: ${cgn}, applicableNotes: ${applicableNotes}, onItin: ${onItin}, onIcao: ${onIcao}, offItin: ${offItin}, offIcao: ${offIcao}, planned: ${planned}}';
  }
}

class _AirTransportMissionHazMatFullReader extends fb.TableReader<AirTransportMissionHazMatFull> {
  const _AirTransportMissionHazMatFullReader();

  @override
  AirTransportMissionHazMatFull createObject(fb.BufferContext bc, int offset) => 
    AirTransportMissionHazMatFull._(bc, offset);
}

class AirTransportMissionHazMatFullBuilder {
  AirTransportMissionHazMatFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(15);
  }

  int addExtHazMatIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addUnNumOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPieces(int? pieces) {
    fbBuilder.addInt32(3, pieces);
    return fbBuilder.offset;
  }
  int addWeight(double? weight) {
    fbBuilder.addFloat64(4, weight);
    return fbBuilder.offset;
  }
  int addNetExpWt(double? netExpWt) {
    fbBuilder.addFloat64(5, netExpWt);
    return fbBuilder.offset;
  }
  int addClassDiv(double? classDiv) {
    fbBuilder.addFloat64(6, classDiv);
    return fbBuilder.offset;
  }
  int addCgcOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addCgnOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addApplicableNotesOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addOnItin(int? onItin) {
    fbBuilder.addInt32(10, onItin);
    return fbBuilder.offset;
  }
  int addOnIcaoOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addOffItin(int? offItin) {
    fbBuilder.addInt32(12, offItin);
    return fbBuilder.offset;
  }
  int addOffIcaoOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addPlannedOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirTransportMissionHazMatFullObjectBuilder extends fb.ObjectBuilder {
  final String? _extHazMatId;
  final String? _itemName;
  final String? _unNum;
  final int? _pieces;
  final double? _weight;
  final double? _netExpWt;
  final double? _classDiv;
  final String? _cgc;
  final String? _cgn;
  final String? _applicableNotes;
  final int? _onItin;
  final String? _onIcao;
  final int? _offItin;
  final String? _offIcao;
  final String? _planned;

  AirTransportMissionHazMatFullObjectBuilder({
    String? extHazMatId,
    String? itemName,
    String? unNum,
    int? pieces,
    double? weight,
    double? netExpWt,
    double? classDiv,
    String? cgc,
    String? cgn,
    String? applicableNotes,
    int? onItin,
    String? onIcao,
    int? offItin,
    String? offIcao,
    String? planned,
  })
      : _extHazMatId = extHazMatId,
        _itemName = itemName,
        _unNum = unNum,
        _pieces = pieces,
        _weight = weight,
        _netExpWt = netExpWt,
        _classDiv = classDiv,
        _cgc = cgc,
        _cgn = cgn,
        _applicableNotes = applicableNotes,
        _onItin = onItin,
        _onIcao = onIcao,
        _offItin = offItin,
        _offIcao = offIcao,
        _planned = planned;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? extHazMatIdOffset = _extHazMatId == null ? null
        : fbBuilder.writeString(_extHazMatId!);
    final int? itemNameOffset = _itemName == null ? null
        : fbBuilder.writeString(_itemName!);
    final int? unNumOffset = _unNum == null ? null
        : fbBuilder.writeString(_unNum!);
    final int? cgcOffset = _cgc == null ? null
        : fbBuilder.writeString(_cgc!);
    final int? cgnOffset = _cgn == null ? null
        : fbBuilder.writeString(_cgn!);
    final int? applicableNotesOffset = _applicableNotes == null ? null
        : fbBuilder.writeString(_applicableNotes!);
    final int? onIcaoOffset = _onIcao == null ? null
        : fbBuilder.writeString(_onIcao!);
    final int? offIcaoOffset = _offIcao == null ? null
        : fbBuilder.writeString(_offIcao!);
    final int? plannedOffset = _planned == null ? null
        : fbBuilder.writeString(_planned!);
    fbBuilder.startTable(15);
    fbBuilder.addOffset(0, extHazMatIdOffset);
    fbBuilder.addOffset(1, itemNameOffset);
    fbBuilder.addOffset(2, unNumOffset);
    fbBuilder.addInt32(3, _pieces);
    fbBuilder.addFloat64(4, _weight);
    fbBuilder.addFloat64(5, _netExpWt);
    fbBuilder.addFloat64(6, _classDiv);
    fbBuilder.addOffset(7, cgcOffset);
    fbBuilder.addOffset(8, cgnOffset);
    fbBuilder.addOffset(9, applicableNotesOffset);
    fbBuilder.addInt32(10, _onItin);
    fbBuilder.addOffset(11, onIcaoOffset);
    fbBuilder.addInt32(12, _offItin);
    fbBuilder.addOffset(13, offIcaoOffset);
    fbBuilder.addOffset(14, plannedOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
