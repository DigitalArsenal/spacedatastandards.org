// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Information regarding the recovery vehicle.
class PersonnelRecoveryVehicleIngest {
  PersonnelRecoveryVehicleIngest._(this._bc, this._bcOffset);
  factory PersonnelRecoveryVehicleIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersonnelRecoveryVehicleIngest> reader = _PersonnelRecoveryVehicleIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The call sign of the recovery vehicle.
  ///  Example: /// Example: FALCO
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get callSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The particular type of recovery vehicle to be used.
  ///  Example: /// Example: C17
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Primary contact frequency of the recovery vehicle.
  ///  Example: /// Example: 34.55
  ///  Constraints: No constraints specified.
  double get primaryFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  The number of objects or units moving as a group and represented as a single entity in this recovery vehicle message. If null, the strength is assumed to represent a single object.  Note that if this recovery derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get strength => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'PersonnelRecoveryVehicleIngest{callSign: ${callSign}, type: ${type}, primaryFreq: ${primaryFreq}, strength: ${strength}}';
  }
}

class _PersonnelRecoveryVehicleIngestReader extends fb.TableReader<PersonnelRecoveryVehicleIngest> {
  const _PersonnelRecoveryVehicleIngestReader();

  @override
  PersonnelRecoveryVehicleIngest createObject(fb.BufferContext bc, int offset) => 
    PersonnelRecoveryVehicleIngest._(bc, offset);
}

class PersonnelRecoveryVehicleIngestBuilder {
  PersonnelRecoveryVehicleIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addCallSignOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPrimaryFreq(double? primaryFreq) {
    fbBuilder.addFloat64(2, primaryFreq);
    return fbBuilder.offset;
  }
  int addStrength(int? strength) {
    fbBuilder.addInt32(3, strength);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersonnelRecoveryVehicleIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _callSign;
  final String? _type;
  final double? _primaryFreq;
  final int? _strength;

  PersonnelRecoveryVehicleIngestObjectBuilder({
    String? callSign,
    String? type,
    double? primaryFreq,
    int? strength,
  })
      : _callSign = callSign,
        _type = type,
        _primaryFreq = primaryFreq,
        _strength = strength;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? callSignOffset = _callSign == null ? null
        : fbBuilder.writeString(_callSign!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, callSignOffset);
    fbBuilder.addOffset(1, typeOffset);
    fbBuilder.addFloat64(2, _primaryFreq);
    fbBuilder.addInt32(3, _strength);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
