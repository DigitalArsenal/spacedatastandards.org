// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class MissileTrackFullEnvEnum {
  final int value;
  const MissileTrackFullEnvEnum._(this.value);

  factory MissileTrackFullEnvEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum MissileTrackFullEnvEnum');
    }
    return result;
  }

  static MissileTrackFullEnvEnum? _createOrNull(int? value) => 
      value == null ? null : MissileTrackFullEnvEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
  static const MissileTrackFullEnvEnum AIR = MissileTrackFullEnvEnum._(0);

  ///  On the surface of dry land.
  static const MissileTrackFullEnvEnum LAND = MissileTrackFullEnvEnum._(1);

  ///  Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
  static const MissileTrackFullEnvEnum SPACE = MissileTrackFullEnvEnum._(2);

  ///  On the surface of a body of water.
  static const MissileTrackFullEnvEnum SURFACE = MissileTrackFullEnvEnum._(3);

  ///  Below the surface of a body of water.
  static const MissileTrackFullEnvEnum SUBSURFACE = MissileTrackFullEnvEnum._(4);

  ///  Environment is not known.
  static const MissileTrackFullEnvEnum UNKNOWN = MissileTrackFullEnvEnum._(5);
  static const Map<int, MissileTrackFullEnvEnum> values = {
    0: AIR,
    1: LAND,
    2: SPACE,
    3: SURFACE,
    4: SUBSURFACE,
    5: UNKNOWN};

  static const fb.Reader<MissileTrackFullEnvEnum> reader = _MissileTrackFullEnvEnumReader();

  @override
  String toString() {
    return 'MissileTrackFullEnvEnum{value: $value}';
  }
}

class _MissileTrackFullEnvEnumReader extends fb.Reader<MissileTrackFullEnvEnum> {
  const _MissileTrackFullEnvEnumReader();

  @override
  int get size => 1;

  @override
  MissileTrackFullEnvEnum read(fb.BufferContext bc, int offset) =>
      MissileTrackFullEnvEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class MissileTrackFullObjIdentEnum {
  final int value;
  const MissileTrackFullObjIdentEnum._(this.value);

  factory MissileTrackFullObjIdentEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum MissileTrackFullObjIdentEnum');
    }
    return result;
  }

  static MissileTrackFullObjIdentEnum? _createOrNull(int? value) => 
      value == null ? null : MissileTrackFullObjIdentEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 6;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  static const MissileTrackFullObjIdentEnum ASSUMED_FRIEND = MissileTrackFullObjIdentEnum._(0);

  ///  Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  static const MissileTrackFullObjIdentEnum FRIEND = MissileTrackFullObjIdentEnum._(1);

  ///  Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  static const MissileTrackFullObjIdentEnum HOSTILE = MissileTrackFullObjIdentEnum._(2);

  ///  Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  static const MissileTrackFullObjIdentEnum NEUTRAL = MissileTrackFullObjIdentEnum._(3);

  ///  Track object which has not been evaluated.
  static const MissileTrackFullObjIdentEnum PENDING = MissileTrackFullObjIdentEnum._(4);

  ///  Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  static const MissileTrackFullObjIdentEnum SUSPECT = MissileTrackFullObjIdentEnum._(5);

  ///  Track object which has been evaluated and does not meet criteria for any standard identity.
  static const MissileTrackFullObjIdentEnum UNKNOWN = MissileTrackFullObjIdentEnum._(6);
  static const Map<int, MissileTrackFullObjIdentEnum> values = {
    0: ASSUMED_FRIEND,
    1: FRIEND,
    2: HOSTILE,
    3: NEUTRAL,
    4: PENDING,
    5: SUSPECT,
    6: UNKNOWN};

  static const fb.Reader<MissileTrackFullObjIdentEnum> reader = _MissileTrackFullObjIdentEnumReader();

  @override
  String toString() {
    return 'MissileTrackFullObjIdentEnum{value: $value}';
  }
}

class _MissileTrackFullObjIdentEnumReader extends fb.Reader<MissileTrackFullObjIdentEnum> {
  const _MissileTrackFullObjIdentEnumReader();

  @override
  int get size => 1;

  @override
  MissileTrackFullObjIdentEnum read(fb.BufferContext bc, int offset) =>
      MissileTrackFullObjIdentEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class MissileTrackFullDataModeEnum {
  final int value;
  const MissileTrackFullDataModeEnum._(this.value);

  factory MissileTrackFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum MissileTrackFullDataModeEnum');
    }
    return result;
  }

  static MissileTrackFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : MissileTrackFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const MissileTrackFullDataModeEnum REAL = MissileTrackFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const MissileTrackFullDataModeEnum TEST = MissileTrackFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const MissileTrackFullDataModeEnum SIMULATED = MissileTrackFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const MissileTrackFullDataModeEnum EXERCISE = MissileTrackFullDataModeEnum._(3);
  static const Map<int, MissileTrackFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<MissileTrackFullDataModeEnum> reader = _MissileTrackFullDataModeEnumReader();

  @override
  String toString() {
    return 'MissileTrackFullDataModeEnum{value: $value}';
  }
}

class _MissileTrackFullDataModeEnumReader extends fb.Reader<MissileTrackFullDataModeEnum> {
  const _MissileTrackFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  MissileTrackFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      MissileTrackFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// These services provide operations for querying of all available missile track details and amplifying missile data. A missile track is a position and optionally a heading/velocity of an object across all environments at a particular timestamp. It also includes optional information regarding the identity/type of missile, impact location, launch location and other amplifying object data, if known.
class MissileTrackFull {
  MissileTrackFull._(this._bc, this._bcOffset);
  factory MissileTrackFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MissileTrackFull> reader = _MissileTrackFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: MissileTrack_ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The type of external message from which this request originated.
  ///  Example: /// Example: MSG-TYPE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get msgType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The message subtype is a finer grain categorization of message types as many messages can contain a variety of data content within the same structure.  Examples include but are not limited to Initial, Final, Launch, Update, etc.  Users should consult the appropriate documentation, based on the message type, for the definitions of the subtypes that apply to that message.
  ///  Example: /// Example: Update
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get msgSubType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-04-25T08:17:01.346Z
  ///  Constraints: No constraints specified.
  String? get msgCreateDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
  ///   AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
  ///   LAND: On the surface of dry land.
  ///   SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
  ///   SURFACE: On the surface of a body of water.
  ///   SUBSURFACE: Below the surface of a body of water.
  ///   UNKNOWN: Environment is not known.
  ///  Example: /// Example: AIR
  ///  Constraints: Minimum length = 0, Maximum length = 16
  MissileTrackFullEnvEnum get env => MissileTrackFullEnvEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 14, 0));
  ///  The type of object to which this record refers. The object type may be updated in later records based on assessment of additional data.
  ///  Example: /// Example: Ballistic
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get objType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Confidence of the object type, 0-100.
  ///  Example: /// Example: 90
  ///  Constraints: No constraints specified.
  int get objTypeConf => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Space Platform field along with the Space Activity field further defines the identity of a Space track (examples: SATELLITE, WEAPON, PATROL). The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
  ///  Example: /// Example: WEAPON
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get objPlat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
  ///   ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///   FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///   HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///   NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///   PENDING: Track object which has not been evaluated.
  ///   SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///   UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  MissileTrackFullObjIdentEnum get objIdent => MissileTrackFullObjIdentEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 22, 0));
  ///  Space amplification indicates additional information on the space environment being reported (examples: NUCLEAR WARHEAD, FUEL-AIR EXPLOSIVE WARHEAD, DEBRIS).
  ///  Example: /// Example: NUCLEAR WARHEAD
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get spaceAmp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Space activity (examples: RECONNAISSANCE, ANTISPACE WARFARE, TELEVISION). The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
  ///  Example: /// Example: HOLDING
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get objAct => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Specific type of point or track with an environment of space.
  ///  Example: /// Example: SS-21_MOD_2_CRBM
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get spaceSpecType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM. 
  ///  &nbsp;SRBM - Short-Range Ballistic Missile
  ///  &nbsp;MRBM - Medium-Range Ballistic Missile
  ///  &nbsp;IRBM - Intermediate-Range Ballistic Missile
  ///  &nbsp;LRBM - Long-Range Ballistic Missile
  ///  &nbsp;ICBM - Intercontinental Ballistic Missile
  ///  &nbsp;SLBM - Submarine-Launched Ballistic Missile.
  ///  Example: /// Example: SLBM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get acftSubType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Track name.
  ///  Example: /// Example: TRACK-NAME
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The call sign currently assigned to the track object.
  ///  Example: /// Example: Charlie
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get callSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Indicates whether or not the missile is considered lost.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get lostTrkInd => const fb.BoolReader().vTableGet(_bc, _bcOffset, 36, false);
  ///  Track ID within the originating system.
  ///  Example: /// Example: 102288
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trackId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Track ID of the parent track, within the originating system, from which the track was developed.
  ///  Example: /// Example: 102288
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get parentTrackId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Track ID for the source of the missile-unique identifier.
  ///  Example: /// Example: MUID-SRC-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get muidSrcTrk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Source of the missile-unique identifier (MUID).
  ///  Example: /// Example: MUID-SRC
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get muidSrc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  A track may be designated as a non-alert track or an alert track.
  ///  Examples include but are not limited to:
  ///  &nbsp;Non-alert tracks – choose None (Blank).
  ///  &nbsp;Alert tracks – enter the proper alert classification:
  ///  &nbsp;HIT - High Interest Track
  ///  &nbsp;TGT - Target
  ///  &nbsp;SUS - Suspect Carrier
  ///  &nbsp;NSP - Cleared Suspect.
  ///  Example: /// Example: HIT
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get alert => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Missile status enumeration examples include but are not limited to:
  ///  &nbsp;AT LAUNCH 
  ///  &nbsp;AT OBSERVATION 
  ///  &nbsp;FLYING 
  ///  &nbsp;IMPACTED 
  ///  &nbsp;LOST 
  ///  &nbsp;STALE
  ///  &nbsp;DEBRIS.
  ///  Example: /// Example: AT LAUNCH
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get mslStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The receipt time of the data by the processing system, in ISO8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get ts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
  ///  Example: /// Example: ELLIPSE
  ///  Constraints: Minimum length = 0, Maximum length = 40
  String? get aouRptType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
  ///  &nbsp;ELLIPSE:
  ///  &nbsp;&nbsp;brg - orientation in degrees of the ellipse
  ///  &nbsp;&nbsp;a1 - semi-major axis in kilometers
  ///  &nbsp;&nbsp;a2 - semi-minor axis in kilometers
  ///  &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
  ///  &nbsp;&nbsp;brg - orientation in degrees of the bearing box
  ///  &nbsp;&nbsp;a1 - length of bearing box in kilometers
  ///  &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
  ///  &nbsp;OTHER (All other type values):
  ///  &nbsp;&nbsp;brg - line of bearing in degrees true
  ///  &nbsp;&nbsp;a1 - bearing error in degrees
  ///  &nbsp;&nbsp;a2 - estimated range in kilometers.
  ///  Example: /// Example: [34.3, 26.5, 1.2]
  ///  Constraints: No constraints specified.
  List<String>? get aouRptData => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 54);
  ///  The percentage of time that the estimated AoU will "cover" the true position of the track.
  ///  Example: /// Example: 90.64
  ///  Constraints: No constraints specified.
  double get containment => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
  ///  Example: /// Example: 0.95
  ///  Constraints: No constraints specified.
  double get trkConf => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track, with higher values indicating higher track quality; i.e., lower errors in reported position.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get trkQual => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 60, 0);
  ///  Angle of elevation/depression between observer and missile in degrees.
  ///  Example: /// Example: 15.2
  ///  Constraints: No constraints specified.
  double get angElev => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Last report type received from the sensor (for example, OBSBO = observation burnout).
  ///  Example: /// Example: OBSBO
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get senMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Source code for source of information used to detect track.
  ///  Example: /// Example: S1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get infoSource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Indicates whether or not the missile is currently in a state of boosting.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get boosting => const fb.BoolReader().vTableGet(_bc, _bcOffset, 68, false);
  ///  Azimuth corridor reference point latitude.
  ///  Example: /// Example: 19.88550102
  ///  Constraints: No constraints specified.
  double get polarSingLocLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Azimuth corridor reference point longitude.
  ///  Example: /// Example: 46.74596844
  ///  Constraints: No constraints specified.
  double get polarSingLocLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  Indicates whether or not a track has an emergency.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get emgInd => const fb.BoolReader().vTableGet(_bc, _bcOffset, 74, false);
  ///  The drop-point indicator setting.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get dropPtInd => const fb.BoolReader().vTableGet(_bc, _bcOffset, 76, false);
  ///  Confidence level of the amplifying characteristics. Values range from 0 to 6.
  ///  Example: /// Example: 6
  ///  Constraints: No constraints specified.
  int get spaceAmpConf => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 78, 0);
  ///  Missile launch timestamp in ISO8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get launchTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 19.88550102
  ///  Constraints: No constraints specified.
  double get launchLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 46.74596844
  ///  Constraints: No constraints specified.
  double get launchLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Missile azimuth corridor data.
  ///  Example: /// Example: 12.876
  ///  Constraints: No constraints specified.
  double get azCorr => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  Track point burnout altitude relative to WGS-84 ellipsoid, in kilometers.
  ///  Example: /// Example: 30567.452
  ///  Constraints: No constraints specified.
  double get burnoutAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
  ///  Example: /// Example: ELLIPSE
  ///  Constraints: Minimum length = 0, Maximum length = 40
  String? get launchAouType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
  ///  &nbsp;ELLIPSE:
  ///  &nbsp;&nbsp;brg - orientation in degrees of the ellipse
  ///  &nbsp;&nbsp;a1 - semi-major axis in kilometers
  ///  &nbsp;&nbsp;a2 - semi-minor axis in kilometers
  ///  &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
  ///  &nbsp;&nbsp;brg - orientation in degrees of the bearing box
  ///  &nbsp;&nbsp;a1 - length of bearing box in kilometers
  ///  &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
  ///  &nbsp;OTHER (All other type values):
  ///  &nbsp;&nbsp;brg - line of bearing in degrees true
  ///  &nbsp;&nbsp;a1 - bearing error in degrees
  ///  &nbsp;&nbsp;a2 - estimated range in kilometers.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  List<String>? get launchAouData => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 92);
  ///  Estimated time of impact timestamp in ISO8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get impactTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  WGS-84 latitude of the missile object impact point, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 19.88550102
  ///  Constraints: No constraints specified.
  double get impactLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  WGS-84 longitude of the missile object impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 46.74596844
  ///  Constraints: No constraints specified.
  double get impactLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
  ///  Example: /// Example: ELLIPSE
  ///  Constraints: Minimum length = 0, Maximum length = 40
  String? get impactAouType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
  ///  &nbsp;ELLIPSE:
  ///  &nbsp;&nbsp;brg - orientation in degrees of the ellipse
  ///  &nbsp;&nbsp;a1 - semi-major axis in kilometers
  ///  &nbsp;&nbsp;a2 - semi-minor axis in kilometers
  ///  &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
  ///  &nbsp;&nbsp;brg - orientation in degrees of the bearing box
  ///  &nbsp;&nbsp;a1 - length of bearing box in kilometers
  ///  &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
  ///  &nbsp;OTHER (All other type values):
  ///  &nbsp;&nbsp;brg - line of bearing in degrees true
  ///  &nbsp;&nbsp;a1 - bearing error in degrees
  ///  &nbsp;&nbsp;a2 - estimated range in kilometers.
  ///  Example: /// Example: [34.3, 26.5, 1.2]
  ///  Constraints: No constraints specified.
  List<String>? get impactAouData => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 102);
  ///  Array of MissileTrackVector objects. Missile track vectors are cartesian vectors of position, velocity, and acceleration that, together with their time, 'epoch', uniquely determine the trajectory of the missile. ECEF is the preferred coordinate frame but in some cases data may be in another frame as specified by 'referenceFrame', depending on the provider.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get vectors => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 104);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2021-02-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 114);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  MissileTrackFullDataModeEnum get dataMode => MissileTrackFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 116, 0));

  @override
  String toString() {
    return 'MissileTrackFull{id: ${id}, classificationMarking: ${classificationMarking}, msgType: ${msgType}, msgSubType: ${msgSubType}, msgCreateDate: ${msgCreateDate}, env: ${env}, objType: ${objType}, objTypeConf: ${objTypeConf}, objPlat: ${objPlat}, objIdent: ${objIdent}, spaceAmp: ${spaceAmp}, objAct: ${objAct}, spaceSpecType: ${spaceSpecType}, acftSubType: ${acftSubType}, name: ${name}, callSign: ${callSign}, lostTrkInd: ${lostTrkInd}, trackId: ${trackId}, parentTrackId: ${parentTrackId}, muidSrcTrk: ${muidSrcTrk}, muidSrc: ${muidSrc}, alert: ${alert}, mslStatus: ${mslStatus}, ts: ${ts}, aouRptType: ${aouRptType}, aouRptData: ${aouRptData}, containment: ${containment}, trkConf: ${trkConf}, trkQual: ${trkQual}, angElev: ${angElev}, senMode: ${senMode}, infoSource: ${infoSource}, boosting: ${boosting}, polarSingLocLat: ${polarSingLocLat}, polarSingLocLon: ${polarSingLocLon}, emgInd: ${emgInd}, dropPtInd: ${dropPtInd}, spaceAmpConf: ${spaceAmpConf}, launchTime: ${launchTime}, launchLat: ${launchLat}, launchLon: ${launchLon}, azCorr: ${azCorr}, burnoutAlt: ${burnoutAlt}, launchAouType: ${launchAouType}, launchAouData: ${launchAouData}, impactTime: ${impactTime}, impactLat: ${impactLat}, impactLon: ${impactLon}, impactAouType: ${impactAouType}, impactAouData: ${impactAouData}, vectors: ${vectors}, origNetwork: ${origNetwork}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}}';
  }
}

class _MissileTrackFullReader extends fb.TableReader<MissileTrackFull> {
  const _MissileTrackFullReader();

  @override
  MissileTrackFull createObject(fb.BufferContext bc, int offset) => 
    MissileTrackFull._(bc, offset);
}

class MissileTrackFullBuilder {
  MissileTrackFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(57);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMsgTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMsgSubTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMsgCreateDateOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addEnv(MissileTrackFullEnvEnum? env) {
    fbBuilder.addInt8(5, env?.value);
    return fbBuilder.offset;
  }
  int addObjTypeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addObjTypeConf(int? objTypeConf) {
    fbBuilder.addInt32(7, objTypeConf);
    return fbBuilder.offset;
  }
  int addObjPlatOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addObjIdent(MissileTrackFullObjIdentEnum? objIdent) {
    fbBuilder.addInt8(9, objIdent?.value);
    return fbBuilder.offset;
  }
  int addSpaceAmpOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addObjActOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addSpaceSpecTypeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addAcftSubTypeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCallSignOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addLostTrkInd(bool? lostTrkInd) {
    fbBuilder.addBool(16, lostTrkInd);
    return fbBuilder.offset;
  }
  int addTrackIdOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addParentTrackIdOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addMuidSrcTrkOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addMuidSrcOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addAlertOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addMslStatusOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addAouRptTypeOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addAouRptDataOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addContainment(double? containment) {
    fbBuilder.addFloat64(26, containment);
    return fbBuilder.offset;
  }
  int addTrkConf(double? trkConf) {
    fbBuilder.addFloat64(27, trkConf);
    return fbBuilder.offset;
  }
  int addTrkQual(int? trkQual) {
    fbBuilder.addInt32(28, trkQual);
    return fbBuilder.offset;
  }
  int addAngElev(double? angElev) {
    fbBuilder.addFloat64(29, angElev);
    return fbBuilder.offset;
  }
  int addSenModeOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addInfoSourceOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addBoosting(bool? boosting) {
    fbBuilder.addBool(32, boosting);
    return fbBuilder.offset;
  }
  int addPolarSingLocLat(double? polarSingLocLat) {
    fbBuilder.addFloat64(33, polarSingLocLat);
    return fbBuilder.offset;
  }
  int addPolarSingLocLon(double? polarSingLocLon) {
    fbBuilder.addFloat64(34, polarSingLocLon);
    return fbBuilder.offset;
  }
  int addEmgInd(bool? emgInd) {
    fbBuilder.addBool(35, emgInd);
    return fbBuilder.offset;
  }
  int addDropPtInd(bool? dropPtInd) {
    fbBuilder.addBool(36, dropPtInd);
    return fbBuilder.offset;
  }
  int addSpaceAmpConf(int? spaceAmpConf) {
    fbBuilder.addInt32(37, spaceAmpConf);
    return fbBuilder.offset;
  }
  int addLaunchTimeOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addLaunchLat(double? launchLat) {
    fbBuilder.addFloat64(39, launchLat);
    return fbBuilder.offset;
  }
  int addLaunchLon(double? launchLon) {
    fbBuilder.addFloat64(40, launchLon);
    return fbBuilder.offset;
  }
  int addAzCorr(double? azCorr) {
    fbBuilder.addFloat64(41, azCorr);
    return fbBuilder.offset;
  }
  int addBurnoutAlt(double? burnoutAlt) {
    fbBuilder.addFloat64(42, burnoutAlt);
    return fbBuilder.offset;
  }
  int addLaunchAouTypeOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addLaunchAouDataOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addImpactTimeOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addImpactLat(double? impactLat) {
    fbBuilder.addFloat64(46, impactLat);
    return fbBuilder.offset;
  }
  int addImpactLon(double? impactLon) {
    fbBuilder.addFloat64(47, impactLon);
    return fbBuilder.offset;
  }
  int addImpactAouTypeOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addImpactAouDataOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addVectorsOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(55, offset);
    return fbBuilder.offset;
  }
  int addDataMode(MissileTrackFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(56, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MissileTrackFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _msgType;
  final String? _msgSubType;
  final String? _msgCreateDate;
  final MissileTrackFullEnvEnum? _env;
  final String? _objType;
  final int? _objTypeConf;
  final String? _objPlat;
  final MissileTrackFullObjIdentEnum? _objIdent;
  final String? _spaceAmp;
  final String? _objAct;
  final String? _spaceSpecType;
  final String? _acftSubType;
  final String? _name;
  final String? _callSign;
  final bool? _lostTrkInd;
  final String? _trackId;
  final String? _parentTrackId;
  final String? _muidSrcTrk;
  final String? _muidSrc;
  final String? _alert;
  final String? _mslStatus;
  final String? _ts;
  final String? _aouRptType;
  final List<String>? _aouRptData;
  final double? _containment;
  final double? _trkConf;
  final int? _trkQual;
  final double? _angElev;
  final String? _senMode;
  final String? _infoSource;
  final bool? _boosting;
  final double? _polarSingLocLat;
  final double? _polarSingLocLon;
  final bool? _emgInd;
  final bool? _dropPtInd;
  final int? _spaceAmpConf;
  final String? _launchTime;
  final double? _launchLat;
  final double? _launchLon;
  final double? _azCorr;
  final double? _burnoutAlt;
  final String? _launchAouType;
  final List<String>? _launchAouData;
  final String? _impactTime;
  final double? _impactLat;
  final double? _impactLon;
  final String? _impactAouType;
  final List<String>? _impactAouData;
  final List<String>? _vectors;
  final String? _origNetwork;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final MissileTrackFullDataModeEnum? _dataMode;

  MissileTrackFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? msgType,
    String? msgSubType,
    String? msgCreateDate,
    MissileTrackFullEnvEnum? env,
    String? objType,
    int? objTypeConf,
    String? objPlat,
    MissileTrackFullObjIdentEnum? objIdent,
    String? spaceAmp,
    String? objAct,
    String? spaceSpecType,
    String? acftSubType,
    String? name,
    String? callSign,
    bool? lostTrkInd,
    String? trackId,
    String? parentTrackId,
    String? muidSrcTrk,
    String? muidSrc,
    String? alert,
    String? mslStatus,
    String? ts,
    String? aouRptType,
    List<String>? aouRptData,
    double? containment,
    double? trkConf,
    int? trkQual,
    double? angElev,
    String? senMode,
    String? infoSource,
    bool? boosting,
    double? polarSingLocLat,
    double? polarSingLocLon,
    bool? emgInd,
    bool? dropPtInd,
    int? spaceAmpConf,
    String? launchTime,
    double? launchLat,
    double? launchLon,
    double? azCorr,
    double? burnoutAlt,
    String? launchAouType,
    List<String>? launchAouData,
    String? impactTime,
    double? impactLat,
    double? impactLon,
    String? impactAouType,
    List<String>? impactAouData,
    List<String>? vectors,
    String? origNetwork,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    MissileTrackFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _msgType = msgType,
        _msgSubType = msgSubType,
        _msgCreateDate = msgCreateDate,
        _env = env,
        _objType = objType,
        _objTypeConf = objTypeConf,
        _objPlat = objPlat,
        _objIdent = objIdent,
        _spaceAmp = spaceAmp,
        _objAct = objAct,
        _spaceSpecType = spaceSpecType,
        _acftSubType = acftSubType,
        _name = name,
        _callSign = callSign,
        _lostTrkInd = lostTrkInd,
        _trackId = trackId,
        _parentTrackId = parentTrackId,
        _muidSrcTrk = muidSrcTrk,
        _muidSrc = muidSrc,
        _alert = alert,
        _mslStatus = mslStatus,
        _ts = ts,
        _aouRptType = aouRptType,
        _aouRptData = aouRptData,
        _containment = containment,
        _trkConf = trkConf,
        _trkQual = trkQual,
        _angElev = angElev,
        _senMode = senMode,
        _infoSource = infoSource,
        _boosting = boosting,
        _polarSingLocLat = polarSingLocLat,
        _polarSingLocLon = polarSingLocLon,
        _emgInd = emgInd,
        _dropPtInd = dropPtInd,
        _spaceAmpConf = spaceAmpConf,
        _launchTime = launchTime,
        _launchLat = launchLat,
        _launchLon = launchLon,
        _azCorr = azCorr,
        _burnoutAlt = burnoutAlt,
        _launchAouType = launchAouType,
        _launchAouData = launchAouData,
        _impactTime = impactTime,
        _impactLat = impactLat,
        _impactLon = impactLon,
        _impactAouType = impactAouType,
        _impactAouData = impactAouData,
        _vectors = vectors,
        _origNetwork = origNetwork,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? msgTypeOffset = _msgType == null ? null
        : fbBuilder.writeString(_msgType!);
    final int? msgSubTypeOffset = _msgSubType == null ? null
        : fbBuilder.writeString(_msgSubType!);
    final int? msgCreateDateOffset = _msgCreateDate == null ? null
        : fbBuilder.writeString(_msgCreateDate!);
    final int? objTypeOffset = _objType == null ? null
        : fbBuilder.writeString(_objType!);
    final int? objPlatOffset = _objPlat == null ? null
        : fbBuilder.writeString(_objPlat!);
    final int? spaceAmpOffset = _spaceAmp == null ? null
        : fbBuilder.writeString(_spaceAmp!);
    final int? objActOffset = _objAct == null ? null
        : fbBuilder.writeString(_objAct!);
    final int? spaceSpecTypeOffset = _spaceSpecType == null ? null
        : fbBuilder.writeString(_spaceSpecType!);
    final int? acftSubTypeOffset = _acftSubType == null ? null
        : fbBuilder.writeString(_acftSubType!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? callSignOffset = _callSign == null ? null
        : fbBuilder.writeString(_callSign!);
    final int? trackIdOffset = _trackId == null ? null
        : fbBuilder.writeString(_trackId!);
    final int? parentTrackIdOffset = _parentTrackId == null ? null
        : fbBuilder.writeString(_parentTrackId!);
    final int? muidSrcTrkOffset = _muidSrcTrk == null ? null
        : fbBuilder.writeString(_muidSrcTrk!);
    final int? muidSrcOffset = _muidSrc == null ? null
        : fbBuilder.writeString(_muidSrc!);
    final int? alertOffset = _alert == null ? null
        : fbBuilder.writeString(_alert!);
    final int? mslStatusOffset = _mslStatus == null ? null
        : fbBuilder.writeString(_mslStatus!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeString(_ts!);
    final int? aouRptTypeOffset = _aouRptType == null ? null
        : fbBuilder.writeString(_aouRptType!);
    final int? aouRptDataOffset = _aouRptData == null ? null
        : fbBuilder.writeList(_aouRptData!.map(fbBuilder.writeString).toList());
    final int? senModeOffset = _senMode == null ? null
        : fbBuilder.writeString(_senMode!);
    final int? infoSourceOffset = _infoSource == null ? null
        : fbBuilder.writeString(_infoSource!);
    final int? launchTimeOffset = _launchTime == null ? null
        : fbBuilder.writeString(_launchTime!);
    final int? launchAouTypeOffset = _launchAouType == null ? null
        : fbBuilder.writeString(_launchAouType!);
    final int? launchAouDataOffset = _launchAouData == null ? null
        : fbBuilder.writeList(_launchAouData!.map(fbBuilder.writeString).toList());
    final int? impactTimeOffset = _impactTime == null ? null
        : fbBuilder.writeString(_impactTime!);
    final int? impactAouTypeOffset = _impactAouType == null ? null
        : fbBuilder.writeString(_impactAouType!);
    final int? impactAouDataOffset = _impactAouData == null ? null
        : fbBuilder.writeList(_impactAouData!.map(fbBuilder.writeString).toList());
    final int? vectorsOffset = _vectors == null ? null
        : fbBuilder.writeList(_vectors!.map(fbBuilder.writeString).toList());
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    fbBuilder.startTable(57);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, msgTypeOffset);
    fbBuilder.addOffset(3, msgSubTypeOffset);
    fbBuilder.addOffset(4, msgCreateDateOffset);
    fbBuilder.addInt8(5, _env?.value);
    fbBuilder.addOffset(6, objTypeOffset);
    fbBuilder.addInt32(7, _objTypeConf);
    fbBuilder.addOffset(8, objPlatOffset);
    fbBuilder.addInt8(9, _objIdent?.value);
    fbBuilder.addOffset(10, spaceAmpOffset);
    fbBuilder.addOffset(11, objActOffset);
    fbBuilder.addOffset(12, spaceSpecTypeOffset);
    fbBuilder.addOffset(13, acftSubTypeOffset);
    fbBuilder.addOffset(14, nameOffset);
    fbBuilder.addOffset(15, callSignOffset);
    fbBuilder.addBool(16, _lostTrkInd);
    fbBuilder.addOffset(17, trackIdOffset);
    fbBuilder.addOffset(18, parentTrackIdOffset);
    fbBuilder.addOffset(19, muidSrcTrkOffset);
    fbBuilder.addOffset(20, muidSrcOffset);
    fbBuilder.addOffset(21, alertOffset);
    fbBuilder.addOffset(22, mslStatusOffset);
    fbBuilder.addOffset(23, tsOffset);
    fbBuilder.addOffset(24, aouRptTypeOffset);
    fbBuilder.addOffset(25, aouRptDataOffset);
    fbBuilder.addFloat64(26, _containment);
    fbBuilder.addFloat64(27, _trkConf);
    fbBuilder.addInt32(28, _trkQual);
    fbBuilder.addFloat64(29, _angElev);
    fbBuilder.addOffset(30, senModeOffset);
    fbBuilder.addOffset(31, infoSourceOffset);
    fbBuilder.addBool(32, _boosting);
    fbBuilder.addFloat64(33, _polarSingLocLat);
    fbBuilder.addFloat64(34, _polarSingLocLon);
    fbBuilder.addBool(35, _emgInd);
    fbBuilder.addBool(36, _dropPtInd);
    fbBuilder.addInt32(37, _spaceAmpConf);
    fbBuilder.addOffset(38, launchTimeOffset);
    fbBuilder.addFloat64(39, _launchLat);
    fbBuilder.addFloat64(40, _launchLon);
    fbBuilder.addFloat64(41, _azCorr);
    fbBuilder.addFloat64(42, _burnoutAlt);
    fbBuilder.addOffset(43, launchAouTypeOffset);
    fbBuilder.addOffset(44, launchAouDataOffset);
    fbBuilder.addOffset(45, impactTimeOffset);
    fbBuilder.addFloat64(46, _impactLat);
    fbBuilder.addFloat64(47, _impactLon);
    fbBuilder.addOffset(48, impactAouTypeOffset);
    fbBuilder.addOffset(49, impactAouDataOffset);
    fbBuilder.addOffset(50, vectorsOffset);
    fbBuilder.addOffset(51, origNetworkOffset);
    fbBuilder.addOffset(52, createdAtOffset);
    fbBuilder.addOffset(53, createdByOffset);
    fbBuilder.addOffset(54, sourceOffset);
    fbBuilder.addOffset(55, originOffset);
    fbBuilder.addInt8(56, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
