// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class PassiveRadarObservationIngestDataModeEnum {
  final int value;
  const PassiveRadarObservationIngestDataModeEnum._(this.value);

  factory PassiveRadarObservationIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum PassiveRadarObservationIngestDataModeEnum');
    }
    return result;
  }

  static PassiveRadarObservationIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : PassiveRadarObservationIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const PassiveRadarObservationIngestDataModeEnum REAL = PassiveRadarObservationIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const PassiveRadarObservationIngestDataModeEnum TEST = PassiveRadarObservationIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const PassiveRadarObservationIngestDataModeEnum SIMULATED = PassiveRadarObservationIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const PassiveRadarObservationIngestDataModeEnum EXERCISE = PassiveRadarObservationIngestDataModeEnum._(3);
  static const Map<int, PassiveRadarObservationIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<PassiveRadarObservationIngestDataModeEnum> reader = _PassiveRadarObservationIngestDataModeEnumReader();

  @override
  String toString() {
    return 'PassiveRadarObservationIngestDataModeEnum{value: $value}';
  }
}

class _PassiveRadarObservationIngestDataModeEnumReader extends fb.Reader<PassiveRadarObservationIngestDataModeEnum> {
  const _PassiveRadarObservationIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  PassiveRadarObservationIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      PassiveRadarObservationIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.
class PassiveRadarObservationIngest {
  PassiveRadarObservationIngest._(this._bc, this._bcOffset);
  factory PassiveRadarObservationIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PassiveRadarObservationIngest> reader = _PassiveRadarObservationIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Ob detection time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2023-01-24T23:35:26.518152Z
  ///  Constraints: No constraints specified.
  String? get obTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
  ///  Example: /// Example: 40699
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 40699
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
  ///  Example: /// Example: OCULUSA
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
  ///  Example: /// Example: RED_CLIFFS_3ABCRN
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idRfemitter => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
  ///  Example: /// Example: OculusRef1
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensorRefReceiver => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Optional external observation identifier provided by the source.
  ///  Example: /// Example: 26892
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get extObservationId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Optional identifier to indicate the specific tasking which produced this observation.
  ///  Example: /// Example: TASK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get taskId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Unique identifier of a track that represents a tracklet for this observation.
  ///  Example: /// Example: 12212
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trackId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  ///  Example: /// Example: FIRST
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get obPosition => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get uct => const fb.BoolReader().vTableGet(_bc, _bcOffset, 32, false);
  ///  Line of sight azimuth angle in degrees and topocentric frame.
  ///  Example: /// Example: 134.5
  ///  Constraints: No constraints specified.
  double get azimuth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get azimuthUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Sensor azimuth angle bias in degrees.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  double get azimuthBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Rate of change of the line of sight azimuth in degrees per second.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get azimuthRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Line of sight elevation in degrees and topocentric frame.
  ///  Example: /// Example: 76.1
  ///  Constraints: No constraints specified.
  double get elevation => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get elevationUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Sensor elevation bias in degrees.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  double get elevationBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Rate of change of the line of sight elevation in degrees per second.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get elevationRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
  ///  Example: /// Example: 0.00505820232809312
  ///  Constraints: No constraints specified.
  double get delay => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  One sigma uncertainty in the delay measurement, in seconds.
  ///  Example: /// Example: 3.1e-06
  ///  Constraints: No constraints specified.
  double get delayUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Delay bias in seconds.
  ///  Example: /// Example: 1.23e-06
  ///  Constraints: No constraints specified.
  double get delayBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
  ///  Example: /// Example: 754.8212
  ///  Constraints: No constraints specified.
  double get bistaticRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  One sigma uncertainty in bistatic range in kilometers.
  ///  Example: /// Example: 5.1
  ///  Constraints: No constraints specified.
  double get bistaticRangeUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Sensor bistatic range bias in kilometers.
  ///  Example: /// Example: 2.34
  ///  Constraints: No constraints specified.
  double get bistaticRangeBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Rate of change of the bistatic path in kilometers/sec.
  ///  Example: /// Example: -0.30222
  ///  Constraints: No constraints specified.
  double get bistaticRangeRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  double get bistaticRangeRateUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Bistatic range acceleration in kilometers/sec^2.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get bistaticRangeAccel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  double get bistaticRangeAccelUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Doppler measurement in hertz.
  ///  Example: /// Example: -101.781641000597
  ///  Constraints: No constraints specified.
  double get doppler => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  One sigma uncertainty in the Doppler measurement in hertz.
  ///  Example: /// Example: 0.2
  ///  Constraints: No constraints specified.
  double get dopplerUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  Coning angle in degrees.
  ///  Example: /// Example: 60.1
  ///  Constraints: No constraints specified.
  double get coning => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  One sigma uncertainty in the coning angle measurement, in degrees.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get coningUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
  ///  Example: /// Example: 0.00592856674135648
  ///  Constraints: No constraints specified.
  double get tof => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  One sigma uncertainty in time of flight in seconds.
  ///  Example: /// Example: 3.1e-06
  ///  Constraints: No constraints specified.
  double get tofUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  The Time of Flight (TOF) bias in seconds.
  ///  Example: /// Example: 1.23e-06
  ///  Constraints: No constraints specified.
  double get tofBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  The target Acceleration measurement in kilometers/sec^2 for this observation.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get accel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  double get accelUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  Line of sight right ascension in degrees and J2000 coordinate frame.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get ra => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  Line of sight declination angle in degrees and J2000 coordinate frame.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get declination => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: -35.1181763996856
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 139.613567052763
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
  ///  Example: /// Example: 478.056378
  ///  Constraints: No constraints specified.
  double get alt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  X velocity of target in kilometers/sec in J2000 coordinate frame.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get xvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  Y velocity of target in kilometers/sec in J2000 coordinate frame.
  ///  Example: /// Example: 3.21
  ///  Constraints: No constraints specified.
  double get yvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  Z velocity of target in kilometers/sec in J2000 coordinate frame.
  ///  Example: /// Example: 3.12
  ///  Constraints: No constraints specified.
  double get zvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  Radar cross section in meters squared for polarization principal.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  double get rcs => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get rcsUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  Radar cross section in meters squared for orthogonal polarization.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get orthogonalRcs => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get orthogonalRcsUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  Signal to noise ratio, in dB.
  ///  Example: /// Example: 17.292053
  ///  Constraints: No constraints specified.
  double get snr => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  Sensor timing bias in seconds.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get timingBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 116);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: Descriptor
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get descriptor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 120);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 122);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 124);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 126);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 128);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 130);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 132);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  PassiveRadarObservationIngestDataModeEnum get dataMode => PassiveRadarObservationIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 134, 0));
  ///  Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  ///  Example: /// Example: RADAR
  ///  Constraints: No constraints specified.
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 136);

  @override
  String toString() {
    return 'PassiveRadarObservationIngest{id: ${id}, classificationMarking: ${classificationMarking}, obTime: ${obTime}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, idRfemitter: ${idRfemitter}, idSensorRefReceiver: ${idSensorRefReceiver}, extObservationId: ${extObservationId}, taskId: ${taskId}, trackId: ${trackId}, obPosition: ${obPosition}, uct: ${uct}, azimuth: ${azimuth}, azimuthUnc: ${azimuthUnc}, azimuthBias: ${azimuthBias}, azimuthRate: ${azimuthRate}, elevation: ${elevation}, elevationUnc: ${elevationUnc}, elevationBias: ${elevationBias}, elevationRate: ${elevationRate}, delay: ${delay}, delayUnc: ${delayUnc}, delayBias: ${delayBias}, bistaticRange: ${bistaticRange}, bistaticRangeUnc: ${bistaticRangeUnc}, bistaticRangeBias: ${bistaticRangeBias}, bistaticRangeRate: ${bistaticRangeRate}, bistaticRangeRateUnc: ${bistaticRangeRateUnc}, bistaticRangeAccel: ${bistaticRangeAccel}, bistaticRangeAccelUnc: ${bistaticRangeAccelUnc}, doppler: ${doppler}, dopplerUnc: ${dopplerUnc}, coning: ${coning}, coningUnc: ${coningUnc}, tof: ${tof}, tofUnc: ${tofUnc}, tofBias: ${tofBias}, accel: ${accel}, accelUnc: ${accelUnc}, ra: ${ra}, declination: ${declination}, lat: ${lat}, lon: ${lon}, alt: ${alt}, xvel: ${xvel}, yvel: ${yvel}, zvel: ${zvel}, rcs: ${rcs}, rcsUnc: ${rcsUnc}, orthogonalRcs: ${orthogonalRcs}, orthogonalRcsUnc: ${orthogonalRcsUnc}, snr: ${snr}, timingBias: ${timingBias}, tags: ${tags}, transactionId: ${transactionId}, descriptor: ${descriptor}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, sourceDl: ${sourceDl}, dataMode: ${dataMode}, type: ${type}}';
  }
}

class _PassiveRadarObservationIngestReader extends fb.TableReader<PassiveRadarObservationIngest> {
  const _PassiveRadarObservationIngestReader();

  @override
  PassiveRadarObservationIngest createObject(fb.BufferContext bc, int offset) => 
    PassiveRadarObservationIngest._(bc, offset);
}

class PassiveRadarObservationIngestBuilder {
  PassiveRadarObservationIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(67);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addObTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(4, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addIdRfemitterOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addIdSensorRefReceiverOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addExtObservationIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addTaskIdOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addTrackIdOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addObPositionOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addUct(bool? uct) {
    fbBuilder.addBool(14, uct);
    return fbBuilder.offset;
  }
  int addAzimuth(double? azimuth) {
    fbBuilder.addFloat64(15, azimuth);
    return fbBuilder.offset;
  }
  int addAzimuthUnc(double? azimuthUnc) {
    fbBuilder.addFloat64(16, azimuthUnc);
    return fbBuilder.offset;
  }
  int addAzimuthBias(double? azimuthBias) {
    fbBuilder.addFloat64(17, azimuthBias);
    return fbBuilder.offset;
  }
  int addAzimuthRate(double? azimuthRate) {
    fbBuilder.addFloat64(18, azimuthRate);
    return fbBuilder.offset;
  }
  int addElevation(double? elevation) {
    fbBuilder.addFloat64(19, elevation);
    return fbBuilder.offset;
  }
  int addElevationUnc(double? elevationUnc) {
    fbBuilder.addFloat64(20, elevationUnc);
    return fbBuilder.offset;
  }
  int addElevationBias(double? elevationBias) {
    fbBuilder.addFloat64(21, elevationBias);
    return fbBuilder.offset;
  }
  int addElevationRate(double? elevationRate) {
    fbBuilder.addFloat64(22, elevationRate);
    return fbBuilder.offset;
  }
  int addDelay(double? delay) {
    fbBuilder.addFloat64(23, delay);
    return fbBuilder.offset;
  }
  int addDelayUnc(double? delayUnc) {
    fbBuilder.addFloat64(24, delayUnc);
    return fbBuilder.offset;
  }
  int addDelayBias(double? delayBias) {
    fbBuilder.addFloat64(25, delayBias);
    return fbBuilder.offset;
  }
  int addBistaticRange(double? bistaticRange) {
    fbBuilder.addFloat64(26, bistaticRange);
    return fbBuilder.offset;
  }
  int addBistaticRangeUnc(double? bistaticRangeUnc) {
    fbBuilder.addFloat64(27, bistaticRangeUnc);
    return fbBuilder.offset;
  }
  int addBistaticRangeBias(double? bistaticRangeBias) {
    fbBuilder.addFloat64(28, bistaticRangeBias);
    return fbBuilder.offset;
  }
  int addBistaticRangeRate(double? bistaticRangeRate) {
    fbBuilder.addFloat64(29, bistaticRangeRate);
    return fbBuilder.offset;
  }
  int addBistaticRangeRateUnc(double? bistaticRangeRateUnc) {
    fbBuilder.addFloat64(30, bistaticRangeRateUnc);
    return fbBuilder.offset;
  }
  int addBistaticRangeAccel(double? bistaticRangeAccel) {
    fbBuilder.addFloat64(31, bistaticRangeAccel);
    return fbBuilder.offset;
  }
  int addBistaticRangeAccelUnc(double? bistaticRangeAccelUnc) {
    fbBuilder.addFloat64(32, bistaticRangeAccelUnc);
    return fbBuilder.offset;
  }
  int addDoppler(double? doppler) {
    fbBuilder.addFloat64(33, doppler);
    return fbBuilder.offset;
  }
  int addDopplerUnc(double? dopplerUnc) {
    fbBuilder.addFloat64(34, dopplerUnc);
    return fbBuilder.offset;
  }
  int addConing(double? coning) {
    fbBuilder.addFloat64(35, coning);
    return fbBuilder.offset;
  }
  int addConingUnc(double? coningUnc) {
    fbBuilder.addFloat64(36, coningUnc);
    return fbBuilder.offset;
  }
  int addTof(double? tof) {
    fbBuilder.addFloat64(37, tof);
    return fbBuilder.offset;
  }
  int addTofUnc(double? tofUnc) {
    fbBuilder.addFloat64(38, tofUnc);
    return fbBuilder.offset;
  }
  int addTofBias(double? tofBias) {
    fbBuilder.addFloat64(39, tofBias);
    return fbBuilder.offset;
  }
  int addAccel(double? accel) {
    fbBuilder.addFloat64(40, accel);
    return fbBuilder.offset;
  }
  int addAccelUnc(double? accelUnc) {
    fbBuilder.addFloat64(41, accelUnc);
    return fbBuilder.offset;
  }
  int addRa(double? ra) {
    fbBuilder.addFloat64(42, ra);
    return fbBuilder.offset;
  }
  int addDeclination(double? declination) {
    fbBuilder.addFloat64(43, declination);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(44, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(45, lon);
    return fbBuilder.offset;
  }
  int addAlt(double? alt) {
    fbBuilder.addFloat64(46, alt);
    return fbBuilder.offset;
  }
  int addXvel(double? xvel) {
    fbBuilder.addFloat64(47, xvel);
    return fbBuilder.offset;
  }
  int addYvel(double? yvel) {
    fbBuilder.addFloat64(48, yvel);
    return fbBuilder.offset;
  }
  int addZvel(double? zvel) {
    fbBuilder.addFloat64(49, zvel);
    return fbBuilder.offset;
  }
  int addRcs(double? rcs) {
    fbBuilder.addFloat64(50, rcs);
    return fbBuilder.offset;
  }
  int addRcsUnc(double? rcsUnc) {
    fbBuilder.addFloat64(51, rcsUnc);
    return fbBuilder.offset;
  }
  int addOrthogonalRcs(double? orthogonalRcs) {
    fbBuilder.addFloat64(52, orthogonalRcs);
    return fbBuilder.offset;
  }
  int addOrthogonalRcsUnc(double? orthogonalRcsUnc) {
    fbBuilder.addFloat64(53, orthogonalRcsUnc);
    return fbBuilder.offset;
  }
  int addSnr(double? snr) {
    fbBuilder.addFloat64(54, snr);
    return fbBuilder.offset;
  }
  int addTimingBias(double? timingBias) {
    fbBuilder.addFloat64(55, timingBias);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(58, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(59, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(64, offset);
    return fbBuilder.offset;
  }
  int addDataMode(PassiveRadarObservationIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(65, dataMode?.value);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(66, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PassiveRadarObservationIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _obTime;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final String? _idSensor;
  final String? _origSensorId;
  final String? _idRfemitter;
  final String? _idSensorRefReceiver;
  final String? _extObservationId;
  final String? _taskId;
  final String? _trackId;
  final String? _obPosition;
  final bool? _uct;
  final double? _azimuth;
  final double? _azimuthUnc;
  final double? _azimuthBias;
  final double? _azimuthRate;
  final double? _elevation;
  final double? _elevationUnc;
  final double? _elevationBias;
  final double? _elevationRate;
  final double? _delay;
  final double? _delayUnc;
  final double? _delayBias;
  final double? _bistaticRange;
  final double? _bistaticRangeUnc;
  final double? _bistaticRangeBias;
  final double? _bistaticRangeRate;
  final double? _bistaticRangeRateUnc;
  final double? _bistaticRangeAccel;
  final double? _bistaticRangeAccelUnc;
  final double? _doppler;
  final double? _dopplerUnc;
  final double? _coning;
  final double? _coningUnc;
  final double? _tof;
  final double? _tofUnc;
  final double? _tofBias;
  final double? _accel;
  final double? _accelUnc;
  final double? _ra;
  final double? _declination;
  final double? _lat;
  final double? _lon;
  final double? _alt;
  final double? _xvel;
  final double? _yvel;
  final double? _zvel;
  final double? _rcs;
  final double? _rcsUnc;
  final double? _orthogonalRcs;
  final double? _orthogonalRcsUnc;
  final double? _snr;
  final double? _timingBias;
  final List<String>? _tags;
  final String? _transactionId;
  final String? _descriptor;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final String? _sourceDl;
  final PassiveRadarObservationIngestDataModeEnum? _dataMode;
  final String? _type;

  PassiveRadarObservationIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? obTime,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    String? idSensor,
    String? origSensorId,
    String? idRfemitter,
    String? idSensorRefReceiver,
    String? extObservationId,
    String? taskId,
    String? trackId,
    String? obPosition,
    bool? uct,
    double? azimuth,
    double? azimuthUnc,
    double? azimuthBias,
    double? azimuthRate,
    double? elevation,
    double? elevationUnc,
    double? elevationBias,
    double? elevationRate,
    double? delay,
    double? delayUnc,
    double? delayBias,
    double? bistaticRange,
    double? bistaticRangeUnc,
    double? bistaticRangeBias,
    double? bistaticRangeRate,
    double? bistaticRangeRateUnc,
    double? bistaticRangeAccel,
    double? bistaticRangeAccelUnc,
    double? doppler,
    double? dopplerUnc,
    double? coning,
    double? coningUnc,
    double? tof,
    double? tofUnc,
    double? tofBias,
    double? accel,
    double? accelUnc,
    double? ra,
    double? declination,
    double? lat,
    double? lon,
    double? alt,
    double? xvel,
    double? yvel,
    double? zvel,
    double? rcs,
    double? rcsUnc,
    double? orthogonalRcs,
    double? orthogonalRcsUnc,
    double? snr,
    double? timingBias,
    List<String>? tags,
    String? transactionId,
    String? descriptor,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    String? sourceDl,
    PassiveRadarObservationIngestDataModeEnum? dataMode,
    String? type,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _obTime = obTime,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _idRfemitter = idRfemitter,
        _idSensorRefReceiver = idSensorRefReceiver,
        _extObservationId = extObservationId,
        _taskId = taskId,
        _trackId = trackId,
        _obPosition = obPosition,
        _uct = uct,
        _azimuth = azimuth,
        _azimuthUnc = azimuthUnc,
        _azimuthBias = azimuthBias,
        _azimuthRate = azimuthRate,
        _elevation = elevation,
        _elevationUnc = elevationUnc,
        _elevationBias = elevationBias,
        _elevationRate = elevationRate,
        _delay = delay,
        _delayUnc = delayUnc,
        _delayBias = delayBias,
        _bistaticRange = bistaticRange,
        _bistaticRangeUnc = bistaticRangeUnc,
        _bistaticRangeBias = bistaticRangeBias,
        _bistaticRangeRate = bistaticRangeRate,
        _bistaticRangeRateUnc = bistaticRangeRateUnc,
        _bistaticRangeAccel = bistaticRangeAccel,
        _bistaticRangeAccelUnc = bistaticRangeAccelUnc,
        _doppler = doppler,
        _dopplerUnc = dopplerUnc,
        _coning = coning,
        _coningUnc = coningUnc,
        _tof = tof,
        _tofUnc = tofUnc,
        _tofBias = tofBias,
        _accel = accel,
        _accelUnc = accelUnc,
        _ra = ra,
        _declination = declination,
        _lat = lat,
        _lon = lon,
        _alt = alt,
        _xvel = xvel,
        _yvel = yvel,
        _zvel = zvel,
        _rcs = rcs,
        _rcsUnc = rcsUnc,
        _orthogonalRcs = orthogonalRcs,
        _orthogonalRcsUnc = orthogonalRcsUnc,
        _snr = snr,
        _timingBias = timingBias,
        _tags = tags,
        _transactionId = transactionId,
        _descriptor = descriptor,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _sourceDl = sourceDl,
        _dataMode = dataMode,
        _type = type;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? obTimeOffset = _obTime == null ? null
        : fbBuilder.writeString(_obTime!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? idRfemitterOffset = _idRfemitter == null ? null
        : fbBuilder.writeString(_idRfemitter!);
    final int? idSensorRefReceiverOffset = _idSensorRefReceiver == null ? null
        : fbBuilder.writeString(_idSensorRefReceiver!);
    final int? extObservationIdOffset = _extObservationId == null ? null
        : fbBuilder.writeString(_extObservationId!);
    final int? taskIdOffset = _taskId == null ? null
        : fbBuilder.writeString(_taskId!);
    final int? trackIdOffset = _trackId == null ? null
        : fbBuilder.writeString(_trackId!);
    final int? obPositionOffset = _obPosition == null ? null
        : fbBuilder.writeString(_obPosition!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? descriptorOffset = _descriptor == null ? null
        : fbBuilder.writeString(_descriptor!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    fbBuilder.startTable(67);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, obTimeOffset);
    fbBuilder.addOffset(3, idOnOrbitOffset);
    fbBuilder.addInt32(4, _satNo);
    fbBuilder.addOffset(5, origObjectIdOffset);
    fbBuilder.addOffset(6, idSensorOffset);
    fbBuilder.addOffset(7, origSensorIdOffset);
    fbBuilder.addOffset(8, idRfemitterOffset);
    fbBuilder.addOffset(9, idSensorRefReceiverOffset);
    fbBuilder.addOffset(10, extObservationIdOffset);
    fbBuilder.addOffset(11, taskIdOffset);
    fbBuilder.addOffset(12, trackIdOffset);
    fbBuilder.addOffset(13, obPositionOffset);
    fbBuilder.addBool(14, _uct);
    fbBuilder.addFloat64(15, _azimuth);
    fbBuilder.addFloat64(16, _azimuthUnc);
    fbBuilder.addFloat64(17, _azimuthBias);
    fbBuilder.addFloat64(18, _azimuthRate);
    fbBuilder.addFloat64(19, _elevation);
    fbBuilder.addFloat64(20, _elevationUnc);
    fbBuilder.addFloat64(21, _elevationBias);
    fbBuilder.addFloat64(22, _elevationRate);
    fbBuilder.addFloat64(23, _delay);
    fbBuilder.addFloat64(24, _delayUnc);
    fbBuilder.addFloat64(25, _delayBias);
    fbBuilder.addFloat64(26, _bistaticRange);
    fbBuilder.addFloat64(27, _bistaticRangeUnc);
    fbBuilder.addFloat64(28, _bistaticRangeBias);
    fbBuilder.addFloat64(29, _bistaticRangeRate);
    fbBuilder.addFloat64(30, _bistaticRangeRateUnc);
    fbBuilder.addFloat64(31, _bistaticRangeAccel);
    fbBuilder.addFloat64(32, _bistaticRangeAccelUnc);
    fbBuilder.addFloat64(33, _doppler);
    fbBuilder.addFloat64(34, _dopplerUnc);
    fbBuilder.addFloat64(35, _coning);
    fbBuilder.addFloat64(36, _coningUnc);
    fbBuilder.addFloat64(37, _tof);
    fbBuilder.addFloat64(38, _tofUnc);
    fbBuilder.addFloat64(39, _tofBias);
    fbBuilder.addFloat64(40, _accel);
    fbBuilder.addFloat64(41, _accelUnc);
    fbBuilder.addFloat64(42, _ra);
    fbBuilder.addFloat64(43, _declination);
    fbBuilder.addFloat64(44, _lat);
    fbBuilder.addFloat64(45, _lon);
    fbBuilder.addFloat64(46, _alt);
    fbBuilder.addFloat64(47, _xvel);
    fbBuilder.addFloat64(48, _yvel);
    fbBuilder.addFloat64(49, _zvel);
    fbBuilder.addFloat64(50, _rcs);
    fbBuilder.addFloat64(51, _rcsUnc);
    fbBuilder.addFloat64(52, _orthogonalRcs);
    fbBuilder.addFloat64(53, _orthogonalRcsUnc);
    fbBuilder.addFloat64(54, _snr);
    fbBuilder.addFloat64(55, _timingBias);
    fbBuilder.addOffset(56, tagsOffset);
    fbBuilder.addOffset(57, transactionIdOffset);
    fbBuilder.addOffset(58, descriptorOffset);
    fbBuilder.addOffset(59, createdAtOffset);
    fbBuilder.addOffset(60, createdByOffset);
    fbBuilder.addOffset(61, sourceOffset);
    fbBuilder.addOffset(62, originOffset);
    fbBuilder.addOffset(63, origNetworkOffset);
    fbBuilder.addOffset(64, sourceDlOffset);
    fbBuilder.addInt8(65, _dataMode?.value);
    fbBuilder.addOffset(66, typeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
