// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SiteStatusFullInstStatusEnum {
  final int value;
  const SiteStatusFullInstStatusEnum._(this.value);

  factory SiteStatusFullInstStatusEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusFullInstStatusEnum');
    }
    return result;
  }

  static SiteStatusFullInstStatusEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusFullInstStatusEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SiteStatusFullInstStatusEnum FMC = SiteStatusFullInstStatusEnum._(0);

  ///  No description available.
  static const SiteStatusFullInstStatusEnum PMC = SiteStatusFullInstStatusEnum._(1);

  ///  No description available.
  static const SiteStatusFullInstStatusEnum NMC = SiteStatusFullInstStatusEnum._(2);

  ///  No description available.
  static const SiteStatusFullInstStatusEnum UNK = SiteStatusFullInstStatusEnum._(3);
  static const Map<int, SiteStatusFullInstStatusEnum> values = {
    0: FMC,
    1: PMC,
    2: NMC,
    3: UNK};

  static const fb.Reader<SiteStatusFullInstStatusEnum> reader = _SiteStatusFullInstStatusEnumReader();

  @override
  String toString() {
    return 'SiteStatusFullInstStatusEnum{value: $value}';
  }
}

class _SiteStatusFullInstStatusEnumReader extends fb.Reader<SiteStatusFullInstStatusEnum> {
  const _SiteStatusFullInstStatusEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusFullInstStatusEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusFullInstStatusEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SiteStatusFullFpconEnum {
  final int value;
  const SiteStatusFullFpconEnum._(this.value);

  factory SiteStatusFullFpconEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusFullFpconEnum');
    }
    return result;
  }

  static SiteStatusFullFpconEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusFullFpconEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SiteStatusFullFpconEnum NORMAL = SiteStatusFullFpconEnum._(0);

  ///  No description available.
  static const SiteStatusFullFpconEnum ALPHA = SiteStatusFullFpconEnum._(1);

  ///  No description available.
  static const SiteStatusFullFpconEnum BRAVO = SiteStatusFullFpconEnum._(2);

  ///  No description available.
  static const SiteStatusFullFpconEnum CHARLIE = SiteStatusFullFpconEnum._(3);

  ///  No description available.
  static const SiteStatusFullFpconEnum DELTA = SiteStatusFullFpconEnum._(4);
  static const Map<int, SiteStatusFullFpconEnum> values = {
    0: NORMAL,
    1: ALPHA,
    2: BRAVO,
    3: CHARLIE,
    4: DELTA};

  static const fb.Reader<SiteStatusFullFpconEnum> reader = _SiteStatusFullFpconEnumReader();

  @override
  String toString() {
    return 'SiteStatusFullFpconEnum{value: $value}';
  }
}

class _SiteStatusFullFpconEnumReader extends fb.Reader<SiteStatusFullFpconEnum> {
  const _SiteStatusFullFpconEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusFullFpconEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusFullFpconEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SiteStatusFullHpconEnum {
  final int value;
  const SiteStatusFullHpconEnum._(this.value);

  factory SiteStatusFullHpconEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusFullHpconEnum');
    }
    return result;
  }

  static SiteStatusFullHpconEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusFullHpconEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SiteStatusFullHpconEnum E0 = SiteStatusFullHpconEnum._(0);

  ///  No description available.
  static const SiteStatusFullHpconEnum ALPHA = SiteStatusFullHpconEnum._(1);

  ///  No description available.
  static const SiteStatusFullHpconEnum BRAVO = SiteStatusFullHpconEnum._(2);

  ///  No description available.
  static const SiteStatusFullHpconEnum CHARLIE = SiteStatusFullHpconEnum._(3);

  ///  No description available.
  static const SiteStatusFullHpconEnum DELTA = SiteStatusFullHpconEnum._(4);
  static const Map<int, SiteStatusFullHpconEnum> values = {
    0: E0,
    1: ALPHA,
    2: BRAVO,
    3: CHARLIE,
    4: DELTA};

  static const fb.Reader<SiteStatusFullHpconEnum> reader = _SiteStatusFullHpconEnumReader();

  @override
  String toString() {
    return 'SiteStatusFullHpconEnum{value: $value}';
  }
}

class _SiteStatusFullHpconEnumReader extends fb.Reader<SiteStatusFullHpconEnum> {
  const _SiteStatusFullHpconEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusFullHpconEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusFullHpconEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SiteStatusFullCpconEnum {
  final int value;
  const SiteStatusFullCpconEnum._(this.value);

  factory SiteStatusFullCpconEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusFullCpconEnum');
    }
    return result;
  }

  static SiteStatusFullCpconEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusFullCpconEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SiteStatusFullCpconEnum E1 = SiteStatusFullCpconEnum._(0);

  ///  No description available.
  static const SiteStatusFullCpconEnum E2 = SiteStatusFullCpconEnum._(1);

  ///  No description available.
  static const SiteStatusFullCpconEnum E3 = SiteStatusFullCpconEnum._(2);

  ///  No description available.
  static const SiteStatusFullCpconEnum E4 = SiteStatusFullCpconEnum._(3);

  ///  No description available.
  static const SiteStatusFullCpconEnum E5 = SiteStatusFullCpconEnum._(4);
  static const Map<int, SiteStatusFullCpconEnum> values = {
    0: E1,
    1: E2,
    2: E3,
    3: E4,
    4: E5};

  static const fb.Reader<SiteStatusFullCpconEnum> reader = _SiteStatusFullCpconEnumReader();

  @override
  String toString() {
    return 'SiteStatusFullCpconEnum{value: $value}';
  }
}

class _SiteStatusFullCpconEnumReader extends fb.Reader<SiteStatusFullCpconEnum> {
  const _SiteStatusFullCpconEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusFullCpconEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusFullCpconEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SiteStatusFullCatEnum {
  final int value;
  const SiteStatusFullCatEnum._(this.value);

  factory SiteStatusFullCatEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusFullCatEnum');
    }
    return result;
  }

  static SiteStatusFullCatEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusFullCatEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SiteStatusFullCatEnum COLD = SiteStatusFullCatEnum._(0);

  ///  No description available.
  static const SiteStatusFullCatEnum WARM = SiteStatusFullCatEnum._(1);

  ///  No description available.
  static const SiteStatusFullCatEnum HOT = SiteStatusFullCatEnum._(2);
  static const Map<int, SiteStatusFullCatEnum> values = {
    0: COLD,
    1: WARM,
    2: HOT};

  static const fb.Reader<SiteStatusFullCatEnum> reader = _SiteStatusFullCatEnumReader();

  @override
  String toString() {
    return 'SiteStatusFullCatEnum{value: $value}';
  }
}

class _SiteStatusFullCatEnumReader extends fb.Reader<SiteStatusFullCatEnum> {
  const _SiteStatusFullCatEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusFullCatEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusFullCatEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SiteStatusFullEocEnum {
  final int value;
  const SiteStatusFullEocEnum._(this.value);

  factory SiteStatusFullEocEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusFullEocEnum');
    }
    return result;
  }

  static SiteStatusFullEocEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusFullEocEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SiteStatusFullEocEnum COLD = SiteStatusFullEocEnum._(0);

  ///  No description available.
  static const SiteStatusFullEocEnum WARM = SiteStatusFullEocEnum._(1);

  ///  No description available.
  static const SiteStatusFullEocEnum HOT = SiteStatusFullEocEnum._(2);
  static const Map<int, SiteStatusFullEocEnum> values = {
    0: COLD,
    1: WARM,
    2: HOT};

  static const fb.Reader<SiteStatusFullEocEnum> reader = _SiteStatusFullEocEnumReader();

  @override
  String toString() {
    return 'SiteStatusFullEocEnum{value: $value}';
  }
}

class _SiteStatusFullEocEnumReader extends fb.Reader<SiteStatusFullEocEnum> {
  const _SiteStatusFullEocEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusFullEocEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusFullEocEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SiteStatusFullDataModeEnum {
  final int value;
  const SiteStatusFullDataModeEnum._(this.value);

  factory SiteStatusFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteStatusFullDataModeEnum');
    }
    return result;
  }

  static SiteStatusFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SiteStatusFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SiteStatusFullDataModeEnum REAL = SiteStatusFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SiteStatusFullDataModeEnum TEST = SiteStatusFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SiteStatusFullDataModeEnum SIMULATED = SiteStatusFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SiteStatusFullDataModeEnum EXERCISE = SiteStatusFullDataModeEnum._(3);
  static const Map<int, SiteStatusFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SiteStatusFullDataModeEnum> reader = _SiteStatusFullDataModeEnumReader();

  @override
  String toString() {
    return 'SiteStatusFullDataModeEnum{value: $value}';
  }
}

class _SiteStatusFullDataModeEnumReader extends fb.Reader<SiteStatusFullDataModeEnum> {
  const _SiteStatusFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SiteStatusFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      SiteStatusFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// No description available.
class SiteStatusFull {
  SiteStatusFull._(this._bc, this._bcOffset);
  factory SiteStatusFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SiteStatusFull> reader = _SiteStatusFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SITESTATUS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The ID of the site, if this status is associated with a fixed site or platform.
  ///  Example: /// Example: 41e3e554-9790-40b9-bd7b-f30d864dcad8
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idSite => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
  ///  Example: /// Example: ADOC
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get siteType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Alternate Identifier for a mobile or transportable platform provided by source.
  ///  Example: /// Example: MOBILEALT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get mobileAltId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The POI (point of interest) ID related to this platform, if available.
  ///  Example: /// Example: d4a91864-6140-4b8d-67cd-45421c75f696
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get poiid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The track ID related to this platform (if mobile or transportable), if available.
  ///  Example: /// Example: PCM4923-1656174732-4-1-257
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trackId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Link-16 specific reference track number.
  ///  Example: /// Example: TrkNm
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get trackRefL16 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).
  ///  Example: /// Example: Fully Operational
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get opsCapability => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The status of the installation.
  ///  FMC - Fully Mission Capable
  ///   PMC - Partially Mission Capable
  ///  NMC - Non Mission Capable
  ///  UNK - Unknown.
  ///  Example: /// Example: PMC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  SiteStatusFullInstStatusEnum get instStatus => SiteStatusFullInstStatusEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 22, 0));
  ///  Force Protection Condition (FPCON).
  ///  NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.
  ///  ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.
  ///  BRAVO - Applies when an increased or predictable threat of terrorist activity exists.
  ///  CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.
  ///  DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
  ///  Example: /// Example: BRAVO
  ///  Constraints: Minimum length = 0, Maximum length = 7
  SiteStatusFullFpconEnum get fpcon => SiteStatusFullFpconEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 24, 0));
  ///  Health Protection Condition (HPCON).
  ///  0 - Routine, no community transmission.
  ///  ALPHA - Limited, community transmission beginning.
  ///  BRAVO - Moderate, increased community transmission.
  ///  CHARLIE - Substantial, sustained community transmission.
  ///  DELTA - Severe, widespread community transmission.
  ///  Example: /// Example: CHARLIE
  ///  Constraints: Minimum length = 0, Maximum length = 7
  SiteStatusFullHpconEnum get hpcon => SiteStatusFullHpconEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 26, 0));
  ///  Cyberspace Protection Condition (CPCON).
  ///  1 - VERY HIGH - Critical functions.
  ///  2 - HIGH - Critical and essential functions.
  ///  3 - MEDIUM - Critical, essential, and support functions.
  ///  4 - LOW - All functions.
  ///  5 - VERY LOW - All functions.
  ///  Example: /// Example: 4
  ///  Constraints: Minimum length = 0, Maximum length = 1
  SiteStatusFullCpconEnum get cpcon => SiteStatusFullCpconEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 28, 0));
  ///  Time of report, in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get reportTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.
  ///  Example: /// Example: Activation
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get timeFunction => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Description of the current weather conditions over a site.
  ///  Example: /// Example: Heavy rain
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get weatherMessage => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get pes => const fb.BoolReader().vTableGet(_bc, _bcOffset, 36, false);
  ///  Estimated number of hot missiles of all types remaining in weapons system inventory.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get hotInventory => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 38, 0);
  ///  Estimated number of cold missiles of all types remaining in weapons system inventory.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get coldInventory => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
  ///  Example: /// Example: Initialization
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get samMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  SAM sensor radar surveillance mode (Active, Passive, Off).
  ///  Example: /// Example: Active
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get radiateMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The primary component degrading the operational capability of the platform or system.
  ///  Example: /// Example: opsImpairment
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get opsImpairment => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  The communications component causing the platform or system to be less than fully operational.
  ///  Example: /// Example: commImpairment
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get commImpairment => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Crisis Action Team (CAT).
  ///  COLD - Not in use.
  ///  WARM - Facility prepped/possible skeleton crew.
  ///  HOT - Fully active.
  ///  Example: /// Example: COLD
  ///  Constraints: Minimum length = 0, Maximum length = 4
  SiteStatusFullCatEnum get cat => SiteStatusFullCatEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 50, 0));
  ///  Emergency Operations Center (EOC) status.
  ///  COLD - Not in use.
  ///  WARM - Facility prepped/possible skeleton crew.
  ///  HOT - Fully active.
  ///  Example: /// Example: WARM
  ///  Constraints: Minimum length = 0, Maximum length = 4
  SiteStatusFullEocEnum get eoc => SiteStatusFullEocEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 52, 0));
  ///  Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.
  ///  Example: /// Example: ['ATDL', 'IJMS', 'LINK-1']
  ///  Constraints: No constraints specified.
  List<String>? get link => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 54);
  ///  Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.
  ///  Example: /// Example: ['AVAILABLE', 'DEGRADED', 'NOT AVAILABLE']
  ///  Constraints: No constraints specified.
  List<String>? get linkStatus => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 56);
  ///  Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.
  ///  Example: /// Example: ['ILLUMINATING', 'MODE-4', 'MODE-3']
  ///  Constraints: No constraints specified.
  List<String>? get radarSystem => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 58);
  ///  Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.
  ///  Example: /// Example: ['OPERATIONAL', 'OFF', 'NON-OPERATIONAL']
  ///  Constraints: No constraints specified.
  List<String>? get radarStatus => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 60);
  ///  Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.
  ///  Example: /// Example: ['GMD', 'HARPOON', 'JAVELIN']
  ///  Constraints: No constraints specified.
  List<String>? get missile => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 62);
  ///  Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.
  ///  Example: /// Example: [5, 10, 100]
  ///  Constraints: No constraints specified.
  List<String>? get missileInventory => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 64);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SiteStatusFullDataModeEnum get dataMode => SiteStatusFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 80, 0));

  @override
  String toString() {
    return 'SiteStatusFull{id: ${id}, classificationMarking: ${classificationMarking}, idSite: ${idSite}, siteType: ${siteType}, mobileAltId: ${mobileAltId}, poiid: ${poiid}, trackId: ${trackId}, trackRefL16: ${trackRefL16}, opsCapability: ${opsCapability}, instStatus: ${instStatus}, fpcon: ${fpcon}, hpcon: ${hpcon}, cpcon: ${cpcon}, reportTime: ${reportTime}, timeFunction: ${timeFunction}, weatherMessage: ${weatherMessage}, pes: ${pes}, hotInventory: ${hotInventory}, coldInventory: ${coldInventory}, samMode: ${samMode}, radiateMode: ${radiateMode}, opsImpairment: ${opsImpairment}, commImpairment: ${commImpairment}, cat: ${cat}, eoc: ${eoc}, link: ${link}, linkStatus: ${linkStatus}, radarSystem: ${radarSystem}, radarStatus: ${radarStatus}, missile: ${missile}, missileInventory: ${missileInventory}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _SiteStatusFullReader extends fb.TableReader<SiteStatusFull> {
  const _SiteStatusFullReader();

  @override
  SiteStatusFull createObject(fb.BufferContext bc, int offset) => 
    SiteStatusFull._(bc, offset);
}

class SiteStatusFullBuilder {
  SiteStatusFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(39);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdSiteOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSiteTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMobileAltIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPoiidOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTrackIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTrackRefL16Offset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOpsCapabilityOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addInstStatus(SiteStatusFullInstStatusEnum? instStatus) {
    fbBuilder.addInt8(9, instStatus?.value);
    return fbBuilder.offset;
  }
  int addFpcon(SiteStatusFullFpconEnum? fpcon) {
    fbBuilder.addInt8(10, fpcon?.value);
    return fbBuilder.offset;
  }
  int addHpcon(SiteStatusFullHpconEnum? hpcon) {
    fbBuilder.addInt8(11, hpcon?.value);
    return fbBuilder.offset;
  }
  int addCpcon(SiteStatusFullCpconEnum? cpcon) {
    fbBuilder.addInt8(12, cpcon?.value);
    return fbBuilder.offset;
  }
  int addReportTimeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addTimeFunctionOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addWeatherMessageOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addPes(bool? pes) {
    fbBuilder.addBool(16, pes);
    return fbBuilder.offset;
  }
  int addHotInventory(int? hotInventory) {
    fbBuilder.addInt32(17, hotInventory);
    return fbBuilder.offset;
  }
  int addColdInventory(int? coldInventory) {
    fbBuilder.addInt32(18, coldInventory);
    return fbBuilder.offset;
  }
  int addSamModeOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addRadiateModeOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addOpsImpairmentOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addCommImpairmentOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addCat(SiteStatusFullCatEnum? cat) {
    fbBuilder.addInt8(23, cat?.value);
    return fbBuilder.offset;
  }
  int addEoc(SiteStatusFullEocEnum? eoc) {
    fbBuilder.addInt8(24, eoc?.value);
    return fbBuilder.offset;
  }
  int addLinkOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addLinkStatusOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addRadarSystemOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addRadarStatusOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addMissileOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addMissileInventoryOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SiteStatusFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(38, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SiteStatusFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idSite;
  final String? _siteType;
  final String? _mobileAltId;
  final String? _poiid;
  final String? _trackId;
  final String? _trackRefL16;
  final String? _opsCapability;
  final SiteStatusFullInstStatusEnum? _instStatus;
  final SiteStatusFullFpconEnum? _fpcon;
  final SiteStatusFullHpconEnum? _hpcon;
  final SiteStatusFullCpconEnum? _cpcon;
  final String? _reportTime;
  final String? _timeFunction;
  final String? _weatherMessage;
  final bool? _pes;
  final int? _hotInventory;
  final int? _coldInventory;
  final String? _samMode;
  final String? _radiateMode;
  final String? _opsImpairment;
  final String? _commImpairment;
  final SiteStatusFullCatEnum? _cat;
  final SiteStatusFullEocEnum? _eoc;
  final List<String>? _link;
  final List<String>? _linkStatus;
  final List<String>? _radarSystem;
  final List<String>? _radarStatus;
  final List<String>? _missile;
  final List<String>? _missileInventory;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SiteStatusFullDataModeEnum? _dataMode;

  SiteStatusFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idSite,
    String? siteType,
    String? mobileAltId,
    String? poiid,
    String? trackId,
    String? trackRefL16,
    String? opsCapability,
    SiteStatusFullInstStatusEnum? instStatus,
    SiteStatusFullFpconEnum? fpcon,
    SiteStatusFullHpconEnum? hpcon,
    SiteStatusFullCpconEnum? cpcon,
    String? reportTime,
    String? timeFunction,
    String? weatherMessage,
    bool? pes,
    int? hotInventory,
    int? coldInventory,
    String? samMode,
    String? radiateMode,
    String? opsImpairment,
    String? commImpairment,
    SiteStatusFullCatEnum? cat,
    SiteStatusFullEocEnum? eoc,
    List<String>? link,
    List<String>? linkStatus,
    List<String>? radarSystem,
    List<String>? radarStatus,
    List<String>? missile,
    List<String>? missileInventory,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    SiteStatusFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idSite = idSite,
        _siteType = siteType,
        _mobileAltId = mobileAltId,
        _poiid = poiid,
        _trackId = trackId,
        _trackRefL16 = trackRefL16,
        _opsCapability = opsCapability,
        _instStatus = instStatus,
        _fpcon = fpcon,
        _hpcon = hpcon,
        _cpcon = cpcon,
        _reportTime = reportTime,
        _timeFunction = timeFunction,
        _weatherMessage = weatherMessage,
        _pes = pes,
        _hotInventory = hotInventory,
        _coldInventory = coldInventory,
        _samMode = samMode,
        _radiateMode = radiateMode,
        _opsImpairment = opsImpairment,
        _commImpairment = commImpairment,
        _cat = cat,
        _eoc = eoc,
        _link = link,
        _linkStatus = linkStatus,
        _radarSystem = radarSystem,
        _radarStatus = radarStatus,
        _missile = missile,
        _missileInventory = missileInventory,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idSiteOffset = _idSite == null ? null
        : fbBuilder.writeString(_idSite!);
    final int? siteTypeOffset = _siteType == null ? null
        : fbBuilder.writeString(_siteType!);
    final int? mobileAltIdOffset = _mobileAltId == null ? null
        : fbBuilder.writeString(_mobileAltId!);
    final int? poiidOffset = _poiid == null ? null
        : fbBuilder.writeString(_poiid!);
    final int? trackIdOffset = _trackId == null ? null
        : fbBuilder.writeString(_trackId!);
    final int? trackRefL16Offset = _trackRefL16 == null ? null
        : fbBuilder.writeString(_trackRefL16!);
    final int? opsCapabilityOffset = _opsCapability == null ? null
        : fbBuilder.writeString(_opsCapability!);
    final int? reportTimeOffset = _reportTime == null ? null
        : fbBuilder.writeString(_reportTime!);
    final int? timeFunctionOffset = _timeFunction == null ? null
        : fbBuilder.writeString(_timeFunction!);
    final int? weatherMessageOffset = _weatherMessage == null ? null
        : fbBuilder.writeString(_weatherMessage!);
    final int? samModeOffset = _samMode == null ? null
        : fbBuilder.writeString(_samMode!);
    final int? radiateModeOffset = _radiateMode == null ? null
        : fbBuilder.writeString(_radiateMode!);
    final int? opsImpairmentOffset = _opsImpairment == null ? null
        : fbBuilder.writeString(_opsImpairment!);
    final int? commImpairmentOffset = _commImpairment == null ? null
        : fbBuilder.writeString(_commImpairment!);
    final int? linkOffset = _link == null ? null
        : fbBuilder.writeList(_link!.map(fbBuilder.writeString).toList());
    final int? linkStatusOffset = _linkStatus == null ? null
        : fbBuilder.writeList(_linkStatus!.map(fbBuilder.writeString).toList());
    final int? radarSystemOffset = _radarSystem == null ? null
        : fbBuilder.writeList(_radarSystem!.map(fbBuilder.writeString).toList());
    final int? radarStatusOffset = _radarStatus == null ? null
        : fbBuilder.writeList(_radarStatus!.map(fbBuilder.writeString).toList());
    final int? missileOffset = _missile == null ? null
        : fbBuilder.writeList(_missile!.map(fbBuilder.writeString).toList());
    final int? missileInventoryOffset = _missileInventory == null ? null
        : fbBuilder.writeList(_missileInventory!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(39);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idSiteOffset);
    fbBuilder.addOffset(3, siteTypeOffset);
    fbBuilder.addOffset(4, mobileAltIdOffset);
    fbBuilder.addOffset(5, poiidOffset);
    fbBuilder.addOffset(6, trackIdOffset);
    fbBuilder.addOffset(7, trackRefL16Offset);
    fbBuilder.addOffset(8, opsCapabilityOffset);
    fbBuilder.addInt8(9, _instStatus?.value);
    fbBuilder.addInt8(10, _fpcon?.value);
    fbBuilder.addInt8(11, _hpcon?.value);
    fbBuilder.addInt8(12, _cpcon?.value);
    fbBuilder.addOffset(13, reportTimeOffset);
    fbBuilder.addOffset(14, timeFunctionOffset);
    fbBuilder.addOffset(15, weatherMessageOffset);
    fbBuilder.addBool(16, _pes);
    fbBuilder.addInt32(17, _hotInventory);
    fbBuilder.addInt32(18, _coldInventory);
    fbBuilder.addOffset(19, samModeOffset);
    fbBuilder.addOffset(20, radiateModeOffset);
    fbBuilder.addOffset(21, opsImpairmentOffset);
    fbBuilder.addOffset(22, commImpairmentOffset);
    fbBuilder.addInt8(23, _cat?.value);
    fbBuilder.addInt8(24, _eoc?.value);
    fbBuilder.addOffset(25, linkOffset);
    fbBuilder.addOffset(26, linkStatusOffset);
    fbBuilder.addOffset(27, radarSystemOffset);
    fbBuilder.addOffset(28, radarStatusOffset);
    fbBuilder.addOffset(29, missileOffset);
    fbBuilder.addOffset(30, missileInventoryOffset);
    fbBuilder.addOffset(31, createdAtOffset);
    fbBuilder.addOffset(32, createdByOffset);
    fbBuilder.addOffset(33, updatedAtOffset);
    fbBuilder.addOffset(34, updatedByOffset);
    fbBuilder.addOffset(35, sourceOffset);
    fbBuilder.addOffset(36, originOffset);
    fbBuilder.addOffset(37, origNetworkOffset);
    fbBuilder.addInt8(38, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
