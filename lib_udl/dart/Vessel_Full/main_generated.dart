// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class VesselFullDataModeEnum {
  final int value;
  const VesselFullDataModeEnum._(this.value);

  factory VesselFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum VesselFullDataModeEnum');
    }
    return result;
  }

  static VesselFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : VesselFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const VesselFullDataModeEnum REAL = VesselFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const VesselFullDataModeEnum TEST = VesselFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const VesselFullDataModeEnum SIMULATED = VesselFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const VesselFullDataModeEnum EXERCISE = VesselFullDataModeEnum._(3);
  static const Map<int, VesselFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<VesselFullDataModeEnum> reader = _VesselFullDataModeEnumReader();

  @override
  String toString() {
    return 'VesselFullDataModeEnum{value: $value}';
  }
}

class _VesselFullDataModeEnumReader extends fb.Reader<VesselFullDataModeEnum> {
  const _VesselFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  VesselFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      VesselFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// This service provides operations for manipulation and querying of maritime Vessel data. Vessel contains the static data of the specific vessel: mmsi, cruise speed, max speed, etc.
class VesselFull {
  VesselFull._(this._bc, this._bcOffset);
  factory VesselFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VesselFull> reader = _VesselFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get entity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the parent entity. idEntity is required for Put.
  ///  Example: /// Example: ENTITY-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idEntity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The original source Id for this vessel.
  ///  Example: /// Example: 590b5194fc32e75dd00682ba
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get altVesselId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The UDL ID of the organization that owns the vessel.
  ///  Example: /// Example: 0147f777-w09a-835f-85aa-0a07a730fgg0
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOrganization => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The name of this vessel. Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
  ///  Example: /// Example: DORNUM
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get vesselName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).
  ///  Example: /// Example: Passenger
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get vesselType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The common name for a group of ships with similar design, usually named for the first vessel of the class.
  ///  Example: /// Example: Nimitz
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get vesselClass => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Further description or explanation of the vessel or type.
  ///  Example: /// Example: Search and Rescue Vessel
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get vesselDescription => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
  ///  Example: /// Example: B45524
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get sconum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
  ///  Example: /// Example: 9566356
  ///  Constraints: No constraints specified.
  int get imon => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
  ///  Example: /// Example: 416450000
  ///  Constraints: Minimum length = 0, Maximum length = 9
  String? get mmsi => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  A uniquely designated identifier for the vessel's transmitter station. All radio transmissions must be individually identified by the call sign. Merchant and naval vessels are assigned call signs by their national licensing authorities.
  ///  Example: /// Example: V2OZ
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get callsign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The flag of the subject vessel.
  ///  Example: /// Example: United States
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get vesselFlag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Year the vessel went into service.
  ///  Example: /// Example: 2014
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get yearBuilt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The shipbuilder who built this vessel.
  ///  Example: /// Example: Samsung Heavy Inds - Geoje
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get vesselBuilder => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The status of this vessel.
  ///  Example: /// Example: In Service/Commission
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The date this vessel was first seen.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get firstSeen => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
  ///  Example: /// Example: 511.1
  ///  Constraints: No constraints specified.
  double get length => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
  ///  Example: /// Example: 24.1
  ///  Constraints: No constraints specified.
  double get width => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  The maximum static draught, in meters, of the vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel.
  ///  Example: /// Example: 21.1
  ///  Constraints: No constraints specified.
  double get maxDraught => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  The weight in tons, of this vessel.
  ///  Example: /// Example: 3423.76
  ///  Constraints: No constraints specified.
  double get vslWt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  The maximum possible speed of this vessel in meters per second.
  ///  Example: /// Example: 32.5
  ///  Constraints: No constraints specified.
  double get maxSpeed => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  The stern type code (Counter, Cruiser) associated with this vessel.
  ///  Example: /// Example: Cruiser
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get sternType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  The number of blades per shaft for this vessel.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  int get numBlades => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  The number of shafts on this vessel.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get numShafts => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  The type of propulsion employed by this vessel.
  ///  Example: /// Example: Diesel
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get propType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  The vessel hull number designation of this maritime vessel. The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
  ///  Example: /// Example: A30081
  ///  Constraints: Minimum length = 0, Maximum length = 7
  String? get hullNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 64
  VesselFullDataModeEnum get dataMode => VesselFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 76, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);

  @override
  String toString() {
    return 'VesselFull{id: ${id}, classificationMarking: ${classificationMarking}, entity: ${entity}, idEntity: ${idEntity}, altVesselId: ${altVesselId}, idOrganization: ${idOrganization}, vesselName: ${vesselName}, vesselType: ${vesselType}, vesselClass: ${vesselClass}, vesselDescription: ${vesselDescription}, sconum: ${sconum}, imon: ${imon}, mmsi: ${mmsi}, callsign: ${callsign}, vesselFlag: ${vesselFlag}, yearBuilt: ${yearBuilt}, vesselBuilder: ${vesselBuilder}, status: ${status}, firstSeen: ${firstSeen}, length: ${length}, width: ${width}, maxDraught: ${maxDraught}, vslWt: ${vslWt}, maxSpeed: ${maxSpeed}, sternType: ${sternType}, numBlades: ${numBlades}, numShafts: ${numShafts}, propType: ${propType}, hullNum: ${hullNum}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, sourceDl: ${sourceDl}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _VesselFullReader extends fb.TableReader<VesselFull> {
  const _VesselFullReader();

  @override
  VesselFull createObject(fb.BufferContext bc, int offset) => 
    VesselFull._(bc, offset);
}

class VesselFullBuilder {
  VesselFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(38);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEntityOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdEntityOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addAltVesselIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdOrganizationOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addVesselNameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addVesselTypeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addVesselClassOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addVesselDescriptionOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSconumOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addImon(int? imon) {
    fbBuilder.addInt32(11, imon);
    return fbBuilder.offset;
  }
  int addMmsiOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addCallsignOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addVesselFlagOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addYearBuiltOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addVesselBuilderOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addFirstSeenOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addLength(double? length) {
    fbBuilder.addFloat64(19, length);
    return fbBuilder.offset;
  }
  int addWidth(double? width) {
    fbBuilder.addFloat64(20, width);
    return fbBuilder.offset;
  }
  int addMaxDraught(double? maxDraught) {
    fbBuilder.addFloat64(21, maxDraught);
    return fbBuilder.offset;
  }
  int addVslWt(double? vslWt) {
    fbBuilder.addFloat64(22, vslWt);
    return fbBuilder.offset;
  }
  int addMaxSpeed(double? maxSpeed) {
    fbBuilder.addFloat64(23, maxSpeed);
    return fbBuilder.offset;
  }
  int addSternTypeOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addNumBlades(int? numBlades) {
    fbBuilder.addInt32(25, numBlades);
    return fbBuilder.offset;
  }
  int addNumShafts(int? numShafts) {
    fbBuilder.addInt32(26, numShafts);
    return fbBuilder.offset;
  }
  int addPropTypeOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addHullNumOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addDataMode(VesselFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(36, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VesselFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _entity;
  final String? _idEntity;
  final String? _altVesselId;
  final String? _idOrganization;
  final String? _vesselName;
  final String? _vesselType;
  final String? _vesselClass;
  final String? _vesselDescription;
  final String? _sconum;
  final int? _imon;
  final String? _mmsi;
  final String? _callsign;
  final String? _vesselFlag;
  final String? _yearBuilt;
  final String? _vesselBuilder;
  final String? _status;
  final String? _firstSeen;
  final double? _length;
  final double? _width;
  final double? _maxDraught;
  final double? _vslWt;
  final double? _maxSpeed;
  final String? _sternType;
  final int? _numBlades;
  final int? _numShafts;
  final String? _propType;
  final String? _hullNum;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _sourceDl;
  final String? _origin;
  final VesselFullDataModeEnum? _dataMode;
  final String? _origNetwork;

  VesselFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? entity,
    String? idEntity,
    String? altVesselId,
    String? idOrganization,
    String? vesselName,
    String? vesselType,
    String? vesselClass,
    String? vesselDescription,
    String? sconum,
    int? imon,
    String? mmsi,
    String? callsign,
    String? vesselFlag,
    String? yearBuilt,
    String? vesselBuilder,
    String? status,
    String? firstSeen,
    double? length,
    double? width,
    double? maxDraught,
    double? vslWt,
    double? maxSpeed,
    String? sternType,
    int? numBlades,
    int? numShafts,
    String? propType,
    String? hullNum,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? sourceDl,
    String? origin,
    VesselFullDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _entity = entity,
        _idEntity = idEntity,
        _altVesselId = altVesselId,
        _idOrganization = idOrganization,
        _vesselName = vesselName,
        _vesselType = vesselType,
        _vesselClass = vesselClass,
        _vesselDescription = vesselDescription,
        _sconum = sconum,
        _imon = imon,
        _mmsi = mmsi,
        _callsign = callsign,
        _vesselFlag = vesselFlag,
        _yearBuilt = yearBuilt,
        _vesselBuilder = vesselBuilder,
        _status = status,
        _firstSeen = firstSeen,
        _length = length,
        _width = width,
        _maxDraught = maxDraught,
        _vslWt = vslWt,
        _maxSpeed = maxSpeed,
        _sternType = sternType,
        _numBlades = numBlades,
        _numShafts = numShafts,
        _propType = propType,
        _hullNum = hullNum,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _sourceDl = sourceDl,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? entityOffset = _entity == null ? null
        : fbBuilder.writeString(_entity!);
    final int? idEntityOffset = _idEntity == null ? null
        : fbBuilder.writeString(_idEntity!);
    final int? altVesselIdOffset = _altVesselId == null ? null
        : fbBuilder.writeString(_altVesselId!);
    final int? idOrganizationOffset = _idOrganization == null ? null
        : fbBuilder.writeString(_idOrganization!);
    final int? vesselNameOffset = _vesselName == null ? null
        : fbBuilder.writeString(_vesselName!);
    final int? vesselTypeOffset = _vesselType == null ? null
        : fbBuilder.writeString(_vesselType!);
    final int? vesselClassOffset = _vesselClass == null ? null
        : fbBuilder.writeString(_vesselClass!);
    final int? vesselDescriptionOffset = _vesselDescription == null ? null
        : fbBuilder.writeString(_vesselDescription!);
    final int? sconumOffset = _sconum == null ? null
        : fbBuilder.writeString(_sconum!);
    final int? mmsiOffset = _mmsi == null ? null
        : fbBuilder.writeString(_mmsi!);
    final int? callsignOffset = _callsign == null ? null
        : fbBuilder.writeString(_callsign!);
    final int? vesselFlagOffset = _vesselFlag == null ? null
        : fbBuilder.writeString(_vesselFlag!);
    final int? yearBuiltOffset = _yearBuilt == null ? null
        : fbBuilder.writeString(_yearBuilt!);
    final int? vesselBuilderOffset = _vesselBuilder == null ? null
        : fbBuilder.writeString(_vesselBuilder!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? firstSeenOffset = _firstSeen == null ? null
        : fbBuilder.writeString(_firstSeen!);
    final int? sternTypeOffset = _sternType == null ? null
        : fbBuilder.writeString(_sternType!);
    final int? propTypeOffset = _propType == null ? null
        : fbBuilder.writeString(_propType!);
    final int? hullNumOffset = _hullNum == null ? null
        : fbBuilder.writeString(_hullNum!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(38);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, entityOffset);
    fbBuilder.addOffset(3, idEntityOffset);
    fbBuilder.addOffset(4, altVesselIdOffset);
    fbBuilder.addOffset(5, idOrganizationOffset);
    fbBuilder.addOffset(6, vesselNameOffset);
    fbBuilder.addOffset(7, vesselTypeOffset);
    fbBuilder.addOffset(8, vesselClassOffset);
    fbBuilder.addOffset(9, vesselDescriptionOffset);
    fbBuilder.addOffset(10, sconumOffset);
    fbBuilder.addInt32(11, _imon);
    fbBuilder.addOffset(12, mmsiOffset);
    fbBuilder.addOffset(13, callsignOffset);
    fbBuilder.addOffset(14, vesselFlagOffset);
    fbBuilder.addOffset(15, yearBuiltOffset);
    fbBuilder.addOffset(16, vesselBuilderOffset);
    fbBuilder.addOffset(17, statusOffset);
    fbBuilder.addOffset(18, firstSeenOffset);
    fbBuilder.addFloat64(19, _length);
    fbBuilder.addFloat64(20, _width);
    fbBuilder.addFloat64(21, _maxDraught);
    fbBuilder.addFloat64(22, _vslWt);
    fbBuilder.addFloat64(23, _maxSpeed);
    fbBuilder.addOffset(24, sternTypeOffset);
    fbBuilder.addInt32(25, _numBlades);
    fbBuilder.addInt32(26, _numShafts);
    fbBuilder.addOffset(27, propTypeOffset);
    fbBuilder.addOffset(28, hullNumOffset);
    fbBuilder.addOffset(29, createdAtOffset);
    fbBuilder.addOffset(30, createdByOffset);
    fbBuilder.addOffset(31, updatedAtOffset);
    fbBuilder.addOffset(32, updatedByOffset);
    fbBuilder.addOffset(33, sourceOffset);
    fbBuilder.addOffset(34, sourceDlOffset);
    fbBuilder.addOffset(35, originOffset);
    fbBuilder.addInt8(36, _dataMode?.value);
    fbBuilder.addOffset(37, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
