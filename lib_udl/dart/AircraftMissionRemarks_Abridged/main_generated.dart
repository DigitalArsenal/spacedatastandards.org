// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of Remarks associated with this Air Transport Mission.
class AircraftMissionRemarksAbridged {
  AircraftMissionRemarksAbridged._(this._bc, this._bcOffset);
  factory AircraftMissionRemarksAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AircraftMissionRemarksAbridged> reader = _AircraftMissionRemarksAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Global Decision Support System (GDSS) remark identifier.
  ///  Example: /// Example: GDSSREMARK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get gdssRemarkId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Remark type.
  ///  Example: /// Example: MP
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Text of the remark.
  ///  Example: /// Example: Example mission remarks.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get text => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get date => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  User who published the remark.
  ///  Example: /// Example: John Doe
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get user => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  If the remark is sortie specific, this is the number of the sortie it applies to.
  ///  Example: /// Example: 825
  ///  Constraints: No constraints specified.
  int get itineraryNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);

  @override
  String toString() {
    return 'AircraftMissionRemarksAbridged{gdssRemarkId: ${gdssRemarkId}, type: ${type}, text: ${text}, date: ${date}, user: ${user}, itineraryNum: ${itineraryNum}}';
  }
}

class _AircraftMissionRemarksAbridgedReader extends fb.TableReader<AircraftMissionRemarksAbridged> {
  const _AircraftMissionRemarksAbridgedReader();

  @override
  AircraftMissionRemarksAbridged createObject(fb.BufferContext bc, int offset) => 
    AircraftMissionRemarksAbridged._(bc, offset);
}

class AircraftMissionRemarksAbridgedBuilder {
  AircraftMissionRemarksAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addGdssRemarkIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTextOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDateOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addUserOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addItineraryNum(int? itineraryNum) {
    fbBuilder.addInt32(5, itineraryNum);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AircraftMissionRemarksAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _gdssRemarkId;
  final String? _type;
  final String? _text;
  final String? _date;
  final String? _user;
  final int? _itineraryNum;

  AircraftMissionRemarksAbridgedObjectBuilder({
    String? gdssRemarkId,
    String? type,
    String? text,
    String? date,
    String? user,
    int? itineraryNum,
  })
      : _gdssRemarkId = gdssRemarkId,
        _type = type,
        _text = text,
        _date = date,
        _user = user,
        _itineraryNum = itineraryNum;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? gdssRemarkIdOffset = _gdssRemarkId == null ? null
        : fbBuilder.writeString(_gdssRemarkId!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? textOffset = _text == null ? null
        : fbBuilder.writeString(_text!);
    final int? dateOffset = _date == null ? null
        : fbBuilder.writeString(_date!);
    final int? userOffset = _user == null ? null
        : fbBuilder.writeString(_user!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, gdssRemarkIdOffset);
    fbBuilder.addOffset(1, typeOffset);
    fbBuilder.addOffset(2, textOffset);
    fbBuilder.addOffset(3, dateOffset);
    fbBuilder.addOffset(4, userOffset);
    fbBuilder.addInt32(5, _itineraryNum);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
