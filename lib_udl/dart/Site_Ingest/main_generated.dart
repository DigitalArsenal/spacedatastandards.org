// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SiteIngestDataModeEnum {
  final int value;
  const SiteIngestDataModeEnum._(this.value);

  factory SiteIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteIngestDataModeEnum');
    }
    return result;
  }

  static SiteIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SiteIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SiteIngestDataModeEnum REAL = SiteIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SiteIngestDataModeEnum TEST = SiteIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SiteIngestDataModeEnum SIMULATED = SiteIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SiteIngestDataModeEnum EXERCISE = SiteIngestDataModeEnum._(3);
  static const Map<int, SiteIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SiteIngestDataModeEnum> reader = _SiteIngestDataModeEnumReader();

  @override
  String toString() {
    return 'SiteIngestDataModeEnum{value: $value}';
  }
}

class _SiteIngestDataModeEnumReader extends fb.Reader<SiteIngestDataModeEnum> {
  const _SiteIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SiteIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      SiteIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Properties and characteristics of a site entity, such as an airbase, airfield, naval station, etc.
class SiteIngest {
  SiteIngest._(this._bc, this._bcOffset);
  factory SiteIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SiteIngest> reader = _SiteIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SITE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get entity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the parent entity. idEntity is required for Put.
  ///  Example: /// Example: ENTITY-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idEntity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the Parent Site record associated with this Site record.
  ///  Example: /// Example: ID-Parent-Site
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idParentSite => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the Site record from the originating system.
  ///  Example: /// Example: ORIG-SITE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origSiteId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Unique identifier of the LZ record from the originating system.
  ///  Example: /// Example: ORIG-LZ-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origLzId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Site number of a specific electronic site or its associated equipment.
  ///  Example: /// Example: 25200
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get pin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).
  ///  Example: /// Example: AIRBASE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).
  ///  Example: /// Example: MILITARY
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get usage => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:
  ///  AF - Airfield
  ///  FD - Field
  ///  HC - High Crop.  1 meter and over.
  ///  HY - Highway
  ///  LB - Lake Bed
  ///  LC - Low Crop.  0-1 meters
  ///  O - Other. Explain In Remarks.
  ///  PD - Paddy
  ///  PK - Park
  ///  PS - Pasture
  ///  RB - Riverbed
  ///  SP - Sport Field
  ///  U - Unknown
  ///  Z - Inconclusive Analysis.
  ///  Example: /// Example: AF
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get lzUsage => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The name of this site.
  ///  Example: /// Example: Site Name
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: WGS
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get coordDatum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
  ///  Pos. 1-2.  Latitude Degrees     [00-90]
  ///  Pos. 3-4.  Latitude Minutes     [00-59]
  ///  Pos. 5-6.  Latitude Seconds     [00-59]
  ///  Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
  ///  Pos. 10. Latitude Hemisphere       [NS] 
  ///  Pos. 11-13. Longitude Degrees     [00-180] 
  ///  Pos. 14-15. Longitude Minutes     [00-59] 
  ///  Pos. 16-17. Longitude Seconds     [00-59] 
  ///  Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
  ///  Pos. 21. Longitude Hemisphere     [EW]
  ///  Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].
  ///  Example: /// Example: 340000000N0430000000E
  ///  Constraints: Minimum length = 0, Maximum length = 21
  String? get coord => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Indicates the plus or minus error assessed against the method used to derive the coordinate.
  ///  Example: /// Example: 12.345
  ///  Constraints: No constraints specified.
  double get coordDerivAcc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.
  ///  Example: /// Example: BB002
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get osuffix => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The International Air Transport Association (IATA) code of this site, if applicable.
  ///  Example: /// Example: AAA
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get iata => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The International Civil Aviation Organization (ICAO) code of this site, if applicable.
  ///  Example: /// Example: ICA1
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get icao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The Federal Aviation Administration (FAA) Location ID of this site, if applicable.
  ///  Example: /// Example: FAA1
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get faa => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
  ///  Example: /// Example: AL006
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get airDefArea => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Universal Transverse Mercator (UTM) grid coordinates.
  ///  Pos. 1-2, UTM Zone Column   [01-60
  ///  Pos. 3, UTM Zone Row   [C-HJ-NP-X]
  ///  Pos. 4, UTM False Easting   [0-9]
  ///  Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
  ///  Pos. 10-11, UTM False Northing    [0-9][0-9]
  ///  Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
  ///  Example: /// Example: 19P4390691376966
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get utm => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Indicates the grid system used in the development of the milGrid coordinates. Values are:
  ///  UPS - Universal Polar System
  ///  UTM - Universal Transverse Mercator.
  ///  Example: /// Example: UTM
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get milGridSys => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  ///  4Q (grid zone designator, GZD)
  ///  FJ (the 100,000-meter square identifier)
  ///  12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  ///  Example: /// Example: 4QFJ12345678
  ///  Constraints: Minimum length = 0, Maximum length = 15
  String? get milGrid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The category code that represents the associated site purpose within the target system.
  ///  Example: /// Example: 20345
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get catCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Textual Description of Site catCode.
  ///  Example: /// Example: Radar Facility, General
  ///  Constraints: Minimum length = 0, Maximum length = 148
  String? get catText => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  World Aeronautical Chart identifier for the area in which a designated place is located.
  ///  Example: /// Example: 0427
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get wac => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: IZO7
  ///  Constraints: Minimum length = 0, Maximum length = 7
  String? get polSubdiv => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: E2
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get geoArea => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  The distance between Mean Sea Level and a referenced ellipsoid, in meters.
  ///  Example: /// Example: 12.34
  ///  Constraints: No constraints specified.
  double get geoidalMslSep => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: OTHR
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get allegiance => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
  ///  Example: /// Example: HL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get altAllegiance => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
  ///  0 - Does not meet criteria above
  ///  1 - Primary importance to system
  ///  2 - Secondary importance to system
  ///  3 - Tertiary importance to system
  ///  O - Other. Explain in Remarks.
  ///  Example: /// Example: 1
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get classRating => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: EOB
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get fpa => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.
  ///  Example: /// Example: 0427RT1030
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get beNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  The number of runways at the site, if applicable.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get runways => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 72, 0);
  ///  The length of the longest runway at this site, if applicable, in meters.
  ///  Example: /// Example: 1000
  ///  Constraints: No constraints specified.
  int get maxRunwayLength => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 74, 0);
  ///  The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: RDY
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get condition => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get conditionAvail => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: OPR
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get operStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get grade => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 82, 0);
  ///  Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: OCC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get activity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: JG
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get functPrimary => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: AA
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get msnPrimary => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: AB
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get msnPrimarySpec => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  A sites ability to conduct nuclear warfare. Valid Values are:
  ///  A - Nuclear Ammo Or Warheads Available
  ///  N - No Nuclear Offense
  ///  O - Other. Explain in Remarks
  ///  U - Unknown
  ///  W - Nuclear Weapons Available
  ///  Y - Nuclear Warfare Offensive Capability
  ///  Z - Inconclusive Analysis.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get nucCap => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
  ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
  ///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
  ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///  PENDING: Track object which has not been evaluated.
  ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get ident => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.
  ///  Example: /// Example: 123.45
  ///  Constraints: No constraints specified.
  double get elevMsl => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
  ///  Example: /// Example: 50
  ///  Constraints: No constraints specified.
  int get elevMslConfLvl => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 98, 0);
  ///  Indicates the plus or minus error assessed against the method used to derive the elevation.
  ///  Example: /// Example: 12.34
  ///  Constraints: No constraints specified.
  double get elevMslDerivAcc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  double get vegHt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: FR
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get vegType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get popArea => const fb.BoolReader().vTableGet(_bc, _bcOffset, 106, false);
  ///  Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.
  ///  Example: /// Example: 12.345
  ///  Constraints: No constraints specified.
  double get popAreaProx => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  Optional notes/comments for the site.
  ///  Example: /// Example: Example Notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);
  ///  Responsible Producer - Organization that is responsible for the maintenance of the record.
  ///  Example: /// Example: RT
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get resProd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  int get eval => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 114, 0);
  ///  Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.
  ///  Example: /// Example: 2008-06-10
  ///  Constraints: No constraints specified.
  String? get reviewDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);
  ///  Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.
  ///  A - Active
  ///  I - Inactive
  ///  K - Acknowledged
  ///  L - Local
  ///  Q - A nominated (NOM) or Data Change Request (DCR) record
  ///  R - Production reduced by CMD decision
  ///  W - Working Record.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get recStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.
  ///  Example: /// Example: SOGPU----------
  ///  Constraints: Minimum length = 0, Maximum length = 15
  String? get symCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 120);
  ///  The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: Provider Reference Documentation
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get referenceDoc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 122);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 124);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 126);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 128);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 130);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 132);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SiteIngestDataModeEnum get dataMode => SiteIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 134, 0));

  @override
  String toString() {
    return 'SiteIngest{id: ${id}, entity: ${entity}, idEntity: ${idEntity}, idParentSite: ${idParentSite}, classificationMarking: ${classificationMarking}, origSiteId: ${origSiteId}, origLzId: ${origLzId}, pin: ${pin}, type: ${type}, usage: ${usage}, lzUsage: ${lzUsage}, name: ${name}, coordDatum: ${coordDatum}, coord: ${coord}, coordDerivAcc: ${coordDerivAcc}, osuffix: ${osuffix}, iata: ${iata}, icao: ${icao}, faa: ${faa}, airDefArea: ${airDefArea}, utm: ${utm}, milGridSys: ${milGridSys}, milGrid: ${milGrid}, catCode: ${catCode}, catText: ${catText}, wac: ${wac}, polSubdiv: ${polSubdiv}, geoArea: ${geoArea}, geoidalMslSep: ${geoidalMslSep}, allegiance: ${allegiance}, altAllegiance: ${altAllegiance}, classRating: ${classRating}, fpa: ${fpa}, beNumber: ${beNumber}, runways: ${runways}, maxRunwayLength: ${maxRunwayLength}, condition: ${condition}, conditionAvail: ${conditionAvail}, operStatus: ${operStatus}, grade: ${grade}, activity: ${activity}, functPrimary: ${functPrimary}, msnPrimary: ${msnPrimary}, msnPrimarySpec: ${msnPrimarySpec}, nucCap: ${nucCap}, ident: ${ident}, elevMsl: ${elevMsl}, elevMslConfLvl: ${elevMslConfLvl}, elevMslDerivAcc: ${elevMslDerivAcc}, vegHt: ${vegHt}, vegType: ${vegType}, popArea: ${popArea}, popAreaProx: ${popAreaProx}, notes: ${notes}, resProd: ${resProd}, eval: ${eval}, reviewDate: ${reviewDate}, recStatus: ${recStatus}, symCode: ${symCode}, referenceDoc: ${referenceDoc}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _SiteIngestReader extends fb.TableReader<SiteIngest> {
  const _SiteIngestReader();

  @override
  SiteIngest createObject(fb.BufferContext bc, int offset) => 
    SiteIngest._(bc, offset);
}

class SiteIngestBuilder {
  SiteIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(66);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addEntityOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdEntityOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdParentSiteOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addOrigSiteIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addOrigLzIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addPinOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addUsageOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addLzUsageOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCoordDatumOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addCoordOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCoordDerivAcc(double? coordDerivAcc) {
    fbBuilder.addFloat64(14, coordDerivAcc);
    return fbBuilder.offset;
  }
  int addOsuffixOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addIataOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addIcaoOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addFaaOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addAirDefAreaOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addUtmOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addMilGridSysOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addMilGridOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addCatCodeOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addCatTextOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addWacOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addPolSubdivOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addGeoAreaOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addGeoidalMslSep(double? geoidalMslSep) {
    fbBuilder.addFloat64(28, geoidalMslSep);
    return fbBuilder.offset;
  }
  int addAllegianceOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addAltAllegianceOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addClassRatingOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addFpaOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addBeNumberOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addRunways(int? runways) {
    fbBuilder.addInt32(34, runways);
    return fbBuilder.offset;
  }
  int addMaxRunwayLength(int? maxRunwayLength) {
    fbBuilder.addInt32(35, maxRunwayLength);
    return fbBuilder.offset;
  }
  int addConditionOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addConditionAvailOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addOperStatusOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addGrade(int? grade) {
    fbBuilder.addInt32(39, grade);
    return fbBuilder.offset;
  }
  int addActivityOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addFunctPrimaryOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addMsnPrimaryOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addMsnPrimarySpecOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addNucCapOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addIdentOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addElevMsl(double? elevMsl) {
    fbBuilder.addFloat64(46, elevMsl);
    return fbBuilder.offset;
  }
  int addElevMslConfLvl(int? elevMslConfLvl) {
    fbBuilder.addInt32(47, elevMslConfLvl);
    return fbBuilder.offset;
  }
  int addElevMslDerivAcc(double? elevMslDerivAcc) {
    fbBuilder.addFloat64(48, elevMslDerivAcc);
    return fbBuilder.offset;
  }
  int addVegHt(double? vegHt) {
    fbBuilder.addFloat64(49, vegHt);
    return fbBuilder.offset;
  }
  int addVegTypeOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addPopArea(bool? popArea) {
    fbBuilder.addBool(51, popArea);
    return fbBuilder.offset;
  }
  int addPopAreaProx(double? popAreaProx) {
    fbBuilder.addFloat64(52, popAreaProx);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addResProdOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addEval(int? eval) {
    fbBuilder.addInt32(55, eval);
    return fbBuilder.offset;
  }
  int addReviewDateOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addRecStatusOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addSymCodeOffset(int? offset) {
    fbBuilder.addOffset(58, offset);
    return fbBuilder.offset;
  }
  int addReferenceDocOffset(int? offset) {
    fbBuilder.addOffset(59, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(64, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SiteIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(65, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SiteIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _entity;
  final String? _idEntity;
  final String? _idParentSite;
  final String? _classificationMarking;
  final String? _origSiteId;
  final String? _origLzId;
  final String? _pin;
  final String? _type;
  final String? _usage;
  final String? _lzUsage;
  final String? _name;
  final String? _coordDatum;
  final String? _coord;
  final double? _coordDerivAcc;
  final String? _osuffix;
  final String? _iata;
  final String? _icao;
  final String? _faa;
  final String? _airDefArea;
  final String? _utm;
  final String? _milGridSys;
  final String? _milGrid;
  final String? _catCode;
  final String? _catText;
  final String? _wac;
  final String? _polSubdiv;
  final String? _geoArea;
  final double? _geoidalMslSep;
  final String? _allegiance;
  final String? _altAllegiance;
  final String? _classRating;
  final String? _fpa;
  final String? _beNumber;
  final int? _runways;
  final int? _maxRunwayLength;
  final String? _condition;
  final String? _conditionAvail;
  final String? _operStatus;
  final int? _grade;
  final String? _activity;
  final String? _functPrimary;
  final String? _msnPrimary;
  final String? _msnPrimarySpec;
  final String? _nucCap;
  final String? _ident;
  final double? _elevMsl;
  final int? _elevMslConfLvl;
  final double? _elevMslDerivAcc;
  final double? _vegHt;
  final String? _vegType;
  final bool? _popArea;
  final double? _popAreaProx;
  final String? _notes;
  final String? _resProd;
  final int? _eval;
  final String? _reviewDate;
  final String? _recStatus;
  final String? _symCode;
  final String? _referenceDoc;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SiteIngestDataModeEnum? _dataMode;

  SiteIngestObjectBuilder({
    String? id,
    String? entity,
    String? idEntity,
    String? idParentSite,
    String? classificationMarking,
    String? origSiteId,
    String? origLzId,
    String? pin,
    String? type,
    String? usage,
    String? lzUsage,
    String? name,
    String? coordDatum,
    String? coord,
    double? coordDerivAcc,
    String? osuffix,
    String? iata,
    String? icao,
    String? faa,
    String? airDefArea,
    String? utm,
    String? milGridSys,
    String? milGrid,
    String? catCode,
    String? catText,
    String? wac,
    String? polSubdiv,
    String? geoArea,
    double? geoidalMslSep,
    String? allegiance,
    String? altAllegiance,
    String? classRating,
    String? fpa,
    String? beNumber,
    int? runways,
    int? maxRunwayLength,
    String? condition,
    String? conditionAvail,
    String? operStatus,
    int? grade,
    String? activity,
    String? functPrimary,
    String? msnPrimary,
    String? msnPrimarySpec,
    String? nucCap,
    String? ident,
    double? elevMsl,
    int? elevMslConfLvl,
    double? elevMslDerivAcc,
    double? vegHt,
    String? vegType,
    bool? popArea,
    double? popAreaProx,
    String? notes,
    String? resProd,
    int? eval,
    String? reviewDate,
    String? recStatus,
    String? symCode,
    String? referenceDoc,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    SiteIngestDataModeEnum? dataMode,
  })
      : _id = id,
        _entity = entity,
        _idEntity = idEntity,
        _idParentSite = idParentSite,
        _classificationMarking = classificationMarking,
        _origSiteId = origSiteId,
        _origLzId = origLzId,
        _pin = pin,
        _type = type,
        _usage = usage,
        _lzUsage = lzUsage,
        _name = name,
        _coordDatum = coordDatum,
        _coord = coord,
        _coordDerivAcc = coordDerivAcc,
        _osuffix = osuffix,
        _iata = iata,
        _icao = icao,
        _faa = faa,
        _airDefArea = airDefArea,
        _utm = utm,
        _milGridSys = milGridSys,
        _milGrid = milGrid,
        _catCode = catCode,
        _catText = catText,
        _wac = wac,
        _polSubdiv = polSubdiv,
        _geoArea = geoArea,
        _geoidalMslSep = geoidalMslSep,
        _allegiance = allegiance,
        _altAllegiance = altAllegiance,
        _classRating = classRating,
        _fpa = fpa,
        _beNumber = beNumber,
        _runways = runways,
        _maxRunwayLength = maxRunwayLength,
        _condition = condition,
        _conditionAvail = conditionAvail,
        _operStatus = operStatus,
        _grade = grade,
        _activity = activity,
        _functPrimary = functPrimary,
        _msnPrimary = msnPrimary,
        _msnPrimarySpec = msnPrimarySpec,
        _nucCap = nucCap,
        _ident = ident,
        _elevMsl = elevMsl,
        _elevMslConfLvl = elevMslConfLvl,
        _elevMslDerivAcc = elevMslDerivAcc,
        _vegHt = vegHt,
        _vegType = vegType,
        _popArea = popArea,
        _popAreaProx = popAreaProx,
        _notes = notes,
        _resProd = resProd,
        _eval = eval,
        _reviewDate = reviewDate,
        _recStatus = recStatus,
        _symCode = symCode,
        _referenceDoc = referenceDoc,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? entityOffset = _entity == null ? null
        : fbBuilder.writeString(_entity!);
    final int? idEntityOffset = _idEntity == null ? null
        : fbBuilder.writeString(_idEntity!);
    final int? idParentSiteOffset = _idParentSite == null ? null
        : fbBuilder.writeString(_idParentSite!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? origSiteIdOffset = _origSiteId == null ? null
        : fbBuilder.writeString(_origSiteId!);
    final int? origLzIdOffset = _origLzId == null ? null
        : fbBuilder.writeString(_origLzId!);
    final int? pinOffset = _pin == null ? null
        : fbBuilder.writeString(_pin!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? usageOffset = _usage == null ? null
        : fbBuilder.writeString(_usage!);
    final int? lzUsageOffset = _lzUsage == null ? null
        : fbBuilder.writeString(_lzUsage!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? coordDatumOffset = _coordDatum == null ? null
        : fbBuilder.writeString(_coordDatum!);
    final int? coordOffset = _coord == null ? null
        : fbBuilder.writeString(_coord!);
    final int? osuffixOffset = _osuffix == null ? null
        : fbBuilder.writeString(_osuffix!);
    final int? iataOffset = _iata == null ? null
        : fbBuilder.writeString(_iata!);
    final int? icaoOffset = _icao == null ? null
        : fbBuilder.writeString(_icao!);
    final int? faaOffset = _faa == null ? null
        : fbBuilder.writeString(_faa!);
    final int? airDefAreaOffset = _airDefArea == null ? null
        : fbBuilder.writeString(_airDefArea!);
    final int? utmOffset = _utm == null ? null
        : fbBuilder.writeString(_utm!);
    final int? milGridSysOffset = _milGridSys == null ? null
        : fbBuilder.writeString(_milGridSys!);
    final int? milGridOffset = _milGrid == null ? null
        : fbBuilder.writeString(_milGrid!);
    final int? catCodeOffset = _catCode == null ? null
        : fbBuilder.writeString(_catCode!);
    final int? catTextOffset = _catText == null ? null
        : fbBuilder.writeString(_catText!);
    final int? wacOffset = _wac == null ? null
        : fbBuilder.writeString(_wac!);
    final int? polSubdivOffset = _polSubdiv == null ? null
        : fbBuilder.writeString(_polSubdiv!);
    final int? geoAreaOffset = _geoArea == null ? null
        : fbBuilder.writeString(_geoArea!);
    final int? allegianceOffset = _allegiance == null ? null
        : fbBuilder.writeString(_allegiance!);
    final int? altAllegianceOffset = _altAllegiance == null ? null
        : fbBuilder.writeString(_altAllegiance!);
    final int? classRatingOffset = _classRating == null ? null
        : fbBuilder.writeString(_classRating!);
    final int? fpaOffset = _fpa == null ? null
        : fbBuilder.writeString(_fpa!);
    final int? beNumberOffset = _beNumber == null ? null
        : fbBuilder.writeString(_beNumber!);
    final int? conditionOffset = _condition == null ? null
        : fbBuilder.writeString(_condition!);
    final int? conditionAvailOffset = _conditionAvail == null ? null
        : fbBuilder.writeString(_conditionAvail!);
    final int? operStatusOffset = _operStatus == null ? null
        : fbBuilder.writeString(_operStatus!);
    final int? activityOffset = _activity == null ? null
        : fbBuilder.writeString(_activity!);
    final int? functPrimaryOffset = _functPrimary == null ? null
        : fbBuilder.writeString(_functPrimary!);
    final int? msnPrimaryOffset = _msnPrimary == null ? null
        : fbBuilder.writeString(_msnPrimary!);
    final int? msnPrimarySpecOffset = _msnPrimarySpec == null ? null
        : fbBuilder.writeString(_msnPrimarySpec!);
    final int? nucCapOffset = _nucCap == null ? null
        : fbBuilder.writeString(_nucCap!);
    final int? identOffset = _ident == null ? null
        : fbBuilder.writeString(_ident!);
    final int? vegTypeOffset = _vegType == null ? null
        : fbBuilder.writeString(_vegType!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? resProdOffset = _resProd == null ? null
        : fbBuilder.writeString(_resProd!);
    final int? reviewDateOffset = _reviewDate == null ? null
        : fbBuilder.writeString(_reviewDate!);
    final int? recStatusOffset = _recStatus == null ? null
        : fbBuilder.writeString(_recStatus!);
    final int? symCodeOffset = _symCode == null ? null
        : fbBuilder.writeString(_symCode!);
    final int? referenceDocOffset = _referenceDoc == null ? null
        : fbBuilder.writeString(_referenceDoc!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(66);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, entityOffset);
    fbBuilder.addOffset(2, idEntityOffset);
    fbBuilder.addOffset(3, idParentSiteOffset);
    fbBuilder.addOffset(4, classificationMarkingOffset);
    fbBuilder.addOffset(5, origSiteIdOffset);
    fbBuilder.addOffset(6, origLzIdOffset);
    fbBuilder.addOffset(7, pinOffset);
    fbBuilder.addOffset(8, typeOffset);
    fbBuilder.addOffset(9, usageOffset);
    fbBuilder.addOffset(10, lzUsageOffset);
    fbBuilder.addOffset(11, nameOffset);
    fbBuilder.addOffset(12, coordDatumOffset);
    fbBuilder.addOffset(13, coordOffset);
    fbBuilder.addFloat64(14, _coordDerivAcc);
    fbBuilder.addOffset(15, osuffixOffset);
    fbBuilder.addOffset(16, iataOffset);
    fbBuilder.addOffset(17, icaoOffset);
    fbBuilder.addOffset(18, faaOffset);
    fbBuilder.addOffset(19, airDefAreaOffset);
    fbBuilder.addOffset(20, utmOffset);
    fbBuilder.addOffset(21, milGridSysOffset);
    fbBuilder.addOffset(22, milGridOffset);
    fbBuilder.addOffset(23, catCodeOffset);
    fbBuilder.addOffset(24, catTextOffset);
    fbBuilder.addOffset(25, wacOffset);
    fbBuilder.addOffset(26, polSubdivOffset);
    fbBuilder.addOffset(27, geoAreaOffset);
    fbBuilder.addFloat64(28, _geoidalMslSep);
    fbBuilder.addOffset(29, allegianceOffset);
    fbBuilder.addOffset(30, altAllegianceOffset);
    fbBuilder.addOffset(31, classRatingOffset);
    fbBuilder.addOffset(32, fpaOffset);
    fbBuilder.addOffset(33, beNumberOffset);
    fbBuilder.addInt32(34, _runways);
    fbBuilder.addInt32(35, _maxRunwayLength);
    fbBuilder.addOffset(36, conditionOffset);
    fbBuilder.addOffset(37, conditionAvailOffset);
    fbBuilder.addOffset(38, operStatusOffset);
    fbBuilder.addInt32(39, _grade);
    fbBuilder.addOffset(40, activityOffset);
    fbBuilder.addOffset(41, functPrimaryOffset);
    fbBuilder.addOffset(42, msnPrimaryOffset);
    fbBuilder.addOffset(43, msnPrimarySpecOffset);
    fbBuilder.addOffset(44, nucCapOffset);
    fbBuilder.addOffset(45, identOffset);
    fbBuilder.addFloat64(46, _elevMsl);
    fbBuilder.addInt32(47, _elevMslConfLvl);
    fbBuilder.addFloat64(48, _elevMslDerivAcc);
    fbBuilder.addFloat64(49, _vegHt);
    fbBuilder.addOffset(50, vegTypeOffset);
    fbBuilder.addBool(51, _popArea);
    fbBuilder.addFloat64(52, _popAreaProx);
    fbBuilder.addOffset(53, notesOffset);
    fbBuilder.addOffset(54, resProdOffset);
    fbBuilder.addInt32(55, _eval);
    fbBuilder.addOffset(56, reviewDateOffset);
    fbBuilder.addOffset(57, recStatusOffset);
    fbBuilder.addOffset(58, symCodeOffset);
    fbBuilder.addOffset(59, referenceDocOffset);
    fbBuilder.addOffset(60, createdAtOffset);
    fbBuilder.addOffset(61, createdByOffset);
    fbBuilder.addOffset(62, sourceOffset);
    fbBuilder.addOffset(63, originOffset);
    fbBuilder.addOffset(64, origNetworkOffset);
    fbBuilder.addInt8(65, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
