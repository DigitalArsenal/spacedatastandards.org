// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class RfemitterDetailsAbridgedDataModeEnum {
  final int value;
  const RfemitterDetailsAbridgedDataModeEnum._(this.value);

  factory RfemitterDetailsAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum RfemitterDetailsAbridgedDataModeEnum');
    }
    return result;
  }

  static RfemitterDetailsAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : RfemitterDetailsAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const RfemitterDetailsAbridgedDataModeEnum REAL = RfemitterDetailsAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const RfemitterDetailsAbridgedDataModeEnum TEST = RfemitterDetailsAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const RfemitterDetailsAbridgedDataModeEnum SIMULATED = RfemitterDetailsAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const RfemitterDetailsAbridgedDataModeEnum EXERCISE = RfemitterDetailsAbridgedDataModeEnum._(3);
  static const Map<int, RfemitterDetailsAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<RfemitterDetailsAbridgedDataModeEnum> reader = _RfemitterDetailsAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'RfemitterDetailsAbridgedDataModeEnum{value: $value}';
  }
}

class _RfemitterDetailsAbridgedDataModeEnumReader extends fb.Reader<RfemitterDetailsAbridgedDataModeEnum> {
  const _RfemitterDetailsAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  RfemitterDetailsAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      RfemitterDetailsAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Details for a particular RF Emitter, collected by a particular source. An RF Emitter may have multiple details records from various sources.
class RfemitterDetailsAbridged {
  RfemitterDetailsAbridged._(this._bc, this._bcOffset);
  factory RfemitterDetailsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RfemitterDetailsAbridged> reader = _RfemitterDetailsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: RFEMITTERDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Unique identifier of the parent RF Emitter.
  ///  Example: /// Example: RFEMITTER-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idRfemitter => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Designator of this RF Emitter.
  ///  Example: /// Example: DESIGNATOR
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get designator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Optional alternate name or alias for this RF Emitter.
  ///  Example: /// Example: ALTERNATE_NAME
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get altName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Family of this RF Emitter type.
  ///  Example: /// Example: FAMILY
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get family => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Name of the production facility for this RF Emitter.
  ///  Example: /// Example: PRODUCTION_FACILITY
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get productionFacilityName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Alternate facility name for this RF Emitter.
  ///  Example: /// Example: ALTERNATE_FACILITY_NAME
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get alternateFacilityName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Unique identifier of the organization which manufactures this RF Emitter.
  ///  Example: /// Example: MANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get manufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Unique identifier of the location of the production facility for this RF Emitter.
  ///  Example: /// Example: PRODUCTIONFACILITYLOCATION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get productionFacilityLocationId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  double get systemSensitivityStart => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
  ///  Example: /// Example: 150.23
  ///  Constraints: No constraints specified.
  double get systemSensitivityEnd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Type or name of receiver.
  ///  Example: /// Example: RECEIVER_TYPE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get receiverType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Receiver sensitivity in dBm.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get receiverSensitivity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Receiver bandwidth in Mhz.
  ///  Example: /// Example: 15.23
  ///  Constraints: No constraints specified.
  double get receiverBandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Transmitter frequency in Mhz.
  ///  Example: /// Example: 105.9
  ///  Constraints: No constraints specified.
  double get transmitterFrequency => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Transmitter bandwidth in Mhz.
  ///  Example: /// Example: 0.125
  ///  Constraints: No constraints specified.
  double get transmitterBandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Transmit power in Watts.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  double get transmitPower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Barrage noise bandwidth in Mhz.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  double get barrageNoiseBandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Doppler noise value in Mhz.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get dopplerNoise => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Digital Form Radio Memory instantaneous bandwidth in Mhz.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get drfmInstantaneousBandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Number of channels.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get numChannels => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 46, 0);
  ///  Number of bits.
  ///  Example: /// Example: 256
  ///  Constraints: No constraints specified.
  int get numBits => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 48, 0);
  ///  Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  List<String>? get antennaSize => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 50);
  ///  For parabolic/dish antennas, the diameter of the antenna in meters.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get antennaDiameter => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Notes on the RF Emitter.
  ///  Example: /// Example: NOTES
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Secondary notes on the RF Emitter.
  ///  Example: /// Example: MORE_NOTES
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  String? get secondaryNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Detailed description of the RF Emitter.
  ///  Example: /// Example: DESCRIPTION
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Array of URLs containing additional information on this RF Emitter.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get urls => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 60);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  RfemitterDetailsAbridgedDataModeEnum get dataMode => RfemitterDetailsAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 68, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);

  @override
  String toString() {
    return 'RfemitterDetailsAbridged{id: ${id}, idRfemitter: ${idRfemitter}, classificationMarking: ${classificationMarking}, designator: ${designator}, altName: ${altName}, family: ${family}, productionFacilityName: ${productionFacilityName}, alternateFacilityName: ${alternateFacilityName}, manufacturerOrgId: ${manufacturerOrgId}, productionFacilityLocationId: ${productionFacilityLocationId}, systemSensitivityStart: ${systemSensitivityStart}, systemSensitivityEnd: ${systemSensitivityEnd}, receiverType: ${receiverType}, receiverSensitivity: ${receiverSensitivity}, receiverBandwidth: ${receiverBandwidth}, transmitterFrequency: ${transmitterFrequency}, transmitterBandwidth: ${transmitterBandwidth}, transmitPower: ${transmitPower}, barrageNoiseBandwidth: ${barrageNoiseBandwidth}, dopplerNoise: ${dopplerNoise}, drfmInstantaneousBandwidth: ${drfmInstantaneousBandwidth}, numChannels: ${numChannels}, numBits: ${numBits}, antennaSize: ${antennaSize}, antennaDiameter: ${antennaDiameter}, notes: ${notes}, secondaryNotes: ${secondaryNotes}, description: ${description}, urls: ${urls}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}}';
  }
}

class _RfemitterDetailsAbridgedReader extends fb.TableReader<RfemitterDetailsAbridged> {
  const _RfemitterDetailsAbridgedReader();

  @override
  RfemitterDetailsAbridged createObject(fb.BufferContext bc, int offset) => 
    RfemitterDetailsAbridged._(bc, offset);
}

class RfemitterDetailsAbridgedBuilder {
  RfemitterDetailsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(35);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdRfemitterOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDesignatorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addAltNameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addFamilyOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addProductionFacilityNameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addAlternateFacilityNameOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addProductionFacilityLocationIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSystemSensitivityStart(double? systemSensitivityStart) {
    fbBuilder.addFloat64(10, systemSensitivityStart);
    return fbBuilder.offset;
  }
  int addSystemSensitivityEnd(double? systemSensitivityEnd) {
    fbBuilder.addFloat64(11, systemSensitivityEnd);
    return fbBuilder.offset;
  }
  int addReceiverTypeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addReceiverSensitivity(double? receiverSensitivity) {
    fbBuilder.addFloat64(13, receiverSensitivity);
    return fbBuilder.offset;
  }
  int addReceiverBandwidth(double? receiverBandwidth) {
    fbBuilder.addFloat64(14, receiverBandwidth);
    return fbBuilder.offset;
  }
  int addTransmitterFrequency(double? transmitterFrequency) {
    fbBuilder.addFloat64(15, transmitterFrequency);
    return fbBuilder.offset;
  }
  int addTransmitterBandwidth(double? transmitterBandwidth) {
    fbBuilder.addFloat64(16, transmitterBandwidth);
    return fbBuilder.offset;
  }
  int addTransmitPower(double? transmitPower) {
    fbBuilder.addFloat64(17, transmitPower);
    return fbBuilder.offset;
  }
  int addBarrageNoiseBandwidth(double? barrageNoiseBandwidth) {
    fbBuilder.addFloat64(18, barrageNoiseBandwidth);
    return fbBuilder.offset;
  }
  int addDopplerNoise(double? dopplerNoise) {
    fbBuilder.addFloat64(19, dopplerNoise);
    return fbBuilder.offset;
  }
  int addDrfmInstantaneousBandwidth(double? drfmInstantaneousBandwidth) {
    fbBuilder.addFloat64(20, drfmInstantaneousBandwidth);
    return fbBuilder.offset;
  }
  int addNumChannels(int? numChannels) {
    fbBuilder.addInt32(21, numChannels);
    return fbBuilder.offset;
  }
  int addNumBits(int? numBits) {
    fbBuilder.addInt32(22, numBits);
    return fbBuilder.offset;
  }
  int addAntennaSizeOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addAntennaDiameter(double? antennaDiameter) {
    fbBuilder.addFloat64(24, antennaDiameter);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addSecondaryNotesOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addUrlsOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addDataMode(RfemitterDetailsAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(32, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RfemitterDetailsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idRfemitter;
  final String? _classificationMarking;
  final String? _designator;
  final String? _altName;
  final String? _family;
  final String? _productionFacilityName;
  final String? _alternateFacilityName;
  final String? _manufacturerOrgId;
  final String? _productionFacilityLocationId;
  final double? _systemSensitivityStart;
  final double? _systemSensitivityEnd;
  final String? _receiverType;
  final double? _receiverSensitivity;
  final double? _receiverBandwidth;
  final double? _transmitterFrequency;
  final double? _transmitterBandwidth;
  final double? _transmitPower;
  final double? _barrageNoiseBandwidth;
  final double? _dopplerNoise;
  final double? _drfmInstantaneousBandwidth;
  final int? _numChannels;
  final int? _numBits;
  final List<String>? _antennaSize;
  final double? _antennaDiameter;
  final String? _notes;
  final String? _secondaryNotes;
  final String? _description;
  final List<String>? _urls;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final RfemitterDetailsAbridgedDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;

  RfemitterDetailsAbridgedObjectBuilder({
    String? id,
    String? idRfemitter,
    String? classificationMarking,
    String? designator,
    String? altName,
    String? family,
    String? productionFacilityName,
    String? alternateFacilityName,
    String? manufacturerOrgId,
    String? productionFacilityLocationId,
    double? systemSensitivityStart,
    double? systemSensitivityEnd,
    String? receiverType,
    double? receiverSensitivity,
    double? receiverBandwidth,
    double? transmitterFrequency,
    double? transmitterBandwidth,
    double? transmitPower,
    double? barrageNoiseBandwidth,
    double? dopplerNoise,
    double? drfmInstantaneousBandwidth,
    int? numChannels,
    int? numBits,
    List<String>? antennaSize,
    double? antennaDiameter,
    String? notes,
    String? secondaryNotes,
    String? description,
    List<String>? urls,
    String? source,
    String? origin,
    String? origNetwork,
    RfemitterDetailsAbridgedDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
  })
      : _id = id,
        _idRfemitter = idRfemitter,
        _classificationMarking = classificationMarking,
        _designator = designator,
        _altName = altName,
        _family = family,
        _productionFacilityName = productionFacilityName,
        _alternateFacilityName = alternateFacilityName,
        _manufacturerOrgId = manufacturerOrgId,
        _productionFacilityLocationId = productionFacilityLocationId,
        _systemSensitivityStart = systemSensitivityStart,
        _systemSensitivityEnd = systemSensitivityEnd,
        _receiverType = receiverType,
        _receiverSensitivity = receiverSensitivity,
        _receiverBandwidth = receiverBandwidth,
        _transmitterFrequency = transmitterFrequency,
        _transmitterBandwidth = transmitterBandwidth,
        _transmitPower = transmitPower,
        _barrageNoiseBandwidth = barrageNoiseBandwidth,
        _dopplerNoise = dopplerNoise,
        _drfmInstantaneousBandwidth = drfmInstantaneousBandwidth,
        _numChannels = numChannels,
        _numBits = numBits,
        _antennaSize = antennaSize,
        _antennaDiameter = antennaDiameter,
        _notes = notes,
        _secondaryNotes = secondaryNotes,
        _description = description,
        _urls = urls,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idRfemitterOffset = _idRfemitter == null ? null
        : fbBuilder.writeString(_idRfemitter!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? designatorOffset = _designator == null ? null
        : fbBuilder.writeString(_designator!);
    final int? altNameOffset = _altName == null ? null
        : fbBuilder.writeString(_altName!);
    final int? familyOffset = _family == null ? null
        : fbBuilder.writeString(_family!);
    final int? productionFacilityNameOffset = _productionFacilityName == null ? null
        : fbBuilder.writeString(_productionFacilityName!);
    final int? alternateFacilityNameOffset = _alternateFacilityName == null ? null
        : fbBuilder.writeString(_alternateFacilityName!);
    final int? manufacturerOrgIdOffset = _manufacturerOrgId == null ? null
        : fbBuilder.writeString(_manufacturerOrgId!);
    final int? productionFacilityLocationIdOffset = _productionFacilityLocationId == null ? null
        : fbBuilder.writeString(_productionFacilityLocationId!);
    final int? receiverTypeOffset = _receiverType == null ? null
        : fbBuilder.writeString(_receiverType!);
    final int? antennaSizeOffset = _antennaSize == null ? null
        : fbBuilder.writeList(_antennaSize!.map(fbBuilder.writeString).toList());
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? secondaryNotesOffset = _secondaryNotes == null ? null
        : fbBuilder.writeString(_secondaryNotes!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? urlsOffset = _urls == null ? null
        : fbBuilder.writeList(_urls!.map(fbBuilder.writeString).toList());
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    fbBuilder.startTable(35);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idRfemitterOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, designatorOffset);
    fbBuilder.addOffset(4, altNameOffset);
    fbBuilder.addOffset(5, familyOffset);
    fbBuilder.addOffset(6, productionFacilityNameOffset);
    fbBuilder.addOffset(7, alternateFacilityNameOffset);
    fbBuilder.addOffset(8, manufacturerOrgIdOffset);
    fbBuilder.addOffset(9, productionFacilityLocationIdOffset);
    fbBuilder.addFloat64(10, _systemSensitivityStart);
    fbBuilder.addFloat64(11, _systemSensitivityEnd);
    fbBuilder.addOffset(12, receiverTypeOffset);
    fbBuilder.addFloat64(13, _receiverSensitivity);
    fbBuilder.addFloat64(14, _receiverBandwidth);
    fbBuilder.addFloat64(15, _transmitterFrequency);
    fbBuilder.addFloat64(16, _transmitterBandwidth);
    fbBuilder.addFloat64(17, _transmitPower);
    fbBuilder.addFloat64(18, _barrageNoiseBandwidth);
    fbBuilder.addFloat64(19, _dopplerNoise);
    fbBuilder.addFloat64(20, _drfmInstantaneousBandwidth);
    fbBuilder.addInt32(21, _numChannels);
    fbBuilder.addInt32(22, _numBits);
    fbBuilder.addOffset(23, antennaSizeOffset);
    fbBuilder.addFloat64(24, _antennaDiameter);
    fbBuilder.addOffset(25, notesOffset);
    fbBuilder.addOffset(26, secondaryNotesOffset);
    fbBuilder.addOffset(27, descriptionOffset);
    fbBuilder.addOffset(28, urlsOffset);
    fbBuilder.addOffset(29, sourceOffset);
    fbBuilder.addOffset(30, originOffset);
    fbBuilder.addOffset(31, origNetworkOffset);
    fbBuilder.addInt8(32, _dataMode?.value);
    fbBuilder.addOffset(33, createdAtOffset);
    fbBuilder.addOffset(34, createdByOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
