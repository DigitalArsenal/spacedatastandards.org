// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class LinkStatusAbridgedDataModeEnum {
  final int value;
  const LinkStatusAbridgedDataModeEnum._(this.value);

  factory LinkStatusAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum LinkStatusAbridgedDataModeEnum');
    }
    return result;
  }

  static LinkStatusAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : LinkStatusAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const LinkStatusAbridgedDataModeEnum REAL = LinkStatusAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const LinkStatusAbridgedDataModeEnum TEST = LinkStatusAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const LinkStatusAbridgedDataModeEnum SIMULATED = LinkStatusAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const LinkStatusAbridgedDataModeEnum EXERCISE = LinkStatusAbridgedDataModeEnum._(3);
  static const Map<int, LinkStatusAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<LinkStatusAbridgedDataModeEnum> reader = _LinkStatusAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'LinkStatusAbridgedDataModeEnum{value: $value}';
  }
}

class _LinkStatusAbridgedDataModeEnumReader extends fb.Reader<LinkStatusAbridgedDataModeEnum> {
  const _LinkStatusAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  LinkStatusAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      LinkStatusAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Captures link status.
class LinkStatusAbridged {
  LinkStatusAbridged._(this._bc, this._bcOffset);
  factory LinkStatusAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LinkStatusAbridged> reader = _LinkStatusAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: LINKSTATUS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique ID of the on-orbit satellite (Sat-1) forming the link.  A null value for idOnOrbit1 indicates that the link is formed over a LEO/MEO constellation.
  ///  Example: /// Example: REF-ONORBIT1-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique ID of the on-orbit satellite (Sat-2) forming the link.  A null value for idOnOrbit2 indicates either a link employing only Sat-1 or a link formed over a LEO/MEO constellation.
  ///  Example: /// Example: REF-ONORBIT2-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The link establishment time, or the time that the link becomes available for use, in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get linkStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The link termination time, or the time that the link becomes unavailable for use, in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get linkStopTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The constellation name if the link is established over a LEO/MEO constellation.  In this case, idOnOrbit1 and idOnOrbit2 will be null.
  ///  Example: /// Example: Fornax
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get constellation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The name or description of the link.
  ///  Example: /// Example: Example description
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get linkName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The type of the link.
  ///  Example: /// Example: Example link
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get linkType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).
  ///  Example: /// Example: MIL-KA
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get band => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The ID of beam-1 forming the link.  In the case of two sat link, beam-1 corresponds to Sat-1.
  ///  Example: /// Example: REF-BEAM1-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idBeam1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The name or description of link endpoint-1, corresponding to beam-1.
  ///  Example: /// Example: Example endpoint
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get endPoint1Name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get endPoint1Lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 80.23
  ///  Constraints: No constraints specified.
  double get endPoint1Lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  The ID of beam-2 forming the link.  In the case of two sat link, beam-2 corresponds to Sat-2.
  ///  Example: /// Example: REF-BEAM2-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idBeam2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The name or description of link endpoint-2, corresponding to beam-2.
  ///  Example: /// Example: Example description
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get endPoint2Name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get endPoint2Lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 80.23
  ///  Constraints: No constraints specified.
  double get endPoint2Lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  The endpoint-1 to endpoint-2 data rate, in kbps.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get dataRate1To2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  The endpoint-2 to endpoint-1 data rate, in kbps.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get dataRate2To1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).
  ///  Example: /// Example: DEGRADED-WEATHER
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get linkState => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The SYSCAP mission status of the system(s) forming the link.
  ///  Example: /// Example: Example status
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get sysCap => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  The OPSCAP mission status of the system(s) forming the link.
  ///  Example: /// Example: Example status
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get opsCap => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  LinkStatusAbridgedDataModeEnum get dataMode => LinkStatusAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 60, 0));
  ///  Satellite/catalog number of the target on-orbit primary object.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get satNo1 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 62, 0);
  ///  Satellite/catalog number of the target on-orbit secondary object.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get satNo2 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 64, 0);

  @override
  String toString() {
    return 'LinkStatusAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idOnOrbit1: ${idOnOrbit1}, idOnOrbit2: ${idOnOrbit2}, linkStartTime: ${linkStartTime}, linkStopTime: ${linkStopTime}, constellation: ${constellation}, linkName: ${linkName}, linkType: ${linkType}, band: ${band}, idBeam1: ${idBeam1}, endPoint1Name: ${endPoint1Name}, endPoint1Lat: ${endPoint1Lat}, endPoint1Lon: ${endPoint1Lon}, idBeam2: ${idBeam2}, endPoint2Name: ${endPoint2Name}, endPoint2Lat: ${endPoint2Lat}, endPoint2Lon: ${endPoint2Lon}, dataRate1To2: ${dataRate1To2}, dataRate2To1: ${dataRate2To1}, linkState: ${linkState}, sysCap: ${sysCap}, opsCap: ${opsCap}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, satNo1: ${satNo1}, satNo2: ${satNo2}}';
  }
}

class _LinkStatusAbridgedReader extends fb.TableReader<LinkStatusAbridged> {
  const _LinkStatusAbridgedReader();

  @override
  LinkStatusAbridged createObject(fb.BufferContext bc, int offset) => 
    LinkStatusAbridged._(bc, offset);
}

class LinkStatusAbridgedBuilder {
  LinkStatusAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(31);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbit1Offset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbit2Offset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addLinkStartTimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addLinkStopTimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addConstellationOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addLinkNameOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addLinkTypeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addBandOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addIdBeam1Offset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addEndPoint1NameOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addEndPoint1Lat(double? endPoint1Lat) {
    fbBuilder.addFloat64(12, endPoint1Lat);
    return fbBuilder.offset;
  }
  int addEndPoint1Lon(double? endPoint1Lon) {
    fbBuilder.addFloat64(13, endPoint1Lon);
    return fbBuilder.offset;
  }
  int addIdBeam2Offset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addEndPoint2NameOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addEndPoint2Lat(double? endPoint2Lat) {
    fbBuilder.addFloat64(16, endPoint2Lat);
    return fbBuilder.offset;
  }
  int addEndPoint2Lon(double? endPoint2Lon) {
    fbBuilder.addFloat64(17, endPoint2Lon);
    return fbBuilder.offset;
  }
  int addDataRate1To2(double? dataRate1To2) {
    fbBuilder.addFloat64(18, dataRate1To2);
    return fbBuilder.offset;
  }
  int addDataRate2To1(double? dataRate2To1) {
    fbBuilder.addFloat64(19, dataRate2To1);
    return fbBuilder.offset;
  }
  int addLinkStateOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addSysCapOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addOpsCapOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addDataMode(LinkStatusAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(28, dataMode?.value);
    return fbBuilder.offset;
  }
  int addSatNo1(int? satNo1) {
    fbBuilder.addInt32(29, satNo1);
    return fbBuilder.offset;
  }
  int addSatNo2(int? satNo2) {
    fbBuilder.addInt32(30, satNo2);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LinkStatusAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idOnOrbit1;
  final String? _idOnOrbit2;
  final String? _linkStartTime;
  final String? _linkStopTime;
  final String? _constellation;
  final String? _linkName;
  final String? _linkType;
  final String? _band;
  final String? _idBeam1;
  final String? _endPoint1Name;
  final double? _endPoint1Lat;
  final double? _endPoint1Lon;
  final String? _idBeam2;
  final String? _endPoint2Name;
  final double? _endPoint2Lat;
  final double? _endPoint2Lon;
  final double? _dataRate1To2;
  final double? _dataRate2To1;
  final String? _linkState;
  final String? _sysCap;
  final String? _opsCap;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final LinkStatusAbridgedDataModeEnum? _dataMode;
  final int? _satNo1;
  final int? _satNo2;

  LinkStatusAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idOnOrbit1,
    String? idOnOrbit2,
    String? linkStartTime,
    String? linkStopTime,
    String? constellation,
    String? linkName,
    String? linkType,
    String? band,
    String? idBeam1,
    String? endPoint1Name,
    double? endPoint1Lat,
    double? endPoint1Lon,
    String? idBeam2,
    String? endPoint2Name,
    double? endPoint2Lat,
    double? endPoint2Lon,
    double? dataRate1To2,
    double? dataRate2To1,
    String? linkState,
    String? sysCap,
    String? opsCap,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    LinkStatusAbridgedDataModeEnum? dataMode,
    int? satNo1,
    int? satNo2,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idOnOrbit1 = idOnOrbit1,
        _idOnOrbit2 = idOnOrbit2,
        _linkStartTime = linkStartTime,
        _linkStopTime = linkStopTime,
        _constellation = constellation,
        _linkName = linkName,
        _linkType = linkType,
        _band = band,
        _idBeam1 = idBeam1,
        _endPoint1Name = endPoint1Name,
        _endPoint1Lat = endPoint1Lat,
        _endPoint1Lon = endPoint1Lon,
        _idBeam2 = idBeam2,
        _endPoint2Name = endPoint2Name,
        _endPoint2Lat = endPoint2Lat,
        _endPoint2Lon = endPoint2Lon,
        _dataRate1To2 = dataRate1To2,
        _dataRate2To1 = dataRate2To1,
        _linkState = linkState,
        _sysCap = sysCap,
        _opsCap = opsCap,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _satNo1 = satNo1,
        _satNo2 = satNo2;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idOnOrbit1Offset = _idOnOrbit1 == null ? null
        : fbBuilder.writeString(_idOnOrbit1!);
    final int? idOnOrbit2Offset = _idOnOrbit2 == null ? null
        : fbBuilder.writeString(_idOnOrbit2!);
    final int? linkStartTimeOffset = _linkStartTime == null ? null
        : fbBuilder.writeString(_linkStartTime!);
    final int? linkStopTimeOffset = _linkStopTime == null ? null
        : fbBuilder.writeString(_linkStopTime!);
    final int? constellationOffset = _constellation == null ? null
        : fbBuilder.writeString(_constellation!);
    final int? linkNameOffset = _linkName == null ? null
        : fbBuilder.writeString(_linkName!);
    final int? linkTypeOffset = _linkType == null ? null
        : fbBuilder.writeString(_linkType!);
    final int? bandOffset = _band == null ? null
        : fbBuilder.writeString(_band!);
    final int? idBeam1Offset = _idBeam1 == null ? null
        : fbBuilder.writeString(_idBeam1!);
    final int? endPoint1NameOffset = _endPoint1Name == null ? null
        : fbBuilder.writeString(_endPoint1Name!);
    final int? idBeam2Offset = _idBeam2 == null ? null
        : fbBuilder.writeString(_idBeam2!);
    final int? endPoint2NameOffset = _endPoint2Name == null ? null
        : fbBuilder.writeString(_endPoint2Name!);
    final int? linkStateOffset = _linkState == null ? null
        : fbBuilder.writeString(_linkState!);
    final int? sysCapOffset = _sysCap == null ? null
        : fbBuilder.writeString(_sysCap!);
    final int? opsCapOffset = _opsCap == null ? null
        : fbBuilder.writeString(_opsCap!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(31);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idOnOrbit1Offset);
    fbBuilder.addOffset(3, idOnOrbit2Offset);
    fbBuilder.addOffset(4, linkStartTimeOffset);
    fbBuilder.addOffset(5, linkStopTimeOffset);
    fbBuilder.addOffset(6, constellationOffset);
    fbBuilder.addOffset(7, linkNameOffset);
    fbBuilder.addOffset(8, linkTypeOffset);
    fbBuilder.addOffset(9, bandOffset);
    fbBuilder.addOffset(10, idBeam1Offset);
    fbBuilder.addOffset(11, endPoint1NameOffset);
    fbBuilder.addFloat64(12, _endPoint1Lat);
    fbBuilder.addFloat64(13, _endPoint1Lon);
    fbBuilder.addOffset(14, idBeam2Offset);
    fbBuilder.addOffset(15, endPoint2NameOffset);
    fbBuilder.addFloat64(16, _endPoint2Lat);
    fbBuilder.addFloat64(17, _endPoint2Lon);
    fbBuilder.addFloat64(18, _dataRate1To2);
    fbBuilder.addFloat64(19, _dataRate2To1);
    fbBuilder.addOffset(20, linkStateOffset);
    fbBuilder.addOffset(21, sysCapOffset);
    fbBuilder.addOffset(22, opsCapOffset);
    fbBuilder.addOffset(23, createdAtOffset);
    fbBuilder.addOffset(24, createdByOffset);
    fbBuilder.addOffset(25, sourceOffset);
    fbBuilder.addOffset(26, originOffset);
    fbBuilder.addOffset(27, origNetworkOffset);
    fbBuilder.addInt8(28, _dataMode?.value);
    fbBuilder.addInt32(29, _satNo1);
    fbBuilder.addInt32(30, _satNo2);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
