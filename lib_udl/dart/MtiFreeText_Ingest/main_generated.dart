// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Provides a means of sending Basic Character Set alphanumeric text messages.
class MtiFreeTextIngest {
  MtiFreeTextIngest._(this._bc, this._bcOffset);
  factory MtiFreeTextIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MtiFreeTextIngest> reader = _MtiFreeTextIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The originator of the Free Text message.
  ///  Example: /// Example: ORIGINATOR
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get f1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The recipient for which the Free Text message is intended.
  ///  Example: /// Example: RECIPIENT
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get f2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Free text data message.
  ///  Example: /// Example: TEXT
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get f3 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'MtiFreeTextIngest{f1: ${f1}, f2: ${f2}, f3: ${f3}}';
  }
}

class _MtiFreeTextIngestReader extends fb.TableReader<MtiFreeTextIngest> {
  const _MtiFreeTextIngestReader();

  @override
  MtiFreeTextIngest createObject(fb.BufferContext bc, int offset) => 
    MtiFreeTextIngest._(bc, offset);
}

class MtiFreeTextIngestBuilder {
  MtiFreeTextIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addF1Offset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addF2Offset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addF3Offset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MtiFreeTextIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _f1;
  final String? _f2;
  final String? _f3;

  MtiFreeTextIngestObjectBuilder({
    String? f1,
    String? f2,
    String? f3,
  })
      : _f1 = f1,
        _f2 = f2,
        _f3 = f3;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? f1Offset = _f1 == null ? null
        : fbBuilder.writeString(_f1!);
    final int? f2Offset = _f2 == null ? null
        : fbBuilder.writeString(_f2!);
    final int? f3Offset = _f3 == null ? null
        : fbBuilder.writeString(_f3!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, f1Offset);
    fbBuilder.addOffset(1, f2Offset);
    fbBuilder.addOffset(2, f3Offset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
