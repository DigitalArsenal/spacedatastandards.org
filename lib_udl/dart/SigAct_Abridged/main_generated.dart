// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SigActAbridgedDataModeEnum {
  final int value;
  const SigActAbridgedDataModeEnum._(this.value);

  factory SigActAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SigActAbridgedDataModeEnum');
    }
    return result;
  }

  static SigActAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SigActAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SigActAbridgedDataModeEnum REAL = SigActAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SigActAbridgedDataModeEnum TEST = SigActAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SigActAbridgedDataModeEnum SIMULATED = SigActAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SigActAbridgedDataModeEnum EXERCISE = SigActAbridgedDataModeEnum._(3);
  static const Map<int, SigActAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SigActAbridgedDataModeEnum> reader = _SigActAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'SigActAbridgedDataModeEnum{value: $value}';
  }
}

class _SigActAbridgedDataModeEnumReader extends fb.Reader<SigActAbridgedDataModeEnum> {
  const _SigActAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SigActAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      SigActAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Provides information on the dates, actors, locations, fatalities, and types of all reported political violence and protest events across the world.
class SigActAbridged {
  SigActAbridged._(this._bc, this._bcOffset);
  factory SigActAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SigActAbridged> reader = _SigActAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SIGACT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The source language of the significant event using the ISO 639-3, 3 character code definition.
  ///  Example: /// Example: eng
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get sourceLanguage => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The city in or near which this event occurred.
  ///  Example: /// Example: Austin
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get city => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The district in which this event occurred.
  ///  Example: /// Example: district 12
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get district => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The province in which this event occurred.
  ///  Example: /// Example: Province_Example
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get province => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.31
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 90.23
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  ///  &nbsp;&nbsp;4Q (grid zone designator, GZD)
  ///  &nbsp;&nbsp;FJ (the 100,000-meter square identifier)
  ///  &nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  ///  Example: /// Example: 4QFJ12345678
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get milgrid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Area in which important military events occur or are progressing.  A theater can include the entirety of the airspace, land and sea area that is or that may potentially become involved in war operations.
  ///  Example: /// Example: Kabul
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get theater => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get atext => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get agjson => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Type of region as projected on the ground.
  ///  Example: /// Example: Type1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get atype => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get andims => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get asrid => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  The approximate start time of the event, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:02:03.123Z
  ///  Constraints: No constraints specified.
  String? get eventStart => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The approximate end time of the event, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:02:03.123Z
  ///  Constraints: No constraints specified.
  String? get eventEnd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Date of the report or filing.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get reportDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  A list of one or more actors involved in the event.
  ///  Example: /// Example: ['US', 'CAN']
  ///  Constraints: No constraints specified.
  List<String>? get actors => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  Number of civilians abducted in the activity.
  ///  Example: /// Example: 423
  ///  Constraints: No constraints specified.
  int get civAbd => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 44, 0);
  ///  Number of civilians detained in the activity.
  ///  Example: /// Example: 234
  ///  Constraints: No constraints specified.
  int get civDet => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 46, 0);
  ///  Number of civilians killed in the activity.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get civKia => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 48, 0);
  ///  Number of civilians wounded in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get civWound => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 50, 0);
  ///  Number of coalition members abducted in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get coalAbd => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  Number of coalition members detained in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get coalDet => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  Number of coalition members killed in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get coalKia => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  Number of coalition members wounded in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get coalWound => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 58, 0);
  ///  Number of enemy combatants abducted in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get enemyAbd => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 60, 0);
  ///  Number of enemy combatants detained in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get enemyDet => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 62, 0);
  ///  Number of enemy combatants killed in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get enemyKia => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 64, 0);
  ///  Number of friendlies abducted in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get friendlyAbd => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 66, 0);
  ///  Number of friendlies in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get friendlyDet => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 68, 0);
  ///  Number of friendlies killed in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get friendlyKia => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 70, 0);
  ///  Number of friendlies wounded in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get friendlyWound => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 72, 0);
  ///  Number of Host Nation members abducted in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get hostNatAbd => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 74, 0);
  ///  Number of Host Nation members detained in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get hostNatDet => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 76, 0);
  ///  Number of Host Nation members killed in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get hostNatKia => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 78, 0);
  ///  Number of Host Nation members wounded in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get hostNatWound => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 80, 0);
  ///  Number of side A members abducted in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get sideAabd => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 82, 0);
  ///  Number of side A members detained in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get sideAdet => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 84, 0);
  ///  Number of side A members killed in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get sideAkia => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 86, 0);
  ///  Number of side A members wounded in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get sideAwound => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 88, 0);
  ///  Number of side B members abducted in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get sideBabd => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 90, 0);
  ///  Number of side B members detained in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get sideBdet => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 92, 0);
  ///  Number of side B members killed in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get sideBkia => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 94, 0);
  ///  Number of side B members wounded in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get sideBwound => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 96, 0);
  ///  The name of the target.  The target may be an individual, an entity, or a country/region.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get target => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  A description of the event.
  ///  Example: /// Example: Example_Description
  ///  Constraints: Minimum length = 0, Maximum length = 4096
  String? get eventDescription => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  The type of event (e.g.  Military, Natural, Political, Social, etc.).
  ///  Example: /// Example: Military
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get eventType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).
  ///  Example: /// Example: IED Explosion
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get typeOfAttack => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Flag indicating that this attack was of a complex or coordinated nature.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get complexAttack => const fb.BoolReader().vTableGet(_bc, _bcOffset, 106, false);
  ///  Unique identifier assigned to each event record that uniquely identifies it in the master dataset.  This ID is provided for convenience of mapping to external systems.
  ///  Example: /// Example: NUMBER-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get idNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Estimate of the confidence that this event occurred.
  ///  Example: /// Example: 13
  ///  Constraints: No constraints specified.
  int get confidence => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 110, 0);
  ///  Estimate of the accuracy that this event occurred as described/reported.
  ///  Example: /// Example: 13
  ///  Constraints: No constraints specified.
  int get accuracy => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 112, 0);
  ///  1 (high) for events where the reporting allows the coder to identify the event in full. That is, events where the individual happening is described by the original source in a sufficiently detailed way as to identify individual incidents, i.e. separate activities of fighting in a single location:
  ///  2 (lower) for events where an aggregation of information was already made by the source material that is impossible to undo in the coding process. Such events are described by the original source only as aggregates (totals) of multiple separate activities of fighting spanning over a longer period than a single, clearly defined day.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get clarity => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 114, 0);
  ///  This is the raw CAMEO action code describing the action that Actor1 performed upon Actor2.  Additional information about Cameo Codes can be obtained from the GDELT project documentation here: https://www.gdeltproject.org/data.html#documentation.
  ///  Example: /// Example: CAMEO_CODE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get cameoCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);
  ///  CAMEO event codes are defined in a three-level taxonomy. For events at level three in the taxonomy, this yields its level two leaf root node. For example, code 0251 (Appeal for easing of administrative sanctions) would yield an EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
  ///  Example: /// Example: Example_cameoBaseCode
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get cameoBaseCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  Similar to EventBaseCode, this defines the root-level category the event code falls under. For example, code 0251 (Appeal for easing of administrative sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
  ///  Example: /// Example: Example_cameoRootCode
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get cameoRootCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 120);
  ///  Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the theoretical potential impact that type of event will have on the stability of a country. This is known as the Goldstein Scale. NOTE: this score is based on the type of event, not the specifics of the actual event record being recorded  thus two riots, one with 10 people and one with 10,000, will both receive the same Goldstein score. This can be aggregated to various levels of time resolution to yield an approximation of the stability of a location over time.
  ///  Example: /// Example: 9.32
  ///  Constraints: No constraints specified.
  double get goldstein => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  The source of the document or report.
  ///  Example: /// Example: Example_documentSource
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get documentSource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 124);
  ///  The filename of the document or report.
  ///  Example: /// Example: Example_documentFilename
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get documentFilename => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 126);
  ///  Flag indicating this SigAct record has an associated txt file stored in the UDL. Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the same as the SigAct record id. The maximum file size for this service is 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get hasAttachment => const fb.BoolReader().vTableGet(_bc, _bcOffset, 128, false);
  ///  Size of the associated text file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get filesize => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 130, 0);
  ///  MD5 value of the file. The ingest/create operation will automatically generate the value.
  ///  Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get checksumValue => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 132);
  ///  The reporting unit.
  ///  Example: /// Example: Unit_1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get repUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 134);
  ///  The reporting unit type.
  ///  Example: /// Example: Example_repUnitType
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get repUnitType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 136);
  ///  The activity the unit was engaged in.
  ///  Example: /// Example: Example_Activity
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get repUnitActivity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 138);
  ///  This is the total number of mentions of this event across all source documents during the 15 minute update in which it was first seen. Multiple references to an event within a single document also contribute to this count. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
  ///  Example: /// Example: 8
  ///  Constraints: No constraints specified.
  int get numMentions => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 140, 0);
  ///  This is the total number of information sources containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
  ///  Example: /// Example: 8
  ///  Constraints: No constraints specified.
  int get numSources => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 142, 0);
  ///  This is the total number of source documents containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
  ///  Example: /// Example: 8
  ///  Constraints: No constraints specified.
  int get numArticles => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 144, 0);
  ///  This is the average tone of all documents containing one or more mentions of this event during the 15 minute update in which it was first seen. The score ranges from -100 (extremely negative) to +100 (extremely positive). Common values range between -10 and +10, with 0 indicating neutral.
  ///  Example: /// Example: 8.23
  ///  Constraints: No constraints specified.
  double get avgTone => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  ///  This field records the URL or citation of the first news report it found this event in. In most cases this is the first report it saw the article in, but due to the timing and flow of news reports through the processing pipeline, this may not always be the very first report, but is at least in the first few reports.
  ///  Example: /// Example: Example_URL
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get sourceUrl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 148);
  ///  Related document ids.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get relatedDocs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 150);
  ///  A summary of the event.
  ///  Example: /// Example: Example_Summary
  ///  Constraints: Minimum length = 0, Maximum length = 4096
  String? get summary => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 152);
  ///  Notes related to the documents or event.
  ///  Example: /// Example: Example_Notes
  ///  Constraints: Minimum length = 0, Maximum length = 4096
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 154);
  ///  Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 156);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: No constraints specified.
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 158);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 160);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 162);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SigActAbridgedDataModeEnum get dataMode => SigActAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 164, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 166);

  @override
  String toString() {
    return 'SigActAbridged{id: ${id}, classificationMarking: ${classificationMarking}, sourceLanguage: ${sourceLanguage}, countryCode: ${countryCode}, city: ${city}, district: ${district}, province: ${province}, lat: ${lat}, lon: ${lon}, milgrid: ${milgrid}, theater: ${theater}, atext: ${atext}, agjson: ${agjson}, atype: ${atype}, andims: ${andims}, asrid: ${asrid}, eventStart: ${eventStart}, eventEnd: ${eventEnd}, reportDate: ${reportDate}, actors: ${actors}, civAbd: ${civAbd}, civDet: ${civDet}, civKia: ${civKia}, civWound: ${civWound}, coalAbd: ${coalAbd}, coalDet: ${coalDet}, coalKia: ${coalKia}, coalWound: ${coalWound}, enemyAbd: ${enemyAbd}, enemyDet: ${enemyDet}, enemyKia: ${enemyKia}, friendlyAbd: ${friendlyAbd}, friendlyDet: ${friendlyDet}, friendlyKia: ${friendlyKia}, friendlyWound: ${friendlyWound}, hostNatAbd: ${hostNatAbd}, hostNatDet: ${hostNatDet}, hostNatKia: ${hostNatKia}, hostNatWound: ${hostNatWound}, sideAabd: ${sideAabd}, sideAdet: ${sideAdet}, sideAkia: ${sideAkia}, sideAwound: ${sideAwound}, sideBabd: ${sideBabd}, sideBdet: ${sideBdet}, sideBkia: ${sideBkia}, sideBwound: ${sideBwound}, target: ${target}, eventDescription: ${eventDescription}, eventType: ${eventType}, typeOfAttack: ${typeOfAttack}, complexAttack: ${complexAttack}, idNumber: ${idNumber}, confidence: ${confidence}, accuracy: ${accuracy}, clarity: ${clarity}, cameoCode: ${cameoCode}, cameoBaseCode: ${cameoBaseCode}, cameoRootCode: ${cameoRootCode}, goldstein: ${goldstein}, documentSource: ${documentSource}, documentFilename: ${documentFilename}, hasAttachment: ${hasAttachment}, filesize: ${filesize}, checksumValue: ${checksumValue}, repUnit: ${repUnit}, repUnitType: ${repUnitType}, repUnitActivity: ${repUnitActivity}, numMentions: ${numMentions}, numSources: ${numSources}, numArticles: ${numArticles}, avgTone: ${avgTone}, sourceUrl: ${sourceUrl}, relatedDocs: ${relatedDocs}, summary: ${summary}, notes: ${notes}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _SigActAbridgedReader extends fb.TableReader<SigActAbridged> {
  const _SigActAbridgedReader();

  @override
  SigActAbridged createObject(fb.BufferContext bc, int offset) => 
    SigActAbridged._(bc, offset);
}

class SigActAbridgedBuilder {
  SigActAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(82);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSourceLanguageOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addCityOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addDistrictOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addProvinceOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(7, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(8, lon);
    return fbBuilder.offset;
  }
  int addMilgridOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addTheaterOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addAtextOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addAgjsonOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addAtypeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addAndims(int? andims) {
    fbBuilder.addInt32(14, andims);
    return fbBuilder.offset;
  }
  int addAsrid(int? asrid) {
    fbBuilder.addInt32(15, asrid);
    return fbBuilder.offset;
  }
  int addEventStartOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addEventEndOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addReportDateOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addActorsOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addCivAbd(int? civAbd) {
    fbBuilder.addInt32(20, civAbd);
    return fbBuilder.offset;
  }
  int addCivDet(int? civDet) {
    fbBuilder.addInt32(21, civDet);
    return fbBuilder.offset;
  }
  int addCivKia(int? civKia) {
    fbBuilder.addInt32(22, civKia);
    return fbBuilder.offset;
  }
  int addCivWound(int? civWound) {
    fbBuilder.addInt32(23, civWound);
    return fbBuilder.offset;
  }
  int addCoalAbd(int? coalAbd) {
    fbBuilder.addInt32(24, coalAbd);
    return fbBuilder.offset;
  }
  int addCoalDet(int? coalDet) {
    fbBuilder.addInt32(25, coalDet);
    return fbBuilder.offset;
  }
  int addCoalKia(int? coalKia) {
    fbBuilder.addInt32(26, coalKia);
    return fbBuilder.offset;
  }
  int addCoalWound(int? coalWound) {
    fbBuilder.addInt32(27, coalWound);
    return fbBuilder.offset;
  }
  int addEnemyAbd(int? enemyAbd) {
    fbBuilder.addInt32(28, enemyAbd);
    return fbBuilder.offset;
  }
  int addEnemyDet(int? enemyDet) {
    fbBuilder.addInt32(29, enemyDet);
    return fbBuilder.offset;
  }
  int addEnemyKia(int? enemyKia) {
    fbBuilder.addInt32(30, enemyKia);
    return fbBuilder.offset;
  }
  int addFriendlyAbd(int? friendlyAbd) {
    fbBuilder.addInt32(31, friendlyAbd);
    return fbBuilder.offset;
  }
  int addFriendlyDet(int? friendlyDet) {
    fbBuilder.addInt32(32, friendlyDet);
    return fbBuilder.offset;
  }
  int addFriendlyKia(int? friendlyKia) {
    fbBuilder.addInt32(33, friendlyKia);
    return fbBuilder.offset;
  }
  int addFriendlyWound(int? friendlyWound) {
    fbBuilder.addInt32(34, friendlyWound);
    return fbBuilder.offset;
  }
  int addHostNatAbd(int? hostNatAbd) {
    fbBuilder.addInt32(35, hostNatAbd);
    return fbBuilder.offset;
  }
  int addHostNatDet(int? hostNatDet) {
    fbBuilder.addInt32(36, hostNatDet);
    return fbBuilder.offset;
  }
  int addHostNatKia(int? hostNatKia) {
    fbBuilder.addInt32(37, hostNatKia);
    return fbBuilder.offset;
  }
  int addHostNatWound(int? hostNatWound) {
    fbBuilder.addInt32(38, hostNatWound);
    return fbBuilder.offset;
  }
  int addSideAabd(int? sideAabd) {
    fbBuilder.addInt32(39, sideAabd);
    return fbBuilder.offset;
  }
  int addSideAdet(int? sideAdet) {
    fbBuilder.addInt32(40, sideAdet);
    return fbBuilder.offset;
  }
  int addSideAkia(int? sideAkia) {
    fbBuilder.addInt32(41, sideAkia);
    return fbBuilder.offset;
  }
  int addSideAwound(int? sideAwound) {
    fbBuilder.addInt32(42, sideAwound);
    return fbBuilder.offset;
  }
  int addSideBabd(int? sideBabd) {
    fbBuilder.addInt32(43, sideBabd);
    return fbBuilder.offset;
  }
  int addSideBdet(int? sideBdet) {
    fbBuilder.addInt32(44, sideBdet);
    return fbBuilder.offset;
  }
  int addSideBkia(int? sideBkia) {
    fbBuilder.addInt32(45, sideBkia);
    return fbBuilder.offset;
  }
  int addSideBwound(int? sideBwound) {
    fbBuilder.addInt32(46, sideBwound);
    return fbBuilder.offset;
  }
  int addTargetOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addEventDescriptionOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addEventTypeOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addTypeOfAttackOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addComplexAttack(bool? complexAttack) {
    fbBuilder.addBool(51, complexAttack);
    return fbBuilder.offset;
  }
  int addIdNumberOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addConfidence(int? confidence) {
    fbBuilder.addInt32(53, confidence);
    return fbBuilder.offset;
  }
  int addAccuracy(int? accuracy) {
    fbBuilder.addInt32(54, accuracy);
    return fbBuilder.offset;
  }
  int addClarity(int? clarity) {
    fbBuilder.addInt32(55, clarity);
    return fbBuilder.offset;
  }
  int addCameoCodeOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addCameoBaseCodeOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addCameoRootCodeOffset(int? offset) {
    fbBuilder.addOffset(58, offset);
    return fbBuilder.offset;
  }
  int addGoldstein(double? goldstein) {
    fbBuilder.addFloat64(59, goldstein);
    return fbBuilder.offset;
  }
  int addDocumentSourceOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }
  int addDocumentFilenameOffset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addHasAttachment(bool? hasAttachment) {
    fbBuilder.addBool(62, hasAttachment);
    return fbBuilder.offset;
  }
  int addFilesize(int? filesize) {
    fbBuilder.addInt64(63, filesize);
    return fbBuilder.offset;
  }
  int addChecksumValueOffset(int? offset) {
    fbBuilder.addOffset(64, offset);
    return fbBuilder.offset;
  }
  int addRepUnitOffset(int? offset) {
    fbBuilder.addOffset(65, offset);
    return fbBuilder.offset;
  }
  int addRepUnitTypeOffset(int? offset) {
    fbBuilder.addOffset(66, offset);
    return fbBuilder.offset;
  }
  int addRepUnitActivityOffset(int? offset) {
    fbBuilder.addOffset(67, offset);
    return fbBuilder.offset;
  }
  int addNumMentions(int? numMentions) {
    fbBuilder.addInt32(68, numMentions);
    return fbBuilder.offset;
  }
  int addNumSources(int? numSources) {
    fbBuilder.addInt32(69, numSources);
    return fbBuilder.offset;
  }
  int addNumArticles(int? numArticles) {
    fbBuilder.addInt32(70, numArticles);
    return fbBuilder.offset;
  }
  int addAvgTone(double? avgTone) {
    fbBuilder.addFloat64(71, avgTone);
    return fbBuilder.offset;
  }
  int addSourceUrlOffset(int? offset) {
    fbBuilder.addOffset(72, offset);
    return fbBuilder.offset;
  }
  int addRelatedDocsOffset(int? offset) {
    fbBuilder.addOffset(73, offset);
    return fbBuilder.offset;
  }
  int addSummaryOffset(int? offset) {
    fbBuilder.addOffset(74, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(75, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(76, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(77, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(78, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(79, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SigActAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(80, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(81, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SigActAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _sourceLanguage;
  final String? _countryCode;
  final String? _city;
  final String? _district;
  final String? _province;
  final double? _lat;
  final double? _lon;
  final String? _milgrid;
  final String? _theater;
  final String? _atext;
  final String? _agjson;
  final String? _atype;
  final int? _andims;
  final int? _asrid;
  final String? _eventStart;
  final String? _eventEnd;
  final String? _reportDate;
  final List<String>? _actors;
  final int? _civAbd;
  final int? _civDet;
  final int? _civKia;
  final int? _civWound;
  final int? _coalAbd;
  final int? _coalDet;
  final int? _coalKia;
  final int? _coalWound;
  final int? _enemyAbd;
  final int? _enemyDet;
  final int? _enemyKia;
  final int? _friendlyAbd;
  final int? _friendlyDet;
  final int? _friendlyKia;
  final int? _friendlyWound;
  final int? _hostNatAbd;
  final int? _hostNatDet;
  final int? _hostNatKia;
  final int? _hostNatWound;
  final int? _sideAabd;
  final int? _sideAdet;
  final int? _sideAkia;
  final int? _sideAwound;
  final int? _sideBabd;
  final int? _sideBdet;
  final int? _sideBkia;
  final int? _sideBwound;
  final String? _target;
  final String? _eventDescription;
  final String? _eventType;
  final String? _typeOfAttack;
  final bool? _complexAttack;
  final String? _idNumber;
  final int? _confidence;
  final int? _accuracy;
  final int? _clarity;
  final String? _cameoCode;
  final String? _cameoBaseCode;
  final String? _cameoRootCode;
  final double? _goldstein;
  final String? _documentSource;
  final String? _documentFilename;
  final bool? _hasAttachment;
  final int? _filesize;
  final String? _checksumValue;
  final String? _repUnit;
  final String? _repUnitType;
  final String? _repUnitActivity;
  final int? _numMentions;
  final int? _numSources;
  final int? _numArticles;
  final double? _avgTone;
  final String? _sourceUrl;
  final List<String>? _relatedDocs;
  final String? _summary;
  final String? _notes;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final SigActAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;

  SigActAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? sourceLanguage,
    String? countryCode,
    String? city,
    String? district,
    String? province,
    double? lat,
    double? lon,
    String? milgrid,
    String? theater,
    String? atext,
    String? agjson,
    String? atype,
    int? andims,
    int? asrid,
    String? eventStart,
    String? eventEnd,
    String? reportDate,
    List<String>? actors,
    int? civAbd,
    int? civDet,
    int? civKia,
    int? civWound,
    int? coalAbd,
    int? coalDet,
    int? coalKia,
    int? coalWound,
    int? enemyAbd,
    int? enemyDet,
    int? enemyKia,
    int? friendlyAbd,
    int? friendlyDet,
    int? friendlyKia,
    int? friendlyWound,
    int? hostNatAbd,
    int? hostNatDet,
    int? hostNatKia,
    int? hostNatWound,
    int? sideAabd,
    int? sideAdet,
    int? sideAkia,
    int? sideAwound,
    int? sideBabd,
    int? sideBdet,
    int? sideBkia,
    int? sideBwound,
    String? target,
    String? eventDescription,
    String? eventType,
    String? typeOfAttack,
    bool? complexAttack,
    String? idNumber,
    int? confidence,
    int? accuracy,
    int? clarity,
    String? cameoCode,
    String? cameoBaseCode,
    String? cameoRootCode,
    double? goldstein,
    String? documentSource,
    String? documentFilename,
    bool? hasAttachment,
    int? filesize,
    String? checksumValue,
    String? repUnit,
    String? repUnitType,
    String? repUnitActivity,
    int? numMentions,
    int? numSources,
    int? numArticles,
    double? avgTone,
    String? sourceUrl,
    List<String>? relatedDocs,
    String? summary,
    String? notes,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    SigActAbridgedDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _sourceLanguage = sourceLanguage,
        _countryCode = countryCode,
        _city = city,
        _district = district,
        _province = province,
        _lat = lat,
        _lon = lon,
        _milgrid = milgrid,
        _theater = theater,
        _atext = atext,
        _agjson = agjson,
        _atype = atype,
        _andims = andims,
        _asrid = asrid,
        _eventStart = eventStart,
        _eventEnd = eventEnd,
        _reportDate = reportDate,
        _actors = actors,
        _civAbd = civAbd,
        _civDet = civDet,
        _civKia = civKia,
        _civWound = civWound,
        _coalAbd = coalAbd,
        _coalDet = coalDet,
        _coalKia = coalKia,
        _coalWound = coalWound,
        _enemyAbd = enemyAbd,
        _enemyDet = enemyDet,
        _enemyKia = enemyKia,
        _friendlyAbd = friendlyAbd,
        _friendlyDet = friendlyDet,
        _friendlyKia = friendlyKia,
        _friendlyWound = friendlyWound,
        _hostNatAbd = hostNatAbd,
        _hostNatDet = hostNatDet,
        _hostNatKia = hostNatKia,
        _hostNatWound = hostNatWound,
        _sideAabd = sideAabd,
        _sideAdet = sideAdet,
        _sideAkia = sideAkia,
        _sideAwound = sideAwound,
        _sideBabd = sideBabd,
        _sideBdet = sideBdet,
        _sideBkia = sideBkia,
        _sideBwound = sideBwound,
        _target = target,
        _eventDescription = eventDescription,
        _eventType = eventType,
        _typeOfAttack = typeOfAttack,
        _complexAttack = complexAttack,
        _idNumber = idNumber,
        _confidence = confidence,
        _accuracy = accuracy,
        _clarity = clarity,
        _cameoCode = cameoCode,
        _cameoBaseCode = cameoBaseCode,
        _cameoRootCode = cameoRootCode,
        _goldstein = goldstein,
        _documentSource = documentSource,
        _documentFilename = documentFilename,
        _hasAttachment = hasAttachment,
        _filesize = filesize,
        _checksumValue = checksumValue,
        _repUnit = repUnit,
        _repUnitType = repUnitType,
        _repUnitActivity = repUnitActivity,
        _numMentions = numMentions,
        _numSources = numSources,
        _numArticles = numArticles,
        _avgTone = avgTone,
        _sourceUrl = sourceUrl,
        _relatedDocs = relatedDocs,
        _summary = summary,
        _notes = notes,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? sourceLanguageOffset = _sourceLanguage == null ? null
        : fbBuilder.writeString(_sourceLanguage!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? cityOffset = _city == null ? null
        : fbBuilder.writeString(_city!);
    final int? districtOffset = _district == null ? null
        : fbBuilder.writeString(_district!);
    final int? provinceOffset = _province == null ? null
        : fbBuilder.writeString(_province!);
    final int? milgridOffset = _milgrid == null ? null
        : fbBuilder.writeString(_milgrid!);
    final int? theaterOffset = _theater == null ? null
        : fbBuilder.writeString(_theater!);
    final int? atextOffset = _atext == null ? null
        : fbBuilder.writeString(_atext!);
    final int? agjsonOffset = _agjson == null ? null
        : fbBuilder.writeString(_agjson!);
    final int? atypeOffset = _atype == null ? null
        : fbBuilder.writeString(_atype!);
    final int? eventStartOffset = _eventStart == null ? null
        : fbBuilder.writeString(_eventStart!);
    final int? eventEndOffset = _eventEnd == null ? null
        : fbBuilder.writeString(_eventEnd!);
    final int? reportDateOffset = _reportDate == null ? null
        : fbBuilder.writeString(_reportDate!);
    final int? actorsOffset = _actors == null ? null
        : fbBuilder.writeList(_actors!.map(fbBuilder.writeString).toList());
    final int? targetOffset = _target == null ? null
        : fbBuilder.writeString(_target!);
    final int? eventDescriptionOffset = _eventDescription == null ? null
        : fbBuilder.writeString(_eventDescription!);
    final int? eventTypeOffset = _eventType == null ? null
        : fbBuilder.writeString(_eventType!);
    final int? typeOfAttackOffset = _typeOfAttack == null ? null
        : fbBuilder.writeString(_typeOfAttack!);
    final int? idNumberOffset = _idNumber == null ? null
        : fbBuilder.writeString(_idNumber!);
    final int? cameoCodeOffset = _cameoCode == null ? null
        : fbBuilder.writeString(_cameoCode!);
    final int? cameoBaseCodeOffset = _cameoBaseCode == null ? null
        : fbBuilder.writeString(_cameoBaseCode!);
    final int? cameoRootCodeOffset = _cameoRootCode == null ? null
        : fbBuilder.writeString(_cameoRootCode!);
    final int? documentSourceOffset = _documentSource == null ? null
        : fbBuilder.writeString(_documentSource!);
    final int? documentFilenameOffset = _documentFilename == null ? null
        : fbBuilder.writeString(_documentFilename!);
    final int? checksumValueOffset = _checksumValue == null ? null
        : fbBuilder.writeString(_checksumValue!);
    final int? repUnitOffset = _repUnit == null ? null
        : fbBuilder.writeString(_repUnit!);
    final int? repUnitTypeOffset = _repUnitType == null ? null
        : fbBuilder.writeString(_repUnitType!);
    final int? repUnitActivityOffset = _repUnitActivity == null ? null
        : fbBuilder.writeString(_repUnitActivity!);
    final int? sourceUrlOffset = _sourceUrl == null ? null
        : fbBuilder.writeString(_sourceUrl!);
    final int? relatedDocsOffset = _relatedDocs == null ? null
        : fbBuilder.writeList(_relatedDocs!.map(fbBuilder.writeString).toList());
    final int? summaryOffset = _summary == null ? null
        : fbBuilder.writeString(_summary!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(82);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, sourceLanguageOffset);
    fbBuilder.addOffset(3, countryCodeOffset);
    fbBuilder.addOffset(4, cityOffset);
    fbBuilder.addOffset(5, districtOffset);
    fbBuilder.addOffset(6, provinceOffset);
    fbBuilder.addFloat64(7, _lat);
    fbBuilder.addFloat64(8, _lon);
    fbBuilder.addOffset(9, milgridOffset);
    fbBuilder.addOffset(10, theaterOffset);
    fbBuilder.addOffset(11, atextOffset);
    fbBuilder.addOffset(12, agjsonOffset);
    fbBuilder.addOffset(13, atypeOffset);
    fbBuilder.addInt32(14, _andims);
    fbBuilder.addInt32(15, _asrid);
    fbBuilder.addOffset(16, eventStartOffset);
    fbBuilder.addOffset(17, eventEndOffset);
    fbBuilder.addOffset(18, reportDateOffset);
    fbBuilder.addOffset(19, actorsOffset);
    fbBuilder.addInt32(20, _civAbd);
    fbBuilder.addInt32(21, _civDet);
    fbBuilder.addInt32(22, _civKia);
    fbBuilder.addInt32(23, _civWound);
    fbBuilder.addInt32(24, _coalAbd);
    fbBuilder.addInt32(25, _coalDet);
    fbBuilder.addInt32(26, _coalKia);
    fbBuilder.addInt32(27, _coalWound);
    fbBuilder.addInt32(28, _enemyAbd);
    fbBuilder.addInt32(29, _enemyDet);
    fbBuilder.addInt32(30, _enemyKia);
    fbBuilder.addInt32(31, _friendlyAbd);
    fbBuilder.addInt32(32, _friendlyDet);
    fbBuilder.addInt32(33, _friendlyKia);
    fbBuilder.addInt32(34, _friendlyWound);
    fbBuilder.addInt32(35, _hostNatAbd);
    fbBuilder.addInt32(36, _hostNatDet);
    fbBuilder.addInt32(37, _hostNatKia);
    fbBuilder.addInt32(38, _hostNatWound);
    fbBuilder.addInt32(39, _sideAabd);
    fbBuilder.addInt32(40, _sideAdet);
    fbBuilder.addInt32(41, _sideAkia);
    fbBuilder.addInt32(42, _sideAwound);
    fbBuilder.addInt32(43, _sideBabd);
    fbBuilder.addInt32(44, _sideBdet);
    fbBuilder.addInt32(45, _sideBkia);
    fbBuilder.addInt32(46, _sideBwound);
    fbBuilder.addOffset(47, targetOffset);
    fbBuilder.addOffset(48, eventDescriptionOffset);
    fbBuilder.addOffset(49, eventTypeOffset);
    fbBuilder.addOffset(50, typeOfAttackOffset);
    fbBuilder.addBool(51, _complexAttack);
    fbBuilder.addOffset(52, idNumberOffset);
    fbBuilder.addInt32(53, _confidence);
    fbBuilder.addInt32(54, _accuracy);
    fbBuilder.addInt32(55, _clarity);
    fbBuilder.addOffset(56, cameoCodeOffset);
    fbBuilder.addOffset(57, cameoBaseCodeOffset);
    fbBuilder.addOffset(58, cameoRootCodeOffset);
    fbBuilder.addFloat64(59, _goldstein);
    fbBuilder.addOffset(60, documentSourceOffset);
    fbBuilder.addOffset(61, documentFilenameOffset);
    fbBuilder.addBool(62, _hasAttachment);
    fbBuilder.addInt64(63, _filesize);
    fbBuilder.addOffset(64, checksumValueOffset);
    fbBuilder.addOffset(65, repUnitOffset);
    fbBuilder.addOffset(66, repUnitTypeOffset);
    fbBuilder.addOffset(67, repUnitActivityOffset);
    fbBuilder.addInt32(68, _numMentions);
    fbBuilder.addInt32(69, _numSources);
    fbBuilder.addInt32(70, _numArticles);
    fbBuilder.addFloat64(71, _avgTone);
    fbBuilder.addOffset(72, sourceUrlOffset);
    fbBuilder.addOffset(73, relatedDocsOffset);
    fbBuilder.addOffset(74, summaryOffset);
    fbBuilder.addOffset(75, notesOffset);
    fbBuilder.addOffset(76, createdAtOffset);
    fbBuilder.addOffset(77, createdByOffset);
    fbBuilder.addOffset(78, sourceOffset);
    fbBuilder.addOffset(79, originOffset);
    fbBuilder.addInt8(80, _dataMode?.value);
    fbBuilder.addOffset(81, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
