// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Schema for the CotData to post.
class CotDataIngest {
  CotDataIngest._(this._bc, this._bcOffset);
  factory CotDataIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CotDataIngest> reader = _CotDataIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Identifier of the sender of the cot message which should remain the same on subsequent POI records of the same point of interest.
  ///  Example: /// Example: POI-ID
  ///  Constraints: No constraints specified.
  String? get senderUid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  How the event point was generated, in CoT object heirarchy notation (optional, CoT).
  ///  Example: /// Example: h-e
  ///  Constraints: No constraints specified.
  String? get how => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get ce => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  Height above lat/lon point, in meters (1-sigma, if representing linear error).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get le => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Stale timestamp (optional), in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get stale => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Start time of event validity (optional), in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get start => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Event type, in CoT object heirarchy notation (optional, CoT).
  ///  Example: /// Example: a-h-G
  ///  Constraints: No constraints specified.
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Point height above ellipsoid (WGS-84), in meters.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  double get alt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get cotPositionData => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get cotChatData => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Optional list of call signs to send message to directly.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get callSigns => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 28);
  ///  Optional list of TAK user ids to send message to directly.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get uids => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  Optional set of groups to send message to specifically.  If not specified, the message will be sent to the default _ANON_ group.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get groups => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);

  @override
  String toString() {
    return 'CotDataIngest{senderUid: ${senderUid}, how: ${how}, ce: ${ce}, le: ${le}, stale: ${stale}, start: ${start}, lat: ${lat}, lon: ${lon}, type: ${type}, alt: ${alt}, cotPositionData: ${cotPositionData}, cotChatData: ${cotChatData}, callSigns: ${callSigns}, uids: ${uids}, groups: ${groups}}';
  }
}

class _CotDataIngestReader extends fb.TableReader<CotDataIngest> {
  const _CotDataIngestReader();

  @override
  CotDataIngest createObject(fb.BufferContext bc, int offset) => 
    CotDataIngest._(bc, offset);
}

class CotDataIngestBuilder {
  CotDataIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(15);
  }

  int addSenderUidOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHowOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCe(double? ce) {
    fbBuilder.addFloat64(2, ce);
    return fbBuilder.offset;
  }
  int addLe(double? le) {
    fbBuilder.addFloat64(3, le);
    return fbBuilder.offset;
  }
  int addStaleOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addStartOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(6, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(7, lon);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addAlt(double? alt) {
    fbBuilder.addFloat64(9, alt);
    return fbBuilder.offset;
  }
  int addCotPositionDataOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addCotChatDataOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCallSignsOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addUidsOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addGroupsOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CotDataIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _senderUid;
  final String? _how;
  final double? _ce;
  final double? _le;
  final String? _stale;
  final String? _start;
  final double? _lat;
  final double? _lon;
  final String? _type;
  final double? _alt;
  final String? _cotPositionData;
  final String? _cotChatData;
  final List<String>? _callSigns;
  final List<String>? _uids;
  final List<String>? _groups;

  CotDataIngestObjectBuilder({
    String? senderUid,
    String? how,
    double? ce,
    double? le,
    String? stale,
    String? start,
    double? lat,
    double? lon,
    String? type,
    double? alt,
    String? cotPositionData,
    String? cotChatData,
    List<String>? callSigns,
    List<String>? uids,
    List<String>? groups,
  })
      : _senderUid = senderUid,
        _how = how,
        _ce = ce,
        _le = le,
        _stale = stale,
        _start = start,
        _lat = lat,
        _lon = lon,
        _type = type,
        _alt = alt,
        _cotPositionData = cotPositionData,
        _cotChatData = cotChatData,
        _callSigns = callSigns,
        _uids = uids,
        _groups = groups;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? senderUidOffset = _senderUid == null ? null
        : fbBuilder.writeString(_senderUid!);
    final int? howOffset = _how == null ? null
        : fbBuilder.writeString(_how!);
    final int? staleOffset = _stale == null ? null
        : fbBuilder.writeString(_stale!);
    final int? startOffset = _start == null ? null
        : fbBuilder.writeString(_start!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? cotPositionDataOffset = _cotPositionData == null ? null
        : fbBuilder.writeString(_cotPositionData!);
    final int? cotChatDataOffset = _cotChatData == null ? null
        : fbBuilder.writeString(_cotChatData!);
    final int? callSignsOffset = _callSigns == null ? null
        : fbBuilder.writeList(_callSigns!.map(fbBuilder.writeString).toList());
    final int? uidsOffset = _uids == null ? null
        : fbBuilder.writeList(_uids!.map(fbBuilder.writeString).toList());
    final int? groupsOffset = _groups == null ? null
        : fbBuilder.writeList(_groups!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(15);
    fbBuilder.addOffset(0, senderUidOffset);
    fbBuilder.addOffset(1, howOffset);
    fbBuilder.addFloat64(2, _ce);
    fbBuilder.addFloat64(3, _le);
    fbBuilder.addOffset(4, staleOffset);
    fbBuilder.addOffset(5, startOffset);
    fbBuilder.addFloat64(6, _lat);
    fbBuilder.addFloat64(7, _lon);
    fbBuilder.addOffset(8, typeOffset);
    fbBuilder.addFloat64(9, _alt);
    fbBuilder.addOffset(10, cotPositionDataOffset);
    fbBuilder.addOffset(11, cotChatDataOffset);
    fbBuilder.addOffset(12, callSignsOffset);
    fbBuilder.addOffset(13, uidsOffset);
    fbBuilder.addOffset(14, groupsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
