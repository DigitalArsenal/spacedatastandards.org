// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Data on High-Range Resolution (HRR) targets or High Range Resolution Range Doppler Maps (RDM) for a specified area.
class MtiHrrFull {
  MtiHrrFull._(this._bc, this._bcOffset);
  factory MtiHrrFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MtiHrrFull> reader = _MtiHrrFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Sequential count of a revisit of the bounding area for a given job ID.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get h2 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  ///  Sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get h3 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  ///  Flag to indicate the last dwell of the revisit.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get h4 => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  ///  Sequential index of the associated MTI Report.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get h5 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Number of Range Doppler pixels that exceed target scatterer threshold and are reported in this segment.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get h6 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  Number of Range Bins/Samples in a Range Doppler Chip.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get h7 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  Number of Doppler bins in a Range-Doppler chip.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get h8 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  The Peak Scatter returns the maximum power level (e.g. in milliwatts, or dBm) registered by the sensor.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get h9 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Detection threshold used to isolate significant target scatterer pixels, expressed as power relative to clutter mean in negative quarter-decibels.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get h10 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  ///  3dB range impulse response of the radar, expressed in centimeters.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get h11 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Slant Range pixel spacing after over sampling, expressed in centimeters.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get h12 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  3dB Doppler resolution of the radar, expressed in Hertz.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get h13 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Doppler pixel spacing after over sampling, expressed in Hertz.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get h14 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Center Frequency of the radar in GHz.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get h15 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Enumeration table denoting the compression technique used.
  ///  Example: /// Example: TABLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get h16 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Enumeration table indicating the spectral weighting used in the range compression process.
  ///  Example: /// Example: TABLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get h17 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Enumeration table indicating the spectral weighting used in the cross-range or Doppler compression process.
  ///  Example: /// Example: TABLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get h18 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Initial power of the peak scatterer, expressed in dB.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get h19 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  RCS of the peak scatterer, expressed in half-decibels (dB/2).
  ///  Example: /// Example: 117
  ///  Constraints: No constraints specified.
  int get h20 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  When the RDM does not correlate to a single MTI report index or when the center range bin does not correlate to the center of the dwell; provide the range sample offset in meters from Dwell Center (positive is away from the sensor) of the first scatterer record.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get h21 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 42, 0);
  ///  When the RDM does not correlate to a single MTI report index or the center doppler bin does not correlate to the doppler centroid of the dwell; Doppler sample value in Hz of the first scatterer record.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get h22 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 44, 0);
  ///  Enumeration field which designates the type of data being delivered.
  ///  Example: /// Example: FIELD
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get h23 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Flag field to indicate the additional signal processing techniques applied to the data.
  ///  Example: /// Example: FLAG
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get h24 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Number of pixels in the range dimension of the chip.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get h27 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 50, 0);
  ///  Distance from Range Bin to closest edge in the entire chip, expressed in centimeters.
  ///  Example: /// Example: 1234567890
  ///  Constraints: No constraints specified.
  int get h28 => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  Relative velocity to skin line.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get h29 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  Computed object length based upon HRR profile, in meters.
  ///  Example: /// Example: 22
  ///  Constraints: No constraints specified.
  int get h30 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  Standard deviation of estimate of the object length, expressed in meters.
  ///  Example: /// Example: 55
  ///  Constraints: No constraints specified.
  int get h31 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 58, 0);
  ///  Standard deviation of estimate of the object length, expressed in meters.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get h32 => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 60);

  @override
  String toString() {
    return 'MtiHrrFull{h2: ${h2}, h3: ${h3}, h4: ${h4}, h5: ${h5}, h6: ${h6}, h7: ${h7}, h8: ${h8}, h9: ${h9}, h10: ${h10}, h11: ${h11}, h12: ${h12}, h13: ${h13}, h14: ${h14}, h15: ${h15}, h16: ${h16}, h17: ${h17}, h18: ${h18}, h19: ${h19}, h20: ${h20}, h21: ${h21}, h22: ${h22}, h23: ${h23}, h24: ${h24}, h27: ${h27}, h28: ${h28}, h29: ${h29}, h30: ${h30}, h31: ${h31}, h32: ${h32}}';
  }
}

class _MtiHrrFullReader extends fb.TableReader<MtiHrrFull> {
  const _MtiHrrFullReader();

  @override
  MtiHrrFull createObject(fb.BufferContext bc, int offset) => 
    MtiHrrFull._(bc, offset);
}

class MtiHrrFullBuilder {
  MtiHrrFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(29);
  }

  int addH2(int? h2) {
    fbBuilder.addInt32(0, h2);
    return fbBuilder.offset;
  }
  int addH3(int? h3) {
    fbBuilder.addInt32(1, h3);
    return fbBuilder.offset;
  }
  int addH4(bool? h4) {
    fbBuilder.addBool(2, h4);
    return fbBuilder.offset;
  }
  int addH5(int? h5) {
    fbBuilder.addInt32(3, h5);
    return fbBuilder.offset;
  }
  int addH6(int? h6) {
    fbBuilder.addInt32(4, h6);
    return fbBuilder.offset;
  }
  int addH7(int? h7) {
    fbBuilder.addInt32(5, h7);
    return fbBuilder.offset;
  }
  int addH8(int? h8) {
    fbBuilder.addInt32(6, h8);
    return fbBuilder.offset;
  }
  int addH9(int? h9) {
    fbBuilder.addInt32(7, h9);
    return fbBuilder.offset;
  }
  int addH10(int? h10) {
    fbBuilder.addInt32(8, h10);
    return fbBuilder.offset;
  }
  int addH11(double? h11) {
    fbBuilder.addFloat64(9, h11);
    return fbBuilder.offset;
  }
  int addH12(double? h12) {
    fbBuilder.addFloat64(10, h12);
    return fbBuilder.offset;
  }
  int addH13(double? h13) {
    fbBuilder.addFloat64(11, h13);
    return fbBuilder.offset;
  }
  int addH14(double? h14) {
    fbBuilder.addFloat64(12, h14);
    return fbBuilder.offset;
  }
  int addH15(double? h15) {
    fbBuilder.addFloat64(13, h15);
    return fbBuilder.offset;
  }
  int addH16Offset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addH17Offset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addH18Offset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addH19(double? h19) {
    fbBuilder.addFloat64(17, h19);
    return fbBuilder.offset;
  }
  int addH20(int? h20) {
    fbBuilder.addInt32(18, h20);
    return fbBuilder.offset;
  }
  int addH21(int? h21) {
    fbBuilder.addInt32(19, h21);
    return fbBuilder.offset;
  }
  int addH22(int? h22) {
    fbBuilder.addInt32(20, h22);
    return fbBuilder.offset;
  }
  int addH23Offset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addH24Offset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addH27(int? h27) {
    fbBuilder.addInt32(23, h27);
    return fbBuilder.offset;
  }
  int addH28(int? h28) {
    fbBuilder.addInt64(24, h28);
    return fbBuilder.offset;
  }
  int addH29(int? h29) {
    fbBuilder.addInt32(25, h29);
    return fbBuilder.offset;
  }
  int addH30(int? h30) {
    fbBuilder.addInt32(26, h30);
    return fbBuilder.offset;
  }
  int addH31(int? h31) {
    fbBuilder.addInt32(27, h31);
    return fbBuilder.offset;
  }
  int addH32Offset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MtiHrrFullObjectBuilder extends fb.ObjectBuilder {
  final int? _h2;
  final int? _h3;
  final bool? _h4;
  final int? _h5;
  final int? _h6;
  final int? _h7;
  final int? _h8;
  final int? _h9;
  final int? _h10;
  final double? _h11;
  final double? _h12;
  final double? _h13;
  final double? _h14;
  final double? _h15;
  final String? _h16;
  final String? _h17;
  final String? _h18;
  final double? _h19;
  final int? _h20;
  final int? _h21;
  final int? _h22;
  final String? _h23;
  final String? _h24;
  final int? _h27;
  final int? _h28;
  final int? _h29;
  final int? _h30;
  final int? _h31;
  final List<String>? _h32;

  MtiHrrFullObjectBuilder({
    int? h2,
    int? h3,
    bool? h4,
    int? h5,
    int? h6,
    int? h7,
    int? h8,
    int? h9,
    int? h10,
    double? h11,
    double? h12,
    double? h13,
    double? h14,
    double? h15,
    String? h16,
    String? h17,
    String? h18,
    double? h19,
    int? h20,
    int? h21,
    int? h22,
    String? h23,
    String? h24,
    int? h27,
    int? h28,
    int? h29,
    int? h30,
    int? h31,
    List<String>? h32,
  })
      : _h2 = h2,
        _h3 = h3,
        _h4 = h4,
        _h5 = h5,
        _h6 = h6,
        _h7 = h7,
        _h8 = h8,
        _h9 = h9,
        _h10 = h10,
        _h11 = h11,
        _h12 = h12,
        _h13 = h13,
        _h14 = h14,
        _h15 = h15,
        _h16 = h16,
        _h17 = h17,
        _h18 = h18,
        _h19 = h19,
        _h20 = h20,
        _h21 = h21,
        _h22 = h22,
        _h23 = h23,
        _h24 = h24,
        _h27 = h27,
        _h28 = h28,
        _h29 = h29,
        _h30 = h30,
        _h31 = h31,
        _h32 = h32;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? h16Offset = _h16 == null ? null
        : fbBuilder.writeString(_h16!);
    final int? h17Offset = _h17 == null ? null
        : fbBuilder.writeString(_h17!);
    final int? h18Offset = _h18 == null ? null
        : fbBuilder.writeString(_h18!);
    final int? h23Offset = _h23 == null ? null
        : fbBuilder.writeString(_h23!);
    final int? h24Offset = _h24 == null ? null
        : fbBuilder.writeString(_h24!);
    final int? h32Offset = _h32 == null ? null
        : fbBuilder.writeList(_h32!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(29);
    fbBuilder.addInt32(0, _h2);
    fbBuilder.addInt32(1, _h3);
    fbBuilder.addBool(2, _h4);
    fbBuilder.addInt32(3, _h5);
    fbBuilder.addInt32(4, _h6);
    fbBuilder.addInt32(5, _h7);
    fbBuilder.addInt32(6, _h8);
    fbBuilder.addInt32(7, _h9);
    fbBuilder.addInt32(8, _h10);
    fbBuilder.addFloat64(9, _h11);
    fbBuilder.addFloat64(10, _h12);
    fbBuilder.addFloat64(11, _h13);
    fbBuilder.addFloat64(12, _h14);
    fbBuilder.addFloat64(13, _h15);
    fbBuilder.addOffset(14, h16Offset);
    fbBuilder.addOffset(15, h17Offset);
    fbBuilder.addOffset(16, h18Offset);
    fbBuilder.addFloat64(17, _h19);
    fbBuilder.addInt32(18, _h20);
    fbBuilder.addInt32(19, _h21);
    fbBuilder.addInt32(20, _h22);
    fbBuilder.addOffset(21, h23Offset);
    fbBuilder.addOffset(22, h24Offset);
    fbBuilder.addInt32(23, _h27);
    fbBuilder.addInt64(24, _h28);
    fbBuilder.addInt32(25, _h29);
    fbBuilder.addInt32(26, _h30);
    fbBuilder.addInt32(27, _h31);
    fbBuilder.addOffset(28, h32Offset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
