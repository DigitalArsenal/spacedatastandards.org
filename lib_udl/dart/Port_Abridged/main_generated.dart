// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class PortAbridgedDataModeEnum {
  final int value;
  const PortAbridgedDataModeEnum._(this.value);

  factory PortAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum PortAbridgedDataModeEnum');
    }
    return result;
  }

  static PortAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : PortAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const PortAbridgedDataModeEnum REAL = PortAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const PortAbridgedDataModeEnum TEST = PortAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const PortAbridgedDataModeEnum SIMULATED = PortAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const PortAbridgedDataModeEnum EXERCISE = PortAbridgedDataModeEnum._(3);
  static const Map<int, PortAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<PortAbridgedDataModeEnum> reader = _PortAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'PortAbridgedDataModeEnum{value: $value}';
  }
}

class _PortAbridgedDataModeEnumReader extends fb.Reader<PortAbridgedDataModeEnum> {
  const _PortAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  PortAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      PortAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Properties and characteristics of a maritime port, which includes location, port identifiers, and remarks.
class PortAbridged {
  PortAbridged._(this._bc, this._bcOffset);
  factory PortAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PortAbridged> reader = _PortAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the Site Entity associated with the Port record.
  ///  Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSite => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The five-character United Nations Code for Trade and Transport Locations (UN/LOCODE) of this port.  The first two letters of the code contains the ISO 3166-1 alpha-2 country designation of the port country. The three remaining characters identify a location within that country.  Letters are preferred, but if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid confusion with the letters "O" and "I" respectively.
  ///  Example: /// Example: CAVAN
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get locode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The name of this port.
  ///  Example: /// Example: Vancouver
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get portName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The type of harbor for this port. The harbor type refers to how a port is physically positioned.
  ///  COASTAL BREAKWATER (CB)
  ///  COASTAL NATURAL (CN)
  ///  COASTAL TIDE GATE  (CT)
  ///  LAKE OR CANAL (LC)
  ///  OPEN ROADSTEAD (OR)
  ///  RIVER BASIN (RB)
  ///  RIVER NATURAL (RN)
  ///  RIVER TIDE GATE (RT)
  ///  TYPHOON HARBOR  (TH).
  ///  Example: /// Example: COASTAL NATURAL
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get harborType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The size of the harbor for this port measured in square kilometers.
  ///  Example: /// Example: 160.1
  ///  Constraints: No constraints specified.
  double get harborSize => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Maximum allowed vessel draught. Draught is the principal dimensions of any waterborne vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel measured in meters.
  ///  Example: /// Example: 18.1
  ///  Constraints: No constraints specified.
  double get maxDraught => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Average time for a vessel at this port in hours.
  ///  Example: /// Example: 41.1
  ///  Constraints: No constraints specified.
  double get avgDuration => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  The tide range of this port in meters.
  ///  Example: /// Example: 4.1
  ///  Constraints: No constraints specified.
  double get tideRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  The shelter afforded from wind, sea, and swell refers to the area where normal port operations are conducted, usually the wharf area. Shelter afforded by the anchorage area may be given for ports where cargo is handled by lighters. Values given are EXCELLENT, FAIR, GOOD, POOR, or NONE.
  ///  Example: /// Example: EXCELLENT
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get shelter => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Flag indicating whether a pilot is required at this port.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get pilotReqd => const fb.BoolReader().vTableGet(_bc, _bcOffset, 28, false);
  ///  WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  The country where this port is located.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 64
  PortAbridgedDataModeEnum get dataMode => PortAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 44, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);

  @override
  String toString() {
    return 'PortAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idSite: ${idSite}, externalId: ${externalId}, locode: ${locode}, portName: ${portName}, harborType: ${harborType}, harborSize: ${harborSize}, maxDraught: ${maxDraught}, avgDuration: ${avgDuration}, tideRange: ${tideRange}, shelter: ${shelter}, pilotReqd: ${pilotReqd}, lat: ${lat}, lon: ${lon}, countryCode: ${countryCode}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _PortAbridgedReader extends fb.TableReader<PortAbridged> {
  const _PortAbridgedReader();

  @override
  PortAbridged createObject(fb.BufferContext bc, int offset) => 
    PortAbridged._(bc, offset);
}

class PortAbridgedBuilder {
  PortAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(22);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdSiteOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addLocodeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPortNameOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addHarborTypeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addHarborSize(double? harborSize) {
    fbBuilder.addFloat64(7, harborSize);
    return fbBuilder.offset;
  }
  int addMaxDraught(double? maxDraught) {
    fbBuilder.addFloat64(8, maxDraught);
    return fbBuilder.offset;
  }
  int addAvgDuration(double? avgDuration) {
    fbBuilder.addFloat64(9, avgDuration);
    return fbBuilder.offset;
  }
  int addTideRange(double? tideRange) {
    fbBuilder.addFloat64(10, tideRange);
    return fbBuilder.offset;
  }
  int addShelterOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addPilotReqd(bool? pilotReqd) {
    fbBuilder.addBool(12, pilotReqd);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(13, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(14, lon);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addDataMode(PortAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(20, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PortAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idSite;
  final String? _externalId;
  final String? _locode;
  final String? _portName;
  final String? _harborType;
  final double? _harborSize;
  final double? _maxDraught;
  final double? _avgDuration;
  final double? _tideRange;
  final String? _shelter;
  final bool? _pilotReqd;
  final double? _lat;
  final double? _lon;
  final String? _countryCode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final PortAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;

  PortAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idSite,
    String? externalId,
    String? locode,
    String? portName,
    String? harborType,
    double? harborSize,
    double? maxDraught,
    double? avgDuration,
    double? tideRange,
    String? shelter,
    bool? pilotReqd,
    double? lat,
    double? lon,
    String? countryCode,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    PortAbridgedDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idSite = idSite,
        _externalId = externalId,
        _locode = locode,
        _portName = portName,
        _harborType = harborType,
        _harborSize = harborSize,
        _maxDraught = maxDraught,
        _avgDuration = avgDuration,
        _tideRange = tideRange,
        _shelter = shelter,
        _pilotReqd = pilotReqd,
        _lat = lat,
        _lon = lon,
        _countryCode = countryCode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idSiteOffset = _idSite == null ? null
        : fbBuilder.writeString(_idSite!);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    final int? locodeOffset = _locode == null ? null
        : fbBuilder.writeString(_locode!);
    final int? portNameOffset = _portName == null ? null
        : fbBuilder.writeString(_portName!);
    final int? harborTypeOffset = _harborType == null ? null
        : fbBuilder.writeString(_harborType!);
    final int? shelterOffset = _shelter == null ? null
        : fbBuilder.writeString(_shelter!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(22);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idSiteOffset);
    fbBuilder.addOffset(3, externalIdOffset);
    fbBuilder.addOffset(4, locodeOffset);
    fbBuilder.addOffset(5, portNameOffset);
    fbBuilder.addOffset(6, harborTypeOffset);
    fbBuilder.addFloat64(7, _harborSize);
    fbBuilder.addFloat64(8, _maxDraught);
    fbBuilder.addFloat64(9, _avgDuration);
    fbBuilder.addFloat64(10, _tideRange);
    fbBuilder.addOffset(11, shelterOffset);
    fbBuilder.addBool(12, _pilotReqd);
    fbBuilder.addFloat64(13, _lat);
    fbBuilder.addFloat64(14, _lon);
    fbBuilder.addOffset(15, countryCodeOffset);
    fbBuilder.addOffset(16, createdAtOffset);
    fbBuilder.addOffset(17, createdByOffset);
    fbBuilder.addOffset(18, sourceOffset);
    fbBuilder.addOffset(19, originOffset);
    fbBuilder.addInt8(20, _dataMode?.value);
    fbBuilder.addOffset(21, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
