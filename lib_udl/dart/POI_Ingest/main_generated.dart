// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class PoiIngestDataModeEnum {
  final int value;
  const PoiIngestDataModeEnum._(this.value);

  factory PoiIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum PoiIngestDataModeEnum');
    }
    return result;
  }

  static PoiIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : PoiIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const PoiIngestDataModeEnum REAL = PoiIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const PoiIngestDataModeEnum TEST = PoiIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const PoiIngestDataModeEnum SIMULATED = PoiIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const PoiIngestDataModeEnum EXERCISE = PoiIngestDataModeEnum._(3);
  static const Map<int, PoiIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<PoiIngestDataModeEnum> reader = _PoiIngestDataModeEnumReader();

  @override
  String toString() {
    return 'PoiIngestDataModeEnum{value: $value}';
  }
}

class _PoiIngestDataModeEnumReader extends fb.Reader<PoiIngestDataModeEnum> {
  const _PoiIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  PoiIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      PoiIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).
class PoiIngest {
  PoiIngest._(this._bc, this._bcOffset);
  factory PoiIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PoiIngest> reader = _PoiIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: POI-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).
  ///  Example: /// Example: BDA
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get pps => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional mission ID related to the POI.
  ///  Example: /// Example: MSN-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get msnid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Priority of the  POI target object.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get pri => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.
  ///  Example: /// Example: TRK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trkid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.
  ///  Example: /// Example: ['WEATHER-EVENT-ID1', 'WEATHER-EVENT-ID2']
  ///  Constraints: No constraints specified.
  List<String>? get idWeatherReport => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 16);
  ///  Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.
  ///  Example: /// Example: POI-ID
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get poiid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Name of the POI target object.
  ///  Example: /// Example: POI_NAME
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Description of the POI target object.
  ///  Example: /// Example: Description of the object
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get desc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).
  ///  Example: /// Example: LIGHT_TANK
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get spec => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get ident => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).
  ///  Example: /// Example: SURFACE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get env => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).
  ///  Example: /// Example: COMBAT_VEHICLE
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get plat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.
  ///  Example: /// Example: TRAINING
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get activity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Activity/POI timestamp in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get ts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Start time of event validity (optional), in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get start => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Stale timestamp (optional), in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get stale => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  How the event point was generated, in CoT object heirarchy notation (optional, CoT).
  ///  Example: /// Example: h-g-i-g-o
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get how => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Event type, in CoT object heirarchy notation (optional, CoT).
  ///  Example: /// Example: a-h-G
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Point height above ellipsoid (WGS-84), in meters.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  double get alt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get az => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get el => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Height above lat/lon point, in meters (1-sigma, if representing linear error).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get le => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get ce => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].
  ///  Example: /// Example: [125.5, 85.1, 125.75]
  ///  Constraints: No constraints specified.
  List<String>? get elle => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 58);
  ///  Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
  ///  Example: /// Example: Contact Info
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get cntct => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get conf => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  List of URLs to before/after images of this Point of Interest entity.
  ///  Example: /// Example: ['URL1', 'URL2']
  ///  Constraints: No constraints specified.
  List<String>? get urls => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 64);
  ///  Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  String? get area => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  String? get atext => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: No constraints specified.
  String? get agjson => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Type of region as projected on the ground.
  ///  Example: /// Example: Type1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get atype => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get andims => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 74, 0);
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get asrid => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 76, 0);
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  PoiIngestDataModeEnum get dataMode => PoiIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 86, 0));
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.
  ///  Example: /// Example: ['GROUP1', 'GROUP2']
  ///  Constraints: No constraints specified.
  List<String>? get groups => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 90);
  ///  ID/name of the platform or entity providing the POI data.
  ///  Example: /// Example: PLATFORM_NAME
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get asset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 94);
  ///  Array of UDL record types (GROUNDIMAGE, RFOBS) that are related to the determination of this Point of Interest. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['TYPE1', 'TYPE2']
  ///  Constraints: No constraints specified.
  List<String>? get srcTyps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 96);
  ///  Array of UUIDs of the UDL data records that are related to the determination of this Point of Interest. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size.  See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/rfobservation/{uuid}).
  ///  Example: /// Example: ['ID1', 'ID2']
  ///  Constraints: No constraints specified.
  List<String>? get srcIds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 98);
  ///  The Basic Encyclopedia Number associated with the POI, if applicable.
  ///  Example: /// Example: 0427RT1030
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get beNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get orientation => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);

  @override
  String toString() {
    return 'PoiIngest{id: ${id}, classificationMarking: ${classificationMarking}, pps: ${pps}, msnid: ${msnid}, pri: ${pri}, trkid: ${trkid}, idWeatherReport: ${idWeatherReport}, poiid: ${poiid}, name: ${name}, desc: ${desc}, spec: ${spec}, ident: ${ident}, env: ${env}, plat: ${plat}, activity: ${activity}, ts: ${ts}, start: ${start}, stale: ${stale}, how: ${how}, type: ${type}, lat: ${lat}, lon: ${lon}, alt: ${alt}, az: ${az}, el: ${el}, le: ${le}, ce: ${ce}, elle: ${elle}, cntct: ${cntct}, conf: ${conf}, urls: ${urls}, area: ${area}, atext: ${atext}, agjson: ${agjson}, atype: ${atype}, andims: ${andims}, asrid: ${asrid}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDl: ${sourceDl}, source: ${source}, dataMode: ${dataMode}, origin: ${origin}, groups: ${groups}, asset: ${asset}, tags: ${tags}, srcTyps: ${srcTyps}, srcIds: ${srcIds}, beNumber: ${beNumber}, orientation: ${orientation}, origNetwork: ${origNetwork}, transactionId: ${transactionId}}';
  }
}

class _PoiIngestReader extends fb.TableReader<PoiIngest> {
  const _PoiIngestReader();

  @override
  PoiIngest createObject(fb.BufferContext bc, int offset) => 
    PoiIngest._(bc, offset);
}

class PoiIngestBuilder {
  PoiIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(52);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPpsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMsnidOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addPri(int? pri) {
    fbBuilder.addInt32(4, pri);
    return fbBuilder.offset;
  }
  int addTrkidOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addIdWeatherReportOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addPoiidOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addDescOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addIdentOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addEnvOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addPlatOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addActivityOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addStartOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addStaleOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addHowOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(20, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(21, lon);
    return fbBuilder.offset;
  }
  int addAlt(double? alt) {
    fbBuilder.addFloat64(22, alt);
    return fbBuilder.offset;
  }
  int addAz(double? az) {
    fbBuilder.addFloat64(23, az);
    return fbBuilder.offset;
  }
  int addEl(double? el) {
    fbBuilder.addFloat64(24, el);
    return fbBuilder.offset;
  }
  int addLe(double? le) {
    fbBuilder.addFloat64(25, le);
    return fbBuilder.offset;
  }
  int addCe(double? ce) {
    fbBuilder.addFloat64(26, ce);
    return fbBuilder.offset;
  }
  int addElleOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addCntctOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addConf(double? conf) {
    fbBuilder.addFloat64(29, conf);
    return fbBuilder.offset;
  }
  int addUrlsOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addAreaOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addAtextOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addAgjsonOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addAtypeOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addAndims(int? andims) {
    fbBuilder.addInt32(35, andims);
    return fbBuilder.offset;
  }
  int addAsrid(int? asrid) {
    fbBuilder.addInt32(36, asrid);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addDataMode(PoiIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(41, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addGroupsOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addAssetOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addSrcTypsOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addSrcIdsOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addBeNumberOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addOrientation(double? orientation) {
    fbBuilder.addFloat64(49, orientation);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PoiIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _pps;
  final String? _msnid;
  final int? _pri;
  final String? _trkid;
  final List<String>? _idWeatherReport;
  final String? _poiid;
  final String? _name;
  final String? _desc;
  final String? _spec;
  final String? _ident;
  final String? _env;
  final String? _plat;
  final String? _activity;
  final String? _ts;
  final String? _start;
  final String? _stale;
  final String? _how;
  final String? _type;
  final double? _lat;
  final double? _lon;
  final double? _alt;
  final double? _az;
  final double? _el;
  final double? _le;
  final double? _ce;
  final List<String>? _elle;
  final String? _cntct;
  final double? _conf;
  final List<String>? _urls;
  final String? _area;
  final String? _atext;
  final String? _agjson;
  final String? _atype;
  final int? _andims;
  final int? _asrid;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final PoiIngestDataModeEnum? _dataMode;
  final String? _origin;
  final List<String>? _groups;
  final String? _asset;
  final List<String>? _tags;
  final List<String>? _srcTyps;
  final List<String>? _srcIds;
  final String? _beNumber;
  final double? _orientation;
  final String? _origNetwork;
  final String? _transactionId;

  PoiIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? pps,
    String? msnid,
    int? pri,
    String? trkid,
    List<String>? idWeatherReport,
    String? poiid,
    String? name,
    String? desc,
    String? spec,
    String? ident,
    String? env,
    String? plat,
    String? activity,
    String? ts,
    String? start,
    String? stale,
    String? how,
    String? type,
    double? lat,
    double? lon,
    double? alt,
    double? az,
    double? el,
    double? le,
    double? ce,
    List<String>? elle,
    String? cntct,
    double? conf,
    List<String>? urls,
    String? area,
    String? atext,
    String? agjson,
    String? atype,
    int? andims,
    int? asrid,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    PoiIngestDataModeEnum? dataMode,
    String? origin,
    List<String>? groups,
    String? asset,
    List<String>? tags,
    List<String>? srcTyps,
    List<String>? srcIds,
    String? beNumber,
    double? orientation,
    String? origNetwork,
    String? transactionId,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _pps = pps,
        _msnid = msnid,
        _pri = pri,
        _trkid = trkid,
        _idWeatherReport = idWeatherReport,
        _poiid = poiid,
        _name = name,
        _desc = desc,
        _spec = spec,
        _ident = ident,
        _env = env,
        _plat = plat,
        _activity = activity,
        _ts = ts,
        _start = start,
        _stale = stale,
        _how = how,
        _type = type,
        _lat = lat,
        _lon = lon,
        _alt = alt,
        _az = az,
        _el = el,
        _le = le,
        _ce = ce,
        _elle = elle,
        _cntct = cntct,
        _conf = conf,
        _urls = urls,
        _area = area,
        _atext = atext,
        _agjson = agjson,
        _atype = atype,
        _andims = andims,
        _asrid = asrid,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _dataMode = dataMode,
        _origin = origin,
        _groups = groups,
        _asset = asset,
        _tags = tags,
        _srcTyps = srcTyps,
        _srcIds = srcIds,
        _beNumber = beNumber,
        _orientation = orientation,
        _origNetwork = origNetwork,
        _transactionId = transactionId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? ppsOffset = _pps == null ? null
        : fbBuilder.writeString(_pps!);
    final int? msnidOffset = _msnid == null ? null
        : fbBuilder.writeString(_msnid!);
    final int? trkidOffset = _trkid == null ? null
        : fbBuilder.writeString(_trkid!);
    final int? idWeatherReportOffset = _idWeatherReport == null ? null
        : fbBuilder.writeList(_idWeatherReport!.map(fbBuilder.writeString).toList());
    final int? poiidOffset = _poiid == null ? null
        : fbBuilder.writeString(_poiid!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? descOffset = _desc == null ? null
        : fbBuilder.writeString(_desc!);
    final int? specOffset = _spec == null ? null
        : fbBuilder.writeString(_spec!);
    final int? identOffset = _ident == null ? null
        : fbBuilder.writeString(_ident!);
    final int? envOffset = _env == null ? null
        : fbBuilder.writeString(_env!);
    final int? platOffset = _plat == null ? null
        : fbBuilder.writeString(_plat!);
    final int? activityOffset = _activity == null ? null
        : fbBuilder.writeString(_activity!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeString(_ts!);
    final int? startOffset = _start == null ? null
        : fbBuilder.writeString(_start!);
    final int? staleOffset = _stale == null ? null
        : fbBuilder.writeString(_stale!);
    final int? howOffset = _how == null ? null
        : fbBuilder.writeString(_how!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? elleOffset = _elle == null ? null
        : fbBuilder.writeList(_elle!.map(fbBuilder.writeString).toList());
    final int? cntctOffset = _cntct == null ? null
        : fbBuilder.writeString(_cntct!);
    final int? urlsOffset = _urls == null ? null
        : fbBuilder.writeList(_urls!.map(fbBuilder.writeString).toList());
    final int? areaOffset = _area == null ? null
        : fbBuilder.writeString(_area!);
    final int? atextOffset = _atext == null ? null
        : fbBuilder.writeString(_atext!);
    final int? agjsonOffset = _agjson == null ? null
        : fbBuilder.writeString(_agjson!);
    final int? atypeOffset = _atype == null ? null
        : fbBuilder.writeString(_atype!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? groupsOffset = _groups == null ? null
        : fbBuilder.writeList(_groups!.map(fbBuilder.writeString).toList());
    final int? assetOffset = _asset == null ? null
        : fbBuilder.writeString(_asset!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? srcTypsOffset = _srcTyps == null ? null
        : fbBuilder.writeList(_srcTyps!.map(fbBuilder.writeString).toList());
    final int? srcIdsOffset = _srcIds == null ? null
        : fbBuilder.writeList(_srcIds!.map(fbBuilder.writeString).toList());
    final int? beNumberOffset = _beNumber == null ? null
        : fbBuilder.writeString(_beNumber!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    fbBuilder.startTable(52);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, ppsOffset);
    fbBuilder.addOffset(3, msnidOffset);
    fbBuilder.addInt32(4, _pri);
    fbBuilder.addOffset(5, trkidOffset);
    fbBuilder.addOffset(6, idWeatherReportOffset);
    fbBuilder.addOffset(7, poiidOffset);
    fbBuilder.addOffset(8, nameOffset);
    fbBuilder.addOffset(9, descOffset);
    fbBuilder.addOffset(10, specOffset);
    fbBuilder.addOffset(11, identOffset);
    fbBuilder.addOffset(12, envOffset);
    fbBuilder.addOffset(13, platOffset);
    fbBuilder.addOffset(14, activityOffset);
    fbBuilder.addOffset(15, tsOffset);
    fbBuilder.addOffset(16, startOffset);
    fbBuilder.addOffset(17, staleOffset);
    fbBuilder.addOffset(18, howOffset);
    fbBuilder.addOffset(19, typeOffset);
    fbBuilder.addFloat64(20, _lat);
    fbBuilder.addFloat64(21, _lon);
    fbBuilder.addFloat64(22, _alt);
    fbBuilder.addFloat64(23, _az);
    fbBuilder.addFloat64(24, _el);
    fbBuilder.addFloat64(25, _le);
    fbBuilder.addFloat64(26, _ce);
    fbBuilder.addOffset(27, elleOffset);
    fbBuilder.addOffset(28, cntctOffset);
    fbBuilder.addFloat64(29, _conf);
    fbBuilder.addOffset(30, urlsOffset);
    fbBuilder.addOffset(31, areaOffset);
    fbBuilder.addOffset(32, atextOffset);
    fbBuilder.addOffset(33, agjsonOffset);
    fbBuilder.addOffset(34, atypeOffset);
    fbBuilder.addInt32(35, _andims);
    fbBuilder.addInt32(36, _asrid);
    fbBuilder.addOffset(37, createdAtOffset);
    fbBuilder.addOffset(38, createdByOffset);
    fbBuilder.addOffset(39, sourceDlOffset);
    fbBuilder.addOffset(40, sourceOffset);
    fbBuilder.addInt8(41, _dataMode?.value);
    fbBuilder.addOffset(42, originOffset);
    fbBuilder.addOffset(43, groupsOffset);
    fbBuilder.addOffset(44, assetOffset);
    fbBuilder.addOffset(45, tagsOffset);
    fbBuilder.addOffset(46, srcTypsOffset);
    fbBuilder.addOffset(47, srcIdsOffset);
    fbBuilder.addOffset(48, beNumberOffset);
    fbBuilder.addFloat64(49, _orientation);
    fbBuilder.addOffset(50, origNetworkOffset);
    fbBuilder.addOffset(51, transactionIdOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
