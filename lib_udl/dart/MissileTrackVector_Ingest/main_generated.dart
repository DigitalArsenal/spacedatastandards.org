// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Schema for Missile Track Vector data.
class MissileTrackVectorIngest {
  MissileTrackVectorIngest._(this._bc, this._bcOffset);
  factory MissileTrackVectorIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MissileTrackVectorIngest> reader = _MissileTrackVectorIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Type of vector represented (e.g. LOS, PREDICTED, STATE).
  ///  Example: /// Example: STATE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Object to which this vector applies.
  ///  Example: /// Example: TARGET
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get object => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Vector timestamp in ISO8601 UTC format, with microsecond precision.
  ///  Example: /// Example: 2024-03-30T15:02:39.346768Z
  ///  Constraints: No constraints specified.
  String? get epoch => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the reporting sensor of the object.
  ///  Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Optional identifier provided by the source to indicate the reporting sensor of the object. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 46
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Three element array, expressing the cartesian position vector of the target object, in kilometers, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x, y, z].
  ///  Example: /// Example: [-1456.91592, -2883.54041, 6165.55186]
  ///  Constraints: No constraints specified.
  List<String>? get pos => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);
  ///  Three element array, expressing the cartesian velocity vector of the target object, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x', y', z'].
  ///  Example: /// Example: [-1.21981, -6.60208, -3.36515]
  ///  Constraints: No constraints specified.
  List<String>? get vel => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 16);
  ///  Three element array, expressing the cartesian acceleration vector of the target object, in kilometers/second^2, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x'', y'', z''].
  ///  Example: /// Example: [0.59236, -0.03537, 0.35675]
  ///  Constraints: No constraints specified.
  List<String>? get accel => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 18);
  ///  Track object course, in degrees clockwise from true north.
  ///  Example: /// Example: 7.3580153
  ///  Constraints: No constraints specified.
  double get course => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Track object speed, in kilometers/sec.
  ///  Example: /// Example: 15.03443
  ///  Constraints: No constraints specified.
  double get spd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  The reference frame of the cartesian vector (ECEF, J2000). If the referenceFrame is null it is assumed to be ECEF.
  ///  Example: /// Example: ECEF
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get referenceFrame => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.
  ///  If the covReferenceFrame is null it is assumed to be UVW. The array values (1-45) represent the upper triangular half of the position-velocity-acceleration covariance matrix.
  ///  The covariance elements are position dependent within the array with values ordered as follows:
  ///  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x"&nbsp;&nbsp;&nbsp;&nbsp;y"&nbsp;&nbsp;&nbsp;&nbsp;z"
  ///  x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9
  ///  y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp;&nbsp;14&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;&nbsp;17
  ///  z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;18&nbsp;&nbsp;&nbsp;19&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;&nbsp;23&nbsp;&nbsp;&nbsp;24
  ///  x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;&nbsp;30
  ///  y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;31&nbsp;&nbsp;&nbsp;32&nbsp;&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;35
  ///  z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;&nbsp;38&nbsp;&nbsp;&nbsp;39
  ///  x"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;40&nbsp;&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42
  ///  y"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;44
  ///  z"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45
  ///  The cov array should contain only the upper right triangle values from top left down to bottom right, in order.
  ///  Example: /// Example: [1.1, 2.2, 3.3]
  ///  Constraints: No constraints specified.
  List<String>? get cov => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 26);
  ///  The reference frame of the covariance elements (ECEF, J2000, UVW). If the referenceFrame is null it is assumed to be UVW.
  ///  Example: /// Example: ECEF
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get covReferenceFrame => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  WGS-84 object latitude subpoint at epoch, represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.0
  ///  Constraints: No constraints specified.
  double get vectorLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  WGS-84 object longitude subpoint at epoch, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 150.0
  ///  Constraints: No constraints specified.
  double get vectorLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Object altitude at epoch, expressed in kilometers above WGS-84 ellipsoid.
  ///  Example: /// Example: 25.0
  ///  Constraints: No constraints specified.
  double get vectorAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Confidence of the vector, 0-100.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  int get confidence => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 36, 0);
  ///  Status of the vector (e.g. INITIAL, UPDATE).
  ///  Example: /// Example: INITIAL
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Source of the time value.
  ///  Example: /// Example: Sensor 1
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get timeSource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The quaternion describing the attitude of the spacecraft with respect to the reference frame listed in the 'referenceFrame' field. The array element order convention is the three vector components, followed by the scalar component.
  ///  Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  ///  Constraints: No constraints specified.
  List<String>? get quat => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  The flight azimuth associated with the current state vector (0-360 degrees).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get flightAz => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);

  @override
  String toString() {
    return 'MissileTrackVectorIngest{type: ${type}, object: ${object}, epoch: ${epoch}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, pos: ${pos}, vel: ${vel}, accel: ${accel}, course: ${course}, spd: ${spd}, referenceFrame: ${referenceFrame}, cov: ${cov}, covReferenceFrame: ${covReferenceFrame}, vectorLat: ${vectorLat}, vectorLon: ${vectorLon}, vectorAlt: ${vectorAlt}, confidence: ${confidence}, status: ${status}, timeSource: ${timeSource}, quat: ${quat}, flightAz: ${flightAz}}';
  }
}

class _MissileTrackVectorIngestReader extends fb.TableReader<MissileTrackVectorIngest> {
  const _MissileTrackVectorIngestReader();

  @override
  MissileTrackVectorIngest createObject(fb.BufferContext bc, int offset) => 
    MissileTrackVectorIngest._(bc, offset);
}

class MissileTrackVectorIngestBuilder {
  MissileTrackVectorIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(21);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addObjectOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEpochOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPosOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addVelOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addAccelOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addCourse(double? course) {
    fbBuilder.addFloat64(8, course);
    return fbBuilder.offset;
  }
  int addSpd(double? spd) {
    fbBuilder.addFloat64(9, spd);
    return fbBuilder.offset;
  }
  int addReferenceFrameOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addCovOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCovReferenceFrameOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addVectorLat(double? vectorLat) {
    fbBuilder.addFloat64(13, vectorLat);
    return fbBuilder.offset;
  }
  int addVectorLon(double? vectorLon) {
    fbBuilder.addFloat64(14, vectorLon);
    return fbBuilder.offset;
  }
  int addVectorAlt(double? vectorAlt) {
    fbBuilder.addFloat64(15, vectorAlt);
    return fbBuilder.offset;
  }
  int addConfidence(int? confidence) {
    fbBuilder.addInt32(16, confidence);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addTimeSourceOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addQuatOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addFlightAz(double? flightAz) {
    fbBuilder.addFloat64(20, flightAz);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MissileTrackVectorIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _object;
  final String? _epoch;
  final String? _idSensor;
  final String? _origSensorId;
  final List<String>? _pos;
  final List<String>? _vel;
  final List<String>? _accel;
  final double? _course;
  final double? _spd;
  final String? _referenceFrame;
  final List<String>? _cov;
  final String? _covReferenceFrame;
  final double? _vectorLat;
  final double? _vectorLon;
  final double? _vectorAlt;
  final int? _confidence;
  final String? _status;
  final String? _timeSource;
  final List<String>? _quat;
  final double? _flightAz;

  MissileTrackVectorIngestObjectBuilder({
    String? type,
    String? object,
    String? epoch,
    String? idSensor,
    String? origSensorId,
    List<String>? pos,
    List<String>? vel,
    List<String>? accel,
    double? course,
    double? spd,
    String? referenceFrame,
    List<String>? cov,
    String? covReferenceFrame,
    double? vectorLat,
    double? vectorLon,
    double? vectorAlt,
    int? confidence,
    String? status,
    String? timeSource,
    List<String>? quat,
    double? flightAz,
  })
      : _type = type,
        _object = object,
        _epoch = epoch,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _pos = pos,
        _vel = vel,
        _accel = accel,
        _course = course,
        _spd = spd,
        _referenceFrame = referenceFrame,
        _cov = cov,
        _covReferenceFrame = covReferenceFrame,
        _vectorLat = vectorLat,
        _vectorLon = vectorLon,
        _vectorAlt = vectorAlt,
        _confidence = confidence,
        _status = status,
        _timeSource = timeSource,
        _quat = quat,
        _flightAz = flightAz;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? objectOffset = _object == null ? null
        : fbBuilder.writeString(_object!);
    final int? epochOffset = _epoch == null ? null
        : fbBuilder.writeString(_epoch!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? posOffset = _pos == null ? null
        : fbBuilder.writeList(_pos!.map(fbBuilder.writeString).toList());
    final int? velOffset = _vel == null ? null
        : fbBuilder.writeList(_vel!.map(fbBuilder.writeString).toList());
    final int? accelOffset = _accel == null ? null
        : fbBuilder.writeList(_accel!.map(fbBuilder.writeString).toList());
    final int? referenceFrameOffset = _referenceFrame == null ? null
        : fbBuilder.writeString(_referenceFrame!);
    final int? covOffset = _cov == null ? null
        : fbBuilder.writeList(_cov!.map(fbBuilder.writeString).toList());
    final int? covReferenceFrameOffset = _covReferenceFrame == null ? null
        : fbBuilder.writeString(_covReferenceFrame!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? timeSourceOffset = _timeSource == null ? null
        : fbBuilder.writeString(_timeSource!);
    final int? quatOffset = _quat == null ? null
        : fbBuilder.writeList(_quat!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(21);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, objectOffset);
    fbBuilder.addOffset(2, epochOffset);
    fbBuilder.addOffset(3, idSensorOffset);
    fbBuilder.addOffset(4, origSensorIdOffset);
    fbBuilder.addOffset(5, posOffset);
    fbBuilder.addOffset(6, velOffset);
    fbBuilder.addOffset(7, accelOffset);
    fbBuilder.addFloat64(8, _course);
    fbBuilder.addFloat64(9, _spd);
    fbBuilder.addOffset(10, referenceFrameOffset);
    fbBuilder.addOffset(11, covOffset);
    fbBuilder.addOffset(12, covReferenceFrameOffset);
    fbBuilder.addFloat64(13, _vectorLat);
    fbBuilder.addFloat64(14, _vectorLon);
    fbBuilder.addFloat64(15, _vectorAlt);
    fbBuilder.addInt32(16, _confidence);
    fbBuilder.addOffset(17, statusOffset);
    fbBuilder.addOffset(18, timeSourceOffset);
    fbBuilder.addOffset(19, quatOffset);
    fbBuilder.addFloat64(20, _flightAz);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
