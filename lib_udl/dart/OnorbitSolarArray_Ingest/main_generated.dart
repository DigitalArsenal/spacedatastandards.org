// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class OnorbitSolarArrayIngestDataModeEnum {
  final int value;
  const OnorbitSolarArrayIngestDataModeEnum._(this.value);

  factory OnorbitSolarArrayIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OnorbitSolarArrayIngestDataModeEnum');
    }
    return result;
  }

  static OnorbitSolarArrayIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : OnorbitSolarArrayIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const OnorbitSolarArrayIngestDataModeEnum REAL = OnorbitSolarArrayIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const OnorbitSolarArrayIngestDataModeEnum TEST = OnorbitSolarArrayIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const OnorbitSolarArrayIngestDataModeEnum SIMULATED = OnorbitSolarArrayIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const OnorbitSolarArrayIngestDataModeEnum EXERCISE = OnorbitSolarArrayIngestDataModeEnum._(3);
  static const Map<int, OnorbitSolarArrayIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<OnorbitSolarArrayIngestDataModeEnum> reader = _OnorbitSolarArrayIngestDataModeEnumReader();

  @override
  String toString() {
    return 'OnorbitSolarArrayIngestDataModeEnum{value: $value}';
  }
}

class _OnorbitSolarArrayIngestDataModeEnumReader extends fb.Reader<OnorbitSolarArrayIngestDataModeEnum> {
  const _OnorbitSolarArrayIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  OnorbitSolarArrayIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      OnorbitSolarArrayIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// No description available.
class OnorbitSolarArrayIngest {
  OnorbitSolarArrayIngest._(this._bc, this._bcOffset);
  factory OnorbitSolarArrayIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OnorbitSolarArrayIngest> reader = _OnorbitSolarArrayIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ONORBITSOLARARRAY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  ID of the on-orbit object.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  ID of the SolarArray.
  ///  Example: /// Example: SOLARARRAY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idSolarArray => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The number of solar arrays on the spacecraft of the type identified by idSolarArray.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get quantity => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  OnorbitSolarArrayIngestDataModeEnum get dataMode => OnorbitSolarArrayIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 22, 0));
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get solarArray => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);

  @override
  String toString() {
    return 'OnorbitSolarArrayIngest{id: ${id}, idOnOrbit: ${idOnOrbit}, idSolarArray: ${idSolarArray}, classificationMarking: ${classificationMarking}, quantity: ${quantity}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, solarArray: ${solarArray}, origNetwork: ${origNetwork}}';
  }
}

class _OnorbitSolarArrayIngestReader extends fb.TableReader<OnorbitSolarArrayIngest> {
  const _OnorbitSolarArrayIngestReader();

  @override
  OnorbitSolarArrayIngest createObject(fb.BufferContext bc, int offset) => 
    OnorbitSolarArrayIngest._(bc, offset);
}

class OnorbitSolarArrayIngestBuilder {
  OnorbitSolarArrayIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdSolarArrayOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addQuantity(int? quantity) {
    fbBuilder.addInt32(4, quantity);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addDataMode(OnorbitSolarArrayIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(9, dataMode?.value);
    return fbBuilder.offset;
  }
  int addSolarArrayOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OnorbitSolarArrayIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idOnOrbit;
  final String? _idSolarArray;
  final String? _classificationMarking;
  final int? _quantity;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final OnorbitSolarArrayIngestDataModeEnum? _dataMode;
  final String? _solarArray;
  final String? _origNetwork;

  OnorbitSolarArrayIngestObjectBuilder({
    String? id,
    String? idOnOrbit,
    String? idSolarArray,
    String? classificationMarking,
    int? quantity,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    OnorbitSolarArrayIngestDataModeEnum? dataMode,
    String? solarArray,
    String? origNetwork,
  })
      : _id = id,
        _idOnOrbit = idOnOrbit,
        _idSolarArray = idSolarArray,
        _classificationMarking = classificationMarking,
        _quantity = quantity,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _solarArray = solarArray,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? idSolarArrayOffset = _idSolarArray == null ? null
        : fbBuilder.writeString(_idSolarArray!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? solarArrayOffset = _solarArray == null ? null
        : fbBuilder.writeString(_solarArray!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(12);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idOnOrbitOffset);
    fbBuilder.addOffset(2, idSolarArrayOffset);
    fbBuilder.addOffset(3, classificationMarkingOffset);
    fbBuilder.addInt32(4, _quantity);
    fbBuilder.addOffset(5, createdAtOffset);
    fbBuilder.addOffset(6, createdByOffset);
    fbBuilder.addOffset(7, sourceOffset);
    fbBuilder.addOffset(8, originOffset);
    fbBuilder.addInt8(9, _dataMode?.value);
    fbBuilder.addOffset(10, solarArrayOffset);
    fbBuilder.addOffset(11, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
