// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class TrackSensorFullSensorFovtypeEnum {
  final int value;
  const TrackSensorFullSensorFovtypeEnum._(this.value);

  factory TrackSensorFullSensorFovtypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum TrackSensorFullSensorFovtypeEnum');
    }
    return result;
  }

  static TrackSensorFullSensorFovtypeEnum? _createOrNull(int? value) => 
      value == null ? null : TrackSensorFullSensorFovtypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const TrackSensorFullSensorFovtypeEnum BUTTERFLY = TrackSensorFullSensorFovtypeEnum._(0);

  ///  No description available.
  static const TrackSensorFullSensorFovtypeEnum CONE_ANGULAR = TrackSensorFullSensorFovtypeEnum._(1);

  ///  No description available.
  static const TrackSensorFullSensorFovtypeEnum CONE_DISTANCE = TrackSensorFullSensorFovtypeEnum._(2);

  ///  No description available.
  static const TrackSensorFullSensorFovtypeEnum HORIZON_TO_HORIZON = TrackSensorFullSensorFovtypeEnum._(3);

  ///  No description available.
  static const TrackSensorFullSensorFovtypeEnum UNKNOWN = TrackSensorFullSensorFovtypeEnum._(4);
  static const Map<int, TrackSensorFullSensorFovtypeEnum> values = {
    0: BUTTERFLY,
    1: CONE_ANGULAR,
    2: CONE_DISTANCE,
    3: HORIZON_TO_HORIZON,
    4: UNKNOWN};

  static const fb.Reader<TrackSensorFullSensorFovtypeEnum> reader = _TrackSensorFullSensorFovtypeEnumReader();

  @override
  String toString() {
    return 'TrackSensorFullSensorFovtypeEnum{value: $value}';
  }
}

class _TrackSensorFullSensorFovtypeEnumReader extends fb.Reader<TrackSensorFullSensorFovtypeEnum> {
  const _TrackSensorFullSensorFovtypeEnumReader();

  @override
  int get size => 1;

  @override
  TrackSensorFullSensorFovtypeEnum read(fb.BufferContext bc, int offset) =>
      TrackSensorFullSensorFovtypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Schema for Track Sensor data.
class TrackSensorFull {
  TrackSensorFull._(this._bc, this._bcOffset);
  factory TrackSensorFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TrackSensorFull> reader = _TrackSensorFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The track object range from the observing sensor, in kilometers.
  ///  Example: /// Example: 4023.95
  ///  Constraints: No constraints specified.
  double get range => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 4, 0.0);
  ///  The observing sensor azimuth angle, in degrees and topocentric frame.
  ///  Example: /// Example: 90
  ///  Constraints: No constraints specified.
  double get az => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
  ///  Example: /// Example: 1234
  ///  Constraints: No constraints specified.
  int get sensorNumber => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  Unique name of this sensor.
  ///  Example: /// Example: SENSOR_NAME
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get sensorName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The mission number which produced this track observation.
  ///  Example: /// Example: Example Mission
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get missionNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Minimum range measurement capability of the sensor, in kilometers.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get minRangeLimit => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  The field of view (FOV) type (Butterfly, Cone Angular, Cone Distance, Horizon to Horizon, Unknown) employed by the sensor observing this object.
  ///  Example: /// Example: UNKNOWN
  ///  Constraints: Minimum length = 0, Maximum length = 24
  TrackSensorFullSensorFovtypeEnum get sensorFovtype => TrackSensorFullSensorFovtypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 16, 0));

  @override
  String toString() {
    return 'TrackSensorFull{range: ${range}, az: ${az}, sensorNumber: ${sensorNumber}, sensorName: ${sensorName}, missionNumber: ${missionNumber}, minRangeLimit: ${minRangeLimit}, sensorFovtype: ${sensorFovtype}}';
  }
}

class _TrackSensorFullReader extends fb.TableReader<TrackSensorFull> {
  const _TrackSensorFullReader();

  @override
  TrackSensorFull createObject(fb.BufferContext bc, int offset) => 
    TrackSensorFull._(bc, offset);
}

class TrackSensorFullBuilder {
  TrackSensorFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addRange(double? range) {
    fbBuilder.addFloat64(0, range);
    return fbBuilder.offset;
  }
  int addAz(double? az) {
    fbBuilder.addFloat64(1, az);
    return fbBuilder.offset;
  }
  int addSensorNumber(int? sensorNumber) {
    fbBuilder.addInt32(2, sensorNumber);
    return fbBuilder.offset;
  }
  int addSensorNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMissionNumberOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMinRangeLimit(double? minRangeLimit) {
    fbBuilder.addFloat64(5, minRangeLimit);
    return fbBuilder.offset;
  }
  int addSensorFovtype(TrackSensorFullSensorFovtypeEnum? sensorFovtype) {
    fbBuilder.addInt8(6, sensorFovtype?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TrackSensorFullObjectBuilder extends fb.ObjectBuilder {
  final double? _range;
  final double? _az;
  final int? _sensorNumber;
  final String? _sensorName;
  final String? _missionNumber;
  final double? _minRangeLimit;
  final TrackSensorFullSensorFovtypeEnum? _sensorFovtype;

  TrackSensorFullObjectBuilder({
    double? range,
    double? az,
    int? sensorNumber,
    String? sensorName,
    String? missionNumber,
    double? minRangeLimit,
    TrackSensorFullSensorFovtypeEnum? sensorFovtype,
  })
      : _range = range,
        _az = az,
        _sensorNumber = sensorNumber,
        _sensorName = sensorName,
        _missionNumber = missionNumber,
        _minRangeLimit = minRangeLimit,
        _sensorFovtype = sensorFovtype;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? sensorNameOffset = _sensorName == null ? null
        : fbBuilder.writeString(_sensorName!);
    final int? missionNumberOffset = _missionNumber == null ? null
        : fbBuilder.writeString(_missionNumber!);
    fbBuilder.startTable(7);
    fbBuilder.addFloat64(0, _range);
    fbBuilder.addFloat64(1, _az);
    fbBuilder.addInt32(2, _sensorNumber);
    fbBuilder.addOffset(3, sensorNameOffset);
    fbBuilder.addOffset(4, missionNumberOffset);
    fbBuilder.addFloat64(5, _minRangeLimit);
    fbBuilder.addInt8(6, _sensorFovtype?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
