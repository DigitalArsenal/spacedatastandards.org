// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class DiffOfArrivalIngestDataModeEnum {
  final int value;
  const DiffOfArrivalIngestDataModeEnum._(this.value);

  factory DiffOfArrivalIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum DiffOfArrivalIngestDataModeEnum');
    }
    return result;
  }

  static DiffOfArrivalIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : DiffOfArrivalIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const DiffOfArrivalIngestDataModeEnum REAL = DiffOfArrivalIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const DiffOfArrivalIngestDataModeEnum TEST = DiffOfArrivalIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const DiffOfArrivalIngestDataModeEnum SIMULATED = DiffOfArrivalIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const DiffOfArrivalIngestDataModeEnum EXERCISE = DiffOfArrivalIngestDataModeEnum._(3);
  static const Map<int, DiffOfArrivalIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<DiffOfArrivalIngestDataModeEnum> reader = _DiffOfArrivalIngestDataModeEnumReader();

  @override
  String toString() {
    return 'DiffOfArrivalIngestDataModeEnum{value: $value}';
  }
}

class _DiffOfArrivalIngestDataModeEnumReader extends fb.Reader<DiffOfArrivalIngestDataModeEnum> {
  const _DiffOfArrivalIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  DiffOfArrivalIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      DiffOfArrivalIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.
class DiffOfArrivalIngest {
  DiffOfArrivalIngest._(this._bc, this._bcOffset);
  factory DiffOfArrivalIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DiffOfArrivalIngest> reader = _DiffOfArrivalIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: DIFFOFARRIVAL-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Ob detection time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get obTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the target on-orbit object, if correlated.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Sensor ID of the primary/1st sensor used for this measurement.
  ///  Example: /// Example: SENSOR1-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Sensor ID of the secondary/2nd sensor used for this measurement.
  ///  Example: /// Example: SENSOR2-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Catalog number of the target on-orbit object.
  ///  Example: /// Example: 25544
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  Optional identifier to indicate the specific tasking which produced this observation.
  ///  Example: /// Example: TASK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get taskId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR1-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR2-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get uct => const fb.BoolReader().vTableGet(_bc, _bcOffset, 26, false);
  ///  The signal arrival delay relative to sensor 1 in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get sensor1Delay => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  The signal arrival delay relative to sensor 2 in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get sensor2Delay => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  double get senlat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 120.1
  ///  Constraints: No constraints specified.
  double get senlon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senalt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get sen2lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get sen2lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get sen2alt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Center frequency of the collect in Hz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get frequency => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Bandwidth of the signal in Hz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get bandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get deltaRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  One sigma uncertainty in delta range, in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get deltaRangeUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get deltaRangeRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  One sigma uncertainty in the delta range rate, in km/sec.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get deltaRangeRateUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Signal to noise ratio, in dB.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get snr => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get tdoa => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get tdoaUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get fdoa => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get fdoaUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
  ///  Example: /// Example: SURVEY
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get collectionMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: No example provided.
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  DiffOfArrivalIngestDataModeEnum get dataMode => DiffOfArrivalIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 72, 0));
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 74);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: Example descriptor
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get descriptor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);

  @override
  String toString() {
    return 'DiffOfArrivalIngest{id: ${id}, classificationMarking: ${classificationMarking}, obTime: ${obTime}, idOnOrbit: ${idOnOrbit}, idSensor1: ${idSensor1}, idSensor2: ${idSensor2}, satNo: ${satNo}, taskId: ${taskId}, origObjectId: ${origObjectId}, origSensorId1: ${origSensorId1}, origSensorId2: ${origSensorId2}, uct: ${uct}, sensor1Delay: ${sensor1Delay}, sensor2Delay: ${sensor2Delay}, senlat: ${senlat}, senlon: ${senlon}, senalt: ${senalt}, sen2lat: ${sen2lat}, sen2lon: ${sen2lon}, sen2alt: ${sen2alt}, frequency: ${frequency}, bandwidth: ${bandwidth}, deltaRange: ${deltaRange}, deltaRangeUnc: ${deltaRangeUnc}, deltaRangeRate: ${deltaRangeRate}, deltaRangeRateUnc: ${deltaRangeRateUnc}, snr: ${snr}, tdoa: ${tdoa}, tdoaUnc: ${tdoaUnc}, fdoa: ${fdoa}, fdoaUnc: ${fdoaUnc}, collectionMode: ${collectionMode}, rawFileUri: ${rawFileUri}, source: ${source}, dataMode: ${dataMode}, tags: ${tags}, origin: ${origin}, createdAt: ${createdAt}, createdBy: ${createdBy}, descriptor: ${descriptor}, transactionId: ${transactionId}, origNetwork: ${origNetwork}, sourceDl: ${sourceDl}}';
  }
}

class _DiffOfArrivalIngestReader extends fb.TableReader<DiffOfArrivalIngest> {
  const _DiffOfArrivalIngestReader();

  @override
  DiffOfArrivalIngest createObject(fb.BufferContext bc, int offset) => 
    DiffOfArrivalIngest._(bc, offset);
}

class DiffOfArrivalIngestBuilder {
  DiffOfArrivalIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(43);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addObTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIdSensor1Offset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdSensor2Offset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(6, satNo);
    return fbBuilder.offset;
  }
  int addTaskIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorId1Offset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorId2Offset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addUct(bool? uct) {
    fbBuilder.addBool(11, uct);
    return fbBuilder.offset;
  }
  int addSensor1Delay(double? sensor1Delay) {
    fbBuilder.addFloat64(12, sensor1Delay);
    return fbBuilder.offset;
  }
  int addSensor2Delay(double? sensor2Delay) {
    fbBuilder.addFloat64(13, sensor2Delay);
    return fbBuilder.offset;
  }
  int addSenlat(double? senlat) {
    fbBuilder.addFloat64(14, senlat);
    return fbBuilder.offset;
  }
  int addSenlon(double? senlon) {
    fbBuilder.addFloat64(15, senlon);
    return fbBuilder.offset;
  }
  int addSenalt(double? senalt) {
    fbBuilder.addFloat64(16, senalt);
    return fbBuilder.offset;
  }
  int addSen2lat(double? sen2lat) {
    fbBuilder.addFloat64(17, sen2lat);
    return fbBuilder.offset;
  }
  int addSen2lon(double? sen2lon) {
    fbBuilder.addFloat64(18, sen2lon);
    return fbBuilder.offset;
  }
  int addSen2alt(double? sen2alt) {
    fbBuilder.addFloat64(19, sen2alt);
    return fbBuilder.offset;
  }
  int addFrequency(double? frequency) {
    fbBuilder.addFloat64(20, frequency);
    return fbBuilder.offset;
  }
  int addBandwidth(double? bandwidth) {
    fbBuilder.addFloat64(21, bandwidth);
    return fbBuilder.offset;
  }
  int addDeltaRange(double? deltaRange) {
    fbBuilder.addFloat64(22, deltaRange);
    return fbBuilder.offset;
  }
  int addDeltaRangeUnc(double? deltaRangeUnc) {
    fbBuilder.addFloat64(23, deltaRangeUnc);
    return fbBuilder.offset;
  }
  int addDeltaRangeRate(double? deltaRangeRate) {
    fbBuilder.addFloat64(24, deltaRangeRate);
    return fbBuilder.offset;
  }
  int addDeltaRangeRateUnc(double? deltaRangeRateUnc) {
    fbBuilder.addFloat64(25, deltaRangeRateUnc);
    return fbBuilder.offset;
  }
  int addSnr(double? snr) {
    fbBuilder.addFloat64(26, snr);
    return fbBuilder.offset;
  }
  int addTdoa(double? tdoa) {
    fbBuilder.addFloat64(27, tdoa);
    return fbBuilder.offset;
  }
  int addTdoaUnc(double? tdoaUnc) {
    fbBuilder.addFloat64(28, tdoaUnc);
    return fbBuilder.offset;
  }
  int addFdoa(double? fdoa) {
    fbBuilder.addFloat64(29, fdoa);
    return fbBuilder.offset;
  }
  int addFdoaUnc(double? fdoaUnc) {
    fbBuilder.addFloat64(30, fdoaUnc);
    return fbBuilder.offset;
  }
  int addCollectionModeOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addDataMode(DiffOfArrivalIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(34, dataMode?.value);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DiffOfArrivalIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _obTime;
  final String? _idOnOrbit;
  final String? _idSensor1;
  final String? _idSensor2;
  final int? _satNo;
  final String? _taskId;
  final String? _origObjectId;
  final String? _origSensorId1;
  final String? _origSensorId2;
  final bool? _uct;
  final double? _sensor1Delay;
  final double? _sensor2Delay;
  final double? _senlat;
  final double? _senlon;
  final double? _senalt;
  final double? _sen2lat;
  final double? _sen2lon;
  final double? _sen2alt;
  final double? _frequency;
  final double? _bandwidth;
  final double? _deltaRange;
  final double? _deltaRangeUnc;
  final double? _deltaRangeRate;
  final double? _deltaRangeRateUnc;
  final double? _snr;
  final double? _tdoa;
  final double? _tdoaUnc;
  final double? _fdoa;
  final double? _fdoaUnc;
  final String? _collectionMode;
  final String? _rawFileUri;
  final String? _source;
  final DiffOfArrivalIngestDataModeEnum? _dataMode;
  final List<String>? _tags;
  final String? _origin;
  final String? _createdAt;
  final String? _createdBy;
  final String? _descriptor;
  final String? _transactionId;
  final String? _origNetwork;
  final String? _sourceDl;

  DiffOfArrivalIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? obTime,
    String? idOnOrbit,
    String? idSensor1,
    String? idSensor2,
    int? satNo,
    String? taskId,
    String? origObjectId,
    String? origSensorId1,
    String? origSensorId2,
    bool? uct,
    double? sensor1Delay,
    double? sensor2Delay,
    double? senlat,
    double? senlon,
    double? senalt,
    double? sen2lat,
    double? sen2lon,
    double? sen2alt,
    double? frequency,
    double? bandwidth,
    double? deltaRange,
    double? deltaRangeUnc,
    double? deltaRangeRate,
    double? deltaRangeRateUnc,
    double? snr,
    double? tdoa,
    double? tdoaUnc,
    double? fdoa,
    double? fdoaUnc,
    String? collectionMode,
    String? rawFileUri,
    String? source,
    DiffOfArrivalIngestDataModeEnum? dataMode,
    List<String>? tags,
    String? origin,
    String? createdAt,
    String? createdBy,
    String? descriptor,
    String? transactionId,
    String? origNetwork,
    String? sourceDl,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _obTime = obTime,
        _idOnOrbit = idOnOrbit,
        _idSensor1 = idSensor1,
        _idSensor2 = idSensor2,
        _satNo = satNo,
        _taskId = taskId,
        _origObjectId = origObjectId,
        _origSensorId1 = origSensorId1,
        _origSensorId2 = origSensorId2,
        _uct = uct,
        _sensor1Delay = sensor1Delay,
        _sensor2Delay = sensor2Delay,
        _senlat = senlat,
        _senlon = senlon,
        _senalt = senalt,
        _sen2lat = sen2lat,
        _sen2lon = sen2lon,
        _sen2alt = sen2alt,
        _frequency = frequency,
        _bandwidth = bandwidth,
        _deltaRange = deltaRange,
        _deltaRangeUnc = deltaRangeUnc,
        _deltaRangeRate = deltaRangeRate,
        _deltaRangeRateUnc = deltaRangeRateUnc,
        _snr = snr,
        _tdoa = tdoa,
        _tdoaUnc = tdoaUnc,
        _fdoa = fdoa,
        _fdoaUnc = fdoaUnc,
        _collectionMode = collectionMode,
        _rawFileUri = rawFileUri,
        _source = source,
        _dataMode = dataMode,
        _tags = tags,
        _origin = origin,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _descriptor = descriptor,
        _transactionId = transactionId,
        _origNetwork = origNetwork,
        _sourceDl = sourceDl;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? obTimeOffset = _obTime == null ? null
        : fbBuilder.writeString(_obTime!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? idSensor1Offset = _idSensor1 == null ? null
        : fbBuilder.writeString(_idSensor1!);
    final int? idSensor2Offset = _idSensor2 == null ? null
        : fbBuilder.writeString(_idSensor2!);
    final int? taskIdOffset = _taskId == null ? null
        : fbBuilder.writeString(_taskId!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? origSensorId1Offset = _origSensorId1 == null ? null
        : fbBuilder.writeString(_origSensorId1!);
    final int? origSensorId2Offset = _origSensorId2 == null ? null
        : fbBuilder.writeString(_origSensorId2!);
    final int? collectionModeOffset = _collectionMode == null ? null
        : fbBuilder.writeString(_collectionMode!);
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? descriptorOffset = _descriptor == null ? null
        : fbBuilder.writeString(_descriptor!);
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    fbBuilder.startTable(43);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, obTimeOffset);
    fbBuilder.addOffset(3, idOnOrbitOffset);
    fbBuilder.addOffset(4, idSensor1Offset);
    fbBuilder.addOffset(5, idSensor2Offset);
    fbBuilder.addInt32(6, _satNo);
    fbBuilder.addOffset(7, taskIdOffset);
    fbBuilder.addOffset(8, origObjectIdOffset);
    fbBuilder.addOffset(9, origSensorId1Offset);
    fbBuilder.addOffset(10, origSensorId2Offset);
    fbBuilder.addBool(11, _uct);
    fbBuilder.addFloat64(12, _sensor1Delay);
    fbBuilder.addFloat64(13, _sensor2Delay);
    fbBuilder.addFloat64(14, _senlat);
    fbBuilder.addFloat64(15, _senlon);
    fbBuilder.addFloat64(16, _senalt);
    fbBuilder.addFloat64(17, _sen2lat);
    fbBuilder.addFloat64(18, _sen2lon);
    fbBuilder.addFloat64(19, _sen2alt);
    fbBuilder.addFloat64(20, _frequency);
    fbBuilder.addFloat64(21, _bandwidth);
    fbBuilder.addFloat64(22, _deltaRange);
    fbBuilder.addFloat64(23, _deltaRangeUnc);
    fbBuilder.addFloat64(24, _deltaRangeRate);
    fbBuilder.addFloat64(25, _deltaRangeRateUnc);
    fbBuilder.addFloat64(26, _snr);
    fbBuilder.addFloat64(27, _tdoa);
    fbBuilder.addFloat64(28, _tdoaUnc);
    fbBuilder.addFloat64(29, _fdoa);
    fbBuilder.addFloat64(30, _fdoaUnc);
    fbBuilder.addOffset(31, collectionModeOffset);
    fbBuilder.addOffset(32, rawFileUriOffset);
    fbBuilder.addOffset(33, sourceOffset);
    fbBuilder.addInt8(34, _dataMode?.value);
    fbBuilder.addOffset(35, tagsOffset);
    fbBuilder.addOffset(36, originOffset);
    fbBuilder.addOffset(37, createdAtOffset);
    fbBuilder.addOffset(38, createdByOffset);
    fbBuilder.addOffset(39, descriptorOffset);
    fbBuilder.addOffset(40, transactionIdOffset);
    fbBuilder.addOffset(41, origNetworkOffset);
    fbBuilder.addOffset(42, sourceDlOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
