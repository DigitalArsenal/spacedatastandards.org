// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Information pertaining to UDL data owners.
class DataOwnerAbridged {
  DataOwnerAbridged._(this._bc, this._bcOffset);
  factory DataOwnerAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DataOwnerAbridged> reader = _DataOwnerAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The name of the data owner.
  ///  Example: /// Example: Data owner name
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get doName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Type of organization which this data owner belongs to (e.g. Commercial, Government, Academic, Consortium, etc.).
  ///  Example: /// Example: Commercial
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get ownerType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Type of data this data owner owns (e.g. EPHEMERIS, IMAGERY, MANEUVER, etc.).
  ///  Example: /// Example: ELSET
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get dataType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Organization name for the data provider.
  ///  Example: /// Example: ACME
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get provider => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 1, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Unique identifier of the contact for this data owner.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idContact => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Description of this data owner.
  ///  Example: /// Example: Description of this data owner.
  ///  Constraints: No constraints specified.
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Optional control required to access this data type from this owner.
  ///  Example: /// Example: PR-ACME-ELSETS
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get control => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Boolean indicating if the data owner is enabled (if not enabled, they should not appear on the data products screen on the storefront).
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get enabled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);
  ///  Boolean indicating if the data owner is coming soon or not yet available.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get comingSoon => const fb.BoolReader().vTableGet(_bc, _bcOffset, 24, false);
  ///  Source of the data.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);

  @override
  String toString() {
    return 'DataOwnerAbridged{doName: ${doName}, classificationMarking: ${classificationMarking}, ownerType: ${ownerType}, dataType: ${dataType}, provider: ${provider}, countryCode: ${countryCode}, idContact: ${idContact}, description: ${description}, control: ${control}, enabled: ${enabled}, comingSoon: ${comingSoon}, source: ${source}}';
  }
}

class _DataOwnerAbridgedReader extends fb.TableReader<DataOwnerAbridged> {
  const _DataOwnerAbridgedReader();

  @override
  DataOwnerAbridged createObject(fb.BufferContext bc, int offset) => 
    DataOwnerAbridged._(bc, offset);
}

class DataOwnerAbridgedBuilder {
  DataOwnerAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addDoNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOwnerTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDataTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addProviderOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addIdContactOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addControlOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addEnabled(bool? enabled) {
    fbBuilder.addBool(9, enabled);
    return fbBuilder.offset;
  }
  int addComingSoon(bool? comingSoon) {
    fbBuilder.addBool(10, comingSoon);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DataOwnerAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _doName;
  final String? _classificationMarking;
  final String? _ownerType;
  final String? _dataType;
  final String? _provider;
  final String? _countryCode;
  final String? _idContact;
  final String? _description;
  final String? _control;
  final bool? _enabled;
  final bool? _comingSoon;
  final String? _source;

  DataOwnerAbridgedObjectBuilder({
    String? doName,
    String? classificationMarking,
    String? ownerType,
    String? dataType,
    String? provider,
    String? countryCode,
    String? idContact,
    String? description,
    String? control,
    bool? enabled,
    bool? comingSoon,
    String? source,
  })
      : _doName = doName,
        _classificationMarking = classificationMarking,
        _ownerType = ownerType,
        _dataType = dataType,
        _provider = provider,
        _countryCode = countryCode,
        _idContact = idContact,
        _description = description,
        _control = control,
        _enabled = enabled,
        _comingSoon = comingSoon,
        _source = source;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? doNameOffset = _doName == null ? null
        : fbBuilder.writeString(_doName!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? ownerTypeOffset = _ownerType == null ? null
        : fbBuilder.writeString(_ownerType!);
    final int? dataTypeOffset = _dataType == null ? null
        : fbBuilder.writeString(_dataType!);
    final int? providerOffset = _provider == null ? null
        : fbBuilder.writeString(_provider!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? idContactOffset = _idContact == null ? null
        : fbBuilder.writeString(_idContact!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? controlOffset = _control == null ? null
        : fbBuilder.writeString(_control!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    fbBuilder.startTable(12);
    fbBuilder.addOffset(0, doNameOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, ownerTypeOffset);
    fbBuilder.addOffset(3, dataTypeOffset);
    fbBuilder.addOffset(4, providerOffset);
    fbBuilder.addOffset(5, countryCodeOffset);
    fbBuilder.addOffset(6, idContactOffset);
    fbBuilder.addOffset(7, descriptionOffset);
    fbBuilder.addOffset(8, controlOffset);
    fbBuilder.addBool(9, _enabled);
    fbBuilder.addBool(10, _comingSoon);
    fbBuilder.addOffset(11, sourceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
