// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AisAbridgedDataModeEnum {
  final int value;
  const AisAbridgedDataModeEnum._(this.value);

  factory AisAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AisAbridgedDataModeEnum');
    }
    return result;
  }

  static AisAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AisAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AisAbridgedDataModeEnum REAL = AisAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AisAbridgedDataModeEnum TEST = AisAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AisAbridgedDataModeEnum SIMULATED = AisAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AisAbridgedDataModeEnum EXERCISE = AisAbridgedDataModeEnum._(3);
  static const Map<int, AisAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AisAbridgedDataModeEnum> reader = _AisAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'AisAbridgedDataModeEnum{value: $value}';
  }
}

class _AisAbridgedDataModeEnumReader extends fb.Reader<AisAbridgedDataModeEnum> {
  const _AisAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AisAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      AisAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Self-reported information obtained from Automatic Identification System (AIS) equipment. This contains information such as unique identification, status, position, course, and speed. The AIS is an automatic tracking system that uses transceivers on ships and is used by vessel traffic services. Although technically and operationally distinct, the AIS system is analogous to ADS-B that performs a similar function for aircraft. AIS is intended to assist a vessel's watchstanding officers and allow maritime authorities to track and monitor vessel movements. AIS integrates a standardized VHF transceiver with a positioning system such as Global Positioning System receiver, with other electronic navigation sensors, such as gyrocompass or rate of turn indicator. Vessels fitted with AIS transceivers can be tracked by AIS base stations located along coast lines or, when out of range of terrestrial networks, through a growing number of satellites that are fitted with special AIS receivers which are capable of deconflicting a large number of signatures.
class AisAbridged {
  AisAbridged._(this._bc, this._bcOffset);
  factory AisAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AisAbridged> reader = _AisAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: AIS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the Track.
  ///  Example: /// Example: TRACK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idTrack => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the vessel.
  ///  Example: /// Example: VESSEL-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idVessel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The Maritime Mobile Service Identity of the vessel.  MMSI is a nine-digit number that identifies the transmitter station of the vessel.
  ///  Example: /// Example: 304010417
  ///  Constraints: No constraints specified.
  int get mmsi => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  The International Maritime Organization Number of the vessel.  IMON is a seven-digit number that uniquely identifies the vessel.
  ///  Example: /// Example: 9015462
  ///  Constraints: No constraints specified.
  int get imon => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get ts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The name of the vessel.  Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
  ///  Example: /// Example: DORNUM
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get shipName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).  See the engagedIn and specialCraft entries for additional information on certain types of vessels.
  ///  Example: /// Example: Passenger
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get shipType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The activity that the vessel is engaged in.  This entry applies only when the shipType = Other.
  ///  Example: /// Example: Cargo
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get engagedIn => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The type of special craft designation of the vessel.  This entry applies only when the shipType = Special Craft.
  ///  Example: /// Example: Tug
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get specialCraft => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
  ///  Example: /// Example: Freight
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get cargoType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  A uniquely designated identifier for the vessel's transmitter station.
  ///  Example: /// Example: V2OZ
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get callSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The flag of the subject vessel according to AIS transmission.
  ///  Example: /// Example: United States
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get vesselFlag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  WGS-84 latitude of the vessel position, in degrees.  -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 47.758499
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  WGS-84 longitude of the vessel position, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -5.154223
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Flag indicating high reported position accuracy (less than or equal to 10 meters).  A value of 0/false indicates low accuracy (greater than 10 meters).
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get posHiAccuracy => const fb.BoolReader().vTableGet(_bc, _bcOffset, 36, false);
  ///  Flag indicating high reported position latency (greater than 5 seconds).  A value of 0/false indicates low latency (less than 5 seconds).
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get posHiLatency => const fb.BoolReader().vTableGet(_bc, _bcOffset, 38, false);
  ///  The speed-over-ground reported by the vessel, in kilometers/hour.
  ///  Example: /// Example: 10.5
  ///  Constraints: No constraints specified.
  double get speed => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  The true heading reported by the vessel, in degrees.
  ///  Example: /// Example: 329.1
  ///  Constraints: No constraints specified.
  double get trueHeading => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  The course-over-ground reported by the vessel, in degrees.
  ///  Example: /// Example: 157.1
  ///  Constraints: No constraints specified.
  double get course => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  The Rate-of-Turn for the vessel, in degrees/minute.  Positive value indicates that the vessel is turning right.
  ///  Example: /// Example: 22.1
  ///  Constraints: No constraints specified.
  double get rateOfTurn => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway Navigation).
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get specialManeuver => const fb.BoolReader().vTableGet(_bc, _bcOffset, 48, false);
  ///  The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
  ///  Example: /// Example: Underway Using Engine
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get navStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
  ///  Example: /// Example: GPS
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get posDeviceType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  The reference dimensions of the vessel, reported as [A, B, C, D], in meters.  Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna.  Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
  ///  Example: /// Example: [50.1, 50.1, 20.1, 20.1]
  ///  Constraints: No constraints specified.
  List<String>? get antennaRefDimensions => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 54);
  ///  The overall length of the vessel, in meters.  A value of 511 indicates a vessel length of 511 meters or greater.
  ///  Example: /// Example: 511.1
  ///  Constraints: No constraints specified.
  double get length => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  The breadth of the vessel, in meters.  A value of 63 indicates a vessel breadth of 63 meters or greater.
  ///  Example: /// Example: 24.1
  ///  Constraints: No constraints specified.
  double get width => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  The maximum static draught, in meters, of the vessel according to the AIS transmission.
  ///  Example: /// Example: 21.1
  ///  Constraints: No constraints specified.
  double get draught => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Further description or explanation of the vessel or type.
  ///  Example: /// Example: Search and rescue vessels
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get shipDescription => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  The destination of the vessel according to the AIS transmission.
  ///  Example: /// Example: USCLE
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get destination => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get destinationEta => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  The US Geographic Unique Identifier of the current port hosting the vessel.
  ///  Example: /// Example: 0ABC
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get currentPortGuid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  The UN Location Code of the current port hosting the vessel.
  ///  Example: /// Example: XF013
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get currentPortLocode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  The US Geographic Unique Identifier of the last port visited by the vessel.
  ///  Example: /// Example: 0VAX
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get lastPortGuid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  The UN Location Code of the last port visited by the vessel.
  ///  Example: /// Example: USSKY
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get lastPortLocode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  The US Geographic Unique Identifier of the next destination port of the vessel.
  ///  Example: /// Example: 0Z8Q
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get nextPortGuid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  The UN  Location Code of the next destination port of the vessel.
  ///  Example: /// Example: USCLE
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get nextPortLocode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  The Estimated Time of Arrival of the vessel at the destination port, according to MarineTraffic calculations, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get etaCalculated => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get etaUpdated => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  The remaining distance, in kilometers, for the vessel to reach the reported destination.
  ///  Example: /// Example: 150.5
  ///  Constraints: No constraints specified.
  double get distanceToGo => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  The distance, in kilometers, that the vessel has travelled since departing the last port.
  ///  Example: /// Example: 200.3
  ///  Constraints: No constraints specified.
  double get distanceTravelled => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  The average speed, in kilometers/hour, calculated for the subject vessel during the latest voyage (port to port).
  ///  Example: /// Example: 12.1
  ///  Constraints: No constraints specified.
  double get avgSpeed => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  The maximum speed, in kilometers/hour, reported by the subject vessel during the latest voyage (port to port).
  ///  Example: /// Example: 13.3
  ///  Constraints: No constraints specified.
  double get maxSpeed => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AisAbridgedDataModeEnum get dataMode => AisAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 102, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);

  @override
  String toString() {
    return 'AisAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idTrack: ${idTrack}, idVessel: ${idVessel}, mmsi: ${mmsi}, imon: ${imon}, ts: ${ts}, shipName: ${shipName}, shipType: ${shipType}, engagedIn: ${engagedIn}, specialCraft: ${specialCraft}, cargoType: ${cargoType}, callSign: ${callSign}, vesselFlag: ${vesselFlag}, lat: ${lat}, lon: ${lon}, posHiAccuracy: ${posHiAccuracy}, posHiLatency: ${posHiLatency}, speed: ${speed}, trueHeading: ${trueHeading}, course: ${course}, rateOfTurn: ${rateOfTurn}, specialManeuver: ${specialManeuver}, navStatus: ${navStatus}, posDeviceType: ${posDeviceType}, antennaRefDimensions: ${antennaRefDimensions}, length: ${length}, width: ${width}, draught: ${draught}, shipDescription: ${shipDescription}, destination: ${destination}, destinationEta: ${destinationEta}, currentPortGuid: ${currentPortGuid}, currentPortLocode: ${currentPortLocode}, lastPortGuid: ${lastPortGuid}, lastPortLocode: ${lastPortLocode}, nextPortGuid: ${nextPortGuid}, nextPortLocode: ${nextPortLocode}, etaCalculated: ${etaCalculated}, etaUpdated: ${etaUpdated}, distanceToGo: ${distanceToGo}, distanceTravelled: ${distanceTravelled}, avgSpeed: ${avgSpeed}, maxSpeed: ${maxSpeed}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, sourceDl: ${sourceDl}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _AisAbridgedReader extends fb.TableReader<AisAbridged> {
  const _AisAbridgedReader();

  @override
  AisAbridged createObject(fb.BufferContext bc, int offset) => 
    AisAbridged._(bc, offset);
}

class AisAbridgedBuilder {
  AisAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(51);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdTrackOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdVesselOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMmsi(int? mmsi) {
    fbBuilder.addInt64(4, mmsi);
    return fbBuilder.offset;
  }
  int addImon(int? imon) {
    fbBuilder.addInt64(5, imon);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addShipNameOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addShipTypeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addEngagedInOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSpecialCraftOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addCargoTypeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCallSignOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addVesselFlagOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(14, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(15, lon);
    return fbBuilder.offset;
  }
  int addPosHiAccuracy(bool? posHiAccuracy) {
    fbBuilder.addBool(16, posHiAccuracy);
    return fbBuilder.offset;
  }
  int addPosHiLatency(bool? posHiLatency) {
    fbBuilder.addBool(17, posHiLatency);
    return fbBuilder.offset;
  }
  int addSpeed(double? speed) {
    fbBuilder.addFloat64(18, speed);
    return fbBuilder.offset;
  }
  int addTrueHeading(double? trueHeading) {
    fbBuilder.addFloat64(19, trueHeading);
    return fbBuilder.offset;
  }
  int addCourse(double? course) {
    fbBuilder.addFloat64(20, course);
    return fbBuilder.offset;
  }
  int addRateOfTurn(double? rateOfTurn) {
    fbBuilder.addFloat64(21, rateOfTurn);
    return fbBuilder.offset;
  }
  int addSpecialManeuver(bool? specialManeuver) {
    fbBuilder.addBool(22, specialManeuver);
    return fbBuilder.offset;
  }
  int addNavStatusOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addPosDeviceTypeOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addAntennaRefDimensionsOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addLength(double? length) {
    fbBuilder.addFloat64(26, length);
    return fbBuilder.offset;
  }
  int addWidth(double? width) {
    fbBuilder.addFloat64(27, width);
    return fbBuilder.offset;
  }
  int addDraught(double? draught) {
    fbBuilder.addFloat64(28, draught);
    return fbBuilder.offset;
  }
  int addShipDescriptionOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addDestinationOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addDestinationEtaOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addCurrentPortGuidOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addCurrentPortLocodeOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addLastPortGuidOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addLastPortLocodeOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addNextPortGuidOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addNextPortLocodeOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addEtaCalculatedOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addEtaUpdatedOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addDistanceToGo(double? distanceToGo) {
    fbBuilder.addFloat64(40, distanceToGo);
    return fbBuilder.offset;
  }
  int addDistanceTravelled(double? distanceTravelled) {
    fbBuilder.addFloat64(41, distanceTravelled);
    return fbBuilder.offset;
  }
  int addAvgSpeed(double? avgSpeed) {
    fbBuilder.addFloat64(42, avgSpeed);
    return fbBuilder.offset;
  }
  int addMaxSpeed(double? maxSpeed) {
    fbBuilder.addFloat64(43, maxSpeed);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AisAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(49, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AisAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idTrack;
  final String? _idVessel;
  final int? _mmsi;
  final int? _imon;
  final String? _ts;
  final String? _shipName;
  final String? _shipType;
  final String? _engagedIn;
  final String? _specialCraft;
  final String? _cargoType;
  final String? _callSign;
  final String? _vesselFlag;
  final double? _lat;
  final double? _lon;
  final bool? _posHiAccuracy;
  final bool? _posHiLatency;
  final double? _speed;
  final double? _trueHeading;
  final double? _course;
  final double? _rateOfTurn;
  final bool? _specialManeuver;
  final String? _navStatus;
  final String? _posDeviceType;
  final List<String>? _antennaRefDimensions;
  final double? _length;
  final double? _width;
  final double? _draught;
  final String? _shipDescription;
  final String? _destination;
  final String? _destinationEta;
  final String? _currentPortGuid;
  final String? _currentPortLocode;
  final String? _lastPortGuid;
  final String? _lastPortLocode;
  final String? _nextPortGuid;
  final String? _nextPortLocode;
  final String? _etaCalculated;
  final String? _etaUpdated;
  final double? _distanceToGo;
  final double? _distanceTravelled;
  final double? _avgSpeed;
  final double? _maxSpeed;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _sourceDl;
  final String? _origin;
  final AisAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;

  AisAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idTrack,
    String? idVessel,
    int? mmsi,
    int? imon,
    String? ts,
    String? shipName,
    String? shipType,
    String? engagedIn,
    String? specialCraft,
    String? cargoType,
    String? callSign,
    String? vesselFlag,
    double? lat,
    double? lon,
    bool? posHiAccuracy,
    bool? posHiLatency,
    double? speed,
    double? trueHeading,
    double? course,
    double? rateOfTurn,
    bool? specialManeuver,
    String? navStatus,
    String? posDeviceType,
    List<String>? antennaRefDimensions,
    double? length,
    double? width,
    double? draught,
    String? shipDescription,
    String? destination,
    String? destinationEta,
    String? currentPortGuid,
    String? currentPortLocode,
    String? lastPortGuid,
    String? lastPortLocode,
    String? nextPortGuid,
    String? nextPortLocode,
    String? etaCalculated,
    String? etaUpdated,
    double? distanceToGo,
    double? distanceTravelled,
    double? avgSpeed,
    double? maxSpeed,
    String? createdAt,
    String? createdBy,
    String? source,
    String? sourceDl,
    String? origin,
    AisAbridgedDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idTrack = idTrack,
        _idVessel = idVessel,
        _mmsi = mmsi,
        _imon = imon,
        _ts = ts,
        _shipName = shipName,
        _shipType = shipType,
        _engagedIn = engagedIn,
        _specialCraft = specialCraft,
        _cargoType = cargoType,
        _callSign = callSign,
        _vesselFlag = vesselFlag,
        _lat = lat,
        _lon = lon,
        _posHiAccuracy = posHiAccuracy,
        _posHiLatency = posHiLatency,
        _speed = speed,
        _trueHeading = trueHeading,
        _course = course,
        _rateOfTurn = rateOfTurn,
        _specialManeuver = specialManeuver,
        _navStatus = navStatus,
        _posDeviceType = posDeviceType,
        _antennaRefDimensions = antennaRefDimensions,
        _length = length,
        _width = width,
        _draught = draught,
        _shipDescription = shipDescription,
        _destination = destination,
        _destinationEta = destinationEta,
        _currentPortGuid = currentPortGuid,
        _currentPortLocode = currentPortLocode,
        _lastPortGuid = lastPortGuid,
        _lastPortLocode = lastPortLocode,
        _nextPortGuid = nextPortGuid,
        _nextPortLocode = nextPortLocode,
        _etaCalculated = etaCalculated,
        _etaUpdated = etaUpdated,
        _distanceToGo = distanceToGo,
        _distanceTravelled = distanceTravelled,
        _avgSpeed = avgSpeed,
        _maxSpeed = maxSpeed,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _sourceDl = sourceDl,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idTrackOffset = _idTrack == null ? null
        : fbBuilder.writeString(_idTrack!);
    final int? idVesselOffset = _idVessel == null ? null
        : fbBuilder.writeString(_idVessel!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeString(_ts!);
    final int? shipNameOffset = _shipName == null ? null
        : fbBuilder.writeString(_shipName!);
    final int? shipTypeOffset = _shipType == null ? null
        : fbBuilder.writeString(_shipType!);
    final int? engagedInOffset = _engagedIn == null ? null
        : fbBuilder.writeString(_engagedIn!);
    final int? specialCraftOffset = _specialCraft == null ? null
        : fbBuilder.writeString(_specialCraft!);
    final int? cargoTypeOffset = _cargoType == null ? null
        : fbBuilder.writeString(_cargoType!);
    final int? callSignOffset = _callSign == null ? null
        : fbBuilder.writeString(_callSign!);
    final int? vesselFlagOffset = _vesselFlag == null ? null
        : fbBuilder.writeString(_vesselFlag!);
    final int? navStatusOffset = _navStatus == null ? null
        : fbBuilder.writeString(_navStatus!);
    final int? posDeviceTypeOffset = _posDeviceType == null ? null
        : fbBuilder.writeString(_posDeviceType!);
    final int? antennaRefDimensionsOffset = _antennaRefDimensions == null ? null
        : fbBuilder.writeList(_antennaRefDimensions!.map(fbBuilder.writeString).toList());
    final int? shipDescriptionOffset = _shipDescription == null ? null
        : fbBuilder.writeString(_shipDescription!);
    final int? destinationOffset = _destination == null ? null
        : fbBuilder.writeString(_destination!);
    final int? destinationEtaOffset = _destinationEta == null ? null
        : fbBuilder.writeString(_destinationEta!);
    final int? currentPortGuidOffset = _currentPortGuid == null ? null
        : fbBuilder.writeString(_currentPortGuid!);
    final int? currentPortLocodeOffset = _currentPortLocode == null ? null
        : fbBuilder.writeString(_currentPortLocode!);
    final int? lastPortGuidOffset = _lastPortGuid == null ? null
        : fbBuilder.writeString(_lastPortGuid!);
    final int? lastPortLocodeOffset = _lastPortLocode == null ? null
        : fbBuilder.writeString(_lastPortLocode!);
    final int? nextPortGuidOffset = _nextPortGuid == null ? null
        : fbBuilder.writeString(_nextPortGuid!);
    final int? nextPortLocodeOffset = _nextPortLocode == null ? null
        : fbBuilder.writeString(_nextPortLocode!);
    final int? etaCalculatedOffset = _etaCalculated == null ? null
        : fbBuilder.writeString(_etaCalculated!);
    final int? etaUpdatedOffset = _etaUpdated == null ? null
        : fbBuilder.writeString(_etaUpdated!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(51);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idTrackOffset);
    fbBuilder.addOffset(3, idVesselOffset);
    fbBuilder.addInt64(4, _mmsi);
    fbBuilder.addInt64(5, _imon);
    fbBuilder.addOffset(6, tsOffset);
    fbBuilder.addOffset(7, shipNameOffset);
    fbBuilder.addOffset(8, shipTypeOffset);
    fbBuilder.addOffset(9, engagedInOffset);
    fbBuilder.addOffset(10, specialCraftOffset);
    fbBuilder.addOffset(11, cargoTypeOffset);
    fbBuilder.addOffset(12, callSignOffset);
    fbBuilder.addOffset(13, vesselFlagOffset);
    fbBuilder.addFloat64(14, _lat);
    fbBuilder.addFloat64(15, _lon);
    fbBuilder.addBool(16, _posHiAccuracy);
    fbBuilder.addBool(17, _posHiLatency);
    fbBuilder.addFloat64(18, _speed);
    fbBuilder.addFloat64(19, _trueHeading);
    fbBuilder.addFloat64(20, _course);
    fbBuilder.addFloat64(21, _rateOfTurn);
    fbBuilder.addBool(22, _specialManeuver);
    fbBuilder.addOffset(23, navStatusOffset);
    fbBuilder.addOffset(24, posDeviceTypeOffset);
    fbBuilder.addOffset(25, antennaRefDimensionsOffset);
    fbBuilder.addFloat64(26, _length);
    fbBuilder.addFloat64(27, _width);
    fbBuilder.addFloat64(28, _draught);
    fbBuilder.addOffset(29, shipDescriptionOffset);
    fbBuilder.addOffset(30, destinationOffset);
    fbBuilder.addOffset(31, destinationEtaOffset);
    fbBuilder.addOffset(32, currentPortGuidOffset);
    fbBuilder.addOffset(33, currentPortLocodeOffset);
    fbBuilder.addOffset(34, lastPortGuidOffset);
    fbBuilder.addOffset(35, lastPortLocodeOffset);
    fbBuilder.addOffset(36, nextPortGuidOffset);
    fbBuilder.addOffset(37, nextPortLocodeOffset);
    fbBuilder.addOffset(38, etaCalculatedOffset);
    fbBuilder.addOffset(39, etaUpdatedOffset);
    fbBuilder.addFloat64(40, _distanceToGo);
    fbBuilder.addFloat64(41, _distanceTravelled);
    fbBuilder.addFloat64(42, _avgSpeed);
    fbBuilder.addFloat64(43, _maxSpeed);
    fbBuilder.addOffset(44, createdAtOffset);
    fbBuilder.addOffset(45, createdByOffset);
    fbBuilder.addOffset(46, sourceOffset);
    fbBuilder.addOffset(47, sourceDlOffset);
    fbBuilder.addOffset(48, originOffset);
    fbBuilder.addInt8(49, _dataMode?.value);
    fbBuilder.addOffset(50, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
