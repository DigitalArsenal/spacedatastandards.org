// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class OnorbitIngestObjectTypeEnum {
  final int value;
  const OnorbitIngestObjectTypeEnum._(this.value);

  factory OnorbitIngestObjectTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OnorbitIngestObjectTypeEnum');
    }
    return result;
  }

  static OnorbitIngestObjectTypeEnum? _createOrNull(int? value) => 
      value == null ? null : OnorbitIngestObjectTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const OnorbitIngestObjectTypeEnum ROCKET_BODY = OnorbitIngestObjectTypeEnum._(0);

  ///  No description available.
  static const OnorbitIngestObjectTypeEnum DEBRIS = OnorbitIngestObjectTypeEnum._(1);

  ///  No description available.
  static const OnorbitIngestObjectTypeEnum PAYLOAD = OnorbitIngestObjectTypeEnum._(2);

  ///  No description available.
  static const OnorbitIngestObjectTypeEnum PLATFORM = OnorbitIngestObjectTypeEnum._(3);

  ///  No description available.
  static const OnorbitIngestObjectTypeEnum MANNED = OnorbitIngestObjectTypeEnum._(4);

  ///  No description available.
  static const OnorbitIngestObjectTypeEnum UNKNOWN = OnorbitIngestObjectTypeEnum._(5);
  static const Map<int, OnorbitIngestObjectTypeEnum> values = {
    0: ROCKET_BODY,
    1: DEBRIS,
    2: PAYLOAD,
    3: PLATFORM,
    4: MANNED,
    5: UNKNOWN};

  static const fb.Reader<OnorbitIngestObjectTypeEnum> reader = _OnorbitIngestObjectTypeEnumReader();

  @override
  String toString() {
    return 'OnorbitIngestObjectTypeEnum{value: $value}';
  }
}

class _OnorbitIngestObjectTypeEnumReader extends fb.Reader<OnorbitIngestObjectTypeEnum> {
  const _OnorbitIngestObjectTypeEnumReader();

  @override
  int get size => 1;

  @override
  OnorbitIngestObjectTypeEnum read(fb.BufferContext bc, int offset) =>
      OnorbitIngestObjectTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class OnorbitIngestCategoryEnum {
  final int value;
  const OnorbitIngestCategoryEnum._(this.value);

  factory OnorbitIngestCategoryEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OnorbitIngestCategoryEnum');
    }
    return result;
  }

  static OnorbitIngestCategoryEnum? _createOrNull(int? value) => 
      value == null ? null : OnorbitIngestCategoryEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 12;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const OnorbitIngestCategoryEnum UNKNOWN = OnorbitIngestCategoryEnum._(0);

  ///  No description available.
  static const OnorbitIngestCategoryEnum ON_ORBIT = OnorbitIngestCategoryEnum._(1);

  ///  No description available.
  static const OnorbitIngestCategoryEnum DECAYED = OnorbitIngestCategoryEnum._(2);

  ///  No description available.
  static const OnorbitIngestCategoryEnum CATALOGED_WITHOUT_STATE = OnorbitIngestCategoryEnum._(3);

  ///  No description available.
  static const OnorbitIngestCategoryEnum LAUNCH_NOMINAL = OnorbitIngestCategoryEnum._(4);

  ///  No description available.
  static const OnorbitIngestCategoryEnum ANALYST_SATELLITE = OnorbitIngestCategoryEnum._(5);

  ///  No description available.
  static const OnorbitIngestCategoryEnum CISLUNAR = OnorbitIngestCategoryEnum._(6);

  ///  No description available.
  static const OnorbitIngestCategoryEnum LUNAR = OnorbitIngestCategoryEnum._(7);

  ///  No description available.
  static const OnorbitIngestCategoryEnum HYPERBOLIC = OnorbitIngestCategoryEnum._(8);

  ///  No description available.
  static const OnorbitIngestCategoryEnum HELIOCENTRIC = OnorbitIngestCategoryEnum._(9);

  ///  No description available.
  static const OnorbitIngestCategoryEnum INTERPLANETARY = OnorbitIngestCategoryEnum._(10);

  ///  No description available.
  static const OnorbitIngestCategoryEnum LAGRANGIAN = OnorbitIngestCategoryEnum._(11);

  ///  No description available.
  static const OnorbitIngestCategoryEnum DOCKED = OnorbitIngestCategoryEnum._(12);
  static const Map<int, OnorbitIngestCategoryEnum> values = {
    0: UNKNOWN,
    1: ON_ORBIT,
    2: DECAYED,
    3: CATALOGED_WITHOUT_STATE,
    4: LAUNCH_NOMINAL,
    5: ANALYST_SATELLITE,
    6: CISLUNAR,
    7: LUNAR,
    8: HYPERBOLIC,
    9: HELIOCENTRIC,
    10: INTERPLANETARY,
    11: LAGRANGIAN,
    12: DOCKED};

  static const fb.Reader<OnorbitIngestCategoryEnum> reader = _OnorbitIngestCategoryEnumReader();

  @override
  String toString() {
    return 'OnorbitIngestCategoryEnum{value: $value}';
  }
}

class _OnorbitIngestCategoryEnumReader extends fb.Reader<OnorbitIngestCategoryEnum> {
  const _OnorbitIngestCategoryEnumReader();

  @override
  int get size => 1;

  @override
  OnorbitIngestCategoryEnum read(fb.BufferContext bc, int offset) =>
      OnorbitIngestCategoryEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class OnorbitIngestDataModeEnum {
  final int value;
  const OnorbitIngestDataModeEnum._(this.value);

  factory OnorbitIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OnorbitIngestDataModeEnum');
    }
    return result;
  }

  static OnorbitIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : OnorbitIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const OnorbitIngestDataModeEnum REAL = OnorbitIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const OnorbitIngestDataModeEnum TEST = OnorbitIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const OnorbitIngestDataModeEnum SIMULATED = OnorbitIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const OnorbitIngestDataModeEnum EXERCISE = OnorbitIngestDataModeEnum._(3);
  static const Map<int, OnorbitIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<OnorbitIngestDataModeEnum> reader = _OnorbitIngestDataModeEnumReader();

  @override
  String toString() {
    return 'OnorbitIngestDataModeEnum{value: $value}';
  }
}

class _OnorbitIngestDataModeEnumReader extends fb.Reader<OnorbitIngestDataModeEnum> {
  const _OnorbitIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  OnorbitIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      OnorbitIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model object representing on-orbit objects or satellites in the system.
class OnorbitIngest {
  OnorbitIngest._(this._bc, this._bcOffset);
  factory OnorbitIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OnorbitIngest> reader = _OnorbitIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  Common name of the on-orbit object.
  ///  Example: /// Example: Example common name
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get commonName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Constellation to which this satellite belongs.
  ///  Example: /// Example: Big Dipper
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get constellation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.
  ///  Example: /// Example: 2021123ABC
  ///  Constraints: Minimum length = 0, Maximum length = 45
  String? get intlDes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Date of launch.
  ///  Example: /// Example: 2018-01-01
  ///  Constraints: No constraints specified.
  String? get launchDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Date of decay.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get decayDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.
  ///  Example: /// Example: PAYLOAD
  ///  Constraints: Minimum length = 0, Maximum length = 32
  OnorbitIngestObjectTypeEnum get objectType => OnorbitIngestObjectTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 20, 0));
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Mission number of the on-orbit object.
  ///  Example: /// Example: Expedition 1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get missionNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).
  ///  Example: /// Example: Lunar
  ///  Constraints: Minimum length = 0, Maximum length = 45
  OnorbitIngestCategoryEnum get category => OnorbitIngestCategoryEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 26, 0));
  ///  Estimated lifetime of the on-orbit payload, if known.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get lifetimeYears => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Alternate name of the on-orbit object.
  ///  Example: /// Example: Alternate Name
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get altName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  OnorbitIngestDataModeEnum get dataMode => OnorbitIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 38, 0));
  ///  Id of the associated launchSite entity.
  ///  Example: /// Example: LAUNCHSITE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get launchSiteId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: No constraints specified.
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);

  @override
  String toString() {
    return 'OnorbitIngest{idOnOrbit: ${idOnOrbit}, classificationMarking: ${classificationMarking}, satNo: ${satNo}, commonName: ${commonName}, constellation: ${constellation}, intlDes: ${intlDes}, launchDate: ${launchDate}, decayDate: ${decayDate}, objectType: ${objectType}, origin: ${origin}, missionNumber: ${missionNumber}, category: ${category}, lifetimeYears: ${lifetimeYears}, altName: ${altName}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, dataMode: ${dataMode}, launchSiteId: ${launchSiteId}, countryCode: ${countryCode}, origNetwork: ${origNetwork}}';
  }
}

class _OnorbitIngestReader extends fb.TableReader<OnorbitIngest> {
  const _OnorbitIngestReader();

  @override
  OnorbitIngest createObject(fb.BufferContext bc, int offset) => 
    OnorbitIngest._(bc, offset);
}

class OnorbitIngestBuilder {
  OnorbitIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(21);
  }

  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(2, satNo);
    return fbBuilder.offset;
  }
  int addCommonNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addConstellationOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIntlDesOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addLaunchDateOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addDecayDateOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addObjectType(OnorbitIngestObjectTypeEnum? objectType) {
    fbBuilder.addInt8(8, objectType?.value);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addMissionNumberOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addCategory(OnorbitIngestCategoryEnum? category) {
    fbBuilder.addInt8(11, category?.value);
    return fbBuilder.offset;
  }
  int addLifetimeYears(int? lifetimeYears) {
    fbBuilder.addInt32(12, lifetimeYears);
    return fbBuilder.offset;
  }
  int addAltNameOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addDataMode(OnorbitIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(17, dataMode?.value);
    return fbBuilder.offset;
  }
  int addLaunchSiteIdOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OnorbitIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _idOnOrbit;
  final String? _classificationMarking;
  final int? _satNo;
  final String? _commonName;
  final String? _constellation;
  final String? _intlDes;
  final String? _launchDate;
  final String? _decayDate;
  final OnorbitIngestObjectTypeEnum? _objectType;
  final String? _origin;
  final String? _missionNumber;
  final OnorbitIngestCategoryEnum? _category;
  final int? _lifetimeYears;
  final String? _altName;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final OnorbitIngestDataModeEnum? _dataMode;
  final String? _launchSiteId;
  final String? _countryCode;
  final String? _origNetwork;

  OnorbitIngestObjectBuilder({
    String? idOnOrbit,
    String? classificationMarking,
    int? satNo,
    String? commonName,
    String? constellation,
    String? intlDes,
    String? launchDate,
    String? decayDate,
    OnorbitIngestObjectTypeEnum? objectType,
    String? origin,
    String? missionNumber,
    OnorbitIngestCategoryEnum? category,
    int? lifetimeYears,
    String? altName,
    String? createdAt,
    String? createdBy,
    String? source,
    OnorbitIngestDataModeEnum? dataMode,
    String? launchSiteId,
    String? countryCode,
    String? origNetwork,
  })
      : _idOnOrbit = idOnOrbit,
        _classificationMarking = classificationMarking,
        _satNo = satNo,
        _commonName = commonName,
        _constellation = constellation,
        _intlDes = intlDes,
        _launchDate = launchDate,
        _decayDate = decayDate,
        _objectType = objectType,
        _origin = origin,
        _missionNumber = missionNumber,
        _category = category,
        _lifetimeYears = lifetimeYears,
        _altName = altName,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _dataMode = dataMode,
        _launchSiteId = launchSiteId,
        _countryCode = countryCode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? commonNameOffset = _commonName == null ? null
        : fbBuilder.writeString(_commonName!);
    final int? constellationOffset = _constellation == null ? null
        : fbBuilder.writeString(_constellation!);
    final int? intlDesOffset = _intlDes == null ? null
        : fbBuilder.writeString(_intlDes!);
    final int? launchDateOffset = _launchDate == null ? null
        : fbBuilder.writeString(_launchDate!);
    final int? decayDateOffset = _decayDate == null ? null
        : fbBuilder.writeString(_decayDate!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? missionNumberOffset = _missionNumber == null ? null
        : fbBuilder.writeString(_missionNumber!);
    final int? altNameOffset = _altName == null ? null
        : fbBuilder.writeString(_altName!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? launchSiteIdOffset = _launchSiteId == null ? null
        : fbBuilder.writeString(_launchSiteId!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(21);
    fbBuilder.addOffset(0, idOnOrbitOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addInt32(2, _satNo);
    fbBuilder.addOffset(3, commonNameOffset);
    fbBuilder.addOffset(4, constellationOffset);
    fbBuilder.addOffset(5, intlDesOffset);
    fbBuilder.addOffset(6, launchDateOffset);
    fbBuilder.addOffset(7, decayDateOffset);
    fbBuilder.addInt8(8, _objectType?.value);
    fbBuilder.addOffset(9, originOffset);
    fbBuilder.addOffset(10, missionNumberOffset);
    fbBuilder.addInt8(11, _category?.value);
    fbBuilder.addInt32(12, _lifetimeYears);
    fbBuilder.addOffset(13, altNameOffset);
    fbBuilder.addOffset(14, createdAtOffset);
    fbBuilder.addOffset(15, createdByOffset);
    fbBuilder.addOffset(16, sourceOffset);
    fbBuilder.addInt8(17, _dataMode?.value);
    fbBuilder.addOffset(18, launchSiteIdOffset);
    fbBuilder.addOffset(19, countryCodeOffset);
    fbBuilder.addOffset(20, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
