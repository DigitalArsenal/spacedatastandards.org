// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class StatusFullStateEnum {
  final int value;
  const StatusFullStateEnum._(this.value);

  factory StatusFullStateEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StatusFullStateEnum');
    }
    return result;
  }

  static StatusFullStateEnum? _createOrNull(int? value) => 
      value == null ? null : StatusFullStateEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const StatusFullStateEnum UNKNOWN = StatusFullStateEnum._(0);

  ///  No description available.
  static const StatusFullStateEnum DEAD = StatusFullStateEnum._(1);

  ///  No description available.
  static const StatusFullStateEnum ACTIVE = StatusFullStateEnum._(2);

  ///  No description available.
  static const StatusFullStateEnum RF_ACTIVE = StatusFullStateEnum._(3);

  ///  No description available.
  static const StatusFullStateEnum STANDBY = StatusFullStateEnum._(4);
  static const Map<int, StatusFullStateEnum> values = {
    0: UNKNOWN,
    1: DEAD,
    2: ACTIVE,
    3: RF_ACTIVE,
    4: STANDBY};

  static const fb.Reader<StatusFullStateEnum> reader = _StatusFullStateEnumReader();

  @override
  String toString() {
    return 'StatusFullStateEnum{value: $value}';
  }
}

class _StatusFullStateEnumReader extends fb.Reader<StatusFullStateEnum> {
  const _StatusFullStateEnumReader();

  @override
  int get size => 1;

  @override
  StatusFullStateEnum read(fb.BufferContext bc, int offset) =>
      StatusFullStateEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class StatusFullSysCapEnum {
  final int value;
  const StatusFullSysCapEnum._(this.value);

  factory StatusFullSysCapEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StatusFullSysCapEnum');
    }
    return result;
  }

  static StatusFullSysCapEnum? _createOrNull(int? value) => 
      value == null ? null : StatusFullSysCapEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const StatusFullSysCapEnum FMC = StatusFullSysCapEnum._(0);

  ///  No description available.
  static const StatusFullSysCapEnum NMC = StatusFullSysCapEnum._(1);

  ///  No description available.
  static const StatusFullSysCapEnum PMC = StatusFullSysCapEnum._(2);

  ///  No description available.
  static const StatusFullSysCapEnum UNK = StatusFullSysCapEnum._(3);
  static const Map<int, StatusFullSysCapEnum> values = {
    0: FMC,
    1: NMC,
    2: PMC,
    3: UNK};

  static const fb.Reader<StatusFullSysCapEnum> reader = _StatusFullSysCapEnumReader();

  @override
  String toString() {
    return 'StatusFullSysCapEnum{value: $value}';
  }
}

class _StatusFullSysCapEnumReader extends fb.Reader<StatusFullSysCapEnum> {
  const _StatusFullSysCapEnumReader();

  @override
  int get size => 1;

  @override
  StatusFullSysCapEnum read(fb.BufferContext bc, int offset) =>
      StatusFullSysCapEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class StatusFullOpsCapEnum {
  final int value;
  const StatusFullOpsCapEnum._(this.value);

  factory StatusFullOpsCapEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StatusFullOpsCapEnum');
    }
    return result;
  }

  static StatusFullOpsCapEnum? _createOrNull(int? value) => 
      value == null ? null : StatusFullOpsCapEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const StatusFullOpsCapEnum FMC = StatusFullOpsCapEnum._(0);

  ///  No description available.
  static const StatusFullOpsCapEnum NMC = StatusFullOpsCapEnum._(1);

  ///  No description available.
  static const StatusFullOpsCapEnum PMC = StatusFullOpsCapEnum._(2);

  ///  No description available.
  static const StatusFullOpsCapEnum UNK = StatusFullOpsCapEnum._(3);
  static const Map<int, StatusFullOpsCapEnum> values = {
    0: FMC,
    1: NMC,
    2: PMC,
    3: UNK};

  static const fb.Reader<StatusFullOpsCapEnum> reader = _StatusFullOpsCapEnumReader();

  @override
  String toString() {
    return 'StatusFullOpsCapEnum{value: $value}';
  }
}

class _StatusFullOpsCapEnumReader extends fb.Reader<StatusFullOpsCapEnum> {
  const _StatusFullOpsCapEnumReader();

  @override
  int get size => 1;

  @override
  StatusFullOpsCapEnum read(fb.BufferContext bc, int offset) =>
      StatusFullOpsCapEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class StatusFullDataModeEnum {
  final int value;
  const StatusFullDataModeEnum._(this.value);

  factory StatusFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StatusFullDataModeEnum');
    }
    return result;
  }

  static StatusFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : StatusFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const StatusFullDataModeEnum REAL = StatusFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const StatusFullDataModeEnum TEST = StatusFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const StatusFullDataModeEnum SIMULATED = StatusFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const StatusFullDataModeEnum EXERCISE = StatusFullDataModeEnum._(3);
  static const Map<int, StatusFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<StatusFullDataModeEnum> reader = _StatusFullDataModeEnumReader();

  @override
  String toString() {
    return 'StatusFullDataModeEnum{value: $value}';
  }
}

class _StatusFullDataModeEnumReader extends fb.Reader<StatusFullDataModeEnum> {
  const _StatusFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  StatusFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      StatusFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Status for a particular Entity. An entity may have multiple status records collected by various sources.
class StatusFull {
  StatusFull._(this._bc, this._bcOffset);
  factory StatusFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatusFull> reader = _StatusFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: STATUS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The sources or SCG references from which the classification of this data is derived.
  ///  Example: /// Example: SOME_SOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get derivedFrom => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The declassification date of this data, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:02:02.123Z
  ///  Constraints: No constraints specified.
  String? get declassificationDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Declassification string of this data.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get declassificationString => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the parent entity.
  ///  Example: /// Example: ENTITY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idEntity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).
  ///  Example: /// Example: ACTIVE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  StatusFullStateEnum get state => StatusFullStateEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 16, 0));
  ///  System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
  ///  Example: /// Example: FMC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  StatusFullSysCapEnum get sysCap => StatusFullSysCapEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 18, 0));
  ///  Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
  ///  Example: /// Example: FMC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  StatusFullOpsCapEnum get opsCap => StatusFullOpsCapEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 20, 0));
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get subStatusCollection => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 24);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  StatusFullDataModeEnum get dataMode => StatusFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 26, 0));
  ///  Comments describing the status creation and or updates to an entity.
  ///  Example: /// Example: Example Notes
  ///  Constraints: No constraints specified.
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: TST1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);

  @override
  String toString() {
    return 'StatusFull{id: ${id}, classificationMarking: ${classificationMarking}, derivedFrom: ${derivedFrom}, declassificationDate: ${declassificationDate}, declassificationString: ${declassificationString}, idEntity: ${idEntity}, state: ${state}, sysCap: ${sysCap}, opsCap: ${opsCap}, source: ${source}, subStatusCollection: ${subStatusCollection}, dataMode: ${dataMode}, notes: ${notes}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, origin: ${origin}, origNetwork: ${origNetwork}}';
  }
}

class _StatusFullReader extends fb.TableReader<StatusFull> {
  const _StatusFullReader();

  @override
  StatusFull createObject(fb.BufferContext bc, int offset) => 
    StatusFull._(bc, offset);
}

class StatusFullBuilder {
  StatusFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(19);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDerivedFromOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDeclassificationDateOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDeclassificationStringOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdEntityOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addState(StatusFullStateEnum? state) {
    fbBuilder.addInt8(6, state?.value);
    return fbBuilder.offset;
  }
  int addSysCap(StatusFullSysCapEnum? sysCap) {
    fbBuilder.addInt8(7, sysCap?.value);
    return fbBuilder.offset;
  }
  int addOpsCap(StatusFullOpsCapEnum? opsCap) {
    fbBuilder.addInt8(8, opsCap?.value);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSubStatusCollectionOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addDataMode(StatusFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(11, dataMode?.value);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatusFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _derivedFrom;
  final String? _declassificationDate;
  final String? _declassificationString;
  final String? _idEntity;
  final StatusFullStateEnum? _state;
  final StatusFullSysCapEnum? _sysCap;
  final StatusFullOpsCapEnum? _opsCap;
  final String? _source;
  final List<String>? _subStatusCollection;
  final StatusFullDataModeEnum? _dataMode;
  final String? _notes;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _origin;
  final String? _origNetwork;

  StatusFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? derivedFrom,
    String? declassificationDate,
    String? declassificationString,
    String? idEntity,
    StatusFullStateEnum? state,
    StatusFullSysCapEnum? sysCap,
    StatusFullOpsCapEnum? opsCap,
    String? source,
    List<String>? subStatusCollection,
    StatusFullDataModeEnum? dataMode,
    String? notes,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? origin,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _derivedFrom = derivedFrom,
        _declassificationDate = declassificationDate,
        _declassificationString = declassificationString,
        _idEntity = idEntity,
        _state = state,
        _sysCap = sysCap,
        _opsCap = opsCap,
        _source = source,
        _subStatusCollection = subStatusCollection,
        _dataMode = dataMode,
        _notes = notes,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _origin = origin,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? derivedFromOffset = _derivedFrom == null ? null
        : fbBuilder.writeString(_derivedFrom!);
    final int? declassificationDateOffset = _declassificationDate == null ? null
        : fbBuilder.writeString(_declassificationDate!);
    final int? declassificationStringOffset = _declassificationString == null ? null
        : fbBuilder.writeString(_declassificationString!);
    final int? idEntityOffset = _idEntity == null ? null
        : fbBuilder.writeString(_idEntity!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? subStatusCollectionOffset = _subStatusCollection == null ? null
        : fbBuilder.writeList(_subStatusCollection!.map(fbBuilder.writeString).toList());
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(19);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, derivedFromOffset);
    fbBuilder.addOffset(3, declassificationDateOffset);
    fbBuilder.addOffset(4, declassificationStringOffset);
    fbBuilder.addOffset(5, idEntityOffset);
    fbBuilder.addInt8(6, _state?.value);
    fbBuilder.addInt8(7, _sysCap?.value);
    fbBuilder.addInt8(8, _opsCap?.value);
    fbBuilder.addOffset(9, sourceOffset);
    fbBuilder.addOffset(10, subStatusCollectionOffset);
    fbBuilder.addInt8(11, _dataMode?.value);
    fbBuilder.addOffset(12, notesOffset);
    fbBuilder.addOffset(13, createdAtOffset);
    fbBuilder.addOffset(14, createdByOffset);
    fbBuilder.addOffset(15, updatedAtOffset);
    fbBuilder.addOffset(16, updatedByOffset);
    fbBuilder.addOffset(17, originOffset);
    fbBuilder.addOffset(18, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
