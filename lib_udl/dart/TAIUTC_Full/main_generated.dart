// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class TaiutcFullDataModeEnum {
  final int value;
  const TaiutcFullDataModeEnum._(this.value);

  factory TaiutcFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum TaiutcFullDataModeEnum');
    }
    return result;
  }

  static TaiutcFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : TaiutcFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const TaiutcFullDataModeEnum REAL = TaiutcFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const TaiutcFullDataModeEnum TEST = TaiutcFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const TaiutcFullDataModeEnum SIMULATED = TaiutcFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const TaiutcFullDataModeEnum EXERCISE = TaiutcFullDataModeEnum._(3);
  static const Map<int, TaiutcFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<TaiutcFullDataModeEnum> reader = _TaiutcFullDataModeEnumReader();

  @override
  String toString() {
    return 'TaiutcFullDataModeEnum{value: $value}';
  }
}

class _TaiutcFullDataModeEnumReader extends fb.Reader<TaiutcFullDataModeEnum> {
  const _TaiutcFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  TaiutcFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      TaiutcFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// International Atomic Time (TAI) is a statistical atomic time scale based on a large number of clocks operating at standards laboratories around the world that is maintained by the Bureau International des Poids et Mesures; its unit interval is exactly one SI second at sea level. The origin of TAI is such that UT1-TAI is approximately 0 (zero) on January 1, 1958. TAI is not adjusted for leap seconds. 
///  Coordinated Universal Time (UTC) is defined by the CCIR Recommendation 460-4 (1986). It differs from TAI by the total number of leap seconds, so that UT1-UTC stays smaller than 0.9s in absolute value.   The decision to introduce a leap second in UTC is the responsibility of the International Earth Rotation Service (IERS). According to the CCIR Recommendation, first preference is given to the opportunities at the end of December and June, and second preference to those at the end of March and September. Since the system was introduced in 1972, only dates in June and December have been used.  TAI is expressed in terms of UTC by the relation TAI = UTC + dAT, where  dAT is the total algebraic sum of leap seconds.
///  The first leap second was introduced on June 30, 1972. The historical list of leap seconds can be found in this table.
class TaiutcFull {
  TaiutcFull._(this._bc, this._bcOffset);
  factory TaiutcFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TaiutcFull> reader = _TaiutcFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: TAIUTC-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Effective date/time for the leap second adjustment.
  ///  Example: /// Example: 2017-01-01T00:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get adjustmentDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Total/cumulative offset between TAI and UTC time as of adjustmentDate, in seconds.
  ///  Example: /// Example: 1.422818
  ///  Constraints: No constraints specified.
  double get taiUtc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Multiplication factor of the leap second adjustment.
  ///  Example: /// Example: 0.001296
  ///  Constraints: No constraints specified.
  double get multiplicationFactor => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: /TAI/2019/01/22/4318471007562436-tai-utc.dat
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  TaiutcFullDataModeEnum get dataMode => TaiutcFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 22, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);

  @override
  String toString() {
    return 'TaiutcFull{id: ${id}, classificationMarking: ${classificationMarking}, adjustmentDate: ${adjustmentDate}, taiUtc: ${taiUtc}, multiplicationFactor: ${multiplicationFactor}, rawFileUri: ${rawFileUri}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}}';
  }
}

class _TaiutcFullReader extends fb.TableReader<TaiutcFull> {
  const _TaiutcFullReader();

  @override
  TaiutcFull createObject(fb.BufferContext bc, int offset) => 
    TaiutcFull._(bc, offset);
}

class TaiutcFullBuilder {
  TaiutcFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(14);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAdjustmentDateOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTaiUtc(double? taiUtc) {
    fbBuilder.addFloat64(3, taiUtc);
    return fbBuilder.offset;
  }
  int addMultiplicationFactor(double? multiplicationFactor) {
    fbBuilder.addFloat64(4, multiplicationFactor);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addDataMode(TaiutcFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(9, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TaiutcFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _adjustmentDate;
  final double? _taiUtc;
  final double? _multiplicationFactor;
  final String? _rawFileUri;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final TaiutcFullDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;

  TaiutcFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? adjustmentDate,
    double? taiUtc,
    double? multiplicationFactor,
    String? rawFileUri,
    String? source,
    String? origin,
    String? origNetwork,
    TaiutcFullDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _adjustmentDate = adjustmentDate,
        _taiUtc = taiUtc,
        _multiplicationFactor = multiplicationFactor,
        _rawFileUri = rawFileUri,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? adjustmentDateOffset = _adjustmentDate == null ? null
        : fbBuilder.writeString(_adjustmentDate!);
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    fbBuilder.startTable(14);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, adjustmentDateOffset);
    fbBuilder.addFloat64(3, _taiUtc);
    fbBuilder.addFloat64(4, _multiplicationFactor);
    fbBuilder.addOffset(5, rawFileUriOffset);
    fbBuilder.addOffset(6, sourceOffset);
    fbBuilder.addOffset(7, originOffset);
    fbBuilder.addOffset(8, origNetworkOffset);
    fbBuilder.addInt8(9, _dataMode?.value);
    fbBuilder.addOffset(10, createdAtOffset);
    fbBuilder.addOffset(11, createdByOffset);
    fbBuilder.addOffset(12, updatedAtOffset);
    fbBuilder.addOffset(13, updatedByOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
