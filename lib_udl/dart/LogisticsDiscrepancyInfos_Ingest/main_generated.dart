// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Discrepancy information associated with this LogisticsSupport record.
class LogisticsDiscrepancyInfosIngest {
  LogisticsDiscrepancyInfosIngest._(this._bc, this._bcOffset);
  factory LogisticsDiscrepancyInfosIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LogisticsDiscrepancyInfosIngest> reader = _LogisticsDiscrepancyInfosIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Job Control Number of the discrepancy.
  ///  Example: /// Example: 231942400
  ///  Constraints: Minimum length = 0, Maximum length = 12
  String? get jcn => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The aircraft discrepancy description.
  ///  Example: /// Example: PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10
  ///  Constraints: Minimum length = 0, Maximum length = 680
  String? get discrepancyInfo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The job start time, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T10:30:00.123Z
  ///  Constraints: No constraints specified.
  String? get jobStTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The discrepancy closure time, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T10:30:00.123Z
  ///  Constraints: No constraints specified.
  String? get closureTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'LogisticsDiscrepancyInfosIngest{jcn: ${jcn}, discrepancyInfo: ${discrepancyInfo}, jobStTime: ${jobStTime}, closureTime: ${closureTime}}';
  }
}

class _LogisticsDiscrepancyInfosIngestReader extends fb.TableReader<LogisticsDiscrepancyInfosIngest> {
  const _LogisticsDiscrepancyInfosIngestReader();

  @override
  LogisticsDiscrepancyInfosIngest createObject(fb.BufferContext bc, int offset) => 
    LogisticsDiscrepancyInfosIngest._(bc, offset);
}

class LogisticsDiscrepancyInfosIngestBuilder {
  LogisticsDiscrepancyInfosIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addJcnOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDiscrepancyInfoOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addJobStTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addClosureTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LogisticsDiscrepancyInfosIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _jcn;
  final String? _discrepancyInfo;
  final String? _jobStTime;
  final String? _closureTime;

  LogisticsDiscrepancyInfosIngestObjectBuilder({
    String? jcn,
    String? discrepancyInfo,
    String? jobStTime,
    String? closureTime,
  })
      : _jcn = jcn,
        _discrepancyInfo = discrepancyInfo,
        _jobStTime = jobStTime,
        _closureTime = closureTime;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? jcnOffset = _jcn == null ? null
        : fbBuilder.writeString(_jcn!);
    final int? discrepancyInfoOffset = _discrepancyInfo == null ? null
        : fbBuilder.writeString(_discrepancyInfo!);
    final int? jobStTimeOffset = _jobStTime == null ? null
        : fbBuilder.writeString(_jobStTime!);
    final int? closureTimeOffset = _closureTime == null ? null
        : fbBuilder.writeString(_closureTime!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, jcnOffset);
    fbBuilder.addOffset(1, discrepancyInfoOffset);
    fbBuilder.addOffset(2, jobStTimeOffset);
    fbBuilder.addOffset(3, closureTimeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
