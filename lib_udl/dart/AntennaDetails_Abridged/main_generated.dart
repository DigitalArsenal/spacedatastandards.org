// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AntennaDetailsAbridgedModeEnum {
  final int value;
  const AntennaDetailsAbridgedModeEnum._(this.value);

  factory AntennaDetailsAbridgedModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AntennaDetailsAbridgedModeEnum');
    }
    return result;
  }

  static AntennaDetailsAbridgedModeEnum? _createOrNull(int? value) => 
      value == null ? null : AntennaDetailsAbridgedModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const AntennaDetailsAbridgedModeEnum TX = AntennaDetailsAbridgedModeEnum._(0);

  ///  No description available.
  static const AntennaDetailsAbridgedModeEnum RX = AntennaDetailsAbridgedModeEnum._(1);
  static const Map<int, AntennaDetailsAbridgedModeEnum> values = {
    0: TX,
    1: RX};

  static const fb.Reader<AntennaDetailsAbridgedModeEnum> reader = _AntennaDetailsAbridgedModeEnumReader();

  @override
  String toString() {
    return 'AntennaDetailsAbridgedModeEnum{value: $value}';
  }
}

class _AntennaDetailsAbridgedModeEnumReader extends fb.Reader<AntennaDetailsAbridgedModeEnum> {
  const _AntennaDetailsAbridgedModeEnumReader();

  @override
  int get size => 1;

  @override
  AntennaDetailsAbridgedModeEnum read(fb.BufferContext bc, int offset) =>
      AntennaDetailsAbridgedModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class AntennaDetailsAbridgedDataModeEnum {
  final int value;
  const AntennaDetailsAbridgedDataModeEnum._(this.value);

  factory AntennaDetailsAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AntennaDetailsAbridgedDataModeEnum');
    }
    return result;
  }

  static AntennaDetailsAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AntennaDetailsAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AntennaDetailsAbridgedDataModeEnum REAL = AntennaDetailsAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AntennaDetailsAbridgedDataModeEnum TEST = AntennaDetailsAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AntennaDetailsAbridgedDataModeEnum SIMULATED = AntennaDetailsAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AntennaDetailsAbridgedDataModeEnum EXERCISE = AntennaDetailsAbridgedDataModeEnum._(3);
  static const Map<int, AntennaDetailsAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AntennaDetailsAbridgedDataModeEnum> reader = _AntennaDetailsAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'AntennaDetailsAbridgedDataModeEnum{value: $value}';
  }
}

class _AntennaDetailsAbridgedDataModeEnumReader extends fb.Reader<AntennaDetailsAbridgedDataModeEnum> {
  const _AntennaDetailsAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AntennaDetailsAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      AntennaDetailsAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.
class AntennaDetailsAbridged {
  AntennaDetailsAbridged._(this._bc, this._bcOffset);
  factory AntennaDetailsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AntennaDetailsAbridged> reader = _AntennaDetailsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ANTENNADETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Unique identifier of the parent Antenna.
  ///  Example: /// Example: ANTENNA-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idAntenna => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
  ///  Example: /// Example: Reflector
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Antenna position (e.g. Top, Nadir, Side).
  ///  Example: /// Example: Top
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get position => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Antenna mode (e.g. TX,RX).
  ///  Example: /// Example: TX
  ///  Constraints: Minimum length = 0, Maximum length = 4
  AntennaDetailsAbridgedModeEnum get mode => AntennaDetailsAbridgedModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 14, 0));
  ///  Boolean indicating if this antenna is steerable.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get steerable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  ///  Boolean indicating if this is a beam forming antenna.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get beamForming => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  ///  ID of the organization that manufactures the antenna.
  ///  Example: /// Example: MANUFACTUREORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get manufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Antenna diameter in meters.
  ///  Example: /// Example: 0.01
  ///  Constraints: No constraints specified.
  double get diameter => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
  ///  Example: /// Example: [0.03, 0.05]
  ///  Constraints: No constraints specified.
  List<String>? get size => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 24);
  ///  Antenna start of frequency range in Mhz.
  ///  Example: /// Example: 2.1
  ///  Constraints: No constraints specified.
  double get startFrequency => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Antenna end of frequency range in Mhz.
  ///  Example: /// Example: 3.3
  ///  Constraints: No constraints specified.
  double get endFrequency => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
  ///  Example: /// Example: 14.1
  ///  Constraints: No constraints specified.
  double get beamwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Antenna maximum gain in dBi.
  ///  Example: /// Example: 20.1
  ///  Constraints: No constraints specified.
  double get gain => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Antenna gain tolerance in dB.
  ///  Example: /// Example: 5.1
  ///  Constraints: No constraints specified.
  double get gainTolerance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Antenna polarization in degrees.
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  double get polarization => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Antenna description.
  ///  Example: /// Example: Description of antenna A
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AntennaDetailsAbridgedDataModeEnum get dataMode => AntennaDetailsAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 50, 0));

  @override
  String toString() {
    return 'AntennaDetailsAbridged{id: ${id}, idAntenna: ${idAntenna}, classificationMarking: ${classificationMarking}, type: ${type}, position: ${position}, mode: ${mode}, steerable: ${steerable}, beamForming: ${beamForming}, manufacturerOrgId: ${manufacturerOrgId}, diameter: ${diameter}, size: ${size}, startFrequency: ${startFrequency}, endFrequency: ${endFrequency}, beamwidth: ${beamwidth}, gain: ${gain}, gainTolerance: ${gainTolerance}, polarization: ${polarization}, description: ${description}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _AntennaDetailsAbridgedReader extends fb.TableReader<AntennaDetailsAbridged> {
  const _AntennaDetailsAbridgedReader();

  @override
  AntennaDetailsAbridged createObject(fb.BufferContext bc, int offset) => 
    AntennaDetailsAbridged._(bc, offset);
}

class AntennaDetailsAbridgedBuilder {
  AntennaDetailsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(24);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdAntennaOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addPositionOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMode(AntennaDetailsAbridgedModeEnum? mode) {
    fbBuilder.addInt8(5, mode?.value);
    return fbBuilder.offset;
  }
  int addSteerable(bool? steerable) {
    fbBuilder.addBool(6, steerable);
    return fbBuilder.offset;
  }
  int addBeamForming(bool? beamForming) {
    fbBuilder.addBool(7, beamForming);
    return fbBuilder.offset;
  }
  int addManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addDiameter(double? diameter) {
    fbBuilder.addFloat64(9, diameter);
    return fbBuilder.offset;
  }
  int addSizeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addStartFrequency(double? startFrequency) {
    fbBuilder.addFloat64(11, startFrequency);
    return fbBuilder.offset;
  }
  int addEndFrequency(double? endFrequency) {
    fbBuilder.addFloat64(12, endFrequency);
    return fbBuilder.offset;
  }
  int addBeamwidth(double? beamwidth) {
    fbBuilder.addFloat64(13, beamwidth);
    return fbBuilder.offset;
  }
  int addGain(double? gain) {
    fbBuilder.addFloat64(14, gain);
    return fbBuilder.offset;
  }
  int addGainTolerance(double? gainTolerance) {
    fbBuilder.addFloat64(15, gainTolerance);
    return fbBuilder.offset;
  }
  int addPolarization(double? polarization) {
    fbBuilder.addFloat64(16, polarization);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AntennaDetailsAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(23, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AntennaDetailsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idAntenna;
  final String? _classificationMarking;
  final String? _type;
  final String? _position;
  final AntennaDetailsAbridgedModeEnum? _mode;
  final bool? _steerable;
  final bool? _beamForming;
  final String? _manufacturerOrgId;
  final double? _diameter;
  final List<String>? _size;
  final double? _startFrequency;
  final double? _endFrequency;
  final double? _beamwidth;
  final double? _gain;
  final double? _gainTolerance;
  final double? _polarization;
  final String? _description;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final AntennaDetailsAbridgedDataModeEnum? _dataMode;

  AntennaDetailsAbridgedObjectBuilder({
    String? id,
    String? idAntenna,
    String? classificationMarking,
    String? type,
    String? position,
    AntennaDetailsAbridgedModeEnum? mode,
    bool? steerable,
    bool? beamForming,
    String? manufacturerOrgId,
    double? diameter,
    List<String>? size,
    double? startFrequency,
    double? endFrequency,
    double? beamwidth,
    double? gain,
    double? gainTolerance,
    double? polarization,
    String? description,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    AntennaDetailsAbridgedDataModeEnum? dataMode,
  })
      : _id = id,
        _idAntenna = idAntenna,
        _classificationMarking = classificationMarking,
        _type = type,
        _position = position,
        _mode = mode,
        _steerable = steerable,
        _beamForming = beamForming,
        _manufacturerOrgId = manufacturerOrgId,
        _diameter = diameter,
        _size = size,
        _startFrequency = startFrequency,
        _endFrequency = endFrequency,
        _beamwidth = beamwidth,
        _gain = gain,
        _gainTolerance = gainTolerance,
        _polarization = polarization,
        _description = description,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idAntennaOffset = _idAntenna == null ? null
        : fbBuilder.writeString(_idAntenna!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? positionOffset = _position == null ? null
        : fbBuilder.writeString(_position!);
    final int? manufacturerOrgIdOffset = _manufacturerOrgId == null ? null
        : fbBuilder.writeString(_manufacturerOrgId!);
    final int? sizeOffset = _size == null ? null
        : fbBuilder.writeList(_size!.map(fbBuilder.writeString).toList());
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(24);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idAntennaOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, typeOffset);
    fbBuilder.addOffset(4, positionOffset);
    fbBuilder.addInt8(5, _mode?.value);
    fbBuilder.addBool(6, _steerable);
    fbBuilder.addBool(7, _beamForming);
    fbBuilder.addOffset(8, manufacturerOrgIdOffset);
    fbBuilder.addFloat64(9, _diameter);
    fbBuilder.addOffset(10, sizeOffset);
    fbBuilder.addFloat64(11, _startFrequency);
    fbBuilder.addFloat64(12, _endFrequency);
    fbBuilder.addFloat64(13, _beamwidth);
    fbBuilder.addFloat64(14, _gain);
    fbBuilder.addFloat64(15, _gainTolerance);
    fbBuilder.addFloat64(16, _polarization);
    fbBuilder.addOffset(17, descriptionOffset);
    fbBuilder.addOffset(18, createdAtOffset);
    fbBuilder.addOffset(19, createdByOffset);
    fbBuilder.addOffset(20, sourceOffset);
    fbBuilder.addOffset(21, originOffset);
    fbBuilder.addOffset(22, origNetworkOffset);
    fbBuilder.addInt8(23, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
