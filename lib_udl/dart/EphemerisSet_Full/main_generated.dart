// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class EphemerisSetFullReferenceFrameEnum {
  final int value;
  const EphemerisSetFullReferenceFrameEnum._(this.value);

  factory EphemerisSetFullReferenceFrameEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EphemerisSetFullReferenceFrameEnum');
    }
    return result;
  }

  static EphemerisSetFullReferenceFrameEnum? _createOrNull(int? value) => 
      value == null ? null : EphemerisSetFullReferenceFrameEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const EphemerisSetFullReferenceFrameEnum J2000 = EphemerisSetFullReferenceFrameEnum._(0);

  ///  No description available.
  static const EphemerisSetFullReferenceFrameEnum EFG_TDR = EphemerisSetFullReferenceFrameEnum._(1);

  ///  No description available.
  static const EphemerisSetFullReferenceFrameEnum ECR_ECEF = EphemerisSetFullReferenceFrameEnum._(2);

  ///  No description available.
  static const EphemerisSetFullReferenceFrameEnum TEME = EphemerisSetFullReferenceFrameEnum._(3);

  ///  No description available.
  static const EphemerisSetFullReferenceFrameEnum ITRF = EphemerisSetFullReferenceFrameEnum._(4);

  ///  No description available.
  static const EphemerisSetFullReferenceFrameEnum GCRF = EphemerisSetFullReferenceFrameEnum._(5);
  static const Map<int, EphemerisSetFullReferenceFrameEnum> values = {
    0: J2000,
    1: EFG_TDR,
    2: ECR_ECEF,
    3: TEME,
    4: ITRF,
    5: GCRF};

  static const fb.Reader<EphemerisSetFullReferenceFrameEnum> reader = _EphemerisSetFullReferenceFrameEnumReader();

  @override
  String toString() {
    return 'EphemerisSetFullReferenceFrameEnum{value: $value}';
  }
}

class _EphemerisSetFullReferenceFrameEnumReader extends fb.Reader<EphemerisSetFullReferenceFrameEnum> {
  const _EphemerisSetFullReferenceFrameEnumReader();

  @override
  int get size => 1;

  @override
  EphemerisSetFullReferenceFrameEnum read(fb.BufferContext bc, int offset) =>
      EphemerisSetFullReferenceFrameEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class EphemerisSetFullCovReferenceFrameEnum {
  final int value;
  const EphemerisSetFullCovReferenceFrameEnum._(this.value);

  factory EphemerisSetFullCovReferenceFrameEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EphemerisSetFullCovReferenceFrameEnum');
    }
    return result;
  }

  static EphemerisSetFullCovReferenceFrameEnum? _createOrNull(int? value) => 
      value == null ? null : EphemerisSetFullCovReferenceFrameEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const EphemerisSetFullCovReferenceFrameEnum J2000 = EphemerisSetFullCovReferenceFrameEnum._(0);

  ///  No description available.
  static const EphemerisSetFullCovReferenceFrameEnum UVW = EphemerisSetFullCovReferenceFrameEnum._(1);
  static const Map<int, EphemerisSetFullCovReferenceFrameEnum> values = {
    0: J2000,
    1: UVW};

  static const fb.Reader<EphemerisSetFullCovReferenceFrameEnum> reader = _EphemerisSetFullCovReferenceFrameEnumReader();

  @override
  String toString() {
    return 'EphemerisSetFullCovReferenceFrameEnum{value: $value}';
  }
}

class _EphemerisSetFullCovReferenceFrameEnumReader extends fb.Reader<EphemerisSetFullCovReferenceFrameEnum> {
  const _EphemerisSetFullCovReferenceFrameEnumReader();

  @override
  int get size => 1;

  @override
  EphemerisSetFullCovReferenceFrameEnum read(fb.BufferContext bc, int offset) =>
      EphemerisSetFullCovReferenceFrameEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class EphemerisSetFullDataModeEnum {
  final int value;
  const EphemerisSetFullDataModeEnum._(this.value);

  factory EphemerisSetFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EphemerisSetFullDataModeEnum');
    }
    return result;
  }

  static EphemerisSetFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : EphemerisSetFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const EphemerisSetFullDataModeEnum REAL = EphemerisSetFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const EphemerisSetFullDataModeEnum TEST = EphemerisSetFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const EphemerisSetFullDataModeEnum SIMULATED = EphemerisSetFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const EphemerisSetFullDataModeEnum EXERCISE = EphemerisSetFullDataModeEnum._(3);
  static const Map<int, EphemerisSetFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<EphemerisSetFullDataModeEnum> reader = _EphemerisSetFullDataModeEnumReader();

  @override
  String toString() {
    return 'EphemerisSetFullDataModeEnum{value: $value}';
  }
}

class _EphemerisSetFullDataModeEnumReader extends fb.Reader<EphemerisSetFullDataModeEnum> {
  const _EphemerisSetFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  EphemerisSetFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      EphemerisSetFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// EphemerisSet represents a wrapper or collection of Ephemeris 'points' and meta data indicating the specifics of the propagation of an on-orbit object. Ephemeris is typically distributed in a flat file containing details of the ephemeris generation as well as a large collection of individual points at varying time steps. EphemerisSet is analogous to this flat file.
class EphemerisSetFull {
  EphemerisSetFull._(this._bc, this._bcOffset);
  factory EphemerisSetFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EphemerisSetFull> reader = _EphemerisSetFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: EPHEMERISSET-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the primary satellite on-orbit object.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Start time/first time point of the ephemeris, in ISO 8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get pointStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:10:00.123456Z
  ///  Constraints: No constraints specified.
  String? get usableStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  End time/last time point of the ephemeris, in ISO 8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get pointEndTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2018-01-01T20:50:00.123456Z
  ///  Constraints: No constraints specified.
  String? get usableEndTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Ephemeris step size, in seconds.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get stepSize => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  ///  Number of points contained in the ephemeris.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numPoints => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 22, 0);
  ///  The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE, SCREENING).
  ///  Example: /// Example: LAUNCH
  ///  Constraints: Minimum length = 1, Maximum length = 24
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The pedigree of the ephemeris or source data used for ephemeris generation (e.g.  GPS, SLR, RANGING, PROPAGATED, HYBRID).
  ///  Example: /// Example: PROPAGATED
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get pedigree => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL).
  ///  Example: /// Example: ANALYST
  ///  Constraints: Minimum length = 1, Maximum length = 24
  String? get category => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  ID of the State Vector used to generate the ephemeris.
  ///  Example: /// Example: STATEVECTOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idStateVector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Boolean indicating whether maneuver(s) are incorporated into the ephemeris.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get hasMnvr => const fb.BoolReader().vTableGet(_bc, _bcOffset, 32, false);
  ///  Array of the maneuver IDs of all maneuvers incorporated in the ephemeris.
  ///  Example: /// Example: ['EXAMPLE_ID1', 'EXAMPLE_ID2']
  ///  Constraints: No constraints specified.
  List<String>? get idManeuvers => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  ///  Boolean indicating whether covariance data is provided with the ephemeris.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get hasCov => const fb.BoolReader().vTableGet(_bc, _bcOffset, 36, false);
  ///  Boolean indicating whether acceleration data is provided with the ephemeris.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get hasAccel => const fb.BoolReader().vTableGet(_bc, _bcOffset, 38, false);
  ///  The Central Body of the ephemeris.  Assumed to be Earth, unless otherwise indicated.
  ///  Example: /// Example: Earth
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get centBody => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY).
  ///  Example: /// Example: COWELL
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get integrator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2, GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).
  ///  Example: /// Example: GEM-T3
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get geopotentialModel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.).
  ///  Example: /// Example: JAC70
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get dragModel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Boolean indicating use of lunar/solar data in ephemeris generation.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get lunarSolar => const fb.BoolReader().vTableGet(_bc, _bcOffset, 48, false);
  ///  Boolean indicating use of solid earth tide data in ephemeris generation.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get solidEarthTides => const fb.BoolReader().vTableGet(_bc, _bcOffset, 50, false);
  ///  First derivative of ballistic coefficient (m^2/kg-s).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get bDot => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Model parameter value for energy dissipation rate (EDR), expressed in w/kg.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get edr => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  The recommended interpolation method for the ephemeris data.
  ///  Example: /// Example: LINEAR
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get interpolation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  The recommended interpolation degree for the ephemeris data.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get interpolationDegree => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 58, 0);
  ///  Filename of the raw file used to provide the ephemeris data including filetype extension, if applicable. This file may be retrieved using the 'getFile' operation as specified in the 'EphemerisSet' OpenAPI docs.
  ///  Example: /// Example: Example file name
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get filename => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Additional source provided comments associated with the ephemeris.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get comments => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris were generated using the last observation available.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: Example descriptor
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get descriptor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  EphemerisSetFullReferenceFrameEnum get referenceFrame => EphemerisSetFullReferenceFrameEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 68, 0));
  ///  The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  EphemerisSetFullCovReferenceFrameEnum get covReferenceFrame => EphemerisSetFullCovReferenceFrameEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 70, 0));
  ///  Time the row was created in the database, in UTC.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  EphemerisSetFullDataModeEnum get dataMode => EphemerisSetFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 80, 0));
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get stateVector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 84, 0);
  ///  The list of ephemeris states belonging to the EphemerisSet. Each ephemeris point is associated with a parent Ephemeris Set via the EphemerisSet ID (esId).
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get ephemerisList => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 86);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get onOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 90);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);

  @override
  String toString() {
    return 'EphemerisSetFull{id: ${id}, classificationMarking: ${classificationMarking}, idOnOrbit: ${idOnOrbit}, origObjectId: ${origObjectId}, pointStartTime: ${pointStartTime}, usableStartTime: ${usableStartTime}, pointEndTime: ${pointEndTime}, usableEndTime: ${usableEndTime}, stepSize: ${stepSize}, numPoints: ${numPoints}, type: ${type}, pedigree: ${pedigree}, category: ${category}, idStateVector: ${idStateVector}, hasMnvr: ${hasMnvr}, idManeuvers: ${idManeuvers}, hasCov: ${hasCov}, hasAccel: ${hasAccel}, centBody: ${centBody}, integrator: ${integrator}, geopotentialModel: ${geopotentialModel}, dragModel: ${dragModel}, lunarSolar: ${lunarSolar}, solidEarthTides: ${solidEarthTides}, bDot: ${bDot}, edr: ${edr}, interpolation: ${interpolation}, interpolationDegree: ${interpolationDegree}, filename: ${filename}, comments: ${comments}, description: ${description}, descriptor: ${descriptor}, referenceFrame: ${referenceFrame}, covReferenceFrame: ${covReferenceFrame}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, stateVector: ${stateVector}, satNo: ${satNo}, ephemerisList: ${ephemerisList}, onOrbit: ${onOrbit}, tags: ${tags}, transactionId: ${transactionId}, origNetwork: ${origNetwork}}';
  }
}

class _EphemerisSetFullReader extends fb.TableReader<EphemerisSetFull> {
  const _EphemerisSetFullReader();

  @override
  EphemerisSetFull createObject(fb.BufferContext bc, int offset) => 
    EphemerisSetFull._(bc, offset);
}

class EphemerisSetFullBuilder {
  EphemerisSetFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(46);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addPointStartTimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addUsableStartTimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addPointEndTimeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addUsableEndTimeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addStepSize(int? stepSize) {
    fbBuilder.addInt32(8, stepSize);
    return fbBuilder.offset;
  }
  int addNumPoints(int? numPoints) {
    fbBuilder.addInt32(9, numPoints);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addPedigreeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCategoryOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addIdStateVectorOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addHasMnvr(bool? hasMnvr) {
    fbBuilder.addBool(14, hasMnvr);
    return fbBuilder.offset;
  }
  int addIdManeuversOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addHasCov(bool? hasCov) {
    fbBuilder.addBool(16, hasCov);
    return fbBuilder.offset;
  }
  int addHasAccel(bool? hasAccel) {
    fbBuilder.addBool(17, hasAccel);
    return fbBuilder.offset;
  }
  int addCentBodyOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addIntegratorOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addGeopotentialModelOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addDragModelOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addLunarSolar(bool? lunarSolar) {
    fbBuilder.addBool(22, lunarSolar);
    return fbBuilder.offset;
  }
  int addSolidEarthTides(bool? solidEarthTides) {
    fbBuilder.addBool(23, solidEarthTides);
    return fbBuilder.offset;
  }
  int addBDot(double? bDot) {
    fbBuilder.addFloat64(24, bDot);
    return fbBuilder.offset;
  }
  int addEdr(double? edr) {
    fbBuilder.addFloat64(25, edr);
    return fbBuilder.offset;
  }
  int addInterpolationOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addInterpolationDegree(int? interpolationDegree) {
    fbBuilder.addInt32(27, interpolationDegree);
    return fbBuilder.offset;
  }
  int addFilenameOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addCommentsOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addReferenceFrame(EphemerisSetFullReferenceFrameEnum? referenceFrame) {
    fbBuilder.addInt8(32, referenceFrame?.value);
    return fbBuilder.offset;
  }
  int addCovReferenceFrame(EphemerisSetFullCovReferenceFrameEnum? covReferenceFrame) {
    fbBuilder.addInt8(33, covReferenceFrame?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addDataMode(EphemerisSetFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(38, dataMode?.value);
    return fbBuilder.offset;
  }
  int addStateVectorOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(40, satNo);
    return fbBuilder.offset;
  }
  int addEphemerisListOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EphemerisSetFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idOnOrbit;
  final String? _origObjectId;
  final String? _pointStartTime;
  final String? _usableStartTime;
  final String? _pointEndTime;
  final String? _usableEndTime;
  final int? _stepSize;
  final int? _numPoints;
  final String? _type;
  final String? _pedigree;
  final String? _category;
  final String? _idStateVector;
  final bool? _hasMnvr;
  final List<String>? _idManeuvers;
  final bool? _hasCov;
  final bool? _hasAccel;
  final String? _centBody;
  final String? _integrator;
  final String? _geopotentialModel;
  final String? _dragModel;
  final bool? _lunarSolar;
  final bool? _solidEarthTides;
  final double? _bDot;
  final double? _edr;
  final String? _interpolation;
  final int? _interpolationDegree;
  final String? _filename;
  final String? _comments;
  final String? _description;
  final String? _descriptor;
  final EphemerisSetFullReferenceFrameEnum? _referenceFrame;
  final EphemerisSetFullCovReferenceFrameEnum? _covReferenceFrame;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final EphemerisSetFullDataModeEnum? _dataMode;
  final String? _stateVector;
  final int? _satNo;
  final List<String>? _ephemerisList;
  final String? _onOrbit;
  final List<String>? _tags;
  final String? _transactionId;
  final String? _origNetwork;

  EphemerisSetFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idOnOrbit,
    String? origObjectId,
    String? pointStartTime,
    String? usableStartTime,
    String? pointEndTime,
    String? usableEndTime,
    int? stepSize,
    int? numPoints,
    String? type,
    String? pedigree,
    String? category,
    String? idStateVector,
    bool? hasMnvr,
    List<String>? idManeuvers,
    bool? hasCov,
    bool? hasAccel,
    String? centBody,
    String? integrator,
    String? geopotentialModel,
    String? dragModel,
    bool? lunarSolar,
    bool? solidEarthTides,
    double? bDot,
    double? edr,
    String? interpolation,
    int? interpolationDegree,
    String? filename,
    String? comments,
    String? description,
    String? descriptor,
    EphemerisSetFullReferenceFrameEnum? referenceFrame,
    EphemerisSetFullCovReferenceFrameEnum? covReferenceFrame,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    EphemerisSetFullDataModeEnum? dataMode,
    String? stateVector,
    int? satNo,
    List<String>? ephemerisList,
    String? onOrbit,
    List<String>? tags,
    String? transactionId,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idOnOrbit = idOnOrbit,
        _origObjectId = origObjectId,
        _pointStartTime = pointStartTime,
        _usableStartTime = usableStartTime,
        _pointEndTime = pointEndTime,
        _usableEndTime = usableEndTime,
        _stepSize = stepSize,
        _numPoints = numPoints,
        _type = type,
        _pedigree = pedigree,
        _category = category,
        _idStateVector = idStateVector,
        _hasMnvr = hasMnvr,
        _idManeuvers = idManeuvers,
        _hasCov = hasCov,
        _hasAccel = hasAccel,
        _centBody = centBody,
        _integrator = integrator,
        _geopotentialModel = geopotentialModel,
        _dragModel = dragModel,
        _lunarSolar = lunarSolar,
        _solidEarthTides = solidEarthTides,
        _bDot = bDot,
        _edr = edr,
        _interpolation = interpolation,
        _interpolationDegree = interpolationDegree,
        _filename = filename,
        _comments = comments,
        _description = description,
        _descriptor = descriptor,
        _referenceFrame = referenceFrame,
        _covReferenceFrame = covReferenceFrame,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _stateVector = stateVector,
        _satNo = satNo,
        _ephemerisList = ephemerisList,
        _onOrbit = onOrbit,
        _tags = tags,
        _transactionId = transactionId,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? pointStartTimeOffset = _pointStartTime == null ? null
        : fbBuilder.writeString(_pointStartTime!);
    final int? usableStartTimeOffset = _usableStartTime == null ? null
        : fbBuilder.writeString(_usableStartTime!);
    final int? pointEndTimeOffset = _pointEndTime == null ? null
        : fbBuilder.writeString(_pointEndTime!);
    final int? usableEndTimeOffset = _usableEndTime == null ? null
        : fbBuilder.writeString(_usableEndTime!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? pedigreeOffset = _pedigree == null ? null
        : fbBuilder.writeString(_pedigree!);
    final int? categoryOffset = _category == null ? null
        : fbBuilder.writeString(_category!);
    final int? idStateVectorOffset = _idStateVector == null ? null
        : fbBuilder.writeString(_idStateVector!);
    final int? idManeuversOffset = _idManeuvers == null ? null
        : fbBuilder.writeList(_idManeuvers!.map(fbBuilder.writeString).toList());
    final int? centBodyOffset = _centBody == null ? null
        : fbBuilder.writeString(_centBody!);
    final int? integratorOffset = _integrator == null ? null
        : fbBuilder.writeString(_integrator!);
    final int? geopotentialModelOffset = _geopotentialModel == null ? null
        : fbBuilder.writeString(_geopotentialModel!);
    final int? dragModelOffset = _dragModel == null ? null
        : fbBuilder.writeString(_dragModel!);
    final int? interpolationOffset = _interpolation == null ? null
        : fbBuilder.writeString(_interpolation!);
    final int? filenameOffset = _filename == null ? null
        : fbBuilder.writeString(_filename!);
    final int? commentsOffset = _comments == null ? null
        : fbBuilder.writeString(_comments!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? descriptorOffset = _descriptor == null ? null
        : fbBuilder.writeString(_descriptor!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? stateVectorOffset = _stateVector == null ? null
        : fbBuilder.writeString(_stateVector!);
    final int? ephemerisListOffset = _ephemerisList == null ? null
        : fbBuilder.writeList(_ephemerisList!.map(fbBuilder.writeString).toList());
    final int? onOrbitOffset = _onOrbit == null ? null
        : fbBuilder.writeString(_onOrbit!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(46);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idOnOrbitOffset);
    fbBuilder.addOffset(3, origObjectIdOffset);
    fbBuilder.addOffset(4, pointStartTimeOffset);
    fbBuilder.addOffset(5, usableStartTimeOffset);
    fbBuilder.addOffset(6, pointEndTimeOffset);
    fbBuilder.addOffset(7, usableEndTimeOffset);
    fbBuilder.addInt32(8, _stepSize);
    fbBuilder.addInt32(9, _numPoints);
    fbBuilder.addOffset(10, typeOffset);
    fbBuilder.addOffset(11, pedigreeOffset);
    fbBuilder.addOffset(12, categoryOffset);
    fbBuilder.addOffset(13, idStateVectorOffset);
    fbBuilder.addBool(14, _hasMnvr);
    fbBuilder.addOffset(15, idManeuversOffset);
    fbBuilder.addBool(16, _hasCov);
    fbBuilder.addBool(17, _hasAccel);
    fbBuilder.addOffset(18, centBodyOffset);
    fbBuilder.addOffset(19, integratorOffset);
    fbBuilder.addOffset(20, geopotentialModelOffset);
    fbBuilder.addOffset(21, dragModelOffset);
    fbBuilder.addBool(22, _lunarSolar);
    fbBuilder.addBool(23, _solidEarthTides);
    fbBuilder.addFloat64(24, _bDot);
    fbBuilder.addFloat64(25, _edr);
    fbBuilder.addOffset(26, interpolationOffset);
    fbBuilder.addInt32(27, _interpolationDegree);
    fbBuilder.addOffset(28, filenameOffset);
    fbBuilder.addOffset(29, commentsOffset);
    fbBuilder.addOffset(30, descriptionOffset);
    fbBuilder.addOffset(31, descriptorOffset);
    fbBuilder.addInt8(32, _referenceFrame?.value);
    fbBuilder.addInt8(33, _covReferenceFrame?.value);
    fbBuilder.addOffset(34, createdAtOffset);
    fbBuilder.addOffset(35, createdByOffset);
    fbBuilder.addOffset(36, sourceOffset);
    fbBuilder.addOffset(37, originOffset);
    fbBuilder.addInt8(38, _dataMode?.value);
    fbBuilder.addOffset(39, stateVectorOffset);
    fbBuilder.addInt32(40, _satNo);
    fbBuilder.addOffset(41, ephemerisListOffset);
    fbBuilder.addOffset(42, onOrbitOffset);
    fbBuilder.addOffset(43, tagsOffset);
    fbBuilder.addOffset(44, transactionIdOffset);
    fbBuilder.addOffset(45, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
