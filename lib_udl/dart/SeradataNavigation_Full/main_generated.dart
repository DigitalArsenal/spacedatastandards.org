// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SeradataNavigationFullDataModeEnum {
  final int value;
  const SeradataNavigationFullDataModeEnum._(this.value);

  factory SeradataNavigationFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SeradataNavigationFullDataModeEnum');
    }
    return result;
  }

  static SeradataNavigationFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SeradataNavigationFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SeradataNavigationFullDataModeEnum REAL = SeradataNavigationFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SeradataNavigationFullDataModeEnum TEST = SeradataNavigationFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SeradataNavigationFullDataModeEnum SIMULATED = SeradataNavigationFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SeradataNavigationFullDataModeEnum EXERCISE = SeradataNavigationFullDataModeEnum._(3);
  static const Map<int, SeradataNavigationFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SeradataNavigationFullDataModeEnum> reader = _SeradataNavigationFullDataModeEnumReader();

  @override
  String toString() {
    return 'SeradataNavigationFullDataModeEnum{value: $value}';
  }
}

class _SeradataNavigationFullDataModeEnumReader extends fb.Reader<SeradataNavigationFullDataModeEnum> {
  const _SeradataNavigationFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SeradataNavigationFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      SeradataNavigationFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Details for a navigation payload from  Seradata.
class SeradataNavigationFull {
  SeradataNavigationFull._(this._bc, this._bcOffset);
  factory SeradataNavigationFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SeradataNavigationFull> reader = _SeradataNavigationFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SERADATANAVIGATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  UUID of the parent Navigation record.
  ///  Example: /// Example: idNavigation
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idNavigation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  ///  Example: /// Example: spacecraftId
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get spacecraftId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Hosted for company/Organization Id.
  ///  Example: /// Example: hostedForCompanyOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get hostedForCompanyOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Manufacturer Organization Id.
  ///  Example: /// Example: manufacturerOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get manufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Navigation payload type, e.g. WAAS, GAGAN, etc.
  ///  Example: /// Example: WAAS
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get payloadType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Modes of operation.
  ///  Example: /// Example: Military
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get modes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Frequency for this payload.
  ///  Example: /// Example: 1234
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get modeFrequency => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Location accuracy in meters.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get locationAccuracy => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  ///  Example: /// Example: partnerSpacecraftId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get partnerSpacecraftId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Area of coverage, e.g. Worldwide, India, etc.
  ///  Example: /// Example: Worldwide
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get areaCoverage => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Payload notes.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Sensor name from Seradata, e.g. WAAS GEO-5, etc.
  ///  Example: /// Example: WAAS GEO-5
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Type of clock, e.g. Rubidium, Hydrogen Maser, etc.
  ///  Example: /// Example: Rubidium
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get clockType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SeradataNavigationFullDataModeEnum get dataMode => SeradataNavigationFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 48, 0));

  @override
  String toString() {
    return 'SeradataNavigationFull{id: ${id}, classificationMarking: ${classificationMarking}, idNavigation: ${idNavigation}, spacecraftId: ${spacecraftId}, hostedForCompanyOrgId: ${hostedForCompanyOrgId}, manufacturerOrgId: ${manufacturerOrgId}, payloadType: ${payloadType}, modes: ${modes}, modeFrequency: ${modeFrequency}, locationAccuracy: ${locationAccuracy}, partnerSpacecraftId: ${partnerSpacecraftId}, areaCoverage: ${areaCoverage}, notes: ${notes}, name: ${name}, clockType: ${clockType}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _SeradataNavigationFullReader extends fb.TableReader<SeradataNavigationFull> {
  const _SeradataNavigationFullReader();

  @override
  SeradataNavigationFull createObject(fb.BufferContext bc, int offset) => 
    SeradataNavigationFull._(bc, offset);
}

class SeradataNavigationFullBuilder {
  SeradataNavigationFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(23);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdNavigationOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSpacecraftIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addHostedForCompanyOrgIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addPayloadTypeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addModesOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addModeFrequencyOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addLocationAccuracy(double? locationAccuracy) {
    fbBuilder.addFloat64(9, locationAccuracy);
    return fbBuilder.offset;
  }
  int addPartnerSpacecraftIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addAreaCoverageOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addClockTypeOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SeradataNavigationFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(22, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SeradataNavigationFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idNavigation;
  final String? _spacecraftId;
  final String? _hostedForCompanyOrgId;
  final String? _manufacturerOrgId;
  final String? _payloadType;
  final String? _modes;
  final String? _modeFrequency;
  final double? _locationAccuracy;
  final String? _partnerSpacecraftId;
  final String? _areaCoverage;
  final String? _notes;
  final String? _name;
  final String? _clockType;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SeradataNavigationFullDataModeEnum? _dataMode;

  SeradataNavigationFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idNavigation,
    String? spacecraftId,
    String? hostedForCompanyOrgId,
    String? manufacturerOrgId,
    String? payloadType,
    String? modes,
    String? modeFrequency,
    double? locationAccuracy,
    String? partnerSpacecraftId,
    String? areaCoverage,
    String? notes,
    String? name,
    String? clockType,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    SeradataNavigationFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idNavigation = idNavigation,
        _spacecraftId = spacecraftId,
        _hostedForCompanyOrgId = hostedForCompanyOrgId,
        _manufacturerOrgId = manufacturerOrgId,
        _payloadType = payloadType,
        _modes = modes,
        _modeFrequency = modeFrequency,
        _locationAccuracy = locationAccuracy,
        _partnerSpacecraftId = partnerSpacecraftId,
        _areaCoverage = areaCoverage,
        _notes = notes,
        _name = name,
        _clockType = clockType,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idNavigationOffset = _idNavigation == null ? null
        : fbBuilder.writeString(_idNavigation!);
    final int? spacecraftIdOffset = _spacecraftId == null ? null
        : fbBuilder.writeString(_spacecraftId!);
    final int? hostedForCompanyOrgIdOffset = _hostedForCompanyOrgId == null ? null
        : fbBuilder.writeString(_hostedForCompanyOrgId!);
    final int? manufacturerOrgIdOffset = _manufacturerOrgId == null ? null
        : fbBuilder.writeString(_manufacturerOrgId!);
    final int? payloadTypeOffset = _payloadType == null ? null
        : fbBuilder.writeString(_payloadType!);
    final int? modesOffset = _modes == null ? null
        : fbBuilder.writeString(_modes!);
    final int? modeFrequencyOffset = _modeFrequency == null ? null
        : fbBuilder.writeString(_modeFrequency!);
    final int? partnerSpacecraftIdOffset = _partnerSpacecraftId == null ? null
        : fbBuilder.writeString(_partnerSpacecraftId!);
    final int? areaCoverageOffset = _areaCoverage == null ? null
        : fbBuilder.writeString(_areaCoverage!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? clockTypeOffset = _clockType == null ? null
        : fbBuilder.writeString(_clockType!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(23);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idNavigationOffset);
    fbBuilder.addOffset(3, spacecraftIdOffset);
    fbBuilder.addOffset(4, hostedForCompanyOrgIdOffset);
    fbBuilder.addOffset(5, manufacturerOrgIdOffset);
    fbBuilder.addOffset(6, payloadTypeOffset);
    fbBuilder.addOffset(7, modesOffset);
    fbBuilder.addOffset(8, modeFrequencyOffset);
    fbBuilder.addFloat64(9, _locationAccuracy);
    fbBuilder.addOffset(10, partnerSpacecraftIdOffset);
    fbBuilder.addOffset(11, areaCoverageOffset);
    fbBuilder.addOffset(12, notesOffset);
    fbBuilder.addOffset(13, nameOffset);
    fbBuilder.addOffset(14, clockTypeOffset);
    fbBuilder.addOffset(15, createdAtOffset);
    fbBuilder.addOffset(16, createdByOffset);
    fbBuilder.addOffset(17, updatedAtOffset);
    fbBuilder.addOffset(18, updatedByOffset);
    fbBuilder.addOffset(19, sourceOffset);
    fbBuilder.addOffset(20, originOffset);
    fbBuilder.addOffset(21, origNetworkOffset);
    fbBuilder.addInt8(22, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
