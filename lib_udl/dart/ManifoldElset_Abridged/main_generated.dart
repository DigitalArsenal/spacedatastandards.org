// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class ManifoldElsetAbridgedDataModeEnum {
  final int value;
  const ManifoldElsetAbridgedDataModeEnum._(this.value);

  factory ManifoldElsetAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ManifoldElsetAbridgedDataModeEnum');
    }
    return result;
  }

  static ManifoldElsetAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : ManifoldElsetAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const ManifoldElsetAbridgedDataModeEnum REAL = ManifoldElsetAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const ManifoldElsetAbridgedDataModeEnum TEST = ManifoldElsetAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const ManifoldElsetAbridgedDataModeEnum SIMULATED = ManifoldElsetAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const ManifoldElsetAbridgedDataModeEnum EXERCISE = ManifoldElsetAbridgedDataModeEnum._(3);
  static const Map<int, ManifoldElsetAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<ManifoldElsetAbridgedDataModeEnum> reader = _ManifoldElsetAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'ManifoldElsetAbridgedDataModeEnum{value: $value}';
  }
}

class _ManifoldElsetAbridgedDataModeEnumReader extends fb.Reader<ManifoldElsetAbridgedDataModeEnum> {
  const _ManifoldElsetAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  ManifoldElsetAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      ManifoldElsetAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.
class ManifoldElsetAbridged {
  ManifoldElsetAbridged._(this._bc, this._bcOffset);
  factory ManifoldElsetAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ManifoldElsetAbridged> reader = _ManifoldElsetAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: MANIFOLDELSET-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Identifier of the parent Manifold record.
  ///  Example: /// Example: REF-MANIFOLD-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idManifold => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  A placeholder satellite number and not a true NORAD catalog number.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get tmpSatNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Elset epoch time in ISO 8601 UTC format, with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get epoch => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The constant angular speed required for the body to complete one circular orbit in the same amount of time as the actual elliptical orbit with variable speed. Measured in revolutions per day.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get meanMotion => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get eccentricity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  ///  Example: /// Example: 90.23
  ///  Constraints: No constraints specified.
  double get inclination => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get raan => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get argOfPerigee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get meanAnomaly => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get revNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get bStar => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get meanMotionDot => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get meanMotionDdot => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get semiMajorAxis => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Period of the orbit equal to inverse of mean motion.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get period => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  The Orbit point furthest from the center of the earth in kilometers.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get apogee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  The orbit point nearest to the center of the earth in kilometers.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get perigee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  ///  Example: /// Example: No example provided.
  ///  Constraints: Minimum length = 0, Maximum length = 69
  String? get line1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  ///  Example: /// Example: No example provided.
  ///  Constraints: Minimum length = 0, Maximum length = 69
  String? get line2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  ManifoldElsetAbridgedDataModeEnum get dataMode => ManifoldElsetAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 54, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);

  @override
  String toString() {
    return 'ManifoldElsetAbridged{id: ${id}, idManifold: ${idManifold}, classificationMarking: ${classificationMarking}, tmpSatNo: ${tmpSatNo}, epoch: ${epoch}, meanMotion: ${meanMotion}, eccentricity: ${eccentricity}, inclination: ${inclination}, raan: ${raan}, argOfPerigee: ${argOfPerigee}, meanAnomaly: ${meanAnomaly}, revNo: ${revNo}, bStar: ${bStar}, meanMotionDot: ${meanMotionDot}, meanMotionDdot: ${meanMotionDdot}, semiMajorAxis: ${semiMajorAxis}, period: ${period}, apogee: ${apogee}, perigee: ${perigee}, line1: ${line1}, line2: ${line2}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _ManifoldElsetAbridgedReader extends fb.TableReader<ManifoldElsetAbridged> {
  const _ManifoldElsetAbridgedReader();

  @override
  ManifoldElsetAbridged createObject(fb.BufferContext bc, int offset) => 
    ManifoldElsetAbridged._(bc, offset);
}

class ManifoldElsetAbridgedBuilder {
  ManifoldElsetAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(27);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdManifoldOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTmpSatNo(int? tmpSatNo) {
    fbBuilder.addInt32(3, tmpSatNo);
    return fbBuilder.offset;
  }
  int addEpochOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMeanMotion(double? meanMotion) {
    fbBuilder.addFloat64(5, meanMotion);
    return fbBuilder.offset;
  }
  int addEccentricity(double? eccentricity) {
    fbBuilder.addFloat64(6, eccentricity);
    return fbBuilder.offset;
  }
  int addInclination(double? inclination) {
    fbBuilder.addFloat64(7, inclination);
    return fbBuilder.offset;
  }
  int addRaan(double? raan) {
    fbBuilder.addFloat64(8, raan);
    return fbBuilder.offset;
  }
  int addArgOfPerigee(double? argOfPerigee) {
    fbBuilder.addFloat64(9, argOfPerigee);
    return fbBuilder.offset;
  }
  int addMeanAnomaly(double? meanAnomaly) {
    fbBuilder.addFloat64(10, meanAnomaly);
    return fbBuilder.offset;
  }
  int addRevNo(int? revNo) {
    fbBuilder.addInt32(11, revNo);
    return fbBuilder.offset;
  }
  int addBStar(double? bStar) {
    fbBuilder.addFloat64(12, bStar);
    return fbBuilder.offset;
  }
  int addMeanMotionDot(double? meanMotionDot) {
    fbBuilder.addFloat64(13, meanMotionDot);
    return fbBuilder.offset;
  }
  int addMeanMotionDdot(double? meanMotionDdot) {
    fbBuilder.addFloat64(14, meanMotionDdot);
    return fbBuilder.offset;
  }
  int addSemiMajorAxis(double? semiMajorAxis) {
    fbBuilder.addFloat64(15, semiMajorAxis);
    return fbBuilder.offset;
  }
  int addPeriod(double? period) {
    fbBuilder.addFloat64(16, period);
    return fbBuilder.offset;
  }
  int addApogee(double? apogee) {
    fbBuilder.addFloat64(17, apogee);
    return fbBuilder.offset;
  }
  int addPerigee(double? perigee) {
    fbBuilder.addFloat64(18, perigee);
    return fbBuilder.offset;
  }
  int addLine1Offset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addLine2Offset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addDataMode(ManifoldElsetAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(25, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ManifoldElsetAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idManifold;
  final String? _classificationMarking;
  final int? _tmpSatNo;
  final String? _epoch;
  final double? _meanMotion;
  final double? _eccentricity;
  final double? _inclination;
  final double? _raan;
  final double? _argOfPerigee;
  final double? _meanAnomaly;
  final int? _revNo;
  final double? _bStar;
  final double? _meanMotionDot;
  final double? _meanMotionDdot;
  final double? _semiMajorAxis;
  final double? _period;
  final double? _apogee;
  final double? _perigee;
  final String? _line1;
  final String? _line2;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final ManifoldElsetAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;

  ManifoldElsetAbridgedObjectBuilder({
    String? id,
    String? idManifold,
    String? classificationMarking,
    int? tmpSatNo,
    String? epoch,
    double? meanMotion,
    double? eccentricity,
    double? inclination,
    double? raan,
    double? argOfPerigee,
    double? meanAnomaly,
    int? revNo,
    double? bStar,
    double? meanMotionDot,
    double? meanMotionDdot,
    double? semiMajorAxis,
    double? period,
    double? apogee,
    double? perigee,
    String? line1,
    String? line2,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    ManifoldElsetAbridgedDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _idManifold = idManifold,
        _classificationMarking = classificationMarking,
        _tmpSatNo = tmpSatNo,
        _epoch = epoch,
        _meanMotion = meanMotion,
        _eccentricity = eccentricity,
        _inclination = inclination,
        _raan = raan,
        _argOfPerigee = argOfPerigee,
        _meanAnomaly = meanAnomaly,
        _revNo = revNo,
        _bStar = bStar,
        _meanMotionDot = meanMotionDot,
        _meanMotionDdot = meanMotionDdot,
        _semiMajorAxis = semiMajorAxis,
        _period = period,
        _apogee = apogee,
        _perigee = perigee,
        _line1 = line1,
        _line2 = line2,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idManifoldOffset = _idManifold == null ? null
        : fbBuilder.writeString(_idManifold!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? epochOffset = _epoch == null ? null
        : fbBuilder.writeString(_epoch!);
    final int? line1Offset = _line1 == null ? null
        : fbBuilder.writeString(_line1!);
    final int? line2Offset = _line2 == null ? null
        : fbBuilder.writeString(_line2!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(27);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idManifoldOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addInt32(3, _tmpSatNo);
    fbBuilder.addOffset(4, epochOffset);
    fbBuilder.addFloat64(5, _meanMotion);
    fbBuilder.addFloat64(6, _eccentricity);
    fbBuilder.addFloat64(7, _inclination);
    fbBuilder.addFloat64(8, _raan);
    fbBuilder.addFloat64(9, _argOfPerigee);
    fbBuilder.addFloat64(10, _meanAnomaly);
    fbBuilder.addInt32(11, _revNo);
    fbBuilder.addFloat64(12, _bStar);
    fbBuilder.addFloat64(13, _meanMotionDot);
    fbBuilder.addFloat64(14, _meanMotionDdot);
    fbBuilder.addFloat64(15, _semiMajorAxis);
    fbBuilder.addFloat64(16, _period);
    fbBuilder.addFloat64(17, _apogee);
    fbBuilder.addFloat64(18, _perigee);
    fbBuilder.addOffset(19, line1Offset);
    fbBuilder.addOffset(20, line2Offset);
    fbBuilder.addOffset(21, createdAtOffset);
    fbBuilder.addOffset(22, createdByOffset);
    fbBuilder.addOffset(23, sourceOffset);
    fbBuilder.addOffset(24, originOffset);
    fbBuilder.addInt8(25, _dataMode?.value);
    fbBuilder.addOffset(26, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
