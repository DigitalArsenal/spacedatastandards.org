// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class StarCatalogFullAstrometryOriginEnum {
  final int value;
  const StarCatalogFullAstrometryOriginEnum._(this.value);

  factory StarCatalogFullAstrometryOriginEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StarCatalogFullAstrometryOriginEnum');
    }
    return result;
  }

  static StarCatalogFullAstrometryOriginEnum? _createOrNull(int? value) => 
      value == null ? null : StarCatalogFullAstrometryOriginEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const StarCatalogFullAstrometryOriginEnum GAIADR3 = StarCatalogFullAstrometryOriginEnum._(0);

  ///  No description available.
  static const StarCatalogFullAstrometryOriginEnum HIPPARCOS = StarCatalogFullAstrometryOriginEnum._(1);

  ///  No description available.
  static const StarCatalogFullAstrometryOriginEnum USNOBSC = StarCatalogFullAstrometryOriginEnum._(2);
  static const Map<int, StarCatalogFullAstrometryOriginEnum> values = {
    0: GAIADR3,
    1: HIPPARCOS,
    2: USNOBSC};

  static const fb.Reader<StarCatalogFullAstrometryOriginEnum> reader = _StarCatalogFullAstrometryOriginEnumReader();

  @override
  String toString() {
    return 'StarCatalogFullAstrometryOriginEnum{value: $value}';
  }
}

class _StarCatalogFullAstrometryOriginEnumReader extends fb.Reader<StarCatalogFullAstrometryOriginEnum> {
  const _StarCatalogFullAstrometryOriginEnumReader();

  @override
  int get size => 1;

  @override
  StarCatalogFullAstrometryOriginEnum read(fb.BufferContext bc, int offset) =>
      StarCatalogFullAstrometryOriginEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class StarCatalogFullDataModeEnum {
  final int value;
  const StarCatalogFullDataModeEnum._(this.value);

  factory StarCatalogFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StarCatalogFullDataModeEnum');
    }
    return result;
  }

  static StarCatalogFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : StarCatalogFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const StarCatalogFullDataModeEnum REAL = StarCatalogFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const StarCatalogFullDataModeEnum TEST = StarCatalogFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const StarCatalogFullDataModeEnum SIMULATED = StarCatalogFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const StarCatalogFullDataModeEnum EXERCISE = StarCatalogFullDataModeEnum._(3);
  static const Map<int, StarCatalogFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<StarCatalogFullDataModeEnum> reader = _StarCatalogFullDataModeEnumReader();

  @override
  String toString() {
    return 'StarCatalogFullDataModeEnum{value: $value}';
  }
}

class _StarCatalogFullDataModeEnumReader extends fb.Reader<StarCatalogFullDataModeEnum> {
  const _StarCatalogFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  StarCatalogFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      StarCatalogFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// The star catalog provides the position, proper motion, parallax, and photometric magnitudes at various bandpasses of a star.
class StarCatalogFull {
  StarCatalogFull._(this._bc, this._bcOffset);
  factory StarCatalogFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StarCatalogFull> reader = _StarCatalogFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: STAR-CAT-DATASET-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The ID of this object in the specific catalog associated with this record.
  ///  Example: /// Example: 12345
  ///  Constraints: No constraints specified.
  int get csId => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
  ///  Example: /// Example: 12345
  ///  Constraints: No constraints specified.
  int get gncCatId => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  The ID of this object in the Gaia DR3 Catalog.
  ///  Example: /// Example: 89012345678901
  ///  Constraints: No constraints specified.
  int get gaiadr3CatId => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  The ID of this object in the Hipparcos Catalog.
  ///  Example: /// Example: 12345
  ///  Constraints: No constraints specified.
  int get hipCatId => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  The version of the catalog associated with this object.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  String? get catVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.
  ///  Example: /// Example: 14.43
  ///  Constraints: No constraints specified.
  double get ra => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.
  ///  Example: /// Example: 509.466
  ///  Constraints: No constraints specified.
  double get raUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.
  ///  Example: /// Example: 21.8
  ///  Constraints: No constraints specified.
  double get dec => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.
  ///  Example: /// Example: 40.996
  ///  Constraints: No constraints specified.
  double get decUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get posUncFlag => const fb.BoolReader().vTableGet(_bc, _bcOffset, 26, false);
  ///  Absolute stellar parallax of the source, in milliarcseconds.
  ///  Example: /// Example: -6.8
  ///  Constraints: No constraints specified.
  double get parallax => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Uncertainty of the stellar parallax, in milliarcseconds.
  ///  Example: /// Example: 82.35
  ///  Constraints: No constraints specified.
  double get parallaxUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.
  ///  Example: /// Example: 1000.45
  ///  Constraints: No constraints specified.
  double get pmra => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Uncertainty of proper motion in right ascension, in milliarcseconds/year.
  ///  Example: /// Example: 5.6
  ///  Constraints: No constraints specified.
  double get pmraUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.
  ///  Example: /// Example: -970.1003
  ///  Constraints: No constraints specified.
  double get pmdec => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Uncertainty of proper motion in declination, in milliarcseconds/year.
  ///  Example: /// Example: 1.22
  ///  Constraints: No constraints specified.
  double get pmdecUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get pmUncFlag => const fb.BoolReader().vTableGet(_bc, _bcOffset, 40, false);
  ///  Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].
  ///  Example: /// Example: GAIADR3
  ///  Constraints: Minimum length = 1, Maximum length = 16
  StarCatalogFullAstrometryOriginEnum get astrometryOrigin => StarCatalogFullAstrometryOriginEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 42, 0));
  ///  Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).
  ///  Example: /// Example: 2016
  ///  Constraints: No constraints specified.
  double get starEpoch => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Gaia DR3 optical photometric G-band magnitude in the Vega scale.
  ///  Example: /// Example: 0.0046
  ///  Constraints: No constraints specified.
  double get gmag => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
  ///  Example: /// Example: 0.00292
  ///  Constraints: No constraints specified.
  double get gmagUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
  ///  Example: /// Example: 0.04559
  ///  Constraints: No constraints specified.
  double get bpmag => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
  ///  Example: /// Example: 0.2227
  ///  Constraints: No constraints specified.
  double get bpmagUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Gaia DR3 optical Rp-band magnitude in the Vega scale.
  ///  Example: /// Example: 8.0047
  ///  Constraints: No constraints specified.
  double get rpmag => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
  ///  Example: /// Example: 1.233
  ///  Constraints: No constraints specified.
  double get rpmagUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.
  ///  Example: /// Example: 9.515
  ///  Constraints: No constraints specified.
  double get jmag => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.
  ///  Example: /// Example: 7.559
  ///  Constraints: No constraints specified.
  double get jmagUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.
  ///  Example: /// Example: 13.545
  ///  Constraints: No constraints specified.
  double get kmag => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.
  ///  Example: /// Example: 0.052
  ///  Constraints: No constraints specified.
  double get kmagUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.
  ///  Example: /// Example: 12.126
  ///  Constraints: No constraints specified.
  double get hmag => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.
  ///  Example: /// Example: 5.722
  ///  Constraints: No constraints specified.
  double get hmagUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Flag indicating that the source exhibits variable magnitude.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get varFlag => const fb.BoolReader().vTableGet(_bc, _bcOffset, 70, false);
  ///  Flag indicating that this is a multiple object source.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get multFlag => const fb.BoolReader().vTableGet(_bc, _bcOffset, 72, false);
  ///  The catalog ID of the nearest neighbor to this source.
  ///  Example: /// Example: 2456
  ///  Constraints: No constraints specified.
  int get neighborId => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 74, 0);
  ///  Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get neighborFlag => const fb.BoolReader().vTableGet(_bc, _bcOffset, 76, false);
  ///  Distance between source and nearest neighbor, in arcseconds.
  ///  Example: /// Example: 201.406
  ///  Constraints: No constraints specified.
  double get neighborDistance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get shiftFlag => const fb.BoolReader().vTableGet(_bc, _bcOffset, 80, false);
  ///  Photocentric shift caused by neighbors, in arcseconds.
  ///  Example: /// Example: 4.548
  ///  Constraints: No constraints specified.
  double get shift => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Time the row was updated in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Application user who updated the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  StarCatalogFullDataModeEnum get dataMode => StarCatalogFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 98, 0));

  @override
  String toString() {
    return 'StarCatalogFull{id: ${id}, classificationMarking: ${classificationMarking}, csId: ${csId}, gncCatId: ${gncCatId}, gaiadr3CatId: ${gaiadr3CatId}, hipCatId: ${hipCatId}, catVersion: ${catVersion}, ra: ${ra}, raUnc: ${raUnc}, dec: ${dec}, decUnc: ${decUnc}, posUncFlag: ${posUncFlag}, parallax: ${parallax}, parallaxUnc: ${parallaxUnc}, pmra: ${pmra}, pmraUnc: ${pmraUnc}, pmdec: ${pmdec}, pmdecUnc: ${pmdecUnc}, pmUncFlag: ${pmUncFlag}, astrometryOrigin: ${astrometryOrigin}, starEpoch: ${starEpoch}, gmag: ${gmag}, gmagUnc: ${gmagUnc}, bpmag: ${bpmag}, bpmagUnc: ${bpmagUnc}, rpmag: ${rpmag}, rpmagUnc: ${rpmagUnc}, jmag: ${jmag}, jmagUnc: ${jmagUnc}, kmag: ${kmag}, kmagUnc: ${kmagUnc}, hmag: ${hmag}, hmagUnc: ${hmagUnc}, varFlag: ${varFlag}, multFlag: ${multFlag}, neighborId: ${neighborId}, neighborFlag: ${neighborFlag}, neighborDistance: ${neighborDistance}, shiftFlag: ${shiftFlag}, shift: ${shift}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _StarCatalogFullReader extends fb.TableReader<StarCatalogFull> {
  const _StarCatalogFullReader();

  @override
  StarCatalogFull createObject(fb.BufferContext bc, int offset) => 
    StarCatalogFull._(bc, offset);
}

class StarCatalogFullBuilder {
  StarCatalogFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(48);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCsId(int? csId) {
    fbBuilder.addInt64(2, csId);
    return fbBuilder.offset;
  }
  int addGncCatId(int? gncCatId) {
    fbBuilder.addInt32(3, gncCatId);
    return fbBuilder.offset;
  }
  int addGaiadr3CatId(int? gaiadr3CatId) {
    fbBuilder.addInt64(4, gaiadr3CatId);
    return fbBuilder.offset;
  }
  int addHipCatId(int? hipCatId) {
    fbBuilder.addInt32(5, hipCatId);
    return fbBuilder.offset;
  }
  int addCatVersionOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addRa(double? ra) {
    fbBuilder.addFloat64(7, ra);
    return fbBuilder.offset;
  }
  int addRaUnc(double? raUnc) {
    fbBuilder.addFloat64(8, raUnc);
    return fbBuilder.offset;
  }
  int addDec(double? dec) {
    fbBuilder.addFloat64(9, dec);
    return fbBuilder.offset;
  }
  int addDecUnc(double? decUnc) {
    fbBuilder.addFloat64(10, decUnc);
    return fbBuilder.offset;
  }
  int addPosUncFlag(bool? posUncFlag) {
    fbBuilder.addBool(11, posUncFlag);
    return fbBuilder.offset;
  }
  int addParallax(double? parallax) {
    fbBuilder.addFloat64(12, parallax);
    return fbBuilder.offset;
  }
  int addParallaxUnc(double? parallaxUnc) {
    fbBuilder.addFloat64(13, parallaxUnc);
    return fbBuilder.offset;
  }
  int addPmra(double? pmra) {
    fbBuilder.addFloat64(14, pmra);
    return fbBuilder.offset;
  }
  int addPmraUnc(double? pmraUnc) {
    fbBuilder.addFloat64(15, pmraUnc);
    return fbBuilder.offset;
  }
  int addPmdec(double? pmdec) {
    fbBuilder.addFloat64(16, pmdec);
    return fbBuilder.offset;
  }
  int addPmdecUnc(double? pmdecUnc) {
    fbBuilder.addFloat64(17, pmdecUnc);
    return fbBuilder.offset;
  }
  int addPmUncFlag(bool? pmUncFlag) {
    fbBuilder.addBool(18, pmUncFlag);
    return fbBuilder.offset;
  }
  int addAstrometryOrigin(StarCatalogFullAstrometryOriginEnum? astrometryOrigin) {
    fbBuilder.addInt8(19, astrometryOrigin?.value);
    return fbBuilder.offset;
  }
  int addStarEpoch(double? starEpoch) {
    fbBuilder.addFloat64(20, starEpoch);
    return fbBuilder.offset;
  }
  int addGmag(double? gmag) {
    fbBuilder.addFloat64(21, gmag);
    return fbBuilder.offset;
  }
  int addGmagUnc(double? gmagUnc) {
    fbBuilder.addFloat64(22, gmagUnc);
    return fbBuilder.offset;
  }
  int addBpmag(double? bpmag) {
    fbBuilder.addFloat64(23, bpmag);
    return fbBuilder.offset;
  }
  int addBpmagUnc(double? bpmagUnc) {
    fbBuilder.addFloat64(24, bpmagUnc);
    return fbBuilder.offset;
  }
  int addRpmag(double? rpmag) {
    fbBuilder.addFloat64(25, rpmag);
    return fbBuilder.offset;
  }
  int addRpmagUnc(double? rpmagUnc) {
    fbBuilder.addFloat64(26, rpmagUnc);
    return fbBuilder.offset;
  }
  int addJmag(double? jmag) {
    fbBuilder.addFloat64(27, jmag);
    return fbBuilder.offset;
  }
  int addJmagUnc(double? jmagUnc) {
    fbBuilder.addFloat64(28, jmagUnc);
    return fbBuilder.offset;
  }
  int addKmag(double? kmag) {
    fbBuilder.addFloat64(29, kmag);
    return fbBuilder.offset;
  }
  int addKmagUnc(double? kmagUnc) {
    fbBuilder.addFloat64(30, kmagUnc);
    return fbBuilder.offset;
  }
  int addHmag(double? hmag) {
    fbBuilder.addFloat64(31, hmag);
    return fbBuilder.offset;
  }
  int addHmagUnc(double? hmagUnc) {
    fbBuilder.addFloat64(32, hmagUnc);
    return fbBuilder.offset;
  }
  int addVarFlag(bool? varFlag) {
    fbBuilder.addBool(33, varFlag);
    return fbBuilder.offset;
  }
  int addMultFlag(bool? multFlag) {
    fbBuilder.addBool(34, multFlag);
    return fbBuilder.offset;
  }
  int addNeighborId(int? neighborId) {
    fbBuilder.addInt32(35, neighborId);
    return fbBuilder.offset;
  }
  int addNeighborFlag(bool? neighborFlag) {
    fbBuilder.addBool(36, neighborFlag);
    return fbBuilder.offset;
  }
  int addNeighborDistance(double? neighborDistance) {
    fbBuilder.addFloat64(37, neighborDistance);
    return fbBuilder.offset;
  }
  int addShiftFlag(bool? shiftFlag) {
    fbBuilder.addBool(38, shiftFlag);
    return fbBuilder.offset;
  }
  int addShift(double? shift) {
    fbBuilder.addFloat64(39, shift);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addDataMode(StarCatalogFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(47, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StarCatalogFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final int? _csId;
  final int? _gncCatId;
  final int? _gaiadr3CatId;
  final int? _hipCatId;
  final String? _catVersion;
  final double? _ra;
  final double? _raUnc;
  final double? _dec;
  final double? _decUnc;
  final bool? _posUncFlag;
  final double? _parallax;
  final double? _parallaxUnc;
  final double? _pmra;
  final double? _pmraUnc;
  final double? _pmdec;
  final double? _pmdecUnc;
  final bool? _pmUncFlag;
  final StarCatalogFullAstrometryOriginEnum? _astrometryOrigin;
  final double? _starEpoch;
  final double? _gmag;
  final double? _gmagUnc;
  final double? _bpmag;
  final double? _bpmagUnc;
  final double? _rpmag;
  final double? _rpmagUnc;
  final double? _jmag;
  final double? _jmagUnc;
  final double? _kmag;
  final double? _kmagUnc;
  final double? _hmag;
  final double? _hmagUnc;
  final bool? _varFlag;
  final bool? _multFlag;
  final int? _neighborId;
  final bool? _neighborFlag;
  final double? _neighborDistance;
  final bool? _shiftFlag;
  final double? _shift;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final StarCatalogFullDataModeEnum? _dataMode;

  StarCatalogFullObjectBuilder({
    String? id,
    String? classificationMarking,
    int? csId,
    int? gncCatId,
    int? gaiadr3CatId,
    int? hipCatId,
    String? catVersion,
    double? ra,
    double? raUnc,
    double? dec,
    double? decUnc,
    bool? posUncFlag,
    double? parallax,
    double? parallaxUnc,
    double? pmra,
    double? pmraUnc,
    double? pmdec,
    double? pmdecUnc,
    bool? pmUncFlag,
    StarCatalogFullAstrometryOriginEnum? astrometryOrigin,
    double? starEpoch,
    double? gmag,
    double? gmagUnc,
    double? bpmag,
    double? bpmagUnc,
    double? rpmag,
    double? rpmagUnc,
    double? jmag,
    double? jmagUnc,
    double? kmag,
    double? kmagUnc,
    double? hmag,
    double? hmagUnc,
    bool? varFlag,
    bool? multFlag,
    int? neighborId,
    bool? neighborFlag,
    double? neighborDistance,
    bool? shiftFlag,
    double? shift,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    StarCatalogFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _csId = csId,
        _gncCatId = gncCatId,
        _gaiadr3CatId = gaiadr3CatId,
        _hipCatId = hipCatId,
        _catVersion = catVersion,
        _ra = ra,
        _raUnc = raUnc,
        _dec = dec,
        _decUnc = decUnc,
        _posUncFlag = posUncFlag,
        _parallax = parallax,
        _parallaxUnc = parallaxUnc,
        _pmra = pmra,
        _pmraUnc = pmraUnc,
        _pmdec = pmdec,
        _pmdecUnc = pmdecUnc,
        _pmUncFlag = pmUncFlag,
        _astrometryOrigin = astrometryOrigin,
        _starEpoch = starEpoch,
        _gmag = gmag,
        _gmagUnc = gmagUnc,
        _bpmag = bpmag,
        _bpmagUnc = bpmagUnc,
        _rpmag = rpmag,
        _rpmagUnc = rpmagUnc,
        _jmag = jmag,
        _jmagUnc = jmagUnc,
        _kmag = kmag,
        _kmagUnc = kmagUnc,
        _hmag = hmag,
        _hmagUnc = hmagUnc,
        _varFlag = varFlag,
        _multFlag = multFlag,
        _neighborId = neighborId,
        _neighborFlag = neighborFlag,
        _neighborDistance = neighborDistance,
        _shiftFlag = shiftFlag,
        _shift = shift,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? catVersionOffset = _catVersion == null ? null
        : fbBuilder.writeString(_catVersion!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(48);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addInt64(2, _csId);
    fbBuilder.addInt32(3, _gncCatId);
    fbBuilder.addInt64(4, _gaiadr3CatId);
    fbBuilder.addInt32(5, _hipCatId);
    fbBuilder.addOffset(6, catVersionOffset);
    fbBuilder.addFloat64(7, _ra);
    fbBuilder.addFloat64(8, _raUnc);
    fbBuilder.addFloat64(9, _dec);
    fbBuilder.addFloat64(10, _decUnc);
    fbBuilder.addBool(11, _posUncFlag);
    fbBuilder.addFloat64(12, _parallax);
    fbBuilder.addFloat64(13, _parallaxUnc);
    fbBuilder.addFloat64(14, _pmra);
    fbBuilder.addFloat64(15, _pmraUnc);
    fbBuilder.addFloat64(16, _pmdec);
    fbBuilder.addFloat64(17, _pmdecUnc);
    fbBuilder.addBool(18, _pmUncFlag);
    fbBuilder.addInt8(19, _astrometryOrigin?.value);
    fbBuilder.addFloat64(20, _starEpoch);
    fbBuilder.addFloat64(21, _gmag);
    fbBuilder.addFloat64(22, _gmagUnc);
    fbBuilder.addFloat64(23, _bpmag);
    fbBuilder.addFloat64(24, _bpmagUnc);
    fbBuilder.addFloat64(25, _rpmag);
    fbBuilder.addFloat64(26, _rpmagUnc);
    fbBuilder.addFloat64(27, _jmag);
    fbBuilder.addFloat64(28, _jmagUnc);
    fbBuilder.addFloat64(29, _kmag);
    fbBuilder.addFloat64(30, _kmagUnc);
    fbBuilder.addFloat64(31, _hmag);
    fbBuilder.addFloat64(32, _hmagUnc);
    fbBuilder.addBool(33, _varFlag);
    fbBuilder.addBool(34, _multFlag);
    fbBuilder.addInt32(35, _neighborId);
    fbBuilder.addBool(36, _neighborFlag);
    fbBuilder.addFloat64(37, _neighborDistance);
    fbBuilder.addBool(38, _shiftFlag);
    fbBuilder.addFloat64(39, _shift);
    fbBuilder.addOffset(40, createdAtOffset);
    fbBuilder.addOffset(41, createdByOffset);
    fbBuilder.addOffset(42, updatedAtOffset);
    fbBuilder.addOffset(43, updatedByOffset);
    fbBuilder.addOffset(44, sourceOffset);
    fbBuilder.addOffset(45, originOffset);
    fbBuilder.addOffset(46, origNetworkOffset);
    fbBuilder.addInt8(47, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
