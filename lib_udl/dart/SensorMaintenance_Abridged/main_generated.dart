// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SensorMaintenanceAbridgedDataModeEnum {
  final int value;
  const SensorMaintenanceAbridgedDataModeEnum._(this.value);

  factory SensorMaintenanceAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SensorMaintenanceAbridgedDataModeEnum');
    }
    return result;
  }

  static SensorMaintenanceAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SensorMaintenanceAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SensorMaintenanceAbridgedDataModeEnum REAL = SensorMaintenanceAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SensorMaintenanceAbridgedDataModeEnum TEST = SensorMaintenanceAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SensorMaintenanceAbridgedDataModeEnum SIMULATED = SensorMaintenanceAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SensorMaintenanceAbridgedDataModeEnum EXERCISE = SensorMaintenanceAbridgedDataModeEnum._(3);
  static const Map<int, SensorMaintenanceAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SensorMaintenanceAbridgedDataModeEnum> reader = _SensorMaintenanceAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'SensorMaintenanceAbridgedDataModeEnum{value: $value}';
  }
}

class _SensorMaintenanceAbridgedDataModeEnumReader extends fb.Reader<SensorMaintenanceAbridgedDataModeEnum> {
  const _SensorMaintenanceAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SensorMaintenanceAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      SensorMaintenanceAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Maintenance schedule and operational status of Sensor.
class SensorMaintenanceAbridged {
  SensorMaintenanceAbridged._(this._bc, this._bcOffset);
  factory SensorMaintenanceAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SensorMaintenanceAbridged> reader = _SensorMaintenanceAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SENSORMAINTENANCE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The site to which this item applies.  NOTE - this site code is COLT specific and may not identically correspond to other UDL site IDs.
  ///  Example: /// Example: site01
  ///  Constraints: Minimum length = 1, Maximum length = 6
  String? get siteCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  UUID of the sensor.
  ///  Example: /// Example: idSensor
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The planned outage start time in ISO8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The planned outage end time in ISO8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get endTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The minimum time required to recall this activity, expressed as ddd:hh:mm.
  ///  Example: /// Example: 128:16:52
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get recall => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The duration of the planned outage, expressed as ddd:hh:mm.
  ///  Example: /// Example: 128:16:52
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get duration => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The Missile Warning operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
  ///  Example: /// Example: G
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get mwOpsCap => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The Space Surveillance operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
  ///  Example: /// Example: Y
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get ssOpsCap => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The Missile Defense operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
  ///  Example: /// Example: R
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get mdOpsCap => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The sensor face(s) to which this COLT maintenance item applies, if applicable.
  ///  Example: /// Example: impactedFaces
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get impactedFaces => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The mission capability status of the equipment (e.g. FMC, NMC, PMC, UNK, etc.).
  ///  Example: /// Example: FMC
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get equipStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Description of the activity taking place during this outage.
  ///  Example: /// Example: Activity Description
  ///  Constraints: No constraints specified.
  String? get activity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Remarks concerning this outage.
  ///  Example: /// Example: Remarks
  ///  Constraints: No constraints specified.
  String? get remark => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The name of the requestor.
  ///  Example: /// Example: requestor
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get requestor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The name of the changer, if applicable.
  ///  Example: /// Example: changer
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get changer => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The name of the approver.
  ///  Example: /// Example: approver
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get approver => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  COLT EOWID.
  ///  Example: /// Example: eowId
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get eowId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The revision number for this maintenance item.
  ///  Example: /// Example: rev
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get rev => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The priority of this maintenance item.
  ///  Example: /// Example: low
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get priority => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Release.
  ///  Example: /// Example: rel
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get rel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  The internal COLT line number assigned to this item.
  ///  Example: /// Example: lineNumber
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get lineNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The name of the resource(s) affected by this maintenance item.
  ///  Example: /// Example: resource
  ///  Constraints: Minimum length = 0, Maximum length = 255
  String? get resource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  The date that this item became inactive in ISO8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get inactiveDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SensorMaintenanceAbridgedDataModeEnum get dataMode => SensorMaintenanceAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 62, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);

  @override
  String toString() {
    return 'SensorMaintenanceAbridged{id: ${id}, classificationMarking: ${classificationMarking}, siteCode: ${siteCode}, idSensor: ${idSensor}, startTime: ${startTime}, endTime: ${endTime}, recall: ${recall}, duration: ${duration}, mwOpsCap: ${mwOpsCap}, ssOpsCap: ${ssOpsCap}, mdOpsCap: ${mdOpsCap}, impactedFaces: ${impactedFaces}, equipStatus: ${equipStatus}, activity: ${activity}, remark: ${remark}, requestor: ${requestor}, changer: ${changer}, approver: ${approver}, eowId: ${eowId}, rev: ${rev}, priority: ${priority}, rel: ${rel}, lineNumber: ${lineNumber}, resource: ${resource}, inactiveDate: ${inactiveDate}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _SensorMaintenanceAbridgedReader extends fb.TableReader<SensorMaintenanceAbridged> {
  const _SensorMaintenanceAbridgedReader();

  @override
  SensorMaintenanceAbridged createObject(fb.BufferContext bc, int offset) => 
    SensorMaintenanceAbridged._(bc, offset);
}

class SensorMaintenanceAbridgedBuilder {
  SensorMaintenanceAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(31);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSiteCodeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addRecallOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addDurationOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addMwOpsCapOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addSsOpsCapOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addMdOpsCapOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addImpactedFacesOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addEquipStatusOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addActivityOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addRemarkOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addRequestorOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addChangerOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addApproverOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addEowIdOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addRevOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addPriorityOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addRelOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addLineNumberOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addResourceOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addInactiveDateOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SensorMaintenanceAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(29, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SensorMaintenanceAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _siteCode;
  final String? _idSensor;
  final String? _startTime;
  final String? _endTime;
  final String? _recall;
  final String? _duration;
  final String? _mwOpsCap;
  final String? _ssOpsCap;
  final String? _mdOpsCap;
  final String? _impactedFaces;
  final String? _equipStatus;
  final String? _activity;
  final String? _remark;
  final String? _requestor;
  final String? _changer;
  final String? _approver;
  final String? _eowId;
  final String? _rev;
  final String? _priority;
  final String? _rel;
  final String? _lineNumber;
  final String? _resource;
  final String? _inactiveDate;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final SensorMaintenanceAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;

  SensorMaintenanceAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? siteCode,
    String? idSensor,
    String? startTime,
    String? endTime,
    String? recall,
    String? duration,
    String? mwOpsCap,
    String? ssOpsCap,
    String? mdOpsCap,
    String? impactedFaces,
    String? equipStatus,
    String? activity,
    String? remark,
    String? requestor,
    String? changer,
    String? approver,
    String? eowId,
    String? rev,
    String? priority,
    String? rel,
    String? lineNumber,
    String? resource,
    String? inactiveDate,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    SensorMaintenanceAbridgedDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _siteCode = siteCode,
        _idSensor = idSensor,
        _startTime = startTime,
        _endTime = endTime,
        _recall = recall,
        _duration = duration,
        _mwOpsCap = mwOpsCap,
        _ssOpsCap = ssOpsCap,
        _mdOpsCap = mdOpsCap,
        _impactedFaces = impactedFaces,
        _equipStatus = equipStatus,
        _activity = activity,
        _remark = remark,
        _requestor = requestor,
        _changer = changer,
        _approver = approver,
        _eowId = eowId,
        _rev = rev,
        _priority = priority,
        _rel = rel,
        _lineNumber = lineNumber,
        _resource = resource,
        _inactiveDate = inactiveDate,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? siteCodeOffset = _siteCode == null ? null
        : fbBuilder.writeString(_siteCode!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? endTimeOffset = _endTime == null ? null
        : fbBuilder.writeString(_endTime!);
    final int? recallOffset = _recall == null ? null
        : fbBuilder.writeString(_recall!);
    final int? durationOffset = _duration == null ? null
        : fbBuilder.writeString(_duration!);
    final int? mwOpsCapOffset = _mwOpsCap == null ? null
        : fbBuilder.writeString(_mwOpsCap!);
    final int? ssOpsCapOffset = _ssOpsCap == null ? null
        : fbBuilder.writeString(_ssOpsCap!);
    final int? mdOpsCapOffset = _mdOpsCap == null ? null
        : fbBuilder.writeString(_mdOpsCap!);
    final int? impactedFacesOffset = _impactedFaces == null ? null
        : fbBuilder.writeString(_impactedFaces!);
    final int? equipStatusOffset = _equipStatus == null ? null
        : fbBuilder.writeString(_equipStatus!);
    final int? activityOffset = _activity == null ? null
        : fbBuilder.writeString(_activity!);
    final int? remarkOffset = _remark == null ? null
        : fbBuilder.writeString(_remark!);
    final int? requestorOffset = _requestor == null ? null
        : fbBuilder.writeString(_requestor!);
    final int? changerOffset = _changer == null ? null
        : fbBuilder.writeString(_changer!);
    final int? approverOffset = _approver == null ? null
        : fbBuilder.writeString(_approver!);
    final int? eowIdOffset = _eowId == null ? null
        : fbBuilder.writeString(_eowId!);
    final int? revOffset = _rev == null ? null
        : fbBuilder.writeString(_rev!);
    final int? priorityOffset = _priority == null ? null
        : fbBuilder.writeString(_priority!);
    final int? relOffset = _rel == null ? null
        : fbBuilder.writeString(_rel!);
    final int? lineNumberOffset = _lineNumber == null ? null
        : fbBuilder.writeString(_lineNumber!);
    final int? resourceOffset = _resource == null ? null
        : fbBuilder.writeString(_resource!);
    final int? inactiveDateOffset = _inactiveDate == null ? null
        : fbBuilder.writeString(_inactiveDate!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(31);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, siteCodeOffset);
    fbBuilder.addOffset(3, idSensorOffset);
    fbBuilder.addOffset(4, startTimeOffset);
    fbBuilder.addOffset(5, endTimeOffset);
    fbBuilder.addOffset(6, recallOffset);
    fbBuilder.addOffset(7, durationOffset);
    fbBuilder.addOffset(8, mwOpsCapOffset);
    fbBuilder.addOffset(9, ssOpsCapOffset);
    fbBuilder.addOffset(10, mdOpsCapOffset);
    fbBuilder.addOffset(11, impactedFacesOffset);
    fbBuilder.addOffset(12, equipStatusOffset);
    fbBuilder.addOffset(13, activityOffset);
    fbBuilder.addOffset(14, remarkOffset);
    fbBuilder.addOffset(15, requestorOffset);
    fbBuilder.addOffset(16, changerOffset);
    fbBuilder.addOffset(17, approverOffset);
    fbBuilder.addOffset(18, eowIdOffset);
    fbBuilder.addOffset(19, revOffset);
    fbBuilder.addOffset(20, priorityOffset);
    fbBuilder.addOffset(21, relOffset);
    fbBuilder.addOffset(22, lineNumberOffset);
    fbBuilder.addOffset(23, resourceOffset);
    fbBuilder.addOffset(24, inactiveDateOffset);
    fbBuilder.addOffset(25, createdAtOffset);
    fbBuilder.addOffset(26, createdByOffset);
    fbBuilder.addOffset(27, sourceOffset);
    fbBuilder.addOffset(28, originOffset);
    fbBuilder.addInt8(29, _dataMode?.value);
    fbBuilder.addOffset(30, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
