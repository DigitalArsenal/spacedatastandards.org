// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SurfaceFullDataModeEnum {
  final int value;
  const SurfaceFullDataModeEnum._(this.value);

  factory SurfaceFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SurfaceFullDataModeEnum');
    }
    return result;
  }

  static SurfaceFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SurfaceFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SurfaceFullDataModeEnum REAL = SurfaceFullDataModeEnum._(0);

  ///  No description available.
  static const SurfaceFullDataModeEnum TEST = SurfaceFullDataModeEnum._(1);

  ///  No description available.
  static const SurfaceFullDataModeEnum SIMULATED = SurfaceFullDataModeEnum._(2);

  ///  No description available.
  static const SurfaceFullDataModeEnum EXERCISE = SurfaceFullDataModeEnum._(3);
  static const Map<int, SurfaceFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SurfaceFullDataModeEnum> reader = _SurfaceFullDataModeEnumReader();

  @override
  String toString() {
    return 'SurfaceFullDataModeEnum{value: $value}';
  }
}

class _SurfaceFullDataModeEnumReader extends fb.Reader<SurfaceFullDataModeEnum> {
  const _SurfaceFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SurfaceFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      SurfaceFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Surface information contains properties related to an airfield's runway, taxiway, and parking. The surface types and characteristics can dictate the airfield's capability of hosting a specific aircraft.
class SurfaceFull {
  SurfaceFull._(this._bc, this._bcOffset);
  factory SurfaceFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SurfaceFull> reader = _SurfaceFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The surface name or identifier.
  ///  Example: /// Example: West lot
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The surface type of this record (e.g. RUNWAY, TAXIWAY, PARKING).
  ///  Example: /// Example: PARKING
  ///  Constraints: Minimum length = 1, Maximum length = 7
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The ID of the site where this surface is located.
  ///  Example: /// Example: SITE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSite => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Alternate site identifier provided by the source.
  ///  Example: /// Example: ORIG-SITE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get altSiteId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Flag indicating this is the primary runway.  Applicable for runway surface types only.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get primary => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  ///  The length of the surface type, in feet.  Applicable for runway and parking surface types.
  ///  Example: /// Example: 1500
  ///  Constraints: No constraints specified.
  int get lengthFt => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  The landing distance available for the runway, in feet.  Applicable for runway surface types only.
  ///  Example: /// Example: 475
  ///  Constraints: No constraints specified.
  int get ldaFt => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  ///  The width of the surface type, in feet.
  ///  Example: /// Example: 220
  ///  Constraints: No constraints specified.
  int get widthFt => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 22, 0);
  ///  The length of the surface type, in meters.  Applicable for runway and parking surface types.
  ///  Example: /// Example: 457
  ///  Constraints: No constraints specified.
  int get lengthM => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 24, 0);
  ///  The landing distance available for the runway, in meters.  Applicable for runway surface types only.
  ///  Example: /// Example: 145
  ///  Constraints: No constraints specified.
  int get ldaM => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  The width of the surface type, in meters.
  ///  Example: /// Example: 67
  ///  Constraints: No constraints specified.
  int get widthM => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  The surface material (e.g. Asphalt, Concrete, Dirt).
  ///  Example: /// Example: Concrete
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get material => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The surface condition (e.g. GOOD, FAIR, POOR, SERIOUS, FAILED, CLOSED, UNKNOWN).
  ///  Example: /// Example: GOOD
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get condition => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Raw weight bearing capacity value or pavement strength.
  ///  Example: /// Example: LCN 42
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get rawWbc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Pavement classification number (PCN) and tire pressure code.
  ///  Example: /// Example: 73RBWT
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get pcn => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Load classification number or pavement rating which ranks aircraft on a scale of 1 to 120.
  ///  Example: /// Example: 50
  ///  Constraints: No constraints specified.
  int get lcn => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 38, 0);
  ///  The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilopounds (kip). Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 143
  ///  Constraints: No constraints specified.
  int get sWtKip => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 188
  ///  Constraints: No constraints specified.
  int get tWtKip => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 42, 0);
  ///  The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 195
  ///  Constraints: No constraints specified.
  int get stWtKip => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 44, 0);
  ///  The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 414
  ///  Constraints: No constraints specified.
  int get ttWtKip => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 46, 0);
  ///  The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 416
  ///  Constraints: No constraints specified.
  int get ddWtKip => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 48, 0);
  ///  The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 603
  ///  Constraints: No constraints specified.
  int get sbttWtKip => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 50, 0);
  ///  The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 870
  ///  Constraints: No constraints specified.
  int get tdtWtkip => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 622
  ///  Constraints: No constraints specified.
  int get trtWtKip => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 833
  ///  Constraints: No constraints specified.
  int get ddtWtKip => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 636
  ///  Constraints: No constraints specified.
  int get sWtKn => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 58, 0);
  ///  The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 836
  ///  Constraints: No constraints specified.
  int get tWtKn => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 60, 0);
  ///  The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 867
  ///  Constraints: No constraints specified.
  int get stWtKn => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 62, 0);
  ///  The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 1842
  ///  Constraints: No constraints specified.
  int get ttWtKn => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 64, 0);
  ///  The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 1850
  ///  Constraints: No constraints specified.
  int get ddWtKn => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 66, 0);
  ///  The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 2682
  ///  Constraints: No constraints specified.
  int get sbttWtKn => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 68, 0);
  ///  The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 3870
  ///  Constraints: No constraints specified.
  int get tdtWtKn => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 70, 0);
  ///  The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 2767
  ///  Constraints: No constraints specified.
  int get trtWtKn => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 72, 0);
  ///  The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 3705
  ///  Constraints: No constraints specified.
  int get ddtWtKn => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 74, 0);
  ///  Flag indicating the surface has lighting.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get lighting => const fb.BoolReader().vTableGet(_bc, _bcOffset, 76, false);
  ///  Flag indicating the runway lighting is unknown. Applicable for runway surface types only.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get lightsUnkn => const fb.BoolReader().vTableGet(_bc, _bcOffset, 78, false);
  ///  Flag indicating the runway has approach lights. Applicable for runway surface types only.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get lightsAprch => const fb.BoolReader().vTableGet(_bc, _bcOffset, 80, false);
  ///  Flag indicating the runway has Visual Approach Slope Indicator (VASI) lights. Applicable for runway surface types only.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get lightsVasi => const fb.BoolReader().vTableGet(_bc, _bcOffset, 82, false);
  ///  Flag indicating the runway has Precision Approach Path Indicator (PAPI) lights. Applicable for runway surface types only.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get lightsPapi => const fb.BoolReader().vTableGet(_bc, _bcOffset, 84, false);
  ///  Flag indicating the runway has Optical Landing System (OLS) lights. Applicable for runway surface types only.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get lightsOls => const fb.BoolReader().vTableGet(_bc, _bcOffset, 86, false);
  ///  Flag indicating the runway has Runway End Identifier Lights (REIL). Applicable for runway surface types only.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get lightsReil => const fb.BoolReader().vTableGet(_bc, _bcOffset, 88, false);
  ///  Flag indicating the runway has Touchdown Zone lights. Applicable for runway surface types only.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get lightsTdzl => const fb.BoolReader().vTableGet(_bc, _bcOffset, 90, false);
  ///  Flag indicating the runway has centerline lights. Applicable for runway surface types only.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get lightsCl => const fb.BoolReader().vTableGet(_bc, _bcOffset, 92, false);
  ///  Flag indicating the surface type has an obstacle. Applicable for taxiway and parking surface types.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get obstacle => const fb.BoolReader().vTableGet(_bc, _bcOffset, 94, false);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SurfaceFullDataModeEnum get dataMode => SurfaceFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 110, 0));

  @override
  String toString() {
    return 'SurfaceFull{id: ${id}, classificationMarking: ${classificationMarking}, name: ${name}, type: ${type}, idSite: ${idSite}, altSiteId: ${altSiteId}, primary: ${primary}, lengthFt: ${lengthFt}, ldaFt: ${ldaFt}, widthFt: ${widthFt}, lengthM: ${lengthM}, ldaM: ${ldaM}, widthM: ${widthM}, material: ${material}, condition: ${condition}, rawWbc: ${rawWbc}, pcn: ${pcn}, lcn: ${lcn}, sWtKip: ${sWtKip}, tWtKip: ${tWtKip}, stWtKip: ${stWtKip}, ttWtKip: ${ttWtKip}, ddWtKip: ${ddWtKip}, sbttWtKip: ${sbttWtKip}, tdtWtkip: ${tdtWtkip}, trtWtKip: ${trtWtKip}, ddtWtKip: ${ddtWtKip}, sWtKn: ${sWtKn}, tWtKn: ${tWtKn}, stWtKn: ${stWtKn}, ttWtKn: ${ttWtKn}, ddWtKn: ${ddWtKn}, sbttWtKn: ${sbttWtKn}, tdtWtKn: ${tdtWtKn}, trtWtKn: ${trtWtKn}, ddtWtKn: ${ddtWtKn}, lighting: ${lighting}, lightsUnkn: ${lightsUnkn}, lightsAprch: ${lightsAprch}, lightsVasi: ${lightsVasi}, lightsPapi: ${lightsPapi}, lightsOls: ${lightsOls}, lightsReil: ${lightsReil}, lightsTdzl: ${lightsTdzl}, lightsCl: ${lightsCl}, obstacle: ${obstacle}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _SurfaceFullReader extends fb.TableReader<SurfaceFull> {
  const _SurfaceFullReader();

  @override
  SurfaceFull createObject(fb.BufferContext bc, int offset) => 
    SurfaceFull._(bc, offset);
}

class SurfaceFullBuilder {
  SurfaceFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(54);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIdSiteOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addAltSiteIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addPrimary(bool? primary) {
    fbBuilder.addBool(6, primary);
    return fbBuilder.offset;
  }
  int addLengthFt(int? lengthFt) {
    fbBuilder.addInt32(7, lengthFt);
    return fbBuilder.offset;
  }
  int addLdaFt(int? ldaFt) {
    fbBuilder.addInt32(8, ldaFt);
    return fbBuilder.offset;
  }
  int addWidthFt(int? widthFt) {
    fbBuilder.addInt32(9, widthFt);
    return fbBuilder.offset;
  }
  int addLengthM(int? lengthM) {
    fbBuilder.addInt32(10, lengthM);
    return fbBuilder.offset;
  }
  int addLdaM(int? ldaM) {
    fbBuilder.addInt32(11, ldaM);
    return fbBuilder.offset;
  }
  int addWidthM(int? widthM) {
    fbBuilder.addInt32(12, widthM);
    return fbBuilder.offset;
  }
  int addMaterialOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addConditionOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addRawWbcOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addPcnOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addLcn(int? lcn) {
    fbBuilder.addInt32(17, lcn);
    return fbBuilder.offset;
  }
  int addSWtKip(int? sWtKip) {
    fbBuilder.addInt32(18, sWtKip);
    return fbBuilder.offset;
  }
  int addTWtKip(int? tWtKip) {
    fbBuilder.addInt32(19, tWtKip);
    return fbBuilder.offset;
  }
  int addStWtKip(int? stWtKip) {
    fbBuilder.addInt32(20, stWtKip);
    return fbBuilder.offset;
  }
  int addTtWtKip(int? ttWtKip) {
    fbBuilder.addInt32(21, ttWtKip);
    return fbBuilder.offset;
  }
  int addDdWtKip(int? ddWtKip) {
    fbBuilder.addInt32(22, ddWtKip);
    return fbBuilder.offset;
  }
  int addSbttWtKip(int? sbttWtKip) {
    fbBuilder.addInt32(23, sbttWtKip);
    return fbBuilder.offset;
  }
  int addTdtWtkip(int? tdtWtkip) {
    fbBuilder.addInt32(24, tdtWtkip);
    return fbBuilder.offset;
  }
  int addTrtWtKip(int? trtWtKip) {
    fbBuilder.addInt32(25, trtWtKip);
    return fbBuilder.offset;
  }
  int addDdtWtKip(int? ddtWtKip) {
    fbBuilder.addInt32(26, ddtWtKip);
    return fbBuilder.offset;
  }
  int addSWtKn(int? sWtKn) {
    fbBuilder.addInt32(27, sWtKn);
    return fbBuilder.offset;
  }
  int addTWtKn(int? tWtKn) {
    fbBuilder.addInt32(28, tWtKn);
    return fbBuilder.offset;
  }
  int addStWtKn(int? stWtKn) {
    fbBuilder.addInt32(29, stWtKn);
    return fbBuilder.offset;
  }
  int addTtWtKn(int? ttWtKn) {
    fbBuilder.addInt32(30, ttWtKn);
    return fbBuilder.offset;
  }
  int addDdWtKn(int? ddWtKn) {
    fbBuilder.addInt32(31, ddWtKn);
    return fbBuilder.offset;
  }
  int addSbttWtKn(int? sbttWtKn) {
    fbBuilder.addInt32(32, sbttWtKn);
    return fbBuilder.offset;
  }
  int addTdtWtKn(int? tdtWtKn) {
    fbBuilder.addInt32(33, tdtWtKn);
    return fbBuilder.offset;
  }
  int addTrtWtKn(int? trtWtKn) {
    fbBuilder.addInt32(34, trtWtKn);
    return fbBuilder.offset;
  }
  int addDdtWtKn(int? ddtWtKn) {
    fbBuilder.addInt32(35, ddtWtKn);
    return fbBuilder.offset;
  }
  int addLighting(bool? lighting) {
    fbBuilder.addBool(36, lighting);
    return fbBuilder.offset;
  }
  int addLightsUnkn(bool? lightsUnkn) {
    fbBuilder.addBool(37, lightsUnkn);
    return fbBuilder.offset;
  }
  int addLightsAprch(bool? lightsAprch) {
    fbBuilder.addBool(38, lightsAprch);
    return fbBuilder.offset;
  }
  int addLightsVasi(bool? lightsVasi) {
    fbBuilder.addBool(39, lightsVasi);
    return fbBuilder.offset;
  }
  int addLightsPapi(bool? lightsPapi) {
    fbBuilder.addBool(40, lightsPapi);
    return fbBuilder.offset;
  }
  int addLightsOls(bool? lightsOls) {
    fbBuilder.addBool(41, lightsOls);
    return fbBuilder.offset;
  }
  int addLightsReil(bool? lightsReil) {
    fbBuilder.addBool(42, lightsReil);
    return fbBuilder.offset;
  }
  int addLightsTdzl(bool? lightsTdzl) {
    fbBuilder.addBool(43, lightsTdzl);
    return fbBuilder.offset;
  }
  int addLightsCl(bool? lightsCl) {
    fbBuilder.addBool(44, lightsCl);
    return fbBuilder.offset;
  }
  int addObstacle(bool? obstacle) {
    fbBuilder.addBool(45, obstacle);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SurfaceFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(53, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SurfaceFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _name;
  final String? _type;
  final String? _idSite;
  final String? _altSiteId;
  final bool? _primary;
  final int? _lengthFt;
  final int? _ldaFt;
  final int? _widthFt;
  final int? _lengthM;
  final int? _ldaM;
  final int? _widthM;
  final String? _material;
  final String? _condition;
  final String? _rawWbc;
  final String? _pcn;
  final int? _lcn;
  final int? _sWtKip;
  final int? _tWtKip;
  final int? _stWtKip;
  final int? _ttWtKip;
  final int? _ddWtKip;
  final int? _sbttWtKip;
  final int? _tdtWtkip;
  final int? _trtWtKip;
  final int? _ddtWtKip;
  final int? _sWtKn;
  final int? _tWtKn;
  final int? _stWtKn;
  final int? _ttWtKn;
  final int? _ddWtKn;
  final int? _sbttWtKn;
  final int? _tdtWtKn;
  final int? _trtWtKn;
  final int? _ddtWtKn;
  final bool? _lighting;
  final bool? _lightsUnkn;
  final bool? _lightsAprch;
  final bool? _lightsVasi;
  final bool? _lightsPapi;
  final bool? _lightsOls;
  final bool? _lightsReil;
  final bool? _lightsTdzl;
  final bool? _lightsCl;
  final bool? _obstacle;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SurfaceFullDataModeEnum? _dataMode;

  SurfaceFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? name,
    String? type,
    String? idSite,
    String? altSiteId,
    bool? primary,
    int? lengthFt,
    int? ldaFt,
    int? widthFt,
    int? lengthM,
    int? ldaM,
    int? widthM,
    String? material,
    String? condition,
    String? rawWbc,
    String? pcn,
    int? lcn,
    int? sWtKip,
    int? tWtKip,
    int? stWtKip,
    int? ttWtKip,
    int? ddWtKip,
    int? sbttWtKip,
    int? tdtWtkip,
    int? trtWtKip,
    int? ddtWtKip,
    int? sWtKn,
    int? tWtKn,
    int? stWtKn,
    int? ttWtKn,
    int? ddWtKn,
    int? sbttWtKn,
    int? tdtWtKn,
    int? trtWtKn,
    int? ddtWtKn,
    bool? lighting,
    bool? lightsUnkn,
    bool? lightsAprch,
    bool? lightsVasi,
    bool? lightsPapi,
    bool? lightsOls,
    bool? lightsReil,
    bool? lightsTdzl,
    bool? lightsCl,
    bool? obstacle,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    SurfaceFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _name = name,
        _type = type,
        _idSite = idSite,
        _altSiteId = altSiteId,
        _primary = primary,
        _lengthFt = lengthFt,
        _ldaFt = ldaFt,
        _widthFt = widthFt,
        _lengthM = lengthM,
        _ldaM = ldaM,
        _widthM = widthM,
        _material = material,
        _condition = condition,
        _rawWbc = rawWbc,
        _pcn = pcn,
        _lcn = lcn,
        _sWtKip = sWtKip,
        _tWtKip = tWtKip,
        _stWtKip = stWtKip,
        _ttWtKip = ttWtKip,
        _ddWtKip = ddWtKip,
        _sbttWtKip = sbttWtKip,
        _tdtWtkip = tdtWtkip,
        _trtWtKip = trtWtKip,
        _ddtWtKip = ddtWtKip,
        _sWtKn = sWtKn,
        _tWtKn = tWtKn,
        _stWtKn = stWtKn,
        _ttWtKn = ttWtKn,
        _ddWtKn = ddWtKn,
        _sbttWtKn = sbttWtKn,
        _tdtWtKn = tdtWtKn,
        _trtWtKn = trtWtKn,
        _ddtWtKn = ddtWtKn,
        _lighting = lighting,
        _lightsUnkn = lightsUnkn,
        _lightsAprch = lightsAprch,
        _lightsVasi = lightsVasi,
        _lightsPapi = lightsPapi,
        _lightsOls = lightsOls,
        _lightsReil = lightsReil,
        _lightsTdzl = lightsTdzl,
        _lightsCl = lightsCl,
        _obstacle = obstacle,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? idSiteOffset = _idSite == null ? null
        : fbBuilder.writeString(_idSite!);
    final int? altSiteIdOffset = _altSiteId == null ? null
        : fbBuilder.writeString(_altSiteId!);
    final int? materialOffset = _material == null ? null
        : fbBuilder.writeString(_material!);
    final int? conditionOffset = _condition == null ? null
        : fbBuilder.writeString(_condition!);
    final int? rawWbcOffset = _rawWbc == null ? null
        : fbBuilder.writeString(_rawWbc!);
    final int? pcnOffset = _pcn == null ? null
        : fbBuilder.writeString(_pcn!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(54);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, typeOffset);
    fbBuilder.addOffset(4, idSiteOffset);
    fbBuilder.addOffset(5, altSiteIdOffset);
    fbBuilder.addBool(6, _primary);
    fbBuilder.addInt32(7, _lengthFt);
    fbBuilder.addInt32(8, _ldaFt);
    fbBuilder.addInt32(9, _widthFt);
    fbBuilder.addInt32(10, _lengthM);
    fbBuilder.addInt32(11, _ldaM);
    fbBuilder.addInt32(12, _widthM);
    fbBuilder.addOffset(13, materialOffset);
    fbBuilder.addOffset(14, conditionOffset);
    fbBuilder.addOffset(15, rawWbcOffset);
    fbBuilder.addOffset(16, pcnOffset);
    fbBuilder.addInt32(17, _lcn);
    fbBuilder.addInt32(18, _sWtKip);
    fbBuilder.addInt32(19, _tWtKip);
    fbBuilder.addInt32(20, _stWtKip);
    fbBuilder.addInt32(21, _ttWtKip);
    fbBuilder.addInt32(22, _ddWtKip);
    fbBuilder.addInt32(23, _sbttWtKip);
    fbBuilder.addInt32(24, _tdtWtkip);
    fbBuilder.addInt32(25, _trtWtKip);
    fbBuilder.addInt32(26, _ddtWtKip);
    fbBuilder.addInt32(27, _sWtKn);
    fbBuilder.addInt32(28, _tWtKn);
    fbBuilder.addInt32(29, _stWtKn);
    fbBuilder.addInt32(30, _ttWtKn);
    fbBuilder.addInt32(31, _ddWtKn);
    fbBuilder.addInt32(32, _sbttWtKn);
    fbBuilder.addInt32(33, _tdtWtKn);
    fbBuilder.addInt32(34, _trtWtKn);
    fbBuilder.addInt32(35, _ddtWtKn);
    fbBuilder.addBool(36, _lighting);
    fbBuilder.addBool(37, _lightsUnkn);
    fbBuilder.addBool(38, _lightsAprch);
    fbBuilder.addBool(39, _lightsVasi);
    fbBuilder.addBool(40, _lightsPapi);
    fbBuilder.addBool(41, _lightsOls);
    fbBuilder.addBool(42, _lightsReil);
    fbBuilder.addBool(43, _lightsTdzl);
    fbBuilder.addBool(44, _lightsCl);
    fbBuilder.addBool(45, _obstacle);
    fbBuilder.addOffset(46, createdAtOffset);
    fbBuilder.addOffset(47, createdByOffset);
    fbBuilder.addOffset(48, updatedAtOffset);
    fbBuilder.addOffset(49, updatedByOffset);
    fbBuilder.addOffset(50, sourceOffset);
    fbBuilder.addOffset(51, originOffset);
    fbBuilder.addOffset(52, origNetworkOffset);
    fbBuilder.addInt8(53, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
