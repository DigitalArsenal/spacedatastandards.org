// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class EvacIngestTypeEnum {
  final int value;
  const EvacIngestTypeEnum._(this.value);

  factory EvacIngestTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EvacIngestTypeEnum');
    }
    return result;
  }

  static EvacIngestTypeEnum? _createOrNull(int? value) => 
      value == null ? null : EvacIngestTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const EvacIngestTypeEnum REQUEST = EvacIngestTypeEnum._(0);

  ///  No description available.
  static const EvacIngestTypeEnum RESPONSE = EvacIngestTypeEnum._(1);
  static const Map<int, EvacIngestTypeEnum> values = {
    0: REQUEST,
    1: RESPONSE};

  static const fb.Reader<EvacIngestTypeEnum> reader = _EvacIngestTypeEnumReader();

  @override
  String toString() {
    return 'EvacIngestTypeEnum{value: $value}';
  }
}

class _EvacIngestTypeEnumReader extends fb.Reader<EvacIngestTypeEnum> {
  const _EvacIngestTypeEnumReader();

  @override
  int get size => 1;

  @override
  EvacIngestTypeEnum read(fb.BufferContext bc, int offset) =>
      EvacIngestTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class EvacIngestDataModeEnum {
  final int value;
  const EvacIngestDataModeEnum._(this.value);

  factory EvacIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EvacIngestDataModeEnum');
    }
    return result;
  }

  static EvacIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : EvacIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const EvacIngestDataModeEnum REAL = EvacIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const EvacIngestDataModeEnum TEST = EvacIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const EvacIngestDataModeEnum SIMULATED = EvacIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const EvacIngestDataModeEnum EXERCISE = EvacIngestDataModeEnum._(3);
  static const Map<int, EvacIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<EvacIngestDataModeEnum> reader = _EvacIngestDataModeEnumReader();

  @override
  String toString() {
    return 'EvacIngestDataModeEnum{value: $value}';
  }
}

class _EvacIngestDataModeEnumReader extends fb.Reader<EvacIngestDataModeEnum> {
  const _EvacIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  EvacIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      EvacIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.
class EvacIngest {
  EvacIngest._(this._bc, this._bcOffset);
  factory EvacIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EvacIngest> reader = _EvacIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: MEDEVACEVENT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.
  ///  Example: /// Example: MedEvac-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get medevacId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The type of this medevac record (REQUEST, RESPONSE).
  ///  Example: /// Example: REQUEST
  ///  Constraints: Minimum length = 1, Maximum length = 8
  EvacIngestTypeEnum get type => EvacIngestTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 10, 0));
  ///  The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
  ///  Example: /// Example: GROUND
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get missionType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of a weather report associated with this evacuation.
  ///  Example: /// Example: WeatherReport-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idWeatherReport => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Number of people Killed In Action.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get numKia => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  Number of people Wounded In Action.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get numWia => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Number of littered personnel requiring evacuation.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get numLitter => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  ///  Number of ambulatory personnel requiring evacuation.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get numAmbulatory => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 22, 0);
  ///  Flag indicating whether the mission requires medical personnel.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get medicReq => const fb.BoolReader().vTableGet(_bc, _bcOffset, 24, false);
  ///  Externally provided Medevac request number (e.g. MED.1.223908).
  ///  Example: /// Example: MED.1.234567
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get reqNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The request time, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-10-15T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get reqTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The call sign of this medevac requestor.
  ///  Example: /// Example: Bravo
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get reqCallSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The expected pickup time, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-10-20T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get pickupTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 75.1234
  ///  Constraints: No constraints specified.
  double get pickupLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 175.1234
  ///  Constraints: No constraints specified.
  double get pickupLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.
  ///  Example: /// Example: 30.1234
  ///  Constraints: No constraints specified.
  double get pickupAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
  ///  Example: /// Example: 10.1234
  ///  Constraints: No constraints specified.
  double get ce => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Height above lat/lon point, in meters (1-sigma, if representing linear error).
  ///  Example: /// Example: 5.1234
  ///  Constraints: No constraints specified.
  double get le => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
  ///  Example: /// Example: ROCKY
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get terrain => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Amplifying data for the terrain describing important obstacles in or around the zone.
  ///  Example: /// Example: N/A
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get obstaclesRemarks => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Amplifying data for the terrain describing any notable additional terrain features.
  ///  Example: /// Example: N/A
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get terrainRemarks => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The name of the zone.
  ///  Example: /// Example: example-zone
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get zoneName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).
  ///  Example: /// Example: ILLUMINATION
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get zoneMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
  ///  Example: /// Example: NO ENEMY
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get zoneSecurity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
  ///  Example: /// Example: RED
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get zoneMarkingColor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Flag indicating that the pickup site is hot and hostiles are in the area.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get zoneHot => const fb.BoolReader().vTableGet(_bc, _bcOffset, 58, false);
  ///  The contact frequency, in Hz, of the agency or zone controller.
  ///  Example: /// Example: 3.11
  ///  Constraints: No constraints specified.
  double get cntctFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  The call sign of the zone controller.
  ///  Example: /// Example: Tango
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get zoneContrCallSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  The count of people requiring medevac.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get numCasualties => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 64, 0);
  ///  Additional comments for the medevac mission.
  ///  Example: /// Example: Comments concerning mission
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get comments => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get casualtyInfo => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 68);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get enemyData => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 70);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  EvacIngestDataModeEnum get dataMode => EvacIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 82, 0));

  @override
  String toString() {
    return 'EvacIngest{id: ${id}, classificationMarking: ${classificationMarking}, medevacId: ${medevacId}, type: ${type}, missionType: ${missionType}, idWeatherReport: ${idWeatherReport}, numKia: ${numKia}, numWia: ${numWia}, numLitter: ${numLitter}, numAmbulatory: ${numAmbulatory}, medicReq: ${medicReq}, reqNum: ${reqNum}, reqTime: ${reqTime}, reqCallSign: ${reqCallSign}, pickupTime: ${pickupTime}, pickupLat: ${pickupLat}, pickupLon: ${pickupLon}, pickupAlt: ${pickupAlt}, ce: ${ce}, le: ${le}, terrain: ${terrain}, obstaclesRemarks: ${obstaclesRemarks}, terrainRemarks: ${terrainRemarks}, zoneName: ${zoneName}, zoneMarking: ${zoneMarking}, zoneSecurity: ${zoneSecurity}, zoneMarkingColor: ${zoneMarkingColor}, zoneHot: ${zoneHot}, cntctFreq: ${cntctFreq}, zoneContrCallSign: ${zoneContrCallSign}, numCasualties: ${numCasualties}, comments: ${comments}, casualtyInfo: ${casualtyInfo}, enemyData: ${enemyData}, origNetwork: ${origNetwork}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}}';
  }
}

class _EvacIngestReader extends fb.TableReader<EvacIngest> {
  const _EvacIngestReader();

  @override
  EvacIngest createObject(fb.BufferContext bc, int offset) => 
    EvacIngest._(bc, offset);
}

class EvacIngestBuilder {
  EvacIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(40);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMedevacIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addType(EvacIngestTypeEnum? type) {
    fbBuilder.addInt8(3, type?.value);
    return fbBuilder.offset;
  }
  int addMissionTypeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdWeatherReportOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addNumKia(int? numKia) {
    fbBuilder.addInt32(6, numKia);
    return fbBuilder.offset;
  }
  int addNumWia(int? numWia) {
    fbBuilder.addInt32(7, numWia);
    return fbBuilder.offset;
  }
  int addNumLitter(int? numLitter) {
    fbBuilder.addInt32(8, numLitter);
    return fbBuilder.offset;
  }
  int addNumAmbulatory(int? numAmbulatory) {
    fbBuilder.addInt32(9, numAmbulatory);
    return fbBuilder.offset;
  }
  int addMedicReq(bool? medicReq) {
    fbBuilder.addBool(10, medicReq);
    return fbBuilder.offset;
  }
  int addReqNumOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addReqTimeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addReqCallSignOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addPickupTimeOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addPickupLat(double? pickupLat) {
    fbBuilder.addFloat64(15, pickupLat);
    return fbBuilder.offset;
  }
  int addPickupLon(double? pickupLon) {
    fbBuilder.addFloat64(16, pickupLon);
    return fbBuilder.offset;
  }
  int addPickupAlt(double? pickupAlt) {
    fbBuilder.addFloat64(17, pickupAlt);
    return fbBuilder.offset;
  }
  int addCe(double? ce) {
    fbBuilder.addFloat64(18, ce);
    return fbBuilder.offset;
  }
  int addLe(double? le) {
    fbBuilder.addFloat64(19, le);
    return fbBuilder.offset;
  }
  int addTerrainOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addObstaclesRemarksOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addTerrainRemarksOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addZoneNameOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addZoneMarkingOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addZoneSecurityOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addZoneMarkingColorOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addZoneHot(bool? zoneHot) {
    fbBuilder.addBool(27, zoneHot);
    return fbBuilder.offset;
  }
  int addCntctFreq(double? cntctFreq) {
    fbBuilder.addFloat64(28, cntctFreq);
    return fbBuilder.offset;
  }
  int addZoneContrCallSignOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addNumCasualties(int? numCasualties) {
    fbBuilder.addInt32(30, numCasualties);
    return fbBuilder.offset;
  }
  int addCommentsOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addCasualtyInfoOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addEnemyDataOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addDataMode(EvacIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(39, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EvacIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _medevacId;
  final EvacIngestTypeEnum? _type;
  final String? _missionType;
  final String? _idWeatherReport;
  final int? _numKia;
  final int? _numWia;
  final int? _numLitter;
  final int? _numAmbulatory;
  final bool? _medicReq;
  final String? _reqNum;
  final String? _reqTime;
  final String? _reqCallSign;
  final String? _pickupTime;
  final double? _pickupLat;
  final double? _pickupLon;
  final double? _pickupAlt;
  final double? _ce;
  final double? _le;
  final String? _terrain;
  final String? _obstaclesRemarks;
  final String? _terrainRemarks;
  final String? _zoneName;
  final String? _zoneMarking;
  final String? _zoneSecurity;
  final String? _zoneMarkingColor;
  final bool? _zoneHot;
  final double? _cntctFreq;
  final String? _zoneContrCallSign;
  final int? _numCasualties;
  final String? _comments;
  final List<String>? _casualtyInfo;
  final List<String>? _enemyData;
  final String? _origNetwork;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final EvacIngestDataModeEnum? _dataMode;

  EvacIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? medevacId,
    EvacIngestTypeEnum? type,
    String? missionType,
    String? idWeatherReport,
    int? numKia,
    int? numWia,
    int? numLitter,
    int? numAmbulatory,
    bool? medicReq,
    String? reqNum,
    String? reqTime,
    String? reqCallSign,
    String? pickupTime,
    double? pickupLat,
    double? pickupLon,
    double? pickupAlt,
    double? ce,
    double? le,
    String? terrain,
    String? obstaclesRemarks,
    String? terrainRemarks,
    String? zoneName,
    String? zoneMarking,
    String? zoneSecurity,
    String? zoneMarkingColor,
    bool? zoneHot,
    double? cntctFreq,
    String? zoneContrCallSign,
    int? numCasualties,
    String? comments,
    List<String>? casualtyInfo,
    List<String>? enemyData,
    String? origNetwork,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    EvacIngestDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _medevacId = medevacId,
        _type = type,
        _missionType = missionType,
        _idWeatherReport = idWeatherReport,
        _numKia = numKia,
        _numWia = numWia,
        _numLitter = numLitter,
        _numAmbulatory = numAmbulatory,
        _medicReq = medicReq,
        _reqNum = reqNum,
        _reqTime = reqTime,
        _reqCallSign = reqCallSign,
        _pickupTime = pickupTime,
        _pickupLat = pickupLat,
        _pickupLon = pickupLon,
        _pickupAlt = pickupAlt,
        _ce = ce,
        _le = le,
        _terrain = terrain,
        _obstaclesRemarks = obstaclesRemarks,
        _terrainRemarks = terrainRemarks,
        _zoneName = zoneName,
        _zoneMarking = zoneMarking,
        _zoneSecurity = zoneSecurity,
        _zoneMarkingColor = zoneMarkingColor,
        _zoneHot = zoneHot,
        _cntctFreq = cntctFreq,
        _zoneContrCallSign = zoneContrCallSign,
        _numCasualties = numCasualties,
        _comments = comments,
        _casualtyInfo = casualtyInfo,
        _enemyData = enemyData,
        _origNetwork = origNetwork,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? medevacIdOffset = _medevacId == null ? null
        : fbBuilder.writeString(_medevacId!);
    final int? missionTypeOffset = _missionType == null ? null
        : fbBuilder.writeString(_missionType!);
    final int? idWeatherReportOffset = _idWeatherReport == null ? null
        : fbBuilder.writeString(_idWeatherReport!);
    final int? reqNumOffset = _reqNum == null ? null
        : fbBuilder.writeString(_reqNum!);
    final int? reqTimeOffset = _reqTime == null ? null
        : fbBuilder.writeString(_reqTime!);
    final int? reqCallSignOffset = _reqCallSign == null ? null
        : fbBuilder.writeString(_reqCallSign!);
    final int? pickupTimeOffset = _pickupTime == null ? null
        : fbBuilder.writeString(_pickupTime!);
    final int? terrainOffset = _terrain == null ? null
        : fbBuilder.writeString(_terrain!);
    final int? obstaclesRemarksOffset = _obstaclesRemarks == null ? null
        : fbBuilder.writeString(_obstaclesRemarks!);
    final int? terrainRemarksOffset = _terrainRemarks == null ? null
        : fbBuilder.writeString(_terrainRemarks!);
    final int? zoneNameOffset = _zoneName == null ? null
        : fbBuilder.writeString(_zoneName!);
    final int? zoneMarkingOffset = _zoneMarking == null ? null
        : fbBuilder.writeString(_zoneMarking!);
    final int? zoneSecurityOffset = _zoneSecurity == null ? null
        : fbBuilder.writeString(_zoneSecurity!);
    final int? zoneMarkingColorOffset = _zoneMarkingColor == null ? null
        : fbBuilder.writeString(_zoneMarkingColor!);
    final int? zoneContrCallSignOffset = _zoneContrCallSign == null ? null
        : fbBuilder.writeString(_zoneContrCallSign!);
    final int? commentsOffset = _comments == null ? null
        : fbBuilder.writeString(_comments!);
    final int? casualtyInfoOffset = _casualtyInfo == null ? null
        : fbBuilder.writeList(_casualtyInfo!.map(fbBuilder.writeString).toList());
    final int? enemyDataOffset = _enemyData == null ? null
        : fbBuilder.writeList(_enemyData!.map(fbBuilder.writeString).toList());
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    fbBuilder.startTable(40);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, medevacIdOffset);
    fbBuilder.addInt8(3, _type?.value);
    fbBuilder.addOffset(4, missionTypeOffset);
    fbBuilder.addOffset(5, idWeatherReportOffset);
    fbBuilder.addInt32(6, _numKia);
    fbBuilder.addInt32(7, _numWia);
    fbBuilder.addInt32(8, _numLitter);
    fbBuilder.addInt32(9, _numAmbulatory);
    fbBuilder.addBool(10, _medicReq);
    fbBuilder.addOffset(11, reqNumOffset);
    fbBuilder.addOffset(12, reqTimeOffset);
    fbBuilder.addOffset(13, reqCallSignOffset);
    fbBuilder.addOffset(14, pickupTimeOffset);
    fbBuilder.addFloat64(15, _pickupLat);
    fbBuilder.addFloat64(16, _pickupLon);
    fbBuilder.addFloat64(17, _pickupAlt);
    fbBuilder.addFloat64(18, _ce);
    fbBuilder.addFloat64(19, _le);
    fbBuilder.addOffset(20, terrainOffset);
    fbBuilder.addOffset(21, obstaclesRemarksOffset);
    fbBuilder.addOffset(22, terrainRemarksOffset);
    fbBuilder.addOffset(23, zoneNameOffset);
    fbBuilder.addOffset(24, zoneMarkingOffset);
    fbBuilder.addOffset(25, zoneSecurityOffset);
    fbBuilder.addOffset(26, zoneMarkingColorOffset);
    fbBuilder.addBool(27, _zoneHot);
    fbBuilder.addFloat64(28, _cntctFreq);
    fbBuilder.addOffset(29, zoneContrCallSignOffset);
    fbBuilder.addInt32(30, _numCasualties);
    fbBuilder.addOffset(31, commentsOffset);
    fbBuilder.addOffset(32, casualtyInfoOffset);
    fbBuilder.addOffset(33, enemyDataOffset);
    fbBuilder.addOffset(34, origNetworkOffset);
    fbBuilder.addOffset(35, createdAtOffset);
    fbBuilder.addOffset(36, createdByOffset);
    fbBuilder.addOffset(37, sourceOffset);
    fbBuilder.addOffset(38, originOffset);
    fbBuilder.addInt8(39, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
