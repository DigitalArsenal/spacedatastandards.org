// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library evac_vital_sign_data_abridged;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Information obtained for vital signs.
class EvacVitalSignDataAbridged {
  EvacVitalSignDataAbridged._(this._bc, this._bcOffset);
  factory EvacVitalSignDataAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EvacVitalSignDataAbridged> reader = _EvacVitalSignDataAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).
  ///  Example: HEART RATE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get vitalSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
  ///  Example: 120
  ///  Constraints: No constraints specified.
  double get vitalSign1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
  ///  Example: 80
  ///  Constraints: No constraints specified.
  double get vitalSign2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  Medical confidence factor.
  ///  Example: 1
  ///  Constraints: No constraints specified.
  int get medConfFactor => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
  ///  Example: 2021-10-15T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get time => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'EvacVitalSignDataAbridged{vitalSign: ${vitalSign}, vitalSign1: ${vitalSign1}, vitalSign2: ${vitalSign2}, medConfFactor: ${medConfFactor}, time: ${time}}';
  }
}

class _EvacVitalSignDataAbridgedReader extends fb.TableReader<EvacVitalSignDataAbridged> {
  const _EvacVitalSignDataAbridgedReader();

  @override
  EvacVitalSignDataAbridged createObject(fb.BufferContext bc, int offset) => 
    EvacVitalSignDataAbridged._(bc, offset);
}

class EvacVitalSignDataAbridgedBuilder {
  EvacVitalSignDataAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addVitalSignOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVitalSign1(double? vitalSign1) {
    fbBuilder.addFloat64(1, vitalSign1);
    return fbBuilder.offset;
  }
  int addVitalSign2(double? vitalSign2) {
    fbBuilder.addFloat64(2, vitalSign2);
    return fbBuilder.offset;
  }
  int addMedConfFactor(int? medConfFactor) {
    fbBuilder.addInt32(3, medConfFactor);
    return fbBuilder.offset;
  }
  int addTimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EvacVitalSignDataAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _vitalSign;
  final double? _vitalSign1;
  final double? _vitalSign2;
  final int? _medConfFactor;
  final String? _time;

  EvacVitalSignDataAbridgedObjectBuilder({
    String? vitalSign,
    double? vitalSign1,
    double? vitalSign2,
    int? medConfFactor,
    String? time,
  })
      : _vitalSign = vitalSign,
        _vitalSign1 = vitalSign1,
        _vitalSign2 = vitalSign2,
        _medConfFactor = medConfFactor,
        _time = time;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? vitalSignOffset = _vitalSign == null ? null
        : fbBuilder.writeString(_vitalSign!);
    final int? timeOffset = _time == null ? null
        : fbBuilder.writeString(_time!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, vitalSignOffset);
    fbBuilder.addFloat64(1, _vitalSign1);
    fbBuilder.addFloat64(2, _vitalSign2);
    fbBuilder.addInt32(3, _medConfFactor);
    fbBuilder.addOffset(4, timeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
