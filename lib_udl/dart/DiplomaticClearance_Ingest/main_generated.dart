// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class DiplomaticClearanceIngestDataModeEnum {
  final int value;
  const DiplomaticClearanceIngestDataModeEnum._(this.value);

  factory DiplomaticClearanceIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum DiplomaticClearanceIngestDataModeEnum');
    }
    return result;
  }

  static DiplomaticClearanceIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : DiplomaticClearanceIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const DiplomaticClearanceIngestDataModeEnum REAL = DiplomaticClearanceIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const DiplomaticClearanceIngestDataModeEnum TEST = DiplomaticClearanceIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const DiplomaticClearanceIngestDataModeEnum SIMULATED = DiplomaticClearanceIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const DiplomaticClearanceIngestDataModeEnum EXERCISE = DiplomaticClearanceIngestDataModeEnum._(3);
  static const Map<int, DiplomaticClearanceIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<DiplomaticClearanceIngestDataModeEnum> reader = _DiplomaticClearanceIngestDataModeEnumReader();

  @override
  String toString() {
    return 'DiplomaticClearanceIngestDataModeEnum{value: $value}';
  }
}

class _DiplomaticClearanceIngestDataModeEnumReader extends fb.Reader<DiplomaticClearanceIngestDataModeEnum> {
  const _DiplomaticClearanceIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  DiplomaticClearanceIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      DiplomaticClearanceIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// A diplomatic clearance is an authorization for an aircraft to traverse or land within a specified country.
class DiplomaticClearanceIngest {
  DiplomaticClearanceIngest._(this._bc, this._bcOffset);
  factory DiplomaticClearanceIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DiplomaticClearanceIngest> reader = _DiplomaticClearanceIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: 25059135-4afc-45c2-b78b-d6e843dbd96d
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the Mission associated with this diplomatic clearance record.
  ///  Example: /// Example: 0dba1363-2d09-49fa-a784-4bb4cbb1674a
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idMission => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional diplomatic clearance worksheet ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: 990ae849089e3d6cad69655324176bb6
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalWorksheetId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
  ///  Example: /// Example: G2-939911-AC
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get dipWorksheetName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The First Departure Date (FDD) the mission is scheduled for departure, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get firstDepDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get docDeadline => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve this clearance request.
  ///  Example: /// Example: 1083034
  ///  Constraints: Minimum length = 0, Maximum length = 40
  String? get apacsId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Collection of diplomatic clearance details.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get diplomaticClearanceDetails => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);
  ///  Collection of diplomatic clearance remarks.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get diplomaticClearanceRemarks => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 22);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  DiplomaticClearanceIngestDataModeEnum get dataMode => DiplomaticClearanceIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 40, 0));

  @override
  String toString() {
    return 'DiplomaticClearanceIngest{id: ${id}, classificationMarking: ${classificationMarking}, idMission: ${idMission}, externalWorksheetId: ${externalWorksheetId}, dipWorksheetName: ${dipWorksheetName}, firstDepDate: ${firstDepDate}, docDeadline: ${docDeadline}, apacsId: ${apacsId}, diplomaticClearanceDetails: ${diplomaticClearanceDetails}, diplomaticClearanceRemarks: ${diplomaticClearanceRemarks}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _DiplomaticClearanceIngestReader extends fb.TableReader<DiplomaticClearanceIngest> {
  const _DiplomaticClearanceIngestReader();

  @override
  DiplomaticClearanceIngest createObject(fb.BufferContext bc, int offset) => 
    DiplomaticClearanceIngest._(bc, offset);
}

class DiplomaticClearanceIngestBuilder {
  DiplomaticClearanceIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(19);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdMissionOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addExternalWorksheetIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDipWorksheetNameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addFirstDepDateOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addDocDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addApacsIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addDiplomaticClearanceDetailsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addDiplomaticClearanceRemarksOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addDataMode(DiplomaticClearanceIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(18, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DiplomaticClearanceIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idMission;
  final String? _externalWorksheetId;
  final String? _dipWorksheetName;
  final String? _firstDepDate;
  final String? _docDeadline;
  final String? _apacsId;
  final List<String>? _diplomaticClearanceDetails;
  final List<String>? _diplomaticClearanceRemarks;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final DiplomaticClearanceIngestDataModeEnum? _dataMode;

  DiplomaticClearanceIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idMission,
    String? externalWorksheetId,
    String? dipWorksheetName,
    String? firstDepDate,
    String? docDeadline,
    String? apacsId,
    List<String>? diplomaticClearanceDetails,
    List<String>? diplomaticClearanceRemarks,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    DiplomaticClearanceIngestDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idMission = idMission,
        _externalWorksheetId = externalWorksheetId,
        _dipWorksheetName = dipWorksheetName,
        _firstDepDate = firstDepDate,
        _docDeadline = docDeadline,
        _apacsId = apacsId,
        _diplomaticClearanceDetails = diplomaticClearanceDetails,
        _diplomaticClearanceRemarks = diplomaticClearanceRemarks,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idMissionOffset = _idMission == null ? null
        : fbBuilder.writeString(_idMission!);
    final int? externalWorksheetIdOffset = _externalWorksheetId == null ? null
        : fbBuilder.writeString(_externalWorksheetId!);
    final int? dipWorksheetNameOffset = _dipWorksheetName == null ? null
        : fbBuilder.writeString(_dipWorksheetName!);
    final int? firstDepDateOffset = _firstDepDate == null ? null
        : fbBuilder.writeString(_firstDepDate!);
    final int? docDeadlineOffset = _docDeadline == null ? null
        : fbBuilder.writeString(_docDeadline!);
    final int? apacsIdOffset = _apacsId == null ? null
        : fbBuilder.writeString(_apacsId!);
    final int? diplomaticClearanceDetailsOffset = _diplomaticClearanceDetails == null ? null
        : fbBuilder.writeList(_diplomaticClearanceDetails!.map(fbBuilder.writeString).toList());
    final int? diplomaticClearanceRemarksOffset = _diplomaticClearanceRemarks == null ? null
        : fbBuilder.writeList(_diplomaticClearanceRemarks!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(19);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idMissionOffset);
    fbBuilder.addOffset(3, externalWorksheetIdOffset);
    fbBuilder.addOffset(4, dipWorksheetNameOffset);
    fbBuilder.addOffset(5, firstDepDateOffset);
    fbBuilder.addOffset(6, docDeadlineOffset);
    fbBuilder.addOffset(7, apacsIdOffset);
    fbBuilder.addOffset(8, diplomaticClearanceDetailsOffset);
    fbBuilder.addOffset(9, diplomaticClearanceRemarksOffset);
    fbBuilder.addOffset(10, createdAtOffset);
    fbBuilder.addOffset(11, createdByOffset);
    fbBuilder.addOffset(12, updatedAtOffset);
    fbBuilder.addOffset(13, updatedByOffset);
    fbBuilder.addOffset(14, sourceDlOffset);
    fbBuilder.addOffset(15, sourceOffset);
    fbBuilder.addOffset(16, originOffset);
    fbBuilder.addOffset(17, origNetworkOffset);
    fbBuilder.addInt8(18, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
