// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
class DataLinkSpecTracksFull {
  DataLinkSpecTracksFull._(this._bc, this._bcOffset);
  factory DataLinkSpecTracksFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DataLinkSpecTracksFull> reader = _DataLinkSpecTracksFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The special track number used on the data link entered as an octal reference number. Used to identify a particular type of platform (e.g. MPA, KRESTA) or platform name (e.g. TROMP, MOUNT WHITNEY) which is not included in assigned track blocks.
  ///  Example: /// Example: 12345
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get specTrackNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Description of the special track number.
  ///  Example: /// Example: SAM SITE CHARLIE
  ///  Constraints: Minimum length = 0, Maximum length = 40
  String? get specTrackNumDesc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DataLinkSpecTracksFull{specTrackNum: ${specTrackNum}, specTrackNumDesc: ${specTrackNumDesc}}';
  }
}

class _DataLinkSpecTracksFullReader extends fb.TableReader<DataLinkSpecTracksFull> {
  const _DataLinkSpecTracksFullReader();

  @override
  DataLinkSpecTracksFull createObject(fb.BufferContext bc, int offset) => 
    DataLinkSpecTracksFull._(bc, offset);
}

class DataLinkSpecTracksFullBuilder {
  DataLinkSpecTracksFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSpecTrackNumOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecTrackNumDescOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DataLinkSpecTracksFullObjectBuilder extends fb.ObjectBuilder {
  final String? _specTrackNum;
  final String? _specTrackNumDesc;

  DataLinkSpecTracksFullObjectBuilder({
    String? specTrackNum,
    String? specTrackNumDesc,
  })
      : _specTrackNum = specTrackNum,
        _specTrackNumDesc = specTrackNumDesc;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? specTrackNumOffset = _specTrackNum == null ? null
        : fbBuilder.writeString(_specTrackNum!);
    final int? specTrackNumDescOffset = _specTrackNumDesc == null ? null
        : fbBuilder.writeString(_specTrackNumDesc!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, specTrackNumOffset);
    fbBuilder.addOffset(1, specTrackNumDescOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
