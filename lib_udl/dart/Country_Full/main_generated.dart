// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class CountryFullDataModeEnum {
  final int value;
  const CountryFullDataModeEnum._(this.value);

  factory CountryFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum CountryFullDataModeEnum');
    }
    return result;
  }

  static CountryFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : CountryFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const CountryFullDataModeEnum REAL = CountryFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const CountryFullDataModeEnum TEST = CountryFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const CountryFullDataModeEnum SIMULATED = CountryFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const CountryFullDataModeEnum EXERCISE = CountryFullDataModeEnum._(3);
  static const Map<int, CountryFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<CountryFullDataModeEnum> reader = _CountryFullDataModeEnumReader();

  @override
  String toString() {
    return 'CountryFullDataModeEnum{value: $value}';
  }
}

class _CountryFullDataModeEnumReader extends fb.Reader<CountryFullDataModeEnum> {
  const _CountryFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  CountryFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      CountryFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// A Country may represent countries, multi-national consortiums, and international organizations.
class CountryFull {
  CountryFull._(this._bc, this._bcOffset);
  factory CountryFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CountryFull> reader = _CountryFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The country code. Optimally, this value is the ISO 3166 Alpha-2-two-character country code, however it can represent various consortiums that do not appear in the ISO document.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 1, Maximum length = 4
  String? get code => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Country name.
  ///  Example: /// Example: UNITED STATES
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Federal Information Processing Standard (FIPS) two-character country code. This field is used when the country code for FIPS differs from the country code for ISO-3166 value. For example, the ISO-3166 Alpha-2-country code for Vanuatu is VU, whereas Vanuatu's FIPS equivalent country code is NH.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get fipsCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  ISO 3166 Alpha-3 country code. This is a three-character code that represents a country name, which may be more closely related to the country name than its corresponding Alpha-2 code.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get iso3Code => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  3 Digit or other alternate country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get codeAlt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  CountryFullDataModeEnum get dataMode => CountryFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 26, 0));

  @override
  String toString() {
    return 'CountryFull{code: ${code}, name: ${name}, fipsCode: ${fipsCode}, iso3Code: ${iso3Code}, codeAlt: ${codeAlt}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _CountryFullReader extends fb.TableReader<CountryFull> {
  const _CountryFullReader();

  @override
  CountryFull createObject(fb.BufferContext bc, int offset) => 
    CountryFull._(bc, offset);
}

class CountryFullBuilder {
  CountryFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addCodeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFipsCodeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIso3CodeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addCodeAltOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addDataMode(CountryFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(11, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CountryFullObjectBuilder extends fb.ObjectBuilder {
  final String? _code;
  final String? _name;
  final String? _fipsCode;
  final String? _iso3Code;
  final String? _codeAlt;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origNetwork;
  final CountryFullDataModeEnum? _dataMode;

  CountryFullObjectBuilder({
    String? code,
    String? name,
    String? fipsCode,
    String? iso3Code,
    String? codeAlt,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origNetwork,
    CountryFullDataModeEnum? dataMode,
  })
      : _code = code,
        _name = name,
        _fipsCode = fipsCode,
        _iso3Code = iso3Code,
        _codeAlt = codeAlt,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? codeOffset = _code == null ? null
        : fbBuilder.writeString(_code!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? fipsCodeOffset = _fipsCode == null ? null
        : fbBuilder.writeString(_fipsCode!);
    final int? iso3CodeOffset = _iso3Code == null ? null
        : fbBuilder.writeString(_iso3Code!);
    final int? codeAltOffset = _codeAlt == null ? null
        : fbBuilder.writeString(_codeAlt!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(12);
    fbBuilder.addOffset(0, codeOffset);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addOffset(2, fipsCodeOffset);
    fbBuilder.addOffset(3, iso3CodeOffset);
    fbBuilder.addOffset(4, codeAltOffset);
    fbBuilder.addOffset(5, createdAtOffset);
    fbBuilder.addOffset(6, createdByOffset);
    fbBuilder.addOffset(7, updatedAtOffset);
    fbBuilder.addOffset(8, updatedByOffset);
    fbBuilder.addOffset(9, sourceOffset);
    fbBuilder.addOffset(10, origNetworkOffset);
    fbBuilder.addInt8(11, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
