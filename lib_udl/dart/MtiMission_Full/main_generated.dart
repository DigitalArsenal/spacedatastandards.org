// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
class MtiMissionFull {
  MtiMissionFull._(this._bc, this._bcOffset);
  factory MtiMissionFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MtiMissionFull> reader = _MtiMissionFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The mission plan id.
  ///  Example: /// Example: M1-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get m1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Unique identification of the flight plan.
  ///  Example: /// Example: M2-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get m2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Platform type that originated the data.
  ///  Example: /// Example: PLATFORM
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get m3 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Identification of the platform variant, modifications, etc.
  ///  Example: /// Example: IDENT
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get m4 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Mission origination date.
  ///  Example: /// Example: 2018-01-01
  ///  Constraints: No constraints specified.
  String? get msnRefTs => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'MtiMissionFull{m1: ${m1}, m2: ${m2}, m3: ${m3}, m4: ${m4}, msnRefTs: ${msnRefTs}}';
  }
}

class _MtiMissionFullReader extends fb.TableReader<MtiMissionFull> {
  const _MtiMissionFullReader();

  @override
  MtiMissionFull createObject(fb.BufferContext bc, int offset) => 
    MtiMissionFull._(bc, offset);
}

class MtiMissionFullBuilder {
  MtiMissionFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addM1Offset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addM2Offset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addM3Offset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addM4Offset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMsnRefTsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MtiMissionFullObjectBuilder extends fb.ObjectBuilder {
  final String? _m1;
  final String? _m2;
  final String? _m3;
  final String? _m4;
  final String? _msnRefTs;

  MtiMissionFullObjectBuilder({
    String? m1,
    String? m2,
    String? m3,
    String? m4,
    String? msnRefTs,
  })
      : _m1 = m1,
        _m2 = m2,
        _m3 = m3,
        _m4 = m4,
        _msnRefTs = msnRefTs;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? m1Offset = _m1 == null ? null
        : fbBuilder.writeString(_m1!);
    final int? m2Offset = _m2 == null ? null
        : fbBuilder.writeString(_m2!);
    final int? m3Offset = _m3 == null ? null
        : fbBuilder.writeString(_m3!);
    final int? m4Offset = _m4 == null ? null
        : fbBuilder.writeString(_m4!);
    final int? msnRefTsOffset = _msnRefTs == null ? null
        : fbBuilder.writeString(_msnRefTs!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, m1Offset);
    fbBuilder.addOffset(1, m2Offset);
    fbBuilder.addOffset(2, m3Offset);
    fbBuilder.addOffset(3, m4Offset);
    fbBuilder.addOffset(4, msnRefTsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
