// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SeradataSigIntPayloadFullDataModeEnum {
  final int value;
  const SeradataSigIntPayloadFullDataModeEnum._(this.value);

  factory SeradataSigIntPayloadFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SeradataSigIntPayloadFullDataModeEnum');
    }
    return result;
  }

  static SeradataSigIntPayloadFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SeradataSigIntPayloadFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SeradataSigIntPayloadFullDataModeEnum REAL = SeradataSigIntPayloadFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SeradataSigIntPayloadFullDataModeEnum TEST = SeradataSigIntPayloadFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SeradataSigIntPayloadFullDataModeEnum SIMULATED = SeradataSigIntPayloadFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SeradataSigIntPayloadFullDataModeEnum EXERCISE = SeradataSigIntPayloadFullDataModeEnum._(3);
  static const Map<int, SeradataSigIntPayloadFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SeradataSigIntPayloadFullDataModeEnum> reader = _SeradataSigIntPayloadFullDataModeEnumReader();

  @override
  String toString() {
    return 'SeradataSigIntPayloadFullDataModeEnum{value: $value}';
  }
}

class _SeradataSigIntPayloadFullDataModeEnumReader extends fb.Reader<SeradataSigIntPayloadFullDataModeEnum> {
  const _SeradataSigIntPayloadFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SeradataSigIntPayloadFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      SeradataSigIntPayloadFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Details for an sigint payload from  Seradata.
class SeradataSigIntPayloadFull {
  SeradataSigIntPayloadFull._(this._bc, this._bcOffset);
  factory SeradataSigIntPayloadFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SeradataSigIntPayloadFull> reader = _SeradataSigIntPayloadFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SERADATASIGINTPAYLOAD-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  ///  Example: /// Example: spacecraftId
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get spacecraftId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  UUID of the Sensor record.
  ///  Example: /// Example: 0c5ec9c0-10cd-1d35-c46b-3764c4d76e13
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Hosted for company/Organization Id.
  ///  Example: /// Example: hostedForCompanyOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get hostedForCompanyOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Manufacturer Organization Id.
  ///  Example: /// Example: manufacturerOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get manufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  SIGINT Payload type, e.g. Comint, Elint, etc.
  ///  Example: /// Example: Comint
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Swath Width in kilometers.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get swathWidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Ground Station info for this payload.
  ///  Example: /// Example: groundStations
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get groundStations => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Ground Station Locations for this payload.
  ///  Example: /// Example: groundStationLocations
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get groundStationLocations => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Frequency coverage for this payload.
  ///  Example: /// Example: 1.1 to 3.3
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get frequencyCoverage => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Positional Accuracy for this payload.
  ///  Example: /// Example: positionalAccuracy
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get positionalAccuracy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Intercept parameters.
  ///  Example: /// Example: interceptParameters
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get interceptParameters => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Sensor name from Seradata.
  ///  Example: /// Example: Sensor Name
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Payload notes.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SeradataSigIntPayloadFullDataModeEnum get dataMode => SeradataSigIntPayloadFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 48, 0));

  @override
  String toString() {
    return 'SeradataSigIntPayloadFull{id: ${id}, classificationMarking: ${classificationMarking}, spacecraftId: ${spacecraftId}, idSensor: ${idSensor}, hostedForCompanyOrgId: ${hostedForCompanyOrgId}, manufacturerOrgId: ${manufacturerOrgId}, type: ${type}, swathWidth: ${swathWidth}, groundStations: ${groundStations}, groundStationLocations: ${groundStationLocations}, frequencyCoverage: ${frequencyCoverage}, positionalAccuracy: ${positionalAccuracy}, interceptParameters: ${interceptParameters}, name: ${name}, notes: ${notes}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _SeradataSigIntPayloadFullReader extends fb.TableReader<SeradataSigIntPayloadFull> {
  const _SeradataSigIntPayloadFullReader();

  @override
  SeradataSigIntPayloadFull createObject(fb.BufferContext bc, int offset) => 
    SeradataSigIntPayloadFull._(bc, offset);
}

class SeradataSigIntPayloadFullBuilder {
  SeradataSigIntPayloadFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(23);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSpacecraftIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addHostedForCompanyOrgIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addSwathWidth(double? swathWidth) {
    fbBuilder.addFloat64(7, swathWidth);
    return fbBuilder.offset;
  }
  int addGroundStationsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addGroundStationLocationsOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addFrequencyCoverageOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addPositionalAccuracyOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addInterceptParametersOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SeradataSigIntPayloadFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(22, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SeradataSigIntPayloadFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _spacecraftId;
  final String? _idSensor;
  final String? _hostedForCompanyOrgId;
  final String? _manufacturerOrgId;
  final String? _type;
  final double? _swathWidth;
  final String? _groundStations;
  final String? _groundStationLocations;
  final String? _frequencyCoverage;
  final String? _positionalAccuracy;
  final String? _interceptParameters;
  final String? _name;
  final String? _notes;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SeradataSigIntPayloadFullDataModeEnum? _dataMode;

  SeradataSigIntPayloadFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? spacecraftId,
    String? idSensor,
    String? hostedForCompanyOrgId,
    String? manufacturerOrgId,
    String? type,
    double? swathWidth,
    String? groundStations,
    String? groundStationLocations,
    String? frequencyCoverage,
    String? positionalAccuracy,
    String? interceptParameters,
    String? name,
    String? notes,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    SeradataSigIntPayloadFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _spacecraftId = spacecraftId,
        _idSensor = idSensor,
        _hostedForCompanyOrgId = hostedForCompanyOrgId,
        _manufacturerOrgId = manufacturerOrgId,
        _type = type,
        _swathWidth = swathWidth,
        _groundStations = groundStations,
        _groundStationLocations = groundStationLocations,
        _frequencyCoverage = frequencyCoverage,
        _positionalAccuracy = positionalAccuracy,
        _interceptParameters = interceptParameters,
        _name = name,
        _notes = notes,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? spacecraftIdOffset = _spacecraftId == null ? null
        : fbBuilder.writeString(_spacecraftId!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? hostedForCompanyOrgIdOffset = _hostedForCompanyOrgId == null ? null
        : fbBuilder.writeString(_hostedForCompanyOrgId!);
    final int? manufacturerOrgIdOffset = _manufacturerOrgId == null ? null
        : fbBuilder.writeString(_manufacturerOrgId!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? groundStationsOffset = _groundStations == null ? null
        : fbBuilder.writeString(_groundStations!);
    final int? groundStationLocationsOffset = _groundStationLocations == null ? null
        : fbBuilder.writeString(_groundStationLocations!);
    final int? frequencyCoverageOffset = _frequencyCoverage == null ? null
        : fbBuilder.writeString(_frequencyCoverage!);
    final int? positionalAccuracyOffset = _positionalAccuracy == null ? null
        : fbBuilder.writeString(_positionalAccuracy!);
    final int? interceptParametersOffset = _interceptParameters == null ? null
        : fbBuilder.writeString(_interceptParameters!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(23);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, spacecraftIdOffset);
    fbBuilder.addOffset(3, idSensorOffset);
    fbBuilder.addOffset(4, hostedForCompanyOrgIdOffset);
    fbBuilder.addOffset(5, manufacturerOrgIdOffset);
    fbBuilder.addOffset(6, typeOffset);
    fbBuilder.addFloat64(7, _swathWidth);
    fbBuilder.addOffset(8, groundStationsOffset);
    fbBuilder.addOffset(9, groundStationLocationsOffset);
    fbBuilder.addOffset(10, frequencyCoverageOffset);
    fbBuilder.addOffset(11, positionalAccuracyOffset);
    fbBuilder.addOffset(12, interceptParametersOffset);
    fbBuilder.addOffset(13, nameOffset);
    fbBuilder.addOffset(14, notesOffset);
    fbBuilder.addOffset(15, createdAtOffset);
    fbBuilder.addOffset(16, createdByOffset);
    fbBuilder.addOffset(17, updatedAtOffset);
    fbBuilder.addOffset(18, updatedByOffset);
    fbBuilder.addOffset(19, sourceOffset);
    fbBuilder.addOffset(20, originOffset);
    fbBuilder.addOffset(21, origNetworkOffset);
    fbBuilder.addInt8(22, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
