// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class OnboardNavigationAbridgedReferenceFrameEnum {
  final int value;
  const OnboardNavigationAbridgedReferenceFrameEnum._(this.value);

  factory OnboardNavigationAbridgedReferenceFrameEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OnboardNavigationAbridgedReferenceFrameEnum');
    }
    return result;
  }

  static OnboardNavigationAbridgedReferenceFrameEnum? _createOrNull(int? value) => 
      value == null ? null : OnboardNavigationAbridgedReferenceFrameEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const OnboardNavigationAbridgedReferenceFrameEnum J2000 = OnboardNavigationAbridgedReferenceFrameEnum._(0);

  ///  No description available.
  static const OnboardNavigationAbridgedReferenceFrameEnum EFG_TDR = OnboardNavigationAbridgedReferenceFrameEnum._(1);

  ///  No description available.
  static const OnboardNavigationAbridgedReferenceFrameEnum ECR_ECEF = OnboardNavigationAbridgedReferenceFrameEnum._(2);

  ///  No description available.
  static const OnboardNavigationAbridgedReferenceFrameEnum TEME = OnboardNavigationAbridgedReferenceFrameEnum._(3);

  ///  No description available.
  static const OnboardNavigationAbridgedReferenceFrameEnum ITRF = OnboardNavigationAbridgedReferenceFrameEnum._(4);

  ///  No description available.
  static const OnboardNavigationAbridgedReferenceFrameEnum GCRF = OnboardNavigationAbridgedReferenceFrameEnum._(5);
  static const Map<int, OnboardNavigationAbridgedReferenceFrameEnum> values = {
    0: J2000,
    1: EFG_TDR,
    2: ECR_ECEF,
    3: TEME,
    4: ITRF,
    5: GCRF};

  static const fb.Reader<OnboardNavigationAbridgedReferenceFrameEnum> reader = _OnboardNavigationAbridgedReferenceFrameEnumReader();

  @override
  String toString() {
    return 'OnboardNavigationAbridgedReferenceFrameEnum{value: $value}';
  }
}

class _OnboardNavigationAbridgedReferenceFrameEnumReader extends fb.Reader<OnboardNavigationAbridgedReferenceFrameEnum> {
  const _OnboardNavigationAbridgedReferenceFrameEnumReader();

  @override
  int get size => 1;

  @override
  OnboardNavigationAbridgedReferenceFrameEnum read(fb.BufferContext bc, int offset) =>
      OnboardNavigationAbridgedReferenceFrameEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class OnboardNavigationAbridgedDataModeEnum {
  final int value;
  const OnboardNavigationAbridgedDataModeEnum._(this.value);

  factory OnboardNavigationAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OnboardNavigationAbridgedDataModeEnum');
    }
    return result;
  }

  static OnboardNavigationAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : OnboardNavigationAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const OnboardNavigationAbridgedDataModeEnum REAL = OnboardNavigationAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const OnboardNavigationAbridgedDataModeEnum TEST = OnboardNavigationAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const OnboardNavigationAbridgedDataModeEnum SIMULATED = OnboardNavigationAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const OnboardNavigationAbridgedDataModeEnum EXERCISE = OnboardNavigationAbridgedDataModeEnum._(3);
  static const Map<int, OnboardNavigationAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<OnboardNavigationAbridgedDataModeEnum> reader = _OnboardNavigationAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'OnboardNavigationAbridgedDataModeEnum{value: $value}';
  }
}

class _OnboardNavigationAbridgedDataModeEnumReader extends fb.Reader<OnboardNavigationAbridgedDataModeEnum> {
  const _OnboardNavigationAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  OnboardNavigationAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      OnboardNavigationAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.
class OnboardNavigationAbridged {
  OnboardNavigationAbridged._(this._bc, this._bcOffset);
  factory OnboardNavigationAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OnboardNavigationAbridged> reader = _OnboardNavigationAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ONBOARD-NAVIGATION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the primary satellite on-orbit object.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 101
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Start time of the sensor data, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-07-20T01:02:03.123456Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  End time of the sensor data, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-07-20T01:02:03.123456Z
  ///  Constraints: No constraints specified.
  String? get endTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.
  ///  Example: /// Example: EPHEMERISSET-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get esId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The name or identifier the star catalog in use.
  ///  Example: /// Example: STAR-CAT-NAME
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get starCatName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The last load time of the current star catalog onboard this spacecraft.
  ///  Example: /// Example: 2021-07-21T01:02:03.123Z
  ///  Constraints: No constraints specified.
  String? get starCatLoadTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Unique identifier of the last onboard state vector.
  ///  Example: /// Example: STATE-VECTOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idStateVector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.
  ///  Example: /// Example: ['2021-07-21T01:02:03.120003Z']
  ///  Constraints: No constraints specified.
  List<String>? get ts => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 26);
  ///  The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  OnboardNavigationAbridgedReferenceFrameEnum get referenceFrame => OnboardNavigationAbridgedReferenceFrameEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 28, 0));
  ///  Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.
  ///  Example: /// Example: [[1.1, 2.2, 3.3]]
  ///  Constraints: No constraints specified.
  List<String>? get sunSensor => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.
  ///  Example: /// Example: [[1.1, 2.2, 3.3]]
  ///  Constraints: No constraints specified.
  List<String>? get mag => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.
  ///  Example: /// Example: [[1.1, 2.2, 3.3]]
  ///  Constraints: No constraints specified.
  List<String>? get starTracker => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  ///  Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.
  ///  Example: /// Example: [[1.1, 2.2, 3.3]]
  ///  Constraints: No constraints specified.
  List<String>? get deltaPos => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 36);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 36
  OnboardNavigationAbridgedDataModeEnum get dataMode => OnboardNavigationAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 48, 0));

  @override
  String toString() {
    return 'OnboardNavigationAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, startTime: ${startTime}, endTime: ${endTime}, esId: ${esId}, starCatName: ${starCatName}, starCatLoadTime: ${starCatLoadTime}, idStateVector: ${idStateVector}, ts: ${ts}, referenceFrame: ${referenceFrame}, sunSensor: ${sunSensor}, mag: ${mag}, starTracker: ${starTracker}, deltaPos: ${deltaPos}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _OnboardNavigationAbridgedReader extends fb.TableReader<OnboardNavigationAbridged> {
  const _OnboardNavigationAbridgedReader();

  @override
  OnboardNavigationAbridged createObject(fb.BufferContext bc, int offset) => 
    OnboardNavigationAbridged._(bc, offset);
}

class OnboardNavigationAbridgedBuilder {
  OnboardNavigationAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(23);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(3, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addEsIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addStarCatNameOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addStarCatLoadTimeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addIdStateVectorOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addReferenceFrame(OnboardNavigationAbridgedReferenceFrameEnum? referenceFrame) {
    fbBuilder.addInt8(12, referenceFrame?.value);
    return fbBuilder.offset;
  }
  int addSunSensorOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addMagOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addStarTrackerOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addDeltaPosOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addDataMode(OnboardNavigationAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(22, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OnboardNavigationAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final String? _startTime;
  final String? _endTime;
  final String? _esId;
  final String? _starCatName;
  final String? _starCatLoadTime;
  final String? _idStateVector;
  final List<String>? _ts;
  final OnboardNavigationAbridgedReferenceFrameEnum? _referenceFrame;
  final List<String>? _sunSensor;
  final List<String>? _mag;
  final List<String>? _starTracker;
  final List<String>? _deltaPos;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final OnboardNavigationAbridgedDataModeEnum? _dataMode;

  OnboardNavigationAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    String? startTime,
    String? endTime,
    String? esId,
    String? starCatName,
    String? starCatLoadTime,
    String? idStateVector,
    List<String>? ts,
    OnboardNavigationAbridgedReferenceFrameEnum? referenceFrame,
    List<String>? sunSensor,
    List<String>? mag,
    List<String>? starTracker,
    List<String>? deltaPos,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    OnboardNavigationAbridgedDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _startTime = startTime,
        _endTime = endTime,
        _esId = esId,
        _starCatName = starCatName,
        _starCatLoadTime = starCatLoadTime,
        _idStateVector = idStateVector,
        _ts = ts,
        _referenceFrame = referenceFrame,
        _sunSensor = sunSensor,
        _mag = mag,
        _starTracker = starTracker,
        _deltaPos = deltaPos,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? endTimeOffset = _endTime == null ? null
        : fbBuilder.writeString(_endTime!);
    final int? esIdOffset = _esId == null ? null
        : fbBuilder.writeString(_esId!);
    final int? starCatNameOffset = _starCatName == null ? null
        : fbBuilder.writeString(_starCatName!);
    final int? starCatLoadTimeOffset = _starCatLoadTime == null ? null
        : fbBuilder.writeString(_starCatLoadTime!);
    final int? idStateVectorOffset = _idStateVector == null ? null
        : fbBuilder.writeString(_idStateVector!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeList(_ts!.map(fbBuilder.writeString).toList());
    final int? sunSensorOffset = _sunSensor == null ? null
        : fbBuilder.writeList(_sunSensor!.map(fbBuilder.writeString).toList());
    final int? magOffset = _mag == null ? null
        : fbBuilder.writeList(_mag!.map(fbBuilder.writeString).toList());
    final int? starTrackerOffset = _starTracker == null ? null
        : fbBuilder.writeList(_starTracker!.map(fbBuilder.writeString).toList());
    final int? deltaPosOffset = _deltaPos == null ? null
        : fbBuilder.writeList(_deltaPos!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(23);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idOnOrbitOffset);
    fbBuilder.addInt32(3, _satNo);
    fbBuilder.addOffset(4, origObjectIdOffset);
    fbBuilder.addOffset(5, startTimeOffset);
    fbBuilder.addOffset(6, endTimeOffset);
    fbBuilder.addOffset(7, esIdOffset);
    fbBuilder.addOffset(8, starCatNameOffset);
    fbBuilder.addOffset(9, starCatLoadTimeOffset);
    fbBuilder.addOffset(10, idStateVectorOffset);
    fbBuilder.addOffset(11, tsOffset);
    fbBuilder.addInt8(12, _referenceFrame?.value);
    fbBuilder.addOffset(13, sunSensorOffset);
    fbBuilder.addOffset(14, magOffset);
    fbBuilder.addOffset(15, starTrackerOffset);
    fbBuilder.addOffset(16, deltaPosOffset);
    fbBuilder.addOffset(17, createdAtOffset);
    fbBuilder.addOffset(18, createdByOffset);
    fbBuilder.addOffset(19, sourceOffset);
    fbBuilder.addOffset(20, originOffset);
    fbBuilder.addOffset(21, origNetworkOffset);
    fbBuilder.addInt8(22, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
