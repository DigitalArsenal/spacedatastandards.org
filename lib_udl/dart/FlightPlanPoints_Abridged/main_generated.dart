// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Array of point data for this Point Group.
class FlightPlanPointsAbridged {
  FlightPlanPointsAbridged._(this._bc, this._bcOffset);
  factory FlightPlanPointsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlightPlanPointsAbridged> reader = _FlightPlanPointsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Name of this point.
  ///  Example: /// Example: CRUISE ALTITUDE ETP
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get pointName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get fppLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get fppLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-09-09T01:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get fppEta => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Fuel required at this point to execute an Equal Time Point (ETP) or Extended Operations (ETOPS) plan in pounds.
  ///  Example: /// Example: 4250.1
  ///  Constraints: No constraints specified.
  double get fppReqFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);

  @override
  String toString() {
    return 'FlightPlanPointsAbridged{pointName: ${pointName}, fppLat: ${fppLat}, fppLon: ${fppLon}, fppEta: ${fppEta}, fppReqFuel: ${fppReqFuel}}';
  }
}

class _FlightPlanPointsAbridgedReader extends fb.TableReader<FlightPlanPointsAbridged> {
  const _FlightPlanPointsAbridgedReader();

  @override
  FlightPlanPointsAbridged createObject(fb.BufferContext bc, int offset) => 
    FlightPlanPointsAbridged._(bc, offset);
}

class FlightPlanPointsAbridgedBuilder {
  FlightPlanPointsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addPointNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFppLat(double? fppLat) {
    fbBuilder.addFloat64(1, fppLat);
    return fbBuilder.offset;
  }
  int addFppLon(double? fppLon) {
    fbBuilder.addFloat64(2, fppLon);
    return fbBuilder.offset;
  }
  int addFppEtaOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addFppReqFuel(double? fppReqFuel) {
    fbBuilder.addFloat64(4, fppReqFuel);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlightPlanPointsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _pointName;
  final double? _fppLat;
  final double? _fppLon;
  final String? _fppEta;
  final double? _fppReqFuel;

  FlightPlanPointsAbridgedObjectBuilder({
    String? pointName,
    double? fppLat,
    double? fppLon,
    String? fppEta,
    double? fppReqFuel,
  })
      : _pointName = pointName,
        _fppLat = fppLat,
        _fppLon = fppLon,
        _fppEta = fppEta,
        _fppReqFuel = fppReqFuel;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pointNameOffset = _pointName == null ? null
        : fbBuilder.writeString(_pointName!);
    final int? fppEtaOffset = _fppEta == null ? null
        : fbBuilder.writeString(_fppEta!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, pointNameOffset);
    fbBuilder.addFloat64(1, _fppLat);
    fbBuilder.addFloat64(2, _fppLon);
    fbBuilder.addOffset(3, fppEtaOffset);
    fbBuilder.addFloat64(4, _fppReqFuel);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
