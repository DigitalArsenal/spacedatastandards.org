// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class EphemerisFullDataModeEnum {
  final int value;
  const EphemerisFullDataModeEnum._(this.value);

  factory EphemerisFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EphemerisFullDataModeEnum');
    }
    return result;
  }

  static EphemerisFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : EphemerisFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const EphemerisFullDataModeEnum REAL = EphemerisFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const EphemerisFullDataModeEnum TEST = EphemerisFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const EphemerisFullDataModeEnum SIMULATED = EphemerisFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const EphemerisFullDataModeEnum EXERCISE = EphemerisFullDataModeEnum._(3);
  static const Map<int, EphemerisFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<EphemerisFullDataModeEnum> reader = _EphemerisFullDataModeEnumReader();

  @override
  String toString() {
    return 'EphemerisFullDataModeEnum{value: $value}';
  }
}

class _EphemerisFullDataModeEnumReader extends fb.Reader<EphemerisFullDataModeEnum> {
  const _EphemerisFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  EphemerisFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      EphemerisFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// An ephemeris record is a position and velocity vector identifying the location and trajectory of an on-orbit object at a specified time. Ephemeris points, including covariance, are in kilometer and second based units in a user specified reference frame, with ECI J2K being preferred. The EphemerisSet ID (esId) links all points associated with an ephemeris set. The 'EphemerisSet' record contains details of the underlying data and propagation models used in the generation of the ephemeris. Ephemeris points must be retrieved by specifying the parent EphemerisSet ID (esId).
class EphemerisFull {
  EphemerisFull._(this._bc, this._bcOffset);
  factory EphemerisFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EphemerisFull> reader = _EphemerisFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: EPHEMERIS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet.
  ///  Example: /// Example: ES-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get esId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Time associated with the Ephemeris Point, in ISO8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get ts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Cartesian X position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get xpos => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Cartesian Y position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get ypos => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Cartesian Z position of target, in km, in the specified EphemerisSet referenceFrame. If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get zpos => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Cartesian X velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get xvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get yvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get zvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get xaccel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get yaccel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get zaccel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Covariance matrix, in kilometer and second based units, in the specified Ephemeris Set covReferenceFrame.  If the covReferenceFrame from the EphemerisSet table is null it is assumed to be J2000.
  ///  The array values represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:
  ///  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
  ///  x&nbsp;&nbsp;&nbsp;&nbsp;1
  ///  y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
  ///  z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
  ///  x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
  ///  y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
  ///  z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
  ///  The array containing the covariance matrix elements will be of length 6 for position only covariance, or length 21 for position-velocity covariance.  The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get cov => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  EphemerisFullDataModeEnum get dataMode => EphemerisFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 38, 0));
  ///  Unique identifier of the on-orbit satellite object.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);

  @override
  String toString() {
    return 'EphemerisFull{id: ${id}, classificationMarking: ${classificationMarking}, esId: ${esId}, ts: ${ts}, xpos: ${xpos}, ypos: ${ypos}, zpos: ${zpos}, xvel: ${xvel}, yvel: ${yvel}, zvel: ${zvel}, xaccel: ${xaccel}, yaccel: ${yaccel}, zaccel: ${zaccel}, cov: ${cov}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, dataMode: ${dataMode}, idOnOrbit: ${idOnOrbit}, origObjectId: ${origObjectId}, origin: ${origin}}';
  }
}

class _EphemerisFullReader extends fb.TableReader<EphemerisFull> {
  const _EphemerisFullReader();

  @override
  EphemerisFull createObject(fb.BufferContext bc, int offset) => 
    EphemerisFull._(bc, offset);
}

class EphemerisFullBuilder {
  EphemerisFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(21);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEsIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addXpos(double? xpos) {
    fbBuilder.addFloat64(4, xpos);
    return fbBuilder.offset;
  }
  int addYpos(double? ypos) {
    fbBuilder.addFloat64(5, ypos);
    return fbBuilder.offset;
  }
  int addZpos(double? zpos) {
    fbBuilder.addFloat64(6, zpos);
    return fbBuilder.offset;
  }
  int addXvel(double? xvel) {
    fbBuilder.addFloat64(7, xvel);
    return fbBuilder.offset;
  }
  int addYvel(double? yvel) {
    fbBuilder.addFloat64(8, yvel);
    return fbBuilder.offset;
  }
  int addZvel(double? zvel) {
    fbBuilder.addFloat64(9, zvel);
    return fbBuilder.offset;
  }
  int addXaccel(double? xaccel) {
    fbBuilder.addFloat64(10, xaccel);
    return fbBuilder.offset;
  }
  int addYaccel(double? yaccel) {
    fbBuilder.addFloat64(11, yaccel);
    return fbBuilder.offset;
  }
  int addZaccel(double? zaccel) {
    fbBuilder.addFloat64(12, zaccel);
    return fbBuilder.offset;
  }
  int addCovOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addDataMode(EphemerisFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(17, dataMode?.value);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EphemerisFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _esId;
  final String? _ts;
  final double? _xpos;
  final double? _ypos;
  final double? _zpos;
  final double? _xvel;
  final double? _yvel;
  final double? _zvel;
  final double? _xaccel;
  final double? _yaccel;
  final double? _zaccel;
  final List<String>? _cov;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final EphemerisFullDataModeEnum? _dataMode;
  final String? _idOnOrbit;
  final String? _origObjectId;
  final String? _origin;

  EphemerisFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? esId,
    String? ts,
    double? xpos,
    double? ypos,
    double? zpos,
    double? xvel,
    double? yvel,
    double? zvel,
    double? xaccel,
    double? yaccel,
    double? zaccel,
    List<String>? cov,
    String? createdAt,
    String? createdBy,
    String? source,
    EphemerisFullDataModeEnum? dataMode,
    String? idOnOrbit,
    String? origObjectId,
    String? origin,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _esId = esId,
        _ts = ts,
        _xpos = xpos,
        _ypos = ypos,
        _zpos = zpos,
        _xvel = xvel,
        _yvel = yvel,
        _zvel = zvel,
        _xaccel = xaccel,
        _yaccel = yaccel,
        _zaccel = zaccel,
        _cov = cov,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _dataMode = dataMode,
        _idOnOrbit = idOnOrbit,
        _origObjectId = origObjectId,
        _origin = origin;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? esIdOffset = _esId == null ? null
        : fbBuilder.writeString(_esId!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeString(_ts!);
    final int? covOffset = _cov == null ? null
        : fbBuilder.writeList(_cov!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    fbBuilder.startTable(21);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, esIdOffset);
    fbBuilder.addOffset(3, tsOffset);
    fbBuilder.addFloat64(4, _xpos);
    fbBuilder.addFloat64(5, _ypos);
    fbBuilder.addFloat64(6, _zpos);
    fbBuilder.addFloat64(7, _xvel);
    fbBuilder.addFloat64(8, _yvel);
    fbBuilder.addFloat64(9, _zvel);
    fbBuilder.addFloat64(10, _xaccel);
    fbBuilder.addFloat64(11, _yaccel);
    fbBuilder.addFloat64(12, _zaccel);
    fbBuilder.addOffset(13, covOffset);
    fbBuilder.addOffset(14, createdAtOffset);
    fbBuilder.addOffset(15, createdByOffset);
    fbBuilder.addOffset(16, sourceOffset);
    fbBuilder.addInt8(17, _dataMode?.value);
    fbBuilder.addOffset(18, idOnOrbitOffset);
    fbBuilder.addOffset(19, origObjectIdOffset);
    fbBuilder.addOffset(20, originOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
