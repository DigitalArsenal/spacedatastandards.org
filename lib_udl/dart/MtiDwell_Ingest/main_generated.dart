// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
class MtiDwellIngest {
  MtiDwellIngest._(this._bc, this._bcOffset);
  factory MtiDwellIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MtiDwellIngest> reader = _MtiDwellIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Sequential count of a revisit of the bounding area in the last sent Job Definition Segment, where a Revisit Index of '0' indicates the first revisit.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get d2 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  ///  Temporally sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get d3 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  ///  Flag indicating the last dwell of the revisit.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get d4 => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  ///  Count of the total number of targets reported during this dwell and sent in this Dwell Segment.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get d5 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields (missionRefTime) of the Mission Segment.
  ///  Example: /// Example: 1234567890
  ///  Constraints: No constraints specified.
  int get d6 => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  North-South position of the sensor at the temporal center of the dwell, in degrees.
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  double get d7 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  The East-West position of the sensor at the temporal center of the dwell, in degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  double get d8 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  The altitude of the sensor at temporal center of the dwell, above the WGS 84 ellipsoid, expressed in centimeters.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get d9 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Factor which modifies the value of the reported target latitude (Delta Latitude, field D32.4).
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  double get d10 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Factor which modifies the value of the reported target longitude (Delta Longitude, field D32.5).
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  double get d11 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured along the sensor track direction (field D15), in centimeters.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get d12 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 24, 0);
  ///  Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured orthogonal to the sensor track direction (field D15), in centimeters.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get d13 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  Standard deviation of the sensor altitude estimate (field D9), in centimeters.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get d14 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Ground track of the sensor at the time of the dwell, as the angle in degrees (clockwise) from True North.
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  double get d15 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Ground speed of the sensor at the time of the dwell, in millimeters per second.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get d16 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Velocity of the sensor in the vertical direction, in decimeters per second.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get d17 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Standard deviation of the estimate of the sensor track, in degrees.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get d18 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 36, 0);
  ///  Standard deviation of estimate of the sensor speed, in millimeters per second.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get d19 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 38, 0);
  ///  Standard deviation of estimate of the sensor vertical velocity, expressed in centimeters per second.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get d20 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  Heading of the platform at the time of the dwell, as the angle in degrees (clockwise) from True North to the roll axis of the platform.
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  double get d21 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Pitch angle of the platform at the time of the dwell, in degrees.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get d22 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Roll angle of the platform at the time of the dwell, in degrees.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get d23 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  The North-South position of the center of the dwell area, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get d24 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  The East-West position of the center of the dwell area, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get d25 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Distance on the earth surface, expressed in kilometers, from the near edge to the center of the dwell area.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get d26 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  For dwell based radars, one-half of the 3-dB beamwidth.  For non-dwell based radars, the angle between the beginning of the dwell to the center of the dwell.  Measured in degrees.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get d27 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Rotation of the sensor broadside face about the local vertical axis of the platform, in degrees.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get d28 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get d29 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  double get d30 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get d31 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 62, 0);
  ///  Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get d32 => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 64);
  ///  Dwell timestamp in ISO8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get dwellts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);

  @override
  String toString() {
    return 'MtiDwellIngest{d2: ${d2}, d3: ${d3}, d4: ${d4}, d5: ${d5}, d6: ${d6}, d7: ${d7}, d8: ${d8}, d9: ${d9}, d10: ${d10}, d11: ${d11}, d12: ${d12}, d13: ${d13}, d14: ${d14}, d15: ${d15}, d16: ${d16}, d17: ${d17}, d18: ${d18}, d19: ${d19}, d20: ${d20}, d21: ${d21}, d22: ${d22}, d23: ${d23}, d24: ${d24}, d25: ${d25}, d26: ${d26}, d27: ${d27}, d28: ${d28}, d29: ${d29}, d30: ${d30}, d31: ${d31}, d32: ${d32}, dwellts: ${dwellts}}';
  }
}

class _MtiDwellIngestReader extends fb.TableReader<MtiDwellIngest> {
  const _MtiDwellIngestReader();

  @override
  MtiDwellIngest createObject(fb.BufferContext bc, int offset) => 
    MtiDwellIngest._(bc, offset);
}

class MtiDwellIngestBuilder {
  MtiDwellIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(32);
  }

  int addD2(int? d2) {
    fbBuilder.addInt32(0, d2);
    return fbBuilder.offset;
  }
  int addD3(int? d3) {
    fbBuilder.addInt32(1, d3);
    return fbBuilder.offset;
  }
  int addD4(bool? d4) {
    fbBuilder.addBool(2, d4);
    return fbBuilder.offset;
  }
  int addD5(int? d5) {
    fbBuilder.addInt32(3, d5);
    return fbBuilder.offset;
  }
  int addD6(int? d6) {
    fbBuilder.addInt64(4, d6);
    return fbBuilder.offset;
  }
  int addD7(double? d7) {
    fbBuilder.addFloat64(5, d7);
    return fbBuilder.offset;
  }
  int addD8(double? d8) {
    fbBuilder.addFloat64(6, d8);
    return fbBuilder.offset;
  }
  int addD9(int? d9) {
    fbBuilder.addInt32(7, d9);
    return fbBuilder.offset;
  }
  int addD10(double? d10) {
    fbBuilder.addFloat64(8, d10);
    return fbBuilder.offset;
  }
  int addD11(double? d11) {
    fbBuilder.addFloat64(9, d11);
    return fbBuilder.offset;
  }
  int addD12(int? d12) {
    fbBuilder.addInt32(10, d12);
    return fbBuilder.offset;
  }
  int addD13(int? d13) {
    fbBuilder.addInt32(11, d13);
    return fbBuilder.offset;
  }
  int addD14(int? d14) {
    fbBuilder.addInt32(12, d14);
    return fbBuilder.offset;
  }
  int addD15(double? d15) {
    fbBuilder.addFloat64(13, d15);
    return fbBuilder.offset;
  }
  int addD16(int? d16) {
    fbBuilder.addInt32(14, d16);
    return fbBuilder.offset;
  }
  int addD17(int? d17) {
    fbBuilder.addInt32(15, d17);
    return fbBuilder.offset;
  }
  int addD18(int? d18) {
    fbBuilder.addInt32(16, d18);
    return fbBuilder.offset;
  }
  int addD19(int? d19) {
    fbBuilder.addInt32(17, d19);
    return fbBuilder.offset;
  }
  int addD20(int? d20) {
    fbBuilder.addInt32(18, d20);
    return fbBuilder.offset;
  }
  int addD21(double? d21) {
    fbBuilder.addFloat64(19, d21);
    return fbBuilder.offset;
  }
  int addD22(double? d22) {
    fbBuilder.addFloat64(20, d22);
    return fbBuilder.offset;
  }
  int addD23(double? d23) {
    fbBuilder.addFloat64(21, d23);
    return fbBuilder.offset;
  }
  int addD24(double? d24) {
    fbBuilder.addFloat64(22, d24);
    return fbBuilder.offset;
  }
  int addD25(double? d25) {
    fbBuilder.addFloat64(23, d25);
    return fbBuilder.offset;
  }
  int addD26(double? d26) {
    fbBuilder.addFloat64(24, d26);
    return fbBuilder.offset;
  }
  int addD27(double? d27) {
    fbBuilder.addFloat64(25, d27);
    return fbBuilder.offset;
  }
  int addD28(double? d28) {
    fbBuilder.addFloat64(26, d28);
    return fbBuilder.offset;
  }
  int addD29(double? d29) {
    fbBuilder.addFloat64(27, d29);
    return fbBuilder.offset;
  }
  int addD30(double? d30) {
    fbBuilder.addFloat64(28, d30);
    return fbBuilder.offset;
  }
  int addD31(int? d31) {
    fbBuilder.addInt32(29, d31);
    return fbBuilder.offset;
  }
  int addD32Offset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addDwelltsOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MtiDwellIngestObjectBuilder extends fb.ObjectBuilder {
  final int? _d2;
  final int? _d3;
  final bool? _d4;
  final int? _d5;
  final int? _d6;
  final double? _d7;
  final double? _d8;
  final int? _d9;
  final double? _d10;
  final double? _d11;
  final int? _d12;
  final int? _d13;
  final int? _d14;
  final double? _d15;
  final int? _d16;
  final int? _d17;
  final int? _d18;
  final int? _d19;
  final int? _d20;
  final double? _d21;
  final double? _d22;
  final double? _d23;
  final double? _d24;
  final double? _d25;
  final double? _d26;
  final double? _d27;
  final double? _d28;
  final double? _d29;
  final double? _d30;
  final int? _d31;
  final List<String>? _d32;
  final String? _dwellts;

  MtiDwellIngestObjectBuilder({
    int? d2,
    int? d3,
    bool? d4,
    int? d5,
    int? d6,
    double? d7,
    double? d8,
    int? d9,
    double? d10,
    double? d11,
    int? d12,
    int? d13,
    int? d14,
    double? d15,
    int? d16,
    int? d17,
    int? d18,
    int? d19,
    int? d20,
    double? d21,
    double? d22,
    double? d23,
    double? d24,
    double? d25,
    double? d26,
    double? d27,
    double? d28,
    double? d29,
    double? d30,
    int? d31,
    List<String>? d32,
    String? dwellts,
  })
      : _d2 = d2,
        _d3 = d3,
        _d4 = d4,
        _d5 = d5,
        _d6 = d6,
        _d7 = d7,
        _d8 = d8,
        _d9 = d9,
        _d10 = d10,
        _d11 = d11,
        _d12 = d12,
        _d13 = d13,
        _d14 = d14,
        _d15 = d15,
        _d16 = d16,
        _d17 = d17,
        _d18 = d18,
        _d19 = d19,
        _d20 = d20,
        _d21 = d21,
        _d22 = d22,
        _d23 = d23,
        _d24 = d24,
        _d25 = d25,
        _d26 = d26,
        _d27 = d27,
        _d28 = d28,
        _d29 = d29,
        _d30 = d30,
        _d31 = d31,
        _d32 = d32,
        _dwellts = dwellts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? d32Offset = _d32 == null ? null
        : fbBuilder.writeList(_d32!.map(fbBuilder.writeString).toList());
    final int? dwelltsOffset = _dwellts == null ? null
        : fbBuilder.writeString(_dwellts!);
    fbBuilder.startTable(32);
    fbBuilder.addInt32(0, _d2);
    fbBuilder.addInt32(1, _d3);
    fbBuilder.addBool(2, _d4);
    fbBuilder.addInt32(3, _d5);
    fbBuilder.addInt64(4, _d6);
    fbBuilder.addFloat64(5, _d7);
    fbBuilder.addFloat64(6, _d8);
    fbBuilder.addInt32(7, _d9);
    fbBuilder.addFloat64(8, _d10);
    fbBuilder.addFloat64(9, _d11);
    fbBuilder.addInt32(10, _d12);
    fbBuilder.addInt32(11, _d13);
    fbBuilder.addInt32(12, _d14);
    fbBuilder.addFloat64(13, _d15);
    fbBuilder.addInt32(14, _d16);
    fbBuilder.addInt32(15, _d17);
    fbBuilder.addInt32(16, _d18);
    fbBuilder.addInt32(17, _d19);
    fbBuilder.addInt32(18, _d20);
    fbBuilder.addFloat64(19, _d21);
    fbBuilder.addFloat64(20, _d22);
    fbBuilder.addFloat64(21, _d23);
    fbBuilder.addFloat64(22, _d24);
    fbBuilder.addFloat64(23, _d25);
    fbBuilder.addFloat64(24, _d26);
    fbBuilder.addFloat64(25, _d27);
    fbBuilder.addFloat64(26, _d28);
    fbBuilder.addFloat64(27, _d29);
    fbBuilder.addFloat64(28, _d30);
    fbBuilder.addInt32(29, _d31);
    fbBuilder.addOffset(30, d32Offset);
    fbBuilder.addOffset(31, dwelltsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
