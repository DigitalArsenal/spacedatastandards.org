// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library aircraft_abridged;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './main_generated.dart' as ;

///  General aircraft designation, characteristics, and capabilities. The aircraft schema contains static data of specific aircraft, including tail number, cruise speed, max speed, and minimum required runway length, etc.
class AircraftAbridged {
  AircraftAbridged._(this._bc, this._bcOffset);
  factory AircraftAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AircraftAbridged> reader = _AircraftAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  ID of the parent entity for this aircraft.
  ///  Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idEntity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft.  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  ///  Example: E-2C HAWKEYE
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get aircraftMDS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The tail number of this aircraft.
  ///  Example: N702JG
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get tailNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Full serial number of the aircraft.
  ///  Example: 7007187
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get serialNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The wing or unit that owns the aircraft.
  ///  Example: 437AW
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get owner => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The Air Force major command (MAJCOM) overseeing the aircraft.
  ///  Example: HQACC
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get command => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The category of aircraft (e.g. M = Military, C = Commercial).
  ///  Example: M
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get category => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Military data network data transfer device ID for this aircraft.
  ///  Example: 005
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get dtd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The cruise speed of the aircraft, in kilometers/hour.
  ///  Example: 915
  ///  Constraints: No constraints specified.
  double get cruiseSpeed => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  The maximum air speed of the aircraft, in kilometers/hour.
  ///  Example: 2655.1
  ///  Constraints: No constraints specified.
  double get maxSpeed => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  The minimum length of runway required to land this aircraft, in meters. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: 1000
  ///  Constraints: No constraints specified.
  int get minReqRunwayM => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  The minimum length of runway required to land this aircraft, in feet. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: 3000
  ///  Constraints: No constraints specified.
  int get minReqRunwayFt => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 30, 0);
  ///  The nominal turnaround time for this aircraft, in minutes.
  ///  Example: 500
  ///  Constraints: No constraints specified.
  int get nominalTATime => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Optional notes/comments for this aircraft.
  ///  Example: Notes for this aircraft
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Source of the data.
  ///  Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
  ///  Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 64
  AircraftAbridgedDataModeEnum get dataMode => AircraftAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 46, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);

  @override
  String toString() {
    return 'AircraftAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idEntity: ${idEntity}, aircraftMDS: ${aircraftMDS}, tailNumber: ${tailNumber}, serialNumber: ${serialNumber}, owner: ${owner}, command: ${command}, category: ${category}, dtd: ${dtd}, cruiseSpeed: ${cruiseSpeed}, maxSpeed: ${maxSpeed}, minReqRunwayM: ${minReqRunwayM}, minReqRunwayFt: ${minReqRunwayFt}, nominalTATime: ${nominalTATime}, notes: ${notes}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDL: ${sourceDL}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _AircraftAbridgedReader extends fb.TableReader<AircraftAbridged> {
  const _AircraftAbridgedReader();

  @override
  AircraftAbridged createObject(fb.BufferContext bc, int offset) => 
    AircraftAbridged._(bc, offset);
}

class AircraftAbridgedBuilder {
  AircraftAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(23);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdEntityOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAircraftMdsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTailNumberOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSerialNumberOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addOwnerOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCommandOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addCategoryOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addDtdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCruiseSpeed(double? cruiseSpeed) {
    fbBuilder.addFloat64(10, cruiseSpeed);
    return fbBuilder.offset;
  }
  int addMaxSpeed(double? maxSpeed) {
    fbBuilder.addFloat64(11, maxSpeed);
    return fbBuilder.offset;
  }
  int addMinReqRunwayM(int? minReqRunwayM) {
    fbBuilder.addInt32(12, minReqRunwayM);
    return fbBuilder.offset;
  }
  int addMinReqRunwayFt(int? minReqRunwayFt) {
    fbBuilder.addInt32(13, minReqRunwayFt);
    return fbBuilder.offset;
  }
  int addNominalTatime(int? nominalTatime) {
    fbBuilder.addInt32(14, nominalTatime);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AircraftAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(21, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AircraftAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idEntity;
  final String? _aircraftMds;
  final String? _tailNumber;
  final String? _serialNumber;
  final String? _owner;
  final String? _command;
  final String? _category;
  final String? _dtd;
  final double? _cruiseSpeed;
  final double? _maxSpeed;
  final int? _minReqRunwayM;
  final int? _minReqRunwayFt;
  final int? _nominalTatime;
  final String? _notes;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final AircraftAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;

  AircraftAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idEntity,
    String? aircraftMds,
    String? tailNumber,
    String? serialNumber,
    String? owner,
    String? command,
    String? category,
    String? dtd,
    double? cruiseSpeed,
    double? maxSpeed,
    int? minReqRunwayM,
    int? minReqRunwayFt,
    int? nominalTatime,
    String? notes,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    String? origin,
    AircraftAbridgedDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idEntity = idEntity,
        _aircraftMds = aircraftMds,
        _tailNumber = tailNumber,
        _serialNumber = serialNumber,
        _owner = owner,
        _command = command,
        _category = category,
        _dtd = dtd,
        _cruiseSpeed = cruiseSpeed,
        _maxSpeed = maxSpeed,
        _minReqRunwayM = minReqRunwayM,
        _minReqRunwayFt = minReqRunwayFt,
        _nominalTatime = nominalTatime,
        _notes = notes,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idEntityOffset = _idEntity == null ? null
        : fbBuilder.writeString(_idEntity!);
    final int? aircraftMdsOffset = _aircraftMds == null ? null
        : fbBuilder.writeString(_aircraftMds!);
    final int? tailNumberOffset = _tailNumber == null ? null
        : fbBuilder.writeString(_tailNumber!);
    final int? serialNumberOffset = _serialNumber == null ? null
        : fbBuilder.writeString(_serialNumber!);
    final int? ownerOffset = _owner == null ? null
        : fbBuilder.writeString(_owner!);
    final int? commandOffset = _command == null ? null
        : fbBuilder.writeString(_command!);
    final int? categoryOffset = _category == null ? null
        : fbBuilder.writeString(_category!);
    final int? dtdOffset = _dtd == null ? null
        : fbBuilder.writeString(_dtd!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(23);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idEntityOffset);
    fbBuilder.addOffset(3, aircraftMdsOffset);
    fbBuilder.addOffset(4, tailNumberOffset);
    fbBuilder.addOffset(5, serialNumberOffset);
    fbBuilder.addOffset(6, ownerOffset);
    fbBuilder.addOffset(7, commandOffset);
    fbBuilder.addOffset(8, categoryOffset);
    fbBuilder.addOffset(9, dtdOffset);
    fbBuilder.addFloat64(10, _cruiseSpeed);
    fbBuilder.addFloat64(11, _maxSpeed);
    fbBuilder.addInt32(12, _minReqRunwayM);
    fbBuilder.addInt32(13, _minReqRunwayFt);
    fbBuilder.addInt32(14, _nominalTatime);
    fbBuilder.addOffset(15, notesOffset);
    fbBuilder.addOffset(16, createdAtOffset);
    fbBuilder.addOffset(17, createdByOffset);
    fbBuilder.addOffset(18, sourceDlOffset);
    fbBuilder.addOffset(19, sourceOffset);
    fbBuilder.addOffset(20, originOffset);
    fbBuilder.addInt8(21, _dataMode?.value);
    fbBuilder.addOffset(22, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
