// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Object for data dissemination.
class IsrcollectionTransitIngest {
  IsrcollectionTransitIngest._(this._bc, this._bcOffset);
  factory IsrcollectionTransitIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IsrcollectionTransitIngest> reader = _IsrcollectionTransitIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Transit Unique Identifier.
  ///  Example: /// Example: ISRCOLLECTIONTRANSIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Military Base to transmit the dissemination of this data.
  ///  Example: /// Example: ENVOYS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get base => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Length of mission in milliseconds.
  ///  Example: /// Example: 200.23
  ///  Constraints: No constraints specified.
  double get duration => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);

  @override
  String toString() {
    return 'IsrcollectionTransitIngest{id: ${id}, base: ${base}, duration: ${duration}}';
  }
}

class _IsrcollectionTransitIngestReader extends fb.TableReader<IsrcollectionTransitIngest> {
  const _IsrcollectionTransitIngestReader();

  @override
  IsrcollectionTransitIngest createObject(fb.BufferContext bc, int offset) => 
    IsrcollectionTransitIngest._(bc, offset);
}

class IsrcollectionTransitIngestBuilder {
  IsrcollectionTransitIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addBaseOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDuration(double? duration) {
    fbBuilder.addFloat64(2, duration);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IsrcollectionTransitIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _base;
  final double? _duration;

  IsrcollectionTransitIngestObjectBuilder({
    String? id,
    String? base,
    double? duration,
  })
      : _id = id,
        _base = base,
        _duration = duration;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? baseOffset = _base == null ? null
        : fbBuilder.writeString(_base!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, baseOffset);
    fbBuilder.addFloat64(2, _duration);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
