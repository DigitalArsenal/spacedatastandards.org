// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class BatteryDetailsIngestDataModeEnum {
  final int value;
  const BatteryDetailsIngestDataModeEnum._(this.value);

  factory BatteryDetailsIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum BatteryDetailsIngestDataModeEnum');
    }
    return result;
  }

  static BatteryDetailsIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : BatteryDetailsIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const BatteryDetailsIngestDataModeEnum REAL = BatteryDetailsIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const BatteryDetailsIngestDataModeEnum TEST = BatteryDetailsIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const BatteryDetailsIngestDataModeEnum SIMULATED = BatteryDetailsIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const BatteryDetailsIngestDataModeEnum EXERCISE = BatteryDetailsIngestDataModeEnum._(3);
  static const Map<int, BatteryDetailsIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<BatteryDetailsIngestDataModeEnum> reader = _BatteryDetailsIngestDataModeEnumReader();

  @override
  String toString() {
    return 'BatteryDetailsIngestDataModeEnum{value: $value}';
  }
}

class _BatteryDetailsIngestDataModeEnumReader extends fb.Reader<BatteryDetailsIngestDataModeEnum> {
  const _BatteryDetailsIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  BatteryDetailsIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      BatteryDetailsIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.
class BatteryDetailsIngest {
  BatteryDetailsIngest._(this._bc, this._bcOffset);
  factory BatteryDetailsIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BatteryDetailsIngest> reader = _BatteryDetailsIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: BATTERYDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Identifier of the parent battery type record.
  ///  Example: /// Example: BATTERY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idBattery => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
  ///  Example: /// Example: Ni-Cd
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get technology => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Battery capacity in Ah.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get capacity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Depth of discharge as a percentage/fraction.
  ///  Example: /// Example: 0.2
  ///  Constraints: No constraints specified.
  double get dischargeDepth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Battery model number or name.
  ///  Example: /// Example: 11212
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get model => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Battery description/notes.
  ///  Example: /// Example: example notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  ID of the organization that manufactures the battery.
  ///  Example: /// Example: MANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get manufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  BatteryDetailsIngestDataModeEnum get dataMode => BatteryDetailsIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 32, 0));
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);

  @override
  String toString() {
    return 'BatteryDetailsIngest{id: ${id}, idBattery: ${idBattery}, classificationMarking: ${classificationMarking}, technology: ${technology}, capacity: ${capacity}, dischargeDepth: ${dischargeDepth}, model: ${model}, description: ${description}, manufacturerOrgId: ${manufacturerOrgId}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, tags: ${tags}}';
  }
}

class _BatteryDetailsIngestReader extends fb.TableReader<BatteryDetailsIngest> {
  const _BatteryDetailsIngestReader();

  @override
  BatteryDetailsIngest createObject(fb.BufferContext bc, int offset) => 
    BatteryDetailsIngest._(bc, offset);
}

class BatteryDetailsIngestBuilder {
  BatteryDetailsIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(16);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdBatteryOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTechnologyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addCapacity(double? capacity) {
    fbBuilder.addFloat64(4, capacity);
    return fbBuilder.offset;
  }
  int addDischargeDepth(double? dischargeDepth) {
    fbBuilder.addFloat64(5, dischargeDepth);
    return fbBuilder.offset;
  }
  int addModelOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addDataMode(BatteryDetailsIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(14, dataMode?.value);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BatteryDetailsIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idBattery;
  final String? _classificationMarking;
  final String? _technology;
  final double? _capacity;
  final double? _dischargeDepth;
  final String? _model;
  final String? _description;
  final String? _manufacturerOrgId;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final BatteryDetailsIngestDataModeEnum? _dataMode;
  final List<String>? _tags;

  BatteryDetailsIngestObjectBuilder({
    String? id,
    String? idBattery,
    String? classificationMarking,
    String? technology,
    double? capacity,
    double? dischargeDepth,
    String? model,
    String? description,
    String? manufacturerOrgId,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    BatteryDetailsIngestDataModeEnum? dataMode,
    List<String>? tags,
  })
      : _id = id,
        _idBattery = idBattery,
        _classificationMarking = classificationMarking,
        _technology = technology,
        _capacity = capacity,
        _dischargeDepth = dischargeDepth,
        _model = model,
        _description = description,
        _manufacturerOrgId = manufacturerOrgId,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _tags = tags;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idBatteryOffset = _idBattery == null ? null
        : fbBuilder.writeString(_idBattery!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? technologyOffset = _technology == null ? null
        : fbBuilder.writeString(_technology!);
    final int? modelOffset = _model == null ? null
        : fbBuilder.writeString(_model!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? manufacturerOrgIdOffset = _manufacturerOrgId == null ? null
        : fbBuilder.writeString(_manufacturerOrgId!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(16);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idBatteryOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, technologyOffset);
    fbBuilder.addFloat64(4, _capacity);
    fbBuilder.addFloat64(5, _dischargeDepth);
    fbBuilder.addOffset(6, modelOffset);
    fbBuilder.addOffset(7, descriptionOffset);
    fbBuilder.addOffset(8, manufacturerOrgIdOffset);
    fbBuilder.addOffset(9, createdAtOffset);
    fbBuilder.addOffset(10, createdByOffset);
    fbBuilder.addOffset(11, sourceOffset);
    fbBuilder.addOffset(12, originOffset);
    fbBuilder.addOffset(13, origNetworkOffset);
    fbBuilder.addInt8(14, _dataMode?.value);
    fbBuilder.addOffset(15, tagsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
