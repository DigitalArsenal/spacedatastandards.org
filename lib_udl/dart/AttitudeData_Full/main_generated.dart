// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AttitudeDataFullDataModeEnum {
  final int value;
  const AttitudeDataFullDataModeEnum._(this.value);

  factory AttitudeDataFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AttitudeDataFullDataModeEnum');
    }
    return result;
  }

  static AttitudeDataFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AttitudeDataFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AttitudeDataFullDataModeEnum REAL = AttitudeDataFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AttitudeDataFullDataModeEnum TEST = AttitudeDataFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AttitudeDataFullDataModeEnum SIMULATED = AttitudeDataFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AttitudeDataFullDataModeEnum EXERCISE = AttitudeDataFullDataModeEnum._(3);
  static const Map<int, AttitudeDataFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AttitudeDataFullDataModeEnum> reader = _AttitudeDataFullDataModeEnumReader();

  @override
  String toString() {
    return 'AttitudeDataFullDataModeEnum{value: $value}';
  }
}

class _AttitudeDataFullDataModeEnumReader extends fb.Reader<AttitudeDataFullDataModeEnum> {
  const _AttitudeDataFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AttitudeDataFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      AttitudeDataFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// These services provide operations for posting and querying attitude of on-orbit objects.  Attitude describes the orientation of an object, which can be represented by quaternions or euler angles.  The AttitudeSet ID (asId) identifies the 'AttitudeSet' record which contains details of the underlying data as well as a collection of attitude points. Points must be retrieved by first identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID 'asId'.
class AttitudeDataFull {
  AttitudeDataFull._(this._bc, this._bcOffset);
  factory AttitudeDataFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AttitudeDataFull> reader = _AttitudeDataFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ATTITUDEDATA-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the parent AttitudeSet associated with this record.
  ///  Example: /// Example: 773c9887-e931-42eb-8155-f0fbd227b235
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get asId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the on-orbit satellite to which this attitude record applies.
  ///  Example: /// Example: 41947
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Satellite/catalog number of the on-orbit object to which this attitude record applies.
  ///  Example: /// Example: 41947
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: D6593
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.
  ///  Example: /// Example: 2022-03-07T14:51:39.653043Z
  ///  Constraints: No constraints specified.
  String? get ts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Label specifying type of rotational motion of target.
  ///  Example: /// Example: PROSOL_MOTION
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get motionType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Quaternion vector component 1.
  ///  Example: /// Example: 0.0312
  ///  Constraints: No constraints specified.
  double get q1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Quaternion vector component 2.
  ///  Example: /// Example: 0.7854
  ///  Constraints: No constraints specified.
  double get q2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Quaternion vector component 3.
  ///  Example: /// Example: 0.3916
  ///  Constraints: No constraints specified.
  double get q3 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Quaternion scalar component.
  ///  Example: /// Example: 0.4783
  ///  Constraints: No constraints specified.
  double get qc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Derivative of quaternion vector component 1.
  ///  Example: /// Example: 0.0043
  ///  Constraints: No constraints specified.
  double get q1Dot => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Derivative of quaternion vector component 2.
  ///  Example: /// Example: 0.06
  ///  Constraints: No constraints specified.
  double get q2Dot => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Derivative of quaternion vector component 3.
  ///  Example: /// Example: 0.499
  ///  Constraints: No constraints specified.
  double get q3Dot => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Derivative of quaternion scalar component.
  ///  Example: /// Example: 0.011
  ///  Constraints: No constraints specified.
  double get qcDot => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
  ///  Example: /// Example: [139.753]
  ///  Constraints: No constraints specified.
  List<String>? get xAngle => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 36);
  ///  Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
  ///  Example: /// Example: [25.066]
  ///  Constraints: No constraints specified.
  List<String>? get yAngle => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 38);
  ///  Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
  ///  Example: /// Example: [-53.368]
  ///  Constraints: No constraints specified.
  List<String>? get zAngle => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 40);
  ///  Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
  ///  Example: /// Example: [0.105]
  ///  Constraints: No constraints specified.
  List<String>? get xRate => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
  ///  Example: /// Example: [0.032]
  ///  Constraints: No constraints specified.
  List<String>? get yRate => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);
  ///  Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.
  ///  Example: /// Example: [0.022]
  ///  Constraints: No constraints specified.
  List<String>? get zRate => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 46);
  ///  Precession axis right ascension (ECI J2000 frame) in degrees.
  ///  Example: /// Example: -173.75
  ///  Constraints: No constraints specified.
  double get ra => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Precession axis declination (ECI J2000 frame) in degrees.
  ///  Example: /// Example: 0.799
  ///  Constraints: No constraints specified.
  double get declination => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Coning angle in degrees.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  double get coningAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Precession period in seconds.
  ///  Example: /// Example: 36.1
  ///  Constraints: No constraints specified.
  double get precPeriod => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Spin period in seconds.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  double get spinPeriod => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-07-05T12:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AttitudeDataFullDataModeEnum get dataMode => AttitudeDataFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 66, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);

  @override
  String toString() {
    return 'AttitudeDataFull{id: ${id}, classificationMarking: ${classificationMarking}, asId: ${asId}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, ts: ${ts}, motionType: ${motionType}, q1: ${q1}, q2: ${q2}, q3: ${q3}, qc: ${qc}, q1Dot: ${q1Dot}, q2Dot: ${q2Dot}, q3Dot: ${q3Dot}, qcDot: ${qcDot}, xAngle: ${xAngle}, yAngle: ${yAngle}, zAngle: ${zAngle}, xRate: ${xRate}, yRate: ${yRate}, zRate: ${zRate}, ra: ${ra}, declination: ${declination}, coningAngle: ${coningAngle}, precPeriod: ${precPeriod}, spinPeriod: ${spinPeriod}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _AttitudeDataFullReader extends fb.TableReader<AttitudeDataFull> {
  const _AttitudeDataFullReader();

  @override
  AttitudeDataFull createObject(fb.BufferContext bc, int offset) => 
    AttitudeDataFull._(bc, offset);
}

class AttitudeDataFullBuilder {
  AttitudeDataFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(33);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAsIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(4, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addMotionTypeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addQ1(double? q1) {
    fbBuilder.addFloat64(8, q1);
    return fbBuilder.offset;
  }
  int addQ2(double? q2) {
    fbBuilder.addFloat64(9, q2);
    return fbBuilder.offset;
  }
  int addQ3(double? q3) {
    fbBuilder.addFloat64(10, q3);
    return fbBuilder.offset;
  }
  int addQc(double? qc) {
    fbBuilder.addFloat64(11, qc);
    return fbBuilder.offset;
  }
  int addQ1Dot(double? q1Dot) {
    fbBuilder.addFloat64(12, q1Dot);
    return fbBuilder.offset;
  }
  int addQ2Dot(double? q2Dot) {
    fbBuilder.addFloat64(13, q2Dot);
    return fbBuilder.offset;
  }
  int addQ3Dot(double? q3Dot) {
    fbBuilder.addFloat64(14, q3Dot);
    return fbBuilder.offset;
  }
  int addQcDot(double? qcDot) {
    fbBuilder.addFloat64(15, qcDot);
    return fbBuilder.offset;
  }
  int addXAngleOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addYAngleOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addZAngleOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addXRateOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addYRateOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addZRateOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addRa(double? ra) {
    fbBuilder.addFloat64(22, ra);
    return fbBuilder.offset;
  }
  int addDeclination(double? declination) {
    fbBuilder.addFloat64(23, declination);
    return fbBuilder.offset;
  }
  int addConingAngle(double? coningAngle) {
    fbBuilder.addFloat64(24, coningAngle);
    return fbBuilder.offset;
  }
  int addPrecPeriod(double? precPeriod) {
    fbBuilder.addFloat64(25, precPeriod);
    return fbBuilder.offset;
  }
  int addSpinPeriod(double? spinPeriod) {
    fbBuilder.addFloat64(26, spinPeriod);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AttitudeDataFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(31, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AttitudeDataFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _asId;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final String? _ts;
  final String? _motionType;
  final double? _q1;
  final double? _q2;
  final double? _q3;
  final double? _qc;
  final double? _q1Dot;
  final double? _q2Dot;
  final double? _q3Dot;
  final double? _qcDot;
  final List<String>? _xAngle;
  final List<String>? _yAngle;
  final List<String>? _zAngle;
  final List<String>? _xRate;
  final List<String>? _yRate;
  final List<String>? _zRate;
  final double? _ra;
  final double? _declination;
  final double? _coningAngle;
  final double? _precPeriod;
  final double? _spinPeriod;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final AttitudeDataFullDataModeEnum? _dataMode;
  final String? _origNetwork;

  AttitudeDataFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? asId,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    String? ts,
    String? motionType,
    double? q1,
    double? q2,
    double? q3,
    double? qc,
    double? q1Dot,
    double? q2Dot,
    double? q3Dot,
    double? qcDot,
    List<String>? xAngle,
    List<String>? yAngle,
    List<String>? zAngle,
    List<String>? xRate,
    List<String>? yRate,
    List<String>? zRate,
    double? ra,
    double? declination,
    double? coningAngle,
    double? precPeriod,
    double? spinPeriod,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    AttitudeDataFullDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _asId = asId,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _ts = ts,
        _motionType = motionType,
        _q1 = q1,
        _q2 = q2,
        _q3 = q3,
        _qc = qc,
        _q1Dot = q1Dot,
        _q2Dot = q2Dot,
        _q3Dot = q3Dot,
        _qcDot = qcDot,
        _xAngle = xAngle,
        _yAngle = yAngle,
        _zAngle = zAngle,
        _xRate = xRate,
        _yRate = yRate,
        _zRate = zRate,
        _ra = ra,
        _declination = declination,
        _coningAngle = coningAngle,
        _precPeriod = precPeriod,
        _spinPeriod = spinPeriod,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? asIdOffset = _asId == null ? null
        : fbBuilder.writeString(_asId!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeString(_ts!);
    final int? motionTypeOffset = _motionType == null ? null
        : fbBuilder.writeString(_motionType!);
    final int? xAngleOffset = _xAngle == null ? null
        : fbBuilder.writeList(_xAngle!.map(fbBuilder.writeString).toList());
    final int? yAngleOffset = _yAngle == null ? null
        : fbBuilder.writeList(_yAngle!.map(fbBuilder.writeString).toList());
    final int? zAngleOffset = _zAngle == null ? null
        : fbBuilder.writeList(_zAngle!.map(fbBuilder.writeString).toList());
    final int? xRateOffset = _xRate == null ? null
        : fbBuilder.writeList(_xRate!.map(fbBuilder.writeString).toList());
    final int? yRateOffset = _yRate == null ? null
        : fbBuilder.writeList(_yRate!.map(fbBuilder.writeString).toList());
    final int? zRateOffset = _zRate == null ? null
        : fbBuilder.writeList(_zRate!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(33);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, asIdOffset);
    fbBuilder.addOffset(3, idOnOrbitOffset);
    fbBuilder.addInt32(4, _satNo);
    fbBuilder.addOffset(5, origObjectIdOffset);
    fbBuilder.addOffset(6, tsOffset);
    fbBuilder.addOffset(7, motionTypeOffset);
    fbBuilder.addFloat64(8, _q1);
    fbBuilder.addFloat64(9, _q2);
    fbBuilder.addFloat64(10, _q3);
    fbBuilder.addFloat64(11, _qc);
    fbBuilder.addFloat64(12, _q1Dot);
    fbBuilder.addFloat64(13, _q2Dot);
    fbBuilder.addFloat64(14, _q3Dot);
    fbBuilder.addFloat64(15, _qcDot);
    fbBuilder.addOffset(16, xAngleOffset);
    fbBuilder.addOffset(17, yAngleOffset);
    fbBuilder.addOffset(18, zAngleOffset);
    fbBuilder.addOffset(19, xRateOffset);
    fbBuilder.addOffset(20, yRateOffset);
    fbBuilder.addOffset(21, zRateOffset);
    fbBuilder.addFloat64(22, _ra);
    fbBuilder.addFloat64(23, _declination);
    fbBuilder.addFloat64(24, _coningAngle);
    fbBuilder.addFloat64(25, _precPeriod);
    fbBuilder.addFloat64(26, _spinPeriod);
    fbBuilder.addOffset(27, createdAtOffset);
    fbBuilder.addOffset(28, createdByOffset);
    fbBuilder.addOffset(29, sourceOffset);
    fbBuilder.addOffset(30, originOffset);
    fbBuilder.addInt8(31, _dataMode?.value);
    fbBuilder.addOffset(32, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
