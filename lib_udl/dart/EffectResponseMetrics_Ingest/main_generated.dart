// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// List of COA metrics associated with this effect response.
class EffectResponseMetricsIngest {
  EffectResponseMetricsIngest._(this._bc, this._bcOffset);
  factory EffectResponseMetricsIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EffectResponseMetricsIngest> reader = _EffectResponseMetricsIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).
  ///  Example: /// Example: GoalAchievement
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get metricType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The metric score specific to its domain.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get domainValue => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  The metric score adjusted to be relative and comparable to other domains.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get relativeValue => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  The metric that was used to score this task.
  ///  Example: /// Example: Example metric
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get provenance => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'EffectResponseMetricsIngest{metricType: ${metricType}, domainValue: ${domainValue}, relativeValue: ${relativeValue}, provenance: ${provenance}}';
  }
}

class _EffectResponseMetricsIngestReader extends fb.TableReader<EffectResponseMetricsIngest> {
  const _EffectResponseMetricsIngestReader();

  @override
  EffectResponseMetricsIngest createObject(fb.BufferContext bc, int offset) => 
    EffectResponseMetricsIngest._(bc, offset);
}

class EffectResponseMetricsIngestBuilder {
  EffectResponseMetricsIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMetricTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDomainValue(double? domainValue) {
    fbBuilder.addFloat64(1, domainValue);
    return fbBuilder.offset;
  }
  int addRelativeValue(double? relativeValue) {
    fbBuilder.addFloat64(2, relativeValue);
    return fbBuilder.offset;
  }
  int addProvenanceOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EffectResponseMetricsIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _metricType;
  final double? _domainValue;
  final double? _relativeValue;
  final String? _provenance;

  EffectResponseMetricsIngestObjectBuilder({
    String? metricType,
    double? domainValue,
    double? relativeValue,
    String? provenance,
  })
      : _metricType = metricType,
        _domainValue = domainValue,
        _relativeValue = relativeValue,
        _provenance = provenance;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metricTypeOffset = _metricType == null ? null
        : fbBuilder.writeString(_metricType!);
    final int? provenanceOffset = _provenance == null ? null
        : fbBuilder.writeString(_provenance!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, metricTypeOffset);
    fbBuilder.addFloat64(1, _domainValue);
    fbBuilder.addFloat64(2, _relativeValue);
    fbBuilder.addOffset(3, provenanceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
