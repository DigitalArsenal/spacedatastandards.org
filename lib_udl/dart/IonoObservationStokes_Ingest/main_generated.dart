// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Multi-dimensional array with the same dimensions as power plus one additional dimension spanning an S dimension for S1, S2, and S3 (the normalized Stokes parameters 1, 2, and 3). It is advised to describe the antenna type, antenna configuration, and Stokes coordinate system as a notes to the variable.
class IonoObservationStokesIngest {
  IonoObservationStokesIngest._(this._bc, this._bcOffset);
  factory IonoObservationStokesIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IonoObservationStokesIngest> reader = _IonoObservationStokesIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Notes for the stokes data.
  ///  Example: /// Example: NOTES
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Array of integers of the stoke array dimensions.
  ///  Example: /// Example: [2, 3]
  ///  Constraints: No constraints specified.
  List<String>? get dimensions => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  ///  Array of names for dimensions.
  ///  Example: /// Example: ['NAMES1', 'NAMES2']
  ///  Constraints: No constraints specified.
  List<String>? get dimensionName => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);
  ///  Array of received stokes data.
  ///  Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
  ///  Constraints: No constraints specified.
  List<String>? get data => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);
  ///  S1, S2, and S3 (the normalized Stokes parameters 1, 2, and 3).
  ///  Example: /// Example: [1.0, 2.0]
  ///  Constraints: No constraints specified.
  List<String>? get s => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'IonoObservationStokesIngest{notes: ${notes}, dimensions: ${dimensions}, dimensionName: ${dimensionName}, data: ${data}, s: ${s}}';
  }
}

class _IonoObservationStokesIngestReader extends fb.TableReader<IonoObservationStokesIngest> {
  const _IonoObservationStokesIngestReader();

  @override
  IonoObservationStokesIngest createObject(fb.BufferContext bc, int offset) => 
    IonoObservationStokesIngest._(bc, offset);
}

class IonoObservationStokesIngestBuilder {
  IonoObservationStokesIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDimensionsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDimensionNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IonoObservationStokesIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _notes;
  final List<String>? _dimensions;
  final List<String>? _dimensionName;
  final List<String>? _data;
  final List<String>? _s;

  IonoObservationStokesIngestObjectBuilder({
    String? notes,
    List<String>? dimensions,
    List<String>? dimensionName,
    List<String>? data,
    List<String>? s,
  })
      : _notes = notes,
        _dimensions = dimensions,
        _dimensionName = dimensionName,
        _data = data,
        _s = s;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? dimensionsOffset = _dimensions == null ? null
        : fbBuilder.writeList(_dimensions!.map(fbBuilder.writeString).toList());
    final int? dimensionNameOffset = _dimensionName == null ? null
        : fbBuilder.writeList(_dimensionName!.map(fbBuilder.writeString).toList());
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeList(_data!.map(fbBuilder.writeString).toList());
    final int? sOffset = _s == null ? null
        : fbBuilder.writeList(_s!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, notesOffset);
    fbBuilder.addOffset(1, dimensionsOffset);
    fbBuilder.addOffset(2, dimensionNameOffset);
    fbBuilder.addOffset(3, dataOffset);
    fbBuilder.addOffset(4, sOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
