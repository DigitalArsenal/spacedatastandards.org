// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SortiePprFullTypeEnum {
  final int value;
  const SortiePprFullTypeEnum._(this.value);

  factory SortiePprFullTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SortiePprFullTypeEnum');
    }
    return result;
  }

  static SortiePprFullTypeEnum? _createOrNull(int? value) => 
      value == null ? null : SortiePprFullTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SortiePprFullTypeEnum M = SortiePprFullTypeEnum._(0);

  ///  No description available.
  static const SortiePprFullTypeEnum C = SortiePprFullTypeEnum._(1);
  static const Map<int, SortiePprFullTypeEnum> values = {
    0: M,
    1: C};

  static const fb.Reader<SortiePprFullTypeEnum> reader = _SortiePprFullTypeEnumReader();

  @override
  String toString() {
    return 'SortiePprFullTypeEnum{value: $value}';
  }
}

class _SortiePprFullTypeEnumReader extends fb.Reader<SortiePprFullTypeEnum> {
  const _SortiePprFullTypeEnumReader();

  @override
  int get size => 1;

  @override
  SortiePprFullTypeEnum read(fb.BufferContext bc, int offset) =>
      SortiePprFullTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SortiePprFullDataModeEnum {
  final int value;
  const SortiePprFullDataModeEnum._(this.value);

  factory SortiePprFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SortiePprFullDataModeEnum');
    }
    return result;
  }

  static SortiePprFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SortiePprFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SortiePprFullDataModeEnum REAL = SortiePprFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SortiePprFullDataModeEnum TEST = SortiePprFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SortiePprFullDataModeEnum SIMULATED = SortiePprFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SortiePprFullDataModeEnum EXERCISE = SortiePprFullDataModeEnum._(3);
  static const Map<int, SortiePprFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SortiePprFullDataModeEnum> reader = _SortiePprFullDataModeEnumReader();

  @override
  String toString() {
    return 'SortiePprFullDataModeEnum{value: $value}';
  }
}

class _SortiePprFullDataModeEnumReader extends fb.Reader<SortiePprFullDataModeEnum> {
  const _SortiePprFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SortiePprFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      SortiePprFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// SortiePPR is a regulatory requirement where operators must obtain permissions to full operational access to a runway, taxiway, or airport service.
class SortiePprFull {
  SortiePprFull._(this._bc, this._bcOffset);
  factory SortiePprFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SortiePprFull> reader = _SortiePprFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SORTIEPPR-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the Aircraft Sortie associated with this prior permission required (PPR) record.
  ///  Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idSortie => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The prior permission required (PPR) number issued by the airfield for a sortie.
  ///  Example: /// Example: 07-21-07W
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get number => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Time the prior permission required (PPR) valid window begins, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Time the prior permission required (PPR) valid window ends, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get endTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The username of the prior permission required (PPR) requestor.
  ///  Example: /// Example: jsmith1
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get requestor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Identifier of the prior permission required (PPR) grantor.
  ///  Example: /// Example: SMITH
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get grantor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Type of prior permission required (PPR) for a sortie (M - Military or C - Civilian). Enum: [M, C].
  ///  Example: /// Example: M
  ///  Constraints: Minimum length = 0, Maximum length = 1
  SortiePprFullTypeEnum get type => SortiePprFullTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 22, 0));
  ///  Remarks concerning the prior permission required (PPR) for a sortie.
  ///  Example: /// Example: PPR remark
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get remarks => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SortiePprFullDataModeEnum get dataMode => SortiePprFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 42, 0));

  @override
  String toString() {
    return 'SortiePprFull{id: ${id}, classificationMarking: ${classificationMarking}, idSortie: ${idSortie}, externalId: ${externalId}, number: ${number}, startTime: ${startTime}, endTime: ${endTime}, requestor: ${requestor}, grantor: ${grantor}, type: ${type}, remarks: ${remarks}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _SortiePprFullReader extends fb.TableReader<SortiePprFull> {
  const _SortiePprFullReader();

  @override
  SortiePprFull createObject(fb.BufferContext bc, int offset) => 
    SortiePprFull._(bc, offset);
}

class SortiePprFullBuilder {
  SortiePprFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(20);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdSortieOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addNumberOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addRequestorOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addGrantorOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addType(SortiePprFullTypeEnum? type) {
    fbBuilder.addInt8(9, type?.value);
    return fbBuilder.offset;
  }
  int addRemarksOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SortiePprFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(19, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SortiePprFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idSortie;
  final String? _externalId;
  final String? _number;
  final String? _startTime;
  final String? _endTime;
  final String? _requestor;
  final String? _grantor;
  final SortiePprFullTypeEnum? _type;
  final String? _remarks;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SortiePprFullDataModeEnum? _dataMode;

  SortiePprFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idSortie,
    String? externalId,
    String? number,
    String? startTime,
    String? endTime,
    String? requestor,
    String? grantor,
    SortiePprFullTypeEnum? type,
    String? remarks,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    SortiePprFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idSortie = idSortie,
        _externalId = externalId,
        _number = number,
        _startTime = startTime,
        _endTime = endTime,
        _requestor = requestor,
        _grantor = grantor,
        _type = type,
        _remarks = remarks,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idSortieOffset = _idSortie == null ? null
        : fbBuilder.writeString(_idSortie!);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    final int? numberOffset = _number == null ? null
        : fbBuilder.writeString(_number!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? endTimeOffset = _endTime == null ? null
        : fbBuilder.writeString(_endTime!);
    final int? requestorOffset = _requestor == null ? null
        : fbBuilder.writeString(_requestor!);
    final int? grantorOffset = _grantor == null ? null
        : fbBuilder.writeString(_grantor!);
    final int? remarksOffset = _remarks == null ? null
        : fbBuilder.writeString(_remarks!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(20);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idSortieOffset);
    fbBuilder.addOffset(3, externalIdOffset);
    fbBuilder.addOffset(4, numberOffset);
    fbBuilder.addOffset(5, startTimeOffset);
    fbBuilder.addOffset(6, endTimeOffset);
    fbBuilder.addOffset(7, requestorOffset);
    fbBuilder.addOffset(8, grantorOffset);
    fbBuilder.addInt8(9, _type?.value);
    fbBuilder.addOffset(10, remarksOffset);
    fbBuilder.addOffset(11, createdAtOffset);
    fbBuilder.addOffset(12, createdByOffset);
    fbBuilder.addOffset(13, updatedAtOffset);
    fbBuilder.addOffset(14, updatedByOffset);
    fbBuilder.addOffset(15, sourceDlOffset);
    fbBuilder.addOffset(16, sourceOffset);
    fbBuilder.addOffset(17, originOffset);
    fbBuilder.addOffset(18, origNetworkOffset);
    fbBuilder.addInt8(19, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
