// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Provides information pertaining to the location of the sensor platform during periods when the sensor is not collecting data. It shall be sent as required during periods in which the sensor is not collecting data, such as enroute to an orbit location, during a turn, or any other time at which platform location is required.
class MtiPlatformLocationAbridged {
  MtiPlatformLocationAbridged._(this._bc, this._bcOffset);
  factory MtiPlatformLocationAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MtiPlatformLocationAbridged> reader = _MtiPlatformLocationAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields of the Mission Segment to the time the report is prepared.
  ///  Example: /// Example: 1234567890
  ///  Constraints: No constraints specified.
  int get l1 => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  ///  North-South position of the platform at the time the report is prepared, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get l2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  East-West position of the platform at the time the report is prepared, expressed as degrees East (positive) from the Prime Meridian.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get l3 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  Altitude of the platform at the time the report is prepared, referenced to its position above the WGS-84 ellipsoid, in centimeters.
  ///  Example: /// Example: 45
  ///  Constraints: No constraints specified.
  int get l4 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Ground track of the platform at the time the report is prepared, expressed as the angle in degrees (clockwise) from True North.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get l5 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Ground speed of the platform at the time the report is prepared, expressed as millimeters per second.
  ///  Example: /// Example: 50
  ///  Constraints: No constraints specified.
  int get l6 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  Velocity of the platform in the vertical direction, expressed as decimeters per second.
  ///  Example: /// Example: 82
  ///  Constraints: No constraints specified.
  int get l7 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  Platform location timestamp in ISO8601 UTC format.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get platlocts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'MtiPlatformLocationAbridged{l1: ${l1}, l2: ${l2}, l3: ${l3}, l4: ${l4}, l5: ${l5}, l6: ${l6}, l7: ${l7}, platlocts: ${platlocts}}';
  }
}

class _MtiPlatformLocationAbridgedReader extends fb.TableReader<MtiPlatformLocationAbridged> {
  const _MtiPlatformLocationAbridgedReader();

  @override
  MtiPlatformLocationAbridged createObject(fb.BufferContext bc, int offset) => 
    MtiPlatformLocationAbridged._(bc, offset);
}

class MtiPlatformLocationAbridgedBuilder {
  MtiPlatformLocationAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addL1(int? l1) {
    fbBuilder.addInt64(0, l1);
    return fbBuilder.offset;
  }
  int addL2(double? l2) {
    fbBuilder.addFloat64(1, l2);
    return fbBuilder.offset;
  }
  int addL3(double? l3) {
    fbBuilder.addFloat64(2, l3);
    return fbBuilder.offset;
  }
  int addL4(int? l4) {
    fbBuilder.addInt32(3, l4);
    return fbBuilder.offset;
  }
  int addL5(double? l5) {
    fbBuilder.addFloat64(4, l5);
    return fbBuilder.offset;
  }
  int addL6(int? l6) {
    fbBuilder.addInt32(5, l6);
    return fbBuilder.offset;
  }
  int addL7(int? l7) {
    fbBuilder.addInt32(6, l7);
    return fbBuilder.offset;
  }
  int addPlatloctsOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MtiPlatformLocationAbridgedObjectBuilder extends fb.ObjectBuilder {
  final int? _l1;
  final double? _l2;
  final double? _l3;
  final int? _l4;
  final double? _l5;
  final int? _l6;
  final int? _l7;
  final String? _platlocts;

  MtiPlatformLocationAbridgedObjectBuilder({
    int? l1,
    double? l2,
    double? l3,
    int? l4,
    double? l5,
    int? l6,
    int? l7,
    String? platlocts,
  })
      : _l1 = l1,
        _l2 = l2,
        _l3 = l3,
        _l4 = l4,
        _l5 = l5,
        _l6 = l6,
        _l7 = l7,
        _platlocts = platlocts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? platloctsOffset = _platlocts == null ? null
        : fbBuilder.writeString(_platlocts!);
    fbBuilder.startTable(8);
    fbBuilder.addInt64(0, _l1);
    fbBuilder.addFloat64(1, _l2);
    fbBuilder.addFloat64(2, _l3);
    fbBuilder.addInt32(3, _l4);
    fbBuilder.addFloat64(4, _l5);
    fbBuilder.addInt32(5, _l6);
    fbBuilder.addInt32(6, _l7);
    fbBuilder.addOffset(7, platloctsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
