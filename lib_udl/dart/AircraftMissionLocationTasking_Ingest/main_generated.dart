// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of aircraft mission location information for this aircraft mission tasking.
class AircraftMissionLocationTaskingIngest {
  AircraftMissionLocationTaskingIngest._(this._bc, this._bcOffset);
  factory AircraftMissionLocationTaskingIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AircraftMissionLocationTaskingIngest> reader = _AircraftMissionLocationTaskingIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The start time of this mission in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-10-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The end time of this mission in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-10-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get endTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The name that identifies the location at which this mission is to be performed. This can be the name of a general target area, orbit, cap point, station, etc.
  ///  Example: /// Example: KLSV
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get msnLocName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The altitude for this mission represented as hundreds of feet above MSL.
  ///  Example: /// Example: 210
  ///  Constraints: No constraints specified.
  int get alt => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  The code for the priority assigned to this mission.
  ///  Example: /// Example: 1A
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get airMsnPri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The radius of the circle around the location being reported in feet.
  ///  Example: /// Example: 1000
  ///  Constraints: No constraints specified.
  int get areaGeoRad => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  The location name for this mission.
  ///  Example: /// Example: PT ALFA
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get msnLocPtName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  ///  Example: /// Example: 35.123
  ///  Constraints: No constraints specified.
  double get msnLocPtLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  ///  Example: /// Example: 79.01
  ///  Constraints: No constraints specified.
  double get msnLocPtLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  The alpha-numeric specified location for this mission specified as a bearing angle in degrees relative to true north and a range in nautical miles (NM).
  ///  Example: /// Example: 330T-PT ALFA-50NM
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get msnLocPtBarT => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'AircraftMissionLocationTaskingIngest{startTime: ${startTime}, endTime: ${endTime}, msnLocName: ${msnLocName}, alt: ${alt}, airMsnPri: ${airMsnPri}, areaGeoRad: ${areaGeoRad}, msnLocPtName: ${msnLocPtName}, msnLocPtLat: ${msnLocPtLat}, msnLocPtLon: ${msnLocPtLon}, msnLocPtBarT: ${msnLocPtBarT}}';
  }
}

class _AircraftMissionLocationTaskingIngestReader extends fb.TableReader<AircraftMissionLocationTaskingIngest> {
  const _AircraftMissionLocationTaskingIngestReader();

  @override
  AircraftMissionLocationTaskingIngest createObject(fb.BufferContext bc, int offset) => 
    AircraftMissionLocationTaskingIngest._(bc, offset);
}

class AircraftMissionLocationTaskingIngestBuilder {
  AircraftMissionLocationTaskingIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMsnLocNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAlt(int? alt) {
    fbBuilder.addInt32(3, alt);
    return fbBuilder.offset;
  }
  int addAirMsnPriOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addAreaGeoRad(int? areaGeoRad) {
    fbBuilder.addInt32(5, areaGeoRad);
    return fbBuilder.offset;
  }
  int addMsnLocPtNameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addMsnLocPtLat(double? msnLocPtLat) {
    fbBuilder.addFloat64(7, msnLocPtLat);
    return fbBuilder.offset;
  }
  int addMsnLocPtLon(double? msnLocPtLon) {
    fbBuilder.addFloat64(8, msnLocPtLon);
    return fbBuilder.offset;
  }
  int addMsnLocPtBarTOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AircraftMissionLocationTaskingIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _startTime;
  final String? _endTime;
  final String? _msnLocName;
  final int? _alt;
  final String? _airMsnPri;
  final int? _areaGeoRad;
  final String? _msnLocPtName;
  final double? _msnLocPtLat;
  final double? _msnLocPtLon;
  final String? _msnLocPtBarT;

  AircraftMissionLocationTaskingIngestObjectBuilder({
    String? startTime,
    String? endTime,
    String? msnLocName,
    int? alt,
    String? airMsnPri,
    int? areaGeoRad,
    String? msnLocPtName,
    double? msnLocPtLat,
    double? msnLocPtLon,
    String? msnLocPtBarT,
  })
      : _startTime = startTime,
        _endTime = endTime,
        _msnLocName = msnLocName,
        _alt = alt,
        _airMsnPri = airMsnPri,
        _areaGeoRad = areaGeoRad,
        _msnLocPtName = msnLocPtName,
        _msnLocPtLat = msnLocPtLat,
        _msnLocPtLon = msnLocPtLon,
        _msnLocPtBarT = msnLocPtBarT;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? endTimeOffset = _endTime == null ? null
        : fbBuilder.writeString(_endTime!);
    final int? msnLocNameOffset = _msnLocName == null ? null
        : fbBuilder.writeString(_msnLocName!);
    final int? airMsnPriOffset = _airMsnPri == null ? null
        : fbBuilder.writeString(_airMsnPri!);
    final int? msnLocPtNameOffset = _msnLocPtName == null ? null
        : fbBuilder.writeString(_msnLocPtName!);
    final int? msnLocPtBarTOffset = _msnLocPtBarT == null ? null
        : fbBuilder.writeString(_msnLocPtBarT!);
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, startTimeOffset);
    fbBuilder.addOffset(1, endTimeOffset);
    fbBuilder.addOffset(2, msnLocNameOffset);
    fbBuilder.addInt32(3, _alt);
    fbBuilder.addOffset(4, airMsnPriOffset);
    fbBuilder.addInt32(5, _areaGeoRad);
    fbBuilder.addOffset(6, msnLocPtNameOffset);
    fbBuilder.addFloat64(7, _msnLocPtLat);
    fbBuilder.addFloat64(8, _msnLocPtLon);
    fbBuilder.addOffset(9, msnLocPtBarTOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
