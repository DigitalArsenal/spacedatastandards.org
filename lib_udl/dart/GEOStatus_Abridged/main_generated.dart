// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class GeostatusAbridgedDataModeEnum {
  final int value;
  const GeostatusAbridgedDataModeEnum._(this.value);

  factory GeostatusAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum GeostatusAbridgedDataModeEnum');
    }
    return result;
  }

  static GeostatusAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : GeostatusAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const GeostatusAbridgedDataModeEnum REAL = GeostatusAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const GeostatusAbridgedDataModeEnum TEST = GeostatusAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const GeostatusAbridgedDataModeEnum SIMULATED = GeostatusAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const GeostatusAbridgedDataModeEnum EXERCISE = GeostatusAbridgedDataModeEnum._(3);
  static const Map<int, GeostatusAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<GeostatusAbridgedDataModeEnum> reader = _GeostatusAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'GeostatusAbridgedDataModeEnum{value: $value}';
  }
}

class _GeostatusAbridgedDataModeEnumReader extends fb.Reader<GeostatusAbridgedDataModeEnum> {
  const _GeostatusAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  GeostatusAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      GeostatusAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.
class GeostatusAbridged {
  GeostatusAbridged._(this._bc, this._bcOffset);
  factory GeostatusAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GeostatusAbridged> reader = _GeostatusAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: GEOSTATUS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the object on-orbit object.
  ///  Example: /// Example: REF-ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Sine of inclination times the sine of right ascension.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get ss => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Sine of inclination times the cosine of right ascension.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get sc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Objects displacement from geostationary orbit in deg^2/day^2.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get relativeEnergy => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Corrective or overriding long term trend for longitudinal change in degrees/day.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get longitudeRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
  ///  Example: /// Example: 180.1
  ///  Constraints: No constraints specified.
  double get longitudeMin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
  ///  Example: /// Example: 1.01
  ///  Constraints: No constraints specified.
  double get longitudeMax => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Indicates the confidence level in the entry.  (Low, Medium, High).
  ///  Example: /// Example: Low
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get confidenceLevel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Geosynchronous plane changing status.  (Current, Never, Former, Future).
  ///  Example: /// Example: Current
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get planeChangeStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Indicates the trough (gravity well) or drift direction of a space object:
  ///  255 - Influenced by 255° longitude trough. 
  ///  75 - Influenced by 75° longitude trough. 
  ///  Both - Oscillating between both 255 and 75 troughs. 
  ///  East - Drifting eastward; large relative energy and a period less than 1436.1 minutes. 
  ///  West - Drifting westward; large relative energy and a period greater than 1436.2 minutes.
  ///  Example: /// Example: West
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get troughType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Lost space object indicator.  (True or False).
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get lostFlag => const fb.BoolReader().vTableGet(_bc, _bcOffset, 30, false);
  ///  Semi-annual correction.  (True or False).
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get semiAnnualCorrFlag => const fb.BoolReader().vTableGet(_bc, _bcOffset, 32, false);
  ///  Space object status.  (Active, Dead, Unknown).
  ///  Example: /// Example: Active
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get objectStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  GeostatusAbridgedDataModeEnum get dataMode => GeostatusAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 46, 0));
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 21
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 48, 0);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);

  @override
  String toString() {
    return 'GeostatusAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idOnOrbit: ${idOnOrbit}, origObjectId: ${origObjectId}, ss: ${ss}, sc: ${sc}, relativeEnergy: ${relativeEnergy}, longitudeRate: ${longitudeRate}, longitudeMin: ${longitudeMin}, longitudeMax: ${longitudeMax}, confidenceLevel: ${confidenceLevel}, planeChangeStatus: ${planeChangeStatus}, troughType: ${troughType}, lostFlag: ${lostFlag}, semiAnnualCorrFlag: ${semiAnnualCorrFlag}, objectStatus: ${objectStatus}, rawFileUri: ${rawFileUri}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, satNo: ${satNo}, origNetwork: ${origNetwork}}';
  }
}

class _GeostatusAbridgedReader extends fb.TableReader<GeostatusAbridged> {
  const _GeostatusAbridgedReader();

  @override
  GeostatusAbridged createObject(fb.BufferContext bc, int offset) => 
    GeostatusAbridged._(bc, offset);
}

class GeostatusAbridgedBuilder {
  GeostatusAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(24);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSs(double? ss) {
    fbBuilder.addFloat64(4, ss);
    return fbBuilder.offset;
  }
  int addSc(double? sc) {
    fbBuilder.addFloat64(5, sc);
    return fbBuilder.offset;
  }
  int addRelativeEnergy(double? relativeEnergy) {
    fbBuilder.addFloat64(6, relativeEnergy);
    return fbBuilder.offset;
  }
  int addLongitudeRate(double? longitudeRate) {
    fbBuilder.addFloat64(7, longitudeRate);
    return fbBuilder.offset;
  }
  int addLongitudeMin(double? longitudeMin) {
    fbBuilder.addFloat64(8, longitudeMin);
    return fbBuilder.offset;
  }
  int addLongitudeMax(double? longitudeMax) {
    fbBuilder.addFloat64(9, longitudeMax);
    return fbBuilder.offset;
  }
  int addConfidenceLevelOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addPlaneChangeStatusOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addTroughTypeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addLostFlag(bool? lostFlag) {
    fbBuilder.addBool(13, lostFlag);
    return fbBuilder.offset;
  }
  int addSemiAnnualCorrFlag(bool? semiAnnualCorrFlag) {
    fbBuilder.addBool(14, semiAnnualCorrFlag);
    return fbBuilder.offset;
  }
  int addObjectStatusOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addDataMode(GeostatusAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(21, dataMode?.value);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(22, satNo);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GeostatusAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idOnOrbit;
  final String? _origObjectId;
  final double? _ss;
  final double? _sc;
  final double? _relativeEnergy;
  final double? _longitudeRate;
  final double? _longitudeMin;
  final double? _longitudeMax;
  final String? _confidenceLevel;
  final String? _planeChangeStatus;
  final String? _troughType;
  final bool? _lostFlag;
  final bool? _semiAnnualCorrFlag;
  final String? _objectStatus;
  final String? _rawFileUri;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final GeostatusAbridgedDataModeEnum? _dataMode;
  final int? _satNo;
  final String? _origNetwork;

  GeostatusAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idOnOrbit,
    String? origObjectId,
    double? ss,
    double? sc,
    double? relativeEnergy,
    double? longitudeRate,
    double? longitudeMin,
    double? longitudeMax,
    String? confidenceLevel,
    String? planeChangeStatus,
    String? troughType,
    bool? lostFlag,
    bool? semiAnnualCorrFlag,
    String? objectStatus,
    String? rawFileUri,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    GeostatusAbridgedDataModeEnum? dataMode,
    int? satNo,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idOnOrbit = idOnOrbit,
        _origObjectId = origObjectId,
        _ss = ss,
        _sc = sc,
        _relativeEnergy = relativeEnergy,
        _longitudeRate = longitudeRate,
        _longitudeMin = longitudeMin,
        _longitudeMax = longitudeMax,
        _confidenceLevel = confidenceLevel,
        _planeChangeStatus = planeChangeStatus,
        _troughType = troughType,
        _lostFlag = lostFlag,
        _semiAnnualCorrFlag = semiAnnualCorrFlag,
        _objectStatus = objectStatus,
        _rawFileUri = rawFileUri,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _satNo = satNo,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? confidenceLevelOffset = _confidenceLevel == null ? null
        : fbBuilder.writeString(_confidenceLevel!);
    final int? planeChangeStatusOffset = _planeChangeStatus == null ? null
        : fbBuilder.writeString(_planeChangeStatus!);
    final int? troughTypeOffset = _troughType == null ? null
        : fbBuilder.writeString(_troughType!);
    final int? objectStatusOffset = _objectStatus == null ? null
        : fbBuilder.writeString(_objectStatus!);
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(24);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idOnOrbitOffset);
    fbBuilder.addOffset(3, origObjectIdOffset);
    fbBuilder.addFloat64(4, _ss);
    fbBuilder.addFloat64(5, _sc);
    fbBuilder.addFloat64(6, _relativeEnergy);
    fbBuilder.addFloat64(7, _longitudeRate);
    fbBuilder.addFloat64(8, _longitudeMin);
    fbBuilder.addFloat64(9, _longitudeMax);
    fbBuilder.addOffset(10, confidenceLevelOffset);
    fbBuilder.addOffset(11, planeChangeStatusOffset);
    fbBuilder.addOffset(12, troughTypeOffset);
    fbBuilder.addBool(13, _lostFlag);
    fbBuilder.addBool(14, _semiAnnualCorrFlag);
    fbBuilder.addOffset(15, objectStatusOffset);
    fbBuilder.addOffset(16, rawFileUriOffset);
    fbBuilder.addOffset(17, createdAtOffset);
    fbBuilder.addOffset(18, createdByOffset);
    fbBuilder.addOffset(19, sourceOffset);
    fbBuilder.addOffset(20, originOffset);
    fbBuilder.addInt8(21, _dataMode?.value);
    fbBuilder.addInt32(22, _satNo);
    fbBuilder.addOffset(23, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
