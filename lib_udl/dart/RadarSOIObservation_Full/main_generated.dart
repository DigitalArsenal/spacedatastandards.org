// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// A Radar SOI record contains observation information taken from a sensor about a Space Object.
class RadarSoiobservationFull {
  RadarSoiobservationFull._(this._bc, this._bcOffset);
  factory RadarSoiobservationFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RadarSoiobservationFull> reader = _RadarSoiobservationFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Observation detection start time in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.888456Z
  ///  Constraints: No constraints specified.
  String? get obStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Array of the times of validity in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z']
  ///  Constraints: No constraints specified.
  List<String>? get tovs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  ///  Array of range sample spacing in meters. The 'tov' and 'rspace' arrays must match in size.
  ///  Example: /// Example: [0.006, 0.006, 0.006]
  ///  Constraints: No constraints specified.
  List<String>? get rspaces => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);
  ///  Array of cross-range sample spacing in meters. The 'tov' and 'xspace' arrays must match in size.
  ///  Example: /// Example: [0.006, 0.006, 0.006]
  ///  Constraints: No constraints specified.
  List<String>? get xspaces => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);
  ///  Array of conversion factors between Doppler in hertz and cross-range in meters. The 'tov' and 'doppler2XR' arrays must match in size.
  ///  Example: /// Example: [5644.27, 5644.27, 5644.27]
  ///  Constraints: No constraints specified.
  List<String>? get doppler2Xrs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 12);
  ///  Array of average Interpulse spacing in seconds. The 'tov' and 'deltaTime' arrays must match in size.
  ///  Example: /// Example: [0.005, 0.005, 0.005]
  ///  Constraints: No constraints specified.
  List<String>? get deltaTimes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);
  ///  Array of the aspect angle at the center of the image in degrees.  The 'tov' and 'aspectAngle' arrays must match in size.
  ///  Example: /// Example: [4.278, 4.278, 4.278]
  ///  Constraints: No constraints specified.
  List<String>? get aspectAngles => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 16);
  ///  Array of the component of target angular velocity observable by radar in radians per second.  The 'tov' and 'projAngVel' arrays must match in size.
  ///  Example: /// Example: [0.166, 0.166, 0.166]
  ///  Constraints: No constraints specified.
  List<String>? get projAngVels => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 18);
  ///  Optional id of assumed StateVector of object being observed.
  ///  Example: /// Example: 99a0de63-b38f-4d81-b057
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idStateVector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Optional id of assumed AttitudeSet of object being observed.
  ///  Example: /// Example: 99a0de63-b38f-4d81-b057
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idAttitudeSet => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Array of the range to target at image center in kilometers. The 'tov' and 'range' arrays must match in size.
  ///  Example: /// Example: [877.938, 877.938, 877.938]
  ///  Constraints: No constraints specified.
  List<String>? get ranges => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 24);
  ///  Array of the azimuth angle to target at image center in degrees. The 'tov' and 'azimuth' arrays must match in size.
  ///  Example: /// Example: [278.27, 278.27, 278.27]
  ///  Constraints: No constraints specified.
  List<String>? get azimuths => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 26);
  ///  Array of the elevation angle to target at image center in degrees. The 'tov' and 'elevation' arrays must match in size.
  ///  Example: /// Example: [70.85, 70.85, 70.85]
  ///  Constraints: No constraints specified.
  List<String>? get elevations => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 28);
  ///  Array of the range rate of target at image center in kilometers per second. The 'tov' and 'rangeRate' arrays must match in size.
  ///  Example: /// Example: [0.317, 0.317, 0.317]
  ///  Constraints: No constraints specified.
  List<String>? get rangeRates => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  Array of the azimuth rate of target at image center in degrees per second. The 'tov' and 'azimuthRate' arrays must match in size.
  ///  Example: /// Example: [-1.481, -1.481, -1.481]
  ///  Constraints: No constraints specified.
  List<String>? get azimuthRates => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  Array of the elevation rate of target at image center in degrees per second. The 'tov' and 'elevationRate' arrays must match in size.
  ///  Example: /// Example: [-0.074, -0.074, -0.074]
  ///  Constraints: No constraints specified.
  List<String>? get elevationRates => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  ///  Array of  sensor azimuth angle biases in degrees. The 'tov' and 'azimuthBias' arrays must match in size.
  ///  Example: /// Example: [45.23, 45.23, 45.23]
  ///  Constraints: No constraints specified.
  List<String>? get azimuthBiases => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 36);
  ///  Array of sensor elevation biases in degrees. The 'tov' and 'elevationBias' arrays must match in size.
  ///  Example: /// Example: [1.23, 1.23, 1.23]
  ///  Constraints: No constraints specified.
  List<String>? get elevationBiases => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 38);
  ///  Array of sensor range biases in kilometers. The 'tov' and 'rangeBias' arrays must match in size.
  ///  Example: /// Example: [1.23, 1.23, 1.23]
  ///  Constraints: No constraints specified.
  List<String>? get rangeBiases => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 40);
  ///  Array of Integration angles in degrees. The 'tov' and 'integrationAngle' arrays must match in size.
  ///  Example: /// Example: [8.594, 8.594, 8.594]
  ///  Constraints: No constraints specified.
  List<String>? get integrationAngles => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  Array of cross-range resolutions (accounting for weighting function) in kilometers. The 'tov' and 'crossRangeRes' arrays must match in size.
  ///  Example: /// Example: [11.301, 11.301, 11.301]
  ///  Constraints: No constraints specified.
  List<String>? get crossRangeRes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);
  ///  Beta angle (between target and radar-image frame z axis) in degrees.
  ///  Example: /// Example: -89.97
  ///  Constraints: No constraints specified.
  double get beta => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Kappa angle (between radar-line-of-sight and target-frame x axis) in degrees.
  ///  Example: /// Example: 103.04
  ///  Constraints: No constraints specified.
  double get kappa => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Array of the peak pixel amplitude for each image in decibels. The 'tov' and 'peakAmplitude' arrays must match in size.
  ///  Example: /// Example: [33.1, 33.1, 33.1]
  ///  Constraints: No constraints specified.
  List<String>? get peakAmplitudes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 50);
  ///  Radar center frequency of the radar in hertz.
  ///  Example: /// Example: 160047.0625
  ///  Constraints: No constraints specified.
  double get centerFrequency => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Bandwidth of radar pulse in hertz.
  ///  Example: /// Example: 24094.12
  ///  Constraints: No constraints specified.
  double get pulseBandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Array of the cartesian X positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xpos' arrays must match in size.
  ///  Example: /// Example: [-1118.577381, -1118.577381, -1118.577381]
  ///  Constraints: No constraints specified.
  List<String>? get xpos => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 56);
  ///  Array of the cartesian Y positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'ypos' arrays must match in size.
  ///  Example: /// Example: [3026.231084, 3026.231084, 3026.231084]
  ///  Constraints: No constraints specified.
  List<String>? get ypos => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 58);
  ///  Array of the cartesian Z positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'zpos' arrays must match in size.
  ///  Example: /// Example: [6167.831808, 6167.831808, 6167.831808]
  ///  Constraints: No constraints specified.
  List<String>? get zpos => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 60);
  ///  Array of the cartesian X velocities of target, in kilometers per second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xvel' arrays must match in size.
  ///  Example: /// Example: [-4.25242784, -4.25242784, -4.25242784]
  ///  Constraints: No constraints specified.
  List<String>? get xvel => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 62);
  ///  Array of the cartesian Y velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'yvel' arrays must match in size.
  ///  Example: /// Example: [5.291107434, 5.291107434, 5.291107434]
  ///  Constraints: No constraints specified.
  List<String>? get yvel => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 64);
  ///  Array of the cartesian Z velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'zvel' arrays must match in size.
  ///  Example: /// Example: [-3.356493869, -3.356493869, -3.356493869]
  ///  Constraints: No constraints specified.
  List<String>? get zvel => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 66);

  @override
  String toString() {
    return 'RadarSoiobservationFull{obStartTime: ${obStartTime}, tovs: ${tovs}, rspaces: ${rspaces}, xspaces: ${xspaces}, doppler2Xrs: ${doppler2Xrs}, deltaTimes: ${deltaTimes}, aspectAngles: ${aspectAngles}, projAngVels: ${projAngVels}, idStateVector: ${idStateVector}, idAttitudeSet: ${idAttitudeSet}, ranges: ${ranges}, azimuths: ${azimuths}, elevations: ${elevations}, rangeRates: ${rangeRates}, azimuthRates: ${azimuthRates}, elevationRates: ${elevationRates}, azimuthBiases: ${azimuthBiases}, elevationBiases: ${elevationBiases}, rangeBiases: ${rangeBiases}, integrationAngles: ${integrationAngles}, crossRangeRes: ${crossRangeRes}, beta: ${beta}, kappa: ${kappa}, peakAmplitudes: ${peakAmplitudes}, centerFrequency: ${centerFrequency}, pulseBandwidth: ${pulseBandwidth}, xpos: ${xpos}, ypos: ${ypos}, zpos: ${zpos}, xvel: ${xvel}, yvel: ${yvel}, zvel: ${zvel}}';
  }
}

class _RadarSoiobservationFullReader extends fb.TableReader<RadarSoiobservationFull> {
  const _RadarSoiobservationFullReader();

  @override
  RadarSoiobservationFull createObject(fb.BufferContext bc, int offset) => 
    RadarSoiobservationFull._(bc, offset);
}

class RadarSoiobservationFullBuilder {
  RadarSoiobservationFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(32);
  }

  int addObStartTimeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTovsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRspacesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addXspacesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDoppler2XrsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addDeltaTimesOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addAspectAnglesOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addProjAngVelsOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addIdStateVectorOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addIdAttitudeSetOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addRangesOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addAzimuthsOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addElevationsOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addRangeRatesOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addAzimuthRatesOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addElevationRatesOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addAzimuthBiasesOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addElevationBiasesOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addRangeBiasesOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addIntegrationAnglesOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addCrossRangeResOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addBeta(double? beta) {
    fbBuilder.addFloat64(21, beta);
    return fbBuilder.offset;
  }
  int addKappa(double? kappa) {
    fbBuilder.addFloat64(22, kappa);
    return fbBuilder.offset;
  }
  int addPeakAmplitudesOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addCenterFrequency(double? centerFrequency) {
    fbBuilder.addFloat64(24, centerFrequency);
    return fbBuilder.offset;
  }
  int addPulseBandwidth(double? pulseBandwidth) {
    fbBuilder.addFloat64(25, pulseBandwidth);
    return fbBuilder.offset;
  }
  int addXposOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addYposOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addZposOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addXvelOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addYvelOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addZvelOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RadarSoiobservationFullObjectBuilder extends fb.ObjectBuilder {
  final String? _obStartTime;
  final List<String>? _tovs;
  final List<String>? _rspaces;
  final List<String>? _xspaces;
  final List<String>? _doppler2Xrs;
  final List<String>? _deltaTimes;
  final List<String>? _aspectAngles;
  final List<String>? _projAngVels;
  final String? _idStateVector;
  final String? _idAttitudeSet;
  final List<String>? _ranges;
  final List<String>? _azimuths;
  final List<String>? _elevations;
  final List<String>? _rangeRates;
  final List<String>? _azimuthRates;
  final List<String>? _elevationRates;
  final List<String>? _azimuthBiases;
  final List<String>? _elevationBiases;
  final List<String>? _rangeBiases;
  final List<String>? _integrationAngles;
  final List<String>? _crossRangeRes;
  final double? _beta;
  final double? _kappa;
  final List<String>? _peakAmplitudes;
  final double? _centerFrequency;
  final double? _pulseBandwidth;
  final List<String>? _xpos;
  final List<String>? _ypos;
  final List<String>? _zpos;
  final List<String>? _xvel;
  final List<String>? _yvel;
  final List<String>? _zvel;

  RadarSoiobservationFullObjectBuilder({
    String? obStartTime,
    List<String>? tovs,
    List<String>? rspaces,
    List<String>? xspaces,
    List<String>? doppler2Xrs,
    List<String>? deltaTimes,
    List<String>? aspectAngles,
    List<String>? projAngVels,
    String? idStateVector,
    String? idAttitudeSet,
    List<String>? ranges,
    List<String>? azimuths,
    List<String>? elevations,
    List<String>? rangeRates,
    List<String>? azimuthRates,
    List<String>? elevationRates,
    List<String>? azimuthBiases,
    List<String>? elevationBiases,
    List<String>? rangeBiases,
    List<String>? integrationAngles,
    List<String>? crossRangeRes,
    double? beta,
    double? kappa,
    List<String>? peakAmplitudes,
    double? centerFrequency,
    double? pulseBandwidth,
    List<String>? xpos,
    List<String>? ypos,
    List<String>? zpos,
    List<String>? xvel,
    List<String>? yvel,
    List<String>? zvel,
  })
      : _obStartTime = obStartTime,
        _tovs = tovs,
        _rspaces = rspaces,
        _xspaces = xspaces,
        _doppler2Xrs = doppler2Xrs,
        _deltaTimes = deltaTimes,
        _aspectAngles = aspectAngles,
        _projAngVels = projAngVels,
        _idStateVector = idStateVector,
        _idAttitudeSet = idAttitudeSet,
        _ranges = ranges,
        _azimuths = azimuths,
        _elevations = elevations,
        _rangeRates = rangeRates,
        _azimuthRates = azimuthRates,
        _elevationRates = elevationRates,
        _azimuthBiases = azimuthBiases,
        _elevationBiases = elevationBiases,
        _rangeBiases = rangeBiases,
        _integrationAngles = integrationAngles,
        _crossRangeRes = crossRangeRes,
        _beta = beta,
        _kappa = kappa,
        _peakAmplitudes = peakAmplitudes,
        _centerFrequency = centerFrequency,
        _pulseBandwidth = pulseBandwidth,
        _xpos = xpos,
        _ypos = ypos,
        _zpos = zpos,
        _xvel = xvel,
        _yvel = yvel,
        _zvel = zvel;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? obStartTimeOffset = _obStartTime == null ? null
        : fbBuilder.writeString(_obStartTime!);
    final int? tovsOffset = _tovs == null ? null
        : fbBuilder.writeList(_tovs!.map(fbBuilder.writeString).toList());
    final int? rspacesOffset = _rspaces == null ? null
        : fbBuilder.writeList(_rspaces!.map(fbBuilder.writeString).toList());
    final int? xspacesOffset = _xspaces == null ? null
        : fbBuilder.writeList(_xspaces!.map(fbBuilder.writeString).toList());
    final int? doppler2XrsOffset = _doppler2Xrs == null ? null
        : fbBuilder.writeList(_doppler2Xrs!.map(fbBuilder.writeString).toList());
    final int? deltaTimesOffset = _deltaTimes == null ? null
        : fbBuilder.writeList(_deltaTimes!.map(fbBuilder.writeString).toList());
    final int? aspectAnglesOffset = _aspectAngles == null ? null
        : fbBuilder.writeList(_aspectAngles!.map(fbBuilder.writeString).toList());
    final int? projAngVelsOffset = _projAngVels == null ? null
        : fbBuilder.writeList(_projAngVels!.map(fbBuilder.writeString).toList());
    final int? idStateVectorOffset = _idStateVector == null ? null
        : fbBuilder.writeString(_idStateVector!);
    final int? idAttitudeSetOffset = _idAttitudeSet == null ? null
        : fbBuilder.writeString(_idAttitudeSet!);
    final int? rangesOffset = _ranges == null ? null
        : fbBuilder.writeList(_ranges!.map(fbBuilder.writeString).toList());
    final int? azimuthsOffset = _azimuths == null ? null
        : fbBuilder.writeList(_azimuths!.map(fbBuilder.writeString).toList());
    final int? elevationsOffset = _elevations == null ? null
        : fbBuilder.writeList(_elevations!.map(fbBuilder.writeString).toList());
    final int? rangeRatesOffset = _rangeRates == null ? null
        : fbBuilder.writeList(_rangeRates!.map(fbBuilder.writeString).toList());
    final int? azimuthRatesOffset = _azimuthRates == null ? null
        : fbBuilder.writeList(_azimuthRates!.map(fbBuilder.writeString).toList());
    final int? elevationRatesOffset = _elevationRates == null ? null
        : fbBuilder.writeList(_elevationRates!.map(fbBuilder.writeString).toList());
    final int? azimuthBiasesOffset = _azimuthBiases == null ? null
        : fbBuilder.writeList(_azimuthBiases!.map(fbBuilder.writeString).toList());
    final int? elevationBiasesOffset = _elevationBiases == null ? null
        : fbBuilder.writeList(_elevationBiases!.map(fbBuilder.writeString).toList());
    final int? rangeBiasesOffset = _rangeBiases == null ? null
        : fbBuilder.writeList(_rangeBiases!.map(fbBuilder.writeString).toList());
    final int? integrationAnglesOffset = _integrationAngles == null ? null
        : fbBuilder.writeList(_integrationAngles!.map(fbBuilder.writeString).toList());
    final int? crossRangeResOffset = _crossRangeRes == null ? null
        : fbBuilder.writeList(_crossRangeRes!.map(fbBuilder.writeString).toList());
    final int? peakAmplitudesOffset = _peakAmplitudes == null ? null
        : fbBuilder.writeList(_peakAmplitudes!.map(fbBuilder.writeString).toList());
    final int? xposOffset = _xpos == null ? null
        : fbBuilder.writeList(_xpos!.map(fbBuilder.writeString).toList());
    final int? yposOffset = _ypos == null ? null
        : fbBuilder.writeList(_ypos!.map(fbBuilder.writeString).toList());
    final int? zposOffset = _zpos == null ? null
        : fbBuilder.writeList(_zpos!.map(fbBuilder.writeString).toList());
    final int? xvelOffset = _xvel == null ? null
        : fbBuilder.writeList(_xvel!.map(fbBuilder.writeString).toList());
    final int? yvelOffset = _yvel == null ? null
        : fbBuilder.writeList(_yvel!.map(fbBuilder.writeString).toList());
    final int? zvelOffset = _zvel == null ? null
        : fbBuilder.writeList(_zvel!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(32);
    fbBuilder.addOffset(0, obStartTimeOffset);
    fbBuilder.addOffset(1, tovsOffset);
    fbBuilder.addOffset(2, rspacesOffset);
    fbBuilder.addOffset(3, xspacesOffset);
    fbBuilder.addOffset(4, doppler2XrsOffset);
    fbBuilder.addOffset(5, deltaTimesOffset);
    fbBuilder.addOffset(6, aspectAnglesOffset);
    fbBuilder.addOffset(7, projAngVelsOffset);
    fbBuilder.addOffset(8, idStateVectorOffset);
    fbBuilder.addOffset(9, idAttitudeSetOffset);
    fbBuilder.addOffset(10, rangesOffset);
    fbBuilder.addOffset(11, azimuthsOffset);
    fbBuilder.addOffset(12, elevationsOffset);
    fbBuilder.addOffset(13, rangeRatesOffset);
    fbBuilder.addOffset(14, azimuthRatesOffset);
    fbBuilder.addOffset(15, elevationRatesOffset);
    fbBuilder.addOffset(16, azimuthBiasesOffset);
    fbBuilder.addOffset(17, elevationBiasesOffset);
    fbBuilder.addOffset(18, rangeBiasesOffset);
    fbBuilder.addOffset(19, integrationAnglesOffset);
    fbBuilder.addOffset(20, crossRangeResOffset);
    fbBuilder.addFloat64(21, _beta);
    fbBuilder.addFloat64(22, _kappa);
    fbBuilder.addOffset(23, peakAmplitudesOffset);
    fbBuilder.addFloat64(24, _centerFrequency);
    fbBuilder.addFloat64(25, _pulseBandwidth);
    fbBuilder.addOffset(26, xposOffset);
    fbBuilder.addOffset(27, yposOffset);
    fbBuilder.addOffset(28, zposOffset);
    fbBuilder.addOffset(29, xvelOffset);
    fbBuilder.addOffset(30, yvelOffset);
    fbBuilder.addOffset(31, zvelOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
