// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AircraftStatusRemarkAbridgedDataModeEnum {
  final int value;
  const AircraftStatusRemarkAbridgedDataModeEnum._(this.value);

  factory AircraftStatusRemarkAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AircraftStatusRemarkAbridgedDataModeEnum');
    }
    return result;
  }

  static AircraftStatusRemarkAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AircraftStatusRemarkAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AircraftStatusRemarkAbridgedDataModeEnum REAL = AircraftStatusRemarkAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AircraftStatusRemarkAbridgedDataModeEnum TEST = AircraftStatusRemarkAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AircraftStatusRemarkAbridgedDataModeEnum SIMULATED = AircraftStatusRemarkAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AircraftStatusRemarkAbridgedDataModeEnum EXERCISE = AircraftStatusRemarkAbridgedDataModeEnum._(3);
  static const Map<int, AircraftStatusRemarkAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AircraftStatusRemarkAbridgedDataModeEnum> reader = _AircraftStatusRemarkAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'AircraftStatusRemarkAbridgedDataModeEnum{value: $value}';
  }
}

class _AircraftStatusRemarkAbridgedDataModeEnumReader extends fb.Reader<AircraftStatusRemarkAbridgedDataModeEnum> {
  const _AircraftStatusRemarkAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AircraftStatusRemarkAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      AircraftStatusRemarkAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Properties and characteristics of a remark that is associated with an aircraft status.
class AircraftStatusRemarkAbridged {
  AircraftStatusRemarkAbridged._(this._bc, this._bcOffset);
  factory AircraftStatusRemarkAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AircraftStatusRemarkAbridged> reader = _AircraftStatusRemarkAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The ID of the Aircraft Status to which this remark applies.
  ///  Example: /// Example: 388b1f64-ccff-4113-b049-3cf5542c2a42
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idAircraftStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the Aircraft Status Remark record from the originating system.
  ///  Example: /// Example: GDSSBL022307131714250077
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get altRmkId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The name of the remark.
  ///  Example: /// Example: DISCREPANCY - 202297501
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The text of the remark.
  ///  Example: /// Example: Remark text
  ///  Constraints: Minimum length = 1, Maximum length = 1024
  String? get text => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Time the remark was created in the originating system in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T15:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get timestamp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The name or ID of the external user that updated this remark in the originating system.
  ///  Example: /// Example: JOHN SMITH
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get lastUpdatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Time the remark was last updated in the originating system in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get lastUpdatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AircraftStatusRemarkAbridgedDataModeEnum get dataMode => AircraftStatusRemarkAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 34, 0));

  @override
  String toString() {
    return 'AircraftStatusRemarkAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idAircraftStatus: ${idAircraftStatus}, altRmkId: ${altRmkId}, name: ${name}, text: ${text}, timestamp: ${timestamp}, lastUpdatedBy: ${lastUpdatedBy}, lastUpdatedAt: ${lastUpdatedAt}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _AircraftStatusRemarkAbridgedReader extends fb.TableReader<AircraftStatusRemarkAbridged> {
  const _AircraftStatusRemarkAbridgedReader();

  @override
  AircraftStatusRemarkAbridged createObject(fb.BufferContext bc, int offset) => 
    AircraftStatusRemarkAbridged._(bc, offset);
}

class AircraftStatusRemarkAbridgedBuilder {
  AircraftStatusRemarkAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(16);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdAircraftStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAltRmkIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTextOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTimestampOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addLastUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addLastUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AircraftStatusRemarkAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(15, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AircraftStatusRemarkAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idAircraftStatus;
  final String? _altRmkId;
  final String? _name;
  final String? _text;
  final String? _timestamp;
  final String? _lastUpdatedBy;
  final String? _lastUpdatedAt;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final AircraftStatusRemarkAbridgedDataModeEnum? _dataMode;

  AircraftStatusRemarkAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idAircraftStatus,
    String? altRmkId,
    String? name,
    String? text,
    String? timestamp,
    String? lastUpdatedBy,
    String? lastUpdatedAt,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    AircraftStatusRemarkAbridgedDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idAircraftStatus = idAircraftStatus,
        _altRmkId = altRmkId,
        _name = name,
        _text = text,
        _timestamp = timestamp,
        _lastUpdatedBy = lastUpdatedBy,
        _lastUpdatedAt = lastUpdatedAt,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idAircraftStatusOffset = _idAircraftStatus == null ? null
        : fbBuilder.writeString(_idAircraftStatus!);
    final int? altRmkIdOffset = _altRmkId == null ? null
        : fbBuilder.writeString(_altRmkId!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? textOffset = _text == null ? null
        : fbBuilder.writeString(_text!);
    final int? timestampOffset = _timestamp == null ? null
        : fbBuilder.writeString(_timestamp!);
    final int? lastUpdatedByOffset = _lastUpdatedBy == null ? null
        : fbBuilder.writeString(_lastUpdatedBy!);
    final int? lastUpdatedAtOffset = _lastUpdatedAt == null ? null
        : fbBuilder.writeString(_lastUpdatedAt!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(16);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idAircraftStatusOffset);
    fbBuilder.addOffset(3, altRmkIdOffset);
    fbBuilder.addOffset(4, nameOffset);
    fbBuilder.addOffset(5, textOffset);
    fbBuilder.addOffset(6, timestampOffset);
    fbBuilder.addOffset(7, lastUpdatedByOffset);
    fbBuilder.addOffset(8, lastUpdatedAtOffset);
    fbBuilder.addOffset(9, createdAtOffset);
    fbBuilder.addOffset(10, createdByOffset);
    fbBuilder.addOffset(11, sourceDlOffset);
    fbBuilder.addOffset(12, sourceOffset);
    fbBuilder.addOffset(13, originOffset);
    fbBuilder.addOffset(14, origNetworkOffset);
    fbBuilder.addInt8(15, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
