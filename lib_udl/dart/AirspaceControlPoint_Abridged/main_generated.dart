// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// The controlPoint set describes any reference/controlling/rendevous point for a given airspace control means.
class AirspaceControlPointAbridged {
  AirspaceControlPointAbridged._(this._bc, this._bcOffset);
  factory AirspaceControlPointAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirspaceControlPointAbridged> reader = _AirspaceControlPointAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  One of possible control point type codes, such as CP, ER, OT, etc.
  ///  Example: /// Example: CP
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get ctrlPtType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The name applied to the control point, used as a reference.
  ///  Example: /// Example: APPLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get ctrlPtName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format that represents the location of the control point.
  ///  Example: /// Example: 203632N0594256E
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get ctrlPtLocation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The altitude of the control point.
  ///  Example: /// Example: BRFL:MSL-FL230
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get ctrlPtAltitude => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'AirspaceControlPointAbridged{ctrlPtType: ${ctrlPtType}, ctrlPtName: ${ctrlPtName}, ctrlPtLocation: ${ctrlPtLocation}, ctrlPtAltitude: ${ctrlPtAltitude}}';
  }
}

class _AirspaceControlPointAbridgedReader extends fb.TableReader<AirspaceControlPointAbridged> {
  const _AirspaceControlPointAbridgedReader();

  @override
  AirspaceControlPointAbridged createObject(fb.BufferContext bc, int offset) => 
    AirspaceControlPointAbridged._(bc, offset);
}

class AirspaceControlPointAbridgedBuilder {
  AirspaceControlPointAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addCtrlPtTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addCtrlPtNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCtrlPtLocationOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCtrlPtAltitudeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirspaceControlPointAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _ctrlPtType;
  final String? _ctrlPtName;
  final String? _ctrlPtLocation;
  final String? _ctrlPtAltitude;

  AirspaceControlPointAbridgedObjectBuilder({
    String? ctrlPtType,
    String? ctrlPtName,
    String? ctrlPtLocation,
    String? ctrlPtAltitude,
  })
      : _ctrlPtType = ctrlPtType,
        _ctrlPtName = ctrlPtName,
        _ctrlPtLocation = ctrlPtLocation,
        _ctrlPtAltitude = ctrlPtAltitude;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ctrlPtTypeOffset = _ctrlPtType == null ? null
        : fbBuilder.writeString(_ctrlPtType!);
    final int? ctrlPtNameOffset = _ctrlPtName == null ? null
        : fbBuilder.writeString(_ctrlPtName!);
    final int? ctrlPtLocationOffset = _ctrlPtLocation == null ? null
        : fbBuilder.writeString(_ctrlPtLocation!);
    final int? ctrlPtAltitudeOffset = _ctrlPtAltitude == null ? null
        : fbBuilder.writeString(_ctrlPtAltitude!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, ctrlPtTypeOffset);
    fbBuilder.addOffset(1, ctrlPtNameOffset);
    fbBuilder.addOffset(2, ctrlPtLocationOffset);
    fbBuilder.addOffset(3, ctrlPtAltitudeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
