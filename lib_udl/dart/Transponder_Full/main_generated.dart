// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class TransponderFullDataModeEnum {
  final int value;
  const TransponderFullDataModeEnum._(this.value);

  factory TransponderFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum TransponderFullDataModeEnum');
    }
    return result;
  }

  static TransponderFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : TransponderFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const TransponderFullDataModeEnum REAL = TransponderFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const TransponderFullDataModeEnum TEST = TransponderFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const TransponderFullDataModeEnum SIMULATED = TransponderFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const TransponderFullDataModeEnum EXERCISE = TransponderFullDataModeEnum._(3);
  static const Map<int, TransponderFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<TransponderFullDataModeEnum> reader = _TransponderFullDataModeEnumReader();

  @override
  String toString() {
    return 'TransponderFullDataModeEnum{value: $value}';
  }
}

class _TransponderFullDataModeEnumReader extends fb.Reader<TransponderFullDataModeEnum> {
  const _TransponderFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  TransponderFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      TransponderFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// A transponder receives and transmits radio signals at a prescribed frequency range. A communications satellite's transponder is the series of interconnected units that form a communications channel between the receiving and the transmitting antennas. It is mainly used in satellite communication to transfer the received signals.
class TransponderFull {
  TransponderFull._(this._bc, this._bcOffset);
  factory TransponderFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TransponderFull> reader = _TransponderFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: TRANSPONDER-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  ID of the parent Comm object for this transponder.
  ///  Example: /// Example: REF-COMM-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idComm => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Optional name of the transponder.
  ///  Example: /// Example: AA10
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Optional external network id as provided data source.
  ///  Example: /// Example: N-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get nid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Optional external transponder id as provided data source.
  ///  Example: /// Example: T-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get tid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Transponder Translation Factor. This is the frequency difference between the uplink received by a satellite, and the downlink transmitted back. It varies satellite to satellite dependent on the mission.
  ///  Example: /// Example: 1.53261520047876
  ///  Constraints: No constraints specified.
  double get ttf => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Symbol rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per time unit using a digitally modulated signal or a line code. Also measured in Hz.
  ///  Example: /// Example: 4.0
  ///  Constraints: No constraints specified.
  double get symbolRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get fec => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  ///  Transponder modulation, e.g. Auto, QPSK, 8PSK.
  ///  Example: /// Example: Auto
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get modulation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Format.
  ///  Example: /// Example: format
  ///  Constraints: Minimum length = 0, Maximum length = 45
  String? get format => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Transponder system, e.g. DVB-S, DVB-S2.
  ///  Example: /// Example: DVB-S
  ///  Constraints: Minimum length = 0, Maximum length = 45
  String? get system => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  TransponderFullDataModeEnum get dataMode => TransponderFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 34, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Collection of Channels for this Transponder.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get channels => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);

  @override
  String toString() {
    return 'TransponderFull{id: ${id}, idComm: ${idComm}, name: ${name}, classificationMarking: ${classificationMarking}, nid: ${nid}, tid: ${tid}, ttf: ${ttf}, symbolRate: ${symbolRate}, fec: ${fec}, modulation: ${modulation}, format: ${format}, system: ${system}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, channels: ${channels}}';
  }
}

class _TransponderFullReader extends fb.TableReader<TransponderFull> {
  const _TransponderFullReader();

  @override
  TransponderFull createObject(fb.BufferContext bc, int offset) => 
    TransponderFull._(bc, offset);
}

class TransponderFullBuilder {
  TransponderFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(21);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdCommOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addNidOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTidOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTtf(double? ttf) {
    fbBuilder.addFloat64(6, ttf);
    return fbBuilder.offset;
  }
  int addSymbolRate(double? symbolRate) {
    fbBuilder.addFloat64(7, symbolRate);
    return fbBuilder.offset;
  }
  int addFec(int? fec) {
    fbBuilder.addInt32(8, fec);
    return fbBuilder.offset;
  }
  int addModulationOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addFormatOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addSystemOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addDataMode(TransponderFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(15, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addChannelsOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TransponderFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idComm;
  final String? _name;
  final String? _classificationMarking;
  final String? _nid;
  final String? _tid;
  final double? _ttf;
  final double? _symbolRate;
  final int? _fec;
  final String? _modulation;
  final String? _format;
  final String? _system;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final TransponderFullDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final List<String>? _channels;

  TransponderFullObjectBuilder({
    String? id,
    String? idComm,
    String? name,
    String? classificationMarking,
    String? nid,
    String? tid,
    double? ttf,
    double? symbolRate,
    int? fec,
    String? modulation,
    String? format,
    String? system,
    String? source,
    String? origin,
    String? origNetwork,
    TransponderFullDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    List<String>? channels,
  })
      : _id = id,
        _idComm = idComm,
        _name = name,
        _classificationMarking = classificationMarking,
        _nid = nid,
        _tid = tid,
        _ttf = ttf,
        _symbolRate = symbolRate,
        _fec = fec,
        _modulation = modulation,
        _format = format,
        _system = system,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _channels = channels;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idCommOffset = _idComm == null ? null
        : fbBuilder.writeString(_idComm!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? nidOffset = _nid == null ? null
        : fbBuilder.writeString(_nid!);
    final int? tidOffset = _tid == null ? null
        : fbBuilder.writeString(_tid!);
    final int? modulationOffset = _modulation == null ? null
        : fbBuilder.writeString(_modulation!);
    final int? formatOffset = _format == null ? null
        : fbBuilder.writeString(_format!);
    final int? systemOffset = _system == null ? null
        : fbBuilder.writeString(_system!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? channelsOffset = _channels == null ? null
        : fbBuilder.writeList(_channels!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(21);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idCommOffset);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, classificationMarkingOffset);
    fbBuilder.addOffset(4, nidOffset);
    fbBuilder.addOffset(5, tidOffset);
    fbBuilder.addFloat64(6, _ttf);
    fbBuilder.addFloat64(7, _symbolRate);
    fbBuilder.addInt32(8, _fec);
    fbBuilder.addOffset(9, modulationOffset);
    fbBuilder.addOffset(10, formatOffset);
    fbBuilder.addOffset(11, systemOffset);
    fbBuilder.addOffset(12, sourceOffset);
    fbBuilder.addOffset(13, originOffset);
    fbBuilder.addOffset(14, origNetworkOffset);
    fbBuilder.addInt8(15, _dataMode?.value);
    fbBuilder.addOffset(16, createdAtOffset);
    fbBuilder.addOffset(17, createdByOffset);
    fbBuilder.addOffset(18, updatedAtOffset);
    fbBuilder.addOffset(19, updatedByOffset);
    fbBuilder.addOffset(20, channelsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
