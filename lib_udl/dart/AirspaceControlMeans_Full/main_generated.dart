// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AirspaceControlMeansFullCmShapeEnum {
  final int value;
  const AirspaceControlMeansFullCmShapeEnum._(this.value);

  factory AirspaceControlMeansFullCmShapeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AirspaceControlMeansFullCmShapeEnum');
    }
    return result;
  }

  static AirspaceControlMeansFullCmShapeEnum? _createOrNull(int? value) => 
      value == null ? null : AirspaceControlMeansFullCmShapeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 7;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const AirspaceControlMeansFullCmShapeEnum POLYARC = AirspaceControlMeansFullCmShapeEnum._(0);

  ///  No description available.
  static const AirspaceControlMeansFullCmShapeEnum E1TRACK = AirspaceControlMeansFullCmShapeEnum._(1);

  ///  No description available.
  static const AirspaceControlMeansFullCmShapeEnum POLYGON = AirspaceControlMeansFullCmShapeEnum._(2);

  ///  No description available.
  static const AirspaceControlMeansFullCmShapeEnum CIRCLE = AirspaceControlMeansFullCmShapeEnum._(3);

  ///  No description available.
  static const AirspaceControlMeansFullCmShapeEnum CORRIDOR = AirspaceControlMeansFullCmShapeEnum._(4);

  ///  No description available.
  static const AirspaceControlMeansFullCmShapeEnum APOINT = AirspaceControlMeansFullCmShapeEnum._(5);

  ///  No description available.
  static const AirspaceControlMeansFullCmShapeEnum AORBIT = AirspaceControlMeansFullCmShapeEnum._(6);

  ///  No description available.
  static const AirspaceControlMeansFullCmShapeEnum GEOLINE = AirspaceControlMeansFullCmShapeEnum._(7);
  static const Map<int, AirspaceControlMeansFullCmShapeEnum> values = {
    0: POLYARC,
    1: E1TRACK,
    2: POLYGON,
    3: CIRCLE,
    4: CORRIDOR,
    5: APOINT,
    6: AORBIT,
    7: GEOLINE};

  static const fb.Reader<AirspaceControlMeansFullCmShapeEnum> reader = _AirspaceControlMeansFullCmShapeEnumReader();

  @override
  String toString() {
    return 'AirspaceControlMeansFullCmShapeEnum{value: $value}';
  }
}

class _AirspaceControlMeansFullCmShapeEnumReader extends fb.Reader<AirspaceControlMeansFullCmShapeEnum> {
  const _AirspaceControlMeansFullCmShapeEnumReader();

  @override
  int get size => 1;

  @override
  AirspaceControlMeansFullCmShapeEnum read(fb.BufferContext bc, int offset) =>
      AirspaceControlMeansFullCmShapeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
class AirspaceControlMeansFull {
  AirspaceControlMeansFull._(this._bc, this._bcOffset);
  factory AirspaceControlMeansFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirspaceControlMeansFull> reader = _AirspaceControlMeansFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The code for the type of airspace control means.
  ///  Example: /// Example: ACM:ADAREA
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get cmType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Airspace control means name or designator.
  ///  Example: /// Example: DESIG:C34
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get cmId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Designates the geometric type that defines the airspace shape. One of CIRCLE, CORRIDOR, LINE, ORBIT, etc.
  ///  Example: /// Example: POLYARC
  ///  Constraints: Minimum length = 0, Maximum length = 8
  AirspaceControlMeansFullCmShapeEnum get cmShape => AirspaceControlMeansFullCmShapeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 8, 0));
  ///  Designates the means by which a defined airspace control means is to be used.
  ///  Example: /// Example: USE:AIRCOR
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get usage => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Unique Link 16 identifier assigned to the airspace control means.
  ///  Example: /// Example: F3356
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get link16Id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The altitude at or below which the vertical position of an aircraft is controlled by reference to true altitude.
  ///  Example: /// Example: 18000FT
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get transAltitude => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Specifies the geodetic datum by which the spatial coordinates of the controlled airspace are calculated, if different from the top level ACO datum.
  ///  Example: /// Example: NAR
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get geoDatumAlt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format. The fields coord0 and coord1 should be used in the specification of any airspace control shape that requires exactly one (1) or two (2) reference points for construction. For shapes requiring one reference point, For instance, when shape is set to "APOINT," this field is required and singluarly defines the shape. Similarly, this field is required to define the center point of a "CIRCLE" shape, or the "origin of bearing" for arcs.
  ///  Example: /// Example: 152345N0505657E
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get coord0 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format. The fields coord0 and coord1 should be used in the specification of any airspace control shape that requires exactly one (1) or two (2) reference points for construction. For shapes requiring one reference point, For instance, when shape is set to "APOINT," this field is required and singluarly defines the shape. Similarly, this field is required to define the center point of a "CIRCLE" shape, or the "origin of bearing" for arcs.
  ///  Example: /// Example: 1523N05057E
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get coord1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  A bearing measured from true North, in angular degrees. If cmShape is set to "POLYARC" or "RADARC," this field is required and is mapped to the "beginning" radial bearing parameter.
  ///  Example: /// Example: 330
  ///  Constraints: No constraints specified.
  double get bearing0 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  A bearing measured from true North, in angular degrees. If cmShape is set to "POLYARC" or "RADARC," this field is required and is mapped to the "ending" radial bearing parameter.
  ///  Example: /// Example: 160
  ///  Constraints: No constraints specified.
  double get bearing1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  A distance that represents a radial magnitude. If cmShape is set to "CIRCLE" or "POLYARC," one of either fields radMag0 or radMag1 is required. If cmShape is set to "RADARC," this field is required and maps to the "inner" radial magnitude arc limit. If provided, the field radMagUnit is required.
  ///  Example: /// Example: 30.04
  ///  Constraints: No constraints specified.
  double get radMag0 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  A distance that represents a radial magnitude. If cmShape is set to "CIRCLE" or "POLYARC," one of either fields radMag0 or radMag1 is required. If cmShape is set to "RADARC," this field is required and maps to the "outer" radial magnitude arc limit. If provided, the field radMagUnit is required.
  ///  Example: /// Example: 50.12
  ///  Constraints: No constraints specified.
  double get radMag1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Specifies the unit of length in which radial magnitudes are given. Use M for meters, KM for kilometers, or NM for nautical miles.
  ///  Example: /// Example: NM
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get radMagUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  A set of geospatial coordinates specified in DMS (Degrees, Minutes, Seconds) format which determine the vertices of a one or two dimensional geospatial shape. When shape is set to "POLYARC" or "POLYGON," this field is required as applied in the construction of the area boundary. If cmShape is set to "COORIDOR" or "GEOLINE," this field is required and can be interpreted as an ordered set of points along a path in space.
  ///  Example: /// Example: ['203632N0594256E', '155000N0594815E', '155000N0591343E']
  ///  Constraints: No constraints specified.
  List<String>? get polyCoord => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  Index of a segment in an airtrack, which is defined by an ordered set of points.
  ///  Example: /// Example: 99
  ///  Constraints: No constraints specified.
  int get trackLeg => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Given an ordered pair of spatial coordinates (p0, p1), defines a distance extending into the LEFT half-plane realtive to the direction of the vector that maps p0 to p1. If cmShape is set to "1TRACK", this field is required to define the width of the airspace track as measured from the left of the track segment line. If provided, the field widthUnit is required.
  ///  Example: /// Example: 5.2
  ///  Constraints: No constraints specified.
  double get widthLeft => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Given an ordered pair of spatial coordinates (p0, p1), defines a distance extending into the RIGHT half-plane relative to the direction of the vector that maps p0 to p1. If cmShape is set to "1TRACK", this field is required to define the width of the airspace track as measured from the right of the track segment line. If provided, the field widthUnit is required.
  ///  Example: /// Example: 10.4
  ///  Constraints: No constraints specified.
  double get widthRight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Used to describe the "side to side" distance of a target, object or area. If cmShape is set to "CORRIDOR" or "AORBIT", this field is required and is mapped to the width parameter. If provided, the field widthUnit is required.
  ///  Example: /// Example: 15.6
  ///  Constraints: No constraints specified.
  double get width => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Specifies the unit of length for which widths are given. Use M for meters, KM for kilometers, or NM for nautical miles.
  ///  Example: /// Example: KM
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get widthUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  An array of at least two alphanumeric symbols used to serially identify the corridor waypoints. If cmShape is set to "CORRIDOR," one of either corrWayPoints or polyCoord is required to specify the centerline of the corridor path.
  ///  Example: /// Example: ['POB', 'RDU', 'IAD']
  ///  Constraints: No constraints specified.
  List<String>? get corrWayPoints => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);
  ///  Orbit alignment look-up code. Can be C=Center, L=Left, R=Right.
  ///  Example: /// Example: C
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get orbitAlignment => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Description of the airspace vertical dimension.
  ///  Example: /// Example: BRRA:GL-100AGL
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get effVdim => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The timePeriod set describes the effective datetime for a given airspace control means.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get airspaceTimePeriod => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 50);
  ///  The controlPoint set describes any reference/controlling/rendevous point for a given airspace control means.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get airspaceControlPoint => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 52);
  ///  The commander responsible within a specified geographical area for the airspace control operation assigned to him.
  ///  Example: /// Example: RHEIN MAIN CP
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get ctrlAuth => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  The frequency for the airspace control authority. Can specify HZ, KHZ, MHZ, GHZ or a DESIG frequency designator code.
  ///  Example: /// Example: ['125.25MHZ']
  ///  Constraints: No constraints specified.
  List<String>? get ctrlAuthFreqs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 56);
  ///  Used to provide transit intstructions for the airspace control means.
  ///  Example: /// Example: SITUATION
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get genTextInd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  General informat detailing the transit instruction for the airspace control means.
  ///  Example: /// Example: 1. CAPACITY: MDM TK, 50 VEHICLE CONVOY. 2. CHOKE POINTS: EXIT 5
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get freeText => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);

  @override
  String toString() {
    return 'AirspaceControlMeansFull{cmType: ${cmType}, cmId: ${cmId}, cmShape: ${cmShape}, usage: ${usage}, link16Id: ${link16Id}, transAltitude: ${transAltitude}, geoDatumAlt: ${geoDatumAlt}, coord0: ${coord0}, coord1: ${coord1}, bearing0: ${bearing0}, bearing1: ${bearing1}, radMag0: ${radMag0}, radMag1: ${radMag1}, radMagUnit: ${radMagUnit}, polyCoord: ${polyCoord}, trackLeg: ${trackLeg}, widthLeft: ${widthLeft}, widthRight: ${widthRight}, width: ${width}, widthUnit: ${widthUnit}, corrWayPoints: ${corrWayPoints}, orbitAlignment: ${orbitAlignment}, effVdim: ${effVdim}, airspaceTimePeriod: ${airspaceTimePeriod}, airspaceControlPoint: ${airspaceControlPoint}, ctrlAuth: ${ctrlAuth}, ctrlAuthFreqs: ${ctrlAuthFreqs}, genTextInd: ${genTextInd}, freeText: ${freeText}}';
  }
}

class _AirspaceControlMeansFullReader extends fb.TableReader<AirspaceControlMeansFull> {
  const _AirspaceControlMeansFullReader();

  @override
  AirspaceControlMeansFull createObject(fb.BufferContext bc, int offset) => 
    AirspaceControlMeansFull._(bc, offset);
}

class AirspaceControlMeansFullBuilder {
  AirspaceControlMeansFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(29);
  }

  int addCmTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addCmIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCmShape(AirspaceControlMeansFullCmShapeEnum? cmShape) {
    fbBuilder.addInt8(2, cmShape?.value);
    return fbBuilder.offset;
  }
  int addUsageOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addLink16IdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTransAltitudeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addGeoDatumAltOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCoord0Offset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addCoord1Offset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addBearing0(double? bearing0) {
    fbBuilder.addFloat64(9, bearing0);
    return fbBuilder.offset;
  }
  int addBearing1(double? bearing1) {
    fbBuilder.addFloat64(10, bearing1);
    return fbBuilder.offset;
  }
  int addRadMag0(double? radMag0) {
    fbBuilder.addFloat64(11, radMag0);
    return fbBuilder.offset;
  }
  int addRadMag1(double? radMag1) {
    fbBuilder.addFloat64(12, radMag1);
    return fbBuilder.offset;
  }
  int addRadMagUnitOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addPolyCoordOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addTrackLeg(int? trackLeg) {
    fbBuilder.addInt32(15, trackLeg);
    return fbBuilder.offset;
  }
  int addWidthLeft(double? widthLeft) {
    fbBuilder.addFloat64(16, widthLeft);
    return fbBuilder.offset;
  }
  int addWidthRight(double? widthRight) {
    fbBuilder.addFloat64(17, widthRight);
    return fbBuilder.offset;
  }
  int addWidth(double? width) {
    fbBuilder.addFloat64(18, width);
    return fbBuilder.offset;
  }
  int addWidthUnitOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addCorrWayPointsOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addOrbitAlignmentOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addEffVdimOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addAirspaceTimePeriodOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addAirspaceControlPointOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addCtrlAuthOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addCtrlAuthFreqsOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addGenTextIndOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addFreeTextOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirspaceControlMeansFullObjectBuilder extends fb.ObjectBuilder {
  final String? _cmType;
  final String? _cmId;
  final AirspaceControlMeansFullCmShapeEnum? _cmShape;
  final String? _usage;
  final String? _link16Id;
  final String? _transAltitude;
  final String? _geoDatumAlt;
  final String? _coord0;
  final String? _coord1;
  final double? _bearing0;
  final double? _bearing1;
  final double? _radMag0;
  final double? _radMag1;
  final String? _radMagUnit;
  final List<String>? _polyCoord;
  final int? _trackLeg;
  final double? _widthLeft;
  final double? _widthRight;
  final double? _width;
  final String? _widthUnit;
  final List<String>? _corrWayPoints;
  final String? _orbitAlignment;
  final String? _effVdim;
  final List<String>? _airspaceTimePeriod;
  final List<String>? _airspaceControlPoint;
  final String? _ctrlAuth;
  final List<String>? _ctrlAuthFreqs;
  final String? _genTextInd;
  final String? _freeText;

  AirspaceControlMeansFullObjectBuilder({
    String? cmType,
    String? cmId,
    AirspaceControlMeansFullCmShapeEnum? cmShape,
    String? usage,
    String? link16Id,
    String? transAltitude,
    String? geoDatumAlt,
    String? coord0,
    String? coord1,
    double? bearing0,
    double? bearing1,
    double? radMag0,
    double? radMag1,
    String? radMagUnit,
    List<String>? polyCoord,
    int? trackLeg,
    double? widthLeft,
    double? widthRight,
    double? width,
    String? widthUnit,
    List<String>? corrWayPoints,
    String? orbitAlignment,
    String? effVdim,
    List<String>? airspaceTimePeriod,
    List<String>? airspaceControlPoint,
    String? ctrlAuth,
    List<String>? ctrlAuthFreqs,
    String? genTextInd,
    String? freeText,
  })
      : _cmType = cmType,
        _cmId = cmId,
        _cmShape = cmShape,
        _usage = usage,
        _link16Id = link16Id,
        _transAltitude = transAltitude,
        _geoDatumAlt = geoDatumAlt,
        _coord0 = coord0,
        _coord1 = coord1,
        _bearing0 = bearing0,
        _bearing1 = bearing1,
        _radMag0 = radMag0,
        _radMag1 = radMag1,
        _radMagUnit = radMagUnit,
        _polyCoord = polyCoord,
        _trackLeg = trackLeg,
        _widthLeft = widthLeft,
        _widthRight = widthRight,
        _width = width,
        _widthUnit = widthUnit,
        _corrWayPoints = corrWayPoints,
        _orbitAlignment = orbitAlignment,
        _effVdim = effVdim,
        _airspaceTimePeriod = airspaceTimePeriod,
        _airspaceControlPoint = airspaceControlPoint,
        _ctrlAuth = ctrlAuth,
        _ctrlAuthFreqs = ctrlAuthFreqs,
        _genTextInd = genTextInd,
        _freeText = freeText;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? cmTypeOffset = _cmType == null ? null
        : fbBuilder.writeString(_cmType!);
    final int? cmIdOffset = _cmId == null ? null
        : fbBuilder.writeString(_cmId!);
    final int? usageOffset = _usage == null ? null
        : fbBuilder.writeString(_usage!);
    final int? link16IdOffset = _link16Id == null ? null
        : fbBuilder.writeString(_link16Id!);
    final int? transAltitudeOffset = _transAltitude == null ? null
        : fbBuilder.writeString(_transAltitude!);
    final int? geoDatumAltOffset = _geoDatumAlt == null ? null
        : fbBuilder.writeString(_geoDatumAlt!);
    final int? coord0Offset = _coord0 == null ? null
        : fbBuilder.writeString(_coord0!);
    final int? coord1Offset = _coord1 == null ? null
        : fbBuilder.writeString(_coord1!);
    final int? radMagUnitOffset = _radMagUnit == null ? null
        : fbBuilder.writeString(_radMagUnit!);
    final int? polyCoordOffset = _polyCoord == null ? null
        : fbBuilder.writeList(_polyCoord!.map(fbBuilder.writeString).toList());
    final int? widthUnitOffset = _widthUnit == null ? null
        : fbBuilder.writeString(_widthUnit!);
    final int? corrWayPointsOffset = _corrWayPoints == null ? null
        : fbBuilder.writeList(_corrWayPoints!.map(fbBuilder.writeString).toList());
    final int? orbitAlignmentOffset = _orbitAlignment == null ? null
        : fbBuilder.writeString(_orbitAlignment!);
    final int? effVdimOffset = _effVdim == null ? null
        : fbBuilder.writeString(_effVdim!);
    final int? airspaceTimePeriodOffset = _airspaceTimePeriod == null ? null
        : fbBuilder.writeList(_airspaceTimePeriod!.map(fbBuilder.writeString).toList());
    final int? airspaceControlPointOffset = _airspaceControlPoint == null ? null
        : fbBuilder.writeList(_airspaceControlPoint!.map(fbBuilder.writeString).toList());
    final int? ctrlAuthOffset = _ctrlAuth == null ? null
        : fbBuilder.writeString(_ctrlAuth!);
    final int? ctrlAuthFreqsOffset = _ctrlAuthFreqs == null ? null
        : fbBuilder.writeList(_ctrlAuthFreqs!.map(fbBuilder.writeString).toList());
    final int? genTextIndOffset = _genTextInd == null ? null
        : fbBuilder.writeString(_genTextInd!);
    final int? freeTextOffset = _freeText == null ? null
        : fbBuilder.writeString(_freeText!);
    fbBuilder.startTable(29);
    fbBuilder.addOffset(0, cmTypeOffset);
    fbBuilder.addOffset(1, cmIdOffset);
    fbBuilder.addInt8(2, _cmShape?.value);
    fbBuilder.addOffset(3, usageOffset);
    fbBuilder.addOffset(4, link16IdOffset);
    fbBuilder.addOffset(5, transAltitudeOffset);
    fbBuilder.addOffset(6, geoDatumAltOffset);
    fbBuilder.addOffset(7, coord0Offset);
    fbBuilder.addOffset(8, coord1Offset);
    fbBuilder.addFloat64(9, _bearing0);
    fbBuilder.addFloat64(10, _bearing1);
    fbBuilder.addFloat64(11, _radMag0);
    fbBuilder.addFloat64(12, _radMag1);
    fbBuilder.addOffset(13, radMagUnitOffset);
    fbBuilder.addOffset(14, polyCoordOffset);
    fbBuilder.addInt32(15, _trackLeg);
    fbBuilder.addFloat64(16, _widthLeft);
    fbBuilder.addFloat64(17, _widthRight);
    fbBuilder.addFloat64(18, _width);
    fbBuilder.addOffset(19, widthUnitOffset);
    fbBuilder.addOffset(20, corrWayPointsOffset);
    fbBuilder.addOffset(21, orbitAlignmentOffset);
    fbBuilder.addOffset(22, effVdimOffset);
    fbBuilder.addOffset(23, airspaceTimePeriodOffset);
    fbBuilder.addOffset(24, airspaceControlPointOffset);
    fbBuilder.addOffset(25, ctrlAuthOffset);
    fbBuilder.addOffset(26, ctrlAuthFreqsOffset);
    fbBuilder.addOffset(27, genTextIndOffset);
    fbBuilder.addOffset(28, freeTextOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
