// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class ItemTrackingAbridgedDataModeEnum {
  final int value;
  const ItemTrackingAbridgedDataModeEnum._(this.value);

  factory ItemTrackingAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ItemTrackingAbridgedDataModeEnum');
    }
    return result;
  }

  static ItemTrackingAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : ItemTrackingAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const ItemTrackingAbridgedDataModeEnum REAL = ItemTrackingAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const ItemTrackingAbridgedDataModeEnum TEST = ItemTrackingAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const ItemTrackingAbridgedDataModeEnum SIMULATED = ItemTrackingAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const ItemTrackingAbridgedDataModeEnum EXERCISE = ItemTrackingAbridgedDataModeEnum._(3);
  static const Map<int, ItemTrackingAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<ItemTrackingAbridgedDataModeEnum> reader = _ItemTrackingAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'ItemTrackingAbridgedDataModeEnum{value: $value}';
  }
}

class _ItemTrackingAbridgedDataModeEnumReader extends fb.Reader<ItemTrackingAbridgedDataModeEnum> {
  const _ItemTrackingAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  ItemTrackingAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      ItemTrackingAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// No description available.
class ItemTrackingAbridged {
  ItemTrackingAbridged._(this._bc, this._bcOffset);
  factory ItemTrackingAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ItemTrackingAbridged> reader = _ItemTrackingAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The tracking identifier of an item or person. May be similar in representation of a barcode or UPC.
  ///  Example: /// Example: ABC1234
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get scanCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
  ///  Example: /// Example: bID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get scGenTool => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The ID of the scanner or input device.
  ///  Example: /// Example: 2051M
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get scannerId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-03-21T14:22:00.123Z
  ///  Constraints: No constraints specified.
  String? get ts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The UDL ID of the item this record is associated with.
  ///  Example: /// Example: 36054487-bcba-6e2d-4f3b-9f25738b2639
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idItem => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
  ///  Example: /// Example: CARGO
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  WGS84 latitude where the item was scanned, in degrees.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  WGS84 longitude where the item was scanned, in degrees.
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  The type of scan for tracking the item within it's journey  (e.g. IN, OUT, RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD, OTHER). For example, received and delivered are for when an item is received from or delivered to the end customer. In and out are for stops in between such as being loaded on an airplane or received at a warehouse.
  ///  Example: /// Example: TRANSIT
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get scanType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The United States distinguished visitor code of the person scanned, only applicable to people.
  ///  Example: /// Example: DV-4
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get dvCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Optional notes or comments about the tracking data.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Array of keys that may be associated with this tracked item.
  ///  Example: /// Example: ['tapeColor', 'hazmat']
  ///  Constraints: No constraints specified.
  List<String>? get keys => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  ///  Example: /// Example: ['yellow', 'false']
  ///  Constraints: No constraints specified.
  List<String>? get values => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2023-03-21T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  ItemTrackingAbridgedDataModeEnum get dataMode => ItemTrackingAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 46, 0));

  @override
  String toString() {
    return 'ItemTrackingAbridged{id: ${id}, classificationMarking: ${classificationMarking}, scanCode: ${scanCode}, scGenTool: ${scGenTool}, scannerId: ${scannerId}, ts: ${ts}, idItem: ${idItem}, type: ${type}, lat: ${lat}, lon: ${lon}, scanType: ${scanType}, dvCode: ${dvCode}, notes: ${notes}, keys: ${keys}, values: ${values}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _ItemTrackingAbridgedReader extends fb.TableReader<ItemTrackingAbridged> {
  const _ItemTrackingAbridgedReader();

  @override
  ItemTrackingAbridged createObject(fb.BufferContext bc, int offset) => 
    ItemTrackingAbridged._(bc, offset);
}

class ItemTrackingAbridgedBuilder {
  ItemTrackingAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(22);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addScanCodeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addScGenToolOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addScannerIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addIdItemOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(8, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(9, lon);
    return fbBuilder.offset;
  }
  int addScanTypeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addDvCodeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addKeysOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addDataMode(ItemTrackingAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(21, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ItemTrackingAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _scanCode;
  final String? _scGenTool;
  final String? _scannerId;
  final String? _ts;
  final String? _idItem;
  final String? _type;
  final double? _lat;
  final double? _lon;
  final String? _scanType;
  final String? _dvCode;
  final String? _notes;
  final List<String>? _keys;
  final List<String>? _values;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final ItemTrackingAbridgedDataModeEnum? _dataMode;

  ItemTrackingAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? scanCode,
    String? scGenTool,
    String? scannerId,
    String? ts,
    String? idItem,
    String? type,
    double? lat,
    double? lon,
    String? scanType,
    String? dvCode,
    String? notes,
    List<String>? keys,
    List<String>? values,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    ItemTrackingAbridgedDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _scanCode = scanCode,
        _scGenTool = scGenTool,
        _scannerId = scannerId,
        _ts = ts,
        _idItem = idItem,
        _type = type,
        _lat = lat,
        _lon = lon,
        _scanType = scanType,
        _dvCode = dvCode,
        _notes = notes,
        _keys = keys,
        _values = values,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? scanCodeOffset = _scanCode == null ? null
        : fbBuilder.writeString(_scanCode!);
    final int? scGenToolOffset = _scGenTool == null ? null
        : fbBuilder.writeString(_scGenTool!);
    final int? scannerIdOffset = _scannerId == null ? null
        : fbBuilder.writeString(_scannerId!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeString(_ts!);
    final int? idItemOffset = _idItem == null ? null
        : fbBuilder.writeString(_idItem!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? scanTypeOffset = _scanType == null ? null
        : fbBuilder.writeString(_scanType!);
    final int? dvCodeOffset = _dvCode == null ? null
        : fbBuilder.writeString(_dvCode!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? keysOffset = _keys == null ? null
        : fbBuilder.writeList(_keys!.map(fbBuilder.writeString).toList());
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(22);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, scanCodeOffset);
    fbBuilder.addOffset(3, scGenToolOffset);
    fbBuilder.addOffset(4, scannerIdOffset);
    fbBuilder.addOffset(5, tsOffset);
    fbBuilder.addOffset(6, idItemOffset);
    fbBuilder.addOffset(7, typeOffset);
    fbBuilder.addFloat64(8, _lat);
    fbBuilder.addFloat64(9, _lon);
    fbBuilder.addOffset(10, scanTypeOffset);
    fbBuilder.addOffset(11, dvCodeOffset);
    fbBuilder.addOffset(12, notesOffset);
    fbBuilder.addOffset(13, keysOffset);
    fbBuilder.addOffset(14, valuesOffset);
    fbBuilder.addOffset(15, createdAtOffset);
    fbBuilder.addOffset(16, createdByOffset);
    fbBuilder.addOffset(17, sourceDlOffset);
    fbBuilder.addOffset(18, sourceOffset);
    fbBuilder.addOffset(19, originOffset);
    fbBuilder.addOffset(20, origNetworkOffset);
    fbBuilder.addInt8(21, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
