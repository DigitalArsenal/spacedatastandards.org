// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class StageFullDataModeEnum {
  final int value;
  const StageFullDataModeEnum._(this.value);

  factory StageFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StageFullDataModeEnum');
    }
    return result;
  }

  static StageFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : StageFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const StageFullDataModeEnum REAL = StageFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const StageFullDataModeEnum TEST = StageFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const StageFullDataModeEnum SIMULATED = StageFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const StageFullDataModeEnum EXERCISE = StageFullDataModeEnum._(3);
  static const Map<int, StageFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<StageFullDataModeEnum> reader = _StageFullDataModeEnumReader();

  @override
  String toString() {
    return 'StageFullDataModeEnum{value: $value}';
  }
}

class _StageFullDataModeEnumReader extends fb.Reader<StageFullDataModeEnum> {
  const _StageFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  StageFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      StageFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.
class StageFull {
  StageFull._(this._bc, this._bcOffset);
  factory StageFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StageFull> reader = _StageFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: STAGE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Identifier of the launch vehicle record for this stage.
  ///  Example: /// Example: LAUNCHVEHICLE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idLaunchVehicle => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Identifier of the Engine record for this stage.
  ///  Example: /// Example: ENGINE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idEngine => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The stage number of this launch stage.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get stageNumber => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
  ///  Example: /// Example: Electrostatic Ion
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  ID of the organization that manufactures this launch stage.
  ///  Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get manufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The number of the specified engines on this launch stage.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numEngines => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Stage length in meters.
  ///  Example: /// Example: 25.13
  ///  Constraints: No constraints specified.
  double get length => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Stage maximum external diameter in meters.
  ///  Example: /// Example: 3.95
  ///  Constraints: No constraints specified.
  double get diameter => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Stage gross mass in kg.
  ///  Example: /// Example: 9956.1
  ///  Constraints: No constraints specified.
  double get mass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Engine vernier or additional engine type.
  ///  Example: /// Example: vernier
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get vernier => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Number of vernier or additional engines.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get numVernier => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Thrust of the stage main engine at sea level in kN.
  ///  Example: /// Example: 733.4
  ///  Constraints: No constraints specified.
  double get mainEngineThrustSeaLevel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Thrust of the stage main engine in a vacuum in kN.
  ///  Example: /// Example: 733.4
  ///  Constraints: No constraints specified.
  double get mainEngineThrustVacuum => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Total thrust of the stage at sea level in kN.
  ///  Example: /// Example: 733.4
  ///  Constraints: No constraints specified.
  double get thrustSeaLevel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Total thrust of the stage in a vacuum in kN.
  ///  Example: /// Example: 733.4
  ///  Constraints: No constraints specified.
  double get thrustVacuum => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Total burn time of the stage engines in seconds.
  ///  Example: /// Example: 256.3
  ///  Constraints: No constraints specified.
  double get burnTime => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Number of burns for the stage engines.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numBurns => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  Total burn time of the vernier or additional stage engines in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get vernierBurnTime => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Total number of burns of the vernier or additional stage engines.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  int get vernierNumBurns => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 44, 0);
  ///  Total thrust of one of the vernier or additional engines at sea level in kN.
  ///  Example: /// Example: 4.1
  ///  Constraints: No constraints specified.
  double get vernierThrustSeaLevel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Total thrust of one of the vernier or additional engines in a vacuum in kN.
  ///  Example: /// Example: 3.2
  ///  Constraints: No constraints specified.
  double get vernierThrustVacuum => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Number of launch stage elements used in this stage.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get numStageElements => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 50, 0);
  ///  Boolean indicating if this launch stage is reusable.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get reusable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 52, false);
  ///  Boolean indicating if this launch stage can be restarted.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get restartable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 54, false);
  ///  Control thruster 1 type.
  ///  Example: /// Example: controlThruster1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get controlThruster1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Number of type control thruster 1.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numControlThruster1 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 58, 0);
  ///  Control thruster 2 type.
  ///  Example: /// Example: controlThruster2
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get controlThruster2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Number of type control thruster 2.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numControlThruster2 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 62, 0);
  ///  Array of URLs of photos of the stage.
  ///  Example: /// Example: ['photoURL']
  ///  Constraints: No constraints specified.
  List<String>? get photoUrls => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 64);
  ///  Description/notes of the stage.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Description/notes of the stage avionics.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get avionicsNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 70);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  StageFullDataModeEnum get dataMode => StageFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 86, 0));
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get engine => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);

  @override
  String toString() {
    return 'StageFull{id: ${id}, idLaunchVehicle: ${idLaunchVehicle}, idEngine: ${idEngine}, classificationMarking: ${classificationMarking}, stageNumber: ${stageNumber}, type: ${type}, manufacturerOrgId: ${manufacturerOrgId}, numEngines: ${numEngines}, length: ${length}, diameter: ${diameter}, mass: ${mass}, vernier: ${vernier}, numVernier: ${numVernier}, mainEngineThrustSeaLevel: ${mainEngineThrustSeaLevel}, mainEngineThrustVacuum: ${mainEngineThrustVacuum}, thrustSeaLevel: ${thrustSeaLevel}, thrustVacuum: ${thrustVacuum}, burnTime: ${burnTime}, numBurns: ${numBurns}, vernierBurnTime: ${vernierBurnTime}, vernierNumBurns: ${vernierNumBurns}, vernierThrustSeaLevel: ${vernierThrustSeaLevel}, vernierThrustVacuum: ${vernierThrustVacuum}, numStageElements: ${numStageElements}, reusable: ${reusable}, restartable: ${restartable}, controlThruster1: ${controlThruster1}, numControlThruster1: ${numControlThruster1}, controlThruster2: ${controlThruster2}, numControlThruster2: ${numControlThruster2}, photoUrls: ${photoUrls}, notes: ${notes}, avionicsNotes: ${avionicsNotes}, tags: ${tags}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, engine: ${engine}}';
  }
}

class _StageFullReader extends fb.TableReader<StageFull> {
  const _StageFullReader();

  @override
  StageFull createObject(fb.BufferContext bc, int offset) => 
    StageFull._(bc, offset);
}

class StageFullBuilder {
  StageFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(43);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdLaunchVehicleOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdEngineOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStageNumber(int? stageNumber) {
    fbBuilder.addInt32(4, stageNumber);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addNumEngines(int? numEngines) {
    fbBuilder.addInt32(7, numEngines);
    return fbBuilder.offset;
  }
  int addLength(double? length) {
    fbBuilder.addFloat64(8, length);
    return fbBuilder.offset;
  }
  int addDiameter(double? diameter) {
    fbBuilder.addFloat64(9, diameter);
    return fbBuilder.offset;
  }
  int addMass(double? mass) {
    fbBuilder.addFloat64(10, mass);
    return fbBuilder.offset;
  }
  int addVernierOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addNumVernier(int? numVernier) {
    fbBuilder.addInt32(12, numVernier);
    return fbBuilder.offset;
  }
  int addMainEngineThrustSeaLevel(double? mainEngineThrustSeaLevel) {
    fbBuilder.addFloat64(13, mainEngineThrustSeaLevel);
    return fbBuilder.offset;
  }
  int addMainEngineThrustVacuum(double? mainEngineThrustVacuum) {
    fbBuilder.addFloat64(14, mainEngineThrustVacuum);
    return fbBuilder.offset;
  }
  int addThrustSeaLevel(double? thrustSeaLevel) {
    fbBuilder.addFloat64(15, thrustSeaLevel);
    return fbBuilder.offset;
  }
  int addThrustVacuum(double? thrustVacuum) {
    fbBuilder.addFloat64(16, thrustVacuum);
    return fbBuilder.offset;
  }
  int addBurnTime(double? burnTime) {
    fbBuilder.addFloat64(17, burnTime);
    return fbBuilder.offset;
  }
  int addNumBurns(int? numBurns) {
    fbBuilder.addInt32(18, numBurns);
    return fbBuilder.offset;
  }
  int addVernierBurnTime(double? vernierBurnTime) {
    fbBuilder.addFloat64(19, vernierBurnTime);
    return fbBuilder.offset;
  }
  int addVernierNumBurns(int? vernierNumBurns) {
    fbBuilder.addInt32(20, vernierNumBurns);
    return fbBuilder.offset;
  }
  int addVernierThrustSeaLevel(double? vernierThrustSeaLevel) {
    fbBuilder.addFloat64(21, vernierThrustSeaLevel);
    return fbBuilder.offset;
  }
  int addVernierThrustVacuum(double? vernierThrustVacuum) {
    fbBuilder.addFloat64(22, vernierThrustVacuum);
    return fbBuilder.offset;
  }
  int addNumStageElements(int? numStageElements) {
    fbBuilder.addInt32(23, numStageElements);
    return fbBuilder.offset;
  }
  int addReusable(bool? reusable) {
    fbBuilder.addBool(24, reusable);
    return fbBuilder.offset;
  }
  int addRestartable(bool? restartable) {
    fbBuilder.addBool(25, restartable);
    return fbBuilder.offset;
  }
  int addControlThruster1Offset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addNumControlThruster1(int? numControlThruster1) {
    fbBuilder.addInt32(27, numControlThruster1);
    return fbBuilder.offset;
  }
  int addControlThruster2Offset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addNumControlThruster2(int? numControlThruster2) {
    fbBuilder.addInt32(29, numControlThruster2);
    return fbBuilder.offset;
  }
  int addPhotoUrlsOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addAvionicsNotesOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addDataMode(StageFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(41, dataMode?.value);
    return fbBuilder.offset;
  }
  int addEngineOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StageFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idLaunchVehicle;
  final String? _idEngine;
  final String? _classificationMarking;
  final int? _stageNumber;
  final String? _type;
  final String? _manufacturerOrgId;
  final int? _numEngines;
  final double? _length;
  final double? _diameter;
  final double? _mass;
  final String? _vernier;
  final int? _numVernier;
  final double? _mainEngineThrustSeaLevel;
  final double? _mainEngineThrustVacuum;
  final double? _thrustSeaLevel;
  final double? _thrustVacuum;
  final double? _burnTime;
  final int? _numBurns;
  final double? _vernierBurnTime;
  final int? _vernierNumBurns;
  final double? _vernierThrustSeaLevel;
  final double? _vernierThrustVacuum;
  final int? _numStageElements;
  final bool? _reusable;
  final bool? _restartable;
  final String? _controlThruster1;
  final int? _numControlThruster1;
  final String? _controlThruster2;
  final int? _numControlThruster2;
  final List<String>? _photoUrls;
  final String? _notes;
  final String? _avionicsNotes;
  final List<String>? _tags;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final StageFullDataModeEnum? _dataMode;
  final String? _engine;

  StageFullObjectBuilder({
    String? id,
    String? idLaunchVehicle,
    String? idEngine,
    String? classificationMarking,
    int? stageNumber,
    String? type,
    String? manufacturerOrgId,
    int? numEngines,
    double? length,
    double? diameter,
    double? mass,
    String? vernier,
    int? numVernier,
    double? mainEngineThrustSeaLevel,
    double? mainEngineThrustVacuum,
    double? thrustSeaLevel,
    double? thrustVacuum,
    double? burnTime,
    int? numBurns,
    double? vernierBurnTime,
    int? vernierNumBurns,
    double? vernierThrustSeaLevel,
    double? vernierThrustVacuum,
    int? numStageElements,
    bool? reusable,
    bool? restartable,
    String? controlThruster1,
    int? numControlThruster1,
    String? controlThruster2,
    int? numControlThruster2,
    List<String>? photoUrls,
    String? notes,
    String? avionicsNotes,
    List<String>? tags,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    StageFullDataModeEnum? dataMode,
    String? engine,
  })
      : _id = id,
        _idLaunchVehicle = idLaunchVehicle,
        _idEngine = idEngine,
        _classificationMarking = classificationMarking,
        _stageNumber = stageNumber,
        _type = type,
        _manufacturerOrgId = manufacturerOrgId,
        _numEngines = numEngines,
        _length = length,
        _diameter = diameter,
        _mass = mass,
        _vernier = vernier,
        _numVernier = numVernier,
        _mainEngineThrustSeaLevel = mainEngineThrustSeaLevel,
        _mainEngineThrustVacuum = mainEngineThrustVacuum,
        _thrustSeaLevel = thrustSeaLevel,
        _thrustVacuum = thrustVacuum,
        _burnTime = burnTime,
        _numBurns = numBurns,
        _vernierBurnTime = vernierBurnTime,
        _vernierNumBurns = vernierNumBurns,
        _vernierThrustSeaLevel = vernierThrustSeaLevel,
        _vernierThrustVacuum = vernierThrustVacuum,
        _numStageElements = numStageElements,
        _reusable = reusable,
        _restartable = restartable,
        _controlThruster1 = controlThruster1,
        _numControlThruster1 = numControlThruster1,
        _controlThruster2 = controlThruster2,
        _numControlThruster2 = numControlThruster2,
        _photoUrls = photoUrls,
        _notes = notes,
        _avionicsNotes = avionicsNotes,
        _tags = tags,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _engine = engine;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idLaunchVehicleOffset = _idLaunchVehicle == null ? null
        : fbBuilder.writeString(_idLaunchVehicle!);
    final int? idEngineOffset = _idEngine == null ? null
        : fbBuilder.writeString(_idEngine!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? manufacturerOrgIdOffset = _manufacturerOrgId == null ? null
        : fbBuilder.writeString(_manufacturerOrgId!);
    final int? vernierOffset = _vernier == null ? null
        : fbBuilder.writeString(_vernier!);
    final int? controlThruster1Offset = _controlThruster1 == null ? null
        : fbBuilder.writeString(_controlThruster1!);
    final int? controlThruster2Offset = _controlThruster2 == null ? null
        : fbBuilder.writeString(_controlThruster2!);
    final int? photoUrlsOffset = _photoUrls == null ? null
        : fbBuilder.writeList(_photoUrls!.map(fbBuilder.writeString).toList());
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? avionicsNotesOffset = _avionicsNotes == null ? null
        : fbBuilder.writeString(_avionicsNotes!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? engineOffset = _engine == null ? null
        : fbBuilder.writeString(_engine!);
    fbBuilder.startTable(43);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idLaunchVehicleOffset);
    fbBuilder.addOffset(2, idEngineOffset);
    fbBuilder.addOffset(3, classificationMarkingOffset);
    fbBuilder.addInt32(4, _stageNumber);
    fbBuilder.addOffset(5, typeOffset);
    fbBuilder.addOffset(6, manufacturerOrgIdOffset);
    fbBuilder.addInt32(7, _numEngines);
    fbBuilder.addFloat64(8, _length);
    fbBuilder.addFloat64(9, _diameter);
    fbBuilder.addFloat64(10, _mass);
    fbBuilder.addOffset(11, vernierOffset);
    fbBuilder.addInt32(12, _numVernier);
    fbBuilder.addFloat64(13, _mainEngineThrustSeaLevel);
    fbBuilder.addFloat64(14, _mainEngineThrustVacuum);
    fbBuilder.addFloat64(15, _thrustSeaLevel);
    fbBuilder.addFloat64(16, _thrustVacuum);
    fbBuilder.addFloat64(17, _burnTime);
    fbBuilder.addInt32(18, _numBurns);
    fbBuilder.addFloat64(19, _vernierBurnTime);
    fbBuilder.addInt32(20, _vernierNumBurns);
    fbBuilder.addFloat64(21, _vernierThrustSeaLevel);
    fbBuilder.addFloat64(22, _vernierThrustVacuum);
    fbBuilder.addInt32(23, _numStageElements);
    fbBuilder.addBool(24, _reusable);
    fbBuilder.addBool(25, _restartable);
    fbBuilder.addOffset(26, controlThruster1Offset);
    fbBuilder.addInt32(27, _numControlThruster1);
    fbBuilder.addOffset(28, controlThruster2Offset);
    fbBuilder.addInt32(29, _numControlThruster2);
    fbBuilder.addOffset(30, photoUrlsOffset);
    fbBuilder.addOffset(31, notesOffset);
    fbBuilder.addOffset(32, avionicsNotesOffset);
    fbBuilder.addOffset(33, tagsOffset);
    fbBuilder.addOffset(34, createdAtOffset);
    fbBuilder.addOffset(35, createdByOffset);
    fbBuilder.addOffset(36, updatedAtOffset);
    fbBuilder.addOffset(37, updatedByOffset);
    fbBuilder.addOffset(38, sourceOffset);
    fbBuilder.addOffset(39, originOffset);
    fbBuilder.addOffset(40, origNetworkOffset);
    fbBuilder.addInt8(41, _dataMode?.value);
    fbBuilder.addOffset(42, engineOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
