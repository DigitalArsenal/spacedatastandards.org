// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class OnorbitThrusterStatusFullDataModeEnum {
  final int value;
  const OnorbitThrusterStatusFullDataModeEnum._(this.value);

  factory OnorbitThrusterStatusFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OnorbitThrusterStatusFullDataModeEnum');
    }
    return result;
  }

  static OnorbitThrusterStatusFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : OnorbitThrusterStatusFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const OnorbitThrusterStatusFullDataModeEnum REAL = OnorbitThrusterStatusFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const OnorbitThrusterStatusFullDataModeEnum TEST = OnorbitThrusterStatusFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const OnorbitThrusterStatusFullDataModeEnum SIMULATED = OnorbitThrusterStatusFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const OnorbitThrusterStatusFullDataModeEnum EXERCISE = OnorbitThrusterStatusFullDataModeEnum._(3);
  static const Map<int, OnorbitThrusterStatusFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<OnorbitThrusterStatusFullDataModeEnum> reader = _OnorbitThrusterStatusFullDataModeEnumReader();

  @override
  String toString() {
    return 'OnorbitThrusterStatusFullDataModeEnum{value: $value}';
  }
}

class _OnorbitThrusterStatusFullDataModeEnumReader extends fb.Reader<OnorbitThrusterStatusFullDataModeEnum> {
  const _OnorbitThrusterStatusFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  OnorbitThrusterStatusFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      OnorbitThrusterStatusFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Status information for OnorbitThruster objects.
class OnorbitThrusterStatusFull {
  OnorbitThrusterStatusFull._(this._bc, this._bcOffset);
  factory OnorbitThrusterStatusFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OnorbitThrusterStatusFull> reader = _OnorbitThrusterStatusFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: af103c-1f917dc-002c1bd
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
  ///  Example: /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idOnorbitThruster => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Identifier of this thruster.
  ///  Example: /// Example: REA1
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get statusTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Minimum available propellant mass for this thruster's type, in kilograms.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  double get propMassMin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Average available propellant mass for this thruster's type, in kilograms.
  ///  Example: /// Example: 907.6
  ///  Constraints: No constraints specified.
  double get propMassAvg => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Median available propellant mass for this thruster's type, in kilograms.
  ///  Example: /// Example: 200.1
  ///  Constraints: No constraints specified.
  double get propMassMedian => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Maximum available propellant mass for this thruster's type, in kilograms.
  ///  Example: /// Example: 2333.3
  ///  Constraints: No constraints specified.
  double get propMassMax => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Total fuel mass available for this thruster's type, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  double get fuelMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get fuelMassUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Total delta-velocity available for this thruster's type, in meters per second.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  double get totalDeltaV => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Minimum available delta-velocity for this thruster, in meters per second.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  double get minDeltaV => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Estimated available delta-velocity for this thruster, in meters per second.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get estDeltaV => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Maximum available delta-velocity for this thruster, in meters per second.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  double get maxDeltaV => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Maximum available thrust for this thruster, in newtons.
  ///  Example: /// Example: 22.1
  ///  Constraints: No constraints specified.
  double get thrustMax => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Specific impulse for this thruster, in seconds.
  ///  Example: /// Example: 300.1
  ///  Constraints: No constraints specified.
  double get isp => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Flag indicating if this thruster is operational.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get operational => const fb.BoolReader().vTableGet(_bc, _bcOffset, 38, false);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  OnorbitThrusterStatusFullDataModeEnum get dataMode => OnorbitThrusterStatusFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 50, 0));

  @override
  String toString() {
    return 'OnorbitThrusterStatusFull{id: ${id}, classificationMarking: ${classificationMarking}, idOnorbitThruster: ${idOnorbitThruster}, name: ${name}, statusTime: ${statusTime}, propMassMin: ${propMassMin}, propMassAvg: ${propMassAvg}, propMassMedian: ${propMassMedian}, propMassMax: ${propMassMax}, fuelMass: ${fuelMass}, fuelMassUnc: ${fuelMassUnc}, totalDeltaV: ${totalDeltaV}, minDeltaV: ${minDeltaV}, estDeltaV: ${estDeltaV}, maxDeltaV: ${maxDeltaV}, thrustMax: ${thrustMax}, isp: ${isp}, operational: ${operational}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _OnorbitThrusterStatusFullReader extends fb.TableReader<OnorbitThrusterStatusFull> {
  const _OnorbitThrusterStatusFullReader();

  @override
  OnorbitThrusterStatusFull createObject(fb.BufferContext bc, int offset) => 
    OnorbitThrusterStatusFull._(bc, offset);
}

class OnorbitThrusterStatusFullBuilder {
  OnorbitThrusterStatusFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(24);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdOnorbitThrusterOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStatusTimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPropMassMin(double? propMassMin) {
    fbBuilder.addFloat64(5, propMassMin);
    return fbBuilder.offset;
  }
  int addPropMassAvg(double? propMassAvg) {
    fbBuilder.addFloat64(6, propMassAvg);
    return fbBuilder.offset;
  }
  int addPropMassMedian(double? propMassMedian) {
    fbBuilder.addFloat64(7, propMassMedian);
    return fbBuilder.offset;
  }
  int addPropMassMax(double? propMassMax) {
    fbBuilder.addFloat64(8, propMassMax);
    return fbBuilder.offset;
  }
  int addFuelMass(double? fuelMass) {
    fbBuilder.addFloat64(9, fuelMass);
    return fbBuilder.offset;
  }
  int addFuelMassUnc(double? fuelMassUnc) {
    fbBuilder.addFloat64(10, fuelMassUnc);
    return fbBuilder.offset;
  }
  int addTotalDeltaV(double? totalDeltaV) {
    fbBuilder.addFloat64(11, totalDeltaV);
    return fbBuilder.offset;
  }
  int addMinDeltaV(double? minDeltaV) {
    fbBuilder.addFloat64(12, minDeltaV);
    return fbBuilder.offset;
  }
  int addEstDeltaV(double? estDeltaV) {
    fbBuilder.addFloat64(13, estDeltaV);
    return fbBuilder.offset;
  }
  int addMaxDeltaV(double? maxDeltaV) {
    fbBuilder.addFloat64(14, maxDeltaV);
    return fbBuilder.offset;
  }
  int addThrustMax(double? thrustMax) {
    fbBuilder.addFloat64(15, thrustMax);
    return fbBuilder.offset;
  }
  int addIsp(double? isp) {
    fbBuilder.addFloat64(16, isp);
    return fbBuilder.offset;
  }
  int addOperational(bool? operational) {
    fbBuilder.addBool(17, operational);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addDataMode(OnorbitThrusterStatusFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(23, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OnorbitThrusterStatusFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idOnorbitThruster;
  final String? _name;
  final String? _statusTime;
  final double? _propMassMin;
  final double? _propMassAvg;
  final double? _propMassMedian;
  final double? _propMassMax;
  final double? _fuelMass;
  final double? _fuelMassUnc;
  final double? _totalDeltaV;
  final double? _minDeltaV;
  final double? _estDeltaV;
  final double? _maxDeltaV;
  final double? _thrustMax;
  final double? _isp;
  final bool? _operational;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final OnorbitThrusterStatusFullDataModeEnum? _dataMode;

  OnorbitThrusterStatusFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idOnorbitThruster,
    String? name,
    String? statusTime,
    double? propMassMin,
    double? propMassAvg,
    double? propMassMedian,
    double? propMassMax,
    double? fuelMass,
    double? fuelMassUnc,
    double? totalDeltaV,
    double? minDeltaV,
    double? estDeltaV,
    double? maxDeltaV,
    double? thrustMax,
    double? isp,
    bool? operational,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    OnorbitThrusterStatusFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idOnorbitThruster = idOnorbitThruster,
        _name = name,
        _statusTime = statusTime,
        _propMassMin = propMassMin,
        _propMassAvg = propMassAvg,
        _propMassMedian = propMassMedian,
        _propMassMax = propMassMax,
        _fuelMass = fuelMass,
        _fuelMassUnc = fuelMassUnc,
        _totalDeltaV = totalDeltaV,
        _minDeltaV = minDeltaV,
        _estDeltaV = estDeltaV,
        _maxDeltaV = maxDeltaV,
        _thrustMax = thrustMax,
        _isp = isp,
        _operational = operational,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idOnorbitThrusterOffset = _idOnorbitThruster == null ? null
        : fbBuilder.writeString(_idOnorbitThruster!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? statusTimeOffset = _statusTime == null ? null
        : fbBuilder.writeString(_statusTime!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(24);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idOnorbitThrusterOffset);
    fbBuilder.addOffset(3, nameOffset);
    fbBuilder.addOffset(4, statusTimeOffset);
    fbBuilder.addFloat64(5, _propMassMin);
    fbBuilder.addFloat64(6, _propMassAvg);
    fbBuilder.addFloat64(7, _propMassMedian);
    fbBuilder.addFloat64(8, _propMassMax);
    fbBuilder.addFloat64(9, _fuelMass);
    fbBuilder.addFloat64(10, _fuelMassUnc);
    fbBuilder.addFloat64(11, _totalDeltaV);
    fbBuilder.addFloat64(12, _minDeltaV);
    fbBuilder.addFloat64(13, _estDeltaV);
    fbBuilder.addFloat64(14, _maxDeltaV);
    fbBuilder.addFloat64(15, _thrustMax);
    fbBuilder.addFloat64(16, _isp);
    fbBuilder.addBool(17, _operational);
    fbBuilder.addOffset(18, createdAtOffset);
    fbBuilder.addOffset(19, createdByOffset);
    fbBuilder.addOffset(20, sourceOffset);
    fbBuilder.addOffset(21, originOffset);
    fbBuilder.addOffset(22, origNetworkOffset);
    fbBuilder.addInt8(23, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
