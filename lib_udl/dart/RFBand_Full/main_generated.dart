// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class RfbandFullModeEnum {
  final int value;
  const RfbandFullModeEnum._(this.value);

  factory RfbandFullModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum RfbandFullModeEnum');
    }
    return result;
  }

  static RfbandFullModeEnum? _createOrNull(int? value) => 
      value == null ? null : RfbandFullModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const RfbandFullModeEnum TX = RfbandFullModeEnum._(0);

  ///  No description available.
  static const RfbandFullModeEnum RX = RfbandFullModeEnum._(1);
  static const Map<int, RfbandFullModeEnum> values = {
    0: TX,
    1: RX};

  static const fb.Reader<RfbandFullModeEnum> reader = _RfbandFullModeEnumReader();

  @override
  String toString() {
    return 'RfbandFullModeEnum{value: $value}';
  }
}

class _RfbandFullModeEnumReader extends fb.Reader<RfbandFullModeEnum> {
  const _RfbandFullModeEnumReader();

  @override
  int get size => 1;

  @override
  RfbandFullModeEnum read(fb.BufferContext bc, int offset) =>
      RfbandFullModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class RfbandFullPurposeEnum {
  final int value;
  const RfbandFullPurposeEnum._(this.value);

  factory RfbandFullPurposeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum RfbandFullPurposeEnum');
    }
    return result;
  }

  static RfbandFullPurposeEnum? _createOrNull(int? value) => 
      value == null ? null : RfbandFullPurposeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const RfbandFullPurposeEnum COMM = RfbandFullPurposeEnum._(0);

  ///  No description available.
  static const RfbandFullPurposeEnum TTC = RfbandFullPurposeEnum._(1);

  ///  No description available.
  static const RfbandFullPurposeEnum OPS = RfbandFullPurposeEnum._(2);

  ///  No description available.
  static const RfbandFullPurposeEnum OTHER = RfbandFullPurposeEnum._(3);
  static const Map<int, RfbandFullPurposeEnum> values = {
    0: COMM,
    1: TTC,
    2: OPS,
    3: OTHER};

  static const fb.Reader<RfbandFullPurposeEnum> reader = _RfbandFullPurposeEnumReader();

  @override
  String toString() {
    return 'RfbandFullPurposeEnum{value: $value}';
  }
}

class _RfbandFullPurposeEnumReader extends fb.Reader<RfbandFullPurposeEnum> {
  const _RfbandFullPurposeEnumReader();

  @override
  int get size => 1;

  @override
  RfbandFullPurposeEnum read(fb.BufferContext bc, int offset) =>
      RfbandFullPurposeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class RfbandFullPolarizationEnum {
  final int value;
  const RfbandFullPolarizationEnum._(this.value);

  factory RfbandFullPolarizationEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum RfbandFullPolarizationEnum');
    }
    return result;
  }

  static RfbandFullPolarizationEnum? _createOrNull(int? value) => 
      value == null ? null : RfbandFullPolarizationEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const RfbandFullPolarizationEnum H = RfbandFullPolarizationEnum._(0);

  ///  No description available.
  static const RfbandFullPolarizationEnum V = RfbandFullPolarizationEnum._(1);

  ///  No description available.
  static const RfbandFullPolarizationEnum R = RfbandFullPolarizationEnum._(2);

  ///  No description available.
  static const RfbandFullPolarizationEnum L = RfbandFullPolarizationEnum._(3);
  static const Map<int, RfbandFullPolarizationEnum> values = {
    0: H,
    1: V,
    2: R,
    3: L};

  static const fb.Reader<RfbandFullPolarizationEnum> reader = _RfbandFullPolarizationEnumReader();

  @override
  String toString() {
    return 'RfbandFullPolarizationEnum{value: $value}';
  }
}

class _RfbandFullPolarizationEnumReader extends fb.Reader<RfbandFullPolarizationEnum> {
  const _RfbandFullPolarizationEnumReader();

  @override
  int get size => 1;

  @override
  RfbandFullPolarizationEnum read(fb.BufferContext bc, int offset) =>
      RfbandFullPolarizationEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class RfbandFullDataModeEnum {
  final int value;
  const RfbandFullDataModeEnum._(this.value);

  factory RfbandFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum RfbandFullDataModeEnum');
    }
    return result;
  }

  static RfbandFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : RfbandFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const RfbandFullDataModeEnum REAL = RfbandFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const RfbandFullDataModeEnum TEST = RfbandFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const RfbandFullDataModeEnum SIMULATED = RfbandFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const RfbandFullDataModeEnum EXERCISE = RfbandFullDataModeEnum._(3);
  static const Map<int, RfbandFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<RfbandFullDataModeEnum> reader = _RfbandFullDataModeEnumReader();

  @override
  String toString() {
    return 'RfbandFullDataModeEnum{value: $value}';
  }
}

class _RfbandFullDataModeEnumReader extends fb.Reader<RfbandFullDataModeEnum> {
  const _RfbandFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  RfbandFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      RfbandFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.
class RfbandFull {
  RfbandFull._(this._bc, this._bcOffset);
  factory RfbandFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RfbandFull> reader = _RfbandFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: RFBAND-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Unique identifier of the parent Entity which uses this band.
  ///  Example: /// Example: ENTITY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idEntity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  RF Band name.
  ///  Example: /// Example: BAND_NAME
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
  ///  Example: /// Example: Ku
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get band => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  RF Band mode (e.g. TX, RX).
  ///  Example: /// Example: TX
  ///  Constraints: Minimum length = 0, Maximum length = 4
  RfbandFullModeEnum get mode => RfbandFullModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 14, 0));
  ///  Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
  ///  Example: /// Example: TTC
  ///  Constraints: Minimum length = 0, Maximum length = 16
  RfbandFullPurposeEnum get purpose => RfbandFullPurposeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 16, 0));
  ///  Start/minimum of transmit RF frequency range, if applicable, in Mhz.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  double get freqMin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  End/maximum of transmit RF frequency range, if applicable, in Mhz.
  ///  Example: /// Example: 2000.23
  ///  Constraints: No constraints specified.
  double get freqMax => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Center frequency of RF frequency range, if applicable, in Mhz.
  ///  Example: /// Example: 1000.23
  ///  Constraints: No constraints specified.
  double get centerFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  RF Range maximum gain, in dBi.
  ///  Example: /// Example: 120.23
  ///  Constraints: No constraints specified.
  double get peakGain => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  RF Range edge gain, in dBi.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  double get edgeGain => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  RF Band frequency range bandwidth in Mhz.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  double get bandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get beamwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.
  ///  Example: /// Example: H
  ///  Constraints: Minimum length = 0, Maximum length = 4
  RfbandFullPolarizationEnum get polarization => RfbandFullPolarizationEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 32, 0));
  ///  Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
  ///  Example: /// Example: 2.23
  ///  Constraints: No constraints specified.
  double get erp => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
  ///  Example: /// Example: 2.23
  ///  Constraints: No constraints specified.
  double get eirp => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  RfbandFullDataModeEnum get dataMode => RfbandFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 42, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);

  @override
  String toString() {
    return 'RfbandFull{id: ${id}, idEntity: ${idEntity}, classificationMarking: ${classificationMarking}, name: ${name}, band: ${band}, mode: ${mode}, purpose: ${purpose}, freqMin: ${freqMin}, freqMax: ${freqMax}, centerFreq: ${centerFreq}, peakGain: ${peakGain}, edgeGain: ${edgeGain}, bandwidth: ${bandwidth}, beamwidth: ${beamwidth}, polarization: ${polarization}, erp: ${erp}, eirp: ${eirp}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, origNetwork: ${origNetwork}}';
  }
}

class _RfbandFullReader extends fb.TableReader<RfbandFull> {
  const _RfbandFullReader();

  @override
  RfbandFull createObject(fb.BufferContext bc, int offset) => 
    RfbandFull._(bc, offset);
}

class RfbandFullBuilder {
  RfbandFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(25);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdEntityOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addBandOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMode(RfbandFullModeEnum? mode) {
    fbBuilder.addInt8(5, mode?.value);
    return fbBuilder.offset;
  }
  int addPurpose(RfbandFullPurposeEnum? purpose) {
    fbBuilder.addInt8(6, purpose?.value);
    return fbBuilder.offset;
  }
  int addFreqMin(double? freqMin) {
    fbBuilder.addFloat64(7, freqMin);
    return fbBuilder.offset;
  }
  int addFreqMax(double? freqMax) {
    fbBuilder.addFloat64(8, freqMax);
    return fbBuilder.offset;
  }
  int addCenterFreq(double? centerFreq) {
    fbBuilder.addFloat64(9, centerFreq);
    return fbBuilder.offset;
  }
  int addPeakGain(double? peakGain) {
    fbBuilder.addFloat64(10, peakGain);
    return fbBuilder.offset;
  }
  int addEdgeGain(double? edgeGain) {
    fbBuilder.addFloat64(11, edgeGain);
    return fbBuilder.offset;
  }
  int addBandwidth(double? bandwidth) {
    fbBuilder.addFloat64(12, bandwidth);
    return fbBuilder.offset;
  }
  int addBeamwidth(double? beamwidth) {
    fbBuilder.addFloat64(13, beamwidth);
    return fbBuilder.offset;
  }
  int addPolarization(RfbandFullPolarizationEnum? polarization) {
    fbBuilder.addInt8(14, polarization?.value);
    return fbBuilder.offset;
  }
  int addErp(double? erp) {
    fbBuilder.addFloat64(15, erp);
    return fbBuilder.offset;
  }
  int addEirp(double? eirp) {
    fbBuilder.addFloat64(16, eirp);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addDataMode(RfbandFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(19, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RfbandFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idEntity;
  final String? _classificationMarking;
  final String? _name;
  final String? _band;
  final RfbandFullModeEnum? _mode;
  final RfbandFullPurposeEnum? _purpose;
  final double? _freqMin;
  final double? _freqMax;
  final double? _centerFreq;
  final double? _peakGain;
  final double? _edgeGain;
  final double? _bandwidth;
  final double? _beamwidth;
  final RfbandFullPolarizationEnum? _polarization;
  final double? _erp;
  final double? _eirp;
  final String? _source;
  final String? _origin;
  final RfbandFullDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _origNetwork;

  RfbandFullObjectBuilder({
    String? id,
    String? idEntity,
    String? classificationMarking,
    String? name,
    String? band,
    RfbandFullModeEnum? mode,
    RfbandFullPurposeEnum? purpose,
    double? freqMin,
    double? freqMax,
    double? centerFreq,
    double? peakGain,
    double? edgeGain,
    double? bandwidth,
    double? beamwidth,
    RfbandFullPolarizationEnum? polarization,
    double? erp,
    double? eirp,
    String? source,
    String? origin,
    RfbandFullDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? origNetwork,
  })
      : _id = id,
        _idEntity = idEntity,
        _classificationMarking = classificationMarking,
        _name = name,
        _band = band,
        _mode = mode,
        _purpose = purpose,
        _freqMin = freqMin,
        _freqMax = freqMax,
        _centerFreq = centerFreq,
        _peakGain = peakGain,
        _edgeGain = edgeGain,
        _bandwidth = bandwidth,
        _beamwidth = beamwidth,
        _polarization = polarization,
        _erp = erp,
        _eirp = eirp,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idEntityOffset = _idEntity == null ? null
        : fbBuilder.writeString(_idEntity!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? bandOffset = _band == null ? null
        : fbBuilder.writeString(_band!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(25);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idEntityOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, nameOffset);
    fbBuilder.addOffset(4, bandOffset);
    fbBuilder.addInt8(5, _mode?.value);
    fbBuilder.addInt8(6, _purpose?.value);
    fbBuilder.addFloat64(7, _freqMin);
    fbBuilder.addFloat64(8, _freqMax);
    fbBuilder.addFloat64(9, _centerFreq);
    fbBuilder.addFloat64(10, _peakGain);
    fbBuilder.addFloat64(11, _edgeGain);
    fbBuilder.addFloat64(12, _bandwidth);
    fbBuilder.addFloat64(13, _beamwidth);
    fbBuilder.addInt8(14, _polarization?.value);
    fbBuilder.addFloat64(15, _erp);
    fbBuilder.addFloat64(16, _eirp);
    fbBuilder.addOffset(17, sourceOffset);
    fbBuilder.addOffset(18, originOffset);
    fbBuilder.addInt8(19, _dataMode?.value);
    fbBuilder.addOffset(20, createdAtOffset);
    fbBuilder.addOffset(21, createdByOffset);
    fbBuilder.addOffset(22, updatedAtOffset);
    fbBuilder.addOffset(23, updatedByOffset);
    fbBuilder.addOffset(24, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
