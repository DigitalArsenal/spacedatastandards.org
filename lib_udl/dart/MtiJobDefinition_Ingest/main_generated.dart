// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// The means for the platform to pass information pertaining to the sensor job that will be performed and details of the location parameters (terrain elevation model and geoid model) used in the measurement.
class MtiJobDefinitionIngest {
  MtiJobDefinitionIngest._(this._bc, this._bcOffset);
  factory MtiJobDefinitionIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MtiJobDefinitionIngest> reader = _MtiJobDefinitionIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  A platform assigned number identifying the specific request or task to which the specific dwell pertains.
  ///  Example: /// Example: 1234567890
  ///  Constraints: No constraints specified.
  int get j1 => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  ///  The type of sensor or the platform.
  ///  Example: /// Example: TYPE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get j2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Identifier of the particular variant of the sensor type.
  ///  Example: /// Example: J3-ID
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get j3 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Flag field indicating whether filtering has been applied to the targets detected within the dwell area.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get j4 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Priority of this tasking request relative to all other active tasking requests scheduled for execution on the specified platform.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get j5 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  North-South position of the first corner (Point A) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get j6 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///   East-West position of the first corner (Point A) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get j7 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///   North-South position of the second corner (Point B) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get j8 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  East-West position of the second corner (Point B) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get j9 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  North-South position of the third corner (Point C) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get j10 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  East-West position of the third corner (Point C) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get j11 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  North-South position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get j12 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  East-West position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get j13 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Mode in which the radar will operate for the given job ID.
  ///  Example: /// Example: MODE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get j14 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The nominal revisit interval for the job ID, expressed in deciseconds.  Value of zero, indicates that the sensor is not revisiting the previous area.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  int get j15 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Nominal estimate of the standard deviation in the estimated horizontal (along track) sensor location, expressed in decimeters.   measured along the sensor track direction defined in the Dwell segment.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  int get j16 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Nominal estimate of the standard deviation in the estimated horizontal sensor location, measured orthogonal to the track direction, expressed in decimeters.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  int get j17 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 36, 0);
  ///  Nominal estimate of the standard deviation of the measured sensor altitude, expressed in decimeters.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  int get j18 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 38, 0);
  ///  Standard deviation of the estimate of sensor track heading, expressed in degrees.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get j19 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  Nominal standard deviation of the estimate of sensor speed, expressed in millimeters per second.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get j20 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 42, 0);
  ///  Nominal standard deviation of the slant range of the reported detection, expressed in centimeters.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get j21 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 44, 0);
  ///  Nominal standard deviation of the measured cross angle to the reported detection, expressed in degrees.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get j22 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Nominal standard deviation of the velocity line-of-sight component, expressed in centimeters per second.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get j23 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 48, 0);
  ///  Nominal minimum velocity component along the line of sight, which can be detected by the sensor, expressed in decimeters per second.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get j24 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 50, 0);
  ///  Nominal probability that an unobscured ten square-meter target will be detected within the given area of surveillance.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get j25 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  The expected density of False Alarms (FA), expressed as the negative of the decibel value.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get j26 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  The terrain elevation model used for developing the target reports.
  ///  Example: /// Example: MODEL
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get j27 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  The geoid model used for developing the target reports.
  ///  Example: /// Example: MODEL
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get j28 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);

  @override
  String toString() {
    return 'MtiJobDefinitionIngest{j1: ${j1}, j2: ${j2}, j3: ${j3}, j4: ${j4}, j5: ${j5}, j6: ${j6}, j7: ${j7}, j8: ${j8}, j9: ${j9}, j10: ${j10}, j11: ${j11}, j12: ${j12}, j13: ${j13}, j14: ${j14}, j15: ${j15}, j16: ${j16}, j17: ${j17}, j18: ${j18}, j19: ${j19}, j20: ${j20}, j21: ${j21}, j22: ${j22}, j23: ${j23}, j24: ${j24}, j25: ${j25}, j26: ${j26}, j27: ${j27}, j28: ${j28}}';
  }
}

class _MtiJobDefinitionIngestReader extends fb.TableReader<MtiJobDefinitionIngest> {
  const _MtiJobDefinitionIngestReader();

  @override
  MtiJobDefinitionIngest createObject(fb.BufferContext bc, int offset) => 
    MtiJobDefinitionIngest._(bc, offset);
}

class MtiJobDefinitionIngestBuilder {
  MtiJobDefinitionIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(28);
  }

  int addJ1(int? j1) {
    fbBuilder.addInt64(0, j1);
    return fbBuilder.offset;
  }
  int addJ2Offset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addJ3Offset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addJ4(int? j4) {
    fbBuilder.addInt32(3, j4);
    return fbBuilder.offset;
  }
  int addJ5(int? j5) {
    fbBuilder.addInt32(4, j5);
    return fbBuilder.offset;
  }
  int addJ6(double? j6) {
    fbBuilder.addFloat64(5, j6);
    return fbBuilder.offset;
  }
  int addJ7(double? j7) {
    fbBuilder.addFloat64(6, j7);
    return fbBuilder.offset;
  }
  int addJ8(double? j8) {
    fbBuilder.addFloat64(7, j8);
    return fbBuilder.offset;
  }
  int addJ9(double? j9) {
    fbBuilder.addFloat64(8, j9);
    return fbBuilder.offset;
  }
  int addJ10(double? j10) {
    fbBuilder.addFloat64(9, j10);
    return fbBuilder.offset;
  }
  int addJ11(double? j11) {
    fbBuilder.addFloat64(10, j11);
    return fbBuilder.offset;
  }
  int addJ12(double? j12) {
    fbBuilder.addFloat64(11, j12);
    return fbBuilder.offset;
  }
  int addJ13(double? j13) {
    fbBuilder.addFloat64(12, j13);
    return fbBuilder.offset;
  }
  int addJ14Offset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addJ15(int? j15) {
    fbBuilder.addInt32(14, j15);
    return fbBuilder.offset;
  }
  int addJ16(int? j16) {
    fbBuilder.addInt32(15, j16);
    return fbBuilder.offset;
  }
  int addJ17(int? j17) {
    fbBuilder.addInt32(16, j17);
    return fbBuilder.offset;
  }
  int addJ18(int? j18) {
    fbBuilder.addInt32(17, j18);
    return fbBuilder.offset;
  }
  int addJ19(int? j19) {
    fbBuilder.addInt32(18, j19);
    return fbBuilder.offset;
  }
  int addJ20(int? j20) {
    fbBuilder.addInt32(19, j20);
    return fbBuilder.offset;
  }
  int addJ21(int? j21) {
    fbBuilder.addInt32(20, j21);
    return fbBuilder.offset;
  }
  int addJ22(double? j22) {
    fbBuilder.addFloat64(21, j22);
    return fbBuilder.offset;
  }
  int addJ23(int? j23) {
    fbBuilder.addInt32(22, j23);
    return fbBuilder.offset;
  }
  int addJ24(int? j24) {
    fbBuilder.addInt32(23, j24);
    return fbBuilder.offset;
  }
  int addJ25(int? j25) {
    fbBuilder.addInt32(24, j25);
    return fbBuilder.offset;
  }
  int addJ26(int? j26) {
    fbBuilder.addInt32(25, j26);
    return fbBuilder.offset;
  }
  int addJ27Offset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addJ28Offset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MtiJobDefinitionIngestObjectBuilder extends fb.ObjectBuilder {
  final int? _j1;
  final String? _j2;
  final String? _j3;
  final int? _j4;
  final int? _j5;
  final double? _j6;
  final double? _j7;
  final double? _j8;
  final double? _j9;
  final double? _j10;
  final double? _j11;
  final double? _j12;
  final double? _j13;
  final String? _j14;
  final int? _j15;
  final int? _j16;
  final int? _j17;
  final int? _j18;
  final int? _j19;
  final int? _j20;
  final int? _j21;
  final double? _j22;
  final int? _j23;
  final int? _j24;
  final int? _j25;
  final int? _j26;
  final String? _j27;
  final String? _j28;

  MtiJobDefinitionIngestObjectBuilder({
    int? j1,
    String? j2,
    String? j3,
    int? j4,
    int? j5,
    double? j6,
    double? j7,
    double? j8,
    double? j9,
    double? j10,
    double? j11,
    double? j12,
    double? j13,
    String? j14,
    int? j15,
    int? j16,
    int? j17,
    int? j18,
    int? j19,
    int? j20,
    int? j21,
    double? j22,
    int? j23,
    int? j24,
    int? j25,
    int? j26,
    String? j27,
    String? j28,
  })
      : _j1 = j1,
        _j2 = j2,
        _j3 = j3,
        _j4 = j4,
        _j5 = j5,
        _j6 = j6,
        _j7 = j7,
        _j8 = j8,
        _j9 = j9,
        _j10 = j10,
        _j11 = j11,
        _j12 = j12,
        _j13 = j13,
        _j14 = j14,
        _j15 = j15,
        _j16 = j16,
        _j17 = j17,
        _j18 = j18,
        _j19 = j19,
        _j20 = j20,
        _j21 = j21,
        _j22 = j22,
        _j23 = j23,
        _j24 = j24,
        _j25 = j25,
        _j26 = j26,
        _j27 = j27,
        _j28 = j28;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? j2Offset = _j2 == null ? null
        : fbBuilder.writeString(_j2!);
    final int? j3Offset = _j3 == null ? null
        : fbBuilder.writeString(_j3!);
    final int? j14Offset = _j14 == null ? null
        : fbBuilder.writeString(_j14!);
    final int? j27Offset = _j27 == null ? null
        : fbBuilder.writeString(_j27!);
    final int? j28Offset = _j28 == null ? null
        : fbBuilder.writeString(_j28!);
    fbBuilder.startTable(28);
    fbBuilder.addInt64(0, _j1);
    fbBuilder.addOffset(1, j2Offset);
    fbBuilder.addOffset(2, j3Offset);
    fbBuilder.addInt32(3, _j4);
    fbBuilder.addInt32(4, _j5);
    fbBuilder.addFloat64(5, _j6);
    fbBuilder.addFloat64(6, _j7);
    fbBuilder.addFloat64(7, _j8);
    fbBuilder.addFloat64(8, _j9);
    fbBuilder.addFloat64(9, _j10);
    fbBuilder.addFloat64(10, _j11);
    fbBuilder.addFloat64(11, _j12);
    fbBuilder.addFloat64(12, _j13);
    fbBuilder.addOffset(13, j14Offset);
    fbBuilder.addInt32(14, _j15);
    fbBuilder.addInt32(15, _j16);
    fbBuilder.addInt32(16, _j17);
    fbBuilder.addInt32(17, _j18);
    fbBuilder.addInt32(18, _j19);
    fbBuilder.addInt32(19, _j20);
    fbBuilder.addInt32(20, _j21);
    fbBuilder.addFloat64(21, _j22);
    fbBuilder.addInt32(22, _j23);
    fbBuilder.addInt32(23, _j24);
    fbBuilder.addInt32(24, _j25);
    fbBuilder.addInt32(25, _j26);
    fbBuilder.addOffset(26, j27Offset);
    fbBuilder.addOffset(27, j28Offset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
