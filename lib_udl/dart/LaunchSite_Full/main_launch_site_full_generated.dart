// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library launch_site_full;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './main_generated.dart' as ;

///  Model representation of known launch sites.
class LaunchSiteFull {
  LaunchSiteFull._(this._bc, this._bcOffset);
  factory LaunchSiteFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LaunchSiteFull> reader = _LaunchSiteFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: LAUNCHSITE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Launch site code.
  ///  Example: SAN MARCO
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get code => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Abbreviated short name for the launch site.
  ///  Example: SNMLP
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get shortCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Alternate launch site code.
  ///  Example: 35
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get altCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the parent site associated with this launch site.
  ///  Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSite => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Launch site name.
  ///  Example: Example launch site name
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Source of the data.
  ///  Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
  ///  Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  LaunchSiteFullDataModeEnum get dataMode => LaunchSiteFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 32, 0));
  ///  Read-only collection of additional LaunchSiteDetails by various sources for this launch site, ignored on create/update. These details must be created separately via the /udl/launchsitedetails operations.
  ///  Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get launchSiteDetails => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);

  @override
  String toString() {
    return 'LaunchSiteFull{id: ${id}, classificationMarking: ${classificationMarking}, code: ${code}, shortCode: ${shortCode}, altCode: ${altCode}, idSite: ${idSite}, name: ${name}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, launchSiteDetails: ${launchSiteDetails}}';
  }
}

class _LaunchSiteFullReader extends fb.TableReader<LaunchSiteFull> {
  const _LaunchSiteFullReader();

  @override
  LaunchSiteFull createObject(fb.BufferContext bc, int offset) => 
    LaunchSiteFull._(bc, offset);
}

class LaunchSiteFullBuilder {
  LaunchSiteFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(16);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCodeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addShortCodeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addAltCodeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdSiteOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addDataMode(LaunchSiteFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(14, dataMode?.value);
    return fbBuilder.offset;
  }
  int addLaunchSiteDetailsOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LaunchSiteFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _code;
  final String? _shortCode;
  final String? _altCode;
  final String? _idSite;
  final String? _name;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final LaunchSiteFullDataModeEnum? _dataMode;
  final List<String>? _launchSiteDetails;

  LaunchSiteFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? code,
    String? shortCode,
    String? altCode,
    String? idSite,
    String? name,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    LaunchSiteFullDataModeEnum? dataMode,
    List<String>? launchSiteDetails,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _code = code,
        _shortCode = shortCode,
        _altCode = altCode,
        _idSite = idSite,
        _name = name,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _launchSiteDetails = launchSiteDetails;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? codeOffset = _code == null ? null
        : fbBuilder.writeString(_code!);
    final int? shortCodeOffset = _shortCode == null ? null
        : fbBuilder.writeString(_shortCode!);
    final int? altCodeOffset = _altCode == null ? null
        : fbBuilder.writeString(_altCode!);
    final int? idSiteOffset = _idSite == null ? null
        : fbBuilder.writeString(_idSite!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? launchSiteDetailsOffset = _launchSiteDetails == null ? null
        : fbBuilder.writeList(_launchSiteDetails!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(16);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, codeOffset);
    fbBuilder.addOffset(3, shortCodeOffset);
    fbBuilder.addOffset(4, altCodeOffset);
    fbBuilder.addOffset(5, idSiteOffset);
    fbBuilder.addOffset(6, nameOffset);
    fbBuilder.addOffset(7, createdAtOffset);
    fbBuilder.addOffset(8, createdByOffset);
    fbBuilder.addOffset(9, updatedAtOffset);
    fbBuilder.addOffset(10, updatedByOffset);
    fbBuilder.addOffset(11, sourceOffset);
    fbBuilder.addOffset(12, originOffset);
    fbBuilder.addOffset(13, origNetworkOffset);
    fbBuilder.addInt8(14, _dataMode?.value);
    fbBuilder.addOffset(15, launchSiteDetailsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
