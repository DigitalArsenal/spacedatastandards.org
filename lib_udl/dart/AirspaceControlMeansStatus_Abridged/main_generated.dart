// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
class AirspaceControlMeansStatusAbridged {
  AirspaceControlMeansStatusAbridged._(this._bc, this._bcOffset);
  factory AirspaceControlMeansStatusAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirspaceControlMeansStatusAbridged> reader = _AirspaceControlMeansStatusAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
  ///  Example: /// Example: ADD
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get cmStat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Airspace control means name or designator. Mandatory if acmStat equals "DELETE," otherwise this field is prohibited.
  ///  Example: /// Example: ['DESIGN:B35', 'NAME:ERMA', 'RANG:C21-C25']
  ///  Constraints: No constraints specified.
  List<String>? get cmStatId => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  ///  A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get airspaceControlMeans => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'AirspaceControlMeansStatusAbridged{cmStat: ${cmStat}, cmStatId: ${cmStatId}, airspaceControlMeans: ${airspaceControlMeans}}';
  }
}

class _AirspaceControlMeansStatusAbridgedReader extends fb.TableReader<AirspaceControlMeansStatusAbridged> {
  const _AirspaceControlMeansStatusAbridgedReader();

  @override
  AirspaceControlMeansStatusAbridged createObject(fb.BufferContext bc, int offset) => 
    AirspaceControlMeansStatusAbridged._(bc, offset);
}

class AirspaceControlMeansStatusAbridgedBuilder {
  AirspaceControlMeansStatusAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addCmStatOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addCmStatIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAirspaceControlMeansOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirspaceControlMeansStatusAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _cmStat;
  final List<String>? _cmStatId;
  final List<String>? _airspaceControlMeans;

  AirspaceControlMeansStatusAbridgedObjectBuilder({
    String? cmStat,
    List<String>? cmStatId,
    List<String>? airspaceControlMeans,
  })
      : _cmStat = cmStat,
        _cmStatId = cmStatId,
        _airspaceControlMeans = airspaceControlMeans;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? cmStatOffset = _cmStat == null ? null
        : fbBuilder.writeString(_cmStat!);
    final int? cmStatIdOffset = _cmStatId == null ? null
        : fbBuilder.writeList(_cmStatId!.map(fbBuilder.writeString).toList());
    final int? airspaceControlMeansOffset = _airspaceControlMeans == null ? null
        : fbBuilder.writeList(_airspaceControlMeans!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, cmStatOffset);
    fbBuilder.addOffset(1, cmStatIdOffset);
    fbBuilder.addOffset(2, airspaceControlMeansOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
