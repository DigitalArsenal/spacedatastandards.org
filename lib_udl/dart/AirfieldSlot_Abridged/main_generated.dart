// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AirfieldSlotAbridgedTypeEnum {
  final int value;
  const AirfieldSlotAbridgedTypeEnum._(this.value);

  factory AirfieldSlotAbridgedTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AirfieldSlotAbridgedTypeEnum');
    }
    return result;
  }

  static AirfieldSlotAbridgedTypeEnum? _createOrNull(int? value) => 
      value == null ? null : AirfieldSlotAbridgedTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const AirfieldSlotAbridgedTypeEnum WORKING = AirfieldSlotAbridgedTypeEnum._(0);

  ///  No description available.
  static const AirfieldSlotAbridgedTypeEnum PARKING = AirfieldSlotAbridgedTypeEnum._(1);

  ///  No description available.
  static const AirfieldSlotAbridgedTypeEnum TAKEOFF = AirfieldSlotAbridgedTypeEnum._(2);

  ///  No description available.
  static const AirfieldSlotAbridgedTypeEnum LANDING = AirfieldSlotAbridgedTypeEnum._(3);

  ///  No description available.
  static const AirfieldSlotAbridgedTypeEnum OTHER = AirfieldSlotAbridgedTypeEnum._(4);
  static const Map<int, AirfieldSlotAbridgedTypeEnum> values = {
    0: WORKING,
    1: PARKING,
    2: TAKEOFF,
    3: LANDING,
    4: OTHER};

  static const fb.Reader<AirfieldSlotAbridgedTypeEnum> reader = _AirfieldSlotAbridgedTypeEnumReader();

  @override
  String toString() {
    return 'AirfieldSlotAbridgedTypeEnum{value: $value}';
  }
}

class _AirfieldSlotAbridgedTypeEnumReader extends fb.Reader<AirfieldSlotAbridgedTypeEnum> {
  const _AirfieldSlotAbridgedTypeEnumReader();

  @override
  int get size => 1;

  @override
  AirfieldSlotAbridgedTypeEnum read(fb.BufferContext bc, int offset) =>
      AirfieldSlotAbridgedTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class AirfieldSlotAbridgedAcSlotCatEnum {
  final int value;
  const AirfieldSlotAbridgedAcSlotCatEnum._(this.value);

  factory AirfieldSlotAbridgedAcSlotCatEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AirfieldSlotAbridgedAcSlotCatEnum');
    }
    return result;
  }

  static AirfieldSlotAbridgedAcSlotCatEnum? _createOrNull(int? value) => 
      value == null ? null : AirfieldSlotAbridgedAcSlotCatEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const AirfieldSlotAbridgedAcSlotCatEnum WIDE = AirfieldSlotAbridgedAcSlotCatEnum._(0);

  ///  No description available.
  static const AirfieldSlotAbridgedAcSlotCatEnum NARROW = AirfieldSlotAbridgedAcSlotCatEnum._(1);

  ///  No description available.
  static const AirfieldSlotAbridgedAcSlotCatEnum HELO = AirfieldSlotAbridgedAcSlotCatEnum._(2);

  ///  No description available.
  static const AirfieldSlotAbridgedAcSlotCatEnum ALL = AirfieldSlotAbridgedAcSlotCatEnum._(3);

  ///  No description available.
  static const AirfieldSlotAbridgedAcSlotCatEnum OTHER = AirfieldSlotAbridgedAcSlotCatEnum._(4);
  static const Map<int, AirfieldSlotAbridgedAcSlotCatEnum> values = {
    0: WIDE,
    1: NARROW,
    2: HELO,
    3: ALL,
    4: OTHER};

  static const fb.Reader<AirfieldSlotAbridgedAcSlotCatEnum> reader = _AirfieldSlotAbridgedAcSlotCatEnumReader();

  @override
  String toString() {
    return 'AirfieldSlotAbridgedAcSlotCatEnum{value: $value}';
  }
}

class _AirfieldSlotAbridgedAcSlotCatEnumReader extends fb.Reader<AirfieldSlotAbridgedAcSlotCatEnum> {
  const _AirfieldSlotAbridgedAcSlotCatEnumReader();

  @override
  int get size => 1;

  @override
  AirfieldSlotAbridgedAcSlotCatEnum read(fb.BufferContext bc, int offset) =>
      AirfieldSlotAbridgedAcSlotCatEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class AirfieldSlotAbridgedDataModeEnum {
  final int value;
  const AirfieldSlotAbridgedDataModeEnum._(this.value);

  factory AirfieldSlotAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AirfieldSlotAbridgedDataModeEnum');
    }
    return result;
  }

  static AirfieldSlotAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AirfieldSlotAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AirfieldSlotAbridgedDataModeEnum REAL = AirfieldSlotAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AirfieldSlotAbridgedDataModeEnum TEST = AirfieldSlotAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AirfieldSlotAbridgedDataModeEnum SIMULATED = AirfieldSlotAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AirfieldSlotAbridgedDataModeEnum EXERCISE = AirfieldSlotAbridgedDataModeEnum._(3);
  static const Map<int, AirfieldSlotAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AirfieldSlotAbridgedDataModeEnum> reader = _AirfieldSlotAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'AirfieldSlotAbridgedDataModeEnum{value: $value}';
  }
}

class _AirfieldSlotAbridgedDataModeEnumReader extends fb.Reader<AirfieldSlotAbridgedDataModeEnum> {
  const _AirfieldSlotAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AirfieldSlotAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      AirfieldSlotAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Airfield capacity data. Contains data associated with the airfieldslots available for parking, working, takeoff, and landing at the airfield, as well as the types of aircraft that can be accommodated.
class AirfieldSlotAbridged {
  AirfieldSlotAbridged._(this._bc, this._bcOffset);
  factory AirfieldSlotAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirfieldSlotAbridged> reader = _AirfieldSlotAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The name of the airfield where this slot is located.
  ///  Example: /// Example: USAF Academy AFLD
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get airfieldName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The International Civil Aviation Organization (ICAO) code of the airfield.
  ///  Example: /// Example: KCOS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get icao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Unique identifier of the Airfield for which this slot information applies.
  ///  Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idAirfield => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Alternate airfield identifier provided by the source.
  ///  Example: /// Example: ALT-AIRFIELD-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get altAirfieldId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Name of this slot.
  ///  Example: /// Example: Apron 5
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING, OTHER).
  ///  Example: /// Example: WORKING
  ///  Constraints: Minimum length = 0, Maximum length = 7
  AirfieldSlotAbridgedTypeEnum get type => AirfieldSlotAbridgedTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 18, 0));
  ///  Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL, OTHER).
  ///  Example: /// Example: WIDE
  ///  Constraints: Minimum length = 0, Maximum length = 6
  AirfieldSlotAbridgedAcSlotCatEnum get acSlotCat => AirfieldSlotAbridgedAcSlotCatEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 20, 0));
  ///  Number of aircraft that can fit in this slot at the same time.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get capacity => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 22, 0);
  ///  Zulu time this slot is first available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
  ///  Example: /// Example: 0000Z
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Latest zulu time this slot is available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
  ///  Example: /// Example: 2359Z
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get endTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Minimum time that must elapse between different aircraft leaving and entering this slot, in minutes.
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  int get minSeparation => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Optional notes/comments for this airfield slot.
  ///  Example: /// Example: Notes for an airfield slot.
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AirfieldSlotAbridgedDataModeEnum get dataMode => AirfieldSlotAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 44, 0));

  @override
  String toString() {
    return 'AirfieldSlotAbridged{id: ${id}, classificationMarking: ${classificationMarking}, airfieldName: ${airfieldName}, icao: ${icao}, idAirfield: ${idAirfield}, altAirfieldId: ${altAirfieldId}, name: ${name}, type: ${type}, acSlotCat: ${acSlotCat}, capacity: ${capacity}, startTime: ${startTime}, endTime: ${endTime}, minSeparation: ${minSeparation}, notes: ${notes}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _AirfieldSlotAbridgedReader extends fb.TableReader<AirfieldSlotAbridged> {
  const _AirfieldSlotAbridgedReader();

  @override
  AirfieldSlotAbridged createObject(fb.BufferContext bc, int offset) => 
    AirfieldSlotAbridged._(bc, offset);
}

class AirfieldSlotAbridgedBuilder {
  AirfieldSlotAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(21);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAirfieldNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIcaoOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIdAirfieldOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addAltAirfieldIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addType(AirfieldSlotAbridgedTypeEnum? type) {
    fbBuilder.addInt8(7, type?.value);
    return fbBuilder.offset;
  }
  int addAcSlotCat(AirfieldSlotAbridgedAcSlotCatEnum? acSlotCat) {
    fbBuilder.addInt8(8, acSlotCat?.value);
    return fbBuilder.offset;
  }
  int addCapacity(int? capacity) {
    fbBuilder.addInt32(9, capacity);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addMinSeparation(int? minSeparation) {
    fbBuilder.addInt32(12, minSeparation);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AirfieldSlotAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(20, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirfieldSlotAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _airfieldName;
  final String? _icao;
  final String? _idAirfield;
  final String? _altAirfieldId;
  final String? _name;
  final AirfieldSlotAbridgedTypeEnum? _type;
  final AirfieldSlotAbridgedAcSlotCatEnum? _acSlotCat;
  final int? _capacity;
  final String? _startTime;
  final String? _endTime;
  final int? _minSeparation;
  final String? _notes;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final AirfieldSlotAbridgedDataModeEnum? _dataMode;

  AirfieldSlotAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? airfieldName,
    String? icao,
    String? idAirfield,
    String? altAirfieldId,
    String? name,
    AirfieldSlotAbridgedTypeEnum? type,
    AirfieldSlotAbridgedAcSlotCatEnum? acSlotCat,
    int? capacity,
    String? startTime,
    String? endTime,
    int? minSeparation,
    String? notes,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    AirfieldSlotAbridgedDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _airfieldName = airfieldName,
        _icao = icao,
        _idAirfield = idAirfield,
        _altAirfieldId = altAirfieldId,
        _name = name,
        _type = type,
        _acSlotCat = acSlotCat,
        _capacity = capacity,
        _startTime = startTime,
        _endTime = endTime,
        _minSeparation = minSeparation,
        _notes = notes,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? airfieldNameOffset = _airfieldName == null ? null
        : fbBuilder.writeString(_airfieldName!);
    final int? icaoOffset = _icao == null ? null
        : fbBuilder.writeString(_icao!);
    final int? idAirfieldOffset = _idAirfield == null ? null
        : fbBuilder.writeString(_idAirfield!);
    final int? altAirfieldIdOffset = _altAirfieldId == null ? null
        : fbBuilder.writeString(_altAirfieldId!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? endTimeOffset = _endTime == null ? null
        : fbBuilder.writeString(_endTime!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(21);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, airfieldNameOffset);
    fbBuilder.addOffset(3, icaoOffset);
    fbBuilder.addOffset(4, idAirfieldOffset);
    fbBuilder.addOffset(5, altAirfieldIdOffset);
    fbBuilder.addOffset(6, nameOffset);
    fbBuilder.addInt8(7, _type?.value);
    fbBuilder.addInt8(8, _acSlotCat?.value);
    fbBuilder.addInt32(9, _capacity);
    fbBuilder.addOffset(10, startTimeOffset);
    fbBuilder.addOffset(11, endTimeOffset);
    fbBuilder.addInt32(12, _minSeparation);
    fbBuilder.addOffset(13, notesOffset);
    fbBuilder.addOffset(14, createdAtOffset);
    fbBuilder.addOffset(15, createdByOffset);
    fbBuilder.addOffset(16, sourceDlOffset);
    fbBuilder.addOffset(17, sourceOffset);
    fbBuilder.addOffset(18, originOffset);
    fbBuilder.addOffset(19, origNetworkOffset);
    fbBuilder.addInt8(20, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
