// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AirspaceControlOrderAbridgedDataModeEnum {
  final int value;
  const AirspaceControlOrderAbridgedDataModeEnum._(this.value);

  factory AirspaceControlOrderAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AirspaceControlOrderAbridgedDataModeEnum');
    }
    return result;
  }

  static AirspaceControlOrderAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AirspaceControlOrderAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AirspaceControlOrderAbridgedDataModeEnum REAL = AirspaceControlOrderAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AirspaceControlOrderAbridgedDataModeEnum TEST = AirspaceControlOrderAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AirspaceControlOrderAbridgedDataModeEnum SIMULATED = AirspaceControlOrderAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AirspaceControlOrderAbridgedDataModeEnum EXERCISE = AirspaceControlOrderAbridgedDataModeEnum._(3);
  static const Map<int, AirspaceControlOrderAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AirspaceControlOrderAbridgedDataModeEnum> reader = _AirspaceControlOrderAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'AirspaceControlOrderAbridgedDataModeEnum{value: $value}';
  }
}

class _AirspaceControlOrderAbridgedDataModeEnumReader extends fb.Reader<AirspaceControlOrderAbridgedDataModeEnum> {
  const _AirspaceControlOrderAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AirspaceControlOrderAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      AirspaceControlOrderAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Beta Version Airspace Control Order: Contains airspace coordination information and instructions that have been issued by an airspace control authority.
class AirspaceControlOrderAbridged {
  AirspaceControlOrderAbridged._(this._bc, this._bcOffset);
  factory AirspaceControlOrderAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirspaceControlOrderAbridged> reader = _AirspaceControlOrderAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: EXAMPLE URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Specifies the code name or nickname assigned to a joint exercise or plan to designate message traffic.
  ///  Example: /// Example: DESERT WIND
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get opExName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The originator of this reference.
  ///  Example: /// Example: USCENTCOM
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get originator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The start of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T13:55:43.123Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The end of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-08T13:55:43.123Z
  ///  Constraints: No constraints specified.
  String? get stopTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  A qualifier for the end of the effective time period of this airspace control order, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
  ///  Example: /// Example: AFTER
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get stopQualifier => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Supplementary name that can be used to further identify exercise nicknames, or to provide the primary nickname of the option or the alternative of an operational plan.
  ///  Example: /// Example: CONTROL
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get opExInfo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The secondary supplementary nickname of the option or the alternative of the operational plan or order.
  ///  Example: /// Example: ORANGE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get opExInfoAlt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
  ///  Example: /// Example: SACEUR 106
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get planOrigNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The unique message identifier sequentially assigned by the originator.
  ///  Example: /// Example: 1201003
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get serialNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The month in which the message originated.
  ///  Example: /// Example: OCT
  ///  Constraints: Minimum length = 0, Maximum length = 12
  String? get month => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The qualifier which caveats the message status.
  ///  Example: /// Example: CHG
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get qualifier => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The serial number associated with the message qualifier.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get qualSn => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Name of the area of the command for which the ACO is valid.
  ///  Example: /// Example: FORT BRAGG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get areaOfValidity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The serial number of this airspace control order.
  ///  Example: /// Example: 27B
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get acoSerialNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Specifies the geodetic datum by which the spatial coordinates of the controlled airspace are calculated.
  ///  Example: /// Example: EUR-T
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get geoDatum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Free text information expressed in natural language.
  ///  Example: /// Example: CHOKE POINTS
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get acoComments => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get airspaceControlOrderReferences => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get airspaceControlMeansStatus => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);
  ///  Collection of unique link 16 identifier that will be assigned to a future airspace control means.
  ///  Example: /// Example: ['A2467', 'A3466', 'AA232']
  ///  Constraints: No constraints specified.
  List<String>? get undLnkTrk => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 46);
  ///  Markings defining the source material or the original classification authority for the ACO message.
  ///  Example: /// Example: ORIG:USJFCOM
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get classSource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Mandatory if classSource uses the "IORIG" designator. Must be a REASON FOR CLASSIFICATION code.
  ///  Example: /// Example: ['15C', '10C']
  ///  Constraints: No constraints specified.
  List<String>? get classReason => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 50);
  ///  Markings providing the literal guidance or date for downgrading or declassifying the airspace control order. Manditory if declassExemptionCode is nul.
  ///  Example: /// Example: ['NST:AT EXERCISE ENDEX', 'DATE:25NOV1997']
  ///  Constraints: No constraints specified.
  List<String>? get downgradeInsDate => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 52);
  ///  Coded entries that provide justification for exemption from automatic downgrading or declassification of the airspace control order.
  ///  Example: /// Example: ['X1', 'X2']
  ///  Constraints: No constraints specified.
  List<String>? get declassExemptionCode => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 54);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AirspaceControlOrderAbridgedDataModeEnum get dataMode => AirspaceControlOrderAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 68, 0));

  @override
  String toString() {
    return 'AirspaceControlOrderAbridged{id: ${id}, classificationMarking: ${classificationMarking}, rawFileUri: ${rawFileUri}, opExName: ${opExName}, originator: ${originator}, startTime: ${startTime}, stopTime: ${stopTime}, stopQualifier: ${stopQualifier}, opExInfo: ${opExInfo}, opExInfoAlt: ${opExInfoAlt}, planOrigNum: ${planOrigNum}, serialNum: ${serialNum}, month: ${month}, qualifier: ${qualifier}, qualSn: ${qualSn}, areaOfValidity: ${areaOfValidity}, acoSerialNum: ${acoSerialNum}, geoDatum: ${geoDatum}, acoComments: ${acoComments}, airspaceControlOrderReferences: ${airspaceControlOrderReferences}, airspaceControlMeansStatus: ${airspaceControlMeansStatus}, undLnkTrk: ${undLnkTrk}, classSource: ${classSource}, classReason: ${classReason}, downgradeInsDate: ${downgradeInsDate}, declassExemptionCode: ${declassExemptionCode}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _AirspaceControlOrderAbridgedReader extends fb.TableReader<AirspaceControlOrderAbridged> {
  const _AirspaceControlOrderAbridgedReader();

  @override
  AirspaceControlOrderAbridged createObject(fb.BufferContext bc, int offset) => 
    AirspaceControlOrderAbridged._(bc, offset);
}

class AirspaceControlOrderAbridgedBuilder {
  AirspaceControlOrderAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(33);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOpExNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addOriginatorOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addStopTimeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addStopQualifierOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOpExInfoOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addOpExInfoAltOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addPlanOrigNumOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addSerialNumOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addMonthOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addQualifierOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addQualSn(int? qualSn) {
    fbBuilder.addInt32(14, qualSn);
    return fbBuilder.offset;
  }
  int addAreaOfValidityOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addAcoSerialNumOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addGeoDatumOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addAcoCommentsOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addAirspaceControlOrderReferencesOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addAirspaceControlMeansStatusOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addUndLnkTrkOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addClassSourceOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addClassReasonOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addDowngradeInsDateOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addDeclassExemptionCodeOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AirspaceControlOrderAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(32, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirspaceControlOrderAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _rawFileUri;
  final String? _opExName;
  final String? _originator;
  final String? _startTime;
  final String? _stopTime;
  final String? _stopQualifier;
  final String? _opExInfo;
  final String? _opExInfoAlt;
  final String? _planOrigNum;
  final String? _serialNum;
  final String? _month;
  final String? _qualifier;
  final int? _qualSn;
  final String? _areaOfValidity;
  final String? _acoSerialNum;
  final String? _geoDatum;
  final String? _acoComments;
  final List<String>? _airspaceControlOrderReferences;
  final List<String>? _airspaceControlMeansStatus;
  final List<String>? _undLnkTrk;
  final String? _classSource;
  final List<String>? _classReason;
  final List<String>? _downgradeInsDate;
  final List<String>? _declassExemptionCode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final AirspaceControlOrderAbridgedDataModeEnum? _dataMode;

  AirspaceControlOrderAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? rawFileUri,
    String? opExName,
    String? originator,
    String? startTime,
    String? stopTime,
    String? stopQualifier,
    String? opExInfo,
    String? opExInfoAlt,
    String? planOrigNum,
    String? serialNum,
    String? month,
    String? qualifier,
    int? qualSn,
    String? areaOfValidity,
    String? acoSerialNum,
    String? geoDatum,
    String? acoComments,
    List<String>? airspaceControlOrderReferences,
    List<String>? airspaceControlMeansStatus,
    List<String>? undLnkTrk,
    String? classSource,
    List<String>? classReason,
    List<String>? downgradeInsDate,
    List<String>? declassExemptionCode,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    AirspaceControlOrderAbridgedDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _rawFileUri = rawFileUri,
        _opExName = opExName,
        _originator = originator,
        _startTime = startTime,
        _stopTime = stopTime,
        _stopQualifier = stopQualifier,
        _opExInfo = opExInfo,
        _opExInfoAlt = opExInfoAlt,
        _planOrigNum = planOrigNum,
        _serialNum = serialNum,
        _month = month,
        _qualifier = qualifier,
        _qualSn = qualSn,
        _areaOfValidity = areaOfValidity,
        _acoSerialNum = acoSerialNum,
        _geoDatum = geoDatum,
        _acoComments = acoComments,
        _airspaceControlOrderReferences = airspaceControlOrderReferences,
        _airspaceControlMeansStatus = airspaceControlMeansStatus,
        _undLnkTrk = undLnkTrk,
        _classSource = classSource,
        _classReason = classReason,
        _downgradeInsDate = downgradeInsDate,
        _declassExemptionCode = declassExemptionCode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? opExNameOffset = _opExName == null ? null
        : fbBuilder.writeString(_opExName!);
    final int? originatorOffset = _originator == null ? null
        : fbBuilder.writeString(_originator!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? stopTimeOffset = _stopTime == null ? null
        : fbBuilder.writeString(_stopTime!);
    final int? stopQualifierOffset = _stopQualifier == null ? null
        : fbBuilder.writeString(_stopQualifier!);
    final int? opExInfoOffset = _opExInfo == null ? null
        : fbBuilder.writeString(_opExInfo!);
    final int? opExInfoAltOffset = _opExInfoAlt == null ? null
        : fbBuilder.writeString(_opExInfoAlt!);
    final int? planOrigNumOffset = _planOrigNum == null ? null
        : fbBuilder.writeString(_planOrigNum!);
    final int? serialNumOffset = _serialNum == null ? null
        : fbBuilder.writeString(_serialNum!);
    final int? monthOffset = _month == null ? null
        : fbBuilder.writeString(_month!);
    final int? qualifierOffset = _qualifier == null ? null
        : fbBuilder.writeString(_qualifier!);
    final int? areaOfValidityOffset = _areaOfValidity == null ? null
        : fbBuilder.writeString(_areaOfValidity!);
    final int? acoSerialNumOffset = _acoSerialNum == null ? null
        : fbBuilder.writeString(_acoSerialNum!);
    final int? geoDatumOffset = _geoDatum == null ? null
        : fbBuilder.writeString(_geoDatum!);
    final int? acoCommentsOffset = _acoComments == null ? null
        : fbBuilder.writeString(_acoComments!);
    final int? airspaceControlOrderReferencesOffset = _airspaceControlOrderReferences == null ? null
        : fbBuilder.writeList(_airspaceControlOrderReferences!.map(fbBuilder.writeString).toList());
    final int? airspaceControlMeansStatusOffset = _airspaceControlMeansStatus == null ? null
        : fbBuilder.writeList(_airspaceControlMeansStatus!.map(fbBuilder.writeString).toList());
    final int? undLnkTrkOffset = _undLnkTrk == null ? null
        : fbBuilder.writeList(_undLnkTrk!.map(fbBuilder.writeString).toList());
    final int? classSourceOffset = _classSource == null ? null
        : fbBuilder.writeString(_classSource!);
    final int? classReasonOffset = _classReason == null ? null
        : fbBuilder.writeList(_classReason!.map(fbBuilder.writeString).toList());
    final int? downgradeInsDateOffset = _downgradeInsDate == null ? null
        : fbBuilder.writeList(_downgradeInsDate!.map(fbBuilder.writeString).toList());
    final int? declassExemptionCodeOffset = _declassExemptionCode == null ? null
        : fbBuilder.writeList(_declassExemptionCode!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(33);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, rawFileUriOffset);
    fbBuilder.addOffset(3, opExNameOffset);
    fbBuilder.addOffset(4, originatorOffset);
    fbBuilder.addOffset(5, startTimeOffset);
    fbBuilder.addOffset(6, stopTimeOffset);
    fbBuilder.addOffset(7, stopQualifierOffset);
    fbBuilder.addOffset(8, opExInfoOffset);
    fbBuilder.addOffset(9, opExInfoAltOffset);
    fbBuilder.addOffset(10, planOrigNumOffset);
    fbBuilder.addOffset(11, serialNumOffset);
    fbBuilder.addOffset(12, monthOffset);
    fbBuilder.addOffset(13, qualifierOffset);
    fbBuilder.addInt32(14, _qualSn);
    fbBuilder.addOffset(15, areaOfValidityOffset);
    fbBuilder.addOffset(16, acoSerialNumOffset);
    fbBuilder.addOffset(17, geoDatumOffset);
    fbBuilder.addOffset(18, acoCommentsOffset);
    fbBuilder.addOffset(19, airspaceControlOrderReferencesOffset);
    fbBuilder.addOffset(20, airspaceControlMeansStatusOffset);
    fbBuilder.addOffset(21, undLnkTrkOffset);
    fbBuilder.addOffset(22, classSourceOffset);
    fbBuilder.addOffset(23, classReasonOffset);
    fbBuilder.addOffset(24, downgradeInsDateOffset);
    fbBuilder.addOffset(25, declassExemptionCodeOffset);
    fbBuilder.addOffset(26, createdAtOffset);
    fbBuilder.addOffset(27, createdByOffset);
    fbBuilder.addOffset(28, sourceDlOffset);
    fbBuilder.addOffset(29, sourceOffset);
    fbBuilder.addOffset(30, originOffset);
    fbBuilder.addOffset(31, origNetworkOffset);
    fbBuilder.addInt8(32, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
