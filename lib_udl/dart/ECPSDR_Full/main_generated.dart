// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class EcpsdrFullDataModeEnum {
  final int value;
  const EcpsdrFullDataModeEnum._(this.value);

  factory EcpsdrFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EcpsdrFullDataModeEnum');
    }
    return result;
  }

  static EcpsdrFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : EcpsdrFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const EcpsdrFullDataModeEnum REAL = EcpsdrFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const EcpsdrFullDataModeEnum TEST = EcpsdrFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const EcpsdrFullDataModeEnum SIMULATED = EcpsdrFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const EcpsdrFullDataModeEnum EXERCISE = EcpsdrFullDataModeEnum._(3);
  static const Map<int, EcpsdrFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<EcpsdrFullDataModeEnum> reader = _EcpsdrFullDataModeEnumReader();

  @override
  String toString() {
    return 'EcpsdrFullDataModeEnum{value: $value}';
  }
}

class _EcpsdrFullDataModeEnumReader extends fb.Reader<EcpsdrFullDataModeEnum> {
  const _EcpsdrFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  EcpsdrFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      EcpsdrFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.
class EcpsdrFull {
  EcpsdrFull._(this._bc, this._bcOffset);
  factory EcpsdrFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EcpsdrFull> reader = _EcpsdrFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ECPSDR-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the on-orbit satellite hosting the sensor.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Satellite/catalog number of the on-orbit satellite hosting the sensor.
  ///  Example: /// Example: 101
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The type of data associated with this record (STANDARD, TRANSIENT).
  ///  Example: /// Example: STANDARD
  ///  Constraints: Minimum length = 1, Maximum length = 12
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get msgTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Time of the observation, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get obTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get retransmit => const fb.BoolReader().vTableGet(_bc, _bcOffset, 24, false);
  ///  The sensor mode associated with this measurements (NORMAL, TEST).
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 0, Maximum length = 12
  String? get senMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get dosBias => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get asl5VcurrMon => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 30, 0);
  ///  Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get dsl5VcurrMon => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Power supply temperature monitor.  This is sensor status telemetry.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get psTempMon => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get cdsPlateVmon => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 36, 0);
  ///  CDS reference voltage monitor.  See vRef for conversion factor to Volts.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get cdsRefVmon => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 38, 0);
  ///  Unitless sensor mounting plate temperature.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get mpTemp => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get vRef => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 42, 0);
  ///  Photodiode 1 signal level.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get pd1SigLev => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 44, 0);
  ///  Photodiode 2 signal level.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get pd2SigLev => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 46, 0);
  ///  Number of ESD triggers, low byte of 2-byte counter.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get esdTrigCountL => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 48, 0);
  ///  Number of ESD triggers, high byte of 2-byte counter.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get esdTrigCountH => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 50, 0);
  ///  LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get lowLetL => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get lowLetM => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get medLet1L => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get medLet1M => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 58, 0);
  ///  MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get medLet2L => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 60, 0);
  ///  MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get medLet2M => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 62, 0);
  ///  MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get medLet3L => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 64, 0);
  ///  MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get medLet3M => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 66, 0);
  ///  MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get medLet4L => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 68, 0);
  ///  MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get medLet4M => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 70, 0);
  ///  HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get hiLetL => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 72, 0);
  ///  Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get hiLetM => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 74, 0);
  ///  Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get surfDosL => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 76, 0);
  ///  Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get surfDosM => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 78, 0);
  ///  Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get surfDosH => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 80, 0);
  ///  Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get surfDosChargeL => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 82, 0);
  ///  Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get surfDosChargeH => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 84, 0);
  ///  Surface dosimeter status byte.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get surfDosStat => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 86, 0);
  ///  CDS throttle number of seconds between CDS transient capture readouts.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get cdsThrottle => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 88, 0);
  ///  CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get cdsThreshold => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 90, 0);
  ///  Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get checksum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 92, 0);
  ///  Array of 144 digitized samples of ESD waveform for transient packets.
  ///  Example: /// Example: [1, 2, 3]
  ///  Constraints: No constraints specified.
  List<String>? get transientData => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 94);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  EcpsdrFullDataModeEnum get dataMode => EcpsdrFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 110, 0));
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get onOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);

  @override
  String toString() {
    return 'EcpsdrFull{id: ${id}, classificationMarking: ${classificationMarking}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, type: ${type}, msgTime: ${msgTime}, obTime: ${obTime}, retransmit: ${retransmit}, senMode: ${senMode}, dosBias: ${dosBias}, asl5VcurrMon: ${asl5VcurrMon}, dsl5VcurrMon: ${dsl5VcurrMon}, psTempMon: ${psTempMon}, cdsPlateVmon: ${cdsPlateVmon}, cdsRefVmon: ${cdsRefVmon}, mpTemp: ${mpTemp}, vRef: ${vRef}, pd1SigLev: ${pd1SigLev}, pd2SigLev: ${pd2SigLev}, esdTrigCountL: ${esdTrigCountL}, esdTrigCountH: ${esdTrigCountH}, lowLetL: ${lowLetL}, lowLetM: ${lowLetM}, medLet1L: ${medLet1L}, medLet1M: ${medLet1M}, medLet2L: ${medLet2L}, medLet2M: ${medLet2M}, medLet3L: ${medLet3L}, medLet3M: ${medLet3M}, medLet4L: ${medLet4L}, medLet4M: ${medLet4M}, hiLetL: ${hiLetL}, hiLetM: ${hiLetM}, surfDosL: ${surfDosL}, surfDosM: ${surfDosM}, surfDosH: ${surfDosH}, surfDosChargeL: ${surfDosChargeL}, surfDosChargeH: ${surfDosChargeH}, surfDosStat: ${surfDosStat}, cdsThrottle: ${cdsThrottle}, cdsThreshold: ${cdsThreshold}, checksum: ${checksum}, transientData: ${transientData}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, onOrbit: ${onOrbit}}';
  }
}

class _EcpsdrFullReader extends fb.TableReader<EcpsdrFull> {
  const _EcpsdrFullReader();

  @override
  EcpsdrFull createObject(fb.BufferContext bc, int offset) => 
    EcpsdrFull._(bc, offset);
}

class EcpsdrFullBuilder {
  EcpsdrFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(55);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(3, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addMsgTimeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addObTimeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addRetransmit(bool? retransmit) {
    fbBuilder.addBool(10, retransmit);
    return fbBuilder.offset;
  }
  int addSenModeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addDosBias(int? dosBias) {
    fbBuilder.addInt32(12, dosBias);
    return fbBuilder.offset;
  }
  int addAsl5VcurrMon(int? asl5VcurrMon) {
    fbBuilder.addInt32(13, asl5VcurrMon);
    return fbBuilder.offset;
  }
  int addDsl5VcurrMon(int? dsl5VcurrMon) {
    fbBuilder.addInt32(14, dsl5VcurrMon);
    return fbBuilder.offset;
  }
  int addPsTempMon(int? psTempMon) {
    fbBuilder.addInt32(15, psTempMon);
    return fbBuilder.offset;
  }
  int addCdsPlateVmon(int? cdsPlateVmon) {
    fbBuilder.addInt32(16, cdsPlateVmon);
    return fbBuilder.offset;
  }
  int addCdsRefVmon(int? cdsRefVmon) {
    fbBuilder.addInt32(17, cdsRefVmon);
    return fbBuilder.offset;
  }
  int addMpTemp(int? mpTemp) {
    fbBuilder.addInt32(18, mpTemp);
    return fbBuilder.offset;
  }
  int addVRef(int? vRef) {
    fbBuilder.addInt32(19, vRef);
    return fbBuilder.offset;
  }
  int addPd1SigLev(int? pd1SigLev) {
    fbBuilder.addInt32(20, pd1SigLev);
    return fbBuilder.offset;
  }
  int addPd2SigLev(int? pd2SigLev) {
    fbBuilder.addInt32(21, pd2SigLev);
    return fbBuilder.offset;
  }
  int addEsdTrigCountL(int? esdTrigCountL) {
    fbBuilder.addInt32(22, esdTrigCountL);
    return fbBuilder.offset;
  }
  int addEsdTrigCountH(int? esdTrigCountH) {
    fbBuilder.addInt32(23, esdTrigCountH);
    return fbBuilder.offset;
  }
  int addLowLetL(int? lowLetL) {
    fbBuilder.addInt32(24, lowLetL);
    return fbBuilder.offset;
  }
  int addLowLetM(int? lowLetM) {
    fbBuilder.addInt32(25, lowLetM);
    return fbBuilder.offset;
  }
  int addMedLet1L(int? medLet1L) {
    fbBuilder.addInt32(26, medLet1L);
    return fbBuilder.offset;
  }
  int addMedLet1M(int? medLet1M) {
    fbBuilder.addInt32(27, medLet1M);
    return fbBuilder.offset;
  }
  int addMedLet2L(int? medLet2L) {
    fbBuilder.addInt32(28, medLet2L);
    return fbBuilder.offset;
  }
  int addMedLet2M(int? medLet2M) {
    fbBuilder.addInt32(29, medLet2M);
    return fbBuilder.offset;
  }
  int addMedLet3L(int? medLet3L) {
    fbBuilder.addInt32(30, medLet3L);
    return fbBuilder.offset;
  }
  int addMedLet3M(int? medLet3M) {
    fbBuilder.addInt32(31, medLet3M);
    return fbBuilder.offset;
  }
  int addMedLet4L(int? medLet4L) {
    fbBuilder.addInt32(32, medLet4L);
    return fbBuilder.offset;
  }
  int addMedLet4M(int? medLet4M) {
    fbBuilder.addInt32(33, medLet4M);
    return fbBuilder.offset;
  }
  int addHiLetL(int? hiLetL) {
    fbBuilder.addInt32(34, hiLetL);
    return fbBuilder.offset;
  }
  int addHiLetM(int? hiLetM) {
    fbBuilder.addInt32(35, hiLetM);
    return fbBuilder.offset;
  }
  int addSurfDosL(int? surfDosL) {
    fbBuilder.addInt32(36, surfDosL);
    return fbBuilder.offset;
  }
  int addSurfDosM(int? surfDosM) {
    fbBuilder.addInt32(37, surfDosM);
    return fbBuilder.offset;
  }
  int addSurfDosH(int? surfDosH) {
    fbBuilder.addInt32(38, surfDosH);
    return fbBuilder.offset;
  }
  int addSurfDosChargeL(int? surfDosChargeL) {
    fbBuilder.addInt32(39, surfDosChargeL);
    return fbBuilder.offset;
  }
  int addSurfDosChargeH(int? surfDosChargeH) {
    fbBuilder.addInt32(40, surfDosChargeH);
    return fbBuilder.offset;
  }
  int addSurfDosStat(int? surfDosStat) {
    fbBuilder.addInt32(41, surfDosStat);
    return fbBuilder.offset;
  }
  int addCdsThrottle(int? cdsThrottle) {
    fbBuilder.addInt32(42, cdsThrottle);
    return fbBuilder.offset;
  }
  int addCdsThreshold(int? cdsThreshold) {
    fbBuilder.addInt32(43, cdsThreshold);
    return fbBuilder.offset;
  }
  int addChecksum(int? checksum) {
    fbBuilder.addInt32(44, checksum);
    return fbBuilder.offset;
  }
  int addTransientDataOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addDataMode(EcpsdrFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(53, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EcpsdrFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final String? _idSensor;
  final String? _origSensorId;
  final String? _type;
  final String? _msgTime;
  final String? _obTime;
  final bool? _retransmit;
  final String? _senMode;
  final int? _dosBias;
  final int? _asl5VcurrMon;
  final int? _dsl5VcurrMon;
  final int? _psTempMon;
  final int? _cdsPlateVmon;
  final int? _cdsRefVmon;
  final int? _mpTemp;
  final int? _vRef;
  final int? _pd1SigLev;
  final int? _pd2SigLev;
  final int? _esdTrigCountL;
  final int? _esdTrigCountH;
  final int? _lowLetL;
  final int? _lowLetM;
  final int? _medLet1L;
  final int? _medLet1M;
  final int? _medLet2L;
  final int? _medLet2M;
  final int? _medLet3L;
  final int? _medLet3M;
  final int? _medLet4L;
  final int? _medLet4M;
  final int? _hiLetL;
  final int? _hiLetM;
  final int? _surfDosL;
  final int? _surfDosM;
  final int? _surfDosH;
  final int? _surfDosChargeL;
  final int? _surfDosChargeH;
  final int? _surfDosStat;
  final int? _cdsThrottle;
  final int? _cdsThreshold;
  final int? _checksum;
  final List<String>? _transientData;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final EcpsdrFullDataModeEnum? _dataMode;
  final String? _onOrbit;

  EcpsdrFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    String? idSensor,
    String? origSensorId,
    String? type,
    String? msgTime,
    String? obTime,
    bool? retransmit,
    String? senMode,
    int? dosBias,
    int? asl5VcurrMon,
    int? dsl5VcurrMon,
    int? psTempMon,
    int? cdsPlateVmon,
    int? cdsRefVmon,
    int? mpTemp,
    int? vRef,
    int? pd1SigLev,
    int? pd2SigLev,
    int? esdTrigCountL,
    int? esdTrigCountH,
    int? lowLetL,
    int? lowLetM,
    int? medLet1L,
    int? medLet1M,
    int? medLet2L,
    int? medLet2M,
    int? medLet3L,
    int? medLet3M,
    int? medLet4L,
    int? medLet4M,
    int? hiLetL,
    int? hiLetM,
    int? surfDosL,
    int? surfDosM,
    int? surfDosH,
    int? surfDosChargeL,
    int? surfDosChargeH,
    int? surfDosStat,
    int? cdsThrottle,
    int? cdsThreshold,
    int? checksum,
    List<String>? transientData,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    EcpsdrFullDataModeEnum? dataMode,
    String? onOrbit,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _type = type,
        _msgTime = msgTime,
        _obTime = obTime,
        _retransmit = retransmit,
        _senMode = senMode,
        _dosBias = dosBias,
        _asl5VcurrMon = asl5VcurrMon,
        _dsl5VcurrMon = dsl5VcurrMon,
        _psTempMon = psTempMon,
        _cdsPlateVmon = cdsPlateVmon,
        _cdsRefVmon = cdsRefVmon,
        _mpTemp = mpTemp,
        _vRef = vRef,
        _pd1SigLev = pd1SigLev,
        _pd2SigLev = pd2SigLev,
        _esdTrigCountL = esdTrigCountL,
        _esdTrigCountH = esdTrigCountH,
        _lowLetL = lowLetL,
        _lowLetM = lowLetM,
        _medLet1L = medLet1L,
        _medLet1M = medLet1M,
        _medLet2L = medLet2L,
        _medLet2M = medLet2M,
        _medLet3L = medLet3L,
        _medLet3M = medLet3M,
        _medLet4L = medLet4L,
        _medLet4M = medLet4M,
        _hiLetL = hiLetL,
        _hiLetM = hiLetM,
        _surfDosL = surfDosL,
        _surfDosM = surfDosM,
        _surfDosH = surfDosH,
        _surfDosChargeL = surfDosChargeL,
        _surfDosChargeH = surfDosChargeH,
        _surfDosStat = surfDosStat,
        _cdsThrottle = cdsThrottle,
        _cdsThreshold = cdsThreshold,
        _checksum = checksum,
        _transientData = transientData,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _onOrbit = onOrbit;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? msgTimeOffset = _msgTime == null ? null
        : fbBuilder.writeString(_msgTime!);
    final int? obTimeOffset = _obTime == null ? null
        : fbBuilder.writeString(_obTime!);
    final int? senModeOffset = _senMode == null ? null
        : fbBuilder.writeString(_senMode!);
    final int? transientDataOffset = _transientData == null ? null
        : fbBuilder.writeList(_transientData!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? onOrbitOffset = _onOrbit == null ? null
        : fbBuilder.writeString(_onOrbit!);
    fbBuilder.startTable(55);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idOnOrbitOffset);
    fbBuilder.addInt32(3, _satNo);
    fbBuilder.addOffset(4, origObjectIdOffset);
    fbBuilder.addOffset(5, idSensorOffset);
    fbBuilder.addOffset(6, origSensorIdOffset);
    fbBuilder.addOffset(7, typeOffset);
    fbBuilder.addOffset(8, msgTimeOffset);
    fbBuilder.addOffset(9, obTimeOffset);
    fbBuilder.addBool(10, _retransmit);
    fbBuilder.addOffset(11, senModeOffset);
    fbBuilder.addInt32(12, _dosBias);
    fbBuilder.addInt32(13, _asl5VcurrMon);
    fbBuilder.addInt32(14, _dsl5VcurrMon);
    fbBuilder.addInt32(15, _psTempMon);
    fbBuilder.addInt32(16, _cdsPlateVmon);
    fbBuilder.addInt32(17, _cdsRefVmon);
    fbBuilder.addInt32(18, _mpTemp);
    fbBuilder.addInt32(19, _vRef);
    fbBuilder.addInt32(20, _pd1SigLev);
    fbBuilder.addInt32(21, _pd2SigLev);
    fbBuilder.addInt32(22, _esdTrigCountL);
    fbBuilder.addInt32(23, _esdTrigCountH);
    fbBuilder.addInt32(24, _lowLetL);
    fbBuilder.addInt32(25, _lowLetM);
    fbBuilder.addInt32(26, _medLet1L);
    fbBuilder.addInt32(27, _medLet1M);
    fbBuilder.addInt32(28, _medLet2L);
    fbBuilder.addInt32(29, _medLet2M);
    fbBuilder.addInt32(30, _medLet3L);
    fbBuilder.addInt32(31, _medLet3M);
    fbBuilder.addInt32(32, _medLet4L);
    fbBuilder.addInt32(33, _medLet4M);
    fbBuilder.addInt32(34, _hiLetL);
    fbBuilder.addInt32(35, _hiLetM);
    fbBuilder.addInt32(36, _surfDosL);
    fbBuilder.addInt32(37, _surfDosM);
    fbBuilder.addInt32(38, _surfDosH);
    fbBuilder.addInt32(39, _surfDosChargeL);
    fbBuilder.addInt32(40, _surfDosChargeH);
    fbBuilder.addInt32(41, _surfDosStat);
    fbBuilder.addInt32(42, _cdsThrottle);
    fbBuilder.addInt32(43, _cdsThreshold);
    fbBuilder.addInt32(44, _checksum);
    fbBuilder.addOffset(45, transientDataOffset);
    fbBuilder.addOffset(46, createdAtOffset);
    fbBuilder.addOffset(47, createdByOffset);
    fbBuilder.addOffset(48, updatedAtOffset);
    fbBuilder.addOffset(49, updatedByOffset);
    fbBuilder.addOffset(50, sourceOffset);
    fbBuilder.addOffset(51, originOffset);
    fbBuilder.addOffset(52, origNetworkOffset);
    fbBuilder.addInt8(53, _dataMode?.value);
    fbBuilder.addOffset(54, onOrbitOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
