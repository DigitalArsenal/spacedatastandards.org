// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AirfieldSlotConsumptionIngestStatusEnum {
  final int value;
  const AirfieldSlotConsumptionIngestStatusEnum._(this.value);

  factory AirfieldSlotConsumptionIngestStatusEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AirfieldSlotConsumptionIngestStatusEnum');
    }
    return result;
  }

  static AirfieldSlotConsumptionIngestStatusEnum? _createOrNull(int? value) => 
      value == null ? null : AirfieldSlotConsumptionIngestStatusEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const AirfieldSlotConsumptionIngestStatusEnum REQUESTED = AirfieldSlotConsumptionIngestStatusEnum._(0);

  ///  No description available.
  static const AirfieldSlotConsumptionIngestStatusEnum APPROVED = AirfieldSlotConsumptionIngestStatusEnum._(1);

  ///  No description available.
  static const AirfieldSlotConsumptionIngestStatusEnum DENIED = AirfieldSlotConsumptionIngestStatusEnum._(2);

  ///  No description available.
  static const AirfieldSlotConsumptionIngestStatusEnum BLOCKED = AirfieldSlotConsumptionIngestStatusEnum._(3);

  ///  No description available.
  static const AirfieldSlotConsumptionIngestStatusEnum OTHER = AirfieldSlotConsumptionIngestStatusEnum._(4);
  static const Map<int, AirfieldSlotConsumptionIngestStatusEnum> values = {
    0: REQUESTED,
    1: APPROVED,
    2: DENIED,
    3: BLOCKED,
    4: OTHER};

  static const fb.Reader<AirfieldSlotConsumptionIngestStatusEnum> reader = _AirfieldSlotConsumptionIngestStatusEnumReader();

  @override
  String toString() {
    return 'AirfieldSlotConsumptionIngestStatusEnum{value: $value}';
  }
}

class _AirfieldSlotConsumptionIngestStatusEnumReader extends fb.Reader<AirfieldSlotConsumptionIngestStatusEnum> {
  const _AirfieldSlotConsumptionIngestStatusEnumReader();

  @override
  int get size => 1;

  @override
  AirfieldSlotConsumptionIngestStatusEnum read(fb.BufferContext bc, int offset) =>
      AirfieldSlotConsumptionIngestStatusEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class AirfieldSlotConsumptionIngestDataModeEnum {
  final int value;
  const AirfieldSlotConsumptionIngestDataModeEnum._(this.value);

  factory AirfieldSlotConsumptionIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AirfieldSlotConsumptionIngestDataModeEnum');
    }
    return result;
  }

  static AirfieldSlotConsumptionIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AirfieldSlotConsumptionIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AirfieldSlotConsumptionIngestDataModeEnum REAL = AirfieldSlotConsumptionIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AirfieldSlotConsumptionIngestDataModeEnum TEST = AirfieldSlotConsumptionIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AirfieldSlotConsumptionIngestDataModeEnum SIMULATED = AirfieldSlotConsumptionIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AirfieldSlotConsumptionIngestDataModeEnum EXERCISE = AirfieldSlotConsumptionIngestDataModeEnum._(3);
  static const Map<int, AirfieldSlotConsumptionIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AirfieldSlotConsumptionIngestDataModeEnum> reader = _AirfieldSlotConsumptionIngestDataModeEnumReader();

  @override
  String toString() {
    return 'AirfieldSlotConsumptionIngestDataModeEnum{value: $value}';
  }
}

class _AirfieldSlotConsumptionIngestDataModeEnumReader extends fb.Reader<AirfieldSlotConsumptionIngestDataModeEnum> {
  const _AirfieldSlotConsumptionIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AirfieldSlotConsumptionIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      AirfieldSlotConsumptionIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Airfield slot use data. Contains the dynamic data associated with the status and use of specific airfield slots.
class AirfieldSlotConsumptionIngest {
  AirfieldSlotConsumptionIngest._(this._bc, this._bcOffset);
  factory AirfieldSlotConsumptionIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirfieldSlotConsumptionIngest> reader = _AirfieldSlotConsumptionIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the airfield slot for which this slot consumption record is referencing.
  ///  Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idAirfieldSlot => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
  ///  Example: /// Example: APPROVED
  ///  Constraints: Minimum length = 0, Maximum length = 9
  AirfieldSlotConsumptionIngestStatusEnum get status => AirfieldSlotConsumptionIngestStatusEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 10, 0));
  ///  Flag indicating if the slot is occupied.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get occupied => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  ///  Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.
  ///  Example: /// Example: APRON1-230401001
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get consumer => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The aircraft Model Design Series designation of the aircraft occupying this slot.
  ///  Example: /// Example: C017A
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get occAircraftMds => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The tail number of the aircraft occupying this slot.
  ///  Example: /// Example: N702JG
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get occTailNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Array of call signs of the aircraft using this slot.
  ///  Example: /// Example: ['RCH123', 'ABC123', 'LLS442']
  ///  Constraints: No constraints specified.
  List<String>? get callSigns => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);
  ///  Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
  ///  Example: /// Example: AJM123456123
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get missionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Number of aircraft using this slot for this time.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numAircraft => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 24, 0);
  ///  Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-01-01T01:01:03.123Z
  ///  Constraints: No constraints specified.
  String? get occStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The aircraft Model Design Series designation of the aircraft this slot is reserved for.
  ///  Example: /// Example: C017A
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get resAircraftMds => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The tail number of the aircraft this slot is reserved for.
  ///  Example: /// Example: N702JG
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get resTailNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).
  ///  Example: /// Example: M
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get resType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The reason the slot reservation was made.
  ///  Example: /// Example: Maintenance needed
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get resReason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
  ///  Example: /// Example: AJM123456123
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get resMissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The start of the slot window, in ISO 8601 UTC format.
  ///  Example: /// Example: 2023-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The end of the slot window, in ISO 8601 UTC format.
  ///  Example: /// Example: 2023-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get endTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.
  ///  Example: /// Example: 2023-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get targetTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Unique identifier of the sortie arriving at the slot start time.
  ///  Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idArrSortie => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Unique identifier of the sortie departing at the slot end time.
  ///  Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idDepSortie => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Alternate identifier of the sortie arriving at the slot start time provided by the source.
  ///  Example: /// Example: ALT-SORTIE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get altArrSortieId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Alternate identifier of the sortie departing at the slot end time provided by the source.
  ///  Example: /// Example: ALT-SORTIE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get altDepSortieId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Comments from the requester.
  ///  Example: /// Example: Sorry for the late notice.
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get reqComment => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Comments from the approver.
  ///  Example: /// Example: The request was denied due to inoperable fuel pumps.
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get appComment => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Short name of the organization requesting use of this slot.
  ///  Example: /// Example: TACC
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get reqOrg => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.
  ///  Example: /// Example: CB
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get reqInitials => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Short name of the organization approving the use of this slot.
  ///  Example: /// Example: KCHS/BOPS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get appOrg => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.
  ///  Example: /// Example: CB
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get appInitials => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AirfieldSlotConsumptionIngestDataModeEnum get dataMode => AirfieldSlotConsumptionIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 76, 0));

  @override
  String toString() {
    return 'AirfieldSlotConsumptionIngest{id: ${id}, classificationMarking: ${classificationMarking}, idAirfieldSlot: ${idAirfieldSlot}, status: ${status}, occupied: ${occupied}, consumer: ${consumer}, occAircraftMds: ${occAircraftMds}, occTailNumber: ${occTailNumber}, callSigns: ${callSigns}, missionId: ${missionId}, numAircraft: ${numAircraft}, occStartTime: ${occStartTime}, resAircraftMds: ${resAircraftMds}, resTailNumber: ${resTailNumber}, resType: ${resType}, resReason: ${resReason}, resMissionId: ${resMissionId}, startTime: ${startTime}, endTime: ${endTime}, targetTime: ${targetTime}, idArrSortie: ${idArrSortie}, idDepSortie: ${idDepSortie}, altArrSortieId: ${altArrSortieId}, altDepSortieId: ${altDepSortieId}, reqComment: ${reqComment}, appComment: ${appComment}, reqOrg: ${reqOrg}, reqInitials: ${reqInitials}, appOrg: ${appOrg}, appInitials: ${appInitials}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _AirfieldSlotConsumptionIngestReader extends fb.TableReader<AirfieldSlotConsumptionIngest> {
  const _AirfieldSlotConsumptionIngestReader();

  @override
  AirfieldSlotConsumptionIngest createObject(fb.BufferContext bc, int offset) => 
    AirfieldSlotConsumptionIngest._(bc, offset);
}

class AirfieldSlotConsumptionIngestBuilder {
  AirfieldSlotConsumptionIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(37);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdAirfieldSlotOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addStatus(AirfieldSlotConsumptionIngestStatusEnum? status) {
    fbBuilder.addInt8(3, status?.value);
    return fbBuilder.offset;
  }
  int addOccupied(bool? occupied) {
    fbBuilder.addBool(4, occupied);
    return fbBuilder.offset;
  }
  int addConsumerOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addOccAircraftMdsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addOccTailNumberOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addCallSignsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addMissionIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addNumAircraft(int? numAircraft) {
    fbBuilder.addInt32(10, numAircraft);
    return fbBuilder.offset;
  }
  int addOccStartTimeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addResAircraftMdsOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addResTailNumberOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addResTypeOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addResReasonOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addResMissionIdOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addTargetTimeOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addIdArrSortieOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addIdDepSortieOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addAltArrSortieIdOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addAltDepSortieIdOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addReqCommentOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addAppCommentOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addReqOrgOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addReqInitialsOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addAppOrgOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addAppInitialsOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AirfieldSlotConsumptionIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(36, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirfieldSlotConsumptionIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idAirfieldSlot;
  final AirfieldSlotConsumptionIngestStatusEnum? _status;
  final bool? _occupied;
  final String? _consumer;
  final String? _occAircraftMds;
  final String? _occTailNumber;
  final List<String>? _callSigns;
  final String? _missionId;
  final int? _numAircraft;
  final String? _occStartTime;
  final String? _resAircraftMds;
  final String? _resTailNumber;
  final String? _resType;
  final String? _resReason;
  final String? _resMissionId;
  final String? _startTime;
  final String? _endTime;
  final String? _targetTime;
  final String? _idArrSortie;
  final String? _idDepSortie;
  final String? _altArrSortieId;
  final String? _altDepSortieId;
  final String? _reqComment;
  final String? _appComment;
  final String? _reqOrg;
  final String? _reqInitials;
  final String? _appOrg;
  final String? _appInitials;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final AirfieldSlotConsumptionIngestDataModeEnum? _dataMode;

  AirfieldSlotConsumptionIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idAirfieldSlot,
    AirfieldSlotConsumptionIngestStatusEnum? status,
    bool? occupied,
    String? consumer,
    String? occAircraftMds,
    String? occTailNumber,
    List<String>? callSigns,
    String? missionId,
    int? numAircraft,
    String? occStartTime,
    String? resAircraftMds,
    String? resTailNumber,
    String? resType,
    String? resReason,
    String? resMissionId,
    String? startTime,
    String? endTime,
    String? targetTime,
    String? idArrSortie,
    String? idDepSortie,
    String? altArrSortieId,
    String? altDepSortieId,
    String? reqComment,
    String? appComment,
    String? reqOrg,
    String? reqInitials,
    String? appOrg,
    String? appInitials,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    AirfieldSlotConsumptionIngestDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idAirfieldSlot = idAirfieldSlot,
        _status = status,
        _occupied = occupied,
        _consumer = consumer,
        _occAircraftMds = occAircraftMds,
        _occTailNumber = occTailNumber,
        _callSigns = callSigns,
        _missionId = missionId,
        _numAircraft = numAircraft,
        _occStartTime = occStartTime,
        _resAircraftMds = resAircraftMds,
        _resTailNumber = resTailNumber,
        _resType = resType,
        _resReason = resReason,
        _resMissionId = resMissionId,
        _startTime = startTime,
        _endTime = endTime,
        _targetTime = targetTime,
        _idArrSortie = idArrSortie,
        _idDepSortie = idDepSortie,
        _altArrSortieId = altArrSortieId,
        _altDepSortieId = altDepSortieId,
        _reqComment = reqComment,
        _appComment = appComment,
        _reqOrg = reqOrg,
        _reqInitials = reqInitials,
        _appOrg = appOrg,
        _appInitials = appInitials,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idAirfieldSlotOffset = _idAirfieldSlot == null ? null
        : fbBuilder.writeString(_idAirfieldSlot!);
    final int? consumerOffset = _consumer == null ? null
        : fbBuilder.writeString(_consumer!);
    final int? occAircraftMdsOffset = _occAircraftMds == null ? null
        : fbBuilder.writeString(_occAircraftMds!);
    final int? occTailNumberOffset = _occTailNumber == null ? null
        : fbBuilder.writeString(_occTailNumber!);
    final int? callSignsOffset = _callSigns == null ? null
        : fbBuilder.writeList(_callSigns!.map(fbBuilder.writeString).toList());
    final int? missionIdOffset = _missionId == null ? null
        : fbBuilder.writeString(_missionId!);
    final int? occStartTimeOffset = _occStartTime == null ? null
        : fbBuilder.writeString(_occStartTime!);
    final int? resAircraftMdsOffset = _resAircraftMds == null ? null
        : fbBuilder.writeString(_resAircraftMds!);
    final int? resTailNumberOffset = _resTailNumber == null ? null
        : fbBuilder.writeString(_resTailNumber!);
    final int? resTypeOffset = _resType == null ? null
        : fbBuilder.writeString(_resType!);
    final int? resReasonOffset = _resReason == null ? null
        : fbBuilder.writeString(_resReason!);
    final int? resMissionIdOffset = _resMissionId == null ? null
        : fbBuilder.writeString(_resMissionId!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? endTimeOffset = _endTime == null ? null
        : fbBuilder.writeString(_endTime!);
    final int? targetTimeOffset = _targetTime == null ? null
        : fbBuilder.writeString(_targetTime!);
    final int? idArrSortieOffset = _idArrSortie == null ? null
        : fbBuilder.writeString(_idArrSortie!);
    final int? idDepSortieOffset = _idDepSortie == null ? null
        : fbBuilder.writeString(_idDepSortie!);
    final int? altArrSortieIdOffset = _altArrSortieId == null ? null
        : fbBuilder.writeString(_altArrSortieId!);
    final int? altDepSortieIdOffset = _altDepSortieId == null ? null
        : fbBuilder.writeString(_altDepSortieId!);
    final int? reqCommentOffset = _reqComment == null ? null
        : fbBuilder.writeString(_reqComment!);
    final int? appCommentOffset = _appComment == null ? null
        : fbBuilder.writeString(_appComment!);
    final int? reqOrgOffset = _reqOrg == null ? null
        : fbBuilder.writeString(_reqOrg!);
    final int? reqInitialsOffset = _reqInitials == null ? null
        : fbBuilder.writeString(_reqInitials!);
    final int? appOrgOffset = _appOrg == null ? null
        : fbBuilder.writeString(_appOrg!);
    final int? appInitialsOffset = _appInitials == null ? null
        : fbBuilder.writeString(_appInitials!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(37);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idAirfieldSlotOffset);
    fbBuilder.addInt8(3, _status?.value);
    fbBuilder.addBool(4, _occupied);
    fbBuilder.addOffset(5, consumerOffset);
    fbBuilder.addOffset(6, occAircraftMdsOffset);
    fbBuilder.addOffset(7, occTailNumberOffset);
    fbBuilder.addOffset(8, callSignsOffset);
    fbBuilder.addOffset(9, missionIdOffset);
    fbBuilder.addInt32(10, _numAircraft);
    fbBuilder.addOffset(11, occStartTimeOffset);
    fbBuilder.addOffset(12, resAircraftMdsOffset);
    fbBuilder.addOffset(13, resTailNumberOffset);
    fbBuilder.addOffset(14, resTypeOffset);
    fbBuilder.addOffset(15, resReasonOffset);
    fbBuilder.addOffset(16, resMissionIdOffset);
    fbBuilder.addOffset(17, startTimeOffset);
    fbBuilder.addOffset(18, endTimeOffset);
    fbBuilder.addOffset(19, targetTimeOffset);
    fbBuilder.addOffset(20, idArrSortieOffset);
    fbBuilder.addOffset(21, idDepSortieOffset);
    fbBuilder.addOffset(22, altArrSortieIdOffset);
    fbBuilder.addOffset(23, altDepSortieIdOffset);
    fbBuilder.addOffset(24, reqCommentOffset);
    fbBuilder.addOffset(25, appCommentOffset);
    fbBuilder.addOffset(26, reqOrgOffset);
    fbBuilder.addOffset(27, reqInitialsOffset);
    fbBuilder.addOffset(28, appOrgOffset);
    fbBuilder.addOffset(29, appInitialsOffset);
    fbBuilder.addOffset(30, createdAtOffset);
    fbBuilder.addOffset(31, createdByOffset);
    fbBuilder.addOffset(32, sourceDlOffset);
    fbBuilder.addOffset(33, sourceOffset);
    fbBuilder.addOffset(34, originOffset);
    fbBuilder.addOffset(35, origNetworkOffset);
    fbBuilder.addInt8(36, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
