// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
class MtiTargetReportAbridged {
  MtiTargetReportAbridged._(this._bc, this._bcOffset);
  factory MtiTargetReportAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MtiTargetReportAbridged> reader = _MtiTargetReportAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Sequential count of this MTI report within the dwell.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get d321 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  ///  The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get d322 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  The East-West position of the reported detection, expressed as degrees East (positive) from the Prime Meridian.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get d323 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) from the Dwell Area Center Latitude.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get d324 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  The East-West position of the reported detection, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian from the Dwell Area Center Longitude.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get d325 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  Height of the reported detection, referenced to its position above the WGS 84 ellipsoid, in meters.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get d326 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  The component of velocity for the reported detection, expressed in centimeters per second, corrected for platform motion, along the line of sight between the sensor and the reported detection, where the positive direction is away from the sensor.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get d327 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  The target wrap velocity permits trackers to un-wrap velocities for targets with line-of-sight components large enough to exceed the first velocity period.  Expressed in centimeters/sec.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get d328 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Estimated signal-to-noise ratio (SNR) of the target return, in decibels.
  ///  Example: /// Example: 17
  ///  Constraints: No constraints specified.
  int get d329 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  ///  The classification of the target (i.e. vehicle, aircraft, â€¦).
  ///  Example: /// Example: vehicle
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get d3210 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Estimated probability that the target classification field is correctly classified.
  ///  Example: /// Example: 90
  ///  Constraints: No constraints specified.
  int get d3211 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 24, 0);
  ///  Standard deviation of the estimated slant range of the reported detection, in centimeters.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get d3212 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  Standard deviation of the position estimate, in the cross-range direction, of the reported detection, in decimeters.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get d3213 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Standard deviation of the estimated geodetic height, in meters.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get d3214 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 30, 0);
  ///  Standard deviation of the measured line-of-sight velocity component, in centimeters per second.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get d3215 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  The Truth Tag- Application is the Application Field truncated to 8 bits, from the Entity State Protocol Data Unit (PDU) used to generate the MTI Target.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get d3216 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  The Truth Tag - Entity is the Entity Field from the Entity State PDU used to generate the MTI Target.
  ///  Example: /// Example: 1234567890
  ///  Constraints: No constraints specified.
  int get d3217 => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 36, 0);
  ///  Estimated radar cross section of the target return, in half-decibels.
  ///  Example: /// Example: 98
  ///  Constraints: No constraints specified.
  int get d3218 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 38, 0);

  @override
  String toString() {
    return 'MtiTargetReportAbridged{d321: ${d321}, d322: ${d322}, d323: ${d323}, d324: ${d324}, d325: ${d325}, d326: ${d326}, d327: ${d327}, d328: ${d328}, d329: ${d329}, d3210: ${d3210}, d3211: ${d3211}, d3212: ${d3212}, d3213: ${d3213}, d3214: ${d3214}, d3215: ${d3215}, d3216: ${d3216}, d3217: ${d3217}, d3218: ${d3218}}';
  }
}

class _MtiTargetReportAbridgedReader extends fb.TableReader<MtiTargetReportAbridged> {
  const _MtiTargetReportAbridgedReader();

  @override
  MtiTargetReportAbridged createObject(fb.BufferContext bc, int offset) => 
    MtiTargetReportAbridged._(bc, offset);
}

class MtiTargetReportAbridgedBuilder {
  MtiTargetReportAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(18);
  }

  int addD321(int? d321) {
    fbBuilder.addInt32(0, d321);
    return fbBuilder.offset;
  }
  int addD322(double? d322) {
    fbBuilder.addFloat64(1, d322);
    return fbBuilder.offset;
  }
  int addD323(double? d323) {
    fbBuilder.addFloat64(2, d323);
    return fbBuilder.offset;
  }
  int addD324(int? d324) {
    fbBuilder.addInt32(3, d324);
    return fbBuilder.offset;
  }
  int addD325(int? d325) {
    fbBuilder.addInt32(4, d325);
    return fbBuilder.offset;
  }
  int addD326(int? d326) {
    fbBuilder.addInt32(5, d326);
    return fbBuilder.offset;
  }
  int addD327(int? d327) {
    fbBuilder.addInt32(6, d327);
    return fbBuilder.offset;
  }
  int addD328(int? d328) {
    fbBuilder.addInt32(7, d328);
    return fbBuilder.offset;
  }
  int addD329(int? d329) {
    fbBuilder.addInt32(8, d329);
    return fbBuilder.offset;
  }
  int addD3210Offset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addD3211(int? d3211) {
    fbBuilder.addInt32(10, d3211);
    return fbBuilder.offset;
  }
  int addD3212(int? d3212) {
    fbBuilder.addInt32(11, d3212);
    return fbBuilder.offset;
  }
  int addD3213(int? d3213) {
    fbBuilder.addInt32(12, d3213);
    return fbBuilder.offset;
  }
  int addD3214(int? d3214) {
    fbBuilder.addInt32(13, d3214);
    return fbBuilder.offset;
  }
  int addD3215(int? d3215) {
    fbBuilder.addInt32(14, d3215);
    return fbBuilder.offset;
  }
  int addD3216(int? d3216) {
    fbBuilder.addInt32(15, d3216);
    return fbBuilder.offset;
  }
  int addD3217(int? d3217) {
    fbBuilder.addInt64(16, d3217);
    return fbBuilder.offset;
  }
  int addD3218(int? d3218) {
    fbBuilder.addInt32(17, d3218);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MtiTargetReportAbridgedObjectBuilder extends fb.ObjectBuilder {
  final int? _d321;
  final double? _d322;
  final double? _d323;
  final int? _d324;
  final int? _d325;
  final int? _d326;
  final int? _d327;
  final int? _d328;
  final int? _d329;
  final String? _d3210;
  final int? _d3211;
  final int? _d3212;
  final int? _d3213;
  final int? _d3214;
  final int? _d3215;
  final int? _d3216;
  final int? _d3217;
  final int? _d3218;

  MtiTargetReportAbridgedObjectBuilder({
    int? d321,
    double? d322,
    double? d323,
    int? d324,
    int? d325,
    int? d326,
    int? d327,
    int? d328,
    int? d329,
    String? d3210,
    int? d3211,
    int? d3212,
    int? d3213,
    int? d3214,
    int? d3215,
    int? d3216,
    int? d3217,
    int? d3218,
  })
      : _d321 = d321,
        _d322 = d322,
        _d323 = d323,
        _d324 = d324,
        _d325 = d325,
        _d326 = d326,
        _d327 = d327,
        _d328 = d328,
        _d329 = d329,
        _d3210 = d3210,
        _d3211 = d3211,
        _d3212 = d3212,
        _d3213 = d3213,
        _d3214 = d3214,
        _d3215 = d3215,
        _d3216 = d3216,
        _d3217 = d3217,
        _d3218 = d3218;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? d3210Offset = _d3210 == null ? null
        : fbBuilder.writeString(_d3210!);
    fbBuilder.startTable(18);
    fbBuilder.addInt32(0, _d321);
    fbBuilder.addFloat64(1, _d322);
    fbBuilder.addFloat64(2, _d323);
    fbBuilder.addInt32(3, _d324);
    fbBuilder.addInt32(4, _d325);
    fbBuilder.addInt32(5, _d326);
    fbBuilder.addInt32(6, _d327);
    fbBuilder.addInt32(7, _d328);
    fbBuilder.addInt32(8, _d329);
    fbBuilder.addOffset(9, d3210Offset);
    fbBuilder.addInt32(10, _d3211);
    fbBuilder.addInt32(11, _d3212);
    fbBuilder.addInt32(12, _d3213);
    fbBuilder.addInt32(13, _d3214);
    fbBuilder.addInt32(14, _d3215);
    fbBuilder.addInt32(15, _d3216);
    fbBuilder.addInt64(16, _d3217);
    fbBuilder.addInt32(17, _d3218);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
