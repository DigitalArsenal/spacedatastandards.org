// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class ObjectOfInterestFullDataModeEnum {
  final int value;
  const ObjectOfInterestFullDataModeEnum._(this.value);

  factory ObjectOfInterestFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ObjectOfInterestFullDataModeEnum');
    }
    return result;
  }

  static ObjectOfInterestFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : ObjectOfInterestFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const ObjectOfInterestFullDataModeEnum REAL = ObjectOfInterestFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const ObjectOfInterestFullDataModeEnum TEST = ObjectOfInterestFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const ObjectOfInterestFullDataModeEnum SIMULATED = ObjectOfInterestFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const ObjectOfInterestFullDataModeEnum EXERCISE = ObjectOfInterestFullDataModeEnum._(3);
  static const Map<int, ObjectOfInterestFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<ObjectOfInterestFullDataModeEnum> reader = _ObjectOfInterestFullDataModeEnumReader();

  @override
  String toString() {
    return 'ObjectOfInterestFullDataModeEnum{value: $value}';
  }
}

class _ObjectOfInterestFullDataModeEnumReader extends fb.Reader<ObjectOfInterestFullDataModeEnum> {
  const _ObjectOfInterestFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  ObjectOfInterestFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      ObjectOfInterestFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// OnOrbit objects of interest, which include information about the last known state of the object.
class ObjectOfInterestFull {
  ObjectOfInterestFull._(this._bc, this._bcOffset);
  factory ObjectOfInterestFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ObjectOfInterestFull> reader = _ObjectOfInterestFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: OBJECTOFINTEREST-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  UUID of the parent Onorbit record.
  ///  Example: /// Example: REF-ONORBIT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Unique name of the object of interest event.
  ///  Example: /// Example: Example_name
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Sensor tasking start time for object of interest.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get sensorTaskingStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Sensor tasking stop time for object of interest.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get sensorTaskingStopTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Priority of the object of interest as an integer (1=highest priority).
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  int get priority => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
  ///  Example: /// Example: OPEN
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Time of last status change of the object of interest event.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get statusDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Description of the object of interest event.
  ///  Example: /// Example: Example description
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Last reported observation time in ISO 8601 UTC time, with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get lastObTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get missedObTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Possible delta V applications for the object of interest, in km/sec.
  ///  Example: /// Example: [1.1, 2.2, 3.3]
  ///  Constraints: No constraints specified.
  List<String>? get deltaVs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  Possible delta time applications for the object of interest, in seconds.
  ///  Example: /// Example: [1.1, 2.2, 3.3]
  ///  Constraints: No constraints specified.
  List<String>? get deltaTs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get svEpoch => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Last reported x position of the object in km, in J2000 coordinates.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get x => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Last reported y position of the object in km, in J2000 coordinates.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Last reported z position of the object in km, in J2000 coordinates.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Last reported x velocity of the object in km/sec, in J2000 coordinates.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get xvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Last reported y velocity of the object in km/sec, in J2000 coordinates.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get yvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Last reported z velocity of the object in km/sec, in J2000 coordinates.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get zvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get elsetEpoch => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get meanMotion => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get eccentricity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get inclination => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get raan => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get argOfPerigee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get meanAnomaly => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get revNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 62, 0);
  ///  Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get bStar => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get meanMotionDot => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get meanMotionDdot => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get semiMajorAxis => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get period => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get apogee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  double get perigee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Optional array of Onorbit IDs (idOnOrbit) representing satellites potentially affected by this object of interest.
  ///  Example: /// Example: ['AFFECTEDOBJECT1-ID', 'AFFECTEDOBJECT2-ID']
  ///  Constraints: No constraints specified.
  List<String>? get affectedObjects => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 78);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  ObjectOfInterestFullDataModeEnum get dataMode => ObjectOfInterestFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 94, 0));
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get onOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Manifolds associated with this object of interest.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get manifolds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 98);

  @override
  String toString() {
    return 'ObjectOfInterestFull{id: ${id}, classificationMarking: ${classificationMarking}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, name: ${name}, sensorTaskingStartTime: ${sensorTaskingStartTime}, sensorTaskingStopTime: ${sensorTaskingStopTime}, priority: ${priority}, status: ${status}, statusDate: ${statusDate}, description: ${description}, lastObTime: ${lastObTime}, missedObTime: ${missedObTime}, deltaVs: ${deltaVs}, deltaTs: ${deltaTs}, svEpoch: ${svEpoch}, x: ${x}, y: ${y}, z: ${z}, xvel: ${xvel}, yvel: ${yvel}, zvel: ${zvel}, elsetEpoch: ${elsetEpoch}, meanMotion: ${meanMotion}, eccentricity: ${eccentricity}, inclination: ${inclination}, raan: ${raan}, argOfPerigee: ${argOfPerigee}, meanAnomaly: ${meanAnomaly}, revNo: ${revNo}, bStar: ${bStar}, meanMotionDot: ${meanMotionDot}, meanMotionDdot: ${meanMotionDdot}, semiMajorAxis: ${semiMajorAxis}, period: ${period}, apogee: ${apogee}, perigee: ${perigee}, affectedObjects: ${affectedObjects}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, onOrbit: ${onOrbit}, manifolds: ${manifolds}}';
  }
}

class _ObjectOfInterestFullReader extends fb.TableReader<ObjectOfInterestFull> {
  const _ObjectOfInterestFullReader();

  @override
  ObjectOfInterestFull createObject(fb.BufferContext bc, int offset) => 
    ObjectOfInterestFull._(bc, offset);
}

class ObjectOfInterestFullBuilder {
  ObjectOfInterestFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(48);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(3, satNo);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSensorTaskingStartTimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSensorTaskingStopTimeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addPriority(int? priority) {
    fbBuilder.addInt32(7, priority);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addStatusDateOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addLastObTimeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addMissedObTimeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addDeltaVsOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addDeltaTsOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addSvEpochOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addX(double? x) {
    fbBuilder.addFloat64(16, x);
    return fbBuilder.offset;
  }
  int addY(double? y) {
    fbBuilder.addFloat64(17, y);
    return fbBuilder.offset;
  }
  int addZ(double? z) {
    fbBuilder.addFloat64(18, z);
    return fbBuilder.offset;
  }
  int addXvel(double? xvel) {
    fbBuilder.addFloat64(19, xvel);
    return fbBuilder.offset;
  }
  int addYvel(double? yvel) {
    fbBuilder.addFloat64(20, yvel);
    return fbBuilder.offset;
  }
  int addZvel(double? zvel) {
    fbBuilder.addFloat64(21, zvel);
    return fbBuilder.offset;
  }
  int addElsetEpochOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addMeanMotion(double? meanMotion) {
    fbBuilder.addFloat64(23, meanMotion);
    return fbBuilder.offset;
  }
  int addEccentricity(double? eccentricity) {
    fbBuilder.addFloat64(24, eccentricity);
    return fbBuilder.offset;
  }
  int addInclination(double? inclination) {
    fbBuilder.addFloat64(25, inclination);
    return fbBuilder.offset;
  }
  int addRaan(double? raan) {
    fbBuilder.addFloat64(26, raan);
    return fbBuilder.offset;
  }
  int addArgOfPerigee(double? argOfPerigee) {
    fbBuilder.addFloat64(27, argOfPerigee);
    return fbBuilder.offset;
  }
  int addMeanAnomaly(double? meanAnomaly) {
    fbBuilder.addFloat64(28, meanAnomaly);
    return fbBuilder.offset;
  }
  int addRevNo(int? revNo) {
    fbBuilder.addInt32(29, revNo);
    return fbBuilder.offset;
  }
  int addBStar(double? bStar) {
    fbBuilder.addFloat64(30, bStar);
    return fbBuilder.offset;
  }
  int addMeanMotionDot(double? meanMotionDot) {
    fbBuilder.addFloat64(31, meanMotionDot);
    return fbBuilder.offset;
  }
  int addMeanMotionDdot(double? meanMotionDdot) {
    fbBuilder.addFloat64(32, meanMotionDdot);
    return fbBuilder.offset;
  }
  int addSemiMajorAxis(double? semiMajorAxis) {
    fbBuilder.addFloat64(33, semiMajorAxis);
    return fbBuilder.offset;
  }
  int addPeriod(double? period) {
    fbBuilder.addFloat64(34, period);
    return fbBuilder.offset;
  }
  int addApogee(double? apogee) {
    fbBuilder.addFloat64(35, apogee);
    return fbBuilder.offset;
  }
  int addPerigee(double? perigee) {
    fbBuilder.addFloat64(36, perigee);
    return fbBuilder.offset;
  }
  int addAffectedObjectsOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addDataMode(ObjectOfInterestFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(45, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addManifoldsOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ObjectOfInterestFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _name;
  final String? _sensorTaskingStartTime;
  final String? _sensorTaskingStopTime;
  final int? _priority;
  final String? _status;
  final String? _statusDate;
  final String? _description;
  final String? _lastObTime;
  final String? _missedObTime;
  final List<String>? _deltaVs;
  final List<String>? _deltaTs;
  final String? _svEpoch;
  final double? _x;
  final double? _y;
  final double? _z;
  final double? _xvel;
  final double? _yvel;
  final double? _zvel;
  final String? _elsetEpoch;
  final double? _meanMotion;
  final double? _eccentricity;
  final double? _inclination;
  final double? _raan;
  final double? _argOfPerigee;
  final double? _meanAnomaly;
  final int? _revNo;
  final double? _bStar;
  final double? _meanMotionDot;
  final double? _meanMotionDdot;
  final double? _semiMajorAxis;
  final double? _period;
  final double? _apogee;
  final double? _perigee;
  final List<String>? _affectedObjects;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final ObjectOfInterestFullDataModeEnum? _dataMode;
  final String? _onOrbit;
  final List<String>? _manifolds;

  ObjectOfInterestFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idOnOrbit,
    int? satNo,
    String? name,
    String? sensorTaskingStartTime,
    String? sensorTaskingStopTime,
    int? priority,
    String? status,
    String? statusDate,
    String? description,
    String? lastObTime,
    String? missedObTime,
    List<String>? deltaVs,
    List<String>? deltaTs,
    String? svEpoch,
    double? x,
    double? y,
    double? z,
    double? xvel,
    double? yvel,
    double? zvel,
    String? elsetEpoch,
    double? meanMotion,
    double? eccentricity,
    double? inclination,
    double? raan,
    double? argOfPerigee,
    double? meanAnomaly,
    int? revNo,
    double? bStar,
    double? meanMotionDot,
    double? meanMotionDdot,
    double? semiMajorAxis,
    double? period,
    double? apogee,
    double? perigee,
    List<String>? affectedObjects,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    ObjectOfInterestFullDataModeEnum? dataMode,
    String? onOrbit,
    List<String>? manifolds,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _name = name,
        _sensorTaskingStartTime = sensorTaskingStartTime,
        _sensorTaskingStopTime = sensorTaskingStopTime,
        _priority = priority,
        _status = status,
        _statusDate = statusDate,
        _description = description,
        _lastObTime = lastObTime,
        _missedObTime = missedObTime,
        _deltaVs = deltaVs,
        _deltaTs = deltaTs,
        _svEpoch = svEpoch,
        _x = x,
        _y = y,
        _z = z,
        _xvel = xvel,
        _yvel = yvel,
        _zvel = zvel,
        _elsetEpoch = elsetEpoch,
        _meanMotion = meanMotion,
        _eccentricity = eccentricity,
        _inclination = inclination,
        _raan = raan,
        _argOfPerigee = argOfPerigee,
        _meanAnomaly = meanAnomaly,
        _revNo = revNo,
        _bStar = bStar,
        _meanMotionDot = meanMotionDot,
        _meanMotionDdot = meanMotionDdot,
        _semiMajorAxis = semiMajorAxis,
        _period = period,
        _apogee = apogee,
        _perigee = perigee,
        _affectedObjects = affectedObjects,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _onOrbit = onOrbit,
        _manifolds = manifolds;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? sensorTaskingStartTimeOffset = _sensorTaskingStartTime == null ? null
        : fbBuilder.writeString(_sensorTaskingStartTime!);
    final int? sensorTaskingStopTimeOffset = _sensorTaskingStopTime == null ? null
        : fbBuilder.writeString(_sensorTaskingStopTime!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? statusDateOffset = _statusDate == null ? null
        : fbBuilder.writeString(_statusDate!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? lastObTimeOffset = _lastObTime == null ? null
        : fbBuilder.writeString(_lastObTime!);
    final int? missedObTimeOffset = _missedObTime == null ? null
        : fbBuilder.writeString(_missedObTime!);
    final int? deltaVsOffset = _deltaVs == null ? null
        : fbBuilder.writeList(_deltaVs!.map(fbBuilder.writeString).toList());
    final int? deltaTsOffset = _deltaTs == null ? null
        : fbBuilder.writeList(_deltaTs!.map(fbBuilder.writeString).toList());
    final int? svEpochOffset = _svEpoch == null ? null
        : fbBuilder.writeString(_svEpoch!);
    final int? elsetEpochOffset = _elsetEpoch == null ? null
        : fbBuilder.writeString(_elsetEpoch!);
    final int? affectedObjectsOffset = _affectedObjects == null ? null
        : fbBuilder.writeList(_affectedObjects!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? onOrbitOffset = _onOrbit == null ? null
        : fbBuilder.writeString(_onOrbit!);
    final int? manifoldsOffset = _manifolds == null ? null
        : fbBuilder.writeList(_manifolds!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(48);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idOnOrbitOffset);
    fbBuilder.addInt32(3, _satNo);
    fbBuilder.addOffset(4, nameOffset);
    fbBuilder.addOffset(5, sensorTaskingStartTimeOffset);
    fbBuilder.addOffset(6, sensorTaskingStopTimeOffset);
    fbBuilder.addInt32(7, _priority);
    fbBuilder.addOffset(8, statusOffset);
    fbBuilder.addOffset(9, statusDateOffset);
    fbBuilder.addOffset(10, descriptionOffset);
    fbBuilder.addOffset(11, lastObTimeOffset);
    fbBuilder.addOffset(12, missedObTimeOffset);
    fbBuilder.addOffset(13, deltaVsOffset);
    fbBuilder.addOffset(14, deltaTsOffset);
    fbBuilder.addOffset(15, svEpochOffset);
    fbBuilder.addFloat64(16, _x);
    fbBuilder.addFloat64(17, _y);
    fbBuilder.addFloat64(18, _z);
    fbBuilder.addFloat64(19, _xvel);
    fbBuilder.addFloat64(20, _yvel);
    fbBuilder.addFloat64(21, _zvel);
    fbBuilder.addOffset(22, elsetEpochOffset);
    fbBuilder.addFloat64(23, _meanMotion);
    fbBuilder.addFloat64(24, _eccentricity);
    fbBuilder.addFloat64(25, _inclination);
    fbBuilder.addFloat64(26, _raan);
    fbBuilder.addFloat64(27, _argOfPerigee);
    fbBuilder.addFloat64(28, _meanAnomaly);
    fbBuilder.addInt32(29, _revNo);
    fbBuilder.addFloat64(30, _bStar);
    fbBuilder.addFloat64(31, _meanMotionDot);
    fbBuilder.addFloat64(32, _meanMotionDdot);
    fbBuilder.addFloat64(33, _semiMajorAxis);
    fbBuilder.addFloat64(34, _period);
    fbBuilder.addFloat64(35, _apogee);
    fbBuilder.addFloat64(36, _perigee);
    fbBuilder.addOffset(37, affectedObjectsOffset);
    fbBuilder.addOffset(38, createdAtOffset);
    fbBuilder.addOffset(39, createdByOffset);
    fbBuilder.addOffset(40, updatedAtOffset);
    fbBuilder.addOffset(41, updatedByOffset);
    fbBuilder.addOffset(42, sourceOffset);
    fbBuilder.addOffset(43, originOffset);
    fbBuilder.addOffset(44, origNetworkOffset);
    fbBuilder.addInt8(45, _dataMode?.value);
    fbBuilder.addOffset(46, onOrbitOffset);
    fbBuilder.addOffset(47, manifoldsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
