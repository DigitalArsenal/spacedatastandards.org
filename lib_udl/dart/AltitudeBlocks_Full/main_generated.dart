// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Minimum and maximum altitude bounds for the track.
class AltitudeBlocksFull {
  AltitudeBlocksFull._(this._bc, this._bcOffset);
  factory AltitudeBlocksFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AltitudeBlocksFull> reader = _AltitudeBlocksFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Sequencing field for the altitude block.
  ///  Example: /// Example: A1
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get altitudeSequenceId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Lowest altitude of the track route altitude block above mean sea level in feet.
  ///  Example: /// Example: 27000.1
  ///  Constraints: No constraints specified.
  double get lowerAltitude => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  Highest altitude of the track route altitude block above mean sea level in feet.
  ///  Example: /// Example: 27200.5
  ///  Constraints: No constraints specified.
  double get upperAltitude => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);

  @override
  String toString() {
    return 'AltitudeBlocksFull{altitudeSequenceId: ${altitudeSequenceId}, lowerAltitude: ${lowerAltitude}, upperAltitude: ${upperAltitude}}';
  }
}

class _AltitudeBlocksFullReader extends fb.TableReader<AltitudeBlocksFull> {
  const _AltitudeBlocksFullReader();

  @override
  AltitudeBlocksFull createObject(fb.BufferContext bc, int offset) => 
    AltitudeBlocksFull._(bc, offset);
}

class AltitudeBlocksFullBuilder {
  AltitudeBlocksFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addAltitudeSequenceIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addLowerAltitude(double? lowerAltitude) {
    fbBuilder.addFloat64(1, lowerAltitude);
    return fbBuilder.offset;
  }
  int addUpperAltitude(double? upperAltitude) {
    fbBuilder.addFloat64(2, upperAltitude);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AltitudeBlocksFullObjectBuilder extends fb.ObjectBuilder {
  final String? _altitudeSequenceId;
  final double? _lowerAltitude;
  final double? _upperAltitude;

  AltitudeBlocksFullObjectBuilder({
    String? altitudeSequenceId,
    double? lowerAltitude,
    double? upperAltitude,
  })
      : _altitudeSequenceId = altitudeSequenceId,
        _lowerAltitude = lowerAltitude,
        _upperAltitude = upperAltitude;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? altitudeSequenceIdOffset = _altitudeSequenceId == null ? null
        : fbBuilder.writeString(_altitudeSequenceId!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, altitudeSequenceIdOffset);
    fbBuilder.addFloat64(1, _lowerAltitude);
    fbBuilder.addFloat64(2, _upperAltitude);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
