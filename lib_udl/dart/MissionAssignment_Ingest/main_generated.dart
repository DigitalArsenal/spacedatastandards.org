// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class MissionAssignmentIngestDataModeEnum {
  final int value;
  const MissionAssignmentIngestDataModeEnum._(this.value);

  factory MissionAssignmentIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum MissionAssignmentIngestDataModeEnum');
    }
    return result;
  }

  static MissionAssignmentIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : MissionAssignmentIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const MissionAssignmentIngestDataModeEnum REAL = MissionAssignmentIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const MissionAssignmentIngestDataModeEnum TEST = MissionAssignmentIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const MissionAssignmentIngestDataModeEnum SIMULATED = MissionAssignmentIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const MissionAssignmentIngestDataModeEnum EXERCISE = MissionAssignmentIngestDataModeEnum._(3);
  static const Map<int, MissionAssignmentIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<MissionAssignmentIngestDataModeEnum> reader = _MissionAssignmentIngestDataModeEnumReader();

  @override
  String toString() {
    return 'MissionAssignmentIngestDataModeEnum{value: $value}';
  }
}

class _MissionAssignmentIngestDataModeEnumReader extends fb.Reader<MissionAssignmentIngestDataModeEnum> {
  const _MissionAssignmentIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  MissionAssignmentIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      MissionAssignmentIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Platform mission assignment data.
class MissionAssignmentIngest {
  MissionAssignmentIngest._(this._bc, this._bcOffset);
  factory MissionAssignmentIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MissionAssignmentIngest> reader = _MissionAssignmentIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: MISSIONASSIGNMENT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The track ID that the status is referencing, addressee.
  ///  Example: /// Example: TRK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trkId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The timestamp of the mission data, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get ts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The mission assignment discrete value.
  ///  Example: /// Example: MAD
  ///  Constraints: Minimum length = 1, Maximum length = 16
  String? get mad => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Receipt/Compliance, values from TABLE B-9.
  ///  Example: /// Example: RC-123
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get rc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Recurrence rate, receipt/compliance.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get rr => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  Track number objective.
  ///  Example: /// Example: TRACK_NUMBER
  ///  Constraints: No constraints specified.
  String? get tno => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Threat warning environment.
  ///  Example: /// Example: THREAT_WARNING
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get twenv => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Origin of index number.
  ///  Example: /// Example: ORIGIN
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get orginx => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Environment.
  ///  Example: /// Example: ENV
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get env => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Strength.
  ///  Example: /// Example: STRENGTH
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get sz => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Index number.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get index => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  TARGET POSITION CONTINUATION WORD - number of associated dmpis.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get c1associateddmpis => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
  ///  Example: /// Example: C2SPC
  ///  Constraints: No constraints specified.
  String? get c2spc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
  ///  Example: /// Example: C2AIR
  ///  Constraints: No constraints specified.
  String? get c2air => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
  ///  Example: /// Example: C2SUR
  ///  Constraints: No constraints specified.
  String? get c2sur => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
  ///  Example: /// Example: C2LND
  ///  Constraints: No constraints specified.
  String? get c2lnd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  TARGET DATA CONTINUATION WORD - identity.
  ///  Example: /// Example: C2ID
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c2id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
  ///  Example: /// Example: C2IDAMP
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c2idamplifyingdescriptor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get c2alt => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 48, 0);
  ///  TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get c2crs => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 50, 0);
  ///  TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get c2spd => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  TARGET DATA CONTINUATION WORD - special interest indicator.
  ///  Example: /// Example: C2SPECIAL
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c2specialinterestindicator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  TARGET DATA CONTINUATION WORD - exercise indicator.
  ///  Example: /// Example: C2EXERCISE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c2exerciseindicator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  TARGET DATA CONTINUATION WORD - method of fire.
  ///  Example: /// Example: MOF
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c2exercisemof => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get c3lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get c3lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get c3elv => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  TARGET DATA CONTINUATION WORD - point type 1.
  ///  Example: /// Example: C3PTL
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c3ptl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  TARGET DATA CONTINUATION WORD - point number.
  ///  Example: /// Example: C3PTNUM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c3ptnum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
  ///  Example: /// Example: C4TGT
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c4tgt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  SURFACE ATTACK CONTINUATION WORD - target defenses.
  ///  Example: /// Example: C4DEF
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c4def => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get c4runin => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 74, 0);
  ///  SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  int get c4egress => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 76, 0);
  ///  SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get c4numberofstores => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 78, 0);
  ///  SURFACE ATTACK CONTINUATION WORD - type of stores.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get c4typeofstores => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 80, 0);
  ///  SURFACE ATTACK CONTINUATION WORD - time discrete.
  ///  Example: /// Example: C4TIMED
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c4timediscrete => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  SURFACE ATTACK CONTINUATION WORD - hour.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  int get c4tm => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 84, 0);
  ///  SURFACE ATTACK CONTINUATION WORD - minute.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get c4colon => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 86, 0);
  ///  SURFACE ATTACK CONTINUATION WORD - mode of delivery.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get c4mod => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 88, 0);
  ///  CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get c5haeadj => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 90, 0);
  ///  CONTINUATION WORD - time window.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get c5tw => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 92, 0);
  ///  CONTINUATION WORD - target bearing.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get c5tgtbrng => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 94, 0);
  ///  CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get c5latlsb => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 96, 0);
  ///  CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get c5lonlsb => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 98, 0);
  ///  CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get c5elevationlsbs => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 100, 0);
  ///  SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get c5colon => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 102, 0);
  ///  TARGETING CONTINUATION WORD - laser illuminator code.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get c6laser => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 104, 0);
  ///  TARGETING CONTINUATION WORD - index number, related, 0=NS.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get c6intel => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 106, 0);
  ///  TARGETING CONTINUATION WORD - track number, related to 3.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get c6tnr3 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 108, 0);
  ///  TARGETING CONTINUATION WORD - designator/seeker pulse code type.
  ///  Example: /// Example: C6DSPCT
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c6dspct => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);
  ///  TARGETING CONTINUATION WORD - designator/seeker pulse code.
  ///  Example: /// Example: C6DSPC
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c6dspc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  TARGETING CONTINUATION WORD - first pulse/last pulse mode.
  ///  Example: /// Example: C6FPLPM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c6fplpm => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 114);
  ///  TARGETING CONTINUATION WORD - long pulse mode.
  ///  Example: /// Example: C6LONGPM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get c6longpm => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);
  ///  THIRD PARTY CONTINUATION WORD  - track number, index originator.
  ///  Example: /// Example: C7TNOR
  ///  Constraints: No constraints specified.
  String? get c7tnor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  THIRD PARTY CONTINUATION WORD  - index number, third party.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get c7in3p => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 120, 0);
  ///  THIRD PARTY CONTINUATION WORD  - elevation angle, 2.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  double get c7elang2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 124);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 126);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 128);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 130);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  MissionAssignmentIngestDataModeEnum get dataMode => MissionAssignmentIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 132, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 134);

  @override
  String toString() {
    return 'MissionAssignmentIngest{id: ${id}, classificationMarking: ${classificationMarking}, trkId: ${trkId}, ts: ${ts}, mad: ${mad}, rc: ${rc}, rr: ${rr}, tno: ${tno}, twenv: ${twenv}, lat: ${lat}, lon: ${lon}, orginx: ${orginx}, env: ${env}, sz: ${sz}, index: ${index}, c1associateddmpis: ${c1associateddmpis}, c2spc: ${c2spc}, c2air: ${c2air}, c2sur: ${c2sur}, c2lnd: ${c2lnd}, c2id: ${c2id}, c2idamplifyingdescriptor: ${c2idamplifyingdescriptor}, c2alt: ${c2alt}, c2crs: ${c2crs}, c2spd: ${c2spd}, c2specialinterestindicator: ${c2specialinterestindicator}, c2exerciseindicator: ${c2exerciseindicator}, c2exercisemof: ${c2exercisemof}, c3lat: ${c3lat}, c3lon: ${c3lon}, c3elv: ${c3elv}, c3ptl: ${c3ptl}, c3ptnum: ${c3ptnum}, c4tgt: ${c4tgt}, c4def: ${c4def}, c4runin: ${c4runin}, c4egress: ${c4egress}, c4numberofstores: ${c4numberofstores}, c4typeofstores: ${c4typeofstores}, c4timediscrete: ${c4timediscrete}, c4tm: ${c4tm}, c4colon: ${c4colon}, c4mod: ${c4mod}, c5haeadj: ${c5haeadj}, c5tw: ${c5tw}, c5tgtbrng: ${c5tgtbrng}, c5latlsb: ${c5latlsb}, c5lonlsb: ${c5lonlsb}, c5elevationlsbs: ${c5elevationlsbs}, c5colon: ${c5colon}, c6laser: ${c6laser}, c6intel: ${c6intel}, c6tnr3: ${c6tnr3}, c6dspct: ${c6dspct}, c6dspc: ${c6dspc}, c6fplpm: ${c6fplpm}, c6longpm: ${c6longpm}, c7tnor: ${c7tnor}, c7in3p: ${c7in3p}, c7elang2: ${c7elang2}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _MissionAssignmentIngestReader extends fb.TableReader<MissionAssignmentIngest> {
  const _MissionAssignmentIngestReader();

  @override
  MissionAssignmentIngest createObject(fb.BufferContext bc, int offset) => 
    MissionAssignmentIngest._(bc, offset);
}

class MissionAssignmentIngestBuilder {
  MissionAssignmentIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(66);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTrkIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMadOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addRcOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addRr(int? rr) {
    fbBuilder.addInt32(6, rr);
    return fbBuilder.offset;
  }
  int addTnoOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addTwenvOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(9, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(10, lon);
    return fbBuilder.offset;
  }
  int addOrginxOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addEnvOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addSzOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addIndex(int? index) {
    fbBuilder.addInt32(14, index);
    return fbBuilder.offset;
  }
  int addC1associateddmpis(int? c1associateddmpis) {
    fbBuilder.addInt32(15, c1associateddmpis);
    return fbBuilder.offset;
  }
  int addC2spcOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addC2airOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addC2surOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addC2lndOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addC2idOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addC2idamplifyingdescriptorOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addC2alt(int? c2alt) {
    fbBuilder.addInt32(22, c2alt);
    return fbBuilder.offset;
  }
  int addC2crs(int? c2crs) {
    fbBuilder.addInt32(23, c2crs);
    return fbBuilder.offset;
  }
  int addC2spd(int? c2spd) {
    fbBuilder.addInt32(24, c2spd);
    return fbBuilder.offset;
  }
  int addC2specialinterestindicatorOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addC2exerciseindicatorOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addC2exercisemofOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addC3lat(double? c3lat) {
    fbBuilder.addFloat64(28, c3lat);
    return fbBuilder.offset;
  }
  int addC3lon(double? c3lon) {
    fbBuilder.addFloat64(29, c3lon);
    return fbBuilder.offset;
  }
  int addC3elv(double? c3elv) {
    fbBuilder.addFloat64(30, c3elv);
    return fbBuilder.offset;
  }
  int addC3ptlOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addC3ptnumOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addC4tgtOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addC4defOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addC4runin(int? c4runin) {
    fbBuilder.addInt32(35, c4runin);
    return fbBuilder.offset;
  }
  int addC4egress(int? c4egress) {
    fbBuilder.addInt32(36, c4egress);
    return fbBuilder.offset;
  }
  int addC4numberofstores(int? c4numberofstores) {
    fbBuilder.addInt32(37, c4numberofstores);
    return fbBuilder.offset;
  }
  int addC4typeofstores(int? c4typeofstores) {
    fbBuilder.addInt32(38, c4typeofstores);
    return fbBuilder.offset;
  }
  int addC4timediscreteOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addC4tm(int? c4tm) {
    fbBuilder.addInt32(40, c4tm);
    return fbBuilder.offset;
  }
  int addC4colon(int? c4colon) {
    fbBuilder.addInt32(41, c4colon);
    return fbBuilder.offset;
  }
  int addC4mod(int? c4mod) {
    fbBuilder.addInt32(42, c4mod);
    return fbBuilder.offset;
  }
  int addC5haeadj(int? c5haeadj) {
    fbBuilder.addInt32(43, c5haeadj);
    return fbBuilder.offset;
  }
  int addC5tw(int? c5tw) {
    fbBuilder.addInt32(44, c5tw);
    return fbBuilder.offset;
  }
  int addC5tgtbrng(int? c5tgtbrng) {
    fbBuilder.addInt32(45, c5tgtbrng);
    return fbBuilder.offset;
  }
  int addC5latlsb(int? c5latlsb) {
    fbBuilder.addInt32(46, c5latlsb);
    return fbBuilder.offset;
  }
  int addC5lonlsb(int? c5lonlsb) {
    fbBuilder.addInt32(47, c5lonlsb);
    return fbBuilder.offset;
  }
  int addC5elevationlsbs(int? c5elevationlsbs) {
    fbBuilder.addInt32(48, c5elevationlsbs);
    return fbBuilder.offset;
  }
  int addC5colon(int? c5colon) {
    fbBuilder.addInt32(49, c5colon);
    return fbBuilder.offset;
  }
  int addC6laser(int? c6laser) {
    fbBuilder.addInt32(50, c6laser);
    return fbBuilder.offset;
  }
  int addC6intel(int? c6intel) {
    fbBuilder.addInt32(51, c6intel);
    return fbBuilder.offset;
  }
  int addC6tnr3(int? c6tnr3) {
    fbBuilder.addInt32(52, c6tnr3);
    return fbBuilder.offset;
  }
  int addC6dspctOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addC6dspcOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addC6fplpmOffset(int? offset) {
    fbBuilder.addOffset(55, offset);
    return fbBuilder.offset;
  }
  int addC6longpmOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addC7tnorOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addC7in3p(int? c7in3p) {
    fbBuilder.addInt32(58, c7in3p);
    return fbBuilder.offset;
  }
  int addC7elang2(double? c7elang2) {
    fbBuilder.addFloat64(59, c7elang2);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addDataMode(MissionAssignmentIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(64, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(65, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MissionAssignmentIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _trkId;
  final String? _ts;
  final String? _mad;
  final String? _rc;
  final int? _rr;
  final String? _tno;
  final String? _twenv;
  final double? _lat;
  final double? _lon;
  final String? _orginx;
  final String? _env;
  final String? _sz;
  final int? _index;
  final int? _c1associateddmpis;
  final String? _c2spc;
  final String? _c2air;
  final String? _c2sur;
  final String? _c2lnd;
  final String? _c2id;
  final String? _c2idamplifyingdescriptor;
  final int? _c2alt;
  final int? _c2crs;
  final int? _c2spd;
  final String? _c2specialinterestindicator;
  final String? _c2exerciseindicator;
  final String? _c2exercisemof;
  final double? _c3lat;
  final double? _c3lon;
  final double? _c3elv;
  final String? _c3ptl;
  final String? _c3ptnum;
  final String? _c4tgt;
  final String? _c4def;
  final int? _c4runin;
  final int? _c4egress;
  final int? _c4numberofstores;
  final int? _c4typeofstores;
  final String? _c4timediscrete;
  final int? _c4tm;
  final int? _c4colon;
  final int? _c4mod;
  final int? _c5haeadj;
  final int? _c5tw;
  final int? _c5tgtbrng;
  final int? _c5latlsb;
  final int? _c5lonlsb;
  final int? _c5elevationlsbs;
  final int? _c5colon;
  final int? _c6laser;
  final int? _c6intel;
  final int? _c6tnr3;
  final String? _c6dspct;
  final String? _c6dspc;
  final String? _c6fplpm;
  final String? _c6longpm;
  final String? _c7tnor;
  final int? _c7in3p;
  final double? _c7elang2;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final MissionAssignmentIngestDataModeEnum? _dataMode;
  final String? _origNetwork;

  MissionAssignmentIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? trkId,
    String? ts,
    String? mad,
    String? rc,
    int? rr,
    String? tno,
    String? twenv,
    double? lat,
    double? lon,
    String? orginx,
    String? env,
    String? sz,
    int? index,
    int? c1associateddmpis,
    String? c2spc,
    String? c2air,
    String? c2sur,
    String? c2lnd,
    String? c2id,
    String? c2idamplifyingdescriptor,
    int? c2alt,
    int? c2crs,
    int? c2spd,
    String? c2specialinterestindicator,
    String? c2exerciseindicator,
    String? c2exercisemof,
    double? c3lat,
    double? c3lon,
    double? c3elv,
    String? c3ptl,
    String? c3ptnum,
    String? c4tgt,
    String? c4def,
    int? c4runin,
    int? c4egress,
    int? c4numberofstores,
    int? c4typeofstores,
    String? c4timediscrete,
    int? c4tm,
    int? c4colon,
    int? c4mod,
    int? c5haeadj,
    int? c5tw,
    int? c5tgtbrng,
    int? c5latlsb,
    int? c5lonlsb,
    int? c5elevationlsbs,
    int? c5colon,
    int? c6laser,
    int? c6intel,
    int? c6tnr3,
    String? c6dspct,
    String? c6dspc,
    String? c6fplpm,
    String? c6longpm,
    String? c7tnor,
    int? c7in3p,
    double? c7elang2,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    MissionAssignmentIngestDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _trkId = trkId,
        _ts = ts,
        _mad = mad,
        _rc = rc,
        _rr = rr,
        _tno = tno,
        _twenv = twenv,
        _lat = lat,
        _lon = lon,
        _orginx = orginx,
        _env = env,
        _sz = sz,
        _index = index,
        _c1associateddmpis = c1associateddmpis,
        _c2spc = c2spc,
        _c2air = c2air,
        _c2sur = c2sur,
        _c2lnd = c2lnd,
        _c2id = c2id,
        _c2idamplifyingdescriptor = c2idamplifyingdescriptor,
        _c2alt = c2alt,
        _c2crs = c2crs,
        _c2spd = c2spd,
        _c2specialinterestindicator = c2specialinterestindicator,
        _c2exerciseindicator = c2exerciseindicator,
        _c2exercisemof = c2exercisemof,
        _c3lat = c3lat,
        _c3lon = c3lon,
        _c3elv = c3elv,
        _c3ptl = c3ptl,
        _c3ptnum = c3ptnum,
        _c4tgt = c4tgt,
        _c4def = c4def,
        _c4runin = c4runin,
        _c4egress = c4egress,
        _c4numberofstores = c4numberofstores,
        _c4typeofstores = c4typeofstores,
        _c4timediscrete = c4timediscrete,
        _c4tm = c4tm,
        _c4colon = c4colon,
        _c4mod = c4mod,
        _c5haeadj = c5haeadj,
        _c5tw = c5tw,
        _c5tgtbrng = c5tgtbrng,
        _c5latlsb = c5latlsb,
        _c5lonlsb = c5lonlsb,
        _c5elevationlsbs = c5elevationlsbs,
        _c5colon = c5colon,
        _c6laser = c6laser,
        _c6intel = c6intel,
        _c6tnr3 = c6tnr3,
        _c6dspct = c6dspct,
        _c6dspc = c6dspc,
        _c6fplpm = c6fplpm,
        _c6longpm = c6longpm,
        _c7tnor = c7tnor,
        _c7in3p = c7in3p,
        _c7elang2 = c7elang2,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? trkIdOffset = _trkId == null ? null
        : fbBuilder.writeString(_trkId!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeString(_ts!);
    final int? madOffset = _mad == null ? null
        : fbBuilder.writeString(_mad!);
    final int? rcOffset = _rc == null ? null
        : fbBuilder.writeString(_rc!);
    final int? tnoOffset = _tno == null ? null
        : fbBuilder.writeString(_tno!);
    final int? twenvOffset = _twenv == null ? null
        : fbBuilder.writeString(_twenv!);
    final int? orginxOffset = _orginx == null ? null
        : fbBuilder.writeString(_orginx!);
    final int? envOffset = _env == null ? null
        : fbBuilder.writeString(_env!);
    final int? szOffset = _sz == null ? null
        : fbBuilder.writeString(_sz!);
    final int? c2spcOffset = _c2spc == null ? null
        : fbBuilder.writeString(_c2spc!);
    final int? c2airOffset = _c2air == null ? null
        : fbBuilder.writeString(_c2air!);
    final int? c2surOffset = _c2sur == null ? null
        : fbBuilder.writeString(_c2sur!);
    final int? c2lndOffset = _c2lnd == null ? null
        : fbBuilder.writeString(_c2lnd!);
    final int? c2idOffset = _c2id == null ? null
        : fbBuilder.writeString(_c2id!);
    final int? c2idamplifyingdescriptorOffset = _c2idamplifyingdescriptor == null ? null
        : fbBuilder.writeString(_c2idamplifyingdescriptor!);
    final int? c2specialinterestindicatorOffset = _c2specialinterestindicator == null ? null
        : fbBuilder.writeString(_c2specialinterestindicator!);
    final int? c2exerciseindicatorOffset = _c2exerciseindicator == null ? null
        : fbBuilder.writeString(_c2exerciseindicator!);
    final int? c2exercisemofOffset = _c2exercisemof == null ? null
        : fbBuilder.writeString(_c2exercisemof!);
    final int? c3ptlOffset = _c3ptl == null ? null
        : fbBuilder.writeString(_c3ptl!);
    final int? c3ptnumOffset = _c3ptnum == null ? null
        : fbBuilder.writeString(_c3ptnum!);
    final int? c4tgtOffset = _c4tgt == null ? null
        : fbBuilder.writeString(_c4tgt!);
    final int? c4defOffset = _c4def == null ? null
        : fbBuilder.writeString(_c4def!);
    final int? c4timediscreteOffset = _c4timediscrete == null ? null
        : fbBuilder.writeString(_c4timediscrete!);
    final int? c6dspctOffset = _c6dspct == null ? null
        : fbBuilder.writeString(_c6dspct!);
    final int? c6dspcOffset = _c6dspc == null ? null
        : fbBuilder.writeString(_c6dspc!);
    final int? c6fplpmOffset = _c6fplpm == null ? null
        : fbBuilder.writeString(_c6fplpm!);
    final int? c6longpmOffset = _c6longpm == null ? null
        : fbBuilder.writeString(_c6longpm!);
    final int? c7tnorOffset = _c7tnor == null ? null
        : fbBuilder.writeString(_c7tnor!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(66);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, trkIdOffset);
    fbBuilder.addOffset(3, tsOffset);
    fbBuilder.addOffset(4, madOffset);
    fbBuilder.addOffset(5, rcOffset);
    fbBuilder.addInt32(6, _rr);
    fbBuilder.addOffset(7, tnoOffset);
    fbBuilder.addOffset(8, twenvOffset);
    fbBuilder.addFloat64(9, _lat);
    fbBuilder.addFloat64(10, _lon);
    fbBuilder.addOffset(11, orginxOffset);
    fbBuilder.addOffset(12, envOffset);
    fbBuilder.addOffset(13, szOffset);
    fbBuilder.addInt32(14, _index);
    fbBuilder.addInt32(15, _c1associateddmpis);
    fbBuilder.addOffset(16, c2spcOffset);
    fbBuilder.addOffset(17, c2airOffset);
    fbBuilder.addOffset(18, c2surOffset);
    fbBuilder.addOffset(19, c2lndOffset);
    fbBuilder.addOffset(20, c2idOffset);
    fbBuilder.addOffset(21, c2idamplifyingdescriptorOffset);
    fbBuilder.addInt32(22, _c2alt);
    fbBuilder.addInt32(23, _c2crs);
    fbBuilder.addInt32(24, _c2spd);
    fbBuilder.addOffset(25, c2specialinterestindicatorOffset);
    fbBuilder.addOffset(26, c2exerciseindicatorOffset);
    fbBuilder.addOffset(27, c2exercisemofOffset);
    fbBuilder.addFloat64(28, _c3lat);
    fbBuilder.addFloat64(29, _c3lon);
    fbBuilder.addFloat64(30, _c3elv);
    fbBuilder.addOffset(31, c3ptlOffset);
    fbBuilder.addOffset(32, c3ptnumOffset);
    fbBuilder.addOffset(33, c4tgtOffset);
    fbBuilder.addOffset(34, c4defOffset);
    fbBuilder.addInt32(35, _c4runin);
    fbBuilder.addInt32(36, _c4egress);
    fbBuilder.addInt32(37, _c4numberofstores);
    fbBuilder.addInt32(38, _c4typeofstores);
    fbBuilder.addOffset(39, c4timediscreteOffset);
    fbBuilder.addInt32(40, _c4tm);
    fbBuilder.addInt32(41, _c4colon);
    fbBuilder.addInt32(42, _c4mod);
    fbBuilder.addInt32(43, _c5haeadj);
    fbBuilder.addInt32(44, _c5tw);
    fbBuilder.addInt32(45, _c5tgtbrng);
    fbBuilder.addInt32(46, _c5latlsb);
    fbBuilder.addInt32(47, _c5lonlsb);
    fbBuilder.addInt32(48, _c5elevationlsbs);
    fbBuilder.addInt32(49, _c5colon);
    fbBuilder.addInt32(50, _c6laser);
    fbBuilder.addInt32(51, _c6intel);
    fbBuilder.addInt32(52, _c6tnr3);
    fbBuilder.addOffset(53, c6dspctOffset);
    fbBuilder.addOffset(54, c6dspcOffset);
    fbBuilder.addOffset(55, c6fplpmOffset);
    fbBuilder.addOffset(56, c6longpmOffset);
    fbBuilder.addOffset(57, c7tnorOffset);
    fbBuilder.addInt32(58, _c7in3p);
    fbBuilder.addFloat64(59, _c7elang2);
    fbBuilder.addOffset(60, createdAtOffset);
    fbBuilder.addOffset(61, createdByOffset);
    fbBuilder.addOffset(62, sourceOffset);
    fbBuilder.addOffset(63, originOffset);
    fbBuilder.addInt8(64, _dataMode?.value);
    fbBuilder.addOffset(65, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
