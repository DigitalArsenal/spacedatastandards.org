// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class CollectRequestIngestDataModeEnum {
  final int value;
  const CollectRequestIngestDataModeEnum._(this.value);

  factory CollectRequestIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum CollectRequestIngestDataModeEnum');
    }
    return result;
  }

  static CollectRequestIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : CollectRequestIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const CollectRequestIngestDataModeEnum REAL = CollectRequestIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const CollectRequestIngestDataModeEnum TEST = CollectRequestIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const CollectRequestIngestDataModeEnum SIMULATED = CollectRequestIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const CollectRequestIngestDataModeEnum EXERCISE = CollectRequestIngestDataModeEnum._(3);
  static const Map<int, CollectRequestIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<CollectRequestIngestDataModeEnum> reader = _CollectRequestIngestDataModeEnumReader();

  @override
  String toString() {
    return 'CollectRequestIngestDataModeEnum{value: $value}';
  }
}

class _CollectRequestIngestDataModeEnumReader extends fb.Reader<CollectRequestIngestDataModeEnum> {
  const _CollectRequestIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  CollectRequestIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      CollectRequestIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Collect Requests support several types of individual requests, or planned/scheduled tasks on sensors and/or orbital objects. Options are provided to accomodate most common sensor contact and collection applications, including single sensor-object tasking, search operations, and TT&C support. Multiple requests originating from a plan or schedule may be associated to a sensor plan if desired.
class CollectRequestIngest {
  CollectRequestIngest._(this._bc, this._bcOffset);
  factory CollectRequestIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CollectRequestIngest> reader = _CollectRequestIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: COLLECTREQUEST-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The unique ID of the collect request record from which this request originated. This may be used for cases of sensor-to-sensor tasking, such as tip/cue operations.
  ///  Example: /// Example: da98671b-34db-47bf-8c8d-7c668b92c800
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idParentReq => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The type of external message from which this request originated.
  ///  Example: /// Example: SU67
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get msgType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-04-25T08:17:01.346Z
  ///  Constraints: No constraints specified.
  String? get msgCreateDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT, POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).
  ///  Example: /// Example: DWELL
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Unique identifier of the parent plan or schedule associated with this request.  If null, this request is assumed not associated with a plan or schedule.
  ///  Example: /// Example: REF-PLAN-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idPlan => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Index number (integer) for records within a collection plan or schedule.
  ///  Example: /// Example: 8
  ///  Constraints: No constraints specified.
  int get planIndex => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Task ID associated with this request.  A task ID may be associated with a single collect request or may be used to tie together the sub-requests of a full collect, for example a DWELL consisting of many dwell points.
  ///  Example: /// Example: TASK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get taskId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The dwell ID associated with this request.  A dwell ID is dwell point specific and a DWELL request consist of many dwell point requests.
  ///  Example: /// Example: DWELL-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get dwellId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Optional ID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: EXTERNAL-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Unique identifier of the requested/scheduled/planned sensor associated with this request.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.
  ///  Example: /// Example: REF-SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER) requested.  This field may correspond to a request of a specific sensor, or to a general non sensor specific request.
  ///  Example: /// Example: RADAR
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get obType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The priority of the collect request  (EMERGENCY, FLASH, IMMEDIATE, PRIORITY, ROUTINE).
  ///  Example: /// Example: EMERGENCY
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get priority => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The (SSN) tasking category (1-5) associated with this request.  The tasking category defines the priority of gathering and transmitting the requested observational data.  Note that category definitions are sensor type specific.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  int get taskCategory => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  The (SSN) tasking suffix (A-Z) associated with this request.  The suffix defines the amount of observational data and the frequency of collection.  Note that suffix definitions are sensor type specific.
  ///  Example: /// Example: T
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get suffix => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Boolean indicating that this collect request is UCT follow-up.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get uctFollowUp => const fb.BoolReader().vTableGet(_bc, _bcOffset, 38, false);
  ///  The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The end time of the collect or contact request window, in ISO 8601 UTC format.  If no endTime or duration is provided it is assumed the request is either ongoing or that the request is for a specified number of tracks (numTracks).  If both duration and endTime are provided, the endTime is assumed to take precedence.
  ///  Example: /// Example: 2018-01-01T18:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get endTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Unique identifier of the target on-orbit object for this request.
  ///  Example: /// Example: REF-ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Satellite/catalog number of the target on-orbit object for this request.
  ///  Example: /// Example: 101
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 46, 0);
  ///  Optional identifier provided by the data source to indicate the target object of this request. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The tasking group to which the target object is assigned.
  ///  Example: /// Example: 729
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get taskGroup => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Inter-Range Operations Number.  Four-digit identifier used to schedule and identify AFSCN contact support for booster, launch, and on-orbit operations.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get iron => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).
  ///  Example: /// Example: GEO
  ///  Constraints: Minimum length = 0, Maximum length = 12
  String? get orbitRegime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  The minimum object (diameter) size, in meters, to be reported.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get targetSize => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  The minimum Radar Cross-Section of the target, in m^2.  If only minimum RCS is provided it is assumed to be minimum reportable RCS.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get rcsMin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  The Radar Cross-Section of the target, in m^2.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get rcs => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  The maximum Radar Cross-Section of the target, in m^2.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get rcsMax => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  The minimum frequency of interest, in MHz.  If only minimum frequency is provided it is assumed to be minimum reportable frequency.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get freqMin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  The estimated or expected emission frequency of the target, in MHz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get freq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  The maximum frequency of interest, in MHz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get freqMax => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  The RF polarization (H, LHC, RHC, V).
  ///  Example: /// Example: H
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get polarization => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).  If only minimum vismag is provided it is assumed to be minimum reportable vismag.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get visMagMin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  The estimated or expected visual magnitude of the target, in Magnitudes (M).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get visMag => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get visMagMax => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  The spectral model used for the irradiance calculation.
  ///  Example: /// Example: Example Model
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get spectralModel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  The fraction of solar energy reflected from target.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get reflectance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  The target object irradiance value.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get irradiance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  For optical sensors, the requested number of frames to capture at each sensor step.
  ///  Example: /// Example: 6
  ///  Constraints: No constraints specified.
  int get numFrames => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 84, 0);
  ///  For optical sensors, the frame rate of the camera, in Hz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get frameRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  For optical sensors, the integration time per camera frame, in milliseconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get integrationTime => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  The number of requested tracks on the target.  If numTracks is not provided it is assumed to indicate all possible observations every pass over the request duration or within the request start/end window.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get numTracks => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 90, 0);
  ///  The number of requested observations on the target.
  ///  Example: /// Example: 9
  ///  Constraints: No constraints specified.
  int get numObs => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 92, 0);
  ///  The duration of the collect request, in seconds.  If both duration and endTime are provided, the endTime is assumed to take precedence.
  ///  Example: /// Example: 11
  ///  Constraints: No constraints specified.
  int get duration => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 94, 0);
  ///  The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN, etc.).
  ///  Example: /// Example: SCAN
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get srchPattern => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.
  ///  Example: /// Example: Example direction
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get scenario => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  ID of the UDL Elset of the object associated with this request.
  ///  Example: /// Example: REF-ELSET-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idElset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  ID of the UDL Manifold Elset of the object associated with this request.  A Manifold Elset provides theoretical Keplerian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.
  ///  Example: /// Example: REF-MANIFOLD-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idManifold => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  ID of the UDL State Vector of the object or central vector associated with this request.
  ///  Example: /// Example: STATEVECTOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idStateVector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  ID of the UDL Ephemeris Set of the object associated with this request.
  ///  Example: /// Example: ES-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get esId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  Epoch time, in ISO 8601 UTC format, of the orbital elements.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get epoch => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  The average of the periapsis and apoapsis distances, in kilometers. For circular orbits, the semimajor axis is the distance between the centers of the bodies.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get semiMajorAxis => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get eccentricity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  The angle, in degrees, between the equator and the orbit plane when looking from the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90 representing posigrade orbits and 90-180 representing retrograde orbits.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get inclination => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get raan => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 116, 0.0);
  ///  The argument of perigee is the angle, in degrees, formed between the perigee and the ascending node.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get argOfPerigee => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  ///  The true anomaly defines the angular position, in degrees, of the object on it's orbital path as measured from the orbit focal point at epoch.  The true anomaly is referenced from perigee.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get trueAnomoly => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 120, 0.0);
  ///  The expected or directed right ascension angle, in degrees, for search or target acquisition.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get ra => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  The expected or directed declination angle, in degrees, for search or target acquisition.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get dec => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  The expected or directed azimuth angle, in degrees, for search or target acquisition.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get az => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  ///  The expected or directed elevation angle, in degrees, for search or target acquisition.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get el => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 128, 0.0);
  ///  The expected acquisition range or defined center range, in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get range => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 130, 0.0);
  ///  The extent of the azimuth angle, in degrees, from center azimuth to define a spatial volume.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get extentAz => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  ///  The extent of the elevation angle, in degrees, from center elevation to define a spatial volume.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get extentEl => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 134, 0.0);
  ///  The extent of the range, in km, from center range to define a spatial volume.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get extentRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 136, 0.0);
  ///  WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).  If an accompanying stopLat is provided, then the lat value can be assumed to be the starting latitude of a volume definition.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 138, 0.0);
  ///  WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).  If an accompanying stopLon is provided, then lon value can be assumed to be the starting longitude of a volume definition.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 140, 0.0);
  ///  Height above WGS-84 ellipsoid (HAE), in kilometers.  If an accompanying stopAlt is provided, then alt value can be assumed to be the starting altitude of a volume definition.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get alt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 142, 0.0);
  ///  The stopping WGS-84 latitude of a volume definition, in degrees.  -90 to 90 degrees (negative values south of equator).  The stopLat value is only meaningful if a (starting) lat value is provided.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get stopLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 144, 0.0);
  ///  The stopping WGS-84 longitude of a volume definition, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).  The stopLon value is only meaningful if a (starting) lon value is provided.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get stopLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  ///  The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in kilometers.  The stopAlt value is only meaningful if a (starting) alt value is provided.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get stopAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 148, 0.0);
  ///  The maximum inclination, in degrees, to be used in search operations.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get srchInc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 150, 0.0);
  ///  The angular distance, in degrees, in the sensor-x direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get xAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 152, 0.0);
  ///  The angular distance, in degrees, in the sensor-y direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get yAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 154, 0.0);
  ///  The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.  A positive value indicates clockwise rotation about the sensor boresight vector.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get orientAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 156, 0.0);
  ///  The customer for this request.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get customer => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 158);
  ///  Notes or comments associated with this request.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 160);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 162);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 164);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 166);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: Example source
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 168);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 170);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  CollectRequestIngestDataModeEnum get dataMode => CollectRequestIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 172, 0));
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get stateVector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 174);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get elset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 176);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 178);

  @override
  String toString() {
    return 'CollectRequestIngest{id: ${id}, classificationMarking: ${classificationMarking}, idParentReq: ${idParentReq}, msgType: ${msgType}, msgCreateDate: ${msgCreateDate}, type: ${type}, idPlan: ${idPlan}, planIndex: ${planIndex}, taskId: ${taskId}, dwellId: ${dwellId}, externalId: ${externalId}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, obType: ${obType}, priority: ${priority}, taskCategory: ${taskCategory}, suffix: ${suffix}, uctFollowUp: ${uctFollowUp}, startTime: ${startTime}, endTime: ${endTime}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, taskGroup: ${taskGroup}, iron: ${iron}, orbitRegime: ${orbitRegime}, targetSize: ${targetSize}, rcsMin: ${rcsMin}, rcs: ${rcs}, rcsMax: ${rcsMax}, freqMin: ${freqMin}, freq: ${freq}, freqMax: ${freqMax}, polarization: ${polarization}, visMagMin: ${visMagMin}, visMag: ${visMag}, visMagMax: ${visMagMax}, spectralModel: ${spectralModel}, reflectance: ${reflectance}, irradiance: ${irradiance}, numFrames: ${numFrames}, frameRate: ${frameRate}, integrationTime: ${integrationTime}, numTracks: ${numTracks}, numObs: ${numObs}, duration: ${duration}, srchPattern: ${srchPattern}, scenario: ${scenario}, idElset: ${idElset}, idManifold: ${idManifold}, idStateVector: ${idStateVector}, esId: ${esId}, epoch: ${epoch}, semiMajorAxis: ${semiMajorAxis}, eccentricity: ${eccentricity}, inclination: ${inclination}, raan: ${raan}, argOfPerigee: ${argOfPerigee}, trueAnomoly: ${trueAnomoly}, ra: ${ra}, dec: ${dec}, az: ${az}, el: ${el}, range: ${range}, extentAz: ${extentAz}, extentEl: ${extentEl}, extentRange: ${extentRange}, lat: ${lat}, lon: ${lon}, alt: ${alt}, stopLat: ${stopLat}, stopLon: ${stopLon}, stopAlt: ${stopAlt}, srchInc: ${srchInc}, xAngle: ${xAngle}, yAngle: ${yAngle}, orientAngle: ${orientAngle}, customer: ${customer}, notes: ${notes}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, stateVector: ${stateVector}, elset: ${elset}, tags: ${tags}}';
  }
}

class _CollectRequestIngestReader extends fb.TableReader<CollectRequestIngest> {
  const _CollectRequestIngestReader();

  @override
  CollectRequestIngest createObject(fb.BufferContext bc, int offset) => 
    CollectRequestIngest._(bc, offset);
}

class CollectRequestIngestBuilder {
  CollectRequestIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(88);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdParentReqOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMsgTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMsgCreateDateOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addIdPlanOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addPlanIndex(int? planIndex) {
    fbBuilder.addInt32(7, planIndex);
    return fbBuilder.offset;
  }
  int addTaskIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addDwellIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addObTypeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addPriorityOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addTaskCategory(int? taskCategory) {
    fbBuilder.addInt32(15, taskCategory);
    return fbBuilder.offset;
  }
  int addSuffixOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addUctFollowUp(bool? uctFollowUp) {
    fbBuilder.addBool(17, uctFollowUp);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(21, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addTaskGroupOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addIron(int? iron) {
    fbBuilder.addInt32(24, iron);
    return fbBuilder.offset;
  }
  int addOrbitRegimeOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addTargetSize(double? targetSize) {
    fbBuilder.addFloat64(26, targetSize);
    return fbBuilder.offset;
  }
  int addRcsMin(double? rcsMin) {
    fbBuilder.addFloat64(27, rcsMin);
    return fbBuilder.offset;
  }
  int addRcs(double? rcs) {
    fbBuilder.addFloat64(28, rcs);
    return fbBuilder.offset;
  }
  int addRcsMax(double? rcsMax) {
    fbBuilder.addFloat64(29, rcsMax);
    return fbBuilder.offset;
  }
  int addFreqMin(double? freqMin) {
    fbBuilder.addFloat64(30, freqMin);
    return fbBuilder.offset;
  }
  int addFreq(double? freq) {
    fbBuilder.addFloat64(31, freq);
    return fbBuilder.offset;
  }
  int addFreqMax(double? freqMax) {
    fbBuilder.addFloat64(32, freqMax);
    return fbBuilder.offset;
  }
  int addPolarizationOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addVisMagMin(double? visMagMin) {
    fbBuilder.addFloat64(34, visMagMin);
    return fbBuilder.offset;
  }
  int addVisMag(double? visMag) {
    fbBuilder.addFloat64(35, visMag);
    return fbBuilder.offset;
  }
  int addVisMagMax(double? visMagMax) {
    fbBuilder.addFloat64(36, visMagMax);
    return fbBuilder.offset;
  }
  int addSpectralModelOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addReflectance(double? reflectance) {
    fbBuilder.addFloat64(38, reflectance);
    return fbBuilder.offset;
  }
  int addIrradiance(double? irradiance) {
    fbBuilder.addFloat64(39, irradiance);
    return fbBuilder.offset;
  }
  int addNumFrames(int? numFrames) {
    fbBuilder.addInt32(40, numFrames);
    return fbBuilder.offset;
  }
  int addFrameRate(double? frameRate) {
    fbBuilder.addFloat64(41, frameRate);
    return fbBuilder.offset;
  }
  int addIntegrationTime(double? integrationTime) {
    fbBuilder.addFloat64(42, integrationTime);
    return fbBuilder.offset;
  }
  int addNumTracks(int? numTracks) {
    fbBuilder.addInt32(43, numTracks);
    return fbBuilder.offset;
  }
  int addNumObs(int? numObs) {
    fbBuilder.addInt32(44, numObs);
    return fbBuilder.offset;
  }
  int addDuration(int? duration) {
    fbBuilder.addInt32(45, duration);
    return fbBuilder.offset;
  }
  int addSrchPatternOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addScenarioOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addIdElsetOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addIdManifoldOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addIdStateVectorOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addEsIdOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addEpochOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addSemiMajorAxis(double? semiMajorAxis) {
    fbBuilder.addFloat64(53, semiMajorAxis);
    return fbBuilder.offset;
  }
  int addEccentricity(double? eccentricity) {
    fbBuilder.addFloat64(54, eccentricity);
    return fbBuilder.offset;
  }
  int addInclination(double? inclination) {
    fbBuilder.addFloat64(55, inclination);
    return fbBuilder.offset;
  }
  int addRaan(double? raan) {
    fbBuilder.addFloat64(56, raan);
    return fbBuilder.offset;
  }
  int addArgOfPerigee(double? argOfPerigee) {
    fbBuilder.addFloat64(57, argOfPerigee);
    return fbBuilder.offset;
  }
  int addTrueAnomoly(double? trueAnomoly) {
    fbBuilder.addFloat64(58, trueAnomoly);
    return fbBuilder.offset;
  }
  int addRa(double? ra) {
    fbBuilder.addFloat64(59, ra);
    return fbBuilder.offset;
  }
  int addDec(double? dec) {
    fbBuilder.addFloat64(60, dec);
    return fbBuilder.offset;
  }
  int addAz(double? az) {
    fbBuilder.addFloat64(61, az);
    return fbBuilder.offset;
  }
  int addEl(double? el) {
    fbBuilder.addFloat64(62, el);
    return fbBuilder.offset;
  }
  int addRange(double? range) {
    fbBuilder.addFloat64(63, range);
    return fbBuilder.offset;
  }
  int addExtentAz(double? extentAz) {
    fbBuilder.addFloat64(64, extentAz);
    return fbBuilder.offset;
  }
  int addExtentEl(double? extentEl) {
    fbBuilder.addFloat64(65, extentEl);
    return fbBuilder.offset;
  }
  int addExtentRange(double? extentRange) {
    fbBuilder.addFloat64(66, extentRange);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(67, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(68, lon);
    return fbBuilder.offset;
  }
  int addAlt(double? alt) {
    fbBuilder.addFloat64(69, alt);
    return fbBuilder.offset;
  }
  int addStopLat(double? stopLat) {
    fbBuilder.addFloat64(70, stopLat);
    return fbBuilder.offset;
  }
  int addStopLon(double? stopLon) {
    fbBuilder.addFloat64(71, stopLon);
    return fbBuilder.offset;
  }
  int addStopAlt(double? stopAlt) {
    fbBuilder.addFloat64(72, stopAlt);
    return fbBuilder.offset;
  }
  int addSrchInc(double? srchInc) {
    fbBuilder.addFloat64(73, srchInc);
    return fbBuilder.offset;
  }
  int addXAngle(double? xAngle) {
    fbBuilder.addFloat64(74, xAngle);
    return fbBuilder.offset;
  }
  int addYAngle(double? yAngle) {
    fbBuilder.addFloat64(75, yAngle);
    return fbBuilder.offset;
  }
  int addOrientAngle(double? orientAngle) {
    fbBuilder.addFloat64(76, orientAngle);
    return fbBuilder.offset;
  }
  int addCustomerOffset(int? offset) {
    fbBuilder.addOffset(77, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(78, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(79, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(80, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(81, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(82, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(83, offset);
    return fbBuilder.offset;
  }
  int addDataMode(CollectRequestIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(84, dataMode?.value);
    return fbBuilder.offset;
  }
  int addStateVectorOffset(int? offset) {
    fbBuilder.addOffset(85, offset);
    return fbBuilder.offset;
  }
  int addElsetOffset(int? offset) {
    fbBuilder.addOffset(86, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(87, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CollectRequestIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idParentReq;
  final String? _msgType;
  final String? _msgCreateDate;
  final String? _type;
  final String? _idPlan;
  final int? _planIndex;
  final String? _taskId;
  final String? _dwellId;
  final String? _externalId;
  final String? _idSensor;
  final String? _origSensorId;
  final String? _obType;
  final String? _priority;
  final int? _taskCategory;
  final String? _suffix;
  final bool? _uctFollowUp;
  final String? _startTime;
  final String? _endTime;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final String? _taskGroup;
  final int? _iron;
  final String? _orbitRegime;
  final double? _targetSize;
  final double? _rcsMin;
  final double? _rcs;
  final double? _rcsMax;
  final double? _freqMin;
  final double? _freq;
  final double? _freqMax;
  final String? _polarization;
  final double? _visMagMin;
  final double? _visMag;
  final double? _visMagMax;
  final String? _spectralModel;
  final double? _reflectance;
  final double? _irradiance;
  final int? _numFrames;
  final double? _frameRate;
  final double? _integrationTime;
  final int? _numTracks;
  final int? _numObs;
  final int? _duration;
  final String? _srchPattern;
  final String? _scenario;
  final String? _idElset;
  final String? _idManifold;
  final String? _idStateVector;
  final String? _esId;
  final String? _epoch;
  final double? _semiMajorAxis;
  final double? _eccentricity;
  final double? _inclination;
  final double? _raan;
  final double? _argOfPerigee;
  final double? _trueAnomoly;
  final double? _ra;
  final double? _dec;
  final double? _az;
  final double? _el;
  final double? _range;
  final double? _extentAz;
  final double? _extentEl;
  final double? _extentRange;
  final double? _lat;
  final double? _lon;
  final double? _alt;
  final double? _stopLat;
  final double? _stopLon;
  final double? _stopAlt;
  final double? _srchInc;
  final double? _xAngle;
  final double? _yAngle;
  final double? _orientAngle;
  final String? _customer;
  final String? _notes;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final CollectRequestIngestDataModeEnum? _dataMode;
  final String? _stateVector;
  final String? _elset;
  final List<String>? _tags;

  CollectRequestIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idParentReq,
    String? msgType,
    String? msgCreateDate,
    String? type,
    String? idPlan,
    int? planIndex,
    String? taskId,
    String? dwellId,
    String? externalId,
    String? idSensor,
    String? origSensorId,
    String? obType,
    String? priority,
    int? taskCategory,
    String? suffix,
    bool? uctFollowUp,
    String? startTime,
    String? endTime,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    String? taskGroup,
    int? iron,
    String? orbitRegime,
    double? targetSize,
    double? rcsMin,
    double? rcs,
    double? rcsMax,
    double? freqMin,
    double? freq,
    double? freqMax,
    String? polarization,
    double? visMagMin,
    double? visMag,
    double? visMagMax,
    String? spectralModel,
    double? reflectance,
    double? irradiance,
    int? numFrames,
    double? frameRate,
    double? integrationTime,
    int? numTracks,
    int? numObs,
    int? duration,
    String? srchPattern,
    String? scenario,
    String? idElset,
    String? idManifold,
    String? idStateVector,
    String? esId,
    String? epoch,
    double? semiMajorAxis,
    double? eccentricity,
    double? inclination,
    double? raan,
    double? argOfPerigee,
    double? trueAnomoly,
    double? ra,
    double? dec,
    double? az,
    double? el,
    double? range,
    double? extentAz,
    double? extentEl,
    double? extentRange,
    double? lat,
    double? lon,
    double? alt,
    double? stopLat,
    double? stopLon,
    double? stopAlt,
    double? srchInc,
    double? xAngle,
    double? yAngle,
    double? orientAngle,
    String? customer,
    String? notes,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    CollectRequestIngestDataModeEnum? dataMode,
    String? stateVector,
    String? elset,
    List<String>? tags,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idParentReq = idParentReq,
        _msgType = msgType,
        _msgCreateDate = msgCreateDate,
        _type = type,
        _idPlan = idPlan,
        _planIndex = planIndex,
        _taskId = taskId,
        _dwellId = dwellId,
        _externalId = externalId,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _obType = obType,
        _priority = priority,
        _taskCategory = taskCategory,
        _suffix = suffix,
        _uctFollowUp = uctFollowUp,
        _startTime = startTime,
        _endTime = endTime,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _taskGroup = taskGroup,
        _iron = iron,
        _orbitRegime = orbitRegime,
        _targetSize = targetSize,
        _rcsMin = rcsMin,
        _rcs = rcs,
        _rcsMax = rcsMax,
        _freqMin = freqMin,
        _freq = freq,
        _freqMax = freqMax,
        _polarization = polarization,
        _visMagMin = visMagMin,
        _visMag = visMag,
        _visMagMax = visMagMax,
        _spectralModel = spectralModel,
        _reflectance = reflectance,
        _irradiance = irradiance,
        _numFrames = numFrames,
        _frameRate = frameRate,
        _integrationTime = integrationTime,
        _numTracks = numTracks,
        _numObs = numObs,
        _duration = duration,
        _srchPattern = srchPattern,
        _scenario = scenario,
        _idElset = idElset,
        _idManifold = idManifold,
        _idStateVector = idStateVector,
        _esId = esId,
        _epoch = epoch,
        _semiMajorAxis = semiMajorAxis,
        _eccentricity = eccentricity,
        _inclination = inclination,
        _raan = raan,
        _argOfPerigee = argOfPerigee,
        _trueAnomoly = trueAnomoly,
        _ra = ra,
        _dec = dec,
        _az = az,
        _el = el,
        _range = range,
        _extentAz = extentAz,
        _extentEl = extentEl,
        _extentRange = extentRange,
        _lat = lat,
        _lon = lon,
        _alt = alt,
        _stopLat = stopLat,
        _stopLon = stopLon,
        _stopAlt = stopAlt,
        _srchInc = srchInc,
        _xAngle = xAngle,
        _yAngle = yAngle,
        _orientAngle = orientAngle,
        _customer = customer,
        _notes = notes,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _stateVector = stateVector,
        _elset = elset,
        _tags = tags;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idParentReqOffset = _idParentReq == null ? null
        : fbBuilder.writeString(_idParentReq!);
    final int? msgTypeOffset = _msgType == null ? null
        : fbBuilder.writeString(_msgType!);
    final int? msgCreateDateOffset = _msgCreateDate == null ? null
        : fbBuilder.writeString(_msgCreateDate!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? idPlanOffset = _idPlan == null ? null
        : fbBuilder.writeString(_idPlan!);
    final int? taskIdOffset = _taskId == null ? null
        : fbBuilder.writeString(_taskId!);
    final int? dwellIdOffset = _dwellId == null ? null
        : fbBuilder.writeString(_dwellId!);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? obTypeOffset = _obType == null ? null
        : fbBuilder.writeString(_obType!);
    final int? priorityOffset = _priority == null ? null
        : fbBuilder.writeString(_priority!);
    final int? suffixOffset = _suffix == null ? null
        : fbBuilder.writeString(_suffix!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? endTimeOffset = _endTime == null ? null
        : fbBuilder.writeString(_endTime!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? taskGroupOffset = _taskGroup == null ? null
        : fbBuilder.writeString(_taskGroup!);
    final int? orbitRegimeOffset = _orbitRegime == null ? null
        : fbBuilder.writeString(_orbitRegime!);
    final int? polarizationOffset = _polarization == null ? null
        : fbBuilder.writeString(_polarization!);
    final int? spectralModelOffset = _spectralModel == null ? null
        : fbBuilder.writeString(_spectralModel!);
    final int? srchPatternOffset = _srchPattern == null ? null
        : fbBuilder.writeString(_srchPattern!);
    final int? scenarioOffset = _scenario == null ? null
        : fbBuilder.writeString(_scenario!);
    final int? idElsetOffset = _idElset == null ? null
        : fbBuilder.writeString(_idElset!);
    final int? idManifoldOffset = _idManifold == null ? null
        : fbBuilder.writeString(_idManifold!);
    final int? idStateVectorOffset = _idStateVector == null ? null
        : fbBuilder.writeString(_idStateVector!);
    final int? esIdOffset = _esId == null ? null
        : fbBuilder.writeString(_esId!);
    final int? epochOffset = _epoch == null ? null
        : fbBuilder.writeString(_epoch!);
    final int? customerOffset = _customer == null ? null
        : fbBuilder.writeString(_customer!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? stateVectorOffset = _stateVector == null ? null
        : fbBuilder.writeString(_stateVector!);
    final int? elsetOffset = _elset == null ? null
        : fbBuilder.writeString(_elset!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(88);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idParentReqOffset);
    fbBuilder.addOffset(3, msgTypeOffset);
    fbBuilder.addOffset(4, msgCreateDateOffset);
    fbBuilder.addOffset(5, typeOffset);
    fbBuilder.addOffset(6, idPlanOffset);
    fbBuilder.addInt32(7, _planIndex);
    fbBuilder.addOffset(8, taskIdOffset);
    fbBuilder.addOffset(9, dwellIdOffset);
    fbBuilder.addOffset(10, externalIdOffset);
    fbBuilder.addOffset(11, idSensorOffset);
    fbBuilder.addOffset(12, origSensorIdOffset);
    fbBuilder.addOffset(13, obTypeOffset);
    fbBuilder.addOffset(14, priorityOffset);
    fbBuilder.addInt32(15, _taskCategory);
    fbBuilder.addOffset(16, suffixOffset);
    fbBuilder.addBool(17, _uctFollowUp);
    fbBuilder.addOffset(18, startTimeOffset);
    fbBuilder.addOffset(19, endTimeOffset);
    fbBuilder.addOffset(20, idOnOrbitOffset);
    fbBuilder.addInt32(21, _satNo);
    fbBuilder.addOffset(22, origObjectIdOffset);
    fbBuilder.addOffset(23, taskGroupOffset);
    fbBuilder.addInt32(24, _iron);
    fbBuilder.addOffset(25, orbitRegimeOffset);
    fbBuilder.addFloat64(26, _targetSize);
    fbBuilder.addFloat64(27, _rcsMin);
    fbBuilder.addFloat64(28, _rcs);
    fbBuilder.addFloat64(29, _rcsMax);
    fbBuilder.addFloat64(30, _freqMin);
    fbBuilder.addFloat64(31, _freq);
    fbBuilder.addFloat64(32, _freqMax);
    fbBuilder.addOffset(33, polarizationOffset);
    fbBuilder.addFloat64(34, _visMagMin);
    fbBuilder.addFloat64(35, _visMag);
    fbBuilder.addFloat64(36, _visMagMax);
    fbBuilder.addOffset(37, spectralModelOffset);
    fbBuilder.addFloat64(38, _reflectance);
    fbBuilder.addFloat64(39, _irradiance);
    fbBuilder.addInt32(40, _numFrames);
    fbBuilder.addFloat64(41, _frameRate);
    fbBuilder.addFloat64(42, _integrationTime);
    fbBuilder.addInt32(43, _numTracks);
    fbBuilder.addInt32(44, _numObs);
    fbBuilder.addInt32(45, _duration);
    fbBuilder.addOffset(46, srchPatternOffset);
    fbBuilder.addOffset(47, scenarioOffset);
    fbBuilder.addOffset(48, idElsetOffset);
    fbBuilder.addOffset(49, idManifoldOffset);
    fbBuilder.addOffset(50, idStateVectorOffset);
    fbBuilder.addOffset(51, esIdOffset);
    fbBuilder.addOffset(52, epochOffset);
    fbBuilder.addFloat64(53, _semiMajorAxis);
    fbBuilder.addFloat64(54, _eccentricity);
    fbBuilder.addFloat64(55, _inclination);
    fbBuilder.addFloat64(56, _raan);
    fbBuilder.addFloat64(57, _argOfPerigee);
    fbBuilder.addFloat64(58, _trueAnomoly);
    fbBuilder.addFloat64(59, _ra);
    fbBuilder.addFloat64(60, _dec);
    fbBuilder.addFloat64(61, _az);
    fbBuilder.addFloat64(62, _el);
    fbBuilder.addFloat64(63, _range);
    fbBuilder.addFloat64(64, _extentAz);
    fbBuilder.addFloat64(65, _extentEl);
    fbBuilder.addFloat64(66, _extentRange);
    fbBuilder.addFloat64(67, _lat);
    fbBuilder.addFloat64(68, _lon);
    fbBuilder.addFloat64(69, _alt);
    fbBuilder.addFloat64(70, _stopLat);
    fbBuilder.addFloat64(71, _stopLon);
    fbBuilder.addFloat64(72, _stopAlt);
    fbBuilder.addFloat64(73, _srchInc);
    fbBuilder.addFloat64(74, _xAngle);
    fbBuilder.addFloat64(75, _yAngle);
    fbBuilder.addFloat64(76, _orientAngle);
    fbBuilder.addOffset(77, customerOffset);
    fbBuilder.addOffset(78, notesOffset);
    fbBuilder.addOffset(79, createdAtOffset);
    fbBuilder.addOffset(80, createdByOffset);
    fbBuilder.addOffset(81, sourceOffset);
    fbBuilder.addOffset(82, originOffset);
    fbBuilder.addOffset(83, origNetworkOffset);
    fbBuilder.addInt8(84, _dataMode?.value);
    fbBuilder.addOffset(85, stateVectorOffset);
    fbBuilder.addOffset(86, elsetOffset);
    fbBuilder.addOffset(87, tagsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
