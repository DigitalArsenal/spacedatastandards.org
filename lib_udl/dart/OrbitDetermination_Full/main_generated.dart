// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class OrbitDeterminationFullDataModeEnum {
  final int value;
  const OrbitDeterminationFullDataModeEnum._(this.value);

  factory OrbitDeterminationFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OrbitDeterminationFullDataModeEnum');
    }
    return result;
  }

  static OrbitDeterminationFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : OrbitDeterminationFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const OrbitDeterminationFullDataModeEnum REAL = OrbitDeterminationFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const OrbitDeterminationFullDataModeEnum TEST = OrbitDeterminationFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const OrbitDeterminationFullDataModeEnum SIMULATED = OrbitDeterminationFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const OrbitDeterminationFullDataModeEnum EXERCISE = OrbitDeterminationFullDataModeEnum._(3);
  static const Map<int, OrbitDeterminationFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<OrbitDeterminationFullDataModeEnum> reader = _OrbitDeterminationFullDataModeEnumReader();

  @override
  String toString() {
    return 'OrbitDeterminationFullDataModeEnum{value: $value}';
  }
}

class _OrbitDeterminationFullDataModeEnumReader extends fb.Reader<OrbitDeterminationFullDataModeEnum> {
  const _OrbitDeterminationFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  OrbitDeterminationFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      OrbitDeterminationFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of orbit determination algorithm results describing General Perturbations or Special Perturbations orbital updates.
class OrbitDeterminationFull {
  OrbitDeterminationFull._(this._bc, this._bcOffset);
  factory OrbitDeterminationFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OrbitDeterminationFull> reader = _OrbitDeterminationFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Start time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
  ///  Example: /// Example: 2023-08-28T11:20:21.247192Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  End time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
  ///  Example: /// Example: 2023-08-28T15:20:21.247192Z
  ///  Constraints: No constraints specified.
  String? get endTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
  ///  Example: /// Example: 54741
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Optional identifier provided by the OD source to indicate the target on-orbit object of this OD solution. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 54741
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  Identifier of the element set used to seed this OD solution. This ID can be used to obtain additional information on an Elset object using the 'get by ID' operation (e.g. /udl/elset/{id}). For example, the Elset with idElset = abc would be queried as /udl/elset/abc.
  ///  Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get aprioriIdElset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get aprioriElset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Identifier of the state vector used to seed this OD solution. This ID can be used to obtain additional information on a StateVector object using the 'get by ID' operation (e.g. /udl/statevector/{id}). For example, the StateVector with idStateVector = abc would be queried as /udl/statevector/abc.
  ///  Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get aprioriIdStateVector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get aprioriStateVector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Flag indicating whether this is an initial orbit determination.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get initialOd => const fb.BoolReader().vTableGet(_bc, _bcOffset, 26, false);
  ///  The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
  ///  Example: /// Example: 2023-08-28T11:20:21.247192Z
  ///  Constraints: No constraints specified.
  String? get lastObStart => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
  ///  Example: /// Example: 2023-08-28T11:20:21.247192Z
  ///  Constraints: No constraints specified.
  String? get lastObEnd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The time span used for the OD of the object, in days.
  ///  Example: /// Example: 3.5
  ///  Constraints: No constraints specified.
  double get timeSpan => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Optional start time at which this OD solution is accurate, in ISO 8601 UTC datetime format with microsecond precision.
  ///  Example: /// Example: 2023-08-28T11:20:21.247192Z
  ///  Constraints: No constraints specified.
  String? get effectiveFrom => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Optional end time at which this OD solution may no longer be accurate, in ISO 8601 UTC datetime format with microsecond precision.
  ///  Example: /// Example: 2023-08-30T08:15:00.123456Z
  ///  Constraints: No constraints specified.
  String? get effectiveUntil => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The Weighted Root Mean Squared (RMS) of the differential correction of the target object that produced this OD state. WRMS is a quality indicator of the OD update, with a value of 1.00 being optimal. WRMS applies to batch least squares (BLS) processes.
  ///  Example: /// Example: 0.991
  ///  Constraints: No constraints specified.
  double get wrms => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  The Weighted Root Mean Squared (RMS) of the differential correction from the previous overhead pass of the satellite. Provides a point of comparison for assessing changes in the quality of the OD solution between consecutive passes.
  ///  Example: /// Example: 1.02
  ///  Constraints: No constraints specified.
  double get previousWrms => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  The Weighted Root Mean Squared (RMS) calculated for the first satellite pass in the observation span. Serves as the initial quality metric for the beginning of the observation period.
  ///  Example: /// Example: 0.985
  ///  Constraints: No constraints specified.
  double get firstPassWrms => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Lowest Weighted Root Mean Squared (RMS) value achieved for any single satellite pass during the observation span, indicating the pass with the highest quality OD solution.
  ///  Example: /// Example: 0.975
  ///  Constraints: No constraints specified.
  double get bestPassWrms => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Error growth rate of the OD solution in kilometers per day.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get errorGrowthRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Model parameter value for energy dissipation rate (EDR) in watts per kilogram.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get edr => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Orbit determination method used to produce this record (e.g. BLS, KF, UKF, etc.).
  ///  Example: /// Example: BLS
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get method => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Source of orbit determination method used to produce this record (e.g. ASW, ACTRAC, FreeFlyer, GEODYNE, GDTS, etc.).
  ///  Example: /// Example: ASW
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get methodSource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  The fit span, in days, used in a Batch Least Squares (BLS) OD.
  ///  Example: /// Example: 0.6
  ///  Constraints: No constraints specified.
  double get fitSpan => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Flag indicating whether the ballistic coefficient was estimated during this OD solution.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get ballisticCoeffEst => const fb.BoolReader().vTableGet(_bc, _bcOffset, 56, false);
  ///  Model used to estimate the ballistic coefficient.
  ///  Example: /// Example: GaussMarkov
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get ballisticCoeffModel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Flag indicating whether the AGOM was estimated during this OD solution.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get agomEst => const fb.BoolReader().vTableGet(_bc, _bcOffset, 60, false);
  ///  Model used to estimate the AGOM.
  ///  Example: /// Example: RandomWalk
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get agomModel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  OD parameter value for the Root Mean Square (RMS) convergence criteria to successfully close the OD solution.
  ///  Example: /// Example: 0.001
  ///  Constraints: No constraints specified.
  double get rmsConvergenceCriteria => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  The number of iterations taken for the algorithm to converge on an OD solution.
  ///  Example: /// Example: 8
  ///  Constraints: No constraints specified.
  int get numIterations => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 66, 0);
  ///  Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were accepted in this OD solution. See the associated acceptedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The acceptedObTyps and acceptedObIds arrays must match in size.
  ///  Example: /// Example: ['EO', 'RADAR']
  ///  Constraints: No constraints specified.
  List<String>? get acceptedObTyps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 68);
  ///  Array of UDL data (observation) UUIDs that were accepted in this OD solution. See the associated acceptedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  ///  Example: /// Example: ['EOOBSERVATION-ID1', 'RADAROBSERVATION-ID1']
  ///  Constraints: No constraints specified.
  List<String>? get acceptedObIds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 70);
  ///  Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were rejected in this OD solution. See the associated rejectedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The rejectedObTyps and rejectedObIds arrays must match in size.
  ///  Example: /// Example: ['DOA', 'RF']
  ///  Constraints: No constraints specified.
  List<String>? get rejectedObTyps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 72);
  ///  Array of UDL data (observation) UUIDs that were rejected in this OD solution. See the associated rejectedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  ///  Example: /// Example: ['DIFFOFARRIVAL-ID2', 'RFOBSERVATION-ID2']
  ///  Constraints: No constraints specified.
  List<String>? get rejectedObIds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 74);
  ///  Array of UDL UUIDs (idSensor) of the sensors that contributed observations in this OD solution.
  ///  Example: /// Example: ['SENSOR-ID1', 'SENSOR-ID2']
  ///  Constraints: No constraints specified.
  List<String>? get sensorIds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 76);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  OrbitDeterminationFullDataModeEnum get dataMode => OrbitDeterminationFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 90, 0));
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get onOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);

  @override
  String toString() {
    return 'OrbitDeterminationFull{id: ${id}, classificationMarking: ${classificationMarking}, startTime: ${startTime}, endTime: ${endTime}, idOnOrbit: ${idOnOrbit}, origObjectId: ${origObjectId}, satNo: ${satNo}, aprioriIdElset: ${aprioriIdElset}, aprioriElset: ${aprioriElset}, aprioriIdStateVector: ${aprioriIdStateVector}, aprioriStateVector: ${aprioriStateVector}, initialOd: ${initialOd}, lastObStart: ${lastObStart}, lastObEnd: ${lastObEnd}, timeSpan: ${timeSpan}, effectiveFrom: ${effectiveFrom}, effectiveUntil: ${effectiveUntil}, wrms: ${wrms}, previousWrms: ${previousWrms}, firstPassWrms: ${firstPassWrms}, bestPassWrms: ${bestPassWrms}, errorGrowthRate: ${errorGrowthRate}, edr: ${edr}, method: ${method}, methodSource: ${methodSource}, fitSpan: ${fitSpan}, ballisticCoeffEst: ${ballisticCoeffEst}, ballisticCoeffModel: ${ballisticCoeffModel}, agomEst: ${agomEst}, agomModel: ${agomModel}, rmsConvergenceCriteria: ${rmsConvergenceCriteria}, numIterations: ${numIterations}, acceptedObTyps: ${acceptedObTyps}, acceptedObIds: ${acceptedObIds}, rejectedObTyps: ${rejectedObTyps}, rejectedObIds: ${rejectedObIds}, sensorIds: ${sensorIds}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, onOrbit: ${onOrbit}}';
  }
}

class _OrbitDeterminationFullReader extends fb.TableReader<OrbitDeterminationFull> {
  const _OrbitDeterminationFullReader();

  @override
  OrbitDeterminationFull createObject(fb.BufferContext bc, int offset) => 
    OrbitDeterminationFull._(bc, offset);
}

class OrbitDeterminationFullBuilder {
  OrbitDeterminationFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(45);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(6, satNo);
    return fbBuilder.offset;
  }
  int addAprioriIdElsetOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addAprioriElsetOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addAprioriIdStateVectorOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addAprioriStateVectorOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addInitialOd(bool? initialOd) {
    fbBuilder.addBool(11, initialOd);
    return fbBuilder.offset;
  }
  int addLastObStartOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addLastObEndOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addTimeSpan(double? timeSpan) {
    fbBuilder.addFloat64(14, timeSpan);
    return fbBuilder.offset;
  }
  int addEffectiveFromOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addEffectiveUntilOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addWrms(double? wrms) {
    fbBuilder.addFloat64(17, wrms);
    return fbBuilder.offset;
  }
  int addPreviousWrms(double? previousWrms) {
    fbBuilder.addFloat64(18, previousWrms);
    return fbBuilder.offset;
  }
  int addFirstPassWrms(double? firstPassWrms) {
    fbBuilder.addFloat64(19, firstPassWrms);
    return fbBuilder.offset;
  }
  int addBestPassWrms(double? bestPassWrms) {
    fbBuilder.addFloat64(20, bestPassWrms);
    return fbBuilder.offset;
  }
  int addErrorGrowthRate(double? errorGrowthRate) {
    fbBuilder.addFloat64(21, errorGrowthRate);
    return fbBuilder.offset;
  }
  int addEdr(double? edr) {
    fbBuilder.addFloat64(22, edr);
    return fbBuilder.offset;
  }
  int addMethodOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addMethodSourceOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addFitSpan(double? fitSpan) {
    fbBuilder.addFloat64(25, fitSpan);
    return fbBuilder.offset;
  }
  int addBallisticCoeffEst(bool? ballisticCoeffEst) {
    fbBuilder.addBool(26, ballisticCoeffEst);
    return fbBuilder.offset;
  }
  int addBallisticCoeffModelOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addAgomEst(bool? agomEst) {
    fbBuilder.addBool(28, agomEst);
    return fbBuilder.offset;
  }
  int addAgomModelOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addRmsConvergenceCriteria(double? rmsConvergenceCriteria) {
    fbBuilder.addFloat64(30, rmsConvergenceCriteria);
    return fbBuilder.offset;
  }
  int addNumIterations(int? numIterations) {
    fbBuilder.addInt32(31, numIterations);
    return fbBuilder.offset;
  }
  int addAcceptedObTypsOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addAcceptedObIdsOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addRejectedObTypsOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addRejectedObIdsOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addSensorIdsOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addDataMode(OrbitDeterminationFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(43, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OrbitDeterminationFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _startTime;
  final String? _endTime;
  final String? _idOnOrbit;
  final String? _origObjectId;
  final int? _satNo;
  final String? _aprioriIdElset;
  final String? _aprioriElset;
  final String? _aprioriIdStateVector;
  final String? _aprioriStateVector;
  final bool? _initialOd;
  final String? _lastObStart;
  final String? _lastObEnd;
  final double? _timeSpan;
  final String? _effectiveFrom;
  final String? _effectiveUntil;
  final double? _wrms;
  final double? _previousWrms;
  final double? _firstPassWrms;
  final double? _bestPassWrms;
  final double? _errorGrowthRate;
  final double? _edr;
  final String? _method;
  final String? _methodSource;
  final double? _fitSpan;
  final bool? _ballisticCoeffEst;
  final String? _ballisticCoeffModel;
  final bool? _agomEst;
  final String? _agomModel;
  final double? _rmsConvergenceCriteria;
  final int? _numIterations;
  final List<String>? _acceptedObTyps;
  final List<String>? _acceptedObIds;
  final List<String>? _rejectedObTyps;
  final List<String>? _rejectedObIds;
  final List<String>? _sensorIds;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final OrbitDeterminationFullDataModeEnum? _dataMode;
  final String? _onOrbit;

  OrbitDeterminationFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? startTime,
    String? endTime,
    String? idOnOrbit,
    String? origObjectId,
    int? satNo,
    String? aprioriIdElset,
    String? aprioriElset,
    String? aprioriIdStateVector,
    String? aprioriStateVector,
    bool? initialOd,
    String? lastObStart,
    String? lastObEnd,
    double? timeSpan,
    String? effectiveFrom,
    String? effectiveUntil,
    double? wrms,
    double? previousWrms,
    double? firstPassWrms,
    double? bestPassWrms,
    double? errorGrowthRate,
    double? edr,
    String? method,
    String? methodSource,
    double? fitSpan,
    bool? ballisticCoeffEst,
    String? ballisticCoeffModel,
    bool? agomEst,
    String? agomModel,
    double? rmsConvergenceCriteria,
    int? numIterations,
    List<String>? acceptedObTyps,
    List<String>? acceptedObIds,
    List<String>? rejectedObTyps,
    List<String>? rejectedObIds,
    List<String>? sensorIds,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    OrbitDeterminationFullDataModeEnum? dataMode,
    String? onOrbit,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _startTime = startTime,
        _endTime = endTime,
        _idOnOrbit = idOnOrbit,
        _origObjectId = origObjectId,
        _satNo = satNo,
        _aprioriIdElset = aprioriIdElset,
        _aprioriElset = aprioriElset,
        _aprioriIdStateVector = aprioriIdStateVector,
        _aprioriStateVector = aprioriStateVector,
        _initialOd = initialOd,
        _lastObStart = lastObStart,
        _lastObEnd = lastObEnd,
        _timeSpan = timeSpan,
        _effectiveFrom = effectiveFrom,
        _effectiveUntil = effectiveUntil,
        _wrms = wrms,
        _previousWrms = previousWrms,
        _firstPassWrms = firstPassWrms,
        _bestPassWrms = bestPassWrms,
        _errorGrowthRate = errorGrowthRate,
        _edr = edr,
        _method = method,
        _methodSource = methodSource,
        _fitSpan = fitSpan,
        _ballisticCoeffEst = ballisticCoeffEst,
        _ballisticCoeffModel = ballisticCoeffModel,
        _agomEst = agomEst,
        _agomModel = agomModel,
        _rmsConvergenceCriteria = rmsConvergenceCriteria,
        _numIterations = numIterations,
        _acceptedObTyps = acceptedObTyps,
        _acceptedObIds = acceptedObIds,
        _rejectedObTyps = rejectedObTyps,
        _rejectedObIds = rejectedObIds,
        _sensorIds = sensorIds,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _onOrbit = onOrbit;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? endTimeOffset = _endTime == null ? null
        : fbBuilder.writeString(_endTime!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? aprioriIdElsetOffset = _aprioriIdElset == null ? null
        : fbBuilder.writeString(_aprioriIdElset!);
    final int? aprioriElsetOffset = _aprioriElset == null ? null
        : fbBuilder.writeString(_aprioriElset!);
    final int? aprioriIdStateVectorOffset = _aprioriIdStateVector == null ? null
        : fbBuilder.writeString(_aprioriIdStateVector!);
    final int? aprioriStateVectorOffset = _aprioriStateVector == null ? null
        : fbBuilder.writeString(_aprioriStateVector!);
    final int? lastObStartOffset = _lastObStart == null ? null
        : fbBuilder.writeString(_lastObStart!);
    final int? lastObEndOffset = _lastObEnd == null ? null
        : fbBuilder.writeString(_lastObEnd!);
    final int? effectiveFromOffset = _effectiveFrom == null ? null
        : fbBuilder.writeString(_effectiveFrom!);
    final int? effectiveUntilOffset = _effectiveUntil == null ? null
        : fbBuilder.writeString(_effectiveUntil!);
    final int? methodOffset = _method == null ? null
        : fbBuilder.writeString(_method!);
    final int? methodSourceOffset = _methodSource == null ? null
        : fbBuilder.writeString(_methodSource!);
    final int? ballisticCoeffModelOffset = _ballisticCoeffModel == null ? null
        : fbBuilder.writeString(_ballisticCoeffModel!);
    final int? agomModelOffset = _agomModel == null ? null
        : fbBuilder.writeString(_agomModel!);
    final int? acceptedObTypsOffset = _acceptedObTyps == null ? null
        : fbBuilder.writeList(_acceptedObTyps!.map(fbBuilder.writeString).toList());
    final int? acceptedObIdsOffset = _acceptedObIds == null ? null
        : fbBuilder.writeList(_acceptedObIds!.map(fbBuilder.writeString).toList());
    final int? rejectedObTypsOffset = _rejectedObTyps == null ? null
        : fbBuilder.writeList(_rejectedObTyps!.map(fbBuilder.writeString).toList());
    final int? rejectedObIdsOffset = _rejectedObIds == null ? null
        : fbBuilder.writeList(_rejectedObIds!.map(fbBuilder.writeString).toList());
    final int? sensorIdsOffset = _sensorIds == null ? null
        : fbBuilder.writeList(_sensorIds!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? onOrbitOffset = _onOrbit == null ? null
        : fbBuilder.writeString(_onOrbit!);
    fbBuilder.startTable(45);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, startTimeOffset);
    fbBuilder.addOffset(3, endTimeOffset);
    fbBuilder.addOffset(4, idOnOrbitOffset);
    fbBuilder.addOffset(5, origObjectIdOffset);
    fbBuilder.addInt32(6, _satNo);
    fbBuilder.addOffset(7, aprioriIdElsetOffset);
    fbBuilder.addOffset(8, aprioriElsetOffset);
    fbBuilder.addOffset(9, aprioriIdStateVectorOffset);
    fbBuilder.addOffset(10, aprioriStateVectorOffset);
    fbBuilder.addBool(11, _initialOd);
    fbBuilder.addOffset(12, lastObStartOffset);
    fbBuilder.addOffset(13, lastObEndOffset);
    fbBuilder.addFloat64(14, _timeSpan);
    fbBuilder.addOffset(15, effectiveFromOffset);
    fbBuilder.addOffset(16, effectiveUntilOffset);
    fbBuilder.addFloat64(17, _wrms);
    fbBuilder.addFloat64(18, _previousWrms);
    fbBuilder.addFloat64(19, _firstPassWrms);
    fbBuilder.addFloat64(20, _bestPassWrms);
    fbBuilder.addFloat64(21, _errorGrowthRate);
    fbBuilder.addFloat64(22, _edr);
    fbBuilder.addOffset(23, methodOffset);
    fbBuilder.addOffset(24, methodSourceOffset);
    fbBuilder.addFloat64(25, _fitSpan);
    fbBuilder.addBool(26, _ballisticCoeffEst);
    fbBuilder.addOffset(27, ballisticCoeffModelOffset);
    fbBuilder.addBool(28, _agomEst);
    fbBuilder.addOffset(29, agomModelOffset);
    fbBuilder.addFloat64(30, _rmsConvergenceCriteria);
    fbBuilder.addInt32(31, _numIterations);
    fbBuilder.addOffset(32, acceptedObTypsOffset);
    fbBuilder.addOffset(33, acceptedObIdsOffset);
    fbBuilder.addOffset(34, rejectedObTypsOffset);
    fbBuilder.addOffset(35, rejectedObIdsOffset);
    fbBuilder.addOffset(36, sensorIdsOffset);
    fbBuilder.addOffset(37, createdAtOffset);
    fbBuilder.addOffset(38, createdByOffset);
    fbBuilder.addOffset(39, sourceDlOffset);
    fbBuilder.addOffset(40, sourceOffset);
    fbBuilder.addOffset(41, originOffset);
    fbBuilder.addOffset(42, origNetworkOffset);
    fbBuilder.addInt8(43, _dataMode?.value);
    fbBuilder.addOffset(44, onOrbitOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
