// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class LaunchVehicleDetailsFullDataModeEnum {
  final int value;
  const LaunchVehicleDetailsFullDataModeEnum._(this.value);

  factory LaunchVehicleDetailsFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum LaunchVehicleDetailsFullDataModeEnum');
    }
    return result;
  }

  static LaunchVehicleDetailsFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : LaunchVehicleDetailsFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const LaunchVehicleDetailsFullDataModeEnum REAL = LaunchVehicleDetailsFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const LaunchVehicleDetailsFullDataModeEnum TEST = LaunchVehicleDetailsFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const LaunchVehicleDetailsFullDataModeEnum SIMULATED = LaunchVehicleDetailsFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const LaunchVehicleDetailsFullDataModeEnum EXERCISE = LaunchVehicleDetailsFullDataModeEnum._(3);
  static const Map<int, LaunchVehicleDetailsFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<LaunchVehicleDetailsFullDataModeEnum> reader = _LaunchVehicleDetailsFullDataModeEnumReader();

  @override
  String toString() {
    return 'LaunchVehicleDetailsFullDataModeEnum{value: $value}';
  }
}

class _LaunchVehicleDetailsFullDataModeEnumReader extends fb.Reader<LaunchVehicleDetailsFullDataModeEnum> {
  const _LaunchVehicleDetailsFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  LaunchVehicleDetailsFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      LaunchVehicleDetailsFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.
class LaunchVehicleDetailsFull {
  LaunchVehicleDetailsFull._(this._bc, this._bcOffset);
  factory LaunchVehicleDetailsFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LaunchVehicleDetailsFull> reader = _LaunchVehicleDetailsFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: LAUNCHVEHICLEDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Identifier of the parent launch vehicle record.
  ///  Example: /// Example: LAUNCHVEHICLE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idLaunchVehicle => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Vehicle variant.
  ///  Example: /// Example: Example-variant
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get variant => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Vehicle minor variant.
  ///  Example: /// Example: Example-minor-variant
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get minorVariant => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Vehicle category.
  ///  Example: /// Example: Example-category
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get category => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  ID of the organization that manufactures the launch vehicle.
  ///  Example: /// Example: MANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get manufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Vehicle launch prefix.
  ///  Example: /// Example: AX011
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get launchPrefix => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Vehicle family.
  ///  Example: /// Example: Example-family
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get family => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Propellant type.
  ///  Example: /// Example: Nitrogen
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get propellant => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Oxidizer type.
  ///  Example: /// Example: Bromine
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get oxidizer => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Vehicle length in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get length => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Vehicle diameter in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get diameter => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Vehicle total mass at launch time in kg (including all boosters).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get launchMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Maximum vehicle payload mass to GEO orbit in kg.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get geoPayloadMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Max vehicle payload mass to Geo-Transfer Orbit in kg.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get gtoPayloadMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Max vehicle payload mass to LEO orbit in kg.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get leoPayloadMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Max vehicle payload mass to Sun-Synchronous Orbit in kg.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get ssoPayloadMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Vehicle fairing length in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get fairingLength => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Name of the fairing.
  ///  Example: /// Example: Example-fairing-name
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get fairingName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Vehicle fairing maximum external diameter in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get fairingExternalDiameter => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Vehicle fairing maximum internal diameter in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get fairingInternalDiameter => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Vehicle fairing mass in kg.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get fairingMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Fairing material.
  ///  Example: /// Example: Example-fairing-material
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get fairingMaterial => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Vehicle maximum acceleration load in g.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get maxAccelLoad => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Vehicle maximum payload lateral frequency in Hz.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get maxPayloadFreqLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Vehicle maximum payload longitudinal frequency in Hz.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get maxPayloadFreqLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Vehicle maximum acoustic level in dB.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get maxAcousticLevel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Vehicle maximum acoustic level range in Hz.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get maxAcousticLevelRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Vehicle overall sound pressure level in dB.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get soundPressureLevel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Vehicle maximum flight shock force in g.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get maxFlightShockForce => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Vehicle maximum flight shock frequency in Hz.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get maxFlightShockFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Vehicle fairing maximum pressure change in kPa/sec.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get maxFairingPressureChange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Launch vehicle estimated launch price in US dollars.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get estLaunchPrice => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Launch vehicle typical estimated launch price in US dollars.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get estLaunchPriceTypical => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get gtoInj3SigAccuracyApogeeTarget => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get gtoInj3SigAccuracyApogeeMargin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get gtoInj3SigAccuracyPerigeeTarget => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get gtoInj3SigAccuracyPerigeeMargin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get gtoInj3SigAccuracyInclinationTarget => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get gtoInj3SigAccuracyInclinationMargin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Launch vehicle attitude accuracy (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get attitudeAccuracy => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  Launch vehicle payload separation rate in m/s.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get payloadSeparationRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  Launch vehicle deployment rotation rate in RPM.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get deploymentRotationRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  Optional URL for additional information on the vehicle.
  ///  Example: /// Example: Example URL
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get sourceUrl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Notes/Description of the launch vehicle.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Notes/Description of the launch vehicle fairing.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get fairingNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Notes/Description of the launch vehicle payload.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get payloadNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  LaunchVehicleDetailsFullDataModeEnum get dataMode => LaunchVehicleDetailsFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 114, 0));
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 116);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get manufacturerOrg => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);

  @override
  String toString() {
    return 'LaunchVehicleDetailsFull{id: ${id}, idLaunchVehicle: ${idLaunchVehicle}, classificationMarking: ${classificationMarking}, variant: ${variant}, minorVariant: ${minorVariant}, category: ${category}, manufacturerOrgId: ${manufacturerOrgId}, launchPrefix: ${launchPrefix}, family: ${family}, propellant: ${propellant}, oxidizer: ${oxidizer}, length: ${length}, diameter: ${diameter}, launchMass: ${launchMass}, geoPayloadMass: ${geoPayloadMass}, gtoPayloadMass: ${gtoPayloadMass}, leoPayloadMass: ${leoPayloadMass}, ssoPayloadMass: ${ssoPayloadMass}, fairingLength: ${fairingLength}, fairingName: ${fairingName}, fairingExternalDiameter: ${fairingExternalDiameter}, fairingInternalDiameter: ${fairingInternalDiameter}, fairingMass: ${fairingMass}, fairingMaterial: ${fairingMaterial}, maxAccelLoad: ${maxAccelLoad}, maxPayloadFreqLat: ${maxPayloadFreqLat}, maxPayloadFreqLon: ${maxPayloadFreqLon}, maxAcousticLevel: ${maxAcousticLevel}, maxAcousticLevelRange: ${maxAcousticLevelRange}, soundPressureLevel: ${soundPressureLevel}, maxFlightShockForce: ${maxFlightShockForce}, maxFlightShockFreq: ${maxFlightShockFreq}, maxFairingPressureChange: ${maxFairingPressureChange}, estLaunchPrice: ${estLaunchPrice}, estLaunchPriceTypical: ${estLaunchPriceTypical}, gtoInj3SigAccuracyApogeeTarget: ${gtoInj3SigAccuracyApogeeTarget}, gtoInj3SigAccuracyApogeeMargin: ${gtoInj3SigAccuracyApogeeMargin}, gtoInj3SigAccuracyPerigeeTarget: ${gtoInj3SigAccuracyPerigeeTarget}, gtoInj3SigAccuracyPerigeeMargin: ${gtoInj3SigAccuracyPerigeeMargin}, gtoInj3SigAccuracyInclinationTarget: ${gtoInj3SigAccuracyInclinationTarget}, gtoInj3SigAccuracyInclinationMargin: ${gtoInj3SigAccuracyInclinationMargin}, attitudeAccuracy: ${attitudeAccuracy}, payloadSeparationRate: ${payloadSeparationRate}, deploymentRotationRate: ${deploymentRotationRate}, sourceUrl: ${sourceUrl}, notes: ${notes}, fairingNotes: ${fairingNotes}, payloadNotes: ${payloadNotes}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, tags: ${tags}, manufacturerOrg: ${manufacturerOrg}}';
  }
}

class _LaunchVehicleDetailsFullReader extends fb.TableReader<LaunchVehicleDetailsFull> {
  const _LaunchVehicleDetailsFullReader();

  @override
  LaunchVehicleDetailsFull createObject(fb.BufferContext bc, int offset) => 
    LaunchVehicleDetailsFull._(bc, offset);
}

class LaunchVehicleDetailsFullBuilder {
  LaunchVehicleDetailsFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(58);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdLaunchVehicleOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addVariantOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMinorVariantOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCategoryOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addLaunchPrefixOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addFamilyOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addPropellantOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addOxidizerOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addLength(double? length) {
    fbBuilder.addFloat64(11, length);
    return fbBuilder.offset;
  }
  int addDiameter(double? diameter) {
    fbBuilder.addFloat64(12, diameter);
    return fbBuilder.offset;
  }
  int addLaunchMass(double? launchMass) {
    fbBuilder.addFloat64(13, launchMass);
    return fbBuilder.offset;
  }
  int addGeoPayloadMass(double? geoPayloadMass) {
    fbBuilder.addFloat64(14, geoPayloadMass);
    return fbBuilder.offset;
  }
  int addGtoPayloadMass(double? gtoPayloadMass) {
    fbBuilder.addFloat64(15, gtoPayloadMass);
    return fbBuilder.offset;
  }
  int addLeoPayloadMass(double? leoPayloadMass) {
    fbBuilder.addFloat64(16, leoPayloadMass);
    return fbBuilder.offset;
  }
  int addSsoPayloadMass(double? ssoPayloadMass) {
    fbBuilder.addFloat64(17, ssoPayloadMass);
    return fbBuilder.offset;
  }
  int addFairingLength(double? fairingLength) {
    fbBuilder.addFloat64(18, fairingLength);
    return fbBuilder.offset;
  }
  int addFairingNameOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addFairingExternalDiameter(double? fairingExternalDiameter) {
    fbBuilder.addFloat64(20, fairingExternalDiameter);
    return fbBuilder.offset;
  }
  int addFairingInternalDiameter(double? fairingInternalDiameter) {
    fbBuilder.addFloat64(21, fairingInternalDiameter);
    return fbBuilder.offset;
  }
  int addFairingMass(double? fairingMass) {
    fbBuilder.addFloat64(22, fairingMass);
    return fbBuilder.offset;
  }
  int addFairingMaterialOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addMaxAccelLoad(double? maxAccelLoad) {
    fbBuilder.addFloat64(24, maxAccelLoad);
    return fbBuilder.offset;
  }
  int addMaxPayloadFreqLat(double? maxPayloadFreqLat) {
    fbBuilder.addFloat64(25, maxPayloadFreqLat);
    return fbBuilder.offset;
  }
  int addMaxPayloadFreqLon(double? maxPayloadFreqLon) {
    fbBuilder.addFloat64(26, maxPayloadFreqLon);
    return fbBuilder.offset;
  }
  int addMaxAcousticLevel(double? maxAcousticLevel) {
    fbBuilder.addFloat64(27, maxAcousticLevel);
    return fbBuilder.offset;
  }
  int addMaxAcousticLevelRange(double? maxAcousticLevelRange) {
    fbBuilder.addFloat64(28, maxAcousticLevelRange);
    return fbBuilder.offset;
  }
  int addSoundPressureLevel(double? soundPressureLevel) {
    fbBuilder.addFloat64(29, soundPressureLevel);
    return fbBuilder.offset;
  }
  int addMaxFlightShockForce(double? maxFlightShockForce) {
    fbBuilder.addFloat64(30, maxFlightShockForce);
    return fbBuilder.offset;
  }
  int addMaxFlightShockFreq(double? maxFlightShockFreq) {
    fbBuilder.addFloat64(31, maxFlightShockFreq);
    return fbBuilder.offset;
  }
  int addMaxFairingPressureChange(double? maxFairingPressureChange) {
    fbBuilder.addFloat64(32, maxFairingPressureChange);
    return fbBuilder.offset;
  }
  int addEstLaunchPrice(double? estLaunchPrice) {
    fbBuilder.addFloat64(33, estLaunchPrice);
    return fbBuilder.offset;
  }
  int addEstLaunchPriceTypical(double? estLaunchPriceTypical) {
    fbBuilder.addFloat64(34, estLaunchPriceTypical);
    return fbBuilder.offset;
  }
  int addGtoInj3SigAccuracyApogeeTarget(double? gtoInj3SigAccuracyApogeeTarget) {
    fbBuilder.addFloat64(35, gtoInj3SigAccuracyApogeeTarget);
    return fbBuilder.offset;
  }
  int addGtoInj3SigAccuracyApogeeMargin(double? gtoInj3SigAccuracyApogeeMargin) {
    fbBuilder.addFloat64(36, gtoInj3SigAccuracyApogeeMargin);
    return fbBuilder.offset;
  }
  int addGtoInj3SigAccuracyPerigeeTarget(double? gtoInj3SigAccuracyPerigeeTarget) {
    fbBuilder.addFloat64(37, gtoInj3SigAccuracyPerigeeTarget);
    return fbBuilder.offset;
  }
  int addGtoInj3SigAccuracyPerigeeMargin(double? gtoInj3SigAccuracyPerigeeMargin) {
    fbBuilder.addFloat64(38, gtoInj3SigAccuracyPerigeeMargin);
    return fbBuilder.offset;
  }
  int addGtoInj3SigAccuracyInclinationTarget(double? gtoInj3SigAccuracyInclinationTarget) {
    fbBuilder.addFloat64(39, gtoInj3SigAccuracyInclinationTarget);
    return fbBuilder.offset;
  }
  int addGtoInj3SigAccuracyInclinationMargin(double? gtoInj3SigAccuracyInclinationMargin) {
    fbBuilder.addFloat64(40, gtoInj3SigAccuracyInclinationMargin);
    return fbBuilder.offset;
  }
  int addAttitudeAccuracy(double? attitudeAccuracy) {
    fbBuilder.addFloat64(41, attitudeAccuracy);
    return fbBuilder.offset;
  }
  int addPayloadSeparationRate(double? payloadSeparationRate) {
    fbBuilder.addFloat64(42, payloadSeparationRate);
    return fbBuilder.offset;
  }
  int addDeploymentRotationRate(double? deploymentRotationRate) {
    fbBuilder.addFloat64(43, deploymentRotationRate);
    return fbBuilder.offset;
  }
  int addSourceUrlOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addFairingNotesOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addPayloadNotesOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addDataMode(LaunchVehicleDetailsFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(55, dataMode?.value);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addManufacturerOrgOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LaunchVehicleDetailsFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idLaunchVehicle;
  final String? _classificationMarking;
  final String? _variant;
  final String? _minorVariant;
  final String? _category;
  final String? _manufacturerOrgId;
  final String? _launchPrefix;
  final String? _family;
  final String? _propellant;
  final String? _oxidizer;
  final double? _length;
  final double? _diameter;
  final double? _launchMass;
  final double? _geoPayloadMass;
  final double? _gtoPayloadMass;
  final double? _leoPayloadMass;
  final double? _ssoPayloadMass;
  final double? _fairingLength;
  final String? _fairingName;
  final double? _fairingExternalDiameter;
  final double? _fairingInternalDiameter;
  final double? _fairingMass;
  final String? _fairingMaterial;
  final double? _maxAccelLoad;
  final double? _maxPayloadFreqLat;
  final double? _maxPayloadFreqLon;
  final double? _maxAcousticLevel;
  final double? _maxAcousticLevelRange;
  final double? _soundPressureLevel;
  final double? _maxFlightShockForce;
  final double? _maxFlightShockFreq;
  final double? _maxFairingPressureChange;
  final double? _estLaunchPrice;
  final double? _estLaunchPriceTypical;
  final double? _gtoInj3SigAccuracyApogeeTarget;
  final double? _gtoInj3SigAccuracyApogeeMargin;
  final double? _gtoInj3SigAccuracyPerigeeTarget;
  final double? _gtoInj3SigAccuracyPerigeeMargin;
  final double? _gtoInj3SigAccuracyInclinationTarget;
  final double? _gtoInj3SigAccuracyInclinationMargin;
  final double? _attitudeAccuracy;
  final double? _payloadSeparationRate;
  final double? _deploymentRotationRate;
  final String? _sourceUrl;
  final String? _notes;
  final String? _fairingNotes;
  final String? _payloadNotes;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final LaunchVehicleDetailsFullDataModeEnum? _dataMode;
  final List<String>? _tags;
  final String? _manufacturerOrg;

  LaunchVehicleDetailsFullObjectBuilder({
    String? id,
    String? idLaunchVehicle,
    String? classificationMarking,
    String? variant,
    String? minorVariant,
    String? category,
    String? manufacturerOrgId,
    String? launchPrefix,
    String? family,
    String? propellant,
    String? oxidizer,
    double? length,
    double? diameter,
    double? launchMass,
    double? geoPayloadMass,
    double? gtoPayloadMass,
    double? leoPayloadMass,
    double? ssoPayloadMass,
    double? fairingLength,
    String? fairingName,
    double? fairingExternalDiameter,
    double? fairingInternalDiameter,
    double? fairingMass,
    String? fairingMaterial,
    double? maxAccelLoad,
    double? maxPayloadFreqLat,
    double? maxPayloadFreqLon,
    double? maxAcousticLevel,
    double? maxAcousticLevelRange,
    double? soundPressureLevel,
    double? maxFlightShockForce,
    double? maxFlightShockFreq,
    double? maxFairingPressureChange,
    double? estLaunchPrice,
    double? estLaunchPriceTypical,
    double? gtoInj3SigAccuracyApogeeTarget,
    double? gtoInj3SigAccuracyApogeeMargin,
    double? gtoInj3SigAccuracyPerigeeTarget,
    double? gtoInj3SigAccuracyPerigeeMargin,
    double? gtoInj3SigAccuracyInclinationTarget,
    double? gtoInj3SigAccuracyInclinationMargin,
    double? attitudeAccuracy,
    double? payloadSeparationRate,
    double? deploymentRotationRate,
    String? sourceUrl,
    String? notes,
    String? fairingNotes,
    String? payloadNotes,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    LaunchVehicleDetailsFullDataModeEnum? dataMode,
    List<String>? tags,
    String? manufacturerOrg,
  })
      : _id = id,
        _idLaunchVehicle = idLaunchVehicle,
        _classificationMarking = classificationMarking,
        _variant = variant,
        _minorVariant = minorVariant,
        _category = category,
        _manufacturerOrgId = manufacturerOrgId,
        _launchPrefix = launchPrefix,
        _family = family,
        _propellant = propellant,
        _oxidizer = oxidizer,
        _length = length,
        _diameter = diameter,
        _launchMass = launchMass,
        _geoPayloadMass = geoPayloadMass,
        _gtoPayloadMass = gtoPayloadMass,
        _leoPayloadMass = leoPayloadMass,
        _ssoPayloadMass = ssoPayloadMass,
        _fairingLength = fairingLength,
        _fairingName = fairingName,
        _fairingExternalDiameter = fairingExternalDiameter,
        _fairingInternalDiameter = fairingInternalDiameter,
        _fairingMass = fairingMass,
        _fairingMaterial = fairingMaterial,
        _maxAccelLoad = maxAccelLoad,
        _maxPayloadFreqLat = maxPayloadFreqLat,
        _maxPayloadFreqLon = maxPayloadFreqLon,
        _maxAcousticLevel = maxAcousticLevel,
        _maxAcousticLevelRange = maxAcousticLevelRange,
        _soundPressureLevel = soundPressureLevel,
        _maxFlightShockForce = maxFlightShockForce,
        _maxFlightShockFreq = maxFlightShockFreq,
        _maxFairingPressureChange = maxFairingPressureChange,
        _estLaunchPrice = estLaunchPrice,
        _estLaunchPriceTypical = estLaunchPriceTypical,
        _gtoInj3SigAccuracyApogeeTarget = gtoInj3SigAccuracyApogeeTarget,
        _gtoInj3SigAccuracyApogeeMargin = gtoInj3SigAccuracyApogeeMargin,
        _gtoInj3SigAccuracyPerigeeTarget = gtoInj3SigAccuracyPerigeeTarget,
        _gtoInj3SigAccuracyPerigeeMargin = gtoInj3SigAccuracyPerigeeMargin,
        _gtoInj3SigAccuracyInclinationTarget = gtoInj3SigAccuracyInclinationTarget,
        _gtoInj3SigAccuracyInclinationMargin = gtoInj3SigAccuracyInclinationMargin,
        _attitudeAccuracy = attitudeAccuracy,
        _payloadSeparationRate = payloadSeparationRate,
        _deploymentRotationRate = deploymentRotationRate,
        _sourceUrl = sourceUrl,
        _notes = notes,
        _fairingNotes = fairingNotes,
        _payloadNotes = payloadNotes,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _tags = tags,
        _manufacturerOrg = manufacturerOrg;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idLaunchVehicleOffset = _idLaunchVehicle == null ? null
        : fbBuilder.writeString(_idLaunchVehicle!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? variantOffset = _variant == null ? null
        : fbBuilder.writeString(_variant!);
    final int? minorVariantOffset = _minorVariant == null ? null
        : fbBuilder.writeString(_minorVariant!);
    final int? categoryOffset = _category == null ? null
        : fbBuilder.writeString(_category!);
    final int? manufacturerOrgIdOffset = _manufacturerOrgId == null ? null
        : fbBuilder.writeString(_manufacturerOrgId!);
    final int? launchPrefixOffset = _launchPrefix == null ? null
        : fbBuilder.writeString(_launchPrefix!);
    final int? familyOffset = _family == null ? null
        : fbBuilder.writeString(_family!);
    final int? propellantOffset = _propellant == null ? null
        : fbBuilder.writeString(_propellant!);
    final int? oxidizerOffset = _oxidizer == null ? null
        : fbBuilder.writeString(_oxidizer!);
    final int? fairingNameOffset = _fairingName == null ? null
        : fbBuilder.writeString(_fairingName!);
    final int? fairingMaterialOffset = _fairingMaterial == null ? null
        : fbBuilder.writeString(_fairingMaterial!);
    final int? sourceUrlOffset = _sourceUrl == null ? null
        : fbBuilder.writeString(_sourceUrl!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? fairingNotesOffset = _fairingNotes == null ? null
        : fbBuilder.writeString(_fairingNotes!);
    final int? payloadNotesOffset = _payloadNotes == null ? null
        : fbBuilder.writeString(_payloadNotes!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? manufacturerOrgOffset = _manufacturerOrg == null ? null
        : fbBuilder.writeString(_manufacturerOrg!);
    fbBuilder.startTable(58);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idLaunchVehicleOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, variantOffset);
    fbBuilder.addOffset(4, minorVariantOffset);
    fbBuilder.addOffset(5, categoryOffset);
    fbBuilder.addOffset(6, manufacturerOrgIdOffset);
    fbBuilder.addOffset(7, launchPrefixOffset);
    fbBuilder.addOffset(8, familyOffset);
    fbBuilder.addOffset(9, propellantOffset);
    fbBuilder.addOffset(10, oxidizerOffset);
    fbBuilder.addFloat64(11, _length);
    fbBuilder.addFloat64(12, _diameter);
    fbBuilder.addFloat64(13, _launchMass);
    fbBuilder.addFloat64(14, _geoPayloadMass);
    fbBuilder.addFloat64(15, _gtoPayloadMass);
    fbBuilder.addFloat64(16, _leoPayloadMass);
    fbBuilder.addFloat64(17, _ssoPayloadMass);
    fbBuilder.addFloat64(18, _fairingLength);
    fbBuilder.addOffset(19, fairingNameOffset);
    fbBuilder.addFloat64(20, _fairingExternalDiameter);
    fbBuilder.addFloat64(21, _fairingInternalDiameter);
    fbBuilder.addFloat64(22, _fairingMass);
    fbBuilder.addOffset(23, fairingMaterialOffset);
    fbBuilder.addFloat64(24, _maxAccelLoad);
    fbBuilder.addFloat64(25, _maxPayloadFreqLat);
    fbBuilder.addFloat64(26, _maxPayloadFreqLon);
    fbBuilder.addFloat64(27, _maxAcousticLevel);
    fbBuilder.addFloat64(28, _maxAcousticLevelRange);
    fbBuilder.addFloat64(29, _soundPressureLevel);
    fbBuilder.addFloat64(30, _maxFlightShockForce);
    fbBuilder.addFloat64(31, _maxFlightShockFreq);
    fbBuilder.addFloat64(32, _maxFairingPressureChange);
    fbBuilder.addFloat64(33, _estLaunchPrice);
    fbBuilder.addFloat64(34, _estLaunchPriceTypical);
    fbBuilder.addFloat64(35, _gtoInj3SigAccuracyApogeeTarget);
    fbBuilder.addFloat64(36, _gtoInj3SigAccuracyApogeeMargin);
    fbBuilder.addFloat64(37, _gtoInj3SigAccuracyPerigeeTarget);
    fbBuilder.addFloat64(38, _gtoInj3SigAccuracyPerigeeMargin);
    fbBuilder.addFloat64(39, _gtoInj3SigAccuracyInclinationTarget);
    fbBuilder.addFloat64(40, _gtoInj3SigAccuracyInclinationMargin);
    fbBuilder.addFloat64(41, _attitudeAccuracy);
    fbBuilder.addFloat64(42, _payloadSeparationRate);
    fbBuilder.addFloat64(43, _deploymentRotationRate);
    fbBuilder.addOffset(44, sourceUrlOffset);
    fbBuilder.addOffset(45, notesOffset);
    fbBuilder.addOffset(46, fairingNotesOffset);
    fbBuilder.addOffset(47, payloadNotesOffset);
    fbBuilder.addOffset(48, createdAtOffset);
    fbBuilder.addOffset(49, createdByOffset);
    fbBuilder.addOffset(50, updatedAtOffset);
    fbBuilder.addOffset(51, updatedByOffset);
    fbBuilder.addOffset(52, sourceOffset);
    fbBuilder.addOffset(53, originOffset);
    fbBuilder.addOffset(54, origNetworkOffset);
    fbBuilder.addInt8(55, _dataMode?.value);
    fbBuilder.addOffset(56, tagsOffset);
    fbBuilder.addOffset(57, manufacturerOrgOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
