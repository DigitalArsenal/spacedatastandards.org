// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class NavigationalObstructionAbridgedDataModeEnum {
  final int value;
  const NavigationalObstructionAbridgedDataModeEnum._(this.value);

  factory NavigationalObstructionAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum NavigationalObstructionAbridgedDataModeEnum');
    }
    return result;
  }

  static NavigationalObstructionAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : NavigationalObstructionAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const NavigationalObstructionAbridgedDataModeEnum REAL = NavigationalObstructionAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const NavigationalObstructionAbridgedDataModeEnum TEST = NavigationalObstructionAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const NavigationalObstructionAbridgedDataModeEnum SIMULATED = NavigationalObstructionAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const NavigationalObstructionAbridgedDataModeEnum EXERCISE = NavigationalObstructionAbridgedDataModeEnum._(3);
  static const Map<int, NavigationalObstructionAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<NavigationalObstructionAbridgedDataModeEnum> reader = _NavigationalObstructionAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'NavigationalObstructionAbridgedDataModeEnum{value: $value}';
  }
}

class _NavigationalObstructionAbridgedDataModeEnumReader extends fb.Reader<NavigationalObstructionAbridgedDataModeEnum> {
  const _NavigationalObstructionAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  NavigationalObstructionAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      NavigationalObstructionAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Beta Version Navigational Obstruction: Information describing navigational obstructions, such as applicable boundaries, locations, heights, data ownership, and currency.
class NavigationalObstructionAbridged {
  NavigationalObstructionAbridged._(this._bc, this._bcOffset);
  factory NavigationalObstructionAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NavigationalObstructionAbridged> reader = _NavigationalObstructionAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Start date of this obstruction data set's currency, in ISO 8601 date-only format.
  ///  Example: /// Example: 2024-06-13
  ///  Constraints: No constraints specified.
  String? get cycleDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Type of obstacle (e.g. P for point, V for vector, L for line).
  ///  Example: /// Example: V
  ///  Constraints: Minimum length = 1, Maximum length = 1
  String? get obstacleType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The ID of this obstacle.
  ///  Example: /// Example: 359655
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get obstacleId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Optional obstacle ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: OU812
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The original ID for this obstacle.
  ///  Example: /// Example: L0000002289
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The Federal Information Processing Standards (FIPS) state/province numeric code of this obstacle's location.
  ///  Example: /// Example: 23
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get provinceCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  WGS-84 latitude of this point obstacle, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 46.757211
  ///  Constraints: No constraints specified.
  double get pointLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  WGS-84 longitude of this point obstacle, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -67.759494
  ///  Constraints: No constraints specified.
  double get pointLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  WGS-84 longitude of the northeastern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -122.197891
  ///  Constraints: No constraints specified.
  double get lineNelon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  WGS-84 latitude of the northeastern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 49.000584
  ///  Constraints: No constraints specified.
  double get lineNelat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  WGS-84 longitude of the southwestern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -122.722946
  ///  Constraints: No constraints specified.
  double get lineSwlon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  WGS-84 latitude of the southwestern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 48.507027
  ///  Constraints: No constraints specified.
  double get lineSwlat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  ID of the starting point of a line segment.
  ///  Example: /// Example: 359655
  ///  Constraints: No constraints specified.
  int get segStartPoint => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  ID of the end point of a line segment.
  ///  Example: /// Example: 359655
  ///  Constraints: No constraints specified.
  int get segEndPoint => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 36, 0);
  ///  Identifies the sequence number of a line segment.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get segNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 38, 0);
  ///  FACC (Feature and Attribute Coding Catalog) is a five-character code for encoding real-world entities and objects. The first letter of the code is an alphabetic value from "A" to "Z" which will map to a feature category. The second character will map to a subcategory. Characters three to five are numeric and range from 000 to 999. This value will provide a unit feature type identification within the categories.
  ///  Example: /// Example: AT040
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get facc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Identifying code for the type of this point obstacle.
  ///  Example: /// Example: 540
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get featureCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Identifying code for the type of this point obstacle.
  ///  Example: /// Example: 540
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get featureType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Type name of point obstacle.
  ///  Example: /// Example: PYLON
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get featureName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Description of this obstacle, corresponding to the FACC (Feature and Attribute Coding Catalog) value.
  ///  Example: /// Example: Powerline Pylon, General
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get featureDescription => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The World Aeronautical Chart (WAC) identifier for the area in which this obstacle is located.
  ///  Example: /// Example: 262
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get wac => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  This obstacle's World Area Code installation number (WAC-INNR).
  ///  Example: /// Example: 0409-00039
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get wacInnr => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Indicates if the feature has multiple obstructions (e.g. S = Single, M = Multiple, U = Undetermined).
  ///  Example: /// Example: S
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get multObs => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Indicates the number of obstructions associated with a feature.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numObs => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  Code representing the mathematical model of Earth used to calculate coordinates for this obstacle (e.g. WGS-84, U for undetermined, etc.).  US Forces use the World Geodetic System 1984 (WGS-84), but also use maps by allied countries with local datums.
  ///  Example: /// Example: WGS-84
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get horizDatumCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  The height Above Ground Level (AGL) of the point obstacle in feet.
  ///  Example: /// Example: 314.1
  ///  Constraints: No constraints specified.
  double get heightAgl => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  The accuracy of the height Above Ground Level (AGL) AGL value for this point obstacle in feet.
  ///  Example: /// Example: 30.1
  ///  Constraints: No constraints specified.
  double get heightAglacc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  The height Above Mean Sea Level (AMSL) of the point obstacle in feet.
  ///  Example: /// Example: 1154.1
  ///  Constraints: No constraints specified.
  double get heightMsl => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  The accuracy of the height Above Mean Sea Level (AMSL) value for this point obstacle in feet.
  ///  Example: /// Example: 34.1
  ///  Constraints: No constraints specified.
  double get heightMslacc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  The elevation at the point obstacle's location in feet.
  ///  Example: /// Example: 840.1
  ///  Constraints: No constraints specified.
  double get elevation => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  The difference between the assigned elevation of this point and its true elevation, in feet.
  ///  Example: /// Example: 17.1
  ///  Constraints: No constraints specified.
  double get elevationAcc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  The difference between the recorded horizontal coordinates of this point obstacle and its true position, in feet.
  ///  Example: /// Example: 8.1
  ///  Constraints: No constraints specified.
  double get horizAcc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  When horizontal and/or vertical accuracy requirements cannot be met because of inadequate source material, this code indicates the quality of the data.
  ///  Example: /// Example: 0
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get quality => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Code specifying if this obstacle is lit (e.g. Y = Yes, N = No, U = Unknown).
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get lightingCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  The surface material composition code of this point obstacle.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get surfaceMatCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  The side or sides of this obstruction feature which produces the greatest reflectivity potential.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get directivityCode => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 80, 0);
  ///  Method used to confirm the existence of this obstacle.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get validationCode => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 82, 0);
  ///  The transaction type/code for this obstacle (e.g. "D", "N", "R", "S", "V", "X").
  ///  Example: /// Example: V
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get transactionCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Code denoting the action, review, or process that updated this obstacle.
  ///  Example: /// Example: OT
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get processCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Indicates if this obstacle record is Active (A) or Deleted (D).
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get actDelCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Name of the agency that produced this obstruction data set.
  ///  Example: /// Example: ACME
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get producer => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  The organization that entered obstacle data other than the producer.
  ///  Example: /// Example: ACME
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get derivingOrg => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  The organization that deleted this obstacle record.
  ///  Example: /// Example: ACME
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get deletingOrg => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Source date of this obstacle data, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  ///  Example: /// Example: 2016-04-01
  ///  Constraints: No constraints specified.
  String? get sourceDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Date this obstacle data was revised, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  ///  Example: /// Example: 2020-02-26
  ///  Constraints: No constraints specified.
  String? get revDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Date this obstacle was initially added to the data set, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  ///  Example: /// Example: 1991-03-28
  ///  Constraints: No constraints specified.
  String? get initRecordDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  This field provides an array of keys that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the values array. This array must be the same length as values.
  ///  Example: /// Example: ['key1', 'key2']
  ///  Constraints: No constraints specified.
  List<String>? get keys => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 102);
  ///  This field provides an array of values that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  ///  Example: /// Example: ['value1', 'value2']
  ///  Constraints: No constraints specified.
  List<String>? get values => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 104);
  ///  Remarks regarding this obstacle.
  ///  Example: /// Example: Obstacle remarks
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get obstacleRemarks => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  The date after which this obstruction data set’s currency is stale and should be refreshed, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  ///  Example: /// Example: 2024-07-11
  ///  Constraints: No constraints specified.
  String? get nextCycleDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Earliest record date possible in this obstruction data set (not the earliest data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD). If null, this data set is assumed to be a full data pull of holdings until the cutoffDate.  If this field is populated, this data set only contains updates since the last baseline data set.
  ///  Example: /// Example: 2024-04-23
  ///  Constraints: No constraints specified.
  String? get baselineCutoffDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);
  ///  Latest record date possible in this obstruction data set (not the most recent data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  ///  Example: /// Example: 2024-05-21
  ///  Constraints: No constraints specified.
  String? get cutoffDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  The Aeronautical Information Regulation and Control (AIRAC) cycle of this obstruction data set. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
  ///  Example: /// Example: 2406
  ///  Constraints: No constraints specified.
  int get airacCycle => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 114, 0);
  ///  The baseline Aeronautical Information Regulation and Control (AIRAC) cycle for change sets only. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
  ///  Example: /// Example: 2405
  ///  Constraints: No constraints specified.
  int get baseAiracCycle => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 116, 0);
  ///  The DoD Standard Country Code designator for the country or political entity that owns the data set associated with this obstruction. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get ownerCountryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  WGS-84 longitude of the northeastern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 99.1
  ///  Constraints: No constraints specified.
  double get boundNelon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 120, 0.0);
  ///  WGS-84 latitude of the northeastern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 29.1
  ///  Constraints: No constraints specified.
  double get boundNelat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  WGS-84 longitude of the southwestern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -144.1
  ///  Constraints: No constraints specified.
  double get boundSwlon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  WGS-84 latitude of the southwestern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: -44.1
  ///  Constraints: No constraints specified.
  double get boundSwlat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  ///  The minimum height Above Ground Level (AGL) of the shortest obstruction contained in this data set, in feet.
  ///  Example: /// Example: 20.1
  ///  Constraints: No constraints specified.
  double get minHeightAgl => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 128, 0.0);
  ///  The number of point features associated with this obstruction data set.
  ///  Example: /// Example: 21830590
  ///  Constraints: No constraints specified.
  int get numPoints => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 130, 0);
  ///  The number of line features associated with this obstruction data set.
  ///  Example: /// Example: 45993
  ///  Constraints: No constraints specified.
  int get numLines => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 132, 0);
  ///  Remarks concerning this obstruction's data set.
  ///  Example: /// Example: Data set remarks
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get dataSetRemarks => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 134);
  ///  The name of the point file associated with this obstruction data set.
  ///  Example: /// Example: points.txt
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get pointsFilename => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 136);
  ///  The name of the line file associated with this obstruction data set.
  ///  Example: /// Example: lines.txt
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get linesFilename => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 138);
  ///  The name of the vector file associated with this obstruction data set.
  ///  Example: /// Example: vectors.txt
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get vectorsFilename => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 140);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 142);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 144);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 146);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 148);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 150);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 152);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 154);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  NavigationalObstructionAbridgedDataModeEnum get dataMode => NavigationalObstructionAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 156, 0));

  @override
  String toString() {
    return 'NavigationalObstructionAbridged{id: ${id}, classificationMarking: ${classificationMarking}, cycleDate: ${cycleDate}, obstacleType: ${obstacleType}, obstacleId: ${obstacleId}, externalId: ${externalId}, origId: ${origId}, countryCode: ${countryCode}, provinceCode: ${provinceCode}, pointLat: ${pointLat}, pointLon: ${pointLon}, lineNelon: ${lineNelon}, lineNelat: ${lineNelat}, lineSwlon: ${lineSwlon}, lineSwlat: ${lineSwlat}, segStartPoint: ${segStartPoint}, segEndPoint: ${segEndPoint}, segNum: ${segNum}, facc: ${facc}, featureCode: ${featureCode}, featureType: ${featureType}, featureName: ${featureName}, featureDescription: ${featureDescription}, wac: ${wac}, wacInnr: ${wacInnr}, multObs: ${multObs}, numObs: ${numObs}, horizDatumCode: ${horizDatumCode}, heightAgl: ${heightAgl}, heightAglacc: ${heightAglacc}, heightMsl: ${heightMsl}, heightMslacc: ${heightMslacc}, elevation: ${elevation}, elevationAcc: ${elevationAcc}, horizAcc: ${horizAcc}, quality: ${quality}, lightingCode: ${lightingCode}, surfaceMatCode: ${surfaceMatCode}, directivityCode: ${directivityCode}, validationCode: ${validationCode}, transactionCode: ${transactionCode}, processCode: ${processCode}, actDelCode: ${actDelCode}, producer: ${producer}, derivingOrg: ${derivingOrg}, deletingOrg: ${deletingOrg}, sourceDate: ${sourceDate}, revDate: ${revDate}, initRecordDate: ${initRecordDate}, keys: ${keys}, values: ${values}, obstacleRemarks: ${obstacleRemarks}, nextCycleDate: ${nextCycleDate}, baselineCutoffDate: ${baselineCutoffDate}, cutoffDate: ${cutoffDate}, airacCycle: ${airacCycle}, baseAiracCycle: ${baseAiracCycle}, ownerCountryCode: ${ownerCountryCode}, boundNelon: ${boundNelon}, boundNelat: ${boundNelat}, boundSwlon: ${boundSwlon}, boundSwlat: ${boundSwlat}, minHeightAgl: ${minHeightAgl}, numPoints: ${numPoints}, numLines: ${numLines}, dataSetRemarks: ${dataSetRemarks}, pointsFilename: ${pointsFilename}, linesFilename: ${linesFilename}, vectorsFilename: ${vectorsFilename}, rawFileUri: ${rawFileUri}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _NavigationalObstructionAbridgedReader extends fb.TableReader<NavigationalObstructionAbridged> {
  const _NavigationalObstructionAbridgedReader();

  @override
  NavigationalObstructionAbridged createObject(fb.BufferContext bc, int offset) => 
    NavigationalObstructionAbridged._(bc, offset);
}

class NavigationalObstructionAbridgedBuilder {
  NavigationalObstructionAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(77);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCycleDateOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addObstacleTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addObstacleIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addOrigIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addProvinceCodeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addPointLat(double? pointLat) {
    fbBuilder.addFloat64(9, pointLat);
    return fbBuilder.offset;
  }
  int addPointLon(double? pointLon) {
    fbBuilder.addFloat64(10, pointLon);
    return fbBuilder.offset;
  }
  int addLineNelon(double? lineNelon) {
    fbBuilder.addFloat64(11, lineNelon);
    return fbBuilder.offset;
  }
  int addLineNelat(double? lineNelat) {
    fbBuilder.addFloat64(12, lineNelat);
    return fbBuilder.offset;
  }
  int addLineSwlon(double? lineSwlon) {
    fbBuilder.addFloat64(13, lineSwlon);
    return fbBuilder.offset;
  }
  int addLineSwlat(double? lineSwlat) {
    fbBuilder.addFloat64(14, lineSwlat);
    return fbBuilder.offset;
  }
  int addSegStartPoint(int? segStartPoint) {
    fbBuilder.addInt32(15, segStartPoint);
    return fbBuilder.offset;
  }
  int addSegEndPoint(int? segEndPoint) {
    fbBuilder.addInt32(16, segEndPoint);
    return fbBuilder.offset;
  }
  int addSegNum(int? segNum) {
    fbBuilder.addInt32(17, segNum);
    return fbBuilder.offset;
  }
  int addFaccOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addFeatureCodeOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addFeatureTypeOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addFeatureNameOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addFeatureDescriptionOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addWacOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addWacInnrOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addMultObsOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addNumObs(int? numObs) {
    fbBuilder.addInt32(26, numObs);
    return fbBuilder.offset;
  }
  int addHorizDatumCodeOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addHeightAgl(double? heightAgl) {
    fbBuilder.addFloat64(28, heightAgl);
    return fbBuilder.offset;
  }
  int addHeightAglacc(double? heightAglacc) {
    fbBuilder.addFloat64(29, heightAglacc);
    return fbBuilder.offset;
  }
  int addHeightMsl(double? heightMsl) {
    fbBuilder.addFloat64(30, heightMsl);
    return fbBuilder.offset;
  }
  int addHeightMslacc(double? heightMslacc) {
    fbBuilder.addFloat64(31, heightMslacc);
    return fbBuilder.offset;
  }
  int addElevation(double? elevation) {
    fbBuilder.addFloat64(32, elevation);
    return fbBuilder.offset;
  }
  int addElevationAcc(double? elevationAcc) {
    fbBuilder.addFloat64(33, elevationAcc);
    return fbBuilder.offset;
  }
  int addHorizAcc(double? horizAcc) {
    fbBuilder.addFloat64(34, horizAcc);
    return fbBuilder.offset;
  }
  int addQualityOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addLightingCodeOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addSurfaceMatCodeOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addDirectivityCode(int? directivityCode) {
    fbBuilder.addInt32(38, directivityCode);
    return fbBuilder.offset;
  }
  int addValidationCode(int? validationCode) {
    fbBuilder.addInt32(39, validationCode);
    return fbBuilder.offset;
  }
  int addTransactionCodeOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addProcessCodeOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addActDelCodeOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addProducerOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addDerivingOrgOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addDeletingOrgOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addSourceDateOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addRevDateOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addInitRecordDateOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addKeysOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addObstacleRemarksOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addNextCycleDateOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addBaselineCutoffDateOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addCutoffDateOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addAiracCycle(int? airacCycle) {
    fbBuilder.addInt32(55, airacCycle);
    return fbBuilder.offset;
  }
  int addBaseAiracCycle(int? baseAiracCycle) {
    fbBuilder.addInt32(56, baseAiracCycle);
    return fbBuilder.offset;
  }
  int addOwnerCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addBoundNelon(double? boundNelon) {
    fbBuilder.addFloat64(58, boundNelon);
    return fbBuilder.offset;
  }
  int addBoundNelat(double? boundNelat) {
    fbBuilder.addFloat64(59, boundNelat);
    return fbBuilder.offset;
  }
  int addBoundSwlon(double? boundSwlon) {
    fbBuilder.addFloat64(60, boundSwlon);
    return fbBuilder.offset;
  }
  int addBoundSwlat(double? boundSwlat) {
    fbBuilder.addFloat64(61, boundSwlat);
    return fbBuilder.offset;
  }
  int addMinHeightAgl(double? minHeightAgl) {
    fbBuilder.addFloat64(62, minHeightAgl);
    return fbBuilder.offset;
  }
  int addNumPoints(int? numPoints) {
    fbBuilder.addInt32(63, numPoints);
    return fbBuilder.offset;
  }
  int addNumLines(int? numLines) {
    fbBuilder.addInt32(64, numLines);
    return fbBuilder.offset;
  }
  int addDataSetRemarksOffset(int? offset) {
    fbBuilder.addOffset(65, offset);
    return fbBuilder.offset;
  }
  int addPointsFilenameOffset(int? offset) {
    fbBuilder.addOffset(66, offset);
    return fbBuilder.offset;
  }
  int addLinesFilenameOffset(int? offset) {
    fbBuilder.addOffset(67, offset);
    return fbBuilder.offset;
  }
  int addVectorsFilenameOffset(int? offset) {
    fbBuilder.addOffset(68, offset);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(69, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(70, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(71, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(72, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(73, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(74, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(75, offset);
    return fbBuilder.offset;
  }
  int addDataMode(NavigationalObstructionAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(76, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NavigationalObstructionAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _cycleDate;
  final String? _obstacleType;
  final String? _obstacleId;
  final String? _externalId;
  final String? _origId;
  final String? _countryCode;
  final String? _provinceCode;
  final double? _pointLat;
  final double? _pointLon;
  final double? _lineNelon;
  final double? _lineNelat;
  final double? _lineSwlon;
  final double? _lineSwlat;
  final int? _segStartPoint;
  final int? _segEndPoint;
  final int? _segNum;
  final String? _facc;
  final String? _featureCode;
  final String? _featureType;
  final String? _featureName;
  final String? _featureDescription;
  final String? _wac;
  final String? _wacInnr;
  final String? _multObs;
  final int? _numObs;
  final String? _horizDatumCode;
  final double? _heightAgl;
  final double? _heightAglacc;
  final double? _heightMsl;
  final double? _heightMslacc;
  final double? _elevation;
  final double? _elevationAcc;
  final double? _horizAcc;
  final String? _quality;
  final String? _lightingCode;
  final String? _surfaceMatCode;
  final int? _directivityCode;
  final int? _validationCode;
  final String? _transactionCode;
  final String? _processCode;
  final String? _actDelCode;
  final String? _producer;
  final String? _derivingOrg;
  final String? _deletingOrg;
  final String? _sourceDate;
  final String? _revDate;
  final String? _initRecordDate;
  final List<String>? _keys;
  final List<String>? _values;
  final String? _obstacleRemarks;
  final String? _nextCycleDate;
  final String? _baselineCutoffDate;
  final String? _cutoffDate;
  final int? _airacCycle;
  final int? _baseAiracCycle;
  final String? _ownerCountryCode;
  final double? _boundNelon;
  final double? _boundNelat;
  final double? _boundSwlon;
  final double? _boundSwlat;
  final double? _minHeightAgl;
  final int? _numPoints;
  final int? _numLines;
  final String? _dataSetRemarks;
  final String? _pointsFilename;
  final String? _linesFilename;
  final String? _vectorsFilename;
  final String? _rawFileUri;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final NavigationalObstructionAbridgedDataModeEnum? _dataMode;

  NavigationalObstructionAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? cycleDate,
    String? obstacleType,
    String? obstacleId,
    String? externalId,
    String? origId,
    String? countryCode,
    String? provinceCode,
    double? pointLat,
    double? pointLon,
    double? lineNelon,
    double? lineNelat,
    double? lineSwlon,
    double? lineSwlat,
    int? segStartPoint,
    int? segEndPoint,
    int? segNum,
    String? facc,
    String? featureCode,
    String? featureType,
    String? featureName,
    String? featureDescription,
    String? wac,
    String? wacInnr,
    String? multObs,
    int? numObs,
    String? horizDatumCode,
    double? heightAgl,
    double? heightAglacc,
    double? heightMsl,
    double? heightMslacc,
    double? elevation,
    double? elevationAcc,
    double? horizAcc,
    String? quality,
    String? lightingCode,
    String? surfaceMatCode,
    int? directivityCode,
    int? validationCode,
    String? transactionCode,
    String? processCode,
    String? actDelCode,
    String? producer,
    String? derivingOrg,
    String? deletingOrg,
    String? sourceDate,
    String? revDate,
    String? initRecordDate,
    List<String>? keys,
    List<String>? values,
    String? obstacleRemarks,
    String? nextCycleDate,
    String? baselineCutoffDate,
    String? cutoffDate,
    int? airacCycle,
    int? baseAiracCycle,
    String? ownerCountryCode,
    double? boundNelon,
    double? boundNelat,
    double? boundSwlon,
    double? boundSwlat,
    double? minHeightAgl,
    int? numPoints,
    int? numLines,
    String? dataSetRemarks,
    String? pointsFilename,
    String? linesFilename,
    String? vectorsFilename,
    String? rawFileUri,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    NavigationalObstructionAbridgedDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _cycleDate = cycleDate,
        _obstacleType = obstacleType,
        _obstacleId = obstacleId,
        _externalId = externalId,
        _origId = origId,
        _countryCode = countryCode,
        _provinceCode = provinceCode,
        _pointLat = pointLat,
        _pointLon = pointLon,
        _lineNelon = lineNelon,
        _lineNelat = lineNelat,
        _lineSwlon = lineSwlon,
        _lineSwlat = lineSwlat,
        _segStartPoint = segStartPoint,
        _segEndPoint = segEndPoint,
        _segNum = segNum,
        _facc = facc,
        _featureCode = featureCode,
        _featureType = featureType,
        _featureName = featureName,
        _featureDescription = featureDescription,
        _wac = wac,
        _wacInnr = wacInnr,
        _multObs = multObs,
        _numObs = numObs,
        _horizDatumCode = horizDatumCode,
        _heightAgl = heightAgl,
        _heightAglacc = heightAglacc,
        _heightMsl = heightMsl,
        _heightMslacc = heightMslacc,
        _elevation = elevation,
        _elevationAcc = elevationAcc,
        _horizAcc = horizAcc,
        _quality = quality,
        _lightingCode = lightingCode,
        _surfaceMatCode = surfaceMatCode,
        _directivityCode = directivityCode,
        _validationCode = validationCode,
        _transactionCode = transactionCode,
        _processCode = processCode,
        _actDelCode = actDelCode,
        _producer = producer,
        _derivingOrg = derivingOrg,
        _deletingOrg = deletingOrg,
        _sourceDate = sourceDate,
        _revDate = revDate,
        _initRecordDate = initRecordDate,
        _keys = keys,
        _values = values,
        _obstacleRemarks = obstacleRemarks,
        _nextCycleDate = nextCycleDate,
        _baselineCutoffDate = baselineCutoffDate,
        _cutoffDate = cutoffDate,
        _airacCycle = airacCycle,
        _baseAiracCycle = baseAiracCycle,
        _ownerCountryCode = ownerCountryCode,
        _boundNelon = boundNelon,
        _boundNelat = boundNelat,
        _boundSwlon = boundSwlon,
        _boundSwlat = boundSwlat,
        _minHeightAgl = minHeightAgl,
        _numPoints = numPoints,
        _numLines = numLines,
        _dataSetRemarks = dataSetRemarks,
        _pointsFilename = pointsFilename,
        _linesFilename = linesFilename,
        _vectorsFilename = vectorsFilename,
        _rawFileUri = rawFileUri,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? cycleDateOffset = _cycleDate == null ? null
        : fbBuilder.writeString(_cycleDate!);
    final int? obstacleTypeOffset = _obstacleType == null ? null
        : fbBuilder.writeString(_obstacleType!);
    final int? obstacleIdOffset = _obstacleId == null ? null
        : fbBuilder.writeString(_obstacleId!);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    final int? origIdOffset = _origId == null ? null
        : fbBuilder.writeString(_origId!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? provinceCodeOffset = _provinceCode == null ? null
        : fbBuilder.writeString(_provinceCode!);
    final int? faccOffset = _facc == null ? null
        : fbBuilder.writeString(_facc!);
    final int? featureCodeOffset = _featureCode == null ? null
        : fbBuilder.writeString(_featureCode!);
    final int? featureTypeOffset = _featureType == null ? null
        : fbBuilder.writeString(_featureType!);
    final int? featureNameOffset = _featureName == null ? null
        : fbBuilder.writeString(_featureName!);
    final int? featureDescriptionOffset = _featureDescription == null ? null
        : fbBuilder.writeString(_featureDescription!);
    final int? wacOffset = _wac == null ? null
        : fbBuilder.writeString(_wac!);
    final int? wacInnrOffset = _wacInnr == null ? null
        : fbBuilder.writeString(_wacInnr!);
    final int? multObsOffset = _multObs == null ? null
        : fbBuilder.writeString(_multObs!);
    final int? horizDatumCodeOffset = _horizDatumCode == null ? null
        : fbBuilder.writeString(_horizDatumCode!);
    final int? qualityOffset = _quality == null ? null
        : fbBuilder.writeString(_quality!);
    final int? lightingCodeOffset = _lightingCode == null ? null
        : fbBuilder.writeString(_lightingCode!);
    final int? surfaceMatCodeOffset = _surfaceMatCode == null ? null
        : fbBuilder.writeString(_surfaceMatCode!);
    final int? transactionCodeOffset = _transactionCode == null ? null
        : fbBuilder.writeString(_transactionCode!);
    final int? processCodeOffset = _processCode == null ? null
        : fbBuilder.writeString(_processCode!);
    final int? actDelCodeOffset = _actDelCode == null ? null
        : fbBuilder.writeString(_actDelCode!);
    final int? producerOffset = _producer == null ? null
        : fbBuilder.writeString(_producer!);
    final int? derivingOrgOffset = _derivingOrg == null ? null
        : fbBuilder.writeString(_derivingOrg!);
    final int? deletingOrgOffset = _deletingOrg == null ? null
        : fbBuilder.writeString(_deletingOrg!);
    final int? sourceDateOffset = _sourceDate == null ? null
        : fbBuilder.writeString(_sourceDate!);
    final int? revDateOffset = _revDate == null ? null
        : fbBuilder.writeString(_revDate!);
    final int? initRecordDateOffset = _initRecordDate == null ? null
        : fbBuilder.writeString(_initRecordDate!);
    final int? keysOffset = _keys == null ? null
        : fbBuilder.writeList(_keys!.map(fbBuilder.writeString).toList());
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map(fbBuilder.writeString).toList());
    final int? obstacleRemarksOffset = _obstacleRemarks == null ? null
        : fbBuilder.writeString(_obstacleRemarks!);
    final int? nextCycleDateOffset = _nextCycleDate == null ? null
        : fbBuilder.writeString(_nextCycleDate!);
    final int? baselineCutoffDateOffset = _baselineCutoffDate == null ? null
        : fbBuilder.writeString(_baselineCutoffDate!);
    final int? cutoffDateOffset = _cutoffDate == null ? null
        : fbBuilder.writeString(_cutoffDate!);
    final int? ownerCountryCodeOffset = _ownerCountryCode == null ? null
        : fbBuilder.writeString(_ownerCountryCode!);
    final int? dataSetRemarksOffset = _dataSetRemarks == null ? null
        : fbBuilder.writeString(_dataSetRemarks!);
    final int? pointsFilenameOffset = _pointsFilename == null ? null
        : fbBuilder.writeString(_pointsFilename!);
    final int? linesFilenameOffset = _linesFilename == null ? null
        : fbBuilder.writeString(_linesFilename!);
    final int? vectorsFilenameOffset = _vectorsFilename == null ? null
        : fbBuilder.writeString(_vectorsFilename!);
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(77);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, cycleDateOffset);
    fbBuilder.addOffset(3, obstacleTypeOffset);
    fbBuilder.addOffset(4, obstacleIdOffset);
    fbBuilder.addOffset(5, externalIdOffset);
    fbBuilder.addOffset(6, origIdOffset);
    fbBuilder.addOffset(7, countryCodeOffset);
    fbBuilder.addOffset(8, provinceCodeOffset);
    fbBuilder.addFloat64(9, _pointLat);
    fbBuilder.addFloat64(10, _pointLon);
    fbBuilder.addFloat64(11, _lineNelon);
    fbBuilder.addFloat64(12, _lineNelat);
    fbBuilder.addFloat64(13, _lineSwlon);
    fbBuilder.addFloat64(14, _lineSwlat);
    fbBuilder.addInt32(15, _segStartPoint);
    fbBuilder.addInt32(16, _segEndPoint);
    fbBuilder.addInt32(17, _segNum);
    fbBuilder.addOffset(18, faccOffset);
    fbBuilder.addOffset(19, featureCodeOffset);
    fbBuilder.addOffset(20, featureTypeOffset);
    fbBuilder.addOffset(21, featureNameOffset);
    fbBuilder.addOffset(22, featureDescriptionOffset);
    fbBuilder.addOffset(23, wacOffset);
    fbBuilder.addOffset(24, wacInnrOffset);
    fbBuilder.addOffset(25, multObsOffset);
    fbBuilder.addInt32(26, _numObs);
    fbBuilder.addOffset(27, horizDatumCodeOffset);
    fbBuilder.addFloat64(28, _heightAgl);
    fbBuilder.addFloat64(29, _heightAglacc);
    fbBuilder.addFloat64(30, _heightMsl);
    fbBuilder.addFloat64(31, _heightMslacc);
    fbBuilder.addFloat64(32, _elevation);
    fbBuilder.addFloat64(33, _elevationAcc);
    fbBuilder.addFloat64(34, _horizAcc);
    fbBuilder.addOffset(35, qualityOffset);
    fbBuilder.addOffset(36, lightingCodeOffset);
    fbBuilder.addOffset(37, surfaceMatCodeOffset);
    fbBuilder.addInt32(38, _directivityCode);
    fbBuilder.addInt32(39, _validationCode);
    fbBuilder.addOffset(40, transactionCodeOffset);
    fbBuilder.addOffset(41, processCodeOffset);
    fbBuilder.addOffset(42, actDelCodeOffset);
    fbBuilder.addOffset(43, producerOffset);
    fbBuilder.addOffset(44, derivingOrgOffset);
    fbBuilder.addOffset(45, deletingOrgOffset);
    fbBuilder.addOffset(46, sourceDateOffset);
    fbBuilder.addOffset(47, revDateOffset);
    fbBuilder.addOffset(48, initRecordDateOffset);
    fbBuilder.addOffset(49, keysOffset);
    fbBuilder.addOffset(50, valuesOffset);
    fbBuilder.addOffset(51, obstacleRemarksOffset);
    fbBuilder.addOffset(52, nextCycleDateOffset);
    fbBuilder.addOffset(53, baselineCutoffDateOffset);
    fbBuilder.addOffset(54, cutoffDateOffset);
    fbBuilder.addInt32(55, _airacCycle);
    fbBuilder.addInt32(56, _baseAiracCycle);
    fbBuilder.addOffset(57, ownerCountryCodeOffset);
    fbBuilder.addFloat64(58, _boundNelon);
    fbBuilder.addFloat64(59, _boundNelat);
    fbBuilder.addFloat64(60, _boundSwlon);
    fbBuilder.addFloat64(61, _boundSwlat);
    fbBuilder.addFloat64(62, _minHeightAgl);
    fbBuilder.addInt32(63, _numPoints);
    fbBuilder.addInt32(64, _numLines);
    fbBuilder.addOffset(65, dataSetRemarksOffset);
    fbBuilder.addOffset(66, pointsFilenameOffset);
    fbBuilder.addOffset(67, linesFilenameOffset);
    fbBuilder.addOffset(68, vectorsFilenameOffset);
    fbBuilder.addOffset(69, rawFileUriOffset);
    fbBuilder.addOffset(70, createdAtOffset);
    fbBuilder.addOffset(71, createdByOffset);
    fbBuilder.addOffset(72, sourceDlOffset);
    fbBuilder.addOffset(73, sourceOffset);
    fbBuilder.addOffset(74, originOffset);
    fbBuilder.addOffset(75, origNetworkOffset);
    fbBuilder.addInt8(76, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
