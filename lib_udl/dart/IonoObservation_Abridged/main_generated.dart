// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class IonoObservationAbridgedTransmitSensorTypeEnum {
  final int value;
  const IonoObservationAbridgedTransmitSensorTypeEnum._(this.value);

  factory IonoObservationAbridgedTransmitSensorTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum IonoObservationAbridgedTransmitSensorTypeEnum');
    }
    return result;
  }

  static IonoObservationAbridgedTransmitSensorTypeEnum? _createOrNull(int? value) => 
      value == null ? null : IonoObservationAbridgedTransmitSensorTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const IonoObservationAbridgedTransmitSensorTypeEnum MOBILE = IonoObservationAbridgedTransmitSensorTypeEnum._(0);

  ///  No description available.
  static const IonoObservationAbridgedTransmitSensorTypeEnum STATIC = IonoObservationAbridgedTransmitSensorTypeEnum._(1);
  static const Map<int, IonoObservationAbridgedTransmitSensorTypeEnum> values = {
    0: MOBILE,
    1: STATIC};

  static const fb.Reader<IonoObservationAbridgedTransmitSensorTypeEnum> reader = _IonoObservationAbridgedTransmitSensorTypeEnumReader();

  @override
  String toString() {
    return 'IonoObservationAbridgedTransmitSensorTypeEnum{value: $value}';
  }
}

class _IonoObservationAbridgedTransmitSensorTypeEnumReader extends fb.Reader<IonoObservationAbridgedTransmitSensorTypeEnum> {
  const _IonoObservationAbridgedTransmitSensorTypeEnumReader();

  @override
  int get size => 1;

  @override
  IonoObservationAbridgedTransmitSensorTypeEnum read(fb.BufferContext bc, int offset) =>
      IonoObservationAbridgedTransmitSensorTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class IonoObservationAbridgedReceiveSensorTypeEnum {
  final int value;
  const IonoObservationAbridgedReceiveSensorTypeEnum._(this.value);

  factory IonoObservationAbridgedReceiveSensorTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum IonoObservationAbridgedReceiveSensorTypeEnum');
    }
    return result;
  }

  static IonoObservationAbridgedReceiveSensorTypeEnum? _createOrNull(int? value) => 
      value == null ? null : IonoObservationAbridgedReceiveSensorTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const IonoObservationAbridgedReceiveSensorTypeEnum MOBILE = IonoObservationAbridgedReceiveSensorTypeEnum._(0);

  ///  No description available.
  static const IonoObservationAbridgedReceiveSensorTypeEnum STATIC = IonoObservationAbridgedReceiveSensorTypeEnum._(1);
  static const Map<int, IonoObservationAbridgedReceiveSensorTypeEnum> values = {
    0: MOBILE,
    1: STATIC};

  static const fb.Reader<IonoObservationAbridgedReceiveSensorTypeEnum> reader = _IonoObservationAbridgedReceiveSensorTypeEnumReader();

  @override
  String toString() {
    return 'IonoObservationAbridgedReceiveSensorTypeEnum{value: $value}';
  }
}

class _IonoObservationAbridgedReceiveSensorTypeEnumReader extends fb.Reader<IonoObservationAbridgedReceiveSensorTypeEnum> {
  const _IonoObservationAbridgedReceiveSensorTypeEnumReader();

  @override
  int get size => 1;

  @override
  IonoObservationAbridgedReceiveSensorTypeEnum read(fb.BufferContext bc, int offset) =>
      IonoObservationAbridgedReceiveSensorTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum {
  final int value;
  const IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum._(this.value);

  factory IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum');
    }
    return result;
  }

  static IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum? _createOrNull(int? value) => 
      value == null ? null : IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum J2000 = IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum._(0);

  ///  No description available.
  static const IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum ECR_ECEF = IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum._(1);

  ///  No description available.
  static const IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum TEME = IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum._(2);

  ///  No description available.
  static const IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum GCRF = IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum._(3);

  ///  No description available.
  static const IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum WGS84__GEODETIC_LAT__LONG__ALT_ = IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum._(4);

  ///  No description available.
  static const IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum GEOCENTRIC__LAT__LONG__RADII_ = IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum._(5);
  static const Map<int, IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum> values = {
    0: J2000,
    1: ECR_ECEF,
    2: TEME,
    3: GCRF,
    4: WGS84__GEODETIC_LAT__LONG__ALT_,
    5: GEOCENTRIC__LAT__LONG__RADII_};

  static const fb.Reader<IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum> reader = _IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnumReader();

  @override
  String toString() {
    return 'IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum{value: $value}';
  }
}

class _IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnumReader extends fb.Reader<IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum> {
  const _IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnumReader();

  @override
  int get size => 1;

  @override
  IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum read(fb.BufferContext bc, int offset) =>
      IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class IonoObservationAbridgedDataModeEnum {
  final int value;
  const IonoObservationAbridgedDataModeEnum._(this.value);

  factory IonoObservationAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum IonoObservationAbridgedDataModeEnum');
    }
    return result;
  }

  static IonoObservationAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : IonoObservationAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const IonoObservationAbridgedDataModeEnum REAL = IonoObservationAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const IonoObservationAbridgedDataModeEnum TEST = IonoObservationAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const IonoObservationAbridgedDataModeEnum SIMULATED = IonoObservationAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const IonoObservationAbridgedDataModeEnum EXERCISE = IonoObservationAbridgedDataModeEnum._(3);
  static const Map<int, IonoObservationAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<IonoObservationAbridgedDataModeEnum> reader = _IonoObservationAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'IonoObservationAbridgedDataModeEnum{value: $value}';
  }
}

class _IonoObservationAbridgedDataModeEnumReader extends fb.Reader<IonoObservationAbridgedDataModeEnum> {
  const _IonoObservationAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  IonoObservationAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      IonoObservationAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// These services provide operations for posting and querying ionospheric observation data. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
class IonoObservationAbridged {
  IonoObservationAbridged._(this._bc, this._bcOffset);
  factory IonoObservationAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IonoObservationAbridged> reader = _IonoObservationAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: IONOOBSERVATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Ionosonde hardware type or data collection type together with possible additional descriptors.
  ///  Example: /// Example: Example hardware type
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get system => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Name of the algorithm used for the electron density profile.
  ///  Example: /// Example: NH
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get neProfileName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Version of the algorithm used for the electron density profile.
  ///  Example: /// Example: 4.32
  ///  Constraints: No constraints specified.
  double get neProfileVersion => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get scalerInfo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get densityProfile => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  URSI code for station or stations producing the ionosonde.
  ///  Example: /// Example: STATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get stationId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Sounding Start time in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get startTimeUtc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Names of settings.
  ///  Example: /// Example: Example settings
  ///  Constraints: Minimum length = 1, Maximum length = 1024
  String? get systemInfo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get systemNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
  ///  Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
  ///  Constraints: No constraints specified.
  List<String>? get transmitCoordinates => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  Enums: Mobile, Static.
  ///  Example: /// Example: Mobile
  ///  Constraints: Minimum length = 0, Maximum length = 16
  IonoObservationAbridgedTransmitSensorTypeEnum get transmitSensorType => IonoObservationAbridgedTransmitSensorTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 32, 0));
  ///  List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
  ///  Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
  ///  Constraints: No constraints specified.
  List<String>? get receiveCoordinates => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  ///  Enums: Mobile, Static.
  ///  Example: /// Example: Mobile
  ///  Constraints: Minimum length = 0, Maximum length = 16
  IonoObservationAbridgedReceiveSensorTypeEnum get receiveSensorType => IonoObservationAbridgedReceiveSensorTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 36, 0));
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get antennaElementPosition => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 32
  IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum get antennaElementPositionCoordinateSystem => IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 40, 0));
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get power => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get range => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get frequency => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get polarization => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get azimuth => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get elevation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Array of restricted frequencies.
  ///  Example: /// Example: [12.5, 34.5, 45.3]
  ///  Constraints: No constraints specified.
  List<String>? get restrictedFrequency => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 54);
  ///  Notes for the restrictedFrequency data.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get restrictedFrequencyNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get doppler => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get time => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get stokes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get amplitude => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get phase => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.
  ///  Example: /// Example: 6.75
  ///  Constraints: No constraints specified.
  double get foF2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.
  ///  Example: /// Example: 8.2
  ///  Constraints: No constraints specified.
  double get foF1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.
  ///  Example: /// Example: 4.5
  ///  Constraints: No constraints specified.
  double get fxF2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.
  ///  Example: /// Example: 4.2
  ///  Constraints: No constraints specified.
  double get fxF1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  MUF(D)/foF2.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get md => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Lowest usable frequency.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get luf => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Maximum Usable Frequency for ground distance D in MHz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get mufd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.
  ///  Example: /// Example: 2.025
  ///  Constraints: No constraints specified.
  double get fmin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.
  ///  Example: /// Example: 2.35
  ///  Constraints: No constraints specified.
  double get foEs => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Minimum frequency of F layer echoes in MHz. URSI ID: 80.
  ///  Example: /// Example: 2.7
  ///  Constraints: No constraints specified.
  double get fminF => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  Minimum frequency of E layer echoes in MHz. URSI ID: 81.
  ///  Example: /// Example: 2.025
  ///  Constraints: No constraints specified.
  double get fminE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get foE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  The extraordinary wave E critical frequency, in MHz. URSI ID: 21.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get fxE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.
  ///  Example: /// Example: 7.525
  ///  Constraints: No constraints specified.
  double get fxI => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.
  ///  Example: /// Example: 238.5
  ///  Constraints: No constraints specified.
  double get hprimeF => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.
  ///  Example: /// Example: 238.5
  ///  Constraints: No constraints specified.
  double get hprimeF2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.
  ///  Example: /// Example: 230.1
  ///  Constraints: No constraints specified.
  double get hprimeF1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  The minimum virtual height of the normal E layer trace in km. URSI ID: 24.
  ///  Example: /// Example: 98.47
  ///  Constraints: No constraints specified.
  double get hprimeE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  The minimum height of the trace used to give foEs in km. URSI ID: 34.
  ///  Example: /// Example: 95
  ///  Constraints: No constraints specified.
  double get hprimeEs => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  Peak height of E-layer in km. URSI ID: 90.
  ///  Example: /// Example: 91.744
  ///  Constraints: No constraints specified.
  double get zmE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  Parabolic E layer semi-thickness in km. URSI ID: 83.
  ///  Example: /// Example: 1.722
  ///  Constraints: No constraints specified.
  double get yE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  Average range spread of F layer in km. URSI ID: 84.
  ///  Example: /// Example: 1.83
  ///  Constraints: No constraints specified.
  double get qf => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  Average range spread of E layer in km. URSI ID: 85.
  ///  Example: /// Example: 0.95
  ///  Constraints: No constraints specified.
  double get qe => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  Lowering of F trace to the leading edge in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get downF => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  Lowering of E trace to the leading edge in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get downE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 116, 0.0);
  ///  Lowering of Es trace to the leading edge in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get downEs => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  ///  Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.
  ///  Example: /// Example: 0.075
  ///  Constraints: No constraints specified.
  double get ff => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 120, 0.0);
  ///  Frequency spread beyond foE in MHz. URSI ID: 87.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get fe => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  Distance for MUF calculation in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get d => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  MUF/OblFactor in MHz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get fmuf => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  ///  Virtual height at MUF/OblFactor frequency in MHz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get hprimefMuf => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 128, 0.0);
  ///  Adjustment to the scaled foF2 during profile inversion in MHz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get deltafoF2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 130, 0.0);
  ///  Predicted value of foE in MHz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get foEp => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  ///  The frequency at which hprimeF is measured in MHz. URSI ID: 61.
  ///  Example: /// Example: 2.5
  ///  Constraints: No constraints specified.
  double get fhprimeF => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 134, 0.0);
  ///  The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.
  ///  Example: /// Example: 2.5
  ///  Constraints: No constraints specified.
  double get fhprimeF2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 136, 0.0);
  ///  Predicted value of foF1 in MHz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get foF1p => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 138, 0.0);
  ///  Predicted value of foF2 in MHz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get foF2p => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 140, 0.0);
  ///  True height of the F2 peak in km. URSI ID: AE.
  ///  Example: /// Example: 240.498
  ///  Constraints: No constraints specified.
  double get hmF2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 142, 0.0);
  ///  True height of the F1 peak in km. URSI ID: BE.
  ///  Example: /// Example: 230.128
  ///  Constraints: No constraints specified.
  double get hmF1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 144, 0.0);
  ///  True height of the E peak in km. URSI ID: CE.
  ///  Example: /// Example: 215.643
  ///  Constraints: No constraints specified.
  double get hmE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  ///  True height at half peak electron density in the F2 layer in km. URSI ID: 93.
  ///  Example: /// Example: 240.498
  ///  Constraints: No constraints specified.
  double get zhalfNm => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 148, 0.0);
  ///  Minimum frequency of Es layer in MHz.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get fminEs => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 150, 0.0);
  ///  Parabolic F2 layer semi-thickness in km. URSI ID: 94.
  ///  Example: /// Example: 62.178
  ///  Constraints: No constraints specified.
  double get yF2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 152, 0.0);
  ///  Parabolic F1 layer semi-thickness in km. URSI ID: 95.
  ///  Example: /// Example: 55.645
  ///  Constraints: No constraints specified.
  double get yF1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 154, 0.0);
  ///  Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.
  ///  Example: /// Example: 24.673
  ///  Constraints: No constraints specified.
  double get tec => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 156, 0.0);
  ///  Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.
  ///  Example: /// Example: 35.613
  ///  Constraints: No constraints specified.
  double get scaleHeightF2Peak => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 158, 0.0);
  ///  IRI thickness parameter in km. URSI ID: D0.
  ///  Example: /// Example: 68.07
  ///  Constraints: No constraints specified.
  double get b0 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 160, 0.0);
  ///  IRI profile shape parameter. URSI ID: D1.
  ///  Example: /// Example: 1.87
  ///  Constraints: No constraints specified.
  double get b1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 162, 0.0);
  ///  IRI profile shape parameter, F1 layer. URSI ID: D2.
  ///  Example: /// Example: 1.94
  ///  Constraints: No constraints specified.
  double get d1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 164, 0.0);
  ///  Critical frequency of night time auroral E layer in MHz. URSI ID: 23.
  ///  Example: /// Example: 45.764
  ///  Constraints: No constraints specified.
  double get foEa => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 166, 0.0);
  ///  Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.
  ///  Example: /// Example: 102.6
  ///  Constraints: No constraints specified.
  double get hprimeEa => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 168, 0.0);
  ///  Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.
  ///  Example: /// Example: 87.21
  ///  Constraints: No constraints specified.
  double get foP => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 170, 0.0);
  ///  Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.
  ///  Example: /// Example: 89.45
  ///  Constraints: No constraints specified.
  double get hprimeP => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 172, 0.0);
  ///  The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.
  ///  Example: /// Example: 34.867
  ///  Constraints: No constraints specified.
  double get fbEs => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 174, 0.0);
  ///  Characterization of the shape of Es trace. URSI ID: 36.
  ///  Example: /// Example: Auroral
  ///  Constraints: Minimum length = 0, Maximum length = 25
  String? get typeEs => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 176);
  ///  List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. 
  ///  Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get charAtts => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 178);
  ///  Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get height => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 180);
  ///  Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get plasmaFrequency => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 182);
  ///  Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).
  ///  Example: /// Example: [0.8, 0.2, 0.5]
  ///  Constraints: No constraints specified.
  List<String>? get plasmaFrequencyUncertainty => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 184);
  ///  Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get electronDensity => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 186);
  ///  Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).
  ///  Example: /// Example: [0.8, 0.2, 0.5]
  ///  Constraints: No constraints specified.
  List<String>? get electronDensityUncertainty => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 188);
  ///  Array of Legacy Artist Flags.
  ///  Example: /// Example: [1, 2, 3]
  ///  Constraints: No constraints specified.
  List<String>? get artistFlags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 190);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get traceGeneric => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 192);
  ///  Array of speed in m/s at which the disturbance travels through the ionosphere.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get tidPhaseSpeeds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 194);
  ///  Array of degrees clockwise from true North of the TID.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get tidAzimuth => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 196);
  ///  Array of 1/frequency of the TID wave.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get tidPeriods => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 198);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get datum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 200);
  ///  Equipment location.
  ///  Example: /// Example: Millstone Hill
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get platformName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 202);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 204);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 206);
  ///  Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 208);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 210);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 212);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 214);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  IonoObservationAbridgedDataModeEnum get dataMode => IonoObservationAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 216, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 218);

  @override
  String toString() {
    return 'IonoObservationAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, system: ${system}, neProfileName: ${neProfileName}, neProfileVersion: ${neProfileVersion}, scalerInfo: ${scalerInfo}, densityProfile: ${densityProfile}, stationId: ${stationId}, startTimeUtc: ${startTimeUtc}, systemInfo: ${systemInfo}, systemNotes: ${systemNotes}, transmitCoordinates: ${transmitCoordinates}, transmitSensorType: ${transmitSensorType}, receiveCoordinates: ${receiveCoordinates}, receiveSensorType: ${receiveSensorType}, antennaElementPosition: ${antennaElementPosition}, antennaElementPositionCoordinateSystem: ${antennaElementPositionCoordinateSystem}, power: ${power}, range: ${range}, frequency: ${frequency}, polarization: ${polarization}, azimuth: ${azimuth}, elevation: ${elevation}, restrictedFrequency: ${restrictedFrequency}, restrictedFrequencyNotes: ${restrictedFrequencyNotes}, doppler: ${doppler}, time: ${time}, stokes: ${stokes}, amplitude: ${amplitude}, phase: ${phase}, foF2: ${foF2}, foF1: ${foF1}, fxF2: ${fxF2}, fxF1: ${fxF1}, md: ${md}, luf: ${luf}, mufd: ${mufd}, fmin: ${fmin}, foEs: ${foEs}, fminF: ${fminF}, fminE: ${fminE}, foE: ${foE}, fxE: ${fxE}, fxI: ${fxI}, hprimeF: ${hprimeF}, hprimeF2: ${hprimeF2}, hprimeF1: ${hprimeF1}, hprimeE: ${hprimeE}, hprimeEs: ${hprimeEs}, zmE: ${zmE}, yE: ${yE}, qf: ${qf}, qe: ${qe}, downF: ${downF}, downE: ${downE}, downEs: ${downEs}, ff: ${ff}, fe: ${fe}, d: ${d}, fmuf: ${fmuf}, hprimefMuf: ${hprimefMuf}, deltafoF2: ${deltafoF2}, foEp: ${foEp}, fhprimeF: ${fhprimeF}, fhprimeF2: ${fhprimeF2}, foF1p: ${foF1p}, foF2p: ${foF2p}, hmF2: ${hmF2}, hmF1: ${hmF1}, hmE: ${hmE}, zhalfNm: ${zhalfNm}, fminEs: ${fminEs}, yF2: ${yF2}, yF1: ${yF1}, tec: ${tec}, scaleHeightF2Peak: ${scaleHeightF2Peak}, b0: ${b0}, b1: ${b1}, d1: ${d1}, foEa: ${foEa}, hprimeEa: ${hprimeEa}, foP: ${foP}, hprimeP: ${hprimeP}, fbEs: ${fbEs}, typeEs: ${typeEs}, charAtts: ${charAtts}, height: ${height}, plasmaFrequency: ${plasmaFrequency}, plasmaFrequencyUncertainty: ${plasmaFrequencyUncertainty}, electronDensity: ${electronDensity}, electronDensityUncertainty: ${electronDensityUncertainty}, artistFlags: ${artistFlags}, traceGeneric: ${traceGeneric}, tidPhaseSpeeds: ${tidPhaseSpeeds}, tidAzimuth: ${tidAzimuth}, tidPeriods: ${tidPeriods}, datum: ${datum}, platformName: ${platformName}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _IonoObservationAbridgedReader extends fb.TableReader<IonoObservationAbridged> {
  const _IonoObservationAbridgedReader();

  @override
  IonoObservationAbridged createObject(fb.BufferContext bc, int offset) => 
    IonoObservationAbridged._(bc, offset);
}

class IonoObservationAbridgedBuilder {
  IonoObservationAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(108);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSystemOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addNeProfileNameOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addNeProfileVersion(double? neProfileVersion) {
    fbBuilder.addFloat64(6, neProfileVersion);
    return fbBuilder.offset;
  }
  int addScalerInfoOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addDensityProfileOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addStationIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addStartTimeUtcOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addSystemInfoOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addSystemNotesOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addTransmitCoordinatesOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addTransmitSensorType(IonoObservationAbridgedTransmitSensorTypeEnum? transmitSensorType) {
    fbBuilder.addInt8(14, transmitSensorType?.value);
    return fbBuilder.offset;
  }
  int addReceiveCoordinatesOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addReceiveSensorType(IonoObservationAbridgedReceiveSensorTypeEnum? receiveSensorType) {
    fbBuilder.addInt8(16, receiveSensorType?.value);
    return fbBuilder.offset;
  }
  int addAntennaElementPositionOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addAntennaElementPositionCoordinateSystem(IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum? antennaElementPositionCoordinateSystem) {
    fbBuilder.addInt8(18, antennaElementPositionCoordinateSystem?.value);
    return fbBuilder.offset;
  }
  int addPowerOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addRangeOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addFrequencyOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addPolarizationOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addAzimuthOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addElevationOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addRestrictedFrequencyOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addRestrictedFrequencyNotesOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addDopplerOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addTimeOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addStokesOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addAmplitudeOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addPhaseOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addFoF2(double? foF2) {
    fbBuilder.addFloat64(32, foF2);
    return fbBuilder.offset;
  }
  int addFoF1(double? foF1) {
    fbBuilder.addFloat64(33, foF1);
    return fbBuilder.offset;
  }
  int addFxF2(double? fxF2) {
    fbBuilder.addFloat64(34, fxF2);
    return fbBuilder.offset;
  }
  int addFxF1(double? fxF1) {
    fbBuilder.addFloat64(35, fxF1);
    return fbBuilder.offset;
  }
  int addMd(double? md) {
    fbBuilder.addFloat64(36, md);
    return fbBuilder.offset;
  }
  int addLuf(double? luf) {
    fbBuilder.addFloat64(37, luf);
    return fbBuilder.offset;
  }
  int addMufd(double? mufd) {
    fbBuilder.addFloat64(38, mufd);
    return fbBuilder.offset;
  }
  int addFmin(double? fmin) {
    fbBuilder.addFloat64(39, fmin);
    return fbBuilder.offset;
  }
  int addFoEs(double? foEs) {
    fbBuilder.addFloat64(40, foEs);
    return fbBuilder.offset;
  }
  int addFminF(double? fminF) {
    fbBuilder.addFloat64(41, fminF);
    return fbBuilder.offset;
  }
  int addFminE(double? fminE) {
    fbBuilder.addFloat64(42, fminE);
    return fbBuilder.offset;
  }
  int addFoE(double? foE) {
    fbBuilder.addFloat64(43, foE);
    return fbBuilder.offset;
  }
  int addFxE(double? fxE) {
    fbBuilder.addFloat64(44, fxE);
    return fbBuilder.offset;
  }
  int addFxI(double? fxI) {
    fbBuilder.addFloat64(45, fxI);
    return fbBuilder.offset;
  }
  int addHprimeF(double? hprimeF) {
    fbBuilder.addFloat64(46, hprimeF);
    return fbBuilder.offset;
  }
  int addHprimeF2(double? hprimeF2) {
    fbBuilder.addFloat64(47, hprimeF2);
    return fbBuilder.offset;
  }
  int addHprimeF1(double? hprimeF1) {
    fbBuilder.addFloat64(48, hprimeF1);
    return fbBuilder.offset;
  }
  int addHprimeE(double? hprimeE) {
    fbBuilder.addFloat64(49, hprimeE);
    return fbBuilder.offset;
  }
  int addHprimeEs(double? hprimeEs) {
    fbBuilder.addFloat64(50, hprimeEs);
    return fbBuilder.offset;
  }
  int addZmE(double? zmE) {
    fbBuilder.addFloat64(51, zmE);
    return fbBuilder.offset;
  }
  int addYE(double? yE) {
    fbBuilder.addFloat64(52, yE);
    return fbBuilder.offset;
  }
  int addQf(double? qf) {
    fbBuilder.addFloat64(53, qf);
    return fbBuilder.offset;
  }
  int addQe(double? qe) {
    fbBuilder.addFloat64(54, qe);
    return fbBuilder.offset;
  }
  int addDownF(double? downF) {
    fbBuilder.addFloat64(55, downF);
    return fbBuilder.offset;
  }
  int addDownE(double? downE) {
    fbBuilder.addFloat64(56, downE);
    return fbBuilder.offset;
  }
  int addDownEs(double? downEs) {
    fbBuilder.addFloat64(57, downEs);
    return fbBuilder.offset;
  }
  int addFf(double? ff) {
    fbBuilder.addFloat64(58, ff);
    return fbBuilder.offset;
  }
  int addFe(double? fe) {
    fbBuilder.addFloat64(59, fe);
    return fbBuilder.offset;
  }
  int addD(double? d) {
    fbBuilder.addFloat64(60, d);
    return fbBuilder.offset;
  }
  int addFmuf(double? fmuf) {
    fbBuilder.addFloat64(61, fmuf);
    return fbBuilder.offset;
  }
  int addHprimefMuf(double? hprimefMuf) {
    fbBuilder.addFloat64(62, hprimefMuf);
    return fbBuilder.offset;
  }
  int addDeltafoF2(double? deltafoF2) {
    fbBuilder.addFloat64(63, deltafoF2);
    return fbBuilder.offset;
  }
  int addFoEp(double? foEp) {
    fbBuilder.addFloat64(64, foEp);
    return fbBuilder.offset;
  }
  int addFhprimeF(double? fhprimeF) {
    fbBuilder.addFloat64(65, fhprimeF);
    return fbBuilder.offset;
  }
  int addFhprimeF2(double? fhprimeF2) {
    fbBuilder.addFloat64(66, fhprimeF2);
    return fbBuilder.offset;
  }
  int addFoF1p(double? foF1p) {
    fbBuilder.addFloat64(67, foF1p);
    return fbBuilder.offset;
  }
  int addFoF2p(double? foF2p) {
    fbBuilder.addFloat64(68, foF2p);
    return fbBuilder.offset;
  }
  int addHmF2(double? hmF2) {
    fbBuilder.addFloat64(69, hmF2);
    return fbBuilder.offset;
  }
  int addHmF1(double? hmF1) {
    fbBuilder.addFloat64(70, hmF1);
    return fbBuilder.offset;
  }
  int addHmE(double? hmE) {
    fbBuilder.addFloat64(71, hmE);
    return fbBuilder.offset;
  }
  int addZhalfNm(double? zhalfNm) {
    fbBuilder.addFloat64(72, zhalfNm);
    return fbBuilder.offset;
  }
  int addFminEs(double? fminEs) {
    fbBuilder.addFloat64(73, fminEs);
    return fbBuilder.offset;
  }
  int addYF2(double? yF2) {
    fbBuilder.addFloat64(74, yF2);
    return fbBuilder.offset;
  }
  int addYF1(double? yF1) {
    fbBuilder.addFloat64(75, yF1);
    return fbBuilder.offset;
  }
  int addTec(double? tec) {
    fbBuilder.addFloat64(76, tec);
    return fbBuilder.offset;
  }
  int addScaleHeightF2Peak(double? scaleHeightF2Peak) {
    fbBuilder.addFloat64(77, scaleHeightF2Peak);
    return fbBuilder.offset;
  }
  int addB0(double? b0) {
    fbBuilder.addFloat64(78, b0);
    return fbBuilder.offset;
  }
  int addB1(double? b1) {
    fbBuilder.addFloat64(79, b1);
    return fbBuilder.offset;
  }
  int addD1(double? d1) {
    fbBuilder.addFloat64(80, d1);
    return fbBuilder.offset;
  }
  int addFoEa(double? foEa) {
    fbBuilder.addFloat64(81, foEa);
    return fbBuilder.offset;
  }
  int addHprimeEa(double? hprimeEa) {
    fbBuilder.addFloat64(82, hprimeEa);
    return fbBuilder.offset;
  }
  int addFoP(double? foP) {
    fbBuilder.addFloat64(83, foP);
    return fbBuilder.offset;
  }
  int addHprimeP(double? hprimeP) {
    fbBuilder.addFloat64(84, hprimeP);
    return fbBuilder.offset;
  }
  int addFbEs(double? fbEs) {
    fbBuilder.addFloat64(85, fbEs);
    return fbBuilder.offset;
  }
  int addTypeEsOffset(int? offset) {
    fbBuilder.addOffset(86, offset);
    return fbBuilder.offset;
  }
  int addCharAttsOffset(int? offset) {
    fbBuilder.addOffset(87, offset);
    return fbBuilder.offset;
  }
  int addHeightOffset(int? offset) {
    fbBuilder.addOffset(88, offset);
    return fbBuilder.offset;
  }
  int addPlasmaFrequencyOffset(int? offset) {
    fbBuilder.addOffset(89, offset);
    return fbBuilder.offset;
  }
  int addPlasmaFrequencyUncertaintyOffset(int? offset) {
    fbBuilder.addOffset(90, offset);
    return fbBuilder.offset;
  }
  int addElectronDensityOffset(int? offset) {
    fbBuilder.addOffset(91, offset);
    return fbBuilder.offset;
  }
  int addElectronDensityUncertaintyOffset(int? offset) {
    fbBuilder.addOffset(92, offset);
    return fbBuilder.offset;
  }
  int addArtistFlagsOffset(int? offset) {
    fbBuilder.addOffset(93, offset);
    return fbBuilder.offset;
  }
  int addTraceGenericOffset(int? offset) {
    fbBuilder.addOffset(94, offset);
    return fbBuilder.offset;
  }
  int addTidPhaseSpeedsOffset(int? offset) {
    fbBuilder.addOffset(95, offset);
    return fbBuilder.offset;
  }
  int addTidAzimuthOffset(int? offset) {
    fbBuilder.addOffset(96, offset);
    return fbBuilder.offset;
  }
  int addTidPeriodsOffset(int? offset) {
    fbBuilder.addOffset(97, offset);
    return fbBuilder.offset;
  }
  int addDatumOffset(int? offset) {
    fbBuilder.addOffset(98, offset);
    return fbBuilder.offset;
  }
  int addPlatformNameOffset(int? offset) {
    fbBuilder.addOffset(99, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(100, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(101, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(102, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(103, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(104, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(105, offset);
    return fbBuilder.offset;
  }
  int addDataMode(IonoObservationAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(106, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(107, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IonoObservationAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idSensor;
  final String? _origSensorId;
  final String? _system;
  final String? _neProfileName;
  final double? _neProfileVersion;
  final String? _scalerInfo;
  final String? _densityProfile;
  final String? _stationId;
  final String? _startTimeUtc;
  final String? _systemInfo;
  final String? _systemNotes;
  final List<String>? _transmitCoordinates;
  final IonoObservationAbridgedTransmitSensorTypeEnum? _transmitSensorType;
  final List<String>? _receiveCoordinates;
  final IonoObservationAbridgedReceiveSensorTypeEnum? _receiveSensorType;
  final String? _antennaElementPosition;
  final IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum? _antennaElementPositionCoordinateSystem;
  final String? _power;
  final String? _range;
  final String? _frequency;
  final String? _polarization;
  final String? _azimuth;
  final String? _elevation;
  final List<String>? _restrictedFrequency;
  final String? _restrictedFrequencyNotes;
  final String? _doppler;
  final String? _time;
  final String? _stokes;
  final String? _amplitude;
  final String? _phase;
  final double? _foF2;
  final double? _foF1;
  final double? _fxF2;
  final double? _fxF1;
  final double? _md;
  final double? _luf;
  final double? _mufd;
  final double? _fmin;
  final double? _foEs;
  final double? _fminF;
  final double? _fminE;
  final double? _foE;
  final double? _fxE;
  final double? _fxI;
  final double? _hprimeF;
  final double? _hprimeF2;
  final double? _hprimeF1;
  final double? _hprimeE;
  final double? _hprimeEs;
  final double? _zmE;
  final double? _yE;
  final double? _qf;
  final double? _qe;
  final double? _downF;
  final double? _downE;
  final double? _downEs;
  final double? _ff;
  final double? _fe;
  final double? _d;
  final double? _fmuf;
  final double? _hprimefMuf;
  final double? _deltafoF2;
  final double? _foEp;
  final double? _fhprimeF;
  final double? _fhprimeF2;
  final double? _foF1p;
  final double? _foF2p;
  final double? _hmF2;
  final double? _hmF1;
  final double? _hmE;
  final double? _zhalfNm;
  final double? _fminEs;
  final double? _yF2;
  final double? _yF1;
  final double? _tec;
  final double? _scaleHeightF2Peak;
  final double? _b0;
  final double? _b1;
  final double? _d1;
  final double? _foEa;
  final double? _hprimeEa;
  final double? _foP;
  final double? _hprimeP;
  final double? _fbEs;
  final String? _typeEs;
  final List<String>? _charAtts;
  final List<String>? _height;
  final List<String>? _plasmaFrequency;
  final List<String>? _plasmaFrequencyUncertainty;
  final List<String>? _electronDensity;
  final List<String>? _electronDensityUncertainty;
  final List<String>? _artistFlags;
  final String? _traceGeneric;
  final List<String>? _tidPhaseSpeeds;
  final List<String>? _tidAzimuth;
  final List<String>? _tidPeriods;
  final String? _datum;
  final String? _platformName;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final IonoObservationAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;

  IonoObservationAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idSensor,
    String? origSensorId,
    String? system,
    String? neProfileName,
    double? neProfileVersion,
    String? scalerInfo,
    String? densityProfile,
    String? stationId,
    String? startTimeUtc,
    String? systemInfo,
    String? systemNotes,
    List<String>? transmitCoordinates,
    IonoObservationAbridgedTransmitSensorTypeEnum? transmitSensorType,
    List<String>? receiveCoordinates,
    IonoObservationAbridgedReceiveSensorTypeEnum? receiveSensorType,
    String? antennaElementPosition,
    IonoObservationAbridgedAntennaElementPositionCoordinateSystemEnum? antennaElementPositionCoordinateSystem,
    String? power,
    String? range,
    String? frequency,
    String? polarization,
    String? azimuth,
    String? elevation,
    List<String>? restrictedFrequency,
    String? restrictedFrequencyNotes,
    String? doppler,
    String? time,
    String? stokes,
    String? amplitude,
    String? phase,
    double? foF2,
    double? foF1,
    double? fxF2,
    double? fxF1,
    double? md,
    double? luf,
    double? mufd,
    double? fmin,
    double? foEs,
    double? fminF,
    double? fminE,
    double? foE,
    double? fxE,
    double? fxI,
    double? hprimeF,
    double? hprimeF2,
    double? hprimeF1,
    double? hprimeE,
    double? hprimeEs,
    double? zmE,
    double? yE,
    double? qf,
    double? qe,
    double? downF,
    double? downE,
    double? downEs,
    double? ff,
    double? fe,
    double? d,
    double? fmuf,
    double? hprimefMuf,
    double? deltafoF2,
    double? foEp,
    double? fhprimeF,
    double? fhprimeF2,
    double? foF1p,
    double? foF2p,
    double? hmF2,
    double? hmF1,
    double? hmE,
    double? zhalfNm,
    double? fminEs,
    double? yF2,
    double? yF1,
    double? tec,
    double? scaleHeightF2Peak,
    double? b0,
    double? b1,
    double? d1,
    double? foEa,
    double? hprimeEa,
    double? foP,
    double? hprimeP,
    double? fbEs,
    String? typeEs,
    List<String>? charAtts,
    List<String>? height,
    List<String>? plasmaFrequency,
    List<String>? plasmaFrequencyUncertainty,
    List<String>? electronDensity,
    List<String>? electronDensityUncertainty,
    List<String>? artistFlags,
    String? traceGeneric,
    List<String>? tidPhaseSpeeds,
    List<String>? tidAzimuth,
    List<String>? tidPeriods,
    String? datum,
    String? platformName,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    IonoObservationAbridgedDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _system = system,
        _neProfileName = neProfileName,
        _neProfileVersion = neProfileVersion,
        _scalerInfo = scalerInfo,
        _densityProfile = densityProfile,
        _stationId = stationId,
        _startTimeUtc = startTimeUtc,
        _systemInfo = systemInfo,
        _systemNotes = systemNotes,
        _transmitCoordinates = transmitCoordinates,
        _transmitSensorType = transmitSensorType,
        _receiveCoordinates = receiveCoordinates,
        _receiveSensorType = receiveSensorType,
        _antennaElementPosition = antennaElementPosition,
        _antennaElementPositionCoordinateSystem = antennaElementPositionCoordinateSystem,
        _power = power,
        _range = range,
        _frequency = frequency,
        _polarization = polarization,
        _azimuth = azimuth,
        _elevation = elevation,
        _restrictedFrequency = restrictedFrequency,
        _restrictedFrequencyNotes = restrictedFrequencyNotes,
        _doppler = doppler,
        _time = time,
        _stokes = stokes,
        _amplitude = amplitude,
        _phase = phase,
        _foF2 = foF2,
        _foF1 = foF1,
        _fxF2 = fxF2,
        _fxF1 = fxF1,
        _md = md,
        _luf = luf,
        _mufd = mufd,
        _fmin = fmin,
        _foEs = foEs,
        _fminF = fminF,
        _fminE = fminE,
        _foE = foE,
        _fxE = fxE,
        _fxI = fxI,
        _hprimeF = hprimeF,
        _hprimeF2 = hprimeF2,
        _hprimeF1 = hprimeF1,
        _hprimeE = hprimeE,
        _hprimeEs = hprimeEs,
        _zmE = zmE,
        _yE = yE,
        _qf = qf,
        _qe = qe,
        _downF = downF,
        _downE = downE,
        _downEs = downEs,
        _ff = ff,
        _fe = fe,
        _d = d,
        _fmuf = fmuf,
        _hprimefMuf = hprimefMuf,
        _deltafoF2 = deltafoF2,
        _foEp = foEp,
        _fhprimeF = fhprimeF,
        _fhprimeF2 = fhprimeF2,
        _foF1p = foF1p,
        _foF2p = foF2p,
        _hmF2 = hmF2,
        _hmF1 = hmF1,
        _hmE = hmE,
        _zhalfNm = zhalfNm,
        _fminEs = fminEs,
        _yF2 = yF2,
        _yF1 = yF1,
        _tec = tec,
        _scaleHeightF2Peak = scaleHeightF2Peak,
        _b0 = b0,
        _b1 = b1,
        _d1 = d1,
        _foEa = foEa,
        _hprimeEa = hprimeEa,
        _foP = foP,
        _hprimeP = hprimeP,
        _fbEs = fbEs,
        _typeEs = typeEs,
        _charAtts = charAtts,
        _height = height,
        _plasmaFrequency = plasmaFrequency,
        _plasmaFrequencyUncertainty = plasmaFrequencyUncertainty,
        _electronDensity = electronDensity,
        _electronDensityUncertainty = electronDensityUncertainty,
        _artistFlags = artistFlags,
        _traceGeneric = traceGeneric,
        _tidPhaseSpeeds = tidPhaseSpeeds,
        _tidAzimuth = tidAzimuth,
        _tidPeriods = tidPeriods,
        _datum = datum,
        _platformName = platformName,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? systemOffset = _system == null ? null
        : fbBuilder.writeString(_system!);
    final int? neProfileNameOffset = _neProfileName == null ? null
        : fbBuilder.writeString(_neProfileName!);
    final int? scalerInfoOffset = _scalerInfo == null ? null
        : fbBuilder.writeString(_scalerInfo!);
    final int? densityProfileOffset = _densityProfile == null ? null
        : fbBuilder.writeString(_densityProfile!);
    final int? stationIdOffset = _stationId == null ? null
        : fbBuilder.writeString(_stationId!);
    final int? startTimeUtcOffset = _startTimeUtc == null ? null
        : fbBuilder.writeString(_startTimeUtc!);
    final int? systemInfoOffset = _systemInfo == null ? null
        : fbBuilder.writeString(_systemInfo!);
    final int? systemNotesOffset = _systemNotes == null ? null
        : fbBuilder.writeString(_systemNotes!);
    final int? transmitCoordinatesOffset = _transmitCoordinates == null ? null
        : fbBuilder.writeList(_transmitCoordinates!.map(fbBuilder.writeString).toList());
    final int? receiveCoordinatesOffset = _receiveCoordinates == null ? null
        : fbBuilder.writeList(_receiveCoordinates!.map(fbBuilder.writeString).toList());
    final int? antennaElementPositionOffset = _antennaElementPosition == null ? null
        : fbBuilder.writeString(_antennaElementPosition!);
    final int? powerOffset = _power == null ? null
        : fbBuilder.writeString(_power!);
    final int? rangeOffset = _range == null ? null
        : fbBuilder.writeString(_range!);
    final int? frequencyOffset = _frequency == null ? null
        : fbBuilder.writeString(_frequency!);
    final int? polarizationOffset = _polarization == null ? null
        : fbBuilder.writeString(_polarization!);
    final int? azimuthOffset = _azimuth == null ? null
        : fbBuilder.writeString(_azimuth!);
    final int? elevationOffset = _elevation == null ? null
        : fbBuilder.writeString(_elevation!);
    final int? restrictedFrequencyOffset = _restrictedFrequency == null ? null
        : fbBuilder.writeList(_restrictedFrequency!.map(fbBuilder.writeString).toList());
    final int? restrictedFrequencyNotesOffset = _restrictedFrequencyNotes == null ? null
        : fbBuilder.writeString(_restrictedFrequencyNotes!);
    final int? dopplerOffset = _doppler == null ? null
        : fbBuilder.writeString(_doppler!);
    final int? timeOffset = _time == null ? null
        : fbBuilder.writeString(_time!);
    final int? stokesOffset = _stokes == null ? null
        : fbBuilder.writeString(_stokes!);
    final int? amplitudeOffset = _amplitude == null ? null
        : fbBuilder.writeString(_amplitude!);
    final int? phaseOffset = _phase == null ? null
        : fbBuilder.writeString(_phase!);
    final int? typeEsOffset = _typeEs == null ? null
        : fbBuilder.writeString(_typeEs!);
    final int? charAttsOffset = _charAtts == null ? null
        : fbBuilder.writeList(_charAtts!.map(fbBuilder.writeString).toList());
    final int? heightOffset = _height == null ? null
        : fbBuilder.writeList(_height!.map(fbBuilder.writeString).toList());
    final int? plasmaFrequencyOffset = _plasmaFrequency == null ? null
        : fbBuilder.writeList(_plasmaFrequency!.map(fbBuilder.writeString).toList());
    final int? plasmaFrequencyUncertaintyOffset = _plasmaFrequencyUncertainty == null ? null
        : fbBuilder.writeList(_plasmaFrequencyUncertainty!.map(fbBuilder.writeString).toList());
    final int? electronDensityOffset = _electronDensity == null ? null
        : fbBuilder.writeList(_electronDensity!.map(fbBuilder.writeString).toList());
    final int? electronDensityUncertaintyOffset = _electronDensityUncertainty == null ? null
        : fbBuilder.writeList(_electronDensityUncertainty!.map(fbBuilder.writeString).toList());
    final int? artistFlagsOffset = _artistFlags == null ? null
        : fbBuilder.writeList(_artistFlags!.map(fbBuilder.writeString).toList());
    final int? traceGenericOffset = _traceGeneric == null ? null
        : fbBuilder.writeString(_traceGeneric!);
    final int? tidPhaseSpeedsOffset = _tidPhaseSpeeds == null ? null
        : fbBuilder.writeList(_tidPhaseSpeeds!.map(fbBuilder.writeString).toList());
    final int? tidAzimuthOffset = _tidAzimuth == null ? null
        : fbBuilder.writeList(_tidAzimuth!.map(fbBuilder.writeString).toList());
    final int? tidPeriodsOffset = _tidPeriods == null ? null
        : fbBuilder.writeList(_tidPeriods!.map(fbBuilder.writeString).toList());
    final int? datumOffset = _datum == null ? null
        : fbBuilder.writeString(_datum!);
    final int? platformNameOffset = _platformName == null ? null
        : fbBuilder.writeString(_platformName!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(108);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idSensorOffset);
    fbBuilder.addOffset(3, origSensorIdOffset);
    fbBuilder.addOffset(4, systemOffset);
    fbBuilder.addOffset(5, neProfileNameOffset);
    fbBuilder.addFloat64(6, _neProfileVersion);
    fbBuilder.addOffset(7, scalerInfoOffset);
    fbBuilder.addOffset(8, densityProfileOffset);
    fbBuilder.addOffset(9, stationIdOffset);
    fbBuilder.addOffset(10, startTimeUtcOffset);
    fbBuilder.addOffset(11, systemInfoOffset);
    fbBuilder.addOffset(12, systemNotesOffset);
    fbBuilder.addOffset(13, transmitCoordinatesOffset);
    fbBuilder.addInt8(14, _transmitSensorType?.value);
    fbBuilder.addOffset(15, receiveCoordinatesOffset);
    fbBuilder.addInt8(16, _receiveSensorType?.value);
    fbBuilder.addOffset(17, antennaElementPositionOffset);
    fbBuilder.addInt8(18, _antennaElementPositionCoordinateSystem?.value);
    fbBuilder.addOffset(19, powerOffset);
    fbBuilder.addOffset(20, rangeOffset);
    fbBuilder.addOffset(21, frequencyOffset);
    fbBuilder.addOffset(22, polarizationOffset);
    fbBuilder.addOffset(23, azimuthOffset);
    fbBuilder.addOffset(24, elevationOffset);
    fbBuilder.addOffset(25, restrictedFrequencyOffset);
    fbBuilder.addOffset(26, restrictedFrequencyNotesOffset);
    fbBuilder.addOffset(27, dopplerOffset);
    fbBuilder.addOffset(28, timeOffset);
    fbBuilder.addOffset(29, stokesOffset);
    fbBuilder.addOffset(30, amplitudeOffset);
    fbBuilder.addOffset(31, phaseOffset);
    fbBuilder.addFloat64(32, _foF2);
    fbBuilder.addFloat64(33, _foF1);
    fbBuilder.addFloat64(34, _fxF2);
    fbBuilder.addFloat64(35, _fxF1);
    fbBuilder.addFloat64(36, _md);
    fbBuilder.addFloat64(37, _luf);
    fbBuilder.addFloat64(38, _mufd);
    fbBuilder.addFloat64(39, _fmin);
    fbBuilder.addFloat64(40, _foEs);
    fbBuilder.addFloat64(41, _fminF);
    fbBuilder.addFloat64(42, _fminE);
    fbBuilder.addFloat64(43, _foE);
    fbBuilder.addFloat64(44, _fxE);
    fbBuilder.addFloat64(45, _fxI);
    fbBuilder.addFloat64(46, _hprimeF);
    fbBuilder.addFloat64(47, _hprimeF2);
    fbBuilder.addFloat64(48, _hprimeF1);
    fbBuilder.addFloat64(49, _hprimeE);
    fbBuilder.addFloat64(50, _hprimeEs);
    fbBuilder.addFloat64(51, _zmE);
    fbBuilder.addFloat64(52, _yE);
    fbBuilder.addFloat64(53, _qf);
    fbBuilder.addFloat64(54, _qe);
    fbBuilder.addFloat64(55, _downF);
    fbBuilder.addFloat64(56, _downE);
    fbBuilder.addFloat64(57, _downEs);
    fbBuilder.addFloat64(58, _ff);
    fbBuilder.addFloat64(59, _fe);
    fbBuilder.addFloat64(60, _d);
    fbBuilder.addFloat64(61, _fmuf);
    fbBuilder.addFloat64(62, _hprimefMuf);
    fbBuilder.addFloat64(63, _deltafoF2);
    fbBuilder.addFloat64(64, _foEp);
    fbBuilder.addFloat64(65, _fhprimeF);
    fbBuilder.addFloat64(66, _fhprimeF2);
    fbBuilder.addFloat64(67, _foF1p);
    fbBuilder.addFloat64(68, _foF2p);
    fbBuilder.addFloat64(69, _hmF2);
    fbBuilder.addFloat64(70, _hmF1);
    fbBuilder.addFloat64(71, _hmE);
    fbBuilder.addFloat64(72, _zhalfNm);
    fbBuilder.addFloat64(73, _fminEs);
    fbBuilder.addFloat64(74, _yF2);
    fbBuilder.addFloat64(75, _yF1);
    fbBuilder.addFloat64(76, _tec);
    fbBuilder.addFloat64(77, _scaleHeightF2Peak);
    fbBuilder.addFloat64(78, _b0);
    fbBuilder.addFloat64(79, _b1);
    fbBuilder.addFloat64(80, _d1);
    fbBuilder.addFloat64(81, _foEa);
    fbBuilder.addFloat64(82, _hprimeEa);
    fbBuilder.addFloat64(83, _foP);
    fbBuilder.addFloat64(84, _hprimeP);
    fbBuilder.addFloat64(85, _fbEs);
    fbBuilder.addOffset(86, typeEsOffset);
    fbBuilder.addOffset(87, charAttsOffset);
    fbBuilder.addOffset(88, heightOffset);
    fbBuilder.addOffset(89, plasmaFrequencyOffset);
    fbBuilder.addOffset(90, plasmaFrequencyUncertaintyOffset);
    fbBuilder.addOffset(91, electronDensityOffset);
    fbBuilder.addOffset(92, electronDensityUncertaintyOffset);
    fbBuilder.addOffset(93, artistFlagsOffset);
    fbBuilder.addOffset(94, traceGenericOffset);
    fbBuilder.addOffset(95, tidPhaseSpeedsOffset);
    fbBuilder.addOffset(96, tidAzimuthOffset);
    fbBuilder.addOffset(97, tidPeriodsOffset);
    fbBuilder.addOffset(98, datumOffset);
    fbBuilder.addOffset(99, platformNameOffset);
    fbBuilder.addOffset(100, createdAtOffset);
    fbBuilder.addOffset(101, createdByOffset);
    fbBuilder.addOffset(102, updatedAtOffset);
    fbBuilder.addOffset(103, updatedByOffset);
    fbBuilder.addOffset(104, sourceOffset);
    fbBuilder.addOffset(105, originOffset);
    fbBuilder.addInt8(106, _dataMode?.value);
    fbBuilder.addOffset(107, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
