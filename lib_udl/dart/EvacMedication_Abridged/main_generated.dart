// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Medication specifics.
class EvacMedicationAbridged {
  EvacMedicationAbridged._(this._bc, this._bcOffset);
  factory EvacMedicationAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EvacMedicationAbridged> reader = _EvacMedicationAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The type of medication administered.   Intended as, but not constrained to, K07.1 Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC, COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL, HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA, PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
  ///  Example: /// Example: TYLENOL
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Body part location or body part referenced for medication. Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
  ///  Example: /// Example: ARM LEFT BACK
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get bodyPart => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Quantity of medicine or drug administered or recommended to be taken at a particular time.
  ///  Example: /// Example: 800mg
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get dose => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Route of medication delivery (e.g. INJECTION, ORAL, etc.).
  ///  Example: /// Example: ORAL
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get adminRoute => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The time that the medication was administered in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-10-15T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get time => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Additional comments on the patient's medication information.
  ///  Example: /// Example: Comments on the patient's medication information.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get comments => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'EvacMedicationAbridged{type: ${type}, bodyPart: ${bodyPart}, dose: ${dose}, adminRoute: ${adminRoute}, time: ${time}, comments: ${comments}}';
  }
}

class _EvacMedicationAbridgedReader extends fb.TableReader<EvacMedicationAbridged> {
  const _EvacMedicationAbridgedReader();

  @override
  EvacMedicationAbridged createObject(fb.BufferContext bc, int offset) => 
    EvacMedicationAbridged._(bc, offset);
}

class EvacMedicationAbridgedBuilder {
  EvacMedicationAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addBodyPartOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDoseOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAdminRouteOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCommentsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EvacMedicationAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _bodyPart;
  final String? _dose;
  final String? _adminRoute;
  final String? _time;
  final String? _comments;

  EvacMedicationAbridgedObjectBuilder({
    String? type,
    String? bodyPart,
    String? dose,
    String? adminRoute,
    String? time,
    String? comments,
  })
      : _type = type,
        _bodyPart = bodyPart,
        _dose = dose,
        _adminRoute = adminRoute,
        _time = time,
        _comments = comments;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? bodyPartOffset = _bodyPart == null ? null
        : fbBuilder.writeString(_bodyPart!);
    final int? doseOffset = _dose == null ? null
        : fbBuilder.writeString(_dose!);
    final int? adminRouteOffset = _adminRoute == null ? null
        : fbBuilder.writeString(_adminRoute!);
    final int? timeOffset = _time == null ? null
        : fbBuilder.writeString(_time!);
    final int? commentsOffset = _comments == null ? null
        : fbBuilder.writeString(_comments!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, bodyPartOffset);
    fbBuilder.addOffset(2, doseOffset);
    fbBuilder.addOffset(3, adminRouteOffset);
    fbBuilder.addOffset(4, timeOffset);
    fbBuilder.addOffset(5, commentsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
