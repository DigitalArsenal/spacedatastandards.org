// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// List of actions associated with this effect response.
class EffectResponseActionsListAbridged {
  EffectResponseActionsListAbridged._(this._bc, this._bcOffset);
  factory EffectResponseActionsListAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EffectResponseActionsListAbridged> reader = _EffectResponseActionsListAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  A summary string describing different aspects of the action.
  ///  Example: /// Example: Example summary
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get summary => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Identifier of this action.
  ///  Example: /// Example: ACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get actionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The desired start time of this task, in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get actionStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The desired end time of this task, in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get actionEndTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The start time of the asset TOT (time over target), in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get totStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The end time of the asset TOT (time over target), in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get totEndTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
  ///  Example: /// Example: AIRCRAFT
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get actionActorSrcType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.
  ///  Example: /// Example: ACTIONACTORSRC-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get actionActorSrcId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The type of munition or sensor used by this asset/actor.
  ///  Example: /// Example: SENSOR1
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get effector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The source type of the targetId identifier (POI, TRACK).
  ///  Example: /// Example: POI
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get targetSrcType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
  ///  Example: /// Example: TARGETSRC-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get targetSrcId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  double get actorInterceptLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 180.1
  ///  Constraints: No constraints specified.
  double get actorInterceptLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get actorInterceptAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  double get weaponInterceptLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 180.1
  ///  Constraints: No constraints specified.
  double get weaponInterceptLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  The WGS-84 altitude of the weapon destination location, in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get weaponInterceptAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  List of metrics associated with this action.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get actionMetrics => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 38);

  @override
  String toString() {
    return 'EffectResponseActionsListAbridged{summary: ${summary}, actionId: ${actionId}, actionStartTime: ${actionStartTime}, actionEndTime: ${actionEndTime}, totStartTime: ${totStartTime}, totEndTime: ${totEndTime}, actionActorSrcType: ${actionActorSrcType}, actionActorSrcId: ${actionActorSrcId}, effector: ${effector}, targetSrcType: ${targetSrcType}, targetSrcId: ${targetSrcId}, actorInterceptLat: ${actorInterceptLat}, actorInterceptLon: ${actorInterceptLon}, actorInterceptAlt: ${actorInterceptAlt}, weaponInterceptLat: ${weaponInterceptLat}, weaponInterceptLon: ${weaponInterceptLon}, weaponInterceptAlt: ${weaponInterceptAlt}, actionMetrics: ${actionMetrics}}';
  }
}

class _EffectResponseActionsListAbridgedReader extends fb.TableReader<EffectResponseActionsListAbridged> {
  const _EffectResponseActionsListAbridgedReader();

  @override
  EffectResponseActionsListAbridged createObject(fb.BufferContext bc, int offset) => 
    EffectResponseActionsListAbridged._(bc, offset);
}

class EffectResponseActionsListAbridgedBuilder {
  EffectResponseActionsListAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(18);
  }

  int addSummaryOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addActionIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addActionStartTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addActionEndTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTotStartTimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTotEndTimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addActionActorSrcTypeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addActionActorSrcIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addEffectorOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addTargetSrcTypeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addTargetSrcIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addActorInterceptLat(double? actorInterceptLat) {
    fbBuilder.addFloat64(11, actorInterceptLat);
    return fbBuilder.offset;
  }
  int addActorInterceptLon(double? actorInterceptLon) {
    fbBuilder.addFloat64(12, actorInterceptLon);
    return fbBuilder.offset;
  }
  int addActorInterceptAlt(double? actorInterceptAlt) {
    fbBuilder.addFloat64(13, actorInterceptAlt);
    return fbBuilder.offset;
  }
  int addWeaponInterceptLat(double? weaponInterceptLat) {
    fbBuilder.addFloat64(14, weaponInterceptLat);
    return fbBuilder.offset;
  }
  int addWeaponInterceptLon(double? weaponInterceptLon) {
    fbBuilder.addFloat64(15, weaponInterceptLon);
    return fbBuilder.offset;
  }
  int addWeaponInterceptAlt(double? weaponInterceptAlt) {
    fbBuilder.addFloat64(16, weaponInterceptAlt);
    return fbBuilder.offset;
  }
  int addActionMetricsOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EffectResponseActionsListAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _summary;
  final String? _actionId;
  final String? _actionStartTime;
  final String? _actionEndTime;
  final String? _totStartTime;
  final String? _totEndTime;
  final String? _actionActorSrcType;
  final String? _actionActorSrcId;
  final String? _effector;
  final String? _targetSrcType;
  final String? _targetSrcId;
  final double? _actorInterceptLat;
  final double? _actorInterceptLon;
  final double? _actorInterceptAlt;
  final double? _weaponInterceptLat;
  final double? _weaponInterceptLon;
  final double? _weaponInterceptAlt;
  final List<String>? _actionMetrics;

  EffectResponseActionsListAbridgedObjectBuilder({
    String? summary,
    String? actionId,
    String? actionStartTime,
    String? actionEndTime,
    String? totStartTime,
    String? totEndTime,
    String? actionActorSrcType,
    String? actionActorSrcId,
    String? effector,
    String? targetSrcType,
    String? targetSrcId,
    double? actorInterceptLat,
    double? actorInterceptLon,
    double? actorInterceptAlt,
    double? weaponInterceptLat,
    double? weaponInterceptLon,
    double? weaponInterceptAlt,
    List<String>? actionMetrics,
  })
      : _summary = summary,
        _actionId = actionId,
        _actionStartTime = actionStartTime,
        _actionEndTime = actionEndTime,
        _totStartTime = totStartTime,
        _totEndTime = totEndTime,
        _actionActorSrcType = actionActorSrcType,
        _actionActorSrcId = actionActorSrcId,
        _effector = effector,
        _targetSrcType = targetSrcType,
        _targetSrcId = targetSrcId,
        _actorInterceptLat = actorInterceptLat,
        _actorInterceptLon = actorInterceptLon,
        _actorInterceptAlt = actorInterceptAlt,
        _weaponInterceptLat = weaponInterceptLat,
        _weaponInterceptLon = weaponInterceptLon,
        _weaponInterceptAlt = weaponInterceptAlt,
        _actionMetrics = actionMetrics;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? summaryOffset = _summary == null ? null
        : fbBuilder.writeString(_summary!);
    final int? actionIdOffset = _actionId == null ? null
        : fbBuilder.writeString(_actionId!);
    final int? actionStartTimeOffset = _actionStartTime == null ? null
        : fbBuilder.writeString(_actionStartTime!);
    final int? actionEndTimeOffset = _actionEndTime == null ? null
        : fbBuilder.writeString(_actionEndTime!);
    final int? totStartTimeOffset = _totStartTime == null ? null
        : fbBuilder.writeString(_totStartTime!);
    final int? totEndTimeOffset = _totEndTime == null ? null
        : fbBuilder.writeString(_totEndTime!);
    final int? actionActorSrcTypeOffset = _actionActorSrcType == null ? null
        : fbBuilder.writeString(_actionActorSrcType!);
    final int? actionActorSrcIdOffset = _actionActorSrcId == null ? null
        : fbBuilder.writeString(_actionActorSrcId!);
    final int? effectorOffset = _effector == null ? null
        : fbBuilder.writeString(_effector!);
    final int? targetSrcTypeOffset = _targetSrcType == null ? null
        : fbBuilder.writeString(_targetSrcType!);
    final int? targetSrcIdOffset = _targetSrcId == null ? null
        : fbBuilder.writeString(_targetSrcId!);
    final int? actionMetricsOffset = _actionMetrics == null ? null
        : fbBuilder.writeList(_actionMetrics!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(18);
    fbBuilder.addOffset(0, summaryOffset);
    fbBuilder.addOffset(1, actionIdOffset);
    fbBuilder.addOffset(2, actionStartTimeOffset);
    fbBuilder.addOffset(3, actionEndTimeOffset);
    fbBuilder.addOffset(4, totStartTimeOffset);
    fbBuilder.addOffset(5, totEndTimeOffset);
    fbBuilder.addOffset(6, actionActorSrcTypeOffset);
    fbBuilder.addOffset(7, actionActorSrcIdOffset);
    fbBuilder.addOffset(8, effectorOffset);
    fbBuilder.addOffset(9, targetSrcTypeOffset);
    fbBuilder.addOffset(10, targetSrcIdOffset);
    fbBuilder.addFloat64(11, _actorInterceptLat);
    fbBuilder.addFloat64(12, _actorInterceptLon);
    fbBuilder.addFloat64(13, _actorInterceptAlt);
    fbBuilder.addFloat64(14, _weaponInterceptLat);
    fbBuilder.addFloat64(15, _weaponInterceptLon);
    fbBuilder.addFloat64(16, _weaponInterceptAlt);
    fbBuilder.addOffset(17, actionMetricsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
