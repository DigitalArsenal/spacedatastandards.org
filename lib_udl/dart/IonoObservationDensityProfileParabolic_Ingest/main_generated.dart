// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Coefficients to describe the E, F1, and F2 layers as parabolic-shape segments.
class IonoObservationDensityProfileParabolicIngest {
  IonoObservationDensityProfileParabolicIngest._(this._bc, this._bcOffset);
  factory IonoObservationDensityProfileParabolicIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IonoObservationDensityProfileParabolicIngest> reader = _IonoObservationDensityProfileParabolicIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  General description of the QP computation algorithm.
  ///  Example: /// Example: Best-fit algorithm in NHPC software.
  ///  Constraints: No constraints specified.
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Describes the E, F1, and F2 layers as parabolic-shape segments.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get parabolicItems => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'IonoObservationDensityProfileParabolicIngest{description: ${description}, parabolicItems: ${parabolicItems}}';
  }
}

class _IonoObservationDensityProfileParabolicIngestReader extends fb.TableReader<IonoObservationDensityProfileParabolicIngest> {
  const _IonoObservationDensityProfileParabolicIngestReader();

  @override
  IonoObservationDensityProfileParabolicIngest createObject(fb.BufferContext bc, int offset) => 
    IonoObservationDensityProfileParabolicIngest._(bc, offset);
}

class IonoObservationDensityProfileParabolicIngestBuilder {
  IonoObservationDensityProfileParabolicIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addParabolicItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IonoObservationDensityProfileParabolicIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _description;
  final List<String>? _parabolicItems;

  IonoObservationDensityProfileParabolicIngestObjectBuilder({
    String? description,
    List<String>? parabolicItems,
  })
      : _description = description,
        _parabolicItems = parabolicItems;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? parabolicItemsOffset = _parabolicItems == null ? null
        : fbBuilder.writeList(_parabolicItems!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, descriptionOffset);
    fbBuilder.addOffset(1, parabolicItemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
