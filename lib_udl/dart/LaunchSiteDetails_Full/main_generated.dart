// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class LaunchSiteDetailsFullDataModeEnum {
  final int value;
  const LaunchSiteDetailsFullDataModeEnum._(this.value);

  factory LaunchSiteDetailsFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum LaunchSiteDetailsFullDataModeEnum');
    }
    return result;
  }

  static LaunchSiteDetailsFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : LaunchSiteDetailsFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const LaunchSiteDetailsFullDataModeEnum REAL = LaunchSiteDetailsFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const LaunchSiteDetailsFullDataModeEnum TEST = LaunchSiteDetailsFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const LaunchSiteDetailsFullDataModeEnum SIMULATED = LaunchSiteDetailsFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const LaunchSiteDetailsFullDataModeEnum EXERCISE = LaunchSiteDetailsFullDataModeEnum._(3);
  static const Map<int, LaunchSiteDetailsFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<LaunchSiteDetailsFullDataModeEnum> reader = _LaunchSiteDetailsFullDataModeEnumReader();

  @override
  String toString() {
    return 'LaunchSiteDetailsFullDataModeEnum{value: $value}';
  }
}

class _LaunchSiteDetailsFullDataModeEnumReader extends fb.Reader<LaunchSiteDetailsFullDataModeEnum> {
  const _LaunchSiteDetailsFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  LaunchSiteDetailsFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      LaunchSiteDetailsFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of details compiled/collected on a launch site by a particular source. A launch site may have several details records.
class LaunchSiteDetailsFull {
  LaunchSiteDetailsFull._(this._bc, this._bcOffset);
  factory LaunchSiteDetailsFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LaunchSiteDetailsFull> reader = _LaunchSiteDetailsFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: LAUNCHSITEDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Identifier of the parent launch site record.
  ///  Example: /// Example: LAUNCHSITE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idLaunchSite => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  ID of the location data for the launch site, or null if mobile (e.g. sea launch platform in international waters).
  ///  Example: /// Example: LOCATION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idLocation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Launch site group name. Multiple launch sites may be colocated within a launch ''group''.
  ///  Example: /// Example: Example-group-name
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get launchGroup => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Array of supported launch inclinations known for this site. The array is always sized as a multiple of two and includes start/end values to support ranges.  For example, if a site support inclinations of 10 and 12-14, the array would have the following values: [10,10, 12,14].
  ///  Example: /// Example: [10.23, 10.23, 12.23, 14.23]
  ///  Constraints: No constraints specified.
  List<String>? get availableInclinations => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);
  ///  Notes/description of the launch site.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  LaunchSiteDetailsFullDataModeEnum get dataMode => LaunchSiteDetailsFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 32, 0));
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get location => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);

  @override
  String toString() {
    return 'LaunchSiteDetailsFull{id: ${id}, idLaunchSite: ${idLaunchSite}, classificationMarking: ${classificationMarking}, idLocation: ${idLocation}, launchGroup: ${launchGroup}, availableInclinations: ${availableInclinations}, description: ${description}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, tags: ${tags}, location: ${location}}';
  }
}

class _LaunchSiteDetailsFullReader extends fb.TableReader<LaunchSiteDetailsFull> {
  const _LaunchSiteDetailsFullReader();

  @override
  LaunchSiteDetailsFull createObject(fb.BufferContext bc, int offset) => 
    LaunchSiteDetailsFull._(bc, offset);
}

class LaunchSiteDetailsFullBuilder {
  LaunchSiteDetailsFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(17);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdLaunchSiteOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdLocationOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addLaunchGroupOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addAvailableInclinationsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addDataMode(LaunchSiteDetailsFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(14, dataMode?.value);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addLocationOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LaunchSiteDetailsFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idLaunchSite;
  final String? _classificationMarking;
  final String? _idLocation;
  final String? _launchGroup;
  final List<String>? _availableInclinations;
  final String? _description;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final LaunchSiteDetailsFullDataModeEnum? _dataMode;
  final List<String>? _tags;
  final String? _location;

  LaunchSiteDetailsFullObjectBuilder({
    String? id,
    String? idLaunchSite,
    String? classificationMarking,
    String? idLocation,
    String? launchGroup,
    List<String>? availableInclinations,
    String? description,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    LaunchSiteDetailsFullDataModeEnum? dataMode,
    List<String>? tags,
    String? location,
  })
      : _id = id,
        _idLaunchSite = idLaunchSite,
        _classificationMarking = classificationMarking,
        _idLocation = idLocation,
        _launchGroup = launchGroup,
        _availableInclinations = availableInclinations,
        _description = description,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _tags = tags,
        _location = location;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idLaunchSiteOffset = _idLaunchSite == null ? null
        : fbBuilder.writeString(_idLaunchSite!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idLocationOffset = _idLocation == null ? null
        : fbBuilder.writeString(_idLocation!);
    final int? launchGroupOffset = _launchGroup == null ? null
        : fbBuilder.writeString(_launchGroup!);
    final int? availableInclinationsOffset = _availableInclinations == null ? null
        : fbBuilder.writeList(_availableInclinations!.map(fbBuilder.writeString).toList());
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? locationOffset = _location == null ? null
        : fbBuilder.writeString(_location!);
    fbBuilder.startTable(17);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idLaunchSiteOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, idLocationOffset);
    fbBuilder.addOffset(4, launchGroupOffset);
    fbBuilder.addOffset(5, availableInclinationsOffset);
    fbBuilder.addOffset(6, descriptionOffset);
    fbBuilder.addOffset(7, createdAtOffset);
    fbBuilder.addOffset(8, createdByOffset);
    fbBuilder.addOffset(9, updatedAtOffset);
    fbBuilder.addOffset(10, updatedByOffset);
    fbBuilder.addOffset(11, sourceOffset);
    fbBuilder.addOffset(12, originOffset);
    fbBuilder.addOffset(13, origNetworkOffset);
    fbBuilder.addInt8(14, _dataMode?.value);
    fbBuilder.addOffset(15, tagsOffset);
    fbBuilder.addOffset(16, locationOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
