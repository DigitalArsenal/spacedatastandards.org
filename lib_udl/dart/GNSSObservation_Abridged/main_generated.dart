// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.
class GnssobservationAbridged {
  GnssobservationAbridged._(this._bc, this._bcOffset);
  factory GnssobservationAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GnssobservationAbridged> reader = _GnssobservationAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:
  ///  G - GPS (NN = PRN)
  ///  R - GLONASS (NN = Slot Number)
  ///  S - SBAS Payload (NN = PRN-100)
  ///  E - Galileo (NN = PRN)
  ///  C - BeiDou (NN = PRN)
  ///  J - QZSS (NN = PRN - 1923)
  ///  I - IRNSS (NN = PRN)
  ///  Example: /// Example: GEJ
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get gnssSatId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get trackingStatus => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  ///  GNSS Automatic Gain Control State.
  ///  Example: /// Example: 20
  ///  Constraints: No constraints specified.
  int get agcState => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.
  ///  Example: /// Example: ['S1C', 'C1C', 'C1D']
  ///  Constraints: No constraints specified.
  List<String>? get obsCodeSet => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);
  ///  Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.
  ///  Example: /// Example: [42.1, 1000.0, 0.9]
  ///  Constraints: No constraints specified.
  List<String>? get ob => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'GnssobservationAbridged{gnssSatId: ${gnssSatId}, trackingStatus: ${trackingStatus}, agcState: ${agcState}, obsCodeSet: ${obsCodeSet}, ob: ${ob}}';
  }
}

class _GnssobservationAbridgedReader extends fb.TableReader<GnssobservationAbridged> {
  const _GnssobservationAbridgedReader();

  @override
  GnssobservationAbridged createObject(fb.BufferContext bc, int offset) => 
    GnssobservationAbridged._(bc, offset);
}

class GnssobservationAbridgedBuilder {
  GnssobservationAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addGnssSatIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTrackingStatus(int? trackingStatus) {
    fbBuilder.addInt32(1, trackingStatus);
    return fbBuilder.offset;
  }
  int addAgcState(int? agcState) {
    fbBuilder.addInt32(2, agcState);
    return fbBuilder.offset;
  }
  int addObsCodeSetOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addObOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GnssobservationAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _gnssSatId;
  final int? _trackingStatus;
  final int? _agcState;
  final List<String>? _obsCodeSet;
  final List<String>? _ob;

  GnssobservationAbridgedObjectBuilder({
    String? gnssSatId,
    int? trackingStatus,
    int? agcState,
    List<String>? obsCodeSet,
    List<String>? ob,
  })
      : _gnssSatId = gnssSatId,
        _trackingStatus = trackingStatus,
        _agcState = agcState,
        _obsCodeSet = obsCodeSet,
        _ob = ob;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? gnssSatIdOffset = _gnssSatId == null ? null
        : fbBuilder.writeString(_gnssSatId!);
    final int? obsCodeSetOffset = _obsCodeSet == null ? null
        : fbBuilder.writeList(_obsCodeSet!.map(fbBuilder.writeString).toList());
    final int? obOffset = _ob == null ? null
        : fbBuilder.writeList(_ob!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, gnssSatIdOffset);
    fbBuilder.addInt32(1, _trackingStatus);
    fbBuilder.addInt32(2, _agcState);
    fbBuilder.addOffset(3, obsCodeSetOffset);
    fbBuilder.addOffset(4, obOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
