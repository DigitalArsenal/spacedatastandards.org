// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SensorcharacteristicsAbridgedDataModeEnum {
  final int value;
  const SensorcharacteristicsAbridgedDataModeEnum._(this.value);

  factory SensorcharacteristicsAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SensorcharacteristicsAbridgedDataModeEnum');
    }
    return result;
  }

  static SensorcharacteristicsAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SensorcharacteristicsAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SensorcharacteristicsAbridgedDataModeEnum REAL = SensorcharacteristicsAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SensorcharacteristicsAbridgedDataModeEnum TEST = SensorcharacteristicsAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SensorcharacteristicsAbridgedDataModeEnum SIMULATED = SensorcharacteristicsAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SensorcharacteristicsAbridgedDataModeEnum EXERCISE = SensorcharacteristicsAbridgedDataModeEnum._(3);
  static const Map<int, SensorcharacteristicsAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SensorcharacteristicsAbridgedDataModeEnum> reader = _SensorcharacteristicsAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'SensorcharacteristicsAbridgedDataModeEnum{value: $value}';
  }
}

class _SensorcharacteristicsAbridgedDataModeEnumReader extends fb.Reader<SensorcharacteristicsAbridgedDataModeEnum> {
  const _SensorcharacteristicsAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SensorcharacteristicsAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      SensorcharacteristicsAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of characteristics and capabilities of a sensor.
class SensorcharacteristicsAbridged {
  SensorcharacteristicsAbridged._(this._bc, this._bcOffset);
  factory SensorcharacteristicsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SensorcharacteristicsAbridged> reader = _SensorcharacteristicsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SENSORCHARACTERISTICS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Unique identifier of the parent sensor.
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Azimuth rate acquisition limit (rad/min).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get azimuthRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Elevation rate acquisition limit (rad/min).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get elevationRateGeolm => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Minimum range measurement capability of the sensor (km).
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get minRangeLimit => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Maximum observable range limit (km) -- sensor cannot acquire beyond this range.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get maxRangeLimit => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  For Orbiting Sensors, First Card Azimuth limit #1 (left, deg).
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get leftClockAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  For Orbiting Sensors, First Card Azimuth limit #3 (left, deg).
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get rightClockAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  The angle of the center of a phased array sensor.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get boresight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  The number of degrees off of the boresight for the sensor (degrees).
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get boresightOffAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Negative Range-rate/relative velocity limit (km/sec).
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get negativeRangeRateLimit => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Positive Range-rate/relative velocity limit (km/sec).
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get positiveRangeRateLimit => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Absolute magnitude acquisition limit for optical sensors.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get magnitudeLimit => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Beginning track angle limit (rad). Track angle is the angle between the camera axis and the gimbal plane. Values range from 0 - PI/2.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get trackAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Signal to Noise Ratio (in db). The values for this range from 0.0 - + 99.99 dB.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get minSignalNoiseRatio => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  The beam width of a Sensor's Fan (range). The values for this range from (0.0 to PI).
  ///  Example: /// Example: 3.1
  ///  Constraints: No constraints specified.
  double get fanBeamWidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Maximum taskable range of the sensor (km).
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get taskableRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Maximum observable sensor range (km).
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get maxObservableRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Radio frequency (if sensor is RF).
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get radioFrequency => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Radar frequency of the sensor (if a radar sensor).
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get radarFrequency => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Radar transmit power in Watts.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get transmitPower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Horizontal field of view.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get hFov => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Vertical field of view.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get vFov => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Horizontal pixel resolution.
  ///  Example: /// Example: 1000
  ///  Constraints: No constraints specified.
  int get hResPixels => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  Vertical pixel resolution.
  ///  Example: /// Example: 1000
  ///  Constraints: No constraints specified.
  int get vResPixels => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  Sensor band.
  ///  Example: /// Example: BAND
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get band => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Max deviation angle of the sensor in degrees.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get maxDeviationAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Optical sensor camera aperture.
  ///  Example: /// Example: 2.23
  ///  Constraints: No constraints specified.
  double get aperture => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Leftmost GEO belt longitude limit for this sensor (if applicable).
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get leftGeoBeltLimit => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Rightmost GEO belt longitude limit for this sensor (if applicable).
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get rightGeoBeltLimit => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the radar, in scans/minute.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get asrScanRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  For radar based sensors, K-factor is a relative indicator of refractivity that infers the amount of radar beam bending due to atmosphere. (1<K<2).
  ///  Example: /// Example: 1.4
  ///  Constraints: No constraints specified.
  double get k => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  For radar based sensors, the focal point elevation of the radar at the site, in meters.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get focalPoint => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  For tower sensors, the physical height of the sensor tower, in meters.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get towerHeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get trueNorthCorrector => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 76, 0);
  ///  Angle between magnetic north and true north at the sensor site, in degrees.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get magDec => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Peformance zone-1 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get z1MinRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  Peformance zone-2 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get z2MinRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  Peformance zone-1 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  double get z1MaxRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Peformance zone-2 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  double get z2MaxRange => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  For radar based sensors, radar maximum unambiguous range, in km.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get radarMur => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  For radar based sensors, probability of the indication of the presence of a radar target due to noise or interference.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get probFalseAlarm => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  For radar based sensors, pulse repetition frequency, in Hz. Number of new pulses tranmistted per second.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get prf => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  For radar based sensors, radar pulse width, in microseconds. The transmit time of a pulse.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get radarPulseWidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  For radar based sensors, number of integrated pulses in a transmit cycle.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get numIntegratedPulses => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 96, 0);
  ///  Antenna true tilt, in degrees.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get trueTilt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  Message data format transmitted by the sensor digitizer.
  ///  Example: /// Example: DATA_FORMAT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get radarMessageFormat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  For radar based sensors, expression of the radar system noise, aggregated as an equivalent thermal noise value, in degrees Kelvin.
  ///  Example: /// Example: 3.5
  ///  Constraints: No constraints specified.
  double get systemNoiseTemperature => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SensorcharacteristicsAbridgedDataModeEnum get dataMode => SensorcharacteristicsAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 106, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);

  @override
  String toString() {
    return 'SensorcharacteristicsAbridged{id: ${id}, idSensor: ${idSensor}, classificationMarking: ${classificationMarking}, origNetwork: ${origNetwork}, azimuthRate: ${azimuthRate}, elevationRateGeolm: ${elevationRateGeolm}, minRangeLimit: ${minRangeLimit}, maxRangeLimit: ${maxRangeLimit}, leftClockAngle: ${leftClockAngle}, rightClockAngle: ${rightClockAngle}, boresight: ${boresight}, boresightOffAngle: ${boresightOffAngle}, negativeRangeRateLimit: ${negativeRangeRateLimit}, positiveRangeRateLimit: ${positiveRangeRateLimit}, magnitudeLimit: ${magnitudeLimit}, trackAngle: ${trackAngle}, minSignalNoiseRatio: ${minSignalNoiseRatio}, fanBeamWidth: ${fanBeamWidth}, taskableRange: ${taskableRange}, maxObservableRange: ${maxObservableRange}, radioFrequency: ${radioFrequency}, radarFrequency: ${radarFrequency}, transmitPower: ${transmitPower}, hFov: ${hFov}, vFov: ${vFov}, hResPixels: ${hResPixels}, vResPixels: ${vResPixels}, band: ${band}, maxDeviationAngle: ${maxDeviationAngle}, aperture: ${aperture}, leftGeoBeltLimit: ${leftGeoBeltLimit}, rightGeoBeltLimit: ${rightGeoBeltLimit}, asrScanRate: ${asrScanRate}, k: ${k}, focalPoint: ${focalPoint}, towerHeight: ${towerHeight}, trueNorthCorrector: ${trueNorthCorrector}, magDec: ${magDec}, z1MinRange: ${z1MinRange}, z2MinRange: ${z2MinRange}, z1MaxRange: ${z1MaxRange}, z2MaxRange: ${z2MaxRange}, radarMur: ${radarMur}, probFalseAlarm: ${probFalseAlarm}, prf: ${prf}, radarPulseWidth: ${radarPulseWidth}, numIntegratedPulses: ${numIntegratedPulses}, trueTilt: ${trueTilt}, radarMessageFormat: ${radarMessageFormat}, systemNoiseTemperature: ${systemNoiseTemperature}, source: ${source}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}}';
  }
}

class _SensorcharacteristicsAbridgedReader extends fb.TableReader<SensorcharacteristicsAbridged> {
  const _SensorcharacteristicsAbridgedReader();

  @override
  SensorcharacteristicsAbridged createObject(fb.BufferContext bc, int offset) => 
    SensorcharacteristicsAbridged._(bc, offset);
}

class SensorcharacteristicsAbridgedBuilder {
  SensorcharacteristicsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(54);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addAzimuthRate(double? azimuthRate) {
    fbBuilder.addFloat64(4, azimuthRate);
    return fbBuilder.offset;
  }
  int addElevationRateGeolm(double? elevationRateGeolm) {
    fbBuilder.addFloat64(5, elevationRateGeolm);
    return fbBuilder.offset;
  }
  int addMinRangeLimit(double? minRangeLimit) {
    fbBuilder.addFloat64(6, minRangeLimit);
    return fbBuilder.offset;
  }
  int addMaxRangeLimit(double? maxRangeLimit) {
    fbBuilder.addFloat64(7, maxRangeLimit);
    return fbBuilder.offset;
  }
  int addLeftClockAngle(double? leftClockAngle) {
    fbBuilder.addFloat64(8, leftClockAngle);
    return fbBuilder.offset;
  }
  int addRightClockAngle(double? rightClockAngle) {
    fbBuilder.addFloat64(9, rightClockAngle);
    return fbBuilder.offset;
  }
  int addBoresight(double? boresight) {
    fbBuilder.addFloat64(10, boresight);
    return fbBuilder.offset;
  }
  int addBoresightOffAngle(double? boresightOffAngle) {
    fbBuilder.addFloat64(11, boresightOffAngle);
    return fbBuilder.offset;
  }
  int addNegativeRangeRateLimit(double? negativeRangeRateLimit) {
    fbBuilder.addFloat64(12, negativeRangeRateLimit);
    return fbBuilder.offset;
  }
  int addPositiveRangeRateLimit(double? positiveRangeRateLimit) {
    fbBuilder.addFloat64(13, positiveRangeRateLimit);
    return fbBuilder.offset;
  }
  int addMagnitudeLimit(double? magnitudeLimit) {
    fbBuilder.addFloat64(14, magnitudeLimit);
    return fbBuilder.offset;
  }
  int addTrackAngle(double? trackAngle) {
    fbBuilder.addFloat64(15, trackAngle);
    return fbBuilder.offset;
  }
  int addMinSignalNoiseRatio(double? minSignalNoiseRatio) {
    fbBuilder.addFloat64(16, minSignalNoiseRatio);
    return fbBuilder.offset;
  }
  int addFanBeamWidth(double? fanBeamWidth) {
    fbBuilder.addFloat64(17, fanBeamWidth);
    return fbBuilder.offset;
  }
  int addTaskableRange(double? taskableRange) {
    fbBuilder.addFloat64(18, taskableRange);
    return fbBuilder.offset;
  }
  int addMaxObservableRange(double? maxObservableRange) {
    fbBuilder.addFloat64(19, maxObservableRange);
    return fbBuilder.offset;
  }
  int addRadioFrequency(double? radioFrequency) {
    fbBuilder.addFloat64(20, radioFrequency);
    return fbBuilder.offset;
  }
  int addRadarFrequency(double? radarFrequency) {
    fbBuilder.addFloat64(21, radarFrequency);
    return fbBuilder.offset;
  }
  int addTransmitPower(double? transmitPower) {
    fbBuilder.addFloat64(22, transmitPower);
    return fbBuilder.offset;
  }
  int addHFov(double? hFov) {
    fbBuilder.addFloat64(23, hFov);
    return fbBuilder.offset;
  }
  int addVFov(double? vFov) {
    fbBuilder.addFloat64(24, vFov);
    return fbBuilder.offset;
  }
  int addHResPixels(int? hResPixels) {
    fbBuilder.addInt32(25, hResPixels);
    return fbBuilder.offset;
  }
  int addVResPixels(int? vResPixels) {
    fbBuilder.addInt32(26, vResPixels);
    return fbBuilder.offset;
  }
  int addBandOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addMaxDeviationAngle(double? maxDeviationAngle) {
    fbBuilder.addFloat64(28, maxDeviationAngle);
    return fbBuilder.offset;
  }
  int addAperture(double? aperture) {
    fbBuilder.addFloat64(29, aperture);
    return fbBuilder.offset;
  }
  int addLeftGeoBeltLimit(double? leftGeoBeltLimit) {
    fbBuilder.addFloat64(30, leftGeoBeltLimit);
    return fbBuilder.offset;
  }
  int addRightGeoBeltLimit(double? rightGeoBeltLimit) {
    fbBuilder.addFloat64(31, rightGeoBeltLimit);
    return fbBuilder.offset;
  }
  int addAsrScanRate(double? asrScanRate) {
    fbBuilder.addFloat64(32, asrScanRate);
    return fbBuilder.offset;
  }
  int addK(double? k) {
    fbBuilder.addFloat64(33, k);
    return fbBuilder.offset;
  }
  int addFocalPoint(double? focalPoint) {
    fbBuilder.addFloat64(34, focalPoint);
    return fbBuilder.offset;
  }
  int addTowerHeight(double? towerHeight) {
    fbBuilder.addFloat64(35, towerHeight);
    return fbBuilder.offset;
  }
  int addTrueNorthCorrector(int? trueNorthCorrector) {
    fbBuilder.addInt32(36, trueNorthCorrector);
    return fbBuilder.offset;
  }
  int addMagDec(double? magDec) {
    fbBuilder.addFloat64(37, magDec);
    return fbBuilder.offset;
  }
  int addZ1MinRange(double? z1MinRange) {
    fbBuilder.addFloat64(38, z1MinRange);
    return fbBuilder.offset;
  }
  int addZ2MinRange(double? z2MinRange) {
    fbBuilder.addFloat64(39, z2MinRange);
    return fbBuilder.offset;
  }
  int addZ1MaxRange(double? z1MaxRange) {
    fbBuilder.addFloat64(40, z1MaxRange);
    return fbBuilder.offset;
  }
  int addZ2MaxRange(double? z2MaxRange) {
    fbBuilder.addFloat64(41, z2MaxRange);
    return fbBuilder.offset;
  }
  int addRadarMur(double? radarMur) {
    fbBuilder.addFloat64(42, radarMur);
    return fbBuilder.offset;
  }
  int addProbFalseAlarm(double? probFalseAlarm) {
    fbBuilder.addFloat64(43, probFalseAlarm);
    return fbBuilder.offset;
  }
  int addPrf(double? prf) {
    fbBuilder.addFloat64(44, prf);
    return fbBuilder.offset;
  }
  int addRadarPulseWidth(double? radarPulseWidth) {
    fbBuilder.addFloat64(45, radarPulseWidth);
    return fbBuilder.offset;
  }
  int addNumIntegratedPulses(int? numIntegratedPulses) {
    fbBuilder.addInt32(46, numIntegratedPulses);
    return fbBuilder.offset;
  }
  int addTrueTilt(double? trueTilt) {
    fbBuilder.addFloat64(47, trueTilt);
    return fbBuilder.offset;
  }
  int addRadarMessageFormatOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addSystemNoiseTemperature(double? systemNoiseTemperature) {
    fbBuilder.addFloat64(49, systemNoiseTemperature);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SensorcharacteristicsAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(51, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SensorcharacteristicsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idSensor;
  final String? _classificationMarking;
  final String? _origNetwork;
  final double? _azimuthRate;
  final double? _elevationRateGeolm;
  final double? _minRangeLimit;
  final double? _maxRangeLimit;
  final double? _leftClockAngle;
  final double? _rightClockAngle;
  final double? _boresight;
  final double? _boresightOffAngle;
  final double? _negativeRangeRateLimit;
  final double? _positiveRangeRateLimit;
  final double? _magnitudeLimit;
  final double? _trackAngle;
  final double? _minSignalNoiseRatio;
  final double? _fanBeamWidth;
  final double? _taskableRange;
  final double? _maxObservableRange;
  final double? _radioFrequency;
  final double? _radarFrequency;
  final double? _transmitPower;
  final double? _hFov;
  final double? _vFov;
  final int? _hResPixels;
  final int? _vResPixels;
  final String? _band;
  final double? _maxDeviationAngle;
  final double? _aperture;
  final double? _leftGeoBeltLimit;
  final double? _rightGeoBeltLimit;
  final double? _asrScanRate;
  final double? _k;
  final double? _focalPoint;
  final double? _towerHeight;
  final int? _trueNorthCorrector;
  final double? _magDec;
  final double? _z1MinRange;
  final double? _z2MinRange;
  final double? _z1MaxRange;
  final double? _z2MaxRange;
  final double? _radarMur;
  final double? _probFalseAlarm;
  final double? _prf;
  final double? _radarPulseWidth;
  final int? _numIntegratedPulses;
  final double? _trueTilt;
  final String? _radarMessageFormat;
  final double? _systemNoiseTemperature;
  final String? _source;
  final SensorcharacteristicsAbridgedDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;

  SensorcharacteristicsAbridgedObjectBuilder({
    String? id,
    String? idSensor,
    String? classificationMarking,
    String? origNetwork,
    double? azimuthRate,
    double? elevationRateGeolm,
    double? minRangeLimit,
    double? maxRangeLimit,
    double? leftClockAngle,
    double? rightClockAngle,
    double? boresight,
    double? boresightOffAngle,
    double? negativeRangeRateLimit,
    double? positiveRangeRateLimit,
    double? magnitudeLimit,
    double? trackAngle,
    double? minSignalNoiseRatio,
    double? fanBeamWidth,
    double? taskableRange,
    double? maxObservableRange,
    double? radioFrequency,
    double? radarFrequency,
    double? transmitPower,
    double? hFov,
    double? vFov,
    int? hResPixels,
    int? vResPixels,
    String? band,
    double? maxDeviationAngle,
    double? aperture,
    double? leftGeoBeltLimit,
    double? rightGeoBeltLimit,
    double? asrScanRate,
    double? k,
    double? focalPoint,
    double? towerHeight,
    int? trueNorthCorrector,
    double? magDec,
    double? z1MinRange,
    double? z2MinRange,
    double? z1MaxRange,
    double? z2MaxRange,
    double? radarMur,
    double? probFalseAlarm,
    double? prf,
    double? radarPulseWidth,
    int? numIntegratedPulses,
    double? trueTilt,
    String? radarMessageFormat,
    double? systemNoiseTemperature,
    String? source,
    SensorcharacteristicsAbridgedDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
  })
      : _id = id,
        _idSensor = idSensor,
        _classificationMarking = classificationMarking,
        _origNetwork = origNetwork,
        _azimuthRate = azimuthRate,
        _elevationRateGeolm = elevationRateGeolm,
        _minRangeLimit = minRangeLimit,
        _maxRangeLimit = maxRangeLimit,
        _leftClockAngle = leftClockAngle,
        _rightClockAngle = rightClockAngle,
        _boresight = boresight,
        _boresightOffAngle = boresightOffAngle,
        _negativeRangeRateLimit = negativeRangeRateLimit,
        _positiveRangeRateLimit = positiveRangeRateLimit,
        _magnitudeLimit = magnitudeLimit,
        _trackAngle = trackAngle,
        _minSignalNoiseRatio = minSignalNoiseRatio,
        _fanBeamWidth = fanBeamWidth,
        _taskableRange = taskableRange,
        _maxObservableRange = maxObservableRange,
        _radioFrequency = radioFrequency,
        _radarFrequency = radarFrequency,
        _transmitPower = transmitPower,
        _hFov = hFov,
        _vFov = vFov,
        _hResPixels = hResPixels,
        _vResPixels = vResPixels,
        _band = band,
        _maxDeviationAngle = maxDeviationAngle,
        _aperture = aperture,
        _leftGeoBeltLimit = leftGeoBeltLimit,
        _rightGeoBeltLimit = rightGeoBeltLimit,
        _asrScanRate = asrScanRate,
        _k = k,
        _focalPoint = focalPoint,
        _towerHeight = towerHeight,
        _trueNorthCorrector = trueNorthCorrector,
        _magDec = magDec,
        _z1MinRange = z1MinRange,
        _z2MinRange = z2MinRange,
        _z1MaxRange = z1MaxRange,
        _z2MaxRange = z2MaxRange,
        _radarMur = radarMur,
        _probFalseAlarm = probFalseAlarm,
        _prf = prf,
        _radarPulseWidth = radarPulseWidth,
        _numIntegratedPulses = numIntegratedPulses,
        _trueTilt = trueTilt,
        _radarMessageFormat = radarMessageFormat,
        _systemNoiseTemperature = systemNoiseTemperature,
        _source = source,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? bandOffset = _band == null ? null
        : fbBuilder.writeString(_band!);
    final int? radarMessageFormatOffset = _radarMessageFormat == null ? null
        : fbBuilder.writeString(_radarMessageFormat!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    fbBuilder.startTable(54);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idSensorOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, origNetworkOffset);
    fbBuilder.addFloat64(4, _azimuthRate);
    fbBuilder.addFloat64(5, _elevationRateGeolm);
    fbBuilder.addFloat64(6, _minRangeLimit);
    fbBuilder.addFloat64(7, _maxRangeLimit);
    fbBuilder.addFloat64(8, _leftClockAngle);
    fbBuilder.addFloat64(9, _rightClockAngle);
    fbBuilder.addFloat64(10, _boresight);
    fbBuilder.addFloat64(11, _boresightOffAngle);
    fbBuilder.addFloat64(12, _negativeRangeRateLimit);
    fbBuilder.addFloat64(13, _positiveRangeRateLimit);
    fbBuilder.addFloat64(14, _magnitudeLimit);
    fbBuilder.addFloat64(15, _trackAngle);
    fbBuilder.addFloat64(16, _minSignalNoiseRatio);
    fbBuilder.addFloat64(17, _fanBeamWidth);
    fbBuilder.addFloat64(18, _taskableRange);
    fbBuilder.addFloat64(19, _maxObservableRange);
    fbBuilder.addFloat64(20, _radioFrequency);
    fbBuilder.addFloat64(21, _radarFrequency);
    fbBuilder.addFloat64(22, _transmitPower);
    fbBuilder.addFloat64(23, _hFov);
    fbBuilder.addFloat64(24, _vFov);
    fbBuilder.addInt32(25, _hResPixels);
    fbBuilder.addInt32(26, _vResPixels);
    fbBuilder.addOffset(27, bandOffset);
    fbBuilder.addFloat64(28, _maxDeviationAngle);
    fbBuilder.addFloat64(29, _aperture);
    fbBuilder.addFloat64(30, _leftGeoBeltLimit);
    fbBuilder.addFloat64(31, _rightGeoBeltLimit);
    fbBuilder.addFloat64(32, _asrScanRate);
    fbBuilder.addFloat64(33, _k);
    fbBuilder.addFloat64(34, _focalPoint);
    fbBuilder.addFloat64(35, _towerHeight);
    fbBuilder.addInt32(36, _trueNorthCorrector);
    fbBuilder.addFloat64(37, _magDec);
    fbBuilder.addFloat64(38, _z1MinRange);
    fbBuilder.addFloat64(39, _z2MinRange);
    fbBuilder.addFloat64(40, _z1MaxRange);
    fbBuilder.addFloat64(41, _z2MaxRange);
    fbBuilder.addFloat64(42, _radarMur);
    fbBuilder.addFloat64(43, _probFalseAlarm);
    fbBuilder.addFloat64(44, _prf);
    fbBuilder.addFloat64(45, _radarPulseWidth);
    fbBuilder.addInt32(46, _numIntegratedPulses);
    fbBuilder.addFloat64(47, _trueTilt);
    fbBuilder.addOffset(48, radarMessageFormatOffset);
    fbBuilder.addFloat64(49, _systemNoiseTemperature);
    fbBuilder.addOffset(50, sourceOffset);
    fbBuilder.addInt8(51, _dataMode?.value);
    fbBuilder.addOffset(52, createdAtOffset);
    fbBuilder.addOffset(53, createdByOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
