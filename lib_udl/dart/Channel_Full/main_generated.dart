// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class ChannelFullDataModeEnum {
  final int value;
  const ChannelFullDataModeEnum._(this.value);

  factory ChannelFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ChannelFullDataModeEnum');
    }
    return result;
  }

  static ChannelFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : ChannelFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const ChannelFullDataModeEnum REAL = ChannelFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const ChannelFullDataModeEnum TEST = ChannelFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const ChannelFullDataModeEnum SIMULATED = ChannelFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const ChannelFullDataModeEnum EXERCISE = ChannelFullDataModeEnum._(3);
  static const Map<int, ChannelFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<ChannelFullDataModeEnum> reader = _ChannelFullDataModeEnumReader();

  @override
  String toString() {
    return 'ChannelFullDataModeEnum{value: $value}';
  }
}

class _ChannelFullDataModeEnumReader extends fb.Reader<ChannelFullDataModeEnum> {
  const _ChannelFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  ChannelFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      ChannelFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Channel information on a particular transponder.
class ChannelFull {
  ChannelFull._(this._bc, this._bcOffset);
  factory ChannelFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ChannelFull> reader = _ChannelFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: CHANNEL-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  ID of the parent transponder object for this Channel.
  ///  Example: /// Example: REF-TRANSPONDER-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idTransponder => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Channel name.
  ///  Example: /// Example: Example name
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Channel type.
  ///  Example: /// Example: Example type
  ///  Constraints: Minimum length = 0, Maximum length = 45
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Identifier of the particular beam for this channel.
  ///  Example: /// Example: REF-BEAM-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idBeam => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.
  ///  Example: /// Example: B8VD
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get beamName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  ID of the RF Band object for this channel.
  ///  Example: /// Example: REF-RFBAND-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idRfband => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Channel encryption.
  ///  Example: /// Example: Example encryption
  ///  Constraints: Minimum length = 0, Maximum length = 45
  String? get encryption => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Pkg.
  ///  Example: /// Example: Example pkg
  ///  Constraints: Minimum length = 0, Maximum length = 45
  String? get pkg => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Res.
  ///  Example: /// Example: Example res
  ///  Constraints: Minimum length = 0, Maximum length = 45
  String? get res => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Channel compression.
  ///  Example: /// Example: Example compression
  ///  Constraints: Minimum length = 0, Maximum length = 45
  String? get compression => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Channel vPid.
  ///  Example: /// Example: VP-ID
  ///  Constraints: Minimum length = 0, Maximum length = 45
  String? get vpid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Channel aPid.
  ///  Example: /// Example: AP-ID
  ///  Constraints: Minimum length = 0, Maximum length = 45
  String? get apid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  SID.
  ///  Example: /// Example: S-ID
  ///  Constraints: Minimum length = 0, Maximum length = 45
  String? get sid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Owner.
  ///  Example: /// Example: example_owner
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get owner => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Source of the data.
  ///  Example: /// Example: system.source
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: example_origin
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  ChannelFullDataModeEnum get dataMode => ChannelFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 42, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);

  @override
  String toString() {
    return 'ChannelFull{id: ${id}, idTransponder: ${idTransponder}, name: ${name}, classificationMarking: ${classificationMarking}, type: ${type}, idBeam: ${idBeam}, beamName: ${beamName}, idRfband: ${idRfband}, encryption: ${encryption}, pkg: ${pkg}, res: ${res}, compression: ${compression}, vpid: ${vpid}, apid: ${apid}, sid: ${sid}, owner: ${owner}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}}';
  }
}

class _ChannelFullReader extends fb.TableReader<ChannelFull> {
  const _ChannelFullReader();

  @override
  ChannelFull createObject(fb.BufferContext bc, int offset) => 
    ChannelFull._(bc, offset);
}

class ChannelFullBuilder {
  ChannelFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(24);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdTransponderOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdBeamOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addBeamNameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addIdRfbandOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addEncryptionOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addPkgOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addResOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addCompressionOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addVpidOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addApidOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addSidOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addOwnerOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addDataMode(ChannelFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(19, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ChannelFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idTransponder;
  final String? _name;
  final String? _classificationMarking;
  final String? _type;
  final String? _idBeam;
  final String? _beamName;
  final String? _idRfband;
  final String? _encryption;
  final String? _pkg;
  final String? _res;
  final String? _compression;
  final String? _vpid;
  final String? _apid;
  final String? _sid;
  final String? _owner;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final ChannelFullDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;

  ChannelFullObjectBuilder({
    String? id,
    String? idTransponder,
    String? name,
    String? classificationMarking,
    String? type,
    String? idBeam,
    String? beamName,
    String? idRfband,
    String? encryption,
    String? pkg,
    String? res,
    String? compression,
    String? vpid,
    String? apid,
    String? sid,
    String? owner,
    String? source,
    String? origin,
    String? origNetwork,
    ChannelFullDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
  })
      : _id = id,
        _idTransponder = idTransponder,
        _name = name,
        _classificationMarking = classificationMarking,
        _type = type,
        _idBeam = idBeam,
        _beamName = beamName,
        _idRfband = idRfband,
        _encryption = encryption,
        _pkg = pkg,
        _res = res,
        _compression = compression,
        _vpid = vpid,
        _apid = apid,
        _sid = sid,
        _owner = owner,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idTransponderOffset = _idTransponder == null ? null
        : fbBuilder.writeString(_idTransponder!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? idBeamOffset = _idBeam == null ? null
        : fbBuilder.writeString(_idBeam!);
    final int? beamNameOffset = _beamName == null ? null
        : fbBuilder.writeString(_beamName!);
    final int? idRfbandOffset = _idRfband == null ? null
        : fbBuilder.writeString(_idRfband!);
    final int? encryptionOffset = _encryption == null ? null
        : fbBuilder.writeString(_encryption!);
    final int? pkgOffset = _pkg == null ? null
        : fbBuilder.writeString(_pkg!);
    final int? resOffset = _res == null ? null
        : fbBuilder.writeString(_res!);
    final int? compressionOffset = _compression == null ? null
        : fbBuilder.writeString(_compression!);
    final int? vpidOffset = _vpid == null ? null
        : fbBuilder.writeString(_vpid!);
    final int? apidOffset = _apid == null ? null
        : fbBuilder.writeString(_apid!);
    final int? sidOffset = _sid == null ? null
        : fbBuilder.writeString(_sid!);
    final int? ownerOffset = _owner == null ? null
        : fbBuilder.writeString(_owner!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    fbBuilder.startTable(24);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idTransponderOffset);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, classificationMarkingOffset);
    fbBuilder.addOffset(4, typeOffset);
    fbBuilder.addOffset(5, idBeamOffset);
    fbBuilder.addOffset(6, beamNameOffset);
    fbBuilder.addOffset(7, idRfbandOffset);
    fbBuilder.addOffset(8, encryptionOffset);
    fbBuilder.addOffset(9, pkgOffset);
    fbBuilder.addOffset(10, resOffset);
    fbBuilder.addOffset(11, compressionOffset);
    fbBuilder.addOffset(12, vpidOffset);
    fbBuilder.addOffset(13, apidOffset);
    fbBuilder.addOffset(14, sidOffset);
    fbBuilder.addOffset(15, ownerOffset);
    fbBuilder.addOffset(16, sourceOffset);
    fbBuilder.addOffset(17, originOffset);
    fbBuilder.addOffset(18, origNetworkOffset);
    fbBuilder.addInt8(19, _dataMode?.value);
    fbBuilder.addOffset(20, createdAtOffset);
    fbBuilder.addOffset(21, createdByOffset);
    fbBuilder.addOffset(22, updatedAtOffset);
    fbBuilder.addOffset(23, updatedByOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
