// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class BeamContourFullTypeEnum {
  final int value;
  const BeamContourFullTypeEnum._(this.value);

  factory BeamContourFullTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum BeamContourFullTypeEnum');
    }
    return result;
  }

  static BeamContourFullTypeEnum? _createOrNull(int? value) => 
      value == null ? null : BeamContourFullTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const BeamContourFullTypeEnum BORESIGHT = BeamContourFullTypeEnum._(0);

  ///  No description available.
  static const BeamContourFullTypeEnum CONTOUR = BeamContourFullTypeEnum._(1);

  ///  No description available.
  static const BeamContourFullTypeEnum SVC_AREA = BeamContourFullTypeEnum._(2);
  static const Map<int, BeamContourFullTypeEnum> values = {
    0: BORESIGHT,
    1: CONTOUR,
    2: SVC_AREA};

  static const fb.Reader<BeamContourFullTypeEnum> reader = _BeamContourFullTypeEnumReader();

  @override
  String toString() {
    return 'BeamContourFullTypeEnum{value: $value}';
  }
}

class _BeamContourFullTypeEnumReader extends fb.Reader<BeamContourFullTypeEnum> {
  const _BeamContourFullTypeEnumReader();

  @override
  int get size => 1;

  @override
  BeamContourFullTypeEnum read(fb.BufferContext bc, int offset) =>
      BeamContourFullTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class BeamContourFullDataModeEnum {
  final int value;
  const BeamContourFullDataModeEnum._(this.value);

  factory BeamContourFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum BeamContourFullDataModeEnum');
    }
    return result;
  }

  static BeamContourFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : BeamContourFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const BeamContourFullDataModeEnum REAL = BeamContourFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const BeamContourFullDataModeEnum TEST = BeamContourFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const BeamContourFullDataModeEnum SIMULATED = BeamContourFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const BeamContourFullDataModeEnum EXERCISE = BeamContourFullDataModeEnum._(3);
  static const Map<int, BeamContourFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<BeamContourFullDataModeEnum> reader = _BeamContourFullDataModeEnumReader();

  @override
  String toString() {
    return 'BeamContourFullDataModeEnum{value: $value}';
  }
}

class _BeamContourFullDataModeEnumReader extends fb.Reader<BeamContourFullDataModeEnum> {
  const _BeamContourFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  BeamContourFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      BeamContourFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Describes the beam contour associated with a beam entity. Beam contours are the geographic representation of the relative gain levels of beam power off of the maximum gain boresight points.
class BeamContourFull {
  BeamContourFull._(this._bc, this._bcOffset);
  factory BeamContourFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BeamContourFull> reader = _BeamContourFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: BEAMCONTOUR-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  ID of the beam.
  ///  Example: /// Example: REF-BEAM-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idBeam => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).  Boresight refers to the point of maximum/peak gain, and should not be confused with the 'aim point' of the related beam.  Gain contours are regions of  coverage referenced to the relative gain of the related beam.  Service Areas are composed of one or more service regions, with each region being either discrete point(s) or a continuous contour.
  ///  Example: /// Example: BORESIGHT
  ///  Constraints: Minimum length = 1, Maximum length = 16
  BeamContourFullTypeEnum get type => BeamContourFullTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 10, 0));
  ///  The index number of this contour. The value is required if type = CONTOUR.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  int get contourIdx => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  The relative gain level in dB associated with this boresight or contour.  Gain does not apply to service area records. The value is required if type = BORESIGHT or CONTOUR.
  ///  Example: /// Example: 17.1
  ///  Constraints: No constraints specified.
  double get gain => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  The region name within the service area.
  ///  Example: /// Example: Example region name
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get regionName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  GeoJSON or Well Known Text expression of the boresight point, service area point or region, or the gain contour region in geographic longitude, latitude pairs. Boresight and service area point(s) are represented as a 'Point' or 'MultiPoint', service areas and closed gain contours as 'Polygon', and open contours as 'LineString'. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both geographyText and geographyJson fields appropriately. A create request must contain one of the geography, geographyText, or geographyJson.
  ///  Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
  ///  Constraints: No constraints specified.
  String? get geography => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  String? get geographyText => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: No constraints specified.
  String? get geographyJson => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Type of region as projected.
  ///  Example: /// Example: ST_Polygon
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get geographyType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  int get geographyNdims => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 4326
  ///  Constraints: No constraints specified.
  int get geographySrid => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  BeamContourFullDataModeEnum get dataMode => BeamContourFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 44, 0));

  @override
  String toString() {
    return 'BeamContourFull{id: ${id}, classificationMarking: ${classificationMarking}, idBeam: ${idBeam}, type: ${type}, contourIdx: ${contourIdx}, gain: ${gain}, regionName: ${regionName}, geography: ${geography}, geographyText: ${geographyText}, geographyJson: ${geographyJson}, geographyType: ${geographyType}, geographyNdims: ${geographyNdims}, geographySrid: ${geographySrid}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _BeamContourFullReader extends fb.TableReader<BeamContourFull> {
  const _BeamContourFullReader();

  @override
  BeamContourFull createObject(fb.BufferContext bc, int offset) => 
    BeamContourFull._(bc, offset);
}

class BeamContourFullBuilder {
  BeamContourFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(21);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdBeamOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addType(BeamContourFullTypeEnum? type) {
    fbBuilder.addInt8(3, type?.value);
    return fbBuilder.offset;
  }
  int addContourIdx(int? contourIdx) {
    fbBuilder.addInt32(4, contourIdx);
    return fbBuilder.offset;
  }
  int addGain(double? gain) {
    fbBuilder.addFloat64(5, gain);
    return fbBuilder.offset;
  }
  int addRegionNameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addGeographyOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addGeographyTextOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addGeographyJsonOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addGeographyTypeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addGeographyNdims(int? geographyNdims) {
    fbBuilder.addInt32(11, geographyNdims);
    return fbBuilder.offset;
  }
  int addGeographySrid(int? geographySrid) {
    fbBuilder.addInt32(12, geographySrid);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addDataMode(BeamContourFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(20, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BeamContourFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idBeam;
  final BeamContourFullTypeEnum? _type;
  final int? _contourIdx;
  final double? _gain;
  final String? _regionName;
  final String? _geography;
  final String? _geographyText;
  final String? _geographyJson;
  final String? _geographyType;
  final int? _geographyNdims;
  final int? _geographySrid;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final BeamContourFullDataModeEnum? _dataMode;

  BeamContourFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idBeam,
    BeamContourFullTypeEnum? type,
    int? contourIdx,
    double? gain,
    String? regionName,
    String? geography,
    String? geographyText,
    String? geographyJson,
    String? geographyType,
    int? geographyNdims,
    int? geographySrid,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    BeamContourFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idBeam = idBeam,
        _type = type,
        _contourIdx = contourIdx,
        _gain = gain,
        _regionName = regionName,
        _geography = geography,
        _geographyText = geographyText,
        _geographyJson = geographyJson,
        _geographyType = geographyType,
        _geographyNdims = geographyNdims,
        _geographySrid = geographySrid,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idBeamOffset = _idBeam == null ? null
        : fbBuilder.writeString(_idBeam!);
    final int? regionNameOffset = _regionName == null ? null
        : fbBuilder.writeString(_regionName!);
    final int? geographyOffset = _geography == null ? null
        : fbBuilder.writeString(_geography!);
    final int? geographyTextOffset = _geographyText == null ? null
        : fbBuilder.writeString(_geographyText!);
    final int? geographyJsonOffset = _geographyJson == null ? null
        : fbBuilder.writeString(_geographyJson!);
    final int? geographyTypeOffset = _geographyType == null ? null
        : fbBuilder.writeString(_geographyType!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(21);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idBeamOffset);
    fbBuilder.addInt8(3, _type?.value);
    fbBuilder.addInt32(4, _contourIdx);
    fbBuilder.addFloat64(5, _gain);
    fbBuilder.addOffset(6, regionNameOffset);
    fbBuilder.addOffset(7, geographyOffset);
    fbBuilder.addOffset(8, geographyTextOffset);
    fbBuilder.addOffset(9, geographyJsonOffset);
    fbBuilder.addOffset(10, geographyTypeOffset);
    fbBuilder.addInt32(11, _geographyNdims);
    fbBuilder.addInt32(12, _geographySrid);
    fbBuilder.addOffset(13, createdAtOffset);
    fbBuilder.addOffset(14, createdByOffset);
    fbBuilder.addOffset(15, updatedAtOffset);
    fbBuilder.addOffset(16, updatedByOffset);
    fbBuilder.addOffset(17, sourceOffset);
    fbBuilder.addOffset(18, originOffset);
    fbBuilder.addOffset(19, origNetworkOffset);
    fbBuilder.addInt8(20, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
