// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class LogisticsSupportFullDataModeEnum {
  final int value;
  const LogisticsSupportFullDataModeEnum._(this.value);

  factory LogisticsSupportFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum LogisticsSupportFullDataModeEnum');
    }
    return result;
  }

  static LogisticsSupportFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : LogisticsSupportFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const LogisticsSupportFullDataModeEnum REAL = LogisticsSupportFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const LogisticsSupportFullDataModeEnum TEST = LogisticsSupportFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const LogisticsSupportFullDataModeEnum SIMULATED = LogisticsSupportFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const LogisticsSupportFullDataModeEnum EXERCISE = LogisticsSupportFullDataModeEnum._(3);
  static const Map<int, LogisticsSupportFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<LogisticsSupportFullDataModeEnum> reader = _LogisticsSupportFullDataModeEnumReader();

  @override
  String toString() {
    return 'LogisticsSupportFullDataModeEnum{value: $value}';
  }
}

class _LogisticsSupportFullDataModeEnumReader extends fb.Reader<LogisticsSupportFullDataModeEnum> {
  const _LogisticsSupportFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  LogisticsSupportFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      LogisticsSupportFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Comprehensive logistical details concerning the planned support of maintenance operations required by an aircraft, including transportation information, supplies coordination, and service personnel.
class LogisticsSupportFull {
  LogisticsSupportFull._(this._bc, this._bcOffset);
  factory LogisticsSupportFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LogisticsSupportFull> reader = _LogisticsSupportFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: LOGISTICS-SUPPORT-DETAILS UUID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Optional system identifier from external systs. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: GDSSBL012307131347070165
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get extSystemId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The tail number of the aircraft that is the subject of this LogisticsSupportDetails record.
  ///  Example: /// Example: 99290
  ///  Constraints: Minimum length = 0, Maximum length = 7
  String? get tailNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  ///  Example: /// Example: CO17A
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get aircraftMds => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The current ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
  ///  Example: /// Example: KCOS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get currIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The supplying ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
  ///  Example: /// Example: KCOS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get suppIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The time this report was created, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  String? get rptCreatedTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The time this report was closed, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  String? get rptClosedTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The time indicating when a given aircraft breaks for a mission essential reason. This datetime should be in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  String? get meTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The time indicating when all mission essential problems with a given aircraft have been fixed and is mission capable. This datetime should be in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  String? get mcTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  This field identifies the pacing event for bringing the aircraft to Mission Capable status.  It is used in calculating the Estimated Time Mission Capable (ETMC) value.  Acceptable values are WA (Will Advise), INW (In Work), P+hhh.h (where P=parts and hhh.h is the number of hours up to 999 plus tenths of hours), EQ+hhh.h (EQ=equipment), MRT+hhh.h (MRT=maintenance recovery team).
  ///  Example: /// Example: WA
  ///  Constraints: Minimum length = 0, Maximum length = 9
  String? get logisticAction => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The identifier that represents a Logistics Master Record.
  ///  Example: /// Example: L62017
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get logisticsRecordId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The estimated time mission capable for the aircraft, in ISO 8601 UCT format with millisecond precision. This is the estimated time when the aircraft is mission ready.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  String? get etic => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Logistics estimated time mission capable.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  String? get etmc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The maintenance status code of the aircraft which may be based on pilot descriptions or evaluation codes. Contact the source provider for details.
  ///  Example: /// Example: NMCMU
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get maintStatusCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  This is used to indicate whether a closed master record has been reopened.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get reopenFlag => const fb.BoolReader().vTableGet(_bc, _bcOffset, 36, false);
  ///  The organization that owns this logistics record.
  ///  Example: /// Example: EXAMPLE_OWNER
  ///  Constraints: Minimum length = 0, Maximum length = 250
  String? get owner => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Remarks associated with this LogisticsSupport record.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get logisticsRemarks => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 40);
  ///  Discrepancy information associated with this LogisticsSupport record.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get logisticsDiscrepancyInfos => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get logisticsTransportationPlans => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);
  ///  Support items associated with this LogisticsSupport record.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get logisticsSupportItems => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 46);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  LogisticsSupportFullDataModeEnum get dataMode => LogisticsSupportFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 62, 0));

  @override
  String toString() {
    return 'LogisticsSupportFull{id: ${id}, classificationMarking: ${classificationMarking}, extSystemId: ${extSystemId}, tailNumber: ${tailNumber}, aircraftMds: ${aircraftMds}, currIcao: ${currIcao}, suppIcao: ${suppIcao}, rptCreatedTime: ${rptCreatedTime}, rptClosedTime: ${rptClosedTime}, meTime: ${meTime}, mcTime: ${mcTime}, logisticAction: ${logisticAction}, logisticsRecordId: ${logisticsRecordId}, etic: ${etic}, etmc: ${etmc}, maintStatusCode: ${maintStatusCode}, reopenFlag: ${reopenFlag}, owner: ${owner}, logisticsRemarks: ${logisticsRemarks}, logisticsDiscrepancyInfos: ${logisticsDiscrepancyInfos}, logisticsTransportationPlans: ${logisticsTransportationPlans}, logisticsSupportItems: ${logisticsSupportItems}, origNetwork: ${origNetwork}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}}';
  }
}

class _LogisticsSupportFullReader extends fb.TableReader<LogisticsSupportFull> {
  const _LogisticsSupportFullReader();

  @override
  LogisticsSupportFull createObject(fb.BufferContext bc, int offset) => 
    LogisticsSupportFull._(bc, offset);
}

class LogisticsSupportFullBuilder {
  LogisticsSupportFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(30);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addExtSystemIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTailNumberOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addAircraftMdsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCurrIcaoOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSuppIcaoOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addRptCreatedTimeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addRptClosedTimeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addMeTimeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addMcTimeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addLogisticActionOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addLogisticsRecordIdOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addEticOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addEtmcOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addMaintStatusCodeOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addReopenFlag(bool? reopenFlag) {
    fbBuilder.addBool(16, reopenFlag);
    return fbBuilder.offset;
  }
  int addOwnerOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addLogisticsRemarksOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addLogisticsDiscrepancyInfosOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addLogisticsTransportationPlansOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addLogisticsSupportItemsOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addDataMode(LogisticsSupportFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(29, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LogisticsSupportFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _extSystemId;
  final String? _tailNumber;
  final String? _aircraftMds;
  final String? _currIcao;
  final String? _suppIcao;
  final String? _rptCreatedTime;
  final String? _rptClosedTime;
  final String? _meTime;
  final String? _mcTime;
  final String? _logisticAction;
  final String? _logisticsRecordId;
  final String? _etic;
  final String? _etmc;
  final String? _maintStatusCode;
  final bool? _reopenFlag;
  final String? _owner;
  final List<String>? _logisticsRemarks;
  final List<String>? _logisticsDiscrepancyInfos;
  final List<String>? _logisticsTransportationPlans;
  final List<String>? _logisticsSupportItems;
  final String? _origNetwork;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final LogisticsSupportFullDataModeEnum? _dataMode;

  LogisticsSupportFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? extSystemId,
    String? tailNumber,
    String? aircraftMds,
    String? currIcao,
    String? suppIcao,
    String? rptCreatedTime,
    String? rptClosedTime,
    String? meTime,
    String? mcTime,
    String? logisticAction,
    String? logisticsRecordId,
    String? etic,
    String? etmc,
    String? maintStatusCode,
    bool? reopenFlag,
    String? owner,
    List<String>? logisticsRemarks,
    List<String>? logisticsDiscrepancyInfos,
    List<String>? logisticsTransportationPlans,
    List<String>? logisticsSupportItems,
    String? origNetwork,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    LogisticsSupportFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _extSystemId = extSystemId,
        _tailNumber = tailNumber,
        _aircraftMds = aircraftMds,
        _currIcao = currIcao,
        _suppIcao = suppIcao,
        _rptCreatedTime = rptCreatedTime,
        _rptClosedTime = rptClosedTime,
        _meTime = meTime,
        _mcTime = mcTime,
        _logisticAction = logisticAction,
        _logisticsRecordId = logisticsRecordId,
        _etic = etic,
        _etmc = etmc,
        _maintStatusCode = maintStatusCode,
        _reopenFlag = reopenFlag,
        _owner = owner,
        _logisticsRemarks = logisticsRemarks,
        _logisticsDiscrepancyInfos = logisticsDiscrepancyInfos,
        _logisticsTransportationPlans = logisticsTransportationPlans,
        _logisticsSupportItems = logisticsSupportItems,
        _origNetwork = origNetwork,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? extSystemIdOffset = _extSystemId == null ? null
        : fbBuilder.writeString(_extSystemId!);
    final int? tailNumberOffset = _tailNumber == null ? null
        : fbBuilder.writeString(_tailNumber!);
    final int? aircraftMdsOffset = _aircraftMds == null ? null
        : fbBuilder.writeString(_aircraftMds!);
    final int? currIcaoOffset = _currIcao == null ? null
        : fbBuilder.writeString(_currIcao!);
    final int? suppIcaoOffset = _suppIcao == null ? null
        : fbBuilder.writeString(_suppIcao!);
    final int? rptCreatedTimeOffset = _rptCreatedTime == null ? null
        : fbBuilder.writeString(_rptCreatedTime!);
    final int? rptClosedTimeOffset = _rptClosedTime == null ? null
        : fbBuilder.writeString(_rptClosedTime!);
    final int? meTimeOffset = _meTime == null ? null
        : fbBuilder.writeString(_meTime!);
    final int? mcTimeOffset = _mcTime == null ? null
        : fbBuilder.writeString(_mcTime!);
    final int? logisticActionOffset = _logisticAction == null ? null
        : fbBuilder.writeString(_logisticAction!);
    final int? logisticsRecordIdOffset = _logisticsRecordId == null ? null
        : fbBuilder.writeString(_logisticsRecordId!);
    final int? eticOffset = _etic == null ? null
        : fbBuilder.writeString(_etic!);
    final int? etmcOffset = _etmc == null ? null
        : fbBuilder.writeString(_etmc!);
    final int? maintStatusCodeOffset = _maintStatusCode == null ? null
        : fbBuilder.writeString(_maintStatusCode!);
    final int? ownerOffset = _owner == null ? null
        : fbBuilder.writeString(_owner!);
    final int? logisticsRemarksOffset = _logisticsRemarks == null ? null
        : fbBuilder.writeList(_logisticsRemarks!.map(fbBuilder.writeString).toList());
    final int? logisticsDiscrepancyInfosOffset = _logisticsDiscrepancyInfos == null ? null
        : fbBuilder.writeList(_logisticsDiscrepancyInfos!.map(fbBuilder.writeString).toList());
    final int? logisticsTransportationPlansOffset = _logisticsTransportationPlans == null ? null
        : fbBuilder.writeList(_logisticsTransportationPlans!.map(fbBuilder.writeString).toList());
    final int? logisticsSupportItemsOffset = _logisticsSupportItems == null ? null
        : fbBuilder.writeList(_logisticsSupportItems!.map(fbBuilder.writeString).toList());
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    fbBuilder.startTable(30);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, extSystemIdOffset);
    fbBuilder.addOffset(3, tailNumberOffset);
    fbBuilder.addOffset(4, aircraftMdsOffset);
    fbBuilder.addOffset(5, currIcaoOffset);
    fbBuilder.addOffset(6, suppIcaoOffset);
    fbBuilder.addOffset(7, rptCreatedTimeOffset);
    fbBuilder.addOffset(8, rptClosedTimeOffset);
    fbBuilder.addOffset(9, meTimeOffset);
    fbBuilder.addOffset(10, mcTimeOffset);
    fbBuilder.addOffset(11, logisticActionOffset);
    fbBuilder.addOffset(12, logisticsRecordIdOffset);
    fbBuilder.addOffset(13, eticOffset);
    fbBuilder.addOffset(14, etmcOffset);
    fbBuilder.addOffset(15, maintStatusCodeOffset);
    fbBuilder.addBool(16, _reopenFlag);
    fbBuilder.addOffset(17, ownerOffset);
    fbBuilder.addOffset(18, logisticsRemarksOffset);
    fbBuilder.addOffset(19, logisticsDiscrepancyInfosOffset);
    fbBuilder.addOffset(20, logisticsTransportationPlansOffset);
    fbBuilder.addOffset(21, logisticsSupportItemsOffset);
    fbBuilder.addOffset(22, origNetworkOffset);
    fbBuilder.addOffset(23, createdAtOffset);
    fbBuilder.addOffset(24, createdByOffset);
    fbBuilder.addOffset(25, updatedAtOffset);
    fbBuilder.addOffset(26, updatedByOffset);
    fbBuilder.addOffset(27, sourceOffset);
    fbBuilder.addOffset(28, originOffset);
    fbBuilder.addInt8(29, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
