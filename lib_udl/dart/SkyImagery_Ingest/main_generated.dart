// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SkyImageryIngestDataModeEnum {
  final int value;
  const SkyImageryIngestDataModeEnum._(this.value);

  factory SkyImageryIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SkyImageryIngestDataModeEnum');
    }
    return result;
  }

  static SkyImageryIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SkyImageryIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SkyImageryIngestDataModeEnum REAL = SkyImageryIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SkyImageryIngestDataModeEnum TEST = SkyImageryIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SkyImageryIngestDataModeEnum SIMULATED = SkyImageryIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SkyImageryIngestDataModeEnum EXERCISE = SkyImageryIngestDataModeEnum._(3);
  static const Map<int, SkyImageryIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SkyImageryIngestDataModeEnum> reader = _SkyImageryIngestDataModeEnumReader();

  @override
  String toString() {
    return 'SkyImageryIngestDataModeEnum{value: $value}';
  }
}

class _SkyImageryIngestDataModeEnumReader extends fb.Reader<SkyImageryIngestDataModeEnum> {
  const _SkyImageryIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SkyImageryIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      SkyImageryIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP) . Binary content must be downloaded individually by ID using the 'getFile' operation.
class SkyImageryIngest {
  SkyImageryIngest._(this._bc, this._bcOffset);
  factory SkyImageryIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SkyImageryIngest> reader = _SkyImageryIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SKYIMAGERY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Optional identifier of the target on-orbit object, if correlated.
  ///  Example: /// Example: 44920
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: X15-23452
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Optional identifier of the AttitudeSet data record describing the orientation of an object body.
  ///  Example: /// Example: d039ba29-52f4-4839-8a8f-e85fa416aec5
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idAttitudeSet => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: 420
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Catalog number of the target on-orbit object.
  ///  Example: /// Example: 25544
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: origSensorId
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: -33.283048
  ///  Constraints: No constraints specified.
  double get senlat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 149.372549
  ///  Constraints: No constraints specified.
  double get senlon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.
  ///  Example: /// Example: 14.483619321
  ///  Constraints: No constraints specified.
  double get senalt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
  ///  Example: /// Example: 14.52
  ///  Constraints: No constraints specified.
  double get senx => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
  ///  Example: /// Example: 32.41
  ///  Constraints: No constraints specified.
  double get seny => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
  ///  Example: /// Example: 376.12
  ///  Constraints: No constraints specified.
  double get senz => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
  ///  Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  ///  Constraints: No constraints specified.
  List<String>? get senQuat => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
  ///  Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  ///  Constraints: No constraints specified.
  List<String>? get senQuatDot => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  ///  The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP).
  ///  Example: /// Example: imageType
  ///  Constraints: Minimum length = 1, Maximum length = 24
  String? get imageType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Start time of the exposure, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get expStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  End time of the exposure, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get expEndTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  String that uniquely identifies the data source.
  ///  Example: /// Example: imageSourceInfo
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get imageSourceInfo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The telescope pointing azimuth, in degrees, at the exposure start epoch.
  ///  Example: /// Example: 146.321
  ///  Constraints: No constraints specified.
  double get topLeftStartAz => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  The telescope pointing elevation, in degrees, at the exposure start epoch.
  ///  Example: /// Example: 146.321
  ///  Constraints: No constraints specified.
  double get topLeftStartEl => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  The telescope pointing azimuth, in degrees, at the exposure stop epoch.
  ///  Example: /// Example: 3.7
  ///  Constraints: No constraints specified.
  double get topLeftStopAz => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  The telescope pointing elevation, in degrees, at the exposure stop epoch.
  ///  Example: /// Example: 34.233
  ///  Constraints: No constraints specified.
  double get topLeftStopEl => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  The user-defined set ID of a sequence of images.
  ///  Example: /// Example: imageSetId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get imageSetId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  The number of images in an image set.
  ///  Example: /// Example: 9
  ///  Constraints: No constraints specified.
  int get imageSetLength => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  The sequence ID of an image within an image set.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get sequenceId => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  Field Of View frame width, in degrees.
  ///  Example: /// Example: 21.23
  ///  Constraints: No constraints specified.
  double get frameFovwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Field Of View frame height, in degrees.
  ///  Example: /// Example: 21.23
  ///  Constraints: No constraints specified.
  double get frameFovheight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Field Of View pixel width, in degrees.
  ///  Example: /// Example: 321.123
  ///  Constraints: No constraints specified.
  double get pixelFovwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Field Of View pixel height, in degrees.
  ///  Example: /// Example: 321.123
  ///  Constraints: No constraints specified.
  double get pixelFovheight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Frame width of the image, in number of pixels.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get frameWidthPixels => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 66, 0);
  ///  Frame height of the image, in number of pixels.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get frameHeightPixels => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 68, 0);
  ///  Bit depth of the image, in number of pixels.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get pixelBitDepth => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 70, 0);
  ///  Reference to an annotation document associated with this image.
  ///  Example: /// Example: annotationKey
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get annotationKey => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Reference to a calibration document associated with this image.
  ///  Example: /// Example: calibrationKey
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get calibrationKey => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Name of the uploaded image file.
  ///  Example: /// Example: filename.jpg
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get filename => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Size of the image file, in bytes.
  ///  Example: /// Example: 371945
  ///  Constraints: No constraints specified.
  int get filesize => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 78, 0);
  ///  MD5 value of the file. The ingest/create operation will automatically generate the value.
  ///  Example: /// Example: checksumValue
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get checksumValue => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 84);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Optional name/description associated with this image.
  ///  Example: /// Example: description
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SkyImageryIngestDataModeEnum get dataMode => SkyImageryIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 96, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Collection of linked EOObservations.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get eoObservations => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 102);

  @override
  String toString() {
    return 'SkyImageryIngest{id: ${id}, classificationMarking: ${classificationMarking}, idOnOrbit: ${idOnOrbit}, origObjectId: ${origObjectId}, idAttitudeSet: ${idAttitudeSet}, idSensor: ${idSensor}, satNo: ${satNo}, origSensorId: ${origSensorId}, senlat: ${senlat}, senlon: ${senlon}, senalt: ${senalt}, senx: ${senx}, seny: ${seny}, senz: ${senz}, senQuat: ${senQuat}, senQuatDot: ${senQuatDot}, imageType: ${imageType}, expStartTime: ${expStartTime}, expEndTime: ${expEndTime}, imageSourceInfo: ${imageSourceInfo}, topLeftStartAz: ${topLeftStartAz}, topLeftStartEl: ${topLeftStartEl}, topLeftStopAz: ${topLeftStopAz}, topLeftStopEl: ${topLeftStopEl}, imageSetId: ${imageSetId}, imageSetLength: ${imageSetLength}, sequenceId: ${sequenceId}, frameFovwidth: ${frameFovwidth}, frameFovheight: ${frameFovheight}, pixelFovwidth: ${pixelFovwidth}, pixelFovheight: ${pixelFovheight}, frameWidthPixels: ${frameWidthPixels}, frameHeightPixels: ${frameHeightPixels}, pixelBitDepth: ${pixelBitDepth}, annotationKey: ${annotationKey}, calibrationKey: ${calibrationKey}, filename: ${filename}, filesize: ${filesize}, checksumValue: ${checksumValue}, transactionId: ${transactionId}, tags: ${tags}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, sourceDl: ${sourceDl}, description: ${description}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, eoObservations: ${eoObservations}}';
  }
}

class _SkyImageryIngestReader extends fb.TableReader<SkyImageryIngest> {
  const _SkyImageryIngestReader();

  @override
  SkyImageryIngest createObject(fb.BufferContext bc, int offset) => 
    SkyImageryIngest._(bc, offset);
}

class SkyImageryIngestBuilder {
  SkyImageryIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(50);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIdAttitudeSetOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(6, satNo);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addSenlat(double? senlat) {
    fbBuilder.addFloat64(8, senlat);
    return fbBuilder.offset;
  }
  int addSenlon(double? senlon) {
    fbBuilder.addFloat64(9, senlon);
    return fbBuilder.offset;
  }
  int addSenalt(double? senalt) {
    fbBuilder.addFloat64(10, senalt);
    return fbBuilder.offset;
  }
  int addSenx(double? senx) {
    fbBuilder.addFloat64(11, senx);
    return fbBuilder.offset;
  }
  int addSeny(double? seny) {
    fbBuilder.addFloat64(12, seny);
    return fbBuilder.offset;
  }
  int addSenz(double? senz) {
    fbBuilder.addFloat64(13, senz);
    return fbBuilder.offset;
  }
  int addSenQuatOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addSenQuatDotOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addImageTypeOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addExpStartTimeOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addExpEndTimeOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addImageSourceInfoOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addTopLeftStartAz(double? topLeftStartAz) {
    fbBuilder.addFloat64(20, topLeftStartAz);
    return fbBuilder.offset;
  }
  int addTopLeftStartEl(double? topLeftStartEl) {
    fbBuilder.addFloat64(21, topLeftStartEl);
    return fbBuilder.offset;
  }
  int addTopLeftStopAz(double? topLeftStopAz) {
    fbBuilder.addFloat64(22, topLeftStopAz);
    return fbBuilder.offset;
  }
  int addTopLeftStopEl(double? topLeftStopEl) {
    fbBuilder.addFloat64(23, topLeftStopEl);
    return fbBuilder.offset;
  }
  int addImageSetIdOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addImageSetLength(int? imageSetLength) {
    fbBuilder.addInt32(25, imageSetLength);
    return fbBuilder.offset;
  }
  int addSequenceId(int? sequenceId) {
    fbBuilder.addInt32(26, sequenceId);
    return fbBuilder.offset;
  }
  int addFrameFovwidth(double? frameFovwidth) {
    fbBuilder.addFloat64(27, frameFovwidth);
    return fbBuilder.offset;
  }
  int addFrameFovheight(double? frameFovheight) {
    fbBuilder.addFloat64(28, frameFovheight);
    return fbBuilder.offset;
  }
  int addPixelFovwidth(double? pixelFovwidth) {
    fbBuilder.addFloat64(29, pixelFovwidth);
    return fbBuilder.offset;
  }
  int addPixelFovheight(double? pixelFovheight) {
    fbBuilder.addFloat64(30, pixelFovheight);
    return fbBuilder.offset;
  }
  int addFrameWidthPixels(int? frameWidthPixels) {
    fbBuilder.addInt32(31, frameWidthPixels);
    return fbBuilder.offset;
  }
  int addFrameHeightPixels(int? frameHeightPixels) {
    fbBuilder.addInt32(32, frameHeightPixels);
    return fbBuilder.offset;
  }
  int addPixelBitDepth(int? pixelBitDepth) {
    fbBuilder.addInt32(33, pixelBitDepth);
    return fbBuilder.offset;
  }
  int addAnnotationKeyOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addCalibrationKeyOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addFilenameOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addFilesize(int? filesize) {
    fbBuilder.addInt64(37, filesize);
    return fbBuilder.offset;
  }
  int addChecksumValueOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SkyImageryIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(46, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addEoObservationsOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SkyImageryIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idOnOrbit;
  final String? _origObjectId;
  final String? _idAttitudeSet;
  final String? _idSensor;
  final int? _satNo;
  final String? _origSensorId;
  final double? _senlat;
  final double? _senlon;
  final double? _senalt;
  final double? _senx;
  final double? _seny;
  final double? _senz;
  final List<String>? _senQuat;
  final List<String>? _senQuatDot;
  final String? _imageType;
  final String? _expStartTime;
  final String? _expEndTime;
  final String? _imageSourceInfo;
  final double? _topLeftStartAz;
  final double? _topLeftStartEl;
  final double? _topLeftStopAz;
  final double? _topLeftStopEl;
  final String? _imageSetId;
  final int? _imageSetLength;
  final int? _sequenceId;
  final double? _frameFovwidth;
  final double? _frameFovheight;
  final double? _pixelFovwidth;
  final double? _pixelFovheight;
  final int? _frameWidthPixels;
  final int? _frameHeightPixels;
  final int? _pixelBitDepth;
  final String? _annotationKey;
  final String? _calibrationKey;
  final String? _filename;
  final int? _filesize;
  final String? _checksumValue;
  final String? _transactionId;
  final List<String>? _tags;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final String? _sourceDl;
  final String? _description;
  final SkyImageryIngestDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final List<String>? _eoObservations;

  SkyImageryIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idOnOrbit,
    String? origObjectId,
    String? idAttitudeSet,
    String? idSensor,
    int? satNo,
    String? origSensorId,
    double? senlat,
    double? senlon,
    double? senalt,
    double? senx,
    double? seny,
    double? senz,
    List<String>? senQuat,
    List<String>? senQuatDot,
    String? imageType,
    String? expStartTime,
    String? expEndTime,
    String? imageSourceInfo,
    double? topLeftStartAz,
    double? topLeftStartEl,
    double? topLeftStopAz,
    double? topLeftStopEl,
    String? imageSetId,
    int? imageSetLength,
    int? sequenceId,
    double? frameFovwidth,
    double? frameFovheight,
    double? pixelFovwidth,
    double? pixelFovheight,
    int? frameWidthPixels,
    int? frameHeightPixels,
    int? pixelBitDepth,
    String? annotationKey,
    String? calibrationKey,
    String? filename,
    int? filesize,
    String? checksumValue,
    String? transactionId,
    List<String>? tags,
    String? source,
    String? origin,
    String? origNetwork,
    String? sourceDl,
    String? description,
    SkyImageryIngestDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    List<String>? eoObservations,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idOnOrbit = idOnOrbit,
        _origObjectId = origObjectId,
        _idAttitudeSet = idAttitudeSet,
        _idSensor = idSensor,
        _satNo = satNo,
        _origSensorId = origSensorId,
        _senlat = senlat,
        _senlon = senlon,
        _senalt = senalt,
        _senx = senx,
        _seny = seny,
        _senz = senz,
        _senQuat = senQuat,
        _senQuatDot = senQuatDot,
        _imageType = imageType,
        _expStartTime = expStartTime,
        _expEndTime = expEndTime,
        _imageSourceInfo = imageSourceInfo,
        _topLeftStartAz = topLeftStartAz,
        _topLeftStartEl = topLeftStartEl,
        _topLeftStopAz = topLeftStopAz,
        _topLeftStopEl = topLeftStopEl,
        _imageSetId = imageSetId,
        _imageSetLength = imageSetLength,
        _sequenceId = sequenceId,
        _frameFovwidth = frameFovwidth,
        _frameFovheight = frameFovheight,
        _pixelFovwidth = pixelFovwidth,
        _pixelFovheight = pixelFovheight,
        _frameWidthPixels = frameWidthPixels,
        _frameHeightPixels = frameHeightPixels,
        _pixelBitDepth = pixelBitDepth,
        _annotationKey = annotationKey,
        _calibrationKey = calibrationKey,
        _filename = filename,
        _filesize = filesize,
        _checksumValue = checksumValue,
        _transactionId = transactionId,
        _tags = tags,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _sourceDl = sourceDl,
        _description = description,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _eoObservations = eoObservations;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? idAttitudeSetOffset = _idAttitudeSet == null ? null
        : fbBuilder.writeString(_idAttitudeSet!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? senQuatOffset = _senQuat == null ? null
        : fbBuilder.writeList(_senQuat!.map(fbBuilder.writeString).toList());
    final int? senQuatDotOffset = _senQuatDot == null ? null
        : fbBuilder.writeList(_senQuatDot!.map(fbBuilder.writeString).toList());
    final int? imageTypeOffset = _imageType == null ? null
        : fbBuilder.writeString(_imageType!);
    final int? expStartTimeOffset = _expStartTime == null ? null
        : fbBuilder.writeString(_expStartTime!);
    final int? expEndTimeOffset = _expEndTime == null ? null
        : fbBuilder.writeString(_expEndTime!);
    final int? imageSourceInfoOffset = _imageSourceInfo == null ? null
        : fbBuilder.writeString(_imageSourceInfo!);
    final int? imageSetIdOffset = _imageSetId == null ? null
        : fbBuilder.writeString(_imageSetId!);
    final int? annotationKeyOffset = _annotationKey == null ? null
        : fbBuilder.writeString(_annotationKey!);
    final int? calibrationKeyOffset = _calibrationKey == null ? null
        : fbBuilder.writeString(_calibrationKey!);
    final int? filenameOffset = _filename == null ? null
        : fbBuilder.writeString(_filename!);
    final int? checksumValueOffset = _checksumValue == null ? null
        : fbBuilder.writeString(_checksumValue!);
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? eoObservationsOffset = _eoObservations == null ? null
        : fbBuilder.writeList(_eoObservations!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(50);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idOnOrbitOffset);
    fbBuilder.addOffset(3, origObjectIdOffset);
    fbBuilder.addOffset(4, idAttitudeSetOffset);
    fbBuilder.addOffset(5, idSensorOffset);
    fbBuilder.addInt32(6, _satNo);
    fbBuilder.addOffset(7, origSensorIdOffset);
    fbBuilder.addFloat64(8, _senlat);
    fbBuilder.addFloat64(9, _senlon);
    fbBuilder.addFloat64(10, _senalt);
    fbBuilder.addFloat64(11, _senx);
    fbBuilder.addFloat64(12, _seny);
    fbBuilder.addFloat64(13, _senz);
    fbBuilder.addOffset(14, senQuatOffset);
    fbBuilder.addOffset(15, senQuatDotOffset);
    fbBuilder.addOffset(16, imageTypeOffset);
    fbBuilder.addOffset(17, expStartTimeOffset);
    fbBuilder.addOffset(18, expEndTimeOffset);
    fbBuilder.addOffset(19, imageSourceInfoOffset);
    fbBuilder.addFloat64(20, _topLeftStartAz);
    fbBuilder.addFloat64(21, _topLeftStartEl);
    fbBuilder.addFloat64(22, _topLeftStopAz);
    fbBuilder.addFloat64(23, _topLeftStopEl);
    fbBuilder.addOffset(24, imageSetIdOffset);
    fbBuilder.addInt32(25, _imageSetLength);
    fbBuilder.addInt32(26, _sequenceId);
    fbBuilder.addFloat64(27, _frameFovwidth);
    fbBuilder.addFloat64(28, _frameFovheight);
    fbBuilder.addFloat64(29, _pixelFovwidth);
    fbBuilder.addFloat64(30, _pixelFovheight);
    fbBuilder.addInt32(31, _frameWidthPixels);
    fbBuilder.addInt32(32, _frameHeightPixels);
    fbBuilder.addInt32(33, _pixelBitDepth);
    fbBuilder.addOffset(34, annotationKeyOffset);
    fbBuilder.addOffset(35, calibrationKeyOffset);
    fbBuilder.addOffset(36, filenameOffset);
    fbBuilder.addInt64(37, _filesize);
    fbBuilder.addOffset(38, checksumValueOffset);
    fbBuilder.addOffset(39, transactionIdOffset);
    fbBuilder.addOffset(40, tagsOffset);
    fbBuilder.addOffset(41, sourceOffset);
    fbBuilder.addOffset(42, originOffset);
    fbBuilder.addOffset(43, origNetworkOffset);
    fbBuilder.addOffset(44, sourceDlOffset);
    fbBuilder.addOffset(45, descriptionOffset);
    fbBuilder.addInt8(46, _dataMode?.value);
    fbBuilder.addOffset(47, createdAtOffset);
    fbBuilder.addOffset(48, createdByOffset);
    fbBuilder.addOffset(49, eoObservationsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
