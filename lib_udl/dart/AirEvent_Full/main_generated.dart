// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AirEventFullDataModeEnum {
  final int value;
  const AirEventFullDataModeEnum._(this.value);

  factory AirEventFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AirEventFullDataModeEnum');
    }
    return result;
  }

  static AirEventFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AirEventFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AirEventFullDataModeEnum REAL = AirEventFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AirEventFullDataModeEnum TEST = AirEventFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AirEventFullDataModeEnum SIMULATED = AirEventFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AirEventFullDataModeEnum EXERCISE = AirEventFullDataModeEnum._(3);
  static const Map<int, AirEventFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AirEventFullDataModeEnum> reader = _AirEventFullDataModeEnumReader();

  @override
  String toString() {
    return 'AirEventFullDataModeEnum{value: $value}';
  }
}

class _AirEventFullDataModeEnumReader extends fb.Reader<AirEventFullDataModeEnum> {
  const _AirEventFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AirEventFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      AirEventFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Information related to an air event (e.g. FUEL TRANSFER, AIR DROP) and the associated aircraft.
class AirEventFull {
  AirEventFull._(this._bc, this._bcOffset);
  factory AirEventFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirEventFull> reader = _AirEventFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Type of air event (e.g. FUEL TRANSFER, AIR DROP, etc).
  ///  Example: /// Example: FUEL TRANSFER
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The UDL unique identifier of the sortie associated with this air event.
  ///  Example: /// Example: b9866c03-2397-4506-8153-852e72d9b54f
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSortie => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The UDL unique identifier of the mission associated with this air event.
  ///  Example: /// Example: 190dea6d-2a90-45a2-a276-be9047d9b96c
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idMission => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Optional air event ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: MB014313032022407540
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalAirEventId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Identifies the Itinerary point of a sortie where an air event occurs.
  ///  Example: /// Example: 825
  ///  Constraints: No constraints specified.
  int get legNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  The location representing this air event specified as a feature Id. Locations specified include air refueling track Ids and air drop event locations.
  ///  Example: /// Example: 901EW
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get location => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The purpose of the air event at the arrival location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get arrPurpose => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The scheduled arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T13:55:43.123Z
  ///  Constraints: No constraints specified.
  String? get plannedArrTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The current estimated arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T13:59:48.123Z
  ///  Constraints: No constraints specified.
  String? get estArrTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The actual arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T14:00:03.123Z
  ///  Constraints: No constraints specified.
  String? get actualArrTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The purpose of the air event at the departure location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
  ///  Example: /// Example: Q
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get depPurpose => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The scheduled departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T14:15:43.123Z
  ///  Constraints: No constraints specified.
  String? get plannedDepTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The current estimated departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T14:19:48.123Z
  ///  Constraints: No constraints specified.
  String? get estDepTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The actual departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T14:17:03.123Z
  ///  Constraints: No constraints specified.
  String? get actualDepTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: 6418a4b68e5c3896bf024cc79aa4174c
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalArtrackId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Identifier of the air refueling track, if applicable.
  ///  Example: /// Example: CH61
  ///  Constraints: Minimum length = 0, Maximum length = 15
  String? get arTrackId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Name of the air refueling track, if applicable.
  ///  Example: /// Example: CH61 POST
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get arTrackName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The Rendezvous Control Time is the planned time the tanker and receiver aircraft will rendezvous for an en route type air refueling event, in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2024-01-07T13:55:43.123Z
  ///  Constraints: No constraints specified.
  String? get rzct => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The Air Refueling Control Time is the planned time the tanker aircraft will transfer fuel to the receiver aircraft, in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2024-01-07T15:11:27.123Z
  ///  Constraints: No constraints specified.
  String? get arct => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Altitude of this air event, in feet.
  ///  Example: /// Example: 28000.1
  ///  Constraints: No constraints specified.
  double get baseAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Priority of this air event.
  ///  Example: /// Example: 1A2
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get priority => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Length of time the receiver unit has requested for an air event, in hours.
  ///  Example: /// Example: 1.5
  ///  Constraints: No constraints specified.
  double get trackTime => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Status of this air refueling event track reservation. Receivers are responsible for scheduling or reserving air refueling tracks. Possible values are A (Altitude Reservation), R (Reserved), or Q (Questionable).
  ///  Example: /// Example: R
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get statusCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Rendezvous point for the tanker and receiver during this air refueling event. Possible values are AN (Anchor Nav Point), AP (Anchor Pattern), CP (Control Point), ET (Entry Point), EX (Exit Point), IP (Initial Point), NC (Nav Check Point).
  ///  Example: /// Example: AN
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get rzPoint => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Type of rendezvous used for this air refueling event. Possible values are BUD (Buddy), EN (Enroute), GCI (Ground Control), PP (Point Parallel).
  ///  Example: /// Example: PP
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get rzType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Type of process used by AMC to schedule this air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
  ///  Example: /// Example: V
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get arEventType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  The number of tankers requested for an air refueling event.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numTankers => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 60, 0);
  ///  Flag indicating if the receiver unit has requested flying an air refueling track in both directions.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get revTrack => const fb.BoolReader().vTableGet(_bc, _bcOffset, 62, false);
  ///  Flag indicating that the receiver unit has requested flying a short portion of an air refueling track.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get shortTrack => const fb.BoolReader().vTableGet(_bc, _bcOffset, 64, false);
  ///  Flag indicating that this air refueling event has been cancelled.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get cancelled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 66, false);
  ///  Collection of tanker aircraft associated with this Air Event.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get tankers => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 68);
  ///  Collection of receiver aircraft associated with this Air Event.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get receivers => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 70);
  ///  Collection of remarks associated with this Air Event.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get remarks => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 72);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AirEventFullDataModeEnum get dataMode => AirEventFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 90, 0));

  @override
  String toString() {
    return 'AirEventFull{id: ${id}, classificationMarking: ${classificationMarking}, type: ${type}, idSortie: ${idSortie}, idMission: ${idMission}, externalAirEventId: ${externalAirEventId}, legNum: ${legNum}, location: ${location}, arrPurpose: ${arrPurpose}, plannedArrTime: ${plannedArrTime}, estArrTime: ${estArrTime}, actualArrTime: ${actualArrTime}, depPurpose: ${depPurpose}, plannedDepTime: ${plannedDepTime}, estDepTime: ${estDepTime}, actualDepTime: ${actualDepTime}, externalArtrackId: ${externalArtrackId}, arTrackId: ${arTrackId}, arTrackName: ${arTrackName}, rzct: ${rzct}, arct: ${arct}, baseAlt: ${baseAlt}, priority: ${priority}, trackTime: ${trackTime}, statusCode: ${statusCode}, rzPoint: ${rzPoint}, rzType: ${rzType}, arEventType: ${arEventType}, numTankers: ${numTankers}, revTrack: ${revTrack}, shortTrack: ${shortTrack}, cancelled: ${cancelled}, tankers: ${tankers}, receivers: ${receivers}, remarks: ${remarks}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _AirEventFullReader extends fb.TableReader<AirEventFull> {
  const _AirEventFullReader();

  @override
  AirEventFull createObject(fb.BufferContext bc, int offset) => 
    AirEventFull._(bc, offset);
}

class AirEventFullBuilder {
  AirEventFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(44);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdSortieOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIdMissionOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addExternalAirEventIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addLegNum(int? legNum) {
    fbBuilder.addInt32(6, legNum);
    return fbBuilder.offset;
  }
  int addLocationOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addArrPurposeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addPlannedArrTimeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addEstArrTimeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addActualArrTimeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addDepPurposeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addPlannedDepTimeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addEstDepTimeOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addActualDepTimeOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addExternalArtrackIdOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addArTrackIdOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addArTrackNameOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addRzctOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addArctOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addBaseAlt(double? baseAlt) {
    fbBuilder.addFloat64(21, baseAlt);
    return fbBuilder.offset;
  }
  int addPriorityOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addTrackTime(double? trackTime) {
    fbBuilder.addFloat64(23, trackTime);
    return fbBuilder.offset;
  }
  int addStatusCodeOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addRzPointOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addRzTypeOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addArEventTypeOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addNumTankers(int? numTankers) {
    fbBuilder.addInt32(28, numTankers);
    return fbBuilder.offset;
  }
  int addRevTrack(bool? revTrack) {
    fbBuilder.addBool(29, revTrack);
    return fbBuilder.offset;
  }
  int addShortTrack(bool? shortTrack) {
    fbBuilder.addBool(30, shortTrack);
    return fbBuilder.offset;
  }
  int addCancelled(bool? cancelled) {
    fbBuilder.addBool(31, cancelled);
    return fbBuilder.offset;
  }
  int addTankersOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addReceiversOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addRemarksOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AirEventFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(43, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirEventFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _type;
  final String? _idSortie;
  final String? _idMission;
  final String? _externalAirEventId;
  final int? _legNum;
  final String? _location;
  final String? _arrPurpose;
  final String? _plannedArrTime;
  final String? _estArrTime;
  final String? _actualArrTime;
  final String? _depPurpose;
  final String? _plannedDepTime;
  final String? _estDepTime;
  final String? _actualDepTime;
  final String? _externalArtrackId;
  final String? _arTrackId;
  final String? _arTrackName;
  final String? _rzct;
  final String? _arct;
  final double? _baseAlt;
  final String? _priority;
  final double? _trackTime;
  final String? _statusCode;
  final String? _rzPoint;
  final String? _rzType;
  final String? _arEventType;
  final int? _numTankers;
  final bool? _revTrack;
  final bool? _shortTrack;
  final bool? _cancelled;
  final List<String>? _tankers;
  final List<String>? _receivers;
  final List<String>? _remarks;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final AirEventFullDataModeEnum? _dataMode;

  AirEventFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? type,
    String? idSortie,
    String? idMission,
    String? externalAirEventId,
    int? legNum,
    String? location,
    String? arrPurpose,
    String? plannedArrTime,
    String? estArrTime,
    String? actualArrTime,
    String? depPurpose,
    String? plannedDepTime,
    String? estDepTime,
    String? actualDepTime,
    String? externalArtrackId,
    String? arTrackId,
    String? arTrackName,
    String? rzct,
    String? arct,
    double? baseAlt,
    String? priority,
    double? trackTime,
    String? statusCode,
    String? rzPoint,
    String? rzType,
    String? arEventType,
    int? numTankers,
    bool? revTrack,
    bool? shortTrack,
    bool? cancelled,
    List<String>? tankers,
    List<String>? receivers,
    List<String>? remarks,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    AirEventFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _type = type,
        _idSortie = idSortie,
        _idMission = idMission,
        _externalAirEventId = externalAirEventId,
        _legNum = legNum,
        _location = location,
        _arrPurpose = arrPurpose,
        _plannedArrTime = plannedArrTime,
        _estArrTime = estArrTime,
        _actualArrTime = actualArrTime,
        _depPurpose = depPurpose,
        _plannedDepTime = plannedDepTime,
        _estDepTime = estDepTime,
        _actualDepTime = actualDepTime,
        _externalArtrackId = externalArtrackId,
        _arTrackId = arTrackId,
        _arTrackName = arTrackName,
        _rzct = rzct,
        _arct = arct,
        _baseAlt = baseAlt,
        _priority = priority,
        _trackTime = trackTime,
        _statusCode = statusCode,
        _rzPoint = rzPoint,
        _rzType = rzType,
        _arEventType = arEventType,
        _numTankers = numTankers,
        _revTrack = revTrack,
        _shortTrack = shortTrack,
        _cancelled = cancelled,
        _tankers = tankers,
        _receivers = receivers,
        _remarks = remarks,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? idSortieOffset = _idSortie == null ? null
        : fbBuilder.writeString(_idSortie!);
    final int? idMissionOffset = _idMission == null ? null
        : fbBuilder.writeString(_idMission!);
    final int? externalAirEventIdOffset = _externalAirEventId == null ? null
        : fbBuilder.writeString(_externalAirEventId!);
    final int? locationOffset = _location == null ? null
        : fbBuilder.writeString(_location!);
    final int? arrPurposeOffset = _arrPurpose == null ? null
        : fbBuilder.writeString(_arrPurpose!);
    final int? plannedArrTimeOffset = _plannedArrTime == null ? null
        : fbBuilder.writeString(_plannedArrTime!);
    final int? estArrTimeOffset = _estArrTime == null ? null
        : fbBuilder.writeString(_estArrTime!);
    final int? actualArrTimeOffset = _actualArrTime == null ? null
        : fbBuilder.writeString(_actualArrTime!);
    final int? depPurposeOffset = _depPurpose == null ? null
        : fbBuilder.writeString(_depPurpose!);
    final int? plannedDepTimeOffset = _plannedDepTime == null ? null
        : fbBuilder.writeString(_plannedDepTime!);
    final int? estDepTimeOffset = _estDepTime == null ? null
        : fbBuilder.writeString(_estDepTime!);
    final int? actualDepTimeOffset = _actualDepTime == null ? null
        : fbBuilder.writeString(_actualDepTime!);
    final int? externalArtrackIdOffset = _externalArtrackId == null ? null
        : fbBuilder.writeString(_externalArtrackId!);
    final int? arTrackIdOffset = _arTrackId == null ? null
        : fbBuilder.writeString(_arTrackId!);
    final int? arTrackNameOffset = _arTrackName == null ? null
        : fbBuilder.writeString(_arTrackName!);
    final int? rzctOffset = _rzct == null ? null
        : fbBuilder.writeString(_rzct!);
    final int? arctOffset = _arct == null ? null
        : fbBuilder.writeString(_arct!);
    final int? priorityOffset = _priority == null ? null
        : fbBuilder.writeString(_priority!);
    final int? statusCodeOffset = _statusCode == null ? null
        : fbBuilder.writeString(_statusCode!);
    final int? rzPointOffset = _rzPoint == null ? null
        : fbBuilder.writeString(_rzPoint!);
    final int? rzTypeOffset = _rzType == null ? null
        : fbBuilder.writeString(_rzType!);
    final int? arEventTypeOffset = _arEventType == null ? null
        : fbBuilder.writeString(_arEventType!);
    final int? tankersOffset = _tankers == null ? null
        : fbBuilder.writeList(_tankers!.map(fbBuilder.writeString).toList());
    final int? receiversOffset = _receivers == null ? null
        : fbBuilder.writeList(_receivers!.map(fbBuilder.writeString).toList());
    final int? remarksOffset = _remarks == null ? null
        : fbBuilder.writeList(_remarks!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(44);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, typeOffset);
    fbBuilder.addOffset(3, idSortieOffset);
    fbBuilder.addOffset(4, idMissionOffset);
    fbBuilder.addOffset(5, externalAirEventIdOffset);
    fbBuilder.addInt32(6, _legNum);
    fbBuilder.addOffset(7, locationOffset);
    fbBuilder.addOffset(8, arrPurposeOffset);
    fbBuilder.addOffset(9, plannedArrTimeOffset);
    fbBuilder.addOffset(10, estArrTimeOffset);
    fbBuilder.addOffset(11, actualArrTimeOffset);
    fbBuilder.addOffset(12, depPurposeOffset);
    fbBuilder.addOffset(13, plannedDepTimeOffset);
    fbBuilder.addOffset(14, estDepTimeOffset);
    fbBuilder.addOffset(15, actualDepTimeOffset);
    fbBuilder.addOffset(16, externalArtrackIdOffset);
    fbBuilder.addOffset(17, arTrackIdOffset);
    fbBuilder.addOffset(18, arTrackNameOffset);
    fbBuilder.addOffset(19, rzctOffset);
    fbBuilder.addOffset(20, arctOffset);
    fbBuilder.addFloat64(21, _baseAlt);
    fbBuilder.addOffset(22, priorityOffset);
    fbBuilder.addFloat64(23, _trackTime);
    fbBuilder.addOffset(24, statusCodeOffset);
    fbBuilder.addOffset(25, rzPointOffset);
    fbBuilder.addOffset(26, rzTypeOffset);
    fbBuilder.addOffset(27, arEventTypeOffset);
    fbBuilder.addInt32(28, _numTankers);
    fbBuilder.addBool(29, _revTrack);
    fbBuilder.addBool(30, _shortTrack);
    fbBuilder.addBool(31, _cancelled);
    fbBuilder.addOffset(32, tankersOffset);
    fbBuilder.addOffset(33, receiversOffset);
    fbBuilder.addOffset(34, remarksOffset);
    fbBuilder.addOffset(35, createdAtOffset);
    fbBuilder.addOffset(36, createdByOffset);
    fbBuilder.addOffset(37, updatedAtOffset);
    fbBuilder.addOffset(38, updatedByOffset);
    fbBuilder.addOffset(39, sourceDlOffset);
    fbBuilder.addOffset(40, sourceOffset);
    fbBuilder.addOffset(41, originOffset);
    fbBuilder.addOffset(42, origNetworkOffset);
    fbBuilder.addInt8(43, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
