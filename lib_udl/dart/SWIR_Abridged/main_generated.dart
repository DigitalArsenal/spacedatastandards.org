// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SwirAbridgedDataModeEnum {
  final int value;
  const SwirAbridgedDataModeEnum._(this.value);

  factory SwirAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SwirAbridgedDataModeEnum');
    }
    return result;
  }

  static SwirAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SwirAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SwirAbridgedDataModeEnum REAL = SwirAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SwirAbridgedDataModeEnum TEST = SwirAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SwirAbridgedDataModeEnum SIMULATED = SwirAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SwirAbridgedDataModeEnum EXERCISE = SwirAbridgedDataModeEnum._(3);
  static const Map<int, SwirAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SwirAbridgedDataModeEnum> reader = _SwirAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'SwirAbridgedDataModeEnum{value: $value}';
  }
}

class _SwirAbridgedDataModeEnumReader extends fb.Reader<SwirAbridgedDataModeEnum> {
  const _SwirAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SwirAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      SwirAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Data representing observed short wave infrared (SWIR) measurements.
class SwirAbridged {
  SwirAbridged._(this._bc, this._bcOffset);
  factory SwirAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SwirAbridged> reader = _SwirAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SWIR-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the target on-orbit object.
  ///  Example: /// Example: 45234
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Data timestamp in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get ts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get solarPhaseAngle => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 70.55208
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 81.18191
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Location/name of the observing sensor.
  ///  Example: /// Example: AeroTel
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get locationName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  User comments concerning sensor or data limitations.
  ///  Example: /// Example: Example Comments
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get badWave => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Original object ID or Catalog Number provided by source.
  ///  Example: /// Example: WildBlue-1
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 25544
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SwirAbridgedDataModeEnum get dataMode => SwirAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 30, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);

  @override
  String toString() {
    return 'SwirAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idOnOrbit: ${idOnOrbit}, ts: ${ts}, solarPhaseAngle: ${solarPhaseAngle}, lat: ${lat}, lon: ${lon}, locationName: ${locationName}, badWave: ${badWave}, origObjectId: ${origObjectId}, source: ${source}, origin: ${origin}, satNo: ${satNo}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, origNetwork: ${origNetwork}}';
  }
}

class _SwirAbridgedReader extends fb.TableReader<SwirAbridged> {
  const _SwirAbridgedReader();

  @override
  SwirAbridged createObject(fb.BufferContext bc, int offset) => 
    SwirAbridged._(bc, offset);
}

class SwirAbridgedBuilder {
  SwirAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(17);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSolarPhaseAngle(double? solarPhaseAngle) {
    fbBuilder.addFloat64(4, solarPhaseAngle);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(5, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(6, lon);
    return fbBuilder.offset;
  }
  int addLocationNameOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addBadWaveOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(12, satNo);
    return fbBuilder.offset;
  }
  int addDataMode(SwirAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(13, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SwirAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idOnOrbit;
  final String? _ts;
  final double? _solarPhaseAngle;
  final double? _lat;
  final double? _lon;
  final String? _locationName;
  final String? _badWave;
  final String? _origObjectId;
  final String? _source;
  final String? _origin;
  final int? _satNo;
  final SwirAbridgedDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _origNetwork;

  SwirAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idOnOrbit,
    String? ts,
    double? solarPhaseAngle,
    double? lat,
    double? lon,
    String? locationName,
    String? badWave,
    String? origObjectId,
    String? source,
    String? origin,
    int? satNo,
    SwirAbridgedDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idOnOrbit = idOnOrbit,
        _ts = ts,
        _solarPhaseAngle = solarPhaseAngle,
        _lat = lat,
        _lon = lon,
        _locationName = locationName,
        _badWave = badWave,
        _origObjectId = origObjectId,
        _source = source,
        _origin = origin,
        _satNo = satNo,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeString(_ts!);
    final int? locationNameOffset = _locationName == null ? null
        : fbBuilder.writeString(_locationName!);
    final int? badWaveOffset = _badWave == null ? null
        : fbBuilder.writeString(_badWave!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(17);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idOnOrbitOffset);
    fbBuilder.addOffset(3, tsOffset);
    fbBuilder.addFloat64(4, _solarPhaseAngle);
    fbBuilder.addFloat64(5, _lat);
    fbBuilder.addFloat64(6, _lon);
    fbBuilder.addOffset(7, locationNameOffset);
    fbBuilder.addOffset(8, badWaveOffset);
    fbBuilder.addOffset(9, origObjectIdOffset);
    fbBuilder.addOffset(10, sourceOffset);
    fbBuilder.addOffset(11, originOffset);
    fbBuilder.addInt32(12, _satNo);
    fbBuilder.addInt8(13, _dataMode?.value);
    fbBuilder.addOffset(14, createdAtOffset);
    fbBuilder.addOffset(15, createdByOffset);
    fbBuilder.addOffset(16, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
