// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of receiver aircraft associated with this Air Event.
class AirEventReceiversAbridged {
  AirEventReceiversAbridged._(this._bc, this._bcOffset);
  factory AirEventReceiversAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirEventReceiversAbridged> reader = _AirEventReceiversAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The UDL ID of the aircraft sortie this receiver is associated with for this event.
  ///  Example: /// Example: 1d03e85a-1fb9-4f6e-86a0-593306b6e3f0
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idReceiverSortie => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The UDL ID of the mission this receiver is associated with for this event.
  ///  Example: /// Example: ce99757d-f733-461f-8939-3939d4f05946
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idReceiverMission => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The UDL ID of the airfield this receiver is associated with for this event.
  ///  Example: /// Example: 96c4c2ba-a031-4e58-9b8e-3c6fb90a7534
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idReceiverAirfield => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional receiver identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: 3fb8169f-adc1-4667-acab-8415a012d766
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalReceiverId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Coordination record identifier of this receiver.
  ///  Example: /// Example: TTC601
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get receiverCoord => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The Model Design Series designation of this receiver.
  ///  Example: /// Example: KC135R
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get receiverMds => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The Air Mobility Command (AMC) mission identifier of this receiver.
  ///  Example: /// Example: 8PH000B1S052
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get amcReceiverMissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Alternate mission identifier of this receiver provided by source.
  ///  Example: /// Example: 1UN05201L121
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get altReceiverMissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The call sign assigned to this receiver.
  ///  Example: /// Example: BAKER
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get receiverCallSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The wing or unit that owns this receiver.
  ///  Example: /// Example: 117ARW
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get receiverOwner => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The name and/or number of the point of contact for this receiver.
  ///  Example: /// Example: JOHN SMITH (555)555-5555
  ///  Constraints: Minimum length = 0, Maximum length = 68
  String? get receiverPoc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Identifies the itinerary point of a mission that this receiver is linked to.
  ///  Example: /// Example: 825
  ///  Constraints: No constraints specified.
  int get receiverLegNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  Location the receiver is deployed to for an air refueling event.
  ///  Example: /// Example: KOFF
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get receiverDeployedIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Type of fuel delivery method used by the receiver during an air refueling event (BOOM, DROGUE, BOTH).
  ///  Example: /// Example: DROGUE
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get receiverDeliveryMethod => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Total weight of the fuel transferred to this receiver during an air refueling event, in pounds.
  ///  Example: /// Example: 15000000.1
  ///  Constraints: No constraints specified.
  double get fuelOn => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Position of this receiver within a group of receivers in an air refueling event.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get receiverCellPosition => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Indicates the unique number by Unit ID, which identifies an air refueling event.
  ///  Example: /// Example: 1018
  ///  Constraints: Minimum length = 0, Maximum length = 15
  String? get sequenceNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The major command level (MAJCOM) or foreign military sales (FMS) name of the receiver's organization. The tanker flying hours used for an air refueling event are logged against the receiver MAJCOM or foreign government being supported.
  ///  Example: /// Example: AMC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get recOrg => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Number of aircraft contained within one receiver coordination record for an air refueling event.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get numRecAircraft => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  Type of fuel being transferred to the receiver in an air refueling event.
  ///  Example: /// Example: JP8
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get receiverFuelType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Name of the receiver exercise associated with an air refueling event.
  ///  Example: /// Example: NATO19
  ///  Constraints: Minimum length = 0, Maximum length = 12
  String? get receiverExercise => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The package identifier for the receiver in an air refueling event.
  ///  Example: /// Example: 135
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get packageId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);

  @override
  String toString() {
    return 'AirEventReceiversAbridged{idReceiverSortie: ${idReceiverSortie}, idReceiverMission: ${idReceiverMission}, idReceiverAirfield: ${idReceiverAirfield}, externalReceiverId: ${externalReceiverId}, receiverCoord: ${receiverCoord}, receiverMds: ${receiverMds}, amcReceiverMissionId: ${amcReceiverMissionId}, altReceiverMissionId: ${altReceiverMissionId}, receiverCallSign: ${receiverCallSign}, receiverOwner: ${receiverOwner}, receiverPoc: ${receiverPoc}, receiverLegNum: ${receiverLegNum}, receiverDeployedIcao: ${receiverDeployedIcao}, receiverDeliveryMethod: ${receiverDeliveryMethod}, fuelOn: ${fuelOn}, receiverCellPosition: ${receiverCellPosition}, sequenceNum: ${sequenceNum}, recOrg: ${recOrg}, numRecAircraft: ${numRecAircraft}, receiverFuelType: ${receiverFuelType}, receiverExercise: ${receiverExercise}, packageId: ${packageId}}';
  }
}

class _AirEventReceiversAbridgedReader extends fb.TableReader<AirEventReceiversAbridged> {
  const _AirEventReceiversAbridgedReader();

  @override
  AirEventReceiversAbridged createObject(fb.BufferContext bc, int offset) => 
    AirEventReceiversAbridged._(bc, offset);
}

class AirEventReceiversAbridgedBuilder {
  AirEventReceiversAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(22);
  }

  int addIdReceiverSortieOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdReceiverMissionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdReceiverAirfieldOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addExternalReceiverIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addReceiverCoordOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addReceiverMdsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addAmcReceiverMissionIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addAltReceiverMissionIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addReceiverCallSignOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addReceiverOwnerOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addReceiverPocOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addReceiverLegNum(int? receiverLegNum) {
    fbBuilder.addInt32(11, receiverLegNum);
    return fbBuilder.offset;
  }
  int addReceiverDeployedIcaoOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addReceiverDeliveryMethodOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addFuelOn(double? fuelOn) {
    fbBuilder.addFloat64(14, fuelOn);
    return fbBuilder.offset;
  }
  int addReceiverCellPosition(int? receiverCellPosition) {
    fbBuilder.addInt32(15, receiverCellPosition);
    return fbBuilder.offset;
  }
  int addSequenceNumOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addRecOrgOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addNumRecAircraft(int? numRecAircraft) {
    fbBuilder.addInt32(18, numRecAircraft);
    return fbBuilder.offset;
  }
  int addReceiverFuelTypeOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addReceiverExerciseOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addPackageIdOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirEventReceiversAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _idReceiverSortie;
  final String? _idReceiverMission;
  final String? _idReceiverAirfield;
  final String? _externalReceiverId;
  final String? _receiverCoord;
  final String? _receiverMds;
  final String? _amcReceiverMissionId;
  final String? _altReceiverMissionId;
  final String? _receiverCallSign;
  final String? _receiverOwner;
  final String? _receiverPoc;
  final int? _receiverLegNum;
  final String? _receiverDeployedIcao;
  final String? _receiverDeliveryMethod;
  final double? _fuelOn;
  final int? _receiverCellPosition;
  final String? _sequenceNum;
  final String? _recOrg;
  final int? _numRecAircraft;
  final String? _receiverFuelType;
  final String? _receiverExercise;
  final String? _packageId;

  AirEventReceiversAbridgedObjectBuilder({
    String? idReceiverSortie,
    String? idReceiverMission,
    String? idReceiverAirfield,
    String? externalReceiverId,
    String? receiverCoord,
    String? receiverMds,
    String? amcReceiverMissionId,
    String? altReceiverMissionId,
    String? receiverCallSign,
    String? receiverOwner,
    String? receiverPoc,
    int? receiverLegNum,
    String? receiverDeployedIcao,
    String? receiverDeliveryMethod,
    double? fuelOn,
    int? receiverCellPosition,
    String? sequenceNum,
    String? recOrg,
    int? numRecAircraft,
    String? receiverFuelType,
    String? receiverExercise,
    String? packageId,
  })
      : _idReceiverSortie = idReceiverSortie,
        _idReceiverMission = idReceiverMission,
        _idReceiverAirfield = idReceiverAirfield,
        _externalReceiverId = externalReceiverId,
        _receiverCoord = receiverCoord,
        _receiverMds = receiverMds,
        _amcReceiverMissionId = amcReceiverMissionId,
        _altReceiverMissionId = altReceiverMissionId,
        _receiverCallSign = receiverCallSign,
        _receiverOwner = receiverOwner,
        _receiverPoc = receiverPoc,
        _receiverLegNum = receiverLegNum,
        _receiverDeployedIcao = receiverDeployedIcao,
        _receiverDeliveryMethod = receiverDeliveryMethod,
        _fuelOn = fuelOn,
        _receiverCellPosition = receiverCellPosition,
        _sequenceNum = sequenceNum,
        _recOrg = recOrg,
        _numRecAircraft = numRecAircraft,
        _receiverFuelType = receiverFuelType,
        _receiverExercise = receiverExercise,
        _packageId = packageId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idReceiverSortieOffset = _idReceiverSortie == null ? null
        : fbBuilder.writeString(_idReceiverSortie!);
    final int? idReceiverMissionOffset = _idReceiverMission == null ? null
        : fbBuilder.writeString(_idReceiverMission!);
    final int? idReceiverAirfieldOffset = _idReceiverAirfield == null ? null
        : fbBuilder.writeString(_idReceiverAirfield!);
    final int? externalReceiverIdOffset = _externalReceiverId == null ? null
        : fbBuilder.writeString(_externalReceiverId!);
    final int? receiverCoordOffset = _receiverCoord == null ? null
        : fbBuilder.writeString(_receiverCoord!);
    final int? receiverMdsOffset = _receiverMds == null ? null
        : fbBuilder.writeString(_receiverMds!);
    final int? amcReceiverMissionIdOffset = _amcReceiverMissionId == null ? null
        : fbBuilder.writeString(_amcReceiverMissionId!);
    final int? altReceiverMissionIdOffset = _altReceiverMissionId == null ? null
        : fbBuilder.writeString(_altReceiverMissionId!);
    final int? receiverCallSignOffset = _receiverCallSign == null ? null
        : fbBuilder.writeString(_receiverCallSign!);
    final int? receiverOwnerOffset = _receiverOwner == null ? null
        : fbBuilder.writeString(_receiverOwner!);
    final int? receiverPocOffset = _receiverPoc == null ? null
        : fbBuilder.writeString(_receiverPoc!);
    final int? receiverDeployedIcaoOffset = _receiverDeployedIcao == null ? null
        : fbBuilder.writeString(_receiverDeployedIcao!);
    final int? receiverDeliveryMethodOffset = _receiverDeliveryMethod == null ? null
        : fbBuilder.writeString(_receiverDeliveryMethod!);
    final int? sequenceNumOffset = _sequenceNum == null ? null
        : fbBuilder.writeString(_sequenceNum!);
    final int? recOrgOffset = _recOrg == null ? null
        : fbBuilder.writeString(_recOrg!);
    final int? receiverFuelTypeOffset = _receiverFuelType == null ? null
        : fbBuilder.writeString(_receiverFuelType!);
    final int? receiverExerciseOffset = _receiverExercise == null ? null
        : fbBuilder.writeString(_receiverExercise!);
    final int? packageIdOffset = _packageId == null ? null
        : fbBuilder.writeString(_packageId!);
    fbBuilder.startTable(22);
    fbBuilder.addOffset(0, idReceiverSortieOffset);
    fbBuilder.addOffset(1, idReceiverMissionOffset);
    fbBuilder.addOffset(2, idReceiverAirfieldOffset);
    fbBuilder.addOffset(3, externalReceiverIdOffset);
    fbBuilder.addOffset(4, receiverCoordOffset);
    fbBuilder.addOffset(5, receiverMdsOffset);
    fbBuilder.addOffset(6, amcReceiverMissionIdOffset);
    fbBuilder.addOffset(7, altReceiverMissionIdOffset);
    fbBuilder.addOffset(8, receiverCallSignOffset);
    fbBuilder.addOffset(9, receiverOwnerOffset);
    fbBuilder.addOffset(10, receiverPocOffset);
    fbBuilder.addInt32(11, _receiverLegNum);
    fbBuilder.addOffset(12, receiverDeployedIcaoOffset);
    fbBuilder.addOffset(13, receiverDeliveryMethodOffset);
    fbBuilder.addFloat64(14, _fuelOn);
    fbBuilder.addInt32(15, _receiverCellPosition);
    fbBuilder.addOffset(16, sequenceNumOffset);
    fbBuilder.addOffset(17, recOrgOffset);
    fbBuilder.addInt32(18, _numRecAircraft);
    fbBuilder.addOffset(19, receiverFuelTypeOffset);
    fbBuilder.addOffset(20, receiverExerciseOffset);
    fbBuilder.addOffset(21, packageIdOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
