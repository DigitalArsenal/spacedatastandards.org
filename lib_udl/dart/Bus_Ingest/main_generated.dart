// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class BusIngestDataModeEnum {
  final int value;
  const BusIngestDataModeEnum._(this.value);

  factory BusIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum BusIngestDataModeEnum');
    }
    return result;
  }

  static BusIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : BusIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const BusIngestDataModeEnum REAL = BusIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const BusIngestDataModeEnum TEST = BusIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const BusIngestDataModeEnum SIMULATED = BusIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const BusIngestDataModeEnum EXERCISE = BusIngestDataModeEnum._(3);
  static const Map<int, BusIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<BusIngestDataModeEnum> reader = _BusIngestDataModeEnumReader();

  @override
  String toString() {
    return 'BusIngestDataModeEnum{value: $value}';
  }
}

class _BusIngestDataModeEnumReader extends fb.Reader<BusIngestDataModeEnum> {
  const _BusIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  BusIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      BusIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// A bus is the physical and software infrastructure backbone to which on-orbit satellite payloads are attached for power, control, and other support functions.
class BusIngest {
  BusIngest._(this._bc, this._bcOffset);
  factory BusIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BusIngest> reader = _BusIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: BUS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Name of this bus.
  ///  Example: /// Example: Example name
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  ID of the parent entity for this bus.
  ///  Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idEntity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Type of this bus.
  ///  Example: /// Example: Example type
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Maximum mass at launch, lower bounds, in kilograms.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get maxLaunchMassLower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Maximum mass at launch, upper bounds, in kilograms.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get maxLaunchMassUpper => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Maximum mass on station at beginning of life, in kilograms.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get maxBolstationMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Average mass available on this bus for payloads, in kilograms.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get avgPayloadMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Maximum payload mass available, in kilograms.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get maxPayloadMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Minimum mass of this bus without payloads or fuel, in kilograms.
  ///  Example: /// Example: 2858.1
  ///  Constraints: No constraints specified.
  double get minDryMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Average mass of this bus without payloads or fuel, in kilograms.
  ///  Example: /// Example: 2879.1
  ///  Constraints: No constraints specified.
  double get avgDryMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Median mass of this bus without payloads or fuel, in kilograms.
  ///  Example: /// Example: 2950.1
  ///  Constraints: No constraints specified.
  double get medianDryMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Maximum mass of this bus without payloads or fuel, in kilograms.
  ///  Example: /// Example: 2900.1
  ///  Constraints: No constraints specified.
  double get maxDryMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Minimum mass of this bus with fuel, but without payloads, in kilograms.
  ///  Example: /// Example: 5192.1
  ///  Constraints: No constraints specified.
  double get minWetMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Average mass of this bus with fuel, but without payloads, in kilograms.
  ///  Example: /// Example: 5246.1
  ///  Constraints: No constraints specified.
  double get avgWetMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Median mass of this bus with fuel, but without payloads, in kilograms.
  ///  Example: /// Example: 5260.1
  ///  Constraints: No constraints specified.
  double get medianWetMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Maximum mass of this bus with fuel, but without payloads, in kilograms.
  ///  Example: /// Example: 5300.0
  ///  Constraints: No constraints specified.
  double get maxWetMass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Maximum power at beginning of life, lower bounds, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get maxBolpowerLower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Maximum power at beginning of life, upper bounds, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get maxBolpowerUpper => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Maximum power at end of life, lower bounds, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get maxEolpowerLower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Maximum power at end of life, upper bounds, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get maxEolpowerUpper => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Average power available on this bus, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get avgSpacecraftPower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Maximum power available on this bus, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get maxSpacecraftPower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Orbit averaged power (the power averaged over one orbit) available on this bus, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get oapSpacecraftPower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Average power available on this bus for payloads, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get avgPayloadPower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Maximum payload power available, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get maxPayloadPower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Orbit averaged power (the power averaged over one orbit) available on this bus for payloads, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get oapPayloadPower => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Body dimension in X direction pertaining to length, in meters.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get bodyDimensionX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Body dimension in Y direction pertaining to height, in meters.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get bodyDimensionY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Body dimension in Z direction pertaining to width, in meters.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get bodyDimensionZ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  The radial dimension available on this bus for payloads, in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get payloadDimensionX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  The in-track dimension available on this bus for payloads, in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get payloadDimensionY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  The cross-track dimension available on this bus for payloads, in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get payloadDimensionZ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  The volume available on this bus for payloads, in cubic meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get payloadVolume => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  Launch envelope dimension in X direction, in meters.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get launchEnvelopeDimensionX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  Launch envelope dimension in Y direction, in meters.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get launchEnvelopeDimensionY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Launch envelope dimension in Z direction, in meters.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get launchEnvelopeDimensionZ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  The number of orbit types this bus can support.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get numOrbitType => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 80, 0);
  ///  Array of orbit types this bus can support (e.g. GEO, LEO, etc.). Must contain the same number of elements as the value of numOrbitType.
  ///  Example: /// Example: ['LEO', 'HEO', 'GEO']
  ///  Constraints: No constraints specified.
  List<String>? get orbitTypes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 82);
  ///  Unique identifier of the organization which manufactures the telemetry tracking and command subsystem for this bus.
  ///  Example: /// Example: TELEMETRYTRACKINGMANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get telemetryTrackingManufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Unique identifier of the organization which manufactures the main onboard computer for this bus.
  ///  Example: /// Example: MAINCOMPUTERMANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get mainComputerManufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Unique identifier of the organization which manufactures this bus.
  ///  Example: /// Example: MANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get manufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Unique identifier of the organization which designs the bus kit.
  ///  Example: /// Example: BUSKITDESIGNERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get busKitDesignerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  Country where this bus was manufactured. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
  ///  Example: /// Example: Nanosatellite
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get massCategory => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Power category of this bus (e.g. 0-1kW low power, etc).
  ///  Example: /// Example: low power
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get powerCategory => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Boolean indicating if this bus is generic.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get generic => const fb.BoolReader().vTableGet(_bc, _bcOffset, 98, false);
  ///  Notes/description of the bus.
  ///  Example: /// Example: Dedicated small spacecraft bus.
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Attitude and Orbital Control Notes/description for the bus.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get aocsNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  BusIngestDataModeEnum get dataMode => BusIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 110, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 114);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get entity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);

  @override
  String toString() {
    return 'BusIngest{id: ${id}, name: ${name}, classificationMarking: ${classificationMarking}, idEntity: ${idEntity}, type: ${type}, maxLaunchMassLower: ${maxLaunchMassLower}, maxLaunchMassUpper: ${maxLaunchMassUpper}, maxBolstationMass: ${maxBolstationMass}, avgPayloadMass: ${avgPayloadMass}, maxPayloadMass: ${maxPayloadMass}, minDryMass: ${minDryMass}, avgDryMass: ${avgDryMass}, medianDryMass: ${medianDryMass}, maxDryMass: ${maxDryMass}, minWetMass: ${minWetMass}, avgWetMass: ${avgWetMass}, medianWetMass: ${medianWetMass}, maxWetMass: ${maxWetMass}, maxBolpowerLower: ${maxBolpowerLower}, maxBolpowerUpper: ${maxBolpowerUpper}, maxEolpowerLower: ${maxEolpowerLower}, maxEolpowerUpper: ${maxEolpowerUpper}, avgSpacecraftPower: ${avgSpacecraftPower}, maxSpacecraftPower: ${maxSpacecraftPower}, oapSpacecraftPower: ${oapSpacecraftPower}, avgPayloadPower: ${avgPayloadPower}, maxPayloadPower: ${maxPayloadPower}, oapPayloadPower: ${oapPayloadPower}, bodyDimensionX: ${bodyDimensionX}, bodyDimensionY: ${bodyDimensionY}, bodyDimensionZ: ${bodyDimensionZ}, payloadDimensionX: ${payloadDimensionX}, payloadDimensionY: ${payloadDimensionY}, payloadDimensionZ: ${payloadDimensionZ}, payloadVolume: ${payloadVolume}, launchEnvelopeDimensionX: ${launchEnvelopeDimensionX}, launchEnvelopeDimensionY: ${launchEnvelopeDimensionY}, launchEnvelopeDimensionZ: ${launchEnvelopeDimensionZ}, numOrbitType: ${numOrbitType}, orbitTypes: ${orbitTypes}, telemetryTrackingManufacturerOrgId: ${telemetryTrackingManufacturerOrgId}, mainComputerManufacturerOrgId: ${mainComputerManufacturerOrgId}, manufacturerOrgId: ${manufacturerOrgId}, busKitDesignerOrgId: ${busKitDesignerOrgId}, countryCode: ${countryCode}, massCategory: ${massCategory}, powerCategory: ${powerCategory}, generic: ${generic}, description: ${description}, aocsNotes: ${aocsNotes}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, entity: ${entity}}';
  }
}

class _BusIngestReader extends fb.TableReader<BusIngest> {
  const _BusIngestReader();

  @override
  BusIngest createObject(fb.BufferContext bc, int offset) => 
    BusIngest._(bc, offset);
}

class BusIngestBuilder {
  BusIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(57);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdEntityOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMaxLaunchMassLower(double? maxLaunchMassLower) {
    fbBuilder.addFloat64(5, maxLaunchMassLower);
    return fbBuilder.offset;
  }
  int addMaxLaunchMassUpper(double? maxLaunchMassUpper) {
    fbBuilder.addFloat64(6, maxLaunchMassUpper);
    return fbBuilder.offset;
  }
  int addMaxBolstationMass(double? maxBolstationMass) {
    fbBuilder.addFloat64(7, maxBolstationMass);
    return fbBuilder.offset;
  }
  int addAvgPayloadMass(double? avgPayloadMass) {
    fbBuilder.addFloat64(8, avgPayloadMass);
    return fbBuilder.offset;
  }
  int addMaxPayloadMass(double? maxPayloadMass) {
    fbBuilder.addFloat64(9, maxPayloadMass);
    return fbBuilder.offset;
  }
  int addMinDryMass(double? minDryMass) {
    fbBuilder.addFloat64(10, minDryMass);
    return fbBuilder.offset;
  }
  int addAvgDryMass(double? avgDryMass) {
    fbBuilder.addFloat64(11, avgDryMass);
    return fbBuilder.offset;
  }
  int addMedianDryMass(double? medianDryMass) {
    fbBuilder.addFloat64(12, medianDryMass);
    return fbBuilder.offset;
  }
  int addMaxDryMass(double? maxDryMass) {
    fbBuilder.addFloat64(13, maxDryMass);
    return fbBuilder.offset;
  }
  int addMinWetMass(double? minWetMass) {
    fbBuilder.addFloat64(14, minWetMass);
    return fbBuilder.offset;
  }
  int addAvgWetMass(double? avgWetMass) {
    fbBuilder.addFloat64(15, avgWetMass);
    return fbBuilder.offset;
  }
  int addMedianWetMass(double? medianWetMass) {
    fbBuilder.addFloat64(16, medianWetMass);
    return fbBuilder.offset;
  }
  int addMaxWetMass(double? maxWetMass) {
    fbBuilder.addFloat64(17, maxWetMass);
    return fbBuilder.offset;
  }
  int addMaxBolpowerLower(double? maxBolpowerLower) {
    fbBuilder.addFloat64(18, maxBolpowerLower);
    return fbBuilder.offset;
  }
  int addMaxBolpowerUpper(double? maxBolpowerUpper) {
    fbBuilder.addFloat64(19, maxBolpowerUpper);
    return fbBuilder.offset;
  }
  int addMaxEolpowerLower(double? maxEolpowerLower) {
    fbBuilder.addFloat64(20, maxEolpowerLower);
    return fbBuilder.offset;
  }
  int addMaxEolpowerUpper(double? maxEolpowerUpper) {
    fbBuilder.addFloat64(21, maxEolpowerUpper);
    return fbBuilder.offset;
  }
  int addAvgSpacecraftPower(double? avgSpacecraftPower) {
    fbBuilder.addFloat64(22, avgSpacecraftPower);
    return fbBuilder.offset;
  }
  int addMaxSpacecraftPower(double? maxSpacecraftPower) {
    fbBuilder.addFloat64(23, maxSpacecraftPower);
    return fbBuilder.offset;
  }
  int addOapSpacecraftPower(double? oapSpacecraftPower) {
    fbBuilder.addFloat64(24, oapSpacecraftPower);
    return fbBuilder.offset;
  }
  int addAvgPayloadPower(double? avgPayloadPower) {
    fbBuilder.addFloat64(25, avgPayloadPower);
    return fbBuilder.offset;
  }
  int addMaxPayloadPower(double? maxPayloadPower) {
    fbBuilder.addFloat64(26, maxPayloadPower);
    return fbBuilder.offset;
  }
  int addOapPayloadPower(double? oapPayloadPower) {
    fbBuilder.addFloat64(27, oapPayloadPower);
    return fbBuilder.offset;
  }
  int addBodyDimensionX(double? bodyDimensionX) {
    fbBuilder.addFloat64(28, bodyDimensionX);
    return fbBuilder.offset;
  }
  int addBodyDimensionY(double? bodyDimensionY) {
    fbBuilder.addFloat64(29, bodyDimensionY);
    return fbBuilder.offset;
  }
  int addBodyDimensionZ(double? bodyDimensionZ) {
    fbBuilder.addFloat64(30, bodyDimensionZ);
    return fbBuilder.offset;
  }
  int addPayloadDimensionX(double? payloadDimensionX) {
    fbBuilder.addFloat64(31, payloadDimensionX);
    return fbBuilder.offset;
  }
  int addPayloadDimensionY(double? payloadDimensionY) {
    fbBuilder.addFloat64(32, payloadDimensionY);
    return fbBuilder.offset;
  }
  int addPayloadDimensionZ(double? payloadDimensionZ) {
    fbBuilder.addFloat64(33, payloadDimensionZ);
    return fbBuilder.offset;
  }
  int addPayloadVolume(double? payloadVolume) {
    fbBuilder.addFloat64(34, payloadVolume);
    return fbBuilder.offset;
  }
  int addLaunchEnvelopeDimensionX(double? launchEnvelopeDimensionX) {
    fbBuilder.addFloat64(35, launchEnvelopeDimensionX);
    return fbBuilder.offset;
  }
  int addLaunchEnvelopeDimensionY(double? launchEnvelopeDimensionY) {
    fbBuilder.addFloat64(36, launchEnvelopeDimensionY);
    return fbBuilder.offset;
  }
  int addLaunchEnvelopeDimensionZ(double? launchEnvelopeDimensionZ) {
    fbBuilder.addFloat64(37, launchEnvelopeDimensionZ);
    return fbBuilder.offset;
  }
  int addNumOrbitType(int? numOrbitType) {
    fbBuilder.addInt32(38, numOrbitType);
    return fbBuilder.offset;
  }
  int addOrbitTypesOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addTelemetryTrackingManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addMainComputerManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addBusKitDesignerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addMassCategoryOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addPowerCategoryOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addGeneric(bool? generic) {
    fbBuilder.addBool(47, generic);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addAocsNotesOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addDataMode(BusIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(53, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(55, offset);
    return fbBuilder.offset;
  }
  int addEntityOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BusIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _name;
  final String? _classificationMarking;
  final String? _idEntity;
  final String? _type;
  final double? _maxLaunchMassLower;
  final double? _maxLaunchMassUpper;
  final double? _maxBolstationMass;
  final double? _avgPayloadMass;
  final double? _maxPayloadMass;
  final double? _minDryMass;
  final double? _avgDryMass;
  final double? _medianDryMass;
  final double? _maxDryMass;
  final double? _minWetMass;
  final double? _avgWetMass;
  final double? _medianWetMass;
  final double? _maxWetMass;
  final double? _maxBolpowerLower;
  final double? _maxBolpowerUpper;
  final double? _maxEolpowerLower;
  final double? _maxEolpowerUpper;
  final double? _avgSpacecraftPower;
  final double? _maxSpacecraftPower;
  final double? _oapSpacecraftPower;
  final double? _avgPayloadPower;
  final double? _maxPayloadPower;
  final double? _oapPayloadPower;
  final double? _bodyDimensionX;
  final double? _bodyDimensionY;
  final double? _bodyDimensionZ;
  final double? _payloadDimensionX;
  final double? _payloadDimensionY;
  final double? _payloadDimensionZ;
  final double? _payloadVolume;
  final double? _launchEnvelopeDimensionX;
  final double? _launchEnvelopeDimensionY;
  final double? _launchEnvelopeDimensionZ;
  final int? _numOrbitType;
  final List<String>? _orbitTypes;
  final String? _telemetryTrackingManufacturerOrgId;
  final String? _mainComputerManufacturerOrgId;
  final String? _manufacturerOrgId;
  final String? _busKitDesignerOrgId;
  final String? _countryCode;
  final String? _massCategory;
  final String? _powerCategory;
  final bool? _generic;
  final String? _description;
  final String? _aocsNotes;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final BusIngestDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _entity;

  BusIngestObjectBuilder({
    String? id,
    String? name,
    String? classificationMarking,
    String? idEntity,
    String? type,
    double? maxLaunchMassLower,
    double? maxLaunchMassUpper,
    double? maxBolstationMass,
    double? avgPayloadMass,
    double? maxPayloadMass,
    double? minDryMass,
    double? avgDryMass,
    double? medianDryMass,
    double? maxDryMass,
    double? minWetMass,
    double? avgWetMass,
    double? medianWetMass,
    double? maxWetMass,
    double? maxBolpowerLower,
    double? maxBolpowerUpper,
    double? maxEolpowerLower,
    double? maxEolpowerUpper,
    double? avgSpacecraftPower,
    double? maxSpacecraftPower,
    double? oapSpacecraftPower,
    double? avgPayloadPower,
    double? maxPayloadPower,
    double? oapPayloadPower,
    double? bodyDimensionX,
    double? bodyDimensionY,
    double? bodyDimensionZ,
    double? payloadDimensionX,
    double? payloadDimensionY,
    double? payloadDimensionZ,
    double? payloadVolume,
    double? launchEnvelopeDimensionX,
    double? launchEnvelopeDimensionY,
    double? launchEnvelopeDimensionZ,
    int? numOrbitType,
    List<String>? orbitTypes,
    String? telemetryTrackingManufacturerOrgId,
    String? mainComputerManufacturerOrgId,
    String? manufacturerOrgId,
    String? busKitDesignerOrgId,
    String? countryCode,
    String? massCategory,
    String? powerCategory,
    bool? generic,
    String? description,
    String? aocsNotes,
    String? source,
    String? origin,
    String? origNetwork,
    BusIngestDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? entity,
  })
      : _id = id,
        _name = name,
        _classificationMarking = classificationMarking,
        _idEntity = idEntity,
        _type = type,
        _maxLaunchMassLower = maxLaunchMassLower,
        _maxLaunchMassUpper = maxLaunchMassUpper,
        _maxBolstationMass = maxBolstationMass,
        _avgPayloadMass = avgPayloadMass,
        _maxPayloadMass = maxPayloadMass,
        _minDryMass = minDryMass,
        _avgDryMass = avgDryMass,
        _medianDryMass = medianDryMass,
        _maxDryMass = maxDryMass,
        _minWetMass = minWetMass,
        _avgWetMass = avgWetMass,
        _medianWetMass = medianWetMass,
        _maxWetMass = maxWetMass,
        _maxBolpowerLower = maxBolpowerLower,
        _maxBolpowerUpper = maxBolpowerUpper,
        _maxEolpowerLower = maxEolpowerLower,
        _maxEolpowerUpper = maxEolpowerUpper,
        _avgSpacecraftPower = avgSpacecraftPower,
        _maxSpacecraftPower = maxSpacecraftPower,
        _oapSpacecraftPower = oapSpacecraftPower,
        _avgPayloadPower = avgPayloadPower,
        _maxPayloadPower = maxPayloadPower,
        _oapPayloadPower = oapPayloadPower,
        _bodyDimensionX = bodyDimensionX,
        _bodyDimensionY = bodyDimensionY,
        _bodyDimensionZ = bodyDimensionZ,
        _payloadDimensionX = payloadDimensionX,
        _payloadDimensionY = payloadDimensionY,
        _payloadDimensionZ = payloadDimensionZ,
        _payloadVolume = payloadVolume,
        _launchEnvelopeDimensionX = launchEnvelopeDimensionX,
        _launchEnvelopeDimensionY = launchEnvelopeDimensionY,
        _launchEnvelopeDimensionZ = launchEnvelopeDimensionZ,
        _numOrbitType = numOrbitType,
        _orbitTypes = orbitTypes,
        _telemetryTrackingManufacturerOrgId = telemetryTrackingManufacturerOrgId,
        _mainComputerManufacturerOrgId = mainComputerManufacturerOrgId,
        _manufacturerOrgId = manufacturerOrgId,
        _busKitDesignerOrgId = busKitDesignerOrgId,
        _countryCode = countryCode,
        _massCategory = massCategory,
        _powerCategory = powerCategory,
        _generic = generic,
        _description = description,
        _aocsNotes = aocsNotes,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _entity = entity;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idEntityOffset = _idEntity == null ? null
        : fbBuilder.writeString(_idEntity!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? orbitTypesOffset = _orbitTypes == null ? null
        : fbBuilder.writeList(_orbitTypes!.map(fbBuilder.writeString).toList());
    final int? telemetryTrackingManufacturerOrgIdOffset = _telemetryTrackingManufacturerOrgId == null ? null
        : fbBuilder.writeString(_telemetryTrackingManufacturerOrgId!);
    final int? mainComputerManufacturerOrgIdOffset = _mainComputerManufacturerOrgId == null ? null
        : fbBuilder.writeString(_mainComputerManufacturerOrgId!);
    final int? manufacturerOrgIdOffset = _manufacturerOrgId == null ? null
        : fbBuilder.writeString(_manufacturerOrgId!);
    final int? busKitDesignerOrgIdOffset = _busKitDesignerOrgId == null ? null
        : fbBuilder.writeString(_busKitDesignerOrgId!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? massCategoryOffset = _massCategory == null ? null
        : fbBuilder.writeString(_massCategory!);
    final int? powerCategoryOffset = _powerCategory == null ? null
        : fbBuilder.writeString(_powerCategory!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? aocsNotesOffset = _aocsNotes == null ? null
        : fbBuilder.writeString(_aocsNotes!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? entityOffset = _entity == null ? null
        : fbBuilder.writeString(_entity!);
    fbBuilder.startTable(57);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, idEntityOffset);
    fbBuilder.addOffset(4, typeOffset);
    fbBuilder.addFloat64(5, _maxLaunchMassLower);
    fbBuilder.addFloat64(6, _maxLaunchMassUpper);
    fbBuilder.addFloat64(7, _maxBolstationMass);
    fbBuilder.addFloat64(8, _avgPayloadMass);
    fbBuilder.addFloat64(9, _maxPayloadMass);
    fbBuilder.addFloat64(10, _minDryMass);
    fbBuilder.addFloat64(11, _avgDryMass);
    fbBuilder.addFloat64(12, _medianDryMass);
    fbBuilder.addFloat64(13, _maxDryMass);
    fbBuilder.addFloat64(14, _minWetMass);
    fbBuilder.addFloat64(15, _avgWetMass);
    fbBuilder.addFloat64(16, _medianWetMass);
    fbBuilder.addFloat64(17, _maxWetMass);
    fbBuilder.addFloat64(18, _maxBolpowerLower);
    fbBuilder.addFloat64(19, _maxBolpowerUpper);
    fbBuilder.addFloat64(20, _maxEolpowerLower);
    fbBuilder.addFloat64(21, _maxEolpowerUpper);
    fbBuilder.addFloat64(22, _avgSpacecraftPower);
    fbBuilder.addFloat64(23, _maxSpacecraftPower);
    fbBuilder.addFloat64(24, _oapSpacecraftPower);
    fbBuilder.addFloat64(25, _avgPayloadPower);
    fbBuilder.addFloat64(26, _maxPayloadPower);
    fbBuilder.addFloat64(27, _oapPayloadPower);
    fbBuilder.addFloat64(28, _bodyDimensionX);
    fbBuilder.addFloat64(29, _bodyDimensionY);
    fbBuilder.addFloat64(30, _bodyDimensionZ);
    fbBuilder.addFloat64(31, _payloadDimensionX);
    fbBuilder.addFloat64(32, _payloadDimensionY);
    fbBuilder.addFloat64(33, _payloadDimensionZ);
    fbBuilder.addFloat64(34, _payloadVolume);
    fbBuilder.addFloat64(35, _launchEnvelopeDimensionX);
    fbBuilder.addFloat64(36, _launchEnvelopeDimensionY);
    fbBuilder.addFloat64(37, _launchEnvelopeDimensionZ);
    fbBuilder.addInt32(38, _numOrbitType);
    fbBuilder.addOffset(39, orbitTypesOffset);
    fbBuilder.addOffset(40, telemetryTrackingManufacturerOrgIdOffset);
    fbBuilder.addOffset(41, mainComputerManufacturerOrgIdOffset);
    fbBuilder.addOffset(42, manufacturerOrgIdOffset);
    fbBuilder.addOffset(43, busKitDesignerOrgIdOffset);
    fbBuilder.addOffset(44, countryCodeOffset);
    fbBuilder.addOffset(45, massCategoryOffset);
    fbBuilder.addOffset(46, powerCategoryOffset);
    fbBuilder.addBool(47, _generic);
    fbBuilder.addOffset(48, descriptionOffset);
    fbBuilder.addOffset(49, aocsNotesOffset);
    fbBuilder.addOffset(50, sourceOffset);
    fbBuilder.addOffset(51, originOffset);
    fbBuilder.addOffset(52, origNetworkOffset);
    fbBuilder.addInt8(53, _dataMode?.value);
    fbBuilder.addOffset(54, createdAtOffset);
    fbBuilder.addOffset(55, createdByOffset);
    fbBuilder.addOffset(56, entityOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
