// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of diplomatic clearance remarks.
class DiplomaticClearanceRemarksIngest {
  DiplomaticClearanceRemarksIngest._(this._bc, this._bcOffset);
  factory DiplomaticClearanceRemarksIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DiplomaticClearanceRemarksIngest> reader = _DiplomaticClearanceRemarksIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Global Decision Support System (GDSS) remark identifier.
  ///  Example: /// Example: GDSSREMARK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get gdssRemarkId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Text of the remark.
  ///  Example: /// Example: Example mission remarks.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get text => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get date => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  User who published the remark.
  ///  Example: /// Example: John Doe
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get user => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'DiplomaticClearanceRemarksIngest{gdssRemarkId: ${gdssRemarkId}, text: ${text}, date: ${date}, user: ${user}}';
  }
}

class _DiplomaticClearanceRemarksIngestReader extends fb.TableReader<DiplomaticClearanceRemarksIngest> {
  const _DiplomaticClearanceRemarksIngestReader();

  @override
  DiplomaticClearanceRemarksIngest createObject(fb.BufferContext bc, int offset) => 
    DiplomaticClearanceRemarksIngest._(bc, offset);
}

class DiplomaticClearanceRemarksIngestBuilder {
  DiplomaticClearanceRemarksIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addGdssRemarkIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTextOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDateOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addUserOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DiplomaticClearanceRemarksIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _gdssRemarkId;
  final String? _text;
  final String? _date;
  final String? _user;

  DiplomaticClearanceRemarksIngestObjectBuilder({
    String? gdssRemarkId,
    String? text,
    String? date,
    String? user,
  })
      : _gdssRemarkId = gdssRemarkId,
        _text = text,
        _date = date,
        _user = user;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? gdssRemarkIdOffset = _gdssRemarkId == null ? null
        : fbBuilder.writeString(_gdssRemarkId!);
    final int? textOffset = _text == null ? null
        : fbBuilder.writeString(_text!);
    final int? dateOffset = _date == null ? null
        : fbBuilder.writeString(_date!);
    final int? userOffset = _user == null ? null
        : fbBuilder.writeString(_user!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, gdssRemarkIdOffset);
    fbBuilder.addOffset(1, textOffset);
    fbBuilder.addOffset(2, dateOffset);
    fbBuilder.addOffset(3, userOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
