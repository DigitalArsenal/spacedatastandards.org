// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SpaceEnvObservationAbridgedSenReferenceFrameEnum {
  final int value;
  const SpaceEnvObservationAbridgedSenReferenceFrameEnum._(this.value);

  factory SpaceEnvObservationAbridgedSenReferenceFrameEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SpaceEnvObservationAbridgedSenReferenceFrameEnum');
    }
    return result;
  }

  static SpaceEnvObservationAbridgedSenReferenceFrameEnum? _createOrNull(int? value) => 
      value == null ? null : SpaceEnvObservationAbridgedSenReferenceFrameEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SpaceEnvObservationAbridgedSenReferenceFrameEnum J2000 = SpaceEnvObservationAbridgedSenReferenceFrameEnum._(0);

  ///  No description available.
  static const SpaceEnvObservationAbridgedSenReferenceFrameEnum EFG_TDR = SpaceEnvObservationAbridgedSenReferenceFrameEnum._(1);

  ///  No description available.
  static const SpaceEnvObservationAbridgedSenReferenceFrameEnum ECR_ECEF = SpaceEnvObservationAbridgedSenReferenceFrameEnum._(2);

  ///  No description available.
  static const SpaceEnvObservationAbridgedSenReferenceFrameEnum TEME = SpaceEnvObservationAbridgedSenReferenceFrameEnum._(3);

  ///  No description available.
  static const SpaceEnvObservationAbridgedSenReferenceFrameEnum ITRF = SpaceEnvObservationAbridgedSenReferenceFrameEnum._(4);

  ///  No description available.
  static const SpaceEnvObservationAbridgedSenReferenceFrameEnum GCRF = SpaceEnvObservationAbridgedSenReferenceFrameEnum._(5);
  static const Map<int, SpaceEnvObservationAbridgedSenReferenceFrameEnum> values = {
    0: J2000,
    1: EFG_TDR,
    2: ECR_ECEF,
    3: TEME,
    4: ITRF,
    5: GCRF};

  static const fb.Reader<SpaceEnvObservationAbridgedSenReferenceFrameEnum> reader = _SpaceEnvObservationAbridgedSenReferenceFrameEnumReader();

  @override
  String toString() {
    return 'SpaceEnvObservationAbridgedSenReferenceFrameEnum{value: $value}';
  }
}

class _SpaceEnvObservationAbridgedSenReferenceFrameEnumReader extends fb.Reader<SpaceEnvObservationAbridgedSenReferenceFrameEnum> {
  const _SpaceEnvObservationAbridgedSenReferenceFrameEnumReader();

  @override
  int get size => 1;

  @override
  SpaceEnvObservationAbridgedSenReferenceFrameEnum read(fb.BufferContext bc, int offset) =>
      SpaceEnvObservationAbridgedSenReferenceFrameEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SpaceEnvObservationAbridgedDataModeEnum {
  final int value;
  const SpaceEnvObservationAbridgedDataModeEnum._(this.value);

  factory SpaceEnvObservationAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SpaceEnvObservationAbridgedDataModeEnum');
    }
    return result;
  }

  static SpaceEnvObservationAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SpaceEnvObservationAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SpaceEnvObservationAbridgedDataModeEnum REAL = SpaceEnvObservationAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SpaceEnvObservationAbridgedDataModeEnum TEST = SpaceEnvObservationAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SpaceEnvObservationAbridgedDataModeEnum SIMULATED = SpaceEnvObservationAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SpaceEnvObservationAbridgedDataModeEnum EXERCISE = SpaceEnvObservationAbridgedDataModeEnum._(3);
  static const Map<int, SpaceEnvObservationAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SpaceEnvObservationAbridgedDataModeEnum> reader = _SpaceEnvObservationAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'SpaceEnvObservationAbridgedDataModeEnum{value: $value}';
  }
}

class _SpaceEnvObservationAbridgedDataModeEnumReader extends fb.Reader<SpaceEnvObservationAbridgedDataModeEnum> {
  const _SpaceEnvObservationAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SpaceEnvObservationAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      SpaceEnvObservationAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// SpaceEnvObservation data.
class SpaceEnvObservationAbridged {
  SpaceEnvObservationAbridged._(this._bc, this._bcOffset);
  factory SpaceEnvObservationAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SpaceEnvObservationAbridged> reader = _SpaceEnvObservationAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: f13f82b8-5d2a-407a-b3f3-1fe30ca79eae
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The type of message associated with this record.
  ///  Example: /// Example: SODM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get msgType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The external system which generated the message, if applicable.
  ///  Example: /// Example: System Name
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get genSystem => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.
  ///  Example: /// Example: ECP
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get dataType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-02-10T19:48:09.934Z
  ///  Constraints: No constraints specified.
  String? get genTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Flag indicating that this record contains forecast data.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get forecast => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  ///  Flag indicating that this record contains derived data.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get derived => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  ///  Unique identifier of the on-orbit satellite hosting the sensor which produced this data.
  ///  Example: /// Example: 41866
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.
  ///  Example: /// Example: 41866
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 24, 0);
  ///  Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: 41866
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: ECP-1
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ECP-1
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).
  ///  Example: /// Example: ONORBIT
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get observatoryType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The name of the observatory from which this data was collected.
  ///  Example: /// Example: GOES-16
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get observatoryName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Additional notes concerning the observatory.
  ///  Example: /// Example: Notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get observatoryNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).
  ///  Example: /// Example: MAGNETOMETER
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get instrumentType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 38.8339
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -104.8214
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.
  ///  Example: /// Example: 35785.3732
  ///  Constraints: No constraints specified.
  double get alt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  SpaceEnvObservationAbridgedSenReferenceFrameEnum get senReferenceFrame => SpaceEnvObservationAbridgedSenReferenceFrameEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 46, 0));
  ///  Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].
  ///  Example: /// Example: [4174.78541785946, -9969.69867853067, 40733.9284531208]
  ///  Constraints: No constraints specified.
  List<String>? get senPos => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 48);
  ///  Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].
  ///  Example: /// Example: [0.727059797295872, 0.298037087322647, 0.00157064850994095]
  ///  Constraints: No constraints specified.
  List<String>? get senVel => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 50);
  ///  The sensor measurement type of the observation data contained in this record.
  ///  Example: /// Example: ENERGETIC PARTICLES
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get measType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  The energy level bin of the sensor associated with this measurement.
  ///  Example: /// Example: 0500-700 keV
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get senEnergyLevel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.
  ///  Example: /// Example: ECPOBSET-478125
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get obSetId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.
  ///  Example: /// Example: PROTON
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get particleType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Time of the observation, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-06-07T14:17:39.653Z
  ///  Constraints: No constraints specified.
  String? get obTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  A collection of individual space environment observations.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get seoList => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 62);
  ///  The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.
  ///  Example: /// Example: GOOD
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get quality => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Descriptive or additional information associated with this observation record.
  ///  Example: /// Example: Observation Data Description Text
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: energetic charged particle
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get descriptor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['SPACEENVOB', 'SGI']
  ///  Constraints: No constraints specified.
  List<String>? get srcTyps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 70);
  ///  Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.
  ///  Example: /// Example: ['615236d7-d464-4b8c-9b0b-45994e017d80', '8a38e3d6-35fd-4bda-b883-e3724e6bc6b9']
  ///  Constraints: No constraints specified.
  List<String>? get srcIds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 72);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2023-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SpaceEnvObservationAbridgedDataModeEnum get dataMode => SpaceEnvObservationAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 82, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);

  @override
  String toString() {
    return 'SpaceEnvObservationAbridged{id: ${id}, classificationMarking: ${classificationMarking}, msgType: ${msgType}, genSystem: ${genSystem}, externalId: ${externalId}, dataType: ${dataType}, genTime: ${genTime}, forecast: ${forecast}, derived: ${derived}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, observatoryType: ${observatoryType}, observatoryName: ${observatoryName}, observatoryNotes: ${observatoryNotes}, instrumentType: ${instrumentType}, lat: ${lat}, lon: ${lon}, alt: ${alt}, senReferenceFrame: ${senReferenceFrame}, senPos: ${senPos}, senVel: ${senVel}, measType: ${measType}, senEnergyLevel: ${senEnergyLevel}, obSetId: ${obSetId}, particleType: ${particleType}, obTime: ${obTime}, seoList: ${seoList}, quality: ${quality}, description: ${description}, descriptor: ${descriptor}, srcTyps: ${srcTyps}, srcIds: ${srcIds}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _SpaceEnvObservationAbridgedReader extends fb.TableReader<SpaceEnvObservationAbridged> {
  const _SpaceEnvObservationAbridgedReader();

  @override
  SpaceEnvObservationAbridged createObject(fb.BufferContext bc, int offset) => 
    SpaceEnvObservationAbridged._(bc, offset);
}

class SpaceEnvObservationAbridgedBuilder {
  SpaceEnvObservationAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(41);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMsgTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addGenSystemOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addDataTypeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addGenTimeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addForecast(bool? forecast) {
    fbBuilder.addBool(7, forecast);
    return fbBuilder.offset;
  }
  int addDerived(bool? derived) {
    fbBuilder.addBool(8, derived);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(10, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addObservatoryTypeOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addObservatoryNameOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addObservatoryNotesOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addInstrumentTypeOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(18, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(19, lon);
    return fbBuilder.offset;
  }
  int addAlt(double? alt) {
    fbBuilder.addFloat64(20, alt);
    return fbBuilder.offset;
  }
  int addSenReferenceFrame(SpaceEnvObservationAbridgedSenReferenceFrameEnum? senReferenceFrame) {
    fbBuilder.addInt8(21, senReferenceFrame?.value);
    return fbBuilder.offset;
  }
  int addSenPosOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addSenVelOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addMeasTypeOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addSenEnergyLevelOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addObSetIdOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addParticleTypeOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addObTimeOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addSeoListOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addQualityOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addSrcTypsOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addSrcIdsOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SpaceEnvObservationAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(39, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SpaceEnvObservationAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _msgType;
  final String? _genSystem;
  final String? _externalId;
  final String? _dataType;
  final String? _genTime;
  final bool? _forecast;
  final bool? _derived;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final String? _idSensor;
  final String? _origSensorId;
  final String? _observatoryType;
  final String? _observatoryName;
  final String? _observatoryNotes;
  final String? _instrumentType;
  final double? _lat;
  final double? _lon;
  final double? _alt;
  final SpaceEnvObservationAbridgedSenReferenceFrameEnum? _senReferenceFrame;
  final List<String>? _senPos;
  final List<String>? _senVel;
  final String? _measType;
  final String? _senEnergyLevel;
  final String? _obSetId;
  final String? _particleType;
  final String? _obTime;
  final List<String>? _seoList;
  final String? _quality;
  final String? _description;
  final String? _descriptor;
  final List<String>? _srcTyps;
  final List<String>? _srcIds;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final SpaceEnvObservationAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;

  SpaceEnvObservationAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? msgType,
    String? genSystem,
    String? externalId,
    String? dataType,
    String? genTime,
    bool? forecast,
    bool? derived,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    String? idSensor,
    String? origSensorId,
    String? observatoryType,
    String? observatoryName,
    String? observatoryNotes,
    String? instrumentType,
    double? lat,
    double? lon,
    double? alt,
    SpaceEnvObservationAbridgedSenReferenceFrameEnum? senReferenceFrame,
    List<String>? senPos,
    List<String>? senVel,
    String? measType,
    String? senEnergyLevel,
    String? obSetId,
    String? particleType,
    String? obTime,
    List<String>? seoList,
    String? quality,
    String? description,
    String? descriptor,
    List<String>? srcTyps,
    List<String>? srcIds,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    SpaceEnvObservationAbridgedDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _msgType = msgType,
        _genSystem = genSystem,
        _externalId = externalId,
        _dataType = dataType,
        _genTime = genTime,
        _forecast = forecast,
        _derived = derived,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _observatoryType = observatoryType,
        _observatoryName = observatoryName,
        _observatoryNotes = observatoryNotes,
        _instrumentType = instrumentType,
        _lat = lat,
        _lon = lon,
        _alt = alt,
        _senReferenceFrame = senReferenceFrame,
        _senPos = senPos,
        _senVel = senVel,
        _measType = measType,
        _senEnergyLevel = senEnergyLevel,
        _obSetId = obSetId,
        _particleType = particleType,
        _obTime = obTime,
        _seoList = seoList,
        _quality = quality,
        _description = description,
        _descriptor = descriptor,
        _srcTyps = srcTyps,
        _srcIds = srcIds,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? msgTypeOffset = _msgType == null ? null
        : fbBuilder.writeString(_msgType!);
    final int? genSystemOffset = _genSystem == null ? null
        : fbBuilder.writeString(_genSystem!);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    final int? dataTypeOffset = _dataType == null ? null
        : fbBuilder.writeString(_dataType!);
    final int? genTimeOffset = _genTime == null ? null
        : fbBuilder.writeString(_genTime!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? observatoryTypeOffset = _observatoryType == null ? null
        : fbBuilder.writeString(_observatoryType!);
    final int? observatoryNameOffset = _observatoryName == null ? null
        : fbBuilder.writeString(_observatoryName!);
    final int? observatoryNotesOffset = _observatoryNotes == null ? null
        : fbBuilder.writeString(_observatoryNotes!);
    final int? instrumentTypeOffset = _instrumentType == null ? null
        : fbBuilder.writeString(_instrumentType!);
    final int? senPosOffset = _senPos == null ? null
        : fbBuilder.writeList(_senPos!.map(fbBuilder.writeString).toList());
    final int? senVelOffset = _senVel == null ? null
        : fbBuilder.writeList(_senVel!.map(fbBuilder.writeString).toList());
    final int? measTypeOffset = _measType == null ? null
        : fbBuilder.writeString(_measType!);
    final int? senEnergyLevelOffset = _senEnergyLevel == null ? null
        : fbBuilder.writeString(_senEnergyLevel!);
    final int? obSetIdOffset = _obSetId == null ? null
        : fbBuilder.writeString(_obSetId!);
    final int? particleTypeOffset = _particleType == null ? null
        : fbBuilder.writeString(_particleType!);
    final int? obTimeOffset = _obTime == null ? null
        : fbBuilder.writeString(_obTime!);
    final int? seoListOffset = _seoList == null ? null
        : fbBuilder.writeList(_seoList!.map(fbBuilder.writeString).toList());
    final int? qualityOffset = _quality == null ? null
        : fbBuilder.writeString(_quality!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? descriptorOffset = _descriptor == null ? null
        : fbBuilder.writeString(_descriptor!);
    final int? srcTypsOffset = _srcTyps == null ? null
        : fbBuilder.writeList(_srcTyps!.map(fbBuilder.writeString).toList());
    final int? srcIdsOffset = _srcIds == null ? null
        : fbBuilder.writeList(_srcIds!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(41);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, msgTypeOffset);
    fbBuilder.addOffset(3, genSystemOffset);
    fbBuilder.addOffset(4, externalIdOffset);
    fbBuilder.addOffset(5, dataTypeOffset);
    fbBuilder.addOffset(6, genTimeOffset);
    fbBuilder.addBool(7, _forecast);
    fbBuilder.addBool(8, _derived);
    fbBuilder.addOffset(9, idOnOrbitOffset);
    fbBuilder.addInt32(10, _satNo);
    fbBuilder.addOffset(11, origObjectIdOffset);
    fbBuilder.addOffset(12, idSensorOffset);
    fbBuilder.addOffset(13, origSensorIdOffset);
    fbBuilder.addOffset(14, observatoryTypeOffset);
    fbBuilder.addOffset(15, observatoryNameOffset);
    fbBuilder.addOffset(16, observatoryNotesOffset);
    fbBuilder.addOffset(17, instrumentTypeOffset);
    fbBuilder.addFloat64(18, _lat);
    fbBuilder.addFloat64(19, _lon);
    fbBuilder.addFloat64(20, _alt);
    fbBuilder.addInt8(21, _senReferenceFrame?.value);
    fbBuilder.addOffset(22, senPosOffset);
    fbBuilder.addOffset(23, senVelOffset);
    fbBuilder.addOffset(24, measTypeOffset);
    fbBuilder.addOffset(25, senEnergyLevelOffset);
    fbBuilder.addOffset(26, obSetIdOffset);
    fbBuilder.addOffset(27, particleTypeOffset);
    fbBuilder.addOffset(28, obTimeOffset);
    fbBuilder.addOffset(29, seoListOffset);
    fbBuilder.addOffset(30, qualityOffset);
    fbBuilder.addOffset(31, descriptionOffset);
    fbBuilder.addOffset(32, descriptorOffset);
    fbBuilder.addOffset(33, srcTypsOffset);
    fbBuilder.addOffset(34, srcIdsOffset);
    fbBuilder.addOffset(35, createdAtOffset);
    fbBuilder.addOffset(36, createdByOffset);
    fbBuilder.addOffset(37, sourceOffset);
    fbBuilder.addOffset(38, originOffset);
    fbBuilder.addInt8(39, _dataMode?.value);
    fbBuilder.addOffset(40, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
