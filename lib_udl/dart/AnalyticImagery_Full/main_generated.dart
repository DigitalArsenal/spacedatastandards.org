// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AnalyticImageryFullDataModeEnum {
  final int value;
  const AnalyticImageryFullDataModeEnum._(this.value);

  factory AnalyticImageryFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AnalyticImageryFullDataModeEnum');
    }
    return result;
  }

  static AnalyticImageryFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AnalyticImageryFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const AnalyticImageryFullDataModeEnum REAL = AnalyticImageryFullDataModeEnum._(0);

  ///  No description available.
  static const AnalyticImageryFullDataModeEnum TEST = AnalyticImageryFullDataModeEnum._(1);

  ///  No description available.
  static const AnalyticImageryFullDataModeEnum SIMULATED = AnalyticImageryFullDataModeEnum._(2);

  ///  No description available.
  static const AnalyticImageryFullDataModeEnum EXERCISE = AnalyticImageryFullDataModeEnum._(3);
  static const Map<int, AnalyticImageryFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AnalyticImageryFullDataModeEnum> reader = _AnalyticImageryFullDataModeEnumReader();

  @override
  String toString() {
    return 'AnalyticImageryFullDataModeEnum{value: $value}';
  }
}

class _AnalyticImageryFullDataModeEnumReader extends fb.Reader<AnalyticImageryFullDataModeEnum> {
  const _AnalyticImageryFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AnalyticImageryFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      AnalyticImageryFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// The analytic imagery schema supports data plots and graphics of various types. The records contain general file information, allows for annotations to user-defined areas of interest on the graphics, and supports keyword searching.
class AnalyticImageryFull {
  AnalyticImageryFull._(this._bc, this._bcOffset);
  factory AnalyticImageryFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AnalyticImageryFull> reader = _AnalyticImageryFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ANALYTIC-IMAGERY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  General type of content of this image (CONTOUR, DIAGRAM, HEATMAP, HISTOGRAM, PLOT, SCREENSHOT).
  ///  Example: /// Example: CONTOUR
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get content => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The message time of this image record, in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get msgTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The type of image associated with this record (GIF, JPG, PNG, TIF).
  ///  Example: /// Example: JPG
  ///  Constraints: Minimum length = 1, Maximum length = 16
  String? get imageType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The image file name.
  ///  Example: /// Example: IMAGE-NAME
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get filename => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The image file size, in bytes.  The maximum file size for this service is 40,000,000 bytes (40MB). Files exceeding the maximum size will be rejected.
  ///  Example: /// Example: 7654321
  ///  Constraints: No constraints specified.
  int get filesize => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  The image width (horizontal), in pixels.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get imgWidth => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  The image height (vertical), in pixels.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get imgHeight => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  ///  Optional field indicating the units that apply to the x-axis of the attached image, when applicable.
  ///  Example: /// Example: pixels
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get xUnits => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Optional field indicating the units that apply to the y-axis of the attached image, when applicable.
  ///  Example: /// Example: pixels
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get yUnits => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Optional field indicating the units that apply to the z-axis of the attached image, when applicable.
  ///  Example: /// Example: pixels
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get zUnits => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  User-defined set ID of a sequence of images.  Used to associate related analytic image records.
  ///  Example: /// Example: IMAGE-IDS
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get imageSetId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The number of images in an image set.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get imageSetLength => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 30, 0);
  ///  The sequence number of an image within an image set.  If null, then it is assumed that the order of images in an imageSet is not relevant.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  int get sequenceId => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Description of the image content and utility.
  ///  Example: /// Example: Image description
  ///  Constraints: Minimum length = 1, Maximum length = 512
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The start time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get dataStart => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The stop time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get dataStop => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Rectangular annotation limits, specified in pixels, as an array of arrays of the coordinates [ [UL1x, UL1y], [UR1x, UR1y], [LR1x, LR1y], [LL1x, LL1y] ], indicating the corners of a rectangle beginning with the Upper Left (UL) and moving clockwise. Allows the image provider to highlight one or more rectangular area(s) of interest. The array must contain Nx4 two-element arrays, where N is the number of rectangles of interest.  The associated annotation(s) should be included in the annText array.
  ///  Example: /// Example: [[1, 1], [1, 2], [1, 3], [1, 4]]
  ///  Constraints: No constraints specified.
  List<String>? get annLims => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 40);
  ///  Annotation text, a string array of annotation(s) corresponding to the rectangular areas specified in annLims.  This array contains the annotation text associated with the areas of interest indicated in annLims, in order.  This array should contain one annotation per four values of the area (annLims) array.
  ///  Example: /// Example: ['rec1', 'rec2']
  ///  Constraints: No constraints specified.
  List<String>? get annText => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  Array of searchable keywords for this analytic imagery record.
  ///  Example: /// Example: ['Key1', 'Key2']
  ///  Constraints: No constraints specified.
  List<String>? get keywords => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);
  ///  Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  String? get area => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  String? get atext => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: No constraints specified.
  String? get agjson => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Type of region as projected on the ground.
  ///  Example: /// Example: POLYGON
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get atype => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get andims => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 4326
  ///  Constraints: No constraints specified.
  int get asrid => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  Assessed satellite ID (NORAD RSO object number).  The 'satId' and 'satIdConf' arrays must match in size.
  ///  Example: /// Example: [12004, 12005]
  ///  Constraints: No constraints specified.
  List<String>? get satId => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 58);
  ///  Assessed satellite confidence corresponding to an assessment ID.  Values are between 0.0 and 1.0.  The 'satId' and 'satIdConf' arrays must match in size.
  ///  Example: /// Example: [0.98, 0.22]
  ///  Constraints: No constraints specified.
  List<String>? get satIdConf => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 60);
  ///  Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this image. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['MTI', 'POI']
  ///  Constraints: No constraints specified.
  List<String>? get srcTyps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 62);
  ///  Array of UUIDs of the UDL data records that are related to this image. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  ///  Example: /// Example: ['DOA_ID', 'DWELL_ID']
  ///  Constraints: No constraints specified.
  List<String>? get srcIds => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 64);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 66);
  ///  MD5 checksum value of the file. The ingest/create operation will automatically generate the value.
  ///  Example: /// Example: 123
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get checksumValue => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: ORIGIN
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: TST1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AnalyticImageryFullDataModeEnum get dataMode => AnalyticImageryFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 84, 0));

  @override
  String toString() {
    return 'AnalyticImageryFull{id: ${id}, classificationMarking: ${classificationMarking}, content: ${content}, msgTime: ${msgTime}, imageType: ${imageType}, filename: ${filename}, filesize: ${filesize}, imgWidth: ${imgWidth}, imgHeight: ${imgHeight}, xUnits: ${xUnits}, yUnits: ${yUnits}, zUnits: ${zUnits}, imageSetId: ${imageSetId}, imageSetLength: ${imageSetLength}, sequenceId: ${sequenceId}, description: ${description}, dataStart: ${dataStart}, dataStop: ${dataStop}, annLims: ${annLims}, annText: ${annText}, keywords: ${keywords}, area: ${area}, atext: ${atext}, agjson: ${agjson}, atype: ${atype}, andims: ${andims}, asrid: ${asrid}, satId: ${satId}, satIdConf: ${satIdConf}, srcTyps: ${srcTyps}, srcIds: ${srcIds}, tags: ${tags}, checksumValue: ${checksumValue}, transactionId: ${transactionId}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, sourceDl: ${sourceDl}, dataMode: ${dataMode}}';
  }
}

class _AnalyticImageryFullReader extends fb.TableReader<AnalyticImageryFull> {
  const _AnalyticImageryFullReader();

  @override
  AnalyticImageryFull createObject(fb.BufferContext bc, int offset) => 
    AnalyticImageryFull._(bc, offset);
}

class AnalyticImageryFullBuilder {
  AnalyticImageryFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(41);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addContentOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMsgTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addImageTypeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addFilenameOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addFilesize(int? filesize) {
    fbBuilder.addInt64(6, filesize);
    return fbBuilder.offset;
  }
  int addImgWidth(int? imgWidth) {
    fbBuilder.addInt32(7, imgWidth);
    return fbBuilder.offset;
  }
  int addImgHeight(int? imgHeight) {
    fbBuilder.addInt32(8, imgHeight);
    return fbBuilder.offset;
  }
  int addXUnitsOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addYUnitsOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addZUnitsOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addImageSetIdOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addImageSetLength(int? imageSetLength) {
    fbBuilder.addInt32(13, imageSetLength);
    return fbBuilder.offset;
  }
  int addSequenceId(int? sequenceId) {
    fbBuilder.addInt32(14, sequenceId);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addDataStartOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addDataStopOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addAnnLimsOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addAnnTextOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addKeywordsOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addAreaOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addAtextOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addAgjsonOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addAtypeOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addAndims(int? andims) {
    fbBuilder.addInt32(25, andims);
    return fbBuilder.offset;
  }
  int addAsrid(int? asrid) {
    fbBuilder.addInt32(26, asrid);
    return fbBuilder.offset;
  }
  int addSatIdOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addSatIdConfOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addSrcTypsOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addSrcIdsOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addChecksumValueOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AnalyticImageryFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(40, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AnalyticImageryFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _content;
  final String? _msgTime;
  final String? _imageType;
  final String? _filename;
  final int? _filesize;
  final int? _imgWidth;
  final int? _imgHeight;
  final String? _xUnits;
  final String? _yUnits;
  final String? _zUnits;
  final String? _imageSetId;
  final int? _imageSetLength;
  final int? _sequenceId;
  final String? _description;
  final String? _dataStart;
  final String? _dataStop;
  final List<String>? _annLims;
  final List<String>? _annText;
  final List<String>? _keywords;
  final String? _area;
  final String? _atext;
  final String? _agjson;
  final String? _atype;
  final int? _andims;
  final int? _asrid;
  final List<String>? _satId;
  final List<String>? _satIdConf;
  final List<String>? _srcTyps;
  final List<String>? _srcIds;
  final List<String>? _tags;
  final String? _checksumValue;
  final String? _transactionId;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final String? _sourceDl;
  final AnalyticImageryFullDataModeEnum? _dataMode;

  AnalyticImageryFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? content,
    String? msgTime,
    String? imageType,
    String? filename,
    int? filesize,
    int? imgWidth,
    int? imgHeight,
    String? xUnits,
    String? yUnits,
    String? zUnits,
    String? imageSetId,
    int? imageSetLength,
    int? sequenceId,
    String? description,
    String? dataStart,
    String? dataStop,
    List<String>? annLims,
    List<String>? annText,
    List<String>? keywords,
    String? area,
    String? atext,
    String? agjson,
    String? atype,
    int? andims,
    int? asrid,
    List<String>? satId,
    List<String>? satIdConf,
    List<String>? srcTyps,
    List<String>? srcIds,
    List<String>? tags,
    String? checksumValue,
    String? transactionId,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    String? sourceDl,
    AnalyticImageryFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _content = content,
        _msgTime = msgTime,
        _imageType = imageType,
        _filename = filename,
        _filesize = filesize,
        _imgWidth = imgWidth,
        _imgHeight = imgHeight,
        _xUnits = xUnits,
        _yUnits = yUnits,
        _zUnits = zUnits,
        _imageSetId = imageSetId,
        _imageSetLength = imageSetLength,
        _sequenceId = sequenceId,
        _description = description,
        _dataStart = dataStart,
        _dataStop = dataStop,
        _annLims = annLims,
        _annText = annText,
        _keywords = keywords,
        _area = area,
        _atext = atext,
        _agjson = agjson,
        _atype = atype,
        _andims = andims,
        _asrid = asrid,
        _satId = satId,
        _satIdConf = satIdConf,
        _srcTyps = srcTyps,
        _srcIds = srcIds,
        _tags = tags,
        _checksumValue = checksumValue,
        _transactionId = transactionId,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _sourceDl = sourceDl,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? contentOffset = _content == null ? null
        : fbBuilder.writeString(_content!);
    final int? msgTimeOffset = _msgTime == null ? null
        : fbBuilder.writeString(_msgTime!);
    final int? imageTypeOffset = _imageType == null ? null
        : fbBuilder.writeString(_imageType!);
    final int? filenameOffset = _filename == null ? null
        : fbBuilder.writeString(_filename!);
    final int? xUnitsOffset = _xUnits == null ? null
        : fbBuilder.writeString(_xUnits!);
    final int? yUnitsOffset = _yUnits == null ? null
        : fbBuilder.writeString(_yUnits!);
    final int? zUnitsOffset = _zUnits == null ? null
        : fbBuilder.writeString(_zUnits!);
    final int? imageSetIdOffset = _imageSetId == null ? null
        : fbBuilder.writeString(_imageSetId!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? dataStartOffset = _dataStart == null ? null
        : fbBuilder.writeString(_dataStart!);
    final int? dataStopOffset = _dataStop == null ? null
        : fbBuilder.writeString(_dataStop!);
    final int? annLimsOffset = _annLims == null ? null
        : fbBuilder.writeList(_annLims!.map(fbBuilder.writeString).toList());
    final int? annTextOffset = _annText == null ? null
        : fbBuilder.writeList(_annText!.map(fbBuilder.writeString).toList());
    final int? keywordsOffset = _keywords == null ? null
        : fbBuilder.writeList(_keywords!.map(fbBuilder.writeString).toList());
    final int? areaOffset = _area == null ? null
        : fbBuilder.writeString(_area!);
    final int? atextOffset = _atext == null ? null
        : fbBuilder.writeString(_atext!);
    final int? agjsonOffset = _agjson == null ? null
        : fbBuilder.writeString(_agjson!);
    final int? atypeOffset = _atype == null ? null
        : fbBuilder.writeString(_atype!);
    final int? satIdOffset = _satId == null ? null
        : fbBuilder.writeList(_satId!.map(fbBuilder.writeString).toList());
    final int? satIdConfOffset = _satIdConf == null ? null
        : fbBuilder.writeList(_satIdConf!.map(fbBuilder.writeString).toList());
    final int? srcTypsOffset = _srcTyps == null ? null
        : fbBuilder.writeList(_srcTyps!.map(fbBuilder.writeString).toList());
    final int? srcIdsOffset = _srcIds == null ? null
        : fbBuilder.writeList(_srcIds!.map(fbBuilder.writeString).toList());
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? checksumValueOffset = _checksumValue == null ? null
        : fbBuilder.writeString(_checksumValue!);
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    fbBuilder.startTable(41);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, contentOffset);
    fbBuilder.addOffset(3, msgTimeOffset);
    fbBuilder.addOffset(4, imageTypeOffset);
    fbBuilder.addOffset(5, filenameOffset);
    fbBuilder.addInt64(6, _filesize);
    fbBuilder.addInt32(7, _imgWidth);
    fbBuilder.addInt32(8, _imgHeight);
    fbBuilder.addOffset(9, xUnitsOffset);
    fbBuilder.addOffset(10, yUnitsOffset);
    fbBuilder.addOffset(11, zUnitsOffset);
    fbBuilder.addOffset(12, imageSetIdOffset);
    fbBuilder.addInt32(13, _imageSetLength);
    fbBuilder.addInt32(14, _sequenceId);
    fbBuilder.addOffset(15, descriptionOffset);
    fbBuilder.addOffset(16, dataStartOffset);
    fbBuilder.addOffset(17, dataStopOffset);
    fbBuilder.addOffset(18, annLimsOffset);
    fbBuilder.addOffset(19, annTextOffset);
    fbBuilder.addOffset(20, keywordsOffset);
    fbBuilder.addOffset(21, areaOffset);
    fbBuilder.addOffset(22, atextOffset);
    fbBuilder.addOffset(23, agjsonOffset);
    fbBuilder.addOffset(24, atypeOffset);
    fbBuilder.addInt32(25, _andims);
    fbBuilder.addInt32(26, _asrid);
    fbBuilder.addOffset(27, satIdOffset);
    fbBuilder.addOffset(28, satIdConfOffset);
    fbBuilder.addOffset(29, srcTypsOffset);
    fbBuilder.addOffset(30, srcIdsOffset);
    fbBuilder.addOffset(31, tagsOffset);
    fbBuilder.addOffset(32, checksumValueOffset);
    fbBuilder.addOffset(33, transactionIdOffset);
    fbBuilder.addOffset(34, createdAtOffset);
    fbBuilder.addOffset(35, createdByOffset);
    fbBuilder.addOffset(36, sourceOffset);
    fbBuilder.addOffset(37, originOffset);
    fbBuilder.addOffset(38, origNetworkOffset);
    fbBuilder.addOffset(39, sourceDlOffset);
    fbBuilder.addInt8(40, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
