// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class NotificationAbridgedDataModeEnum {
  final int value;
  const NotificationAbridgedDataModeEnum._(this.value);

  factory NotificationAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum NotificationAbridgedDataModeEnum');
    }
    return result;
  }

  static NotificationAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : NotificationAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const NotificationAbridgedDataModeEnum REAL = NotificationAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const NotificationAbridgedDataModeEnum TEST = NotificationAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const NotificationAbridgedDataModeEnum SIMULATED = NotificationAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const NotificationAbridgedDataModeEnum EXERCISE = NotificationAbridgedDataModeEnum._(3);
  static const Map<int, NotificationAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<NotificationAbridgedDataModeEnum> reader = _NotificationAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'NotificationAbridgedDataModeEnum{value: $value}';
  }
}

class _NotificationAbridgedDataModeEnumReader extends fb.Reader<NotificationAbridgedDataModeEnum> {
  const _NotificationAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  NotificationAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      NotificationAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of client generated notification data.  Contains a message type and message body field to store notification information.
class NotificationAbridged {
  NotificationAbridged._(this._bc, this._bcOffset);
  factory NotificationAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NotificationAbridged> reader = _NotificationAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: NOTIFICATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Source provided message type.
  ///  Example: /// Example: msgType
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get msgType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The message body content as a text string, XML, JSON, etc. If JSON is used for the msgBody, it should be 'inline' with the notification message JSON (without quotation marks or escape characters). Size of the msg body cannot be over 1MB.
  ///  Example: /// Example: msgBody
  ///  Constraints: Minimum length = 1, Maximum length = 1000000
  String? get msgBody => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  NotificationAbridgedDataModeEnum get dataMode => NotificationAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 12, 0));
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Optional array of provider/source specific tags for this data, used for implementing data owner conditional access controls to restrict access to the data.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);
  ///  The date and time the notification was created, auto-generated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The user that created the notification.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);

  @override
  String toString() {
    return 'NotificationAbridged{id: ${id}, classificationMarking: ${classificationMarking}, msgType: ${msgType}, msgBody: ${msgBody}, dataMode: ${dataMode}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, tags: ${tags}, createdAt: ${createdAt}, createdBy: ${createdBy}, origNetwork: ${origNetwork}}';
  }
}

class _NotificationAbridgedReader extends fb.TableReader<NotificationAbridged> {
  const _NotificationAbridgedReader();

  @override
  NotificationAbridged createObject(fb.BufferContext bc, int offset) => 
    NotificationAbridged._(bc, offset);
}

class NotificationAbridgedBuilder {
  NotificationAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMsgTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMsgBodyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDataMode(NotificationAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(4, dataMode?.value);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NotificationAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _msgType;
  final String? _msgBody;
  final NotificationAbridgedDataModeEnum? _dataMode;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final List<String>? _tags;
  final String? _createdAt;
  final String? _createdBy;
  final String? _origNetwork;

  NotificationAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? msgType,
    String? msgBody,
    NotificationAbridgedDataModeEnum? dataMode,
    String? sourceDl,
    String? source,
    String? origin,
    List<String>? tags,
    String? createdAt,
    String? createdBy,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _msgType = msgType,
        _msgBody = msgBody,
        _dataMode = dataMode,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _tags = tags,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? msgTypeOffset = _msgType == null ? null
        : fbBuilder.writeString(_msgType!);
    final int? msgBodyOffset = _msgBody == null ? null
        : fbBuilder.writeString(_msgBody!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(12);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, msgTypeOffset);
    fbBuilder.addOffset(3, msgBodyOffset);
    fbBuilder.addInt8(4, _dataMode?.value);
    fbBuilder.addOffset(5, sourceDlOffset);
    fbBuilder.addOffset(6, sourceOffset);
    fbBuilder.addOffset(7, originOffset);
    fbBuilder.addOffset(8, tagsOffset);
    fbBuilder.addOffset(9, createdAtOffset);
    fbBuilder.addOffset(10, createdByOffset);
    fbBuilder.addOffset(11, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
