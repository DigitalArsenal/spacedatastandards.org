// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Array to support sparse data collections.
class IonoObservationDatumIngest {
  IonoObservationDatumIngest._(this._bc, this._bcOffset);
  factory IonoObservationDatumIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IonoObservationDatumIngest> reader = _IonoObservationDatumIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Notes for the datum with details of what the data is, units, etc.
  ///  Example: /// Example: NOTES
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Array to support sparse data collections.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  List<String>? get data => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'IonoObservationDatumIngest{notes: ${notes}, data: ${data}}';
  }
}

class _IonoObservationDatumIngestReader extends fb.TableReader<IonoObservationDatumIngest> {
  const _IonoObservationDatumIngestReader();

  @override
  IonoObservationDatumIngest createObject(fb.BufferContext bc, int offset) => 
    IonoObservationDatumIngest._(bc, offset);
}

class IonoObservationDatumIngestBuilder {
  IonoObservationDatumIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IonoObservationDatumIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _notes;
  final List<String>? _data;

  IonoObservationDatumIngestObjectBuilder({
    String? notes,
    List<String>? data,
  })
      : _notes = notes,
        _data = data;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeList(_data!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, notesOffset);
    fbBuilder.addOffset(1, dataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
