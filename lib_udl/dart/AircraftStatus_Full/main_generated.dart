// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AircraftStatusFullAirToAirStatusEnum {
  final int value;
  const AircraftStatusFullAirToAirStatusEnum._(this.value);

  factory AircraftStatusFullAirToAirStatusEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AircraftStatusFullAirToAirStatusEnum');
    }
    return result;
  }

  static AircraftStatusFullAirToAirStatusEnum? _createOrNull(int? value) => 
      value == null ? null : AircraftStatusFullAirToAirStatusEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const AircraftStatusFullAirToAirStatusEnum OPERATIONAL = AircraftStatusFullAirToAirStatusEnum._(0);

  ///  No description available.
  static const AircraftStatusFullAirToAirStatusEnum NON_OPERATIONAL = AircraftStatusFullAirToAirStatusEnum._(1);

  ///  No description available.
  static const AircraftStatusFullAirToAirStatusEnum OFF = AircraftStatusFullAirToAirStatusEnum._(2);
  static const Map<int, AircraftStatusFullAirToAirStatusEnum> values = {
    0: OPERATIONAL,
    1: NON_OPERATIONAL,
    2: OFF};

  static const fb.Reader<AircraftStatusFullAirToAirStatusEnum> reader = _AircraftStatusFullAirToAirStatusEnumReader();

  @override
  String toString() {
    return 'AircraftStatusFullAirToAirStatusEnum{value: $value}';
  }
}

class _AircraftStatusFullAirToAirStatusEnumReader extends fb.Reader<AircraftStatusFullAirToAirStatusEnum> {
  const _AircraftStatusFullAirToAirStatusEnumReader();

  @override
  int get size => 1;

  @override
  AircraftStatusFullAirToAirStatusEnum read(fb.BufferContext bc, int offset) =>
      AircraftStatusFullAirToAirStatusEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class AircraftStatusFullAirToGroundStatusEnum {
  final int value;
  const AircraftStatusFullAirToGroundStatusEnum._(this.value);

  factory AircraftStatusFullAirToGroundStatusEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AircraftStatusFullAirToGroundStatusEnum');
    }
    return result;
  }

  static AircraftStatusFullAirToGroundStatusEnum? _createOrNull(int? value) => 
      value == null ? null : AircraftStatusFullAirToGroundStatusEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const AircraftStatusFullAirToGroundStatusEnum OPERATIONAL = AircraftStatusFullAirToGroundStatusEnum._(0);

  ///  No description available.
  static const AircraftStatusFullAirToGroundStatusEnum NON_OPERATIONAL = AircraftStatusFullAirToGroundStatusEnum._(1);

  ///  No description available.
  static const AircraftStatusFullAirToGroundStatusEnum OFF = AircraftStatusFullAirToGroundStatusEnum._(2);
  static const Map<int, AircraftStatusFullAirToGroundStatusEnum> values = {
    0: OPERATIONAL,
    1: NON_OPERATIONAL,
    2: OFF};

  static const fb.Reader<AircraftStatusFullAirToGroundStatusEnum> reader = _AircraftStatusFullAirToGroundStatusEnumReader();

  @override
  String toString() {
    return 'AircraftStatusFullAirToGroundStatusEnum{value: $value}';
  }
}

class _AircraftStatusFullAirToGroundStatusEnumReader extends fb.Reader<AircraftStatusFullAirToGroundStatusEnum> {
  const _AircraftStatusFullAirToGroundStatusEnumReader();

  @override
  int get size => 1;

  @override
  AircraftStatusFullAirToGroundStatusEnum read(fb.BufferContext bc, int offset) =>
      AircraftStatusFullAirToGroundStatusEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class AircraftStatusFullDataModeEnum {
  final int value;
  const AircraftStatusFullDataModeEnum._(this.value);

  factory AircraftStatusFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AircraftStatusFullDataModeEnum');
    }
    return result;
  }

  static AircraftStatusFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AircraftStatusFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AircraftStatusFullDataModeEnum REAL = AircraftStatusFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AircraftStatusFullDataModeEnum TEST = AircraftStatusFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AircraftStatusFullDataModeEnum SIMULATED = AircraftStatusFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AircraftStatusFullDataModeEnum EXERCISE = AircraftStatusFullDataModeEnum._(3);
  static const Map<int, AircraftStatusFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AircraftStatusFullDataModeEnum> reader = _AircraftStatusFullDataModeEnumReader();

  @override
  String toString() {
    return 'AircraftStatusFullDataModeEnum{value: $value}';
  }
}

class _AircraftStatusFullDataModeEnumReader extends fb.Reader<AircraftStatusFullDataModeEnum> {
  const _AircraftStatusFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AircraftStatusFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      AircraftStatusFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Aircraft readiness and status data. Contains the dynamic data associated with the specific aircraft status, either in-flight or on-ground, including remaining fuel, mission readiness, and inventory, etc.
class AircraftStatusFull {
  AircraftStatusFull._(this._bc, this._bcOffset);
  factory AircraftStatusFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AircraftStatusFull> reader = _AircraftStatusFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the aircraft.
  ///  Example: /// Example: 29232269-e4c2-45c9-aa21-039a33209340
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idAircraft => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Alternate Aircraft Identifier provided by source.
  ///  Example: /// Example: ORIG-AIRCRAFT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get altAircraftId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
  ///  Example: /// Example: AVAILABLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get currentState => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  If not airborne, the unique identifier of the installation currently hosting the aircraft.
  ///  Example: /// Example: b89430e3-97d9-408c-9c89-fd3840c4b84d
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idAirfield => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  US Air Force geographic location code of the airfield where the aircraft is located.
  ///  Example: /// Example: AJJY
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get geoLoc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The International Civil Aviation Organization (ICAO) code at which this aircraft was previously located.
  ///  Example: /// Example: EGLL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get previousIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The International Civil Aviation Organization (ICAO) code at which this aircraft is currently located or has most recently departed, if airborne.
  ///  Example: /// Example: KCHS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get currentIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The International Civil Aviation Organization (ICAO) code of the next destination of this aircraft.
  ///  Example: /// Example: PHNL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get nextIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
  ///  Example: /// Example: Landing
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get flightPhase => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The turnaround start time, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get taStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get earliestTaendTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
  ///  Example: /// Example: ABLE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get missionReadiness => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The mass of fuel remaining on the aircraft, in kilograms.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get fuel => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Used in conjunction with the fuel field to indicate either burnable or offload fuel.
  ///  Example: /// Example: Burn
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get fuelFunction => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Flag indicating that the aircraft is capable of making at least one gun pass.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get gunCapable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 36, false);
  ///  The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
  ///  Example: /// Example: 7.62 MM
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get gunRdsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The lower bound of the estimated number of gun rounds available.
  ///  Example: /// Example: 150
  ///  Constraints: No constraints specified.
  int get gunRdsMin => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  The upper bound of the estimated number of gun rounds available.
  ///  Example: /// Example: 550
  ///  Constraints: No constraints specified.
  int get gunRdsMax => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 42, 0);
  ///  The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
  ///  Example: /// Example: OPERATIONAL
  ///  Constraints: Minimum length = 0, Maximum length = 16
  AircraftStatusFullAirToAirStatusEnum get airToAirStatus => AircraftStatusFullAirToAirStatusEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 44, 0));
  ///  The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
  ///  Example: /// Example: OPERATIONAL
  ///  Constraints: Minimum length = 0, Maximum length = 16
  AircraftStatusFullAirToGroundStatusEnum get airToGroundStatus => AircraftStatusFullAirToGroundStatusEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 46, 0));
  ///  Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific/store type designations.  This array must be the same length as inventoryMin and inventoryMax.
  ///  Example: /// Example: ['AIM-9 SIDEWINDER', 'AIM-120 AMRAAM']
  ///  Constraints: No constraints specified.
  List<String>? get inventory => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 48);
  ///  Array of the lower bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMax.
  ///  Example: /// Example: [1, 2]
  ///  Constraints: No constraints specified.
  List<String>? get inventoryMin => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 50);
  ///  Array of the upper bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMin.
  ///  Example: /// Example: [2, 2]
  ///  Constraints: No constraints specified.
  List<String>? get inventoryMax => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 52);
  ///  List of unavailable systems that would normally be on this aircraft.
  ///  Example: /// Example: ['CMDS', 'AOC']
  ///  Constraints: No constraints specified.
  List<String>? get unavailableSys => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 54);
  ///  List of additional operational systems on this aircraft beyond what is normally available.
  ///  Example: /// Example: ['ATOMS', 'TUDL', 'BLOS1']
  ///  Constraints: No constraints specified.
  List<String>? get additionalSys => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 56);
  ///  Optional notes/comments concerning this aircraft status.
  ///  Example: /// Example: Some notes for aircraft A
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Maintenance pacing remarks assocociated with this aircraft.
  ///  Example: /// Example: COM2 INOP
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get mxRemark => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  The maintenance status of the aircraft.
  ///  Example: /// Example: maintenance status
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get maintStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Indicates the maintenance discrepancy that drives the current maintenance status.
  ///  Example: /// Example: SCREW STUCK IN LEFT NLG TIRE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get maintStatusDriver => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Indicates the priority of the maintenance effort.
  ///  Example: /// Example: 1
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get maintPriority => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Aircraft alpha status code that indicates the aircraft maintenance status estimated by the pilot.
  ///  Example: /// Example: A2
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get alphaStatusCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  The time of the last maintenance status update, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get maintStatusUpdate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Date when the military aircraft inspection was last performed, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-09-09T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get lastInspectionDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Military aircraft maintenance point of contact for this aircraft.
  ///  Example: /// Example: PSUP NIGHT SHIFT 800-555-4412
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get maintPoc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
  ///  Example: /// Example: ALERT
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get groundStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN, etc.).
  ///  Example: /// Example: CLEAR
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get contaminationStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED, etc.).
  ///  Example: /// Example: DELIVERED
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get fuelStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  The name or ID of the external user that updated this status.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get lastUpdatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the course of action to resolve the issue will be determined.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get troubleshootEtic => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the issue will be resolved.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get etic => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  The parking location of this aircraft.
  ///  Example: /// Example: B1
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get parkLocation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
  ///  Example: /// Example: GDSS
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get parkLocationSystem => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  Unique identifier of the Point of Interest (POI) record related to this aircraft status. This will generally represent the location of an aircraft on the ground.
  ///  Example: /// Example: 0e52f081-a2e3-4b73-b822-88b882232691
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idPoi => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AircraftStatusFullDataModeEnum get dataMode => AircraftStatusFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 108, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);

  @override
  String toString() {
    return 'AircraftStatusFull{id: ${id}, classificationMarking: ${classificationMarking}, idAircraft: ${idAircraft}, altAircraftId: ${altAircraftId}, currentState: ${currentState}, idAirfield: ${idAirfield}, geoLoc: ${geoLoc}, previousIcao: ${previousIcao}, currentIcao: ${currentIcao}, nextIcao: ${nextIcao}, flightPhase: ${flightPhase}, taStartTime: ${taStartTime}, earliestTaendTime: ${earliestTaendTime}, missionReadiness: ${missionReadiness}, fuel: ${fuel}, fuelFunction: ${fuelFunction}, gunCapable: ${gunCapable}, gunRdsType: ${gunRdsType}, gunRdsMin: ${gunRdsMin}, gunRdsMax: ${gunRdsMax}, airToAirStatus: ${airToAirStatus}, airToGroundStatus: ${airToGroundStatus}, inventory: ${inventory}, inventoryMin: ${inventoryMin}, inventoryMax: ${inventoryMax}, unavailableSys: ${unavailableSys}, additionalSys: ${additionalSys}, notes: ${notes}, mxRemark: ${mxRemark}, maintStatus: ${maintStatus}, maintStatusDriver: ${maintStatusDriver}, maintPriority: ${maintPriority}, alphaStatusCode: ${alphaStatusCode}, maintStatusUpdate: ${maintStatusUpdate}, lastInspectionDate: ${lastInspectionDate}, maintPoc: ${maintPoc}, groundStatus: ${groundStatus}, contaminationStatus: ${contaminationStatus}, fuelStatus: ${fuelStatus}, lastUpdatedBy: ${lastUpdatedBy}, troubleshootEtic: ${troubleshootEtic}, etic: ${etic}, parkLocation: ${parkLocation}, parkLocationSystem: ${parkLocationSystem}, idPoi: ${idPoi}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _AircraftStatusFullReader extends fb.TableReader<AircraftStatusFull> {
  const _AircraftStatusFullReader();

  @override
  AircraftStatusFull createObject(fb.BufferContext bc, int offset) => 
    AircraftStatusFull._(bc, offset);
}

class AircraftStatusFullBuilder {
  AircraftStatusFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(54);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdAircraftOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAltAircraftIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addCurrentStateOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdAirfieldOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addGeoLocOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addPreviousIcaoOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addCurrentIcaoOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addNextIcaoOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addFlightPhaseOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addTaStartTimeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addEarliestTaendTimeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addMissionReadinessOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addFuel(int? fuel) {
    fbBuilder.addInt32(14, fuel);
    return fbBuilder.offset;
  }
  int addFuelFunctionOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addGunCapable(bool? gunCapable) {
    fbBuilder.addBool(16, gunCapable);
    return fbBuilder.offset;
  }
  int addGunRdsTypeOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addGunRdsMin(int? gunRdsMin) {
    fbBuilder.addInt32(18, gunRdsMin);
    return fbBuilder.offset;
  }
  int addGunRdsMax(int? gunRdsMax) {
    fbBuilder.addInt32(19, gunRdsMax);
    return fbBuilder.offset;
  }
  int addAirToAirStatus(AircraftStatusFullAirToAirStatusEnum? airToAirStatus) {
    fbBuilder.addInt8(20, airToAirStatus?.value);
    return fbBuilder.offset;
  }
  int addAirToGroundStatus(AircraftStatusFullAirToGroundStatusEnum? airToGroundStatus) {
    fbBuilder.addInt8(21, airToGroundStatus?.value);
    return fbBuilder.offset;
  }
  int addInventoryOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addInventoryMinOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addInventoryMaxOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addUnavailableSysOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addAdditionalSysOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addMxRemarkOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addMaintStatusOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addMaintStatusDriverOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addMaintPriorityOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addAlphaStatusCodeOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addMaintStatusUpdateOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addLastInspectionDateOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addMaintPocOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addGroundStatusOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addContaminationStatusOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addFuelStatusOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addLastUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addTroubleshootEticOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addEticOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addParkLocationOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addParkLocationSystemOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addIdPoiOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AircraftStatusFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(52, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AircraftStatusFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idAircraft;
  final String? _altAircraftId;
  final String? _currentState;
  final String? _idAirfield;
  final String? _geoLoc;
  final String? _previousIcao;
  final String? _currentIcao;
  final String? _nextIcao;
  final String? _flightPhase;
  final String? _taStartTime;
  final String? _earliestTaendTime;
  final String? _missionReadiness;
  final int? _fuel;
  final String? _fuelFunction;
  final bool? _gunCapable;
  final String? _gunRdsType;
  final int? _gunRdsMin;
  final int? _gunRdsMax;
  final AircraftStatusFullAirToAirStatusEnum? _airToAirStatus;
  final AircraftStatusFullAirToGroundStatusEnum? _airToGroundStatus;
  final List<String>? _inventory;
  final List<String>? _inventoryMin;
  final List<String>? _inventoryMax;
  final List<String>? _unavailableSys;
  final List<String>? _additionalSys;
  final String? _notes;
  final String? _mxRemark;
  final String? _maintStatus;
  final String? _maintStatusDriver;
  final String? _maintPriority;
  final String? _alphaStatusCode;
  final String? _maintStatusUpdate;
  final String? _lastInspectionDate;
  final String? _maintPoc;
  final String? _groundStatus;
  final String? _contaminationStatus;
  final String? _fuelStatus;
  final String? _lastUpdatedBy;
  final String? _troubleshootEtic;
  final String? _etic;
  final String? _parkLocation;
  final String? _parkLocationSystem;
  final String? _idPoi;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final AircraftStatusFullDataModeEnum? _dataMode;
  final String? _origNetwork;

  AircraftStatusFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idAircraft,
    String? altAircraftId,
    String? currentState,
    String? idAirfield,
    String? geoLoc,
    String? previousIcao,
    String? currentIcao,
    String? nextIcao,
    String? flightPhase,
    String? taStartTime,
    String? earliestTaendTime,
    String? missionReadiness,
    int? fuel,
    String? fuelFunction,
    bool? gunCapable,
    String? gunRdsType,
    int? gunRdsMin,
    int? gunRdsMax,
    AircraftStatusFullAirToAirStatusEnum? airToAirStatus,
    AircraftStatusFullAirToGroundStatusEnum? airToGroundStatus,
    List<String>? inventory,
    List<String>? inventoryMin,
    List<String>? inventoryMax,
    List<String>? unavailableSys,
    List<String>? additionalSys,
    String? notes,
    String? mxRemark,
    String? maintStatus,
    String? maintStatusDriver,
    String? maintPriority,
    String? alphaStatusCode,
    String? maintStatusUpdate,
    String? lastInspectionDate,
    String? maintPoc,
    String? groundStatus,
    String? contaminationStatus,
    String? fuelStatus,
    String? lastUpdatedBy,
    String? troubleshootEtic,
    String? etic,
    String? parkLocation,
    String? parkLocationSystem,
    String? idPoi,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? sourceDl,
    String? source,
    String? origin,
    AircraftStatusFullDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idAircraft = idAircraft,
        _altAircraftId = altAircraftId,
        _currentState = currentState,
        _idAirfield = idAirfield,
        _geoLoc = geoLoc,
        _previousIcao = previousIcao,
        _currentIcao = currentIcao,
        _nextIcao = nextIcao,
        _flightPhase = flightPhase,
        _taStartTime = taStartTime,
        _earliestTaendTime = earliestTaendTime,
        _missionReadiness = missionReadiness,
        _fuel = fuel,
        _fuelFunction = fuelFunction,
        _gunCapable = gunCapable,
        _gunRdsType = gunRdsType,
        _gunRdsMin = gunRdsMin,
        _gunRdsMax = gunRdsMax,
        _airToAirStatus = airToAirStatus,
        _airToGroundStatus = airToGroundStatus,
        _inventory = inventory,
        _inventoryMin = inventoryMin,
        _inventoryMax = inventoryMax,
        _unavailableSys = unavailableSys,
        _additionalSys = additionalSys,
        _notes = notes,
        _mxRemark = mxRemark,
        _maintStatus = maintStatus,
        _maintStatusDriver = maintStatusDriver,
        _maintPriority = maintPriority,
        _alphaStatusCode = alphaStatusCode,
        _maintStatusUpdate = maintStatusUpdate,
        _lastInspectionDate = lastInspectionDate,
        _maintPoc = maintPoc,
        _groundStatus = groundStatus,
        _contaminationStatus = contaminationStatus,
        _fuelStatus = fuelStatus,
        _lastUpdatedBy = lastUpdatedBy,
        _troubleshootEtic = troubleshootEtic,
        _etic = etic,
        _parkLocation = parkLocation,
        _parkLocationSystem = parkLocationSystem,
        _idPoi = idPoi,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idAircraftOffset = _idAircraft == null ? null
        : fbBuilder.writeString(_idAircraft!);
    final int? altAircraftIdOffset = _altAircraftId == null ? null
        : fbBuilder.writeString(_altAircraftId!);
    final int? currentStateOffset = _currentState == null ? null
        : fbBuilder.writeString(_currentState!);
    final int? idAirfieldOffset = _idAirfield == null ? null
        : fbBuilder.writeString(_idAirfield!);
    final int? geoLocOffset = _geoLoc == null ? null
        : fbBuilder.writeString(_geoLoc!);
    final int? previousIcaoOffset = _previousIcao == null ? null
        : fbBuilder.writeString(_previousIcao!);
    final int? currentIcaoOffset = _currentIcao == null ? null
        : fbBuilder.writeString(_currentIcao!);
    final int? nextIcaoOffset = _nextIcao == null ? null
        : fbBuilder.writeString(_nextIcao!);
    final int? flightPhaseOffset = _flightPhase == null ? null
        : fbBuilder.writeString(_flightPhase!);
    final int? taStartTimeOffset = _taStartTime == null ? null
        : fbBuilder.writeString(_taStartTime!);
    final int? earliestTaendTimeOffset = _earliestTaendTime == null ? null
        : fbBuilder.writeString(_earliestTaendTime!);
    final int? missionReadinessOffset = _missionReadiness == null ? null
        : fbBuilder.writeString(_missionReadiness!);
    final int? fuelFunctionOffset = _fuelFunction == null ? null
        : fbBuilder.writeString(_fuelFunction!);
    final int? gunRdsTypeOffset = _gunRdsType == null ? null
        : fbBuilder.writeString(_gunRdsType!);
    final int? inventoryOffset = _inventory == null ? null
        : fbBuilder.writeList(_inventory!.map(fbBuilder.writeString).toList());
    final int? inventoryMinOffset = _inventoryMin == null ? null
        : fbBuilder.writeList(_inventoryMin!.map(fbBuilder.writeString).toList());
    final int? inventoryMaxOffset = _inventoryMax == null ? null
        : fbBuilder.writeList(_inventoryMax!.map(fbBuilder.writeString).toList());
    final int? unavailableSysOffset = _unavailableSys == null ? null
        : fbBuilder.writeList(_unavailableSys!.map(fbBuilder.writeString).toList());
    final int? additionalSysOffset = _additionalSys == null ? null
        : fbBuilder.writeList(_additionalSys!.map(fbBuilder.writeString).toList());
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? mxRemarkOffset = _mxRemark == null ? null
        : fbBuilder.writeString(_mxRemark!);
    final int? maintStatusOffset = _maintStatus == null ? null
        : fbBuilder.writeString(_maintStatus!);
    final int? maintStatusDriverOffset = _maintStatusDriver == null ? null
        : fbBuilder.writeString(_maintStatusDriver!);
    final int? maintPriorityOffset = _maintPriority == null ? null
        : fbBuilder.writeString(_maintPriority!);
    final int? alphaStatusCodeOffset = _alphaStatusCode == null ? null
        : fbBuilder.writeString(_alphaStatusCode!);
    final int? maintStatusUpdateOffset = _maintStatusUpdate == null ? null
        : fbBuilder.writeString(_maintStatusUpdate!);
    final int? lastInspectionDateOffset = _lastInspectionDate == null ? null
        : fbBuilder.writeString(_lastInspectionDate!);
    final int? maintPocOffset = _maintPoc == null ? null
        : fbBuilder.writeString(_maintPoc!);
    final int? groundStatusOffset = _groundStatus == null ? null
        : fbBuilder.writeString(_groundStatus!);
    final int? contaminationStatusOffset = _contaminationStatus == null ? null
        : fbBuilder.writeString(_contaminationStatus!);
    final int? fuelStatusOffset = _fuelStatus == null ? null
        : fbBuilder.writeString(_fuelStatus!);
    final int? lastUpdatedByOffset = _lastUpdatedBy == null ? null
        : fbBuilder.writeString(_lastUpdatedBy!);
    final int? troubleshootEticOffset = _troubleshootEtic == null ? null
        : fbBuilder.writeString(_troubleshootEtic!);
    final int? eticOffset = _etic == null ? null
        : fbBuilder.writeString(_etic!);
    final int? parkLocationOffset = _parkLocation == null ? null
        : fbBuilder.writeString(_parkLocation!);
    final int? parkLocationSystemOffset = _parkLocationSystem == null ? null
        : fbBuilder.writeString(_parkLocationSystem!);
    final int? idPoiOffset = _idPoi == null ? null
        : fbBuilder.writeString(_idPoi!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(54);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idAircraftOffset);
    fbBuilder.addOffset(3, altAircraftIdOffset);
    fbBuilder.addOffset(4, currentStateOffset);
    fbBuilder.addOffset(5, idAirfieldOffset);
    fbBuilder.addOffset(6, geoLocOffset);
    fbBuilder.addOffset(7, previousIcaoOffset);
    fbBuilder.addOffset(8, currentIcaoOffset);
    fbBuilder.addOffset(9, nextIcaoOffset);
    fbBuilder.addOffset(10, flightPhaseOffset);
    fbBuilder.addOffset(11, taStartTimeOffset);
    fbBuilder.addOffset(12, earliestTaendTimeOffset);
    fbBuilder.addOffset(13, missionReadinessOffset);
    fbBuilder.addInt32(14, _fuel);
    fbBuilder.addOffset(15, fuelFunctionOffset);
    fbBuilder.addBool(16, _gunCapable);
    fbBuilder.addOffset(17, gunRdsTypeOffset);
    fbBuilder.addInt32(18, _gunRdsMin);
    fbBuilder.addInt32(19, _gunRdsMax);
    fbBuilder.addInt8(20, _airToAirStatus?.value);
    fbBuilder.addInt8(21, _airToGroundStatus?.value);
    fbBuilder.addOffset(22, inventoryOffset);
    fbBuilder.addOffset(23, inventoryMinOffset);
    fbBuilder.addOffset(24, inventoryMaxOffset);
    fbBuilder.addOffset(25, unavailableSysOffset);
    fbBuilder.addOffset(26, additionalSysOffset);
    fbBuilder.addOffset(27, notesOffset);
    fbBuilder.addOffset(28, mxRemarkOffset);
    fbBuilder.addOffset(29, maintStatusOffset);
    fbBuilder.addOffset(30, maintStatusDriverOffset);
    fbBuilder.addOffset(31, maintPriorityOffset);
    fbBuilder.addOffset(32, alphaStatusCodeOffset);
    fbBuilder.addOffset(33, maintStatusUpdateOffset);
    fbBuilder.addOffset(34, lastInspectionDateOffset);
    fbBuilder.addOffset(35, maintPocOffset);
    fbBuilder.addOffset(36, groundStatusOffset);
    fbBuilder.addOffset(37, contaminationStatusOffset);
    fbBuilder.addOffset(38, fuelStatusOffset);
    fbBuilder.addOffset(39, lastUpdatedByOffset);
    fbBuilder.addOffset(40, troubleshootEticOffset);
    fbBuilder.addOffset(41, eticOffset);
    fbBuilder.addOffset(42, parkLocationOffset);
    fbBuilder.addOffset(43, parkLocationSystemOffset);
    fbBuilder.addOffset(44, idPoiOffset);
    fbBuilder.addOffset(45, createdAtOffset);
    fbBuilder.addOffset(46, createdByOffset);
    fbBuilder.addOffset(47, updatedAtOffset);
    fbBuilder.addOffset(48, updatedByOffset);
    fbBuilder.addOffset(49, sourceDlOffset);
    fbBuilder.addOffset(50, sourceOffset);
    fbBuilder.addOffset(51, originOffset);
    fbBuilder.addInt8(52, _dataMode?.value);
    fbBuilder.addOffset(53, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
