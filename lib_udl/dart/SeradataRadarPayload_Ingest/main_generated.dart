// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SeradataRadarPayloadIngestDataModeEnum {
  final int value;
  const SeradataRadarPayloadIngestDataModeEnum._(this.value);

  factory SeradataRadarPayloadIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SeradataRadarPayloadIngestDataModeEnum');
    }
    return result;
  }

  static SeradataRadarPayloadIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SeradataRadarPayloadIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SeradataRadarPayloadIngestDataModeEnum REAL = SeradataRadarPayloadIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SeradataRadarPayloadIngestDataModeEnum TEST = SeradataRadarPayloadIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SeradataRadarPayloadIngestDataModeEnum SIMULATED = SeradataRadarPayloadIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SeradataRadarPayloadIngestDataModeEnum EXERCISE = SeradataRadarPayloadIngestDataModeEnum._(3);
  static const Map<int, SeradataRadarPayloadIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SeradataRadarPayloadIngestDataModeEnum> reader = _SeradataRadarPayloadIngestDataModeEnumReader();

  @override
  String toString() {
    return 'SeradataRadarPayloadIngestDataModeEnum{value: $value}';
  }
}

class _SeradataRadarPayloadIngestDataModeEnumReader extends fb.Reader<SeradataRadarPayloadIngestDataModeEnum> {
  const _SeradataRadarPayloadIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SeradataRadarPayloadIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      SeradataRadarPayloadIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Details for an radar payload from  Seradata.
class SeradataRadarPayloadIngest {
  SeradataRadarPayloadIngest._(this._bc, this._bcOffset);
  factory SeradataRadarPayloadIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SeradataRadarPayloadIngest> reader = _SeradataRadarPayloadIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SERADATARADARPAYLOAD-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  ///  Example: /// Example: 12345
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get spacecraftId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  UUID of the Sensor record.
  ///  Example: /// Example: 3c1ee9a0-90ad-1d75-c47b-2414e0a77e53
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Hosted for company/Organization Id.
  ///  Example: /// Example: hostedForCompanyOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get hostedForCompanyOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Manufacturer Organization Id.
  ///  Example: /// Example: manufacturerOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get manufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Radar category, e.g. SAR, Surface Search, etc.
  ///  Example: /// Example: SAR
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get category => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Sensor name from Seradata, e.g. ALT (Radar Altimeter), COSI (Corea SAR Instrument), etc.
  ///  Example: /// Example: ALT
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
  ///  Example: /// Example: X
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get frequencyBand => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Frequency in giga hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get frequency => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Wave length in meters.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get waveLength => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Best resolution in meters.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get bestResolution => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Swath width in kilometers.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get swathWidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Recorder size, e.g. 256.
  ///  Example: /// Example: 256
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get recorderSize => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Field of view of this radar in kilometers.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get fieldOfView => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Field of regard of this radar in degrees.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get fieldOfRegard => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Point method for this radar, e.g. Spacecraft.
  ///  Example: /// Example: Spacecraft
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get pointingMethod => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Ground Station info for this payload.
  ///  Example: /// Example: groundStations
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get groundStations => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Ground Station Locations for this payload.
  ///  Example: /// Example: 51,42N-44,35E
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get groundStationLocations => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Transmit polarization, e.g. Lin Dual, Lin vert, etc.
  ///  Example: /// Example: Lin Dual
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get transmitPolarization => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Receive polarization, e.g. Lin Dual, Lin vert, etc.
  ///  Example: /// Example: Lin Dual
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get receivePolarization => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Duty cycle.
  ///  Example: /// Example: dutyCycle
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get dutyCycle => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Partner seradata-spacecraft.
  ///  Example: /// Example: partnerSpacecraft
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get partnerSpacecraft => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Constellation interferometric capability.
  ///  Example: /// Example: constellationInterferometricCapability
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get constellationInterferometricCapability => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Payload notes.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Radar bandwidth in mega hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get bandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SeradataRadarPayloadIngestDataModeEnum get dataMode => SeradataRadarPayloadIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 66, 0));

  @override
  String toString() {
    return 'SeradataRadarPayloadIngest{id: ${id}, classificationMarking: ${classificationMarking}, spacecraftId: ${spacecraftId}, idSensor: ${idSensor}, hostedForCompanyOrgId: ${hostedForCompanyOrgId}, manufacturerOrgId: ${manufacturerOrgId}, category: ${category}, name: ${name}, frequencyBand: ${frequencyBand}, frequency: ${frequency}, waveLength: ${waveLength}, bestResolution: ${bestResolution}, swathWidth: ${swathWidth}, recorderSize: ${recorderSize}, fieldOfView: ${fieldOfView}, fieldOfRegard: ${fieldOfRegard}, pointingMethod: ${pointingMethod}, groundStations: ${groundStations}, groundStationLocations: ${groundStationLocations}, transmitPolarization: ${transmitPolarization}, receivePolarization: ${receivePolarization}, dutyCycle: ${dutyCycle}, partnerSpacecraft: ${partnerSpacecraft}, constellationInterferometricCapability: ${constellationInterferometricCapability}, notes: ${notes}, bandwidth: ${bandwidth}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _SeradataRadarPayloadIngestReader extends fb.TableReader<SeradataRadarPayloadIngest> {
  const _SeradataRadarPayloadIngestReader();

  @override
  SeradataRadarPayloadIngest createObject(fb.BufferContext bc, int offset) => 
    SeradataRadarPayloadIngest._(bc, offset);
}

class SeradataRadarPayloadIngestBuilder {
  SeradataRadarPayloadIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(32);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSpacecraftIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addHostedForCompanyOrgIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addCategoryOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addFrequencyBandOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addFrequency(double? frequency) {
    fbBuilder.addFloat64(9, frequency);
    return fbBuilder.offset;
  }
  int addWaveLength(double? waveLength) {
    fbBuilder.addFloat64(10, waveLength);
    return fbBuilder.offset;
  }
  int addBestResolution(double? bestResolution) {
    fbBuilder.addFloat64(11, bestResolution);
    return fbBuilder.offset;
  }
  int addSwathWidth(double? swathWidth) {
    fbBuilder.addFloat64(12, swathWidth);
    return fbBuilder.offset;
  }
  int addRecorderSizeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addFieldOfView(double? fieldOfView) {
    fbBuilder.addFloat64(14, fieldOfView);
    return fbBuilder.offset;
  }
  int addFieldOfRegard(double? fieldOfRegard) {
    fbBuilder.addFloat64(15, fieldOfRegard);
    return fbBuilder.offset;
  }
  int addPointingMethodOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addGroundStationsOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addGroundStationLocationsOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addTransmitPolarizationOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addReceivePolarizationOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addDutyCycleOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addPartnerSpacecraftOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addConstellationInterferometricCapabilityOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addBandwidth(double? bandwidth) {
    fbBuilder.addFloat64(25, bandwidth);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SeradataRadarPayloadIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(31, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SeradataRadarPayloadIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _spacecraftId;
  final String? _idSensor;
  final String? _hostedForCompanyOrgId;
  final String? _manufacturerOrgId;
  final String? _category;
  final String? _name;
  final String? _frequencyBand;
  final double? _frequency;
  final double? _waveLength;
  final double? _bestResolution;
  final double? _swathWidth;
  final String? _recorderSize;
  final double? _fieldOfView;
  final double? _fieldOfRegard;
  final String? _pointingMethod;
  final String? _groundStations;
  final String? _groundStationLocations;
  final String? _transmitPolarization;
  final String? _receivePolarization;
  final String? _dutyCycle;
  final String? _partnerSpacecraft;
  final String? _constellationInterferometricCapability;
  final String? _notes;
  final double? _bandwidth;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SeradataRadarPayloadIngestDataModeEnum? _dataMode;

  SeradataRadarPayloadIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? spacecraftId,
    String? idSensor,
    String? hostedForCompanyOrgId,
    String? manufacturerOrgId,
    String? category,
    String? name,
    String? frequencyBand,
    double? frequency,
    double? waveLength,
    double? bestResolution,
    double? swathWidth,
    String? recorderSize,
    double? fieldOfView,
    double? fieldOfRegard,
    String? pointingMethod,
    String? groundStations,
    String? groundStationLocations,
    String? transmitPolarization,
    String? receivePolarization,
    String? dutyCycle,
    String? partnerSpacecraft,
    String? constellationInterferometricCapability,
    String? notes,
    double? bandwidth,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    SeradataRadarPayloadIngestDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _spacecraftId = spacecraftId,
        _idSensor = idSensor,
        _hostedForCompanyOrgId = hostedForCompanyOrgId,
        _manufacturerOrgId = manufacturerOrgId,
        _category = category,
        _name = name,
        _frequencyBand = frequencyBand,
        _frequency = frequency,
        _waveLength = waveLength,
        _bestResolution = bestResolution,
        _swathWidth = swathWidth,
        _recorderSize = recorderSize,
        _fieldOfView = fieldOfView,
        _fieldOfRegard = fieldOfRegard,
        _pointingMethod = pointingMethod,
        _groundStations = groundStations,
        _groundStationLocations = groundStationLocations,
        _transmitPolarization = transmitPolarization,
        _receivePolarization = receivePolarization,
        _dutyCycle = dutyCycle,
        _partnerSpacecraft = partnerSpacecraft,
        _constellationInterferometricCapability = constellationInterferometricCapability,
        _notes = notes,
        _bandwidth = bandwidth,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? spacecraftIdOffset = _spacecraftId == null ? null
        : fbBuilder.writeString(_spacecraftId!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? hostedForCompanyOrgIdOffset = _hostedForCompanyOrgId == null ? null
        : fbBuilder.writeString(_hostedForCompanyOrgId!);
    final int? manufacturerOrgIdOffset = _manufacturerOrgId == null ? null
        : fbBuilder.writeString(_manufacturerOrgId!);
    final int? categoryOffset = _category == null ? null
        : fbBuilder.writeString(_category!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? frequencyBandOffset = _frequencyBand == null ? null
        : fbBuilder.writeString(_frequencyBand!);
    final int? recorderSizeOffset = _recorderSize == null ? null
        : fbBuilder.writeString(_recorderSize!);
    final int? pointingMethodOffset = _pointingMethod == null ? null
        : fbBuilder.writeString(_pointingMethod!);
    final int? groundStationsOffset = _groundStations == null ? null
        : fbBuilder.writeString(_groundStations!);
    final int? groundStationLocationsOffset = _groundStationLocations == null ? null
        : fbBuilder.writeString(_groundStationLocations!);
    final int? transmitPolarizationOffset = _transmitPolarization == null ? null
        : fbBuilder.writeString(_transmitPolarization!);
    final int? receivePolarizationOffset = _receivePolarization == null ? null
        : fbBuilder.writeString(_receivePolarization!);
    final int? dutyCycleOffset = _dutyCycle == null ? null
        : fbBuilder.writeString(_dutyCycle!);
    final int? partnerSpacecraftOffset = _partnerSpacecraft == null ? null
        : fbBuilder.writeString(_partnerSpacecraft!);
    final int? constellationInterferometricCapabilityOffset = _constellationInterferometricCapability == null ? null
        : fbBuilder.writeString(_constellationInterferometricCapability!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(32);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, spacecraftIdOffset);
    fbBuilder.addOffset(3, idSensorOffset);
    fbBuilder.addOffset(4, hostedForCompanyOrgIdOffset);
    fbBuilder.addOffset(5, manufacturerOrgIdOffset);
    fbBuilder.addOffset(6, categoryOffset);
    fbBuilder.addOffset(7, nameOffset);
    fbBuilder.addOffset(8, frequencyBandOffset);
    fbBuilder.addFloat64(9, _frequency);
    fbBuilder.addFloat64(10, _waveLength);
    fbBuilder.addFloat64(11, _bestResolution);
    fbBuilder.addFloat64(12, _swathWidth);
    fbBuilder.addOffset(13, recorderSizeOffset);
    fbBuilder.addFloat64(14, _fieldOfView);
    fbBuilder.addFloat64(15, _fieldOfRegard);
    fbBuilder.addOffset(16, pointingMethodOffset);
    fbBuilder.addOffset(17, groundStationsOffset);
    fbBuilder.addOffset(18, groundStationLocationsOffset);
    fbBuilder.addOffset(19, transmitPolarizationOffset);
    fbBuilder.addOffset(20, receivePolarizationOffset);
    fbBuilder.addOffset(21, dutyCycleOffset);
    fbBuilder.addOffset(22, partnerSpacecraftOffset);
    fbBuilder.addOffset(23, constellationInterferometricCapabilityOffset);
    fbBuilder.addOffset(24, notesOffset);
    fbBuilder.addFloat64(25, _bandwidth);
    fbBuilder.addOffset(26, createdAtOffset);
    fbBuilder.addOffset(27, createdByOffset);
    fbBuilder.addOffset(28, sourceOffset);
    fbBuilder.addOffset(29, originOffset);
    fbBuilder.addOffset(30, origNetworkOffset);
    fbBuilder.addInt8(31, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
