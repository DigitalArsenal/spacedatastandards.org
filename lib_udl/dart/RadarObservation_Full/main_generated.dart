// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class RadarObservationFullDataModeEnum {
  final int value;
  const RadarObservationFullDataModeEnum._(this.value);

  factory RadarObservationFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum RadarObservationFullDataModeEnum');
    }
    return result;
  }

  static RadarObservationFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : RadarObservationFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const RadarObservationFullDataModeEnum REAL = RadarObservationFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const RadarObservationFullDataModeEnum TEST = RadarObservationFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const RadarObservationFullDataModeEnum SIMULATED = RadarObservationFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const RadarObservationFullDataModeEnum EXERCISE = RadarObservationFullDataModeEnum._(3);
  static const Map<int, RadarObservationFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<RadarObservationFullDataModeEnum> reader = _RadarObservationFullDataModeEnumReader();

  @override
  String toString() {
    return 'RadarObservationFullDataModeEnum{value: $value}';
  }
}

class _RadarObservationFullDataModeEnumReader extends fb.Reader<RadarObservationFullDataModeEnum> {
  const _RadarObservationFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  RadarObservationFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      RadarObservationFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class RadarObservationFullSenReferenceFrameEnum {
  final int value;
  const RadarObservationFullSenReferenceFrameEnum._(this.value);

  factory RadarObservationFullSenReferenceFrameEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum RadarObservationFullSenReferenceFrameEnum');
    }
    return result;
  }

  static RadarObservationFullSenReferenceFrameEnum? _createOrNull(int? value) => 
      value == null ? null : RadarObservationFullSenReferenceFrameEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const RadarObservationFullSenReferenceFrameEnum J2000 = RadarObservationFullSenReferenceFrameEnum._(0);

  ///  No description available.
  static const RadarObservationFullSenReferenceFrameEnum EFG_TDR = RadarObservationFullSenReferenceFrameEnum._(1);

  ///  No description available.
  static const RadarObservationFullSenReferenceFrameEnum ECR_ECEF = RadarObservationFullSenReferenceFrameEnum._(2);

  ///  No description available.
  static const RadarObservationFullSenReferenceFrameEnum TEME = RadarObservationFullSenReferenceFrameEnum._(3);

  ///  No description available.
  static const RadarObservationFullSenReferenceFrameEnum ITRF = RadarObservationFullSenReferenceFrameEnum._(4);

  ///  No description available.
  static const RadarObservationFullSenReferenceFrameEnum GCRF = RadarObservationFullSenReferenceFrameEnum._(5);
  static const Map<int, RadarObservationFullSenReferenceFrameEnum> values = {
    0: J2000,
    1: EFG_TDR,
    2: ECR_ECEF,
    3: TEME,
    4: ITRF,
    5: GCRF};

  static const fb.Reader<RadarObservationFullSenReferenceFrameEnum> reader = _RadarObservationFullSenReferenceFrameEnumReader();

  @override
  String toString() {
    return 'RadarObservationFullSenReferenceFrameEnum{value: $value}';
  }
}

class _RadarObservationFullSenReferenceFrameEnumReader extends fb.Reader<RadarObservationFullSenReferenceFrameEnum> {
  const _RadarObservationFullSenReferenceFrameEnumReader();

  @override
  int get size => 1;

  @override
  RadarObservationFullSenReferenceFrameEnum read(fb.BufferContext bc, int offset) =>
      RadarObservationFullSenReferenceFrameEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
class RadarObservationFull {
  RadarObservationFull._(this._bc, this._bcOffset);
  factory RadarObservationFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RadarObservationFull> reader = _RadarObservationFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: RADAROBSERVATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Ob detection time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get obTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the target on-orbit object, if correlated.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  Optional identifier to indicate the specific tasking which produced this observation.
  ///  Example: /// Example: TASK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get taskId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Optional identifier of the track to which this observation belongs.
  ///  Example: /// Example: TRACK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trackId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  ///  Example: /// Example: FIRST
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get obPosition => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get uct => const fb.BoolReader().vTableGet(_bc, _bcOffset, 28, false);
  ///  azimuth angle in degrees and topocentric frame.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get azimuth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get azimuthUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Sensor azimuth angle bias in degrees.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get azimuthBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Rate of change of the line of sight azimuth in degrees per second.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get azimuthRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Line of sight elevation in degrees and topocentric frame.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get elevation => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get elevationUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Sensor elevation bias in degrees.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get elevationBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Rate of change of the line of sight elevation in degrees per second.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get elevationRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Target range in km.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  double get range => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Range accelaration in km/s2.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get rangeAccel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get rangeAccelUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  One sigma uncertainty in the range measurement, in kilometers.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get rangeUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Sensor range bias in km.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get rangeBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Rate of change of the line of sight range in km/sec.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get rangeRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  One sigma uncertainty in the range rate measurement, in kilometers/second.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get rangeRateUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Corrected doppler measurement in meters per second.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get doppler => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  One sigma uncertainty in the corrected doppler measurement, in meters/second.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get dopplerUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Line of sight right ascension in degrees and J2000 coordinate frame.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get ra => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Line of sight declination angle in degrees and J2000 coordinate frame.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get declination => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  X position of target in km in J2000 coordinate frame.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  double get x => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Y position of target in km in J2000 coordinate frame.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  double get y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Z position of target in km in J2000 coordinate frame.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  double get z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  X velocity of target in km/sec in J2000 coordinate frame.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get xvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  Y velocity of target in km/sec in J2000 coordinate frame.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  double get yvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Z velocity of target in km/sec in J2000 coordinate frame.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  double get zvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get senx => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  ///  Example: /// Example: 40.23
  ///  Constraints: No constraints specified.
  double get seny => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  ///  Example: /// Example: 35.23
  ///  Constraints: No constraints specified.
  double get senz => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Radar cross section in meters squared for polarization principal.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  double get rcs => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get rcsUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  Radar cross section in meters squared for orthogonal polarization.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get orthogonalRcs => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get orthogonalRcsUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  Signal to noise ratio, in dB.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get snr => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  ID of the beam that produced this observation.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get beam => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  Sensor timing bias in seconds.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get timingBias => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: rawFileURI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  RadarObservationFullDataModeEnum get dataMode => RadarObservationFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 106, 0));
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 108);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get onOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 114);
  ///  The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  RadarObservationFullSenReferenceFrameEnum get senReferenceFrame => RadarObservationFullSenReferenceFrameEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 116, 0));
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: descriptor
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get descriptor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 120);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 122);
  ///  Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  ///  Example: /// Example: RADAR
  ///  Constraints: No constraints specified.
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 124);

  @override
  String toString() {
    return 'RadarObservationFull{id: ${id}, classificationMarking: ${classificationMarking}, obTime: ${obTime}, idOnOrbit: ${idOnOrbit}, idSensor: ${idSensor}, satNo: ${satNo}, taskId: ${taskId}, transactionId: ${transactionId}, trackId: ${trackId}, obPosition: ${obPosition}, origObjectId: ${origObjectId}, origSensorId: ${origSensorId}, uct: ${uct}, azimuth: ${azimuth}, azimuthUnc: ${azimuthUnc}, azimuthBias: ${azimuthBias}, azimuthRate: ${azimuthRate}, elevation: ${elevation}, elevationUnc: ${elevationUnc}, elevationBias: ${elevationBias}, elevationRate: ${elevationRate}, range: ${range}, rangeAccel: ${rangeAccel}, rangeAccelUnc: ${rangeAccelUnc}, rangeUnc: ${rangeUnc}, rangeBias: ${rangeBias}, rangeRate: ${rangeRate}, rangeRateUnc: ${rangeRateUnc}, doppler: ${doppler}, dopplerUnc: ${dopplerUnc}, ra: ${ra}, declination: ${declination}, x: ${x}, y: ${y}, z: ${z}, xvel: ${xvel}, yvel: ${yvel}, zvel: ${zvel}, senx: ${senx}, seny: ${seny}, senz: ${senz}, rcs: ${rcs}, rcsUnc: ${rcsUnc}, orthogonalRcs: ${orthogonalRcs}, orthogonalRcsUnc: ${orthogonalRcsUnc}, snr: ${snr}, beam: ${beam}, timingBias: ${timingBias}, rawFileUri: ${rawFileUri}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, tags: ${tags}, createdAt: ${createdAt}, createdBy: ${createdBy}, onOrbit: ${onOrbit}, senReferenceFrame: ${senReferenceFrame}, descriptor: ${descriptor}, origNetwork: ${origNetwork}, sourceDl: ${sourceDl}, type: ${type}}';
  }
}

class _RadarObservationFullReader extends fb.TableReader<RadarObservationFull> {
  const _RadarObservationFullReader();

  @override
  RadarObservationFull createObject(fb.BufferContext bc, int offset) => 
    RadarObservationFull._(bc, offset);
}

class RadarObservationFullBuilder {
  RadarObservationFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(61);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addObTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(5, satNo);
    return fbBuilder.offset;
  }
  int addTaskIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addTrackIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addObPositionOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addUct(bool? uct) {
    fbBuilder.addBool(12, uct);
    return fbBuilder.offset;
  }
  int addAzimuth(double? azimuth) {
    fbBuilder.addFloat64(13, azimuth);
    return fbBuilder.offset;
  }
  int addAzimuthUnc(double? azimuthUnc) {
    fbBuilder.addFloat64(14, azimuthUnc);
    return fbBuilder.offset;
  }
  int addAzimuthBias(double? azimuthBias) {
    fbBuilder.addFloat64(15, azimuthBias);
    return fbBuilder.offset;
  }
  int addAzimuthRate(double? azimuthRate) {
    fbBuilder.addFloat64(16, azimuthRate);
    return fbBuilder.offset;
  }
  int addElevation(double? elevation) {
    fbBuilder.addFloat64(17, elevation);
    return fbBuilder.offset;
  }
  int addElevationUnc(double? elevationUnc) {
    fbBuilder.addFloat64(18, elevationUnc);
    return fbBuilder.offset;
  }
  int addElevationBias(double? elevationBias) {
    fbBuilder.addFloat64(19, elevationBias);
    return fbBuilder.offset;
  }
  int addElevationRate(double? elevationRate) {
    fbBuilder.addFloat64(20, elevationRate);
    return fbBuilder.offset;
  }
  int addRange(double? range) {
    fbBuilder.addFloat64(21, range);
    return fbBuilder.offset;
  }
  int addRangeAccel(double? rangeAccel) {
    fbBuilder.addFloat64(22, rangeAccel);
    return fbBuilder.offset;
  }
  int addRangeAccelUnc(double? rangeAccelUnc) {
    fbBuilder.addFloat64(23, rangeAccelUnc);
    return fbBuilder.offset;
  }
  int addRangeUnc(double? rangeUnc) {
    fbBuilder.addFloat64(24, rangeUnc);
    return fbBuilder.offset;
  }
  int addRangeBias(double? rangeBias) {
    fbBuilder.addFloat64(25, rangeBias);
    return fbBuilder.offset;
  }
  int addRangeRate(double? rangeRate) {
    fbBuilder.addFloat64(26, rangeRate);
    return fbBuilder.offset;
  }
  int addRangeRateUnc(double? rangeRateUnc) {
    fbBuilder.addFloat64(27, rangeRateUnc);
    return fbBuilder.offset;
  }
  int addDoppler(double? doppler) {
    fbBuilder.addFloat64(28, doppler);
    return fbBuilder.offset;
  }
  int addDopplerUnc(double? dopplerUnc) {
    fbBuilder.addFloat64(29, dopplerUnc);
    return fbBuilder.offset;
  }
  int addRa(double? ra) {
    fbBuilder.addFloat64(30, ra);
    return fbBuilder.offset;
  }
  int addDeclination(double? declination) {
    fbBuilder.addFloat64(31, declination);
    return fbBuilder.offset;
  }
  int addX(double? x) {
    fbBuilder.addFloat64(32, x);
    return fbBuilder.offset;
  }
  int addY(double? y) {
    fbBuilder.addFloat64(33, y);
    return fbBuilder.offset;
  }
  int addZ(double? z) {
    fbBuilder.addFloat64(34, z);
    return fbBuilder.offset;
  }
  int addXvel(double? xvel) {
    fbBuilder.addFloat64(35, xvel);
    return fbBuilder.offset;
  }
  int addYvel(double? yvel) {
    fbBuilder.addFloat64(36, yvel);
    return fbBuilder.offset;
  }
  int addZvel(double? zvel) {
    fbBuilder.addFloat64(37, zvel);
    return fbBuilder.offset;
  }
  int addSenx(double? senx) {
    fbBuilder.addFloat64(38, senx);
    return fbBuilder.offset;
  }
  int addSeny(double? seny) {
    fbBuilder.addFloat64(39, seny);
    return fbBuilder.offset;
  }
  int addSenz(double? senz) {
    fbBuilder.addFloat64(40, senz);
    return fbBuilder.offset;
  }
  int addRcs(double? rcs) {
    fbBuilder.addFloat64(41, rcs);
    return fbBuilder.offset;
  }
  int addRcsUnc(double? rcsUnc) {
    fbBuilder.addFloat64(42, rcsUnc);
    return fbBuilder.offset;
  }
  int addOrthogonalRcs(double? orthogonalRcs) {
    fbBuilder.addFloat64(43, orthogonalRcs);
    return fbBuilder.offset;
  }
  int addOrthogonalRcsUnc(double? orthogonalRcsUnc) {
    fbBuilder.addFloat64(44, orthogonalRcsUnc);
    return fbBuilder.offset;
  }
  int addSnr(double? snr) {
    fbBuilder.addFloat64(45, snr);
    return fbBuilder.offset;
  }
  int addBeam(double? beam) {
    fbBuilder.addFloat64(46, beam);
    return fbBuilder.offset;
  }
  int addTimingBias(double? timingBias) {
    fbBuilder.addFloat64(47, timingBias);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addDataMode(RadarObservationFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(51, dataMode?.value);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(55, offset);
    return fbBuilder.offset;
  }
  int addSenReferenceFrame(RadarObservationFullSenReferenceFrameEnum? senReferenceFrame) {
    fbBuilder.addInt8(56, senReferenceFrame?.value);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(58, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(59, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RadarObservationFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _obTime;
  final String? _idOnOrbit;
  final String? _idSensor;
  final int? _satNo;
  final String? _taskId;
  final String? _transactionId;
  final String? _trackId;
  final String? _obPosition;
  final String? _origObjectId;
  final String? _origSensorId;
  final bool? _uct;
  final double? _azimuth;
  final double? _azimuthUnc;
  final double? _azimuthBias;
  final double? _azimuthRate;
  final double? _elevation;
  final double? _elevationUnc;
  final double? _elevationBias;
  final double? _elevationRate;
  final double? _range;
  final double? _rangeAccel;
  final double? _rangeAccelUnc;
  final double? _rangeUnc;
  final double? _rangeBias;
  final double? _rangeRate;
  final double? _rangeRateUnc;
  final double? _doppler;
  final double? _dopplerUnc;
  final double? _ra;
  final double? _declination;
  final double? _x;
  final double? _y;
  final double? _z;
  final double? _xvel;
  final double? _yvel;
  final double? _zvel;
  final double? _senx;
  final double? _seny;
  final double? _senz;
  final double? _rcs;
  final double? _rcsUnc;
  final double? _orthogonalRcs;
  final double? _orthogonalRcsUnc;
  final double? _snr;
  final double? _beam;
  final double? _timingBias;
  final String? _rawFileUri;
  final String? _source;
  final String? _origin;
  final RadarObservationFullDataModeEnum? _dataMode;
  final List<String>? _tags;
  final String? _createdAt;
  final String? _createdBy;
  final String? _onOrbit;
  final RadarObservationFullSenReferenceFrameEnum? _senReferenceFrame;
  final String? _descriptor;
  final String? _origNetwork;
  final String? _sourceDl;
  final String? _type;

  RadarObservationFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? obTime,
    String? idOnOrbit,
    String? idSensor,
    int? satNo,
    String? taskId,
    String? transactionId,
    String? trackId,
    String? obPosition,
    String? origObjectId,
    String? origSensorId,
    bool? uct,
    double? azimuth,
    double? azimuthUnc,
    double? azimuthBias,
    double? azimuthRate,
    double? elevation,
    double? elevationUnc,
    double? elevationBias,
    double? elevationRate,
    double? range,
    double? rangeAccel,
    double? rangeAccelUnc,
    double? rangeUnc,
    double? rangeBias,
    double? rangeRate,
    double? rangeRateUnc,
    double? doppler,
    double? dopplerUnc,
    double? ra,
    double? declination,
    double? x,
    double? y,
    double? z,
    double? xvel,
    double? yvel,
    double? zvel,
    double? senx,
    double? seny,
    double? senz,
    double? rcs,
    double? rcsUnc,
    double? orthogonalRcs,
    double? orthogonalRcsUnc,
    double? snr,
    double? beam,
    double? timingBias,
    String? rawFileUri,
    String? source,
    String? origin,
    RadarObservationFullDataModeEnum? dataMode,
    List<String>? tags,
    String? createdAt,
    String? createdBy,
    String? onOrbit,
    RadarObservationFullSenReferenceFrameEnum? senReferenceFrame,
    String? descriptor,
    String? origNetwork,
    String? sourceDl,
    String? type,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _obTime = obTime,
        _idOnOrbit = idOnOrbit,
        _idSensor = idSensor,
        _satNo = satNo,
        _taskId = taskId,
        _transactionId = transactionId,
        _trackId = trackId,
        _obPosition = obPosition,
        _origObjectId = origObjectId,
        _origSensorId = origSensorId,
        _uct = uct,
        _azimuth = azimuth,
        _azimuthUnc = azimuthUnc,
        _azimuthBias = azimuthBias,
        _azimuthRate = azimuthRate,
        _elevation = elevation,
        _elevationUnc = elevationUnc,
        _elevationBias = elevationBias,
        _elevationRate = elevationRate,
        _range = range,
        _rangeAccel = rangeAccel,
        _rangeAccelUnc = rangeAccelUnc,
        _rangeUnc = rangeUnc,
        _rangeBias = rangeBias,
        _rangeRate = rangeRate,
        _rangeRateUnc = rangeRateUnc,
        _doppler = doppler,
        _dopplerUnc = dopplerUnc,
        _ra = ra,
        _declination = declination,
        _x = x,
        _y = y,
        _z = z,
        _xvel = xvel,
        _yvel = yvel,
        _zvel = zvel,
        _senx = senx,
        _seny = seny,
        _senz = senz,
        _rcs = rcs,
        _rcsUnc = rcsUnc,
        _orthogonalRcs = orthogonalRcs,
        _orthogonalRcsUnc = orthogonalRcsUnc,
        _snr = snr,
        _beam = beam,
        _timingBias = timingBias,
        _rawFileUri = rawFileUri,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _tags = tags,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _onOrbit = onOrbit,
        _senReferenceFrame = senReferenceFrame,
        _descriptor = descriptor,
        _origNetwork = origNetwork,
        _sourceDl = sourceDl,
        _type = type;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? obTimeOffset = _obTime == null ? null
        : fbBuilder.writeString(_obTime!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? taskIdOffset = _taskId == null ? null
        : fbBuilder.writeString(_taskId!);
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? trackIdOffset = _trackId == null ? null
        : fbBuilder.writeString(_trackId!);
    final int? obPositionOffset = _obPosition == null ? null
        : fbBuilder.writeString(_obPosition!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? onOrbitOffset = _onOrbit == null ? null
        : fbBuilder.writeString(_onOrbit!);
    final int? descriptorOffset = _descriptor == null ? null
        : fbBuilder.writeString(_descriptor!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    fbBuilder.startTable(61);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, obTimeOffset);
    fbBuilder.addOffset(3, idOnOrbitOffset);
    fbBuilder.addOffset(4, idSensorOffset);
    fbBuilder.addInt32(5, _satNo);
    fbBuilder.addOffset(6, taskIdOffset);
    fbBuilder.addOffset(7, transactionIdOffset);
    fbBuilder.addOffset(8, trackIdOffset);
    fbBuilder.addOffset(9, obPositionOffset);
    fbBuilder.addOffset(10, origObjectIdOffset);
    fbBuilder.addOffset(11, origSensorIdOffset);
    fbBuilder.addBool(12, _uct);
    fbBuilder.addFloat64(13, _azimuth);
    fbBuilder.addFloat64(14, _azimuthUnc);
    fbBuilder.addFloat64(15, _azimuthBias);
    fbBuilder.addFloat64(16, _azimuthRate);
    fbBuilder.addFloat64(17, _elevation);
    fbBuilder.addFloat64(18, _elevationUnc);
    fbBuilder.addFloat64(19, _elevationBias);
    fbBuilder.addFloat64(20, _elevationRate);
    fbBuilder.addFloat64(21, _range);
    fbBuilder.addFloat64(22, _rangeAccel);
    fbBuilder.addFloat64(23, _rangeAccelUnc);
    fbBuilder.addFloat64(24, _rangeUnc);
    fbBuilder.addFloat64(25, _rangeBias);
    fbBuilder.addFloat64(26, _rangeRate);
    fbBuilder.addFloat64(27, _rangeRateUnc);
    fbBuilder.addFloat64(28, _doppler);
    fbBuilder.addFloat64(29, _dopplerUnc);
    fbBuilder.addFloat64(30, _ra);
    fbBuilder.addFloat64(31, _declination);
    fbBuilder.addFloat64(32, _x);
    fbBuilder.addFloat64(33, _y);
    fbBuilder.addFloat64(34, _z);
    fbBuilder.addFloat64(35, _xvel);
    fbBuilder.addFloat64(36, _yvel);
    fbBuilder.addFloat64(37, _zvel);
    fbBuilder.addFloat64(38, _senx);
    fbBuilder.addFloat64(39, _seny);
    fbBuilder.addFloat64(40, _senz);
    fbBuilder.addFloat64(41, _rcs);
    fbBuilder.addFloat64(42, _rcsUnc);
    fbBuilder.addFloat64(43, _orthogonalRcs);
    fbBuilder.addFloat64(44, _orthogonalRcsUnc);
    fbBuilder.addFloat64(45, _snr);
    fbBuilder.addFloat64(46, _beam);
    fbBuilder.addFloat64(47, _timingBias);
    fbBuilder.addOffset(48, rawFileUriOffset);
    fbBuilder.addOffset(49, sourceOffset);
    fbBuilder.addOffset(50, originOffset);
    fbBuilder.addInt8(51, _dataMode?.value);
    fbBuilder.addOffset(52, tagsOffset);
    fbBuilder.addOffset(53, createdAtOffset);
    fbBuilder.addOffset(54, createdByOffset);
    fbBuilder.addOffset(55, onOrbitOffset);
    fbBuilder.addInt8(56, _senReferenceFrame?.value);
    fbBuilder.addOffset(57, descriptorOffset);
    fbBuilder.addOffset(58, origNetworkOffset);
    fbBuilder.addOffset(59, sourceDlOffset);
    fbBuilder.addOffset(60, typeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
