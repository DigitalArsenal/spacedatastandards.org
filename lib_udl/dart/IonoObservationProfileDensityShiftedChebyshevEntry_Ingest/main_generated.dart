// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Coefficients, using ‘shiftedChebyshev’ sub-field, to describe E, F1, and bottomside F2 profile shapes, or height uncertainty boundaries (upper and lower).
class IonoObservationProfileDensityShiftedChebyshevEntryIngest {
  IonoObservationProfileDensityShiftedChebyshevEntryIngest._(this._bc, this._bcOffset);
  factory IonoObservationProfileDensityShiftedChebyshevEntryIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IonoObservationProfileDensityShiftedChebyshevEntryIngest> reader = _IonoObservationProfileDensityShiftedChebyshevEntryIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The ionospheric plasma layer.
  ///  Example: /// Example: F2
  ///  Constraints: No constraints specified.
  String? get layer => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Start frequency of the layer, in MHz.
  ///  Example: /// Example: 0.2
  ///  Constraints: No constraints specified.
  double get fstart => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  Stop frequency of the layer, in MHz.
  ///  Example: /// Example: 1.39
  ///  Constraints: No constraints specified.
  double get fstop => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  Peak height of the layer, in kilometers.
  ///  Example: /// Example: 110.1
  ///  Constraints: No constraints specified.
  double get peakheight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Height at which density is half of the peak Nm, in kilometers.
  ///  Example: /// Example: 210.1
  ///  Constraints: No constraints specified.
  double get zhalfNm => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Number of coefficients in the expansion.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get n => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  Array of coefficients.
  ///  Example: /// Example: [-11.2, -10.536, 3.357, -0.888, 0.155]
  ///  Constraints: No constraints specified.
  List<String>? get coeffs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 16);
  ///  Best fit error.
  ///  Example: /// Example: 0.02
  ///  Constraints: No constraints specified.
  double get error => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);

  @override
  String toString() {
    return 'IonoObservationProfileDensityShiftedChebyshevEntryIngest{layer: ${layer}, fstart: ${fstart}, fstop: ${fstop}, peakheight: ${peakheight}, zhalfNm: ${zhalfNm}, n: ${n}, coeffs: ${coeffs}, error: ${error}}';
  }
}

class _IonoObservationProfileDensityShiftedChebyshevEntryIngestReader extends fb.TableReader<IonoObservationProfileDensityShiftedChebyshevEntryIngest> {
  const _IonoObservationProfileDensityShiftedChebyshevEntryIngestReader();

  @override
  IonoObservationProfileDensityShiftedChebyshevEntryIngest createObject(fb.BufferContext bc, int offset) => 
    IonoObservationProfileDensityShiftedChebyshevEntryIngest._(bc, offset);
}

class IonoObservationProfileDensityShiftedChebyshevEntryIngestBuilder {
  IonoObservationProfileDensityShiftedChebyshevEntryIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addLayerOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFstart(double? fstart) {
    fbBuilder.addFloat64(1, fstart);
    return fbBuilder.offset;
  }
  int addFstop(double? fstop) {
    fbBuilder.addFloat64(2, fstop);
    return fbBuilder.offset;
  }
  int addPeakheight(double? peakheight) {
    fbBuilder.addFloat64(3, peakheight);
    return fbBuilder.offset;
  }
  int addZhalfNm(double? zhalfNm) {
    fbBuilder.addFloat64(4, zhalfNm);
    return fbBuilder.offset;
  }
  int addN(int? n) {
    fbBuilder.addInt32(5, n);
    return fbBuilder.offset;
  }
  int addCoeffsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addError(double? error) {
    fbBuilder.addFloat64(7, error);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IonoObservationProfileDensityShiftedChebyshevEntryIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _layer;
  final double? _fstart;
  final double? _fstop;
  final double? _peakheight;
  final double? _zhalfNm;
  final int? _n;
  final List<String>? _coeffs;
  final double? _error;

  IonoObservationProfileDensityShiftedChebyshevEntryIngestObjectBuilder({
    String? layer,
    double? fstart,
    double? fstop,
    double? peakheight,
    double? zhalfNm,
    int? n,
    List<String>? coeffs,
    double? error,
  })
      : _layer = layer,
        _fstart = fstart,
        _fstop = fstop,
        _peakheight = peakheight,
        _zhalfNm = zhalfNm,
        _n = n,
        _coeffs = coeffs,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? layerOffset = _layer == null ? null
        : fbBuilder.writeString(_layer!);
    final int? coeffsOffset = _coeffs == null ? null
        : fbBuilder.writeList(_coeffs!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, layerOffset);
    fbBuilder.addFloat64(1, _fstart);
    fbBuilder.addFloat64(2, _fstop);
    fbBuilder.addFloat64(3, _peakheight);
    fbBuilder.addFloat64(4, _zhalfNm);
    fbBuilder.addInt32(5, _n);
    fbBuilder.addOffset(6, coeffsOffset);
    fbBuilder.addFloat64(7, _error);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
