// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Remarks associated with this LogisticsSupport record.
class LogisticsSegmentsAbridged {
  LogisticsSegmentsAbridged._(this._bc, this._bcOffset);
  factory LogisticsSegmentsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LogisticsSegmentsAbridged> reader = _LogisticsSegmentsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Used to sequence the segments in the transportation plan.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get segmentNumber => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  ///  Transportation mode.  AMC airlift, Commercial airlift, Other, or surface transportation.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 1, Maximum length = 1
  String? get modeCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The type of mission (e.g. SAAM, CHNL, etc.).
  ///  Example: /// Example: SAAM
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get missionType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The unique identifier of the mission to which this logistics record is assigned.
  ///  Example: /// Example: EXAMPLE-UUID
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get idMission => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The GDSS mission ID for this segment.
  ///  Example: /// Example: 2001101RF01202307062205
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get extMissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The user generated identifier for an air mission subgroup.
  ///  Example: /// Example: TAM308901196
  ///  Constraints: Minimum length = 0, Maximum length = 12
  String? get missionNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Start air mission itinerary point identifier.
  ///  Example: /// Example: 200
  ///  Constraints: No constraints specified.
  int get itin => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  The identifier that represents a specific aircraft within an aircraft type.
  ///  Example: /// Example: N819AX
  ///  Constraints: Minimum length = 0, Maximum length = 7
  String? get segTailNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  ///  Example: /// Example: B7772E
  ///  Constraints: Minimum length = 0, Maximum length = 30
  String? get segAircraftMds => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Airport ICAO departure code.
  ///  Example: /// Example: PHIK
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get departureIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Actual departure time to the segment destination, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T19:20:00.123Z
  ///  Constraints: No constraints specified.
  String? get segActDepTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Airport ICAO arrival code.
  ///  Example: /// Example: YBCS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get arrivalIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Actual arrival time to segment destination, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T19:20:00.123Z
  ///  Constraints: No constraints specified.
  String? get segActArrTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  GC. LGTPS_C_DT_EST_DEP.  GD2: Estimated departure time from the segment origin. Only supplied when the segment is not attached to a Mission, otherwise the ETD is derived from the Mission segment origin point. This datetime should be in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T19:20:00.123Z
  ///  Constraints: No constraints specified.
  String? get segEstDepTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  GC. LGTPS_C_DT_EST_ARR.  GD2: Estimated arrival time to the segment destination. Only supplied when the segment is not attached to a Mission, otherwise the ETA is derived from the Mission segment destination point. This datetime should be in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T19:20:00.123Z
  ///  Constraints: No constraints specified.
  String? get segEstArrTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);

  @override
  String toString() {
    return 'LogisticsSegmentsAbridged{segmentNumber: ${segmentNumber}, modeCode: ${modeCode}, missionType: ${missionType}, idMission: ${idMission}, extMissionId: ${extMissionId}, missionNumber: ${missionNumber}, itin: ${itin}, segTailNumber: ${segTailNumber}, segAircraftMds: ${segAircraftMds}, departureIcao: ${departureIcao}, segActDepTime: ${segActDepTime}, arrivalIcao: ${arrivalIcao}, segActArrTime: ${segActArrTime}, segEstDepTime: ${segEstDepTime}, segEstArrTime: ${segEstArrTime}}';
  }
}

class _LogisticsSegmentsAbridgedReader extends fb.TableReader<LogisticsSegmentsAbridged> {
  const _LogisticsSegmentsAbridgedReader();

  @override
  LogisticsSegmentsAbridged createObject(fb.BufferContext bc, int offset) => 
    LogisticsSegmentsAbridged._(bc, offset);
}

class LogisticsSegmentsAbridgedBuilder {
  LogisticsSegmentsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(15);
  }

  int addSegmentNumber(int? segmentNumber) {
    fbBuilder.addInt32(0, segmentNumber);
    return fbBuilder.offset;
  }
  int addModeCodeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMissionTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdMissionOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addExtMissionIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMissionNumberOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addItin(int? itin) {
    fbBuilder.addInt32(6, itin);
    return fbBuilder.offset;
  }
  int addSegTailNumberOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addSegAircraftMdsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addDepartureIcaoOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSegActDepTimeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addArrivalIcaoOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addSegActArrTimeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addSegEstDepTimeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addSegEstArrTimeOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LogisticsSegmentsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final int? _segmentNumber;
  final String? _modeCode;
  final String? _missionType;
  final String? _idMission;
  final String? _extMissionId;
  final String? _missionNumber;
  final int? _itin;
  final String? _segTailNumber;
  final String? _segAircraftMds;
  final String? _departureIcao;
  final String? _segActDepTime;
  final String? _arrivalIcao;
  final String? _segActArrTime;
  final String? _segEstDepTime;
  final String? _segEstArrTime;

  LogisticsSegmentsAbridgedObjectBuilder({
    int? segmentNumber,
    String? modeCode,
    String? missionType,
    String? idMission,
    String? extMissionId,
    String? missionNumber,
    int? itin,
    String? segTailNumber,
    String? segAircraftMds,
    String? departureIcao,
    String? segActDepTime,
    String? arrivalIcao,
    String? segActArrTime,
    String? segEstDepTime,
    String? segEstArrTime,
  })
      : _segmentNumber = segmentNumber,
        _modeCode = modeCode,
        _missionType = missionType,
        _idMission = idMission,
        _extMissionId = extMissionId,
        _missionNumber = missionNumber,
        _itin = itin,
        _segTailNumber = segTailNumber,
        _segAircraftMds = segAircraftMds,
        _departureIcao = departureIcao,
        _segActDepTime = segActDepTime,
        _arrivalIcao = arrivalIcao,
        _segActArrTime = segActArrTime,
        _segEstDepTime = segEstDepTime,
        _segEstArrTime = segEstArrTime;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? modeCodeOffset = _modeCode == null ? null
        : fbBuilder.writeString(_modeCode!);
    final int? missionTypeOffset = _missionType == null ? null
        : fbBuilder.writeString(_missionType!);
    final int? idMissionOffset = _idMission == null ? null
        : fbBuilder.writeString(_idMission!);
    final int? extMissionIdOffset = _extMissionId == null ? null
        : fbBuilder.writeString(_extMissionId!);
    final int? missionNumberOffset = _missionNumber == null ? null
        : fbBuilder.writeString(_missionNumber!);
    final int? segTailNumberOffset = _segTailNumber == null ? null
        : fbBuilder.writeString(_segTailNumber!);
    final int? segAircraftMdsOffset = _segAircraftMds == null ? null
        : fbBuilder.writeString(_segAircraftMds!);
    final int? departureIcaoOffset = _departureIcao == null ? null
        : fbBuilder.writeString(_departureIcao!);
    final int? segActDepTimeOffset = _segActDepTime == null ? null
        : fbBuilder.writeString(_segActDepTime!);
    final int? arrivalIcaoOffset = _arrivalIcao == null ? null
        : fbBuilder.writeString(_arrivalIcao!);
    final int? segActArrTimeOffset = _segActArrTime == null ? null
        : fbBuilder.writeString(_segActArrTime!);
    final int? segEstDepTimeOffset = _segEstDepTime == null ? null
        : fbBuilder.writeString(_segEstDepTime!);
    final int? segEstArrTimeOffset = _segEstArrTime == null ? null
        : fbBuilder.writeString(_segEstArrTime!);
    fbBuilder.startTable(15);
    fbBuilder.addInt32(0, _segmentNumber);
    fbBuilder.addOffset(1, modeCodeOffset);
    fbBuilder.addOffset(2, missionTypeOffset);
    fbBuilder.addOffset(3, idMissionOffset);
    fbBuilder.addOffset(4, extMissionIdOffset);
    fbBuilder.addOffset(5, missionNumberOffset);
    fbBuilder.addInt32(6, _itin);
    fbBuilder.addOffset(7, segTailNumberOffset);
    fbBuilder.addOffset(8, segAircraftMdsOffset);
    fbBuilder.addOffset(9, departureIcaoOffset);
    fbBuilder.addOffset(10, segActDepTimeOffset);
    fbBuilder.addOffset(11, arrivalIcaoOffset);
    fbBuilder.addOffset(12, segActArrTimeOffset);
    fbBuilder.addOffset(13, segEstDepTimeOffset);
    fbBuilder.addOffset(14, segEstArrTimeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
