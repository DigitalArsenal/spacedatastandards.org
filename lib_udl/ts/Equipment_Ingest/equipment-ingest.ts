// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Equipment_Ingest_dataMode_Enum } from './equipment-ingest-data-mode-enum.js';


/**
 * /// Properties and characteristics of equipment that can be associated with a site or other entity.
 */
export class Equipment_Ingest implements flatbuffers.IUnpackableObject<Equipment_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Equipment_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEquipment_Ingest(bb:flatbuffers.ByteBuffer, obj?:Equipment_Ingest):Equipment_Ingest {
  return (obj || new Equipment_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEquipment_Ingest(bb:flatbuffers.ByteBuffer, obj?:Equipment_Ingest):Equipment_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Equipment_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EQUI');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Parent equipment record associated with this equipment record.
 * Example: /// Example: PARENT-EQUIPMENT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idParentEquipment():string|null
idParentEquipment(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idParentEquipment(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Site Entity associated with the equipment record.
 * Example: /// Example: SITE-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSite():string|null
idSite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the operating unit associated with the equipment record.
 * Example: /// Example: UNIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOperatingUnit():string|null
idOperatingUnit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOperatingUnit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Equipment record from the originating system.
 * Example: /// Example: ORIG-EQP-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
altEqpId():string|null
altEqpId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altEqpId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Designated equipment code assigned to the item of equipment or an abbreviation record type unique identifier. Users should consult the data provider for information on the equipment code structure.
 * Example: /// Example: X12345
 * Constraints: Minimum length = 0, Maximum length = 7
 */
eqpCode():string|null
eqpCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eqpCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Uniquely identifies each item or group of equipment associated with a unit, facility or site.
 * Example: /// Example: 001
 * Constraints: Minimum length = 0, Maximum length = 3
 */
eqpIdNum():string|null
eqpIdNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eqpIdNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The DoD Standard Country Code designator for the country or political entity to which the equipment geographic coordinates reside. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
 * Example: /// Example: IQ
 * Constraints: Minimum length = 1, Maximum length = 4
 */
countryCode():string|null
countryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
 * Example: /// Example: IZ
 * Constraints: Minimum length = 0, Maximum length = 4
 */
altCountryCode():string|null
altCountryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altCountryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * World Aeronautical Chart identifier for the area in which a designated place is located.
 * Example: /// Example: 0427
 * Constraints: Minimum length = 0, Maximum length = 4
 */
wac():string|null
wac(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
wac(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Provider specific sequential number assigned to the equipment.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
seqNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Generic type this specific piece of equipment belongs to, and the identifying nomenclature which describes the equipment.
 * Example: /// Example: AMPHIBIOUS WARFARE SHIP
 * Constraints: Minimum length = 0, Maximum length = 54
 */
nomen():string|null
nomen(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nomen(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: OPR
 * Constraints: Minimum length = 0, Maximum length = 3
 */
operStatus():string|null
operStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The physical manner of being or state of existence of the entity.  A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: RDY
 * Constraints: Minimum length = 0, Maximum length = 4
 */
condition():string|null
condition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
condition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Availability of the entity relative to its condition.  Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 4
 */
conditionAvail():string|null
conditionAvail(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
conditionAvail(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
 * Example: /// Example: 7
 * Constraints: No constraints specified.
 */
eval():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Functional Production Area (FPA) under the Shared Production Program (SPP).  Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: NOB
 * Constraints: Minimum length = 0, Maximum length = 5
 */
fpa():string|null
fpa(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fpa(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the function or mission of this equipment, which may or may not be engaged in at any particular time.  Typically refers to a unit, organization, or installation/facility performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: OCC
 * Constraints: Minimum length = 0, Maximum length = 3
 */
function_():string|null
function_(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
function_(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
 * ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
 * FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
 * HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
 * FAKER: Friendly track, object, or entity acting as an exercise hostile.
 * JOKER: Friendly track, object, or entity acting as an exercise suspect.
 * NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
 * PENDING: Track object which has not been evaluated.
 * SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
 * UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
 * Example: /// Example: FRIEND
 * Constraints: Minimum length = 0, Maximum length = 32
 */
ident():string|null
ident(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ident(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The DoD Standard Country Code designator for the country or political entity to which the equipment owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
 * Example: /// Example: OTHR
 * Constraints: Minimum length = 0, Maximum length = 4
 */
allegiance():string|null
allegiance(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
allegiance(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
 * Example: /// Example: HL
 * Constraints: Minimum length = 0, Maximum length = 4
 */
altAllegiance():string|null
altAllegiance(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altAllegiance(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the reason that the equipment is at that location. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: GR
 * Constraints: Minimum length = 0, Maximum length = 9
 */
locReason():string|null
locReason(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
locReason(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Internationally recognized water area in which the vessel is most likely to be deployed or in which it normally operates most frequently.
 * Example: /// Example: Territorial Sea
 * Constraints: Minimum length = 0, Maximum length = 32
 */
operAreaPrimary():string|null
operAreaPrimary(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operAreaPrimary(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Principal operational function being performed.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: JG
 * Constraints: Minimum length = 0, Maximum length = 4
 */
functPrimary():string|null
functPrimary(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
functPrimary(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: WGS
 * Constraints: Minimum length = 0, Maximum length = 16
 */
coordDatum():string|null
coordDatum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
coordDatum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc. specified in degrees, minute, and seconds.
 * Pos. 1-2.  Latitude Degrees     [00-90]
 * Pos. 3-4.  Latitude Minutes     [00-59]
 * Pos. 5-6.  Latitude Seconds     [00-59]
 * Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
 * Pos. 10. Latitude Hemisphere       [NS] 
 * Pos. 11-13. Longitude Degrees     [00-180] 
 * Pos. 14-15. Longitude Minutes     [00-59] 
 * Pos. 16-17. Longitude Seconds     [00-59] 
 * Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
 * Pos. 21. Longitude Hemisphere     [EW]
 * Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]].
 * Example: /// Example: 340000000N0430000000E
 * Constraints: Minimum length = 0, Maximum length = 21
 */
coord():string|null
coord(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
coord(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the plus or minus error assessed against the method used to derive the coordinate.
 * Example: /// Example: 12.345
 * Constraints: No constraints specified.
 */
coordDerivAcc():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 39.019242
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: -104.251659
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Ground elevation, in meters, of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
 * Example: /// Example: 123.45
 * Constraints: No constraints specified.
 */
elevMsl():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy. Confidence level has a range of values from 0 to 100, with 100 being highest level of confidence.
 * Example: /// Example: 50
 * Constraints: No constraints specified.
 */
elevMslConfLvl():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Indicates the plus or minus error assessed against the method used to derive the elevation, measured in meters.
 * Example: /// Example: 12.34
 * Constraints: No constraints specified.
 */
elevMslDerivAcc():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The distance between Mean Sea Level and a referenced ellipsoid, measured in meters.
 * Example: /// Example: 12.34
 * Constraints: No constraints specified.
 */
geoidalMslSep():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Indicates the grid system used in the development of the milGrid coordinates. Values are:
 * UPS - Universal Polar System
 * UTM - Universal Transverse Mercator.
 * Example: /// Example: UTM
 * Constraints: Minimum length = 0, Maximum length = 3
 */
milGridSys():string|null
milGridSys(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milGridSys(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
 * 4Q (grid zone designator, GZD)
 * FJ (the 100,000-meter square identifier)
 * 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
 * Example: /// Example: 4QFJ12345678
 * Constraints: Minimum length = 0, Maximum length = 15
 */
milGrid():string|null
milGrid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milGrid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Universal Transverse Mercator (UTM) grid coordinates.
 * Pos. 1-2, UTM Zone Column   [01-60
 * Pos. 3, UTM Zone Row   [C-HJ-NP-X]
 * Pos. 4, UTM False Easting   [0-9]
 * Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
 * Pos. 10-11, UTM False Northing    [0-9][0-9]
 * Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
 * Example: /// Example: 19P4390691376966
 * Constraints: Minimum length = 0, Maximum length = 16
 */
utm():string|null
utm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
utm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
 * Example: /// Example: AL006
 * Constraints: Minimum length = 0, Maximum length = 5
 */
airDefArea():string|null
airDefArea(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
airDefArea(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: IZ07
 * Constraints: Minimum length = 0, Maximum length = 7
 */
polSubdiv():string|null
polSubdiv(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
polSubdiv(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Relative to the parent entity, the total number of military personnel or equipment assessed to be on-hand (OH).
 * Example: /// Example: 7
 * Constraints: No constraints specified.
 */
qtyOh():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
 * Example: /// Example: SOGPU----------
 * Constraints: Minimum length = 0, Maximum length = 15
 */
symCode():string|null
symCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
symCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the importance of the equipment. Referenced, but not constrained to, the following class ratings type classifications.
 * 0 - Not of significant importance of the system
 * 1 - Primary importance to system
 * 2 - Secondary importance to system
 * 3 - Tertiary importance to system
 * O - Other. Explain in Remarks.
 * Example: /// Example: 1
 * Constraints: Minimum length = 0, Maximum length = 1
 */
classRating():string|null
classRating(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classRating(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Referenced, but not constrained to, the following record status type classifications.
 * A - Active
 * I - Inactive
 * K - Acknowledged
 * L - Local
 * Q - A nominated (NOM) or Data Change Request (DCR) record
 * R - Production reduced by CMD decision
 * W - Working Record.
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 1
 */
recStatus():string|null
recStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
 * Example: /// Example: 2008-06-10
 * Constraints: No constraints specified.
 */
reviewDate():string|null
reviewDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reviewDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Responsible Producer - Organization that is responsible for the maintenance of the record.
 * Example: /// Example: RT
 * Constraints: Minimum length = 0, Maximum length = 4
 */
resProd():string|null
resProd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
resProd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: Provider Reference Documentation
 * Constraints: Minimum length = 0, Maximum length = 128
 */
referenceDoc():string|null
referenceDoc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
referenceDoc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of UDL record types such as AIRCRAFT, VESSEL, EO, MTI that are related to this equipment record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
 * Example: /// Example: ['AIRCRAFT']
 * Constraints: No constraints specified.
 */
srcTyps(index: number):string
srcTyps(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcTyps(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcTypsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UUID(s) of the UDL data record(s) that are related to this equipment record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
 * Example: /// Example: ['SRC_ID_1']
 * Constraints: No constraints specified.
 */
srcIds(index: number):string
srcIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Equipment_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Equipment_Ingest_dataMode_Enum.REAL;
}

static startEquipment_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(53);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdParentEquipment(builder:flatbuffers.Builder, idParentEquipmentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idParentEquipmentOffset, 0);
}

static addIdSite(builder:flatbuffers.Builder, idSiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idSiteOffset, 0);
}

static addIdOperatingUnit(builder:flatbuffers.Builder, idOperatingUnitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idOperatingUnitOffset, 0);
}

static addAltEqpId(builder:flatbuffers.Builder, altEqpIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, altEqpIdOffset, 0);
}

static addEqpCode(builder:flatbuffers.Builder, eqpCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, eqpCodeOffset, 0);
}

static addEqpIdNum(builder:flatbuffers.Builder, eqpIdNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, eqpIdNumOffset, 0);
}

static addCountryCode(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, countryCodeOffset, 0);
}

static addAltCountryCode(builder:flatbuffers.Builder, altCountryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, altCountryCodeOffset, 0);
}

static addWac(builder:flatbuffers.Builder, wacOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, wacOffset, 0);
}

static addSeqNum(builder:flatbuffers.Builder, seqNum:number) {
  builder.addFieldInt32(11, seqNum, 0);
}

static addNomen(builder:flatbuffers.Builder, nomenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, nomenOffset, 0);
}

static addOperStatus(builder:flatbuffers.Builder, operStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, operStatusOffset, 0);
}

static addCondition(builder:flatbuffers.Builder, conditionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, conditionOffset, 0);
}

static addConditionAvail(builder:flatbuffers.Builder, conditionAvailOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, conditionAvailOffset, 0);
}

static addEval(builder:flatbuffers.Builder, eval:number) {
  builder.addFieldInt32(16, eval, 0);
}

static addFpa(builder:flatbuffers.Builder, fpaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, fpaOffset, 0);
}

static addFunction(builder:flatbuffers.Builder, function_Offset:flatbuffers.Offset) {
  builder.addFieldOffset(18, function_Offset, 0);
}

static addIdent(builder:flatbuffers.Builder, identOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, identOffset, 0);
}

static addAllegiance(builder:flatbuffers.Builder, allegianceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, allegianceOffset, 0);
}

static addAltAllegiance(builder:flatbuffers.Builder, altAllegianceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, altAllegianceOffset, 0);
}

static addLocReason(builder:flatbuffers.Builder, locReasonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, locReasonOffset, 0);
}

static addOperAreaPrimary(builder:flatbuffers.Builder, operAreaPrimaryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, operAreaPrimaryOffset, 0);
}

static addFunctPrimary(builder:flatbuffers.Builder, functPrimaryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, functPrimaryOffset, 0);
}

static addCoordDatum(builder:flatbuffers.Builder, coordDatumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, coordDatumOffset, 0);
}

static addCoord(builder:flatbuffers.Builder, coordOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, coordOffset, 0);
}

static addCoordDerivAcc(builder:flatbuffers.Builder, coordDerivAcc:number) {
  builder.addFieldFloat64(27, coordDerivAcc, 0.0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(28, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(29, lon, 0.0);
}

static addElevMsl(builder:flatbuffers.Builder, elevMsl:number) {
  builder.addFieldFloat64(30, elevMsl, 0.0);
}

static addElevMslConfLvl(builder:flatbuffers.Builder, elevMslConfLvl:number) {
  builder.addFieldInt32(31, elevMslConfLvl, 0);
}

static addElevMslDerivAcc(builder:flatbuffers.Builder, elevMslDerivAcc:number) {
  builder.addFieldFloat64(32, elevMslDerivAcc, 0.0);
}

static addGeoidalMslSep(builder:flatbuffers.Builder, geoidalMslSep:number) {
  builder.addFieldFloat64(33, geoidalMslSep, 0.0);
}

static addMilGridSys(builder:flatbuffers.Builder, milGridSysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, milGridSysOffset, 0);
}

static addMilGrid(builder:flatbuffers.Builder, milGridOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, milGridOffset, 0);
}

static addUtm(builder:flatbuffers.Builder, utmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, utmOffset, 0);
}

static addAirDefArea(builder:flatbuffers.Builder, airDefAreaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, airDefAreaOffset, 0);
}

static addPolSubdiv(builder:flatbuffers.Builder, polSubdivOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, polSubdivOffset, 0);
}

static addQtyOh(builder:flatbuffers.Builder, qtyOh:number) {
  builder.addFieldInt32(39, qtyOh, 0);
}

static addSymCode(builder:flatbuffers.Builder, symCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, symCodeOffset, 0);
}

static addClassRating(builder:flatbuffers.Builder, classRatingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, classRatingOffset, 0);
}

static addRecStatus(builder:flatbuffers.Builder, recStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, recStatusOffset, 0);
}

static addReviewDate(builder:flatbuffers.Builder, reviewDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, reviewDateOffset, 0);
}

static addResProd(builder:flatbuffers.Builder, resProdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, resProdOffset, 0);
}

static addReferenceDoc(builder:flatbuffers.Builder, referenceDocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, referenceDocOffset, 0);
}

static addSrcTyps(builder:flatbuffers.Builder, srcTypsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, srcTypsOffset, 0);
}

static createSrcTypsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcTypsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSrcIds(builder:flatbuffers.Builder, srcIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, srcIdsOffset, 0);
}

static createSrcIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Equipment_Ingest_dataMode_Enum) {
  builder.addFieldInt8(52, dataMode, Equipment_Ingest_dataMode_Enum.REAL);
}

static endEquipment_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEquipment_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EQUI');
}

static finishSizePrefixedEquipment_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EQUI', true);
}

static createEquipment_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idParentEquipmentOffset:flatbuffers.Offset, idSiteOffset:flatbuffers.Offset, idOperatingUnitOffset:flatbuffers.Offset, altEqpIdOffset:flatbuffers.Offset, eqpCodeOffset:flatbuffers.Offset, eqpIdNumOffset:flatbuffers.Offset, countryCodeOffset:flatbuffers.Offset, altCountryCodeOffset:flatbuffers.Offset, wacOffset:flatbuffers.Offset, seqNum:number, nomenOffset:flatbuffers.Offset, operStatusOffset:flatbuffers.Offset, conditionOffset:flatbuffers.Offset, conditionAvailOffset:flatbuffers.Offset, eval:number, fpaOffset:flatbuffers.Offset, function_Offset:flatbuffers.Offset, identOffset:flatbuffers.Offset, allegianceOffset:flatbuffers.Offset, altAllegianceOffset:flatbuffers.Offset, locReasonOffset:flatbuffers.Offset, operAreaPrimaryOffset:flatbuffers.Offset, functPrimaryOffset:flatbuffers.Offset, coordDatumOffset:flatbuffers.Offset, coordOffset:flatbuffers.Offset, coordDerivAcc:number, lat:number, lon:number, elevMsl:number, elevMslConfLvl:number, elevMslDerivAcc:number, geoidalMslSep:number, milGridSysOffset:flatbuffers.Offset, milGridOffset:flatbuffers.Offset, utmOffset:flatbuffers.Offset, airDefAreaOffset:flatbuffers.Offset, polSubdivOffset:flatbuffers.Offset, qtyOh:number, symCodeOffset:flatbuffers.Offset, classRatingOffset:flatbuffers.Offset, recStatusOffset:flatbuffers.Offset, reviewDateOffset:flatbuffers.Offset, resProdOffset:flatbuffers.Offset, referenceDocOffset:flatbuffers.Offset, srcTypsOffset:flatbuffers.Offset, srcIdsOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:Equipment_Ingest_dataMode_Enum):flatbuffers.Offset {
  Equipment_Ingest.startEquipment_Ingest(builder);
  Equipment_Ingest.addId(builder, idOffset);
  Equipment_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  Equipment_Ingest.addIdParentEquipment(builder, idParentEquipmentOffset);
  Equipment_Ingest.addIdSite(builder, idSiteOffset);
  Equipment_Ingest.addIdOperatingUnit(builder, idOperatingUnitOffset);
  Equipment_Ingest.addAltEqpId(builder, altEqpIdOffset);
  Equipment_Ingest.addEqpCode(builder, eqpCodeOffset);
  Equipment_Ingest.addEqpIdNum(builder, eqpIdNumOffset);
  Equipment_Ingest.addCountryCode(builder, countryCodeOffset);
  Equipment_Ingest.addAltCountryCode(builder, altCountryCodeOffset);
  Equipment_Ingest.addWac(builder, wacOffset);
  Equipment_Ingest.addSeqNum(builder, seqNum);
  Equipment_Ingest.addNomen(builder, nomenOffset);
  Equipment_Ingest.addOperStatus(builder, operStatusOffset);
  Equipment_Ingest.addCondition(builder, conditionOffset);
  Equipment_Ingest.addConditionAvail(builder, conditionAvailOffset);
  Equipment_Ingest.addEval(builder, eval);
  Equipment_Ingest.addFpa(builder, fpaOffset);
  Equipment_Ingest.addFunction(builder, function_Offset);
  Equipment_Ingest.addIdent(builder, identOffset);
  Equipment_Ingest.addAllegiance(builder, allegianceOffset);
  Equipment_Ingest.addAltAllegiance(builder, altAllegianceOffset);
  Equipment_Ingest.addLocReason(builder, locReasonOffset);
  Equipment_Ingest.addOperAreaPrimary(builder, operAreaPrimaryOffset);
  Equipment_Ingest.addFunctPrimary(builder, functPrimaryOffset);
  Equipment_Ingest.addCoordDatum(builder, coordDatumOffset);
  Equipment_Ingest.addCoord(builder, coordOffset);
  Equipment_Ingest.addCoordDerivAcc(builder, coordDerivAcc);
  Equipment_Ingest.addLat(builder, lat);
  Equipment_Ingest.addLon(builder, lon);
  Equipment_Ingest.addElevMsl(builder, elevMsl);
  Equipment_Ingest.addElevMslConfLvl(builder, elevMslConfLvl);
  Equipment_Ingest.addElevMslDerivAcc(builder, elevMslDerivAcc);
  Equipment_Ingest.addGeoidalMslSep(builder, geoidalMslSep);
  Equipment_Ingest.addMilGridSys(builder, milGridSysOffset);
  Equipment_Ingest.addMilGrid(builder, milGridOffset);
  Equipment_Ingest.addUtm(builder, utmOffset);
  Equipment_Ingest.addAirDefArea(builder, airDefAreaOffset);
  Equipment_Ingest.addPolSubdiv(builder, polSubdivOffset);
  Equipment_Ingest.addQtyOh(builder, qtyOh);
  Equipment_Ingest.addSymCode(builder, symCodeOffset);
  Equipment_Ingest.addClassRating(builder, classRatingOffset);
  Equipment_Ingest.addRecStatus(builder, recStatusOffset);
  Equipment_Ingest.addReviewDate(builder, reviewDateOffset);
  Equipment_Ingest.addResProd(builder, resProdOffset);
  Equipment_Ingest.addReferenceDoc(builder, referenceDocOffset);
  Equipment_Ingest.addSrcTyps(builder, srcTypsOffset);
  Equipment_Ingest.addSrcIds(builder, srcIdsOffset);
  Equipment_Ingest.addCreatedAt(builder, createdAtOffset);
  Equipment_Ingest.addCreatedBy(builder, createdByOffset);
  Equipment_Ingest.addSource(builder, sourceOffset);
  Equipment_Ingest.addOrigin(builder, originOffset);
  Equipment_Ingest.addDataMode(builder, dataMode);
  return Equipment_Ingest.endEquipment_Ingest(builder);
}

unpack(): Equipment_IngestT {
  return new Equipment_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idParentEquipment(),
    this.idSite(),
    this.idOperatingUnit(),
    this.altEqpId(),
    this.eqpCode(),
    this.eqpIdNum(),
    this.countryCode(),
    this.altCountryCode(),
    this.wac(),
    this.seqNum(),
    this.nomen(),
    this.operStatus(),
    this.condition(),
    this.conditionAvail(),
    this.eval(),
    this.fpa(),
    this.function_(),
    this.ident(),
    this.allegiance(),
    this.altAllegiance(),
    this.locReason(),
    this.operAreaPrimary(),
    this.functPrimary(),
    this.coordDatum(),
    this.coord(),
    this.coordDerivAcc(),
    this.lat(),
    this.lon(),
    this.elevMsl(),
    this.elevMslConfLvl(),
    this.elevMslDerivAcc(),
    this.geoidalMslSep(),
    this.milGridSys(),
    this.milGrid(),
    this.utm(),
    this.airDefArea(),
    this.polSubdiv(),
    this.qtyOh(),
    this.symCode(),
    this.classRating(),
    this.recStatus(),
    this.reviewDate(),
    this.resProd(),
    this.referenceDoc(),
    this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTyps_Length()),
    this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIds_Length()),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode()
  );
}


unpackTo(_o: Equipment_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idParentEquipment = this.idParentEquipment();
  _o.idSite = this.idSite();
  _o.idOperatingUnit = this.idOperatingUnit();
  _o.altEqpId = this.altEqpId();
  _o.eqpCode = this.eqpCode();
  _o.eqpIdNum = this.eqpIdNum();
  _o.countryCode = this.countryCode();
  _o.altCountryCode = this.altCountryCode();
  _o.wac = this.wac();
  _o.seqNum = this.seqNum();
  _o.nomen = this.nomen();
  _o.operStatus = this.operStatus();
  _o.condition = this.condition();
  _o.conditionAvail = this.conditionAvail();
  _o.eval = this.eval();
  _o.fpa = this.fpa();
  _o.function_ = this.function_();
  _o.ident = this.ident();
  _o.allegiance = this.allegiance();
  _o.altAllegiance = this.altAllegiance();
  _o.locReason = this.locReason();
  _o.operAreaPrimary = this.operAreaPrimary();
  _o.functPrimary = this.functPrimary();
  _o.coordDatum = this.coordDatum();
  _o.coord = this.coord();
  _o.coordDerivAcc = this.coordDerivAcc();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.elevMsl = this.elevMsl();
  _o.elevMslConfLvl = this.elevMslConfLvl();
  _o.elevMslDerivAcc = this.elevMslDerivAcc();
  _o.geoidalMslSep = this.geoidalMslSep();
  _o.milGridSys = this.milGridSys();
  _o.milGrid = this.milGrid();
  _o.utm = this.utm();
  _o.airDefArea = this.airDefArea();
  _o.polSubdiv = this.polSubdiv();
  _o.qtyOH = this.qtyOh();
  _o.symCode = this.symCode();
  _o.classRating = this.classRating();
  _o.recStatus = this.recStatus();
  _o.reviewDate = this.reviewDate();
  _o.resProd = this.resProd();
  _o.referenceDoc = this.referenceDoc();
  _o.srcTyps = this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTyps_Length());
  _o.srcIds = this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIds_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
}
}

export class Equipment_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idParentEquipment: string|Uint8Array|null = null,
  public idSite: string|Uint8Array|null = null,
  public idOperatingUnit: string|Uint8Array|null = null,
  public altEqpId: string|Uint8Array|null = null,
  public eqpCode: string|Uint8Array|null = null,
  public eqpIdNum: string|Uint8Array|null = null,
  public countryCode: string|Uint8Array|null = null,
  public altCountryCode: string|Uint8Array|null = null,
  public wac: string|Uint8Array|null = null,
  public seqNum: number = 0,
  public nomen: string|Uint8Array|null = null,
  public operStatus: string|Uint8Array|null = null,
  public condition: string|Uint8Array|null = null,
  public conditionAvail: string|Uint8Array|null = null,
  public eval: number = 0,
  public fpa: string|Uint8Array|null = null,
  public function_: string|Uint8Array|null = null,
  public ident: string|Uint8Array|null = null,
  public allegiance: string|Uint8Array|null = null,
  public altAllegiance: string|Uint8Array|null = null,
  public locReason: string|Uint8Array|null = null,
  public operAreaPrimary: string|Uint8Array|null = null,
  public functPrimary: string|Uint8Array|null = null,
  public coordDatum: string|Uint8Array|null = null,
  public coord: string|Uint8Array|null = null,
  public coordDerivAcc: number = 0.0,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public elevMsl: number = 0.0,
  public elevMslConfLvl: number = 0,
  public elevMslDerivAcc: number = 0.0,
  public geoidalMslSep: number = 0.0,
  public milGridSys: string|Uint8Array|null = null,
  public milGrid: string|Uint8Array|null = null,
  public utm: string|Uint8Array|null = null,
  public airDefArea: string|Uint8Array|null = null,
  public polSubdiv: string|Uint8Array|null = null,
  public qtyOH: number = 0,
  public symCode: string|Uint8Array|null = null,
  public classRating: string|Uint8Array|null = null,
  public recStatus: string|Uint8Array|null = null,
  public reviewDate: string|Uint8Array|null = null,
  public resProd: string|Uint8Array|null = null,
  public referenceDoc: string|Uint8Array|null = null,
  public srcTyps: (string)[] = [],
  public srcIds: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: Equipment_Ingest_dataMode_Enum = Equipment_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idParentEquipment = (this.idParentEquipment !== null ? builder.createString(this.idParentEquipment!) : 0);
  const idSite = (this.idSite !== null ? builder.createString(this.idSite!) : 0);
  const idOperatingUnit = (this.idOperatingUnit !== null ? builder.createString(this.idOperatingUnit!) : 0);
  const altEqpId = (this.altEqpId !== null ? builder.createString(this.altEqpId!) : 0);
  const eqpCode = (this.eqpCode !== null ? builder.createString(this.eqpCode!) : 0);
  const eqpIdNum = (this.eqpIdNum !== null ? builder.createString(this.eqpIdNum!) : 0);
  const countryCode = (this.countryCode !== null ? builder.createString(this.countryCode!) : 0);
  const altCountryCode = (this.altCountryCode !== null ? builder.createString(this.altCountryCode!) : 0);
  const wac = (this.wac !== null ? builder.createString(this.wac!) : 0);
  const nomen = (this.nomen !== null ? builder.createString(this.nomen!) : 0);
  const operStatus = (this.operStatus !== null ? builder.createString(this.operStatus!) : 0);
  const condition = (this.condition !== null ? builder.createString(this.condition!) : 0);
  const conditionAvail = (this.conditionAvail !== null ? builder.createString(this.conditionAvail!) : 0);
  const fpa = (this.fpa !== null ? builder.createString(this.fpa!) : 0);
  const function_ = (this.function_ !== null ? builder.createString(this.function_!) : 0);
  const ident = (this.ident !== null ? builder.createString(this.ident!) : 0);
  const allegiance = (this.allegiance !== null ? builder.createString(this.allegiance!) : 0);
  const altAllegiance = (this.altAllegiance !== null ? builder.createString(this.altAllegiance!) : 0);
  const locReason = (this.locReason !== null ? builder.createString(this.locReason!) : 0);
  const operAreaPrimary = (this.operAreaPrimary !== null ? builder.createString(this.operAreaPrimary!) : 0);
  const functPrimary = (this.functPrimary !== null ? builder.createString(this.functPrimary!) : 0);
  const coordDatum = (this.coordDatum !== null ? builder.createString(this.coordDatum!) : 0);
  const coord = (this.coord !== null ? builder.createString(this.coord!) : 0);
  const milGridSys = (this.milGridSys !== null ? builder.createString(this.milGridSys!) : 0);
  const milGrid = (this.milGrid !== null ? builder.createString(this.milGrid!) : 0);
  const utm = (this.utm !== null ? builder.createString(this.utm!) : 0);
  const airDefArea = (this.airDefArea !== null ? builder.createString(this.airDefArea!) : 0);
  const polSubdiv = (this.polSubdiv !== null ? builder.createString(this.polSubdiv!) : 0);
  const symCode = (this.symCode !== null ? builder.createString(this.symCode!) : 0);
  const classRating = (this.classRating !== null ? builder.createString(this.classRating!) : 0);
  const recStatus = (this.recStatus !== null ? builder.createString(this.recStatus!) : 0);
  const reviewDate = (this.reviewDate !== null ? builder.createString(this.reviewDate!) : 0);
  const resProd = (this.resProd !== null ? builder.createString(this.resProd!) : 0);
  const referenceDoc = (this.referenceDoc !== null ? builder.createString(this.referenceDoc!) : 0);
  const srcTyps = Equipment_Ingest.createSrcTypsVector(builder, builder.createObjectOffsetList(this.srcTyps));
  const srcIds = Equipment_Ingest.createSrcIdsVector(builder, builder.createObjectOffsetList(this.srcIds));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);

  return Equipment_Ingest.createEquipment_Ingest(builder,
    id,
    classificationMarking,
    idParentEquipment,
    idSite,
    idOperatingUnit,
    altEqpId,
    eqpCode,
    eqpIdNum,
    countryCode,
    altCountryCode,
    wac,
    this.seqNum,
    nomen,
    operStatus,
    condition,
    conditionAvail,
    this.eval,
    fpa,
    function_,
    ident,
    allegiance,
    altAllegiance,
    locReason,
    operAreaPrimary,
    functPrimary,
    coordDatum,
    coord,
    this.coordDerivAcc,
    this.lat,
    this.lon,
    this.elevMsl,
    this.elevMslConfLvl,
    this.elevMslDerivAcc,
    this.geoidalMslSep,
    milGridSys,
    milGrid,
    utm,
    airDefArea,
    polSubdiv,
    this.qtyOH,
    symCode,
    classRating,
    recStatus,
    reviewDate,
    resProd,
    referenceDoc,
    srcTyps,
    srcIds,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode
  );
}
}
