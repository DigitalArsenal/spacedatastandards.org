// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ItemTracking_Full_dataMode_Enum } from './item-tracking-full-data-mode-enum.js';


/**
 * /// No description available.
 */
export class ItemTracking_Full implements flatbuffers.IUnpackableObject<ItemTracking_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ItemTracking_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsItemTracking_Full(bb:flatbuffers.ByteBuffer, obj?:ItemTracking_Full):ItemTracking_Full {
  return (obj || new ItemTracking_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsItemTracking_Full(bb:flatbuffers.ByteBuffer, obj?:ItemTracking_Full):ItemTracking_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ItemTracking_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ITEM');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The tracking identifier of an item or person. May be similar in representation of a barcode or UPC.
 * Example: /// Example: ABC1234
 * Constraints: Minimum length = 1, Maximum length = 36
 */
scanCode():string|null
scanCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scanCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
 * Example: /// Example: bID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
scGenTool():string|null
scGenTool(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scGenTool(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The ID of the scanner or input device.
 * Example: /// Example: 2051M
 * Constraints: Minimum length = 1, Maximum length = 36
 */
scannerId():string|null
scannerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scannerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-03-21T14:22:00.123Z
 * Constraints: No constraints specified.
 */
ts():string|null
ts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL ID of the item this record is associated with.
 * Example: /// Example: 36054487-bcba-6e2d-4f3b-9f25738b2639
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idItem():string|null
idItem(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idItem(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
 * Example: /// Example: CARGO
 * Constraints: Minimum length = 0, Maximum length = 32
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS84 latitude where the item was scanned, in degrees.
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS84 longitude where the item was scanned, in degrees.
 * Example: /// Example: 179.1
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The type of scan for tracking the item within it's journey  (e.g. IN, OUT, RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD, OTHER). For example, received and delivered are for when an item is received from or delivered to the end customer. In and out are for stops in between such as being loaded on an airplane or received at a warehouse.
 * Example: /// Example: TRANSIT
 * Constraints: Minimum length = 0, Maximum length = 64
 */
scanType():string|null
scanType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scanType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The United States distinguished visitor code of the person scanned, only applicable to people.
 * Example: /// Example: DV-4
 * Constraints: Minimum length = 0, Maximum length = 16
 */
dvCode():string|null
dvCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dvCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional notes or comments about the tracking data.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of keys that may be associated with this tracked item.
 * Example: /// Example: ['tapeColor', 'hazmat']
 * Constraints: No constraints specified.
 */
keys(index: number):string
keys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
keys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

keysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
 * Example: /// Example: ['yellow', 'false']
 * Constraints: No constraints specified.
 */
values(index: number):string
values(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
values(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2023-03-21T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():ItemTracking_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ItemTracking_Full_dataMode_Enum.REAL;
}

static startItemTracking_Full(builder:flatbuffers.Builder) {
  builder.startObject(22);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addScanCode(builder:flatbuffers.Builder, scanCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, scanCodeOffset, 0);
}

static addScGenTool(builder:flatbuffers.Builder, scGenToolOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, scGenToolOffset, 0);
}

static addScannerId(builder:flatbuffers.Builder, scannerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, scannerIdOffset, 0);
}

static addTs(builder:flatbuffers.Builder, tsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, tsOffset, 0);
}

static addIdItem(builder:flatbuffers.Builder, idItemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, idItemOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, typeOffset, 0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(8, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(9, lon, 0.0);
}

static addScanType(builder:flatbuffers.Builder, scanTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, scanTypeOffset, 0);
}

static addDvCode(builder:flatbuffers.Builder, dvCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, dvCodeOffset, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, notesOffset, 0);
}

static addKeys(builder:flatbuffers.Builder, keysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, keysOffset, 0);
}

static createKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, createdByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:ItemTracking_Full_dataMode_Enum) {
  builder.addFieldInt8(21, dataMode, ItemTracking_Full_dataMode_Enum.REAL);
}

static endItemTracking_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishItemTracking_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ITEM');
}

static finishSizePrefixedItemTracking_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ITEM', true);
}

static createItemTracking_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, scanCodeOffset:flatbuffers.Offset, scGenToolOffset:flatbuffers.Offset, scannerIdOffset:flatbuffers.Offset, tsOffset:flatbuffers.Offset, idItemOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, lat:number, lon:number, scanTypeOffset:flatbuffers.Offset, dvCodeOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, keysOffset:flatbuffers.Offset, valuesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:ItemTracking_Full_dataMode_Enum):flatbuffers.Offset {
  ItemTracking_Full.startItemTracking_Full(builder);
  ItemTracking_Full.addId(builder, idOffset);
  ItemTracking_Full.addClassificationMarking(builder, classificationMarkingOffset);
  ItemTracking_Full.addScanCode(builder, scanCodeOffset);
  ItemTracking_Full.addScGenTool(builder, scGenToolOffset);
  ItemTracking_Full.addScannerId(builder, scannerIdOffset);
  ItemTracking_Full.addTs(builder, tsOffset);
  ItemTracking_Full.addIdItem(builder, idItemOffset);
  ItemTracking_Full.addType(builder, typeOffset);
  ItemTracking_Full.addLat(builder, lat);
  ItemTracking_Full.addLon(builder, lon);
  ItemTracking_Full.addScanType(builder, scanTypeOffset);
  ItemTracking_Full.addDvCode(builder, dvCodeOffset);
  ItemTracking_Full.addNotes(builder, notesOffset);
  ItemTracking_Full.addKeys(builder, keysOffset);
  ItemTracking_Full.addValues(builder, valuesOffset);
  ItemTracking_Full.addCreatedAt(builder, createdAtOffset);
  ItemTracking_Full.addCreatedBy(builder, createdByOffset);
  ItemTracking_Full.addSourceDl(builder, sourceDlOffset);
  ItemTracking_Full.addSource(builder, sourceOffset);
  ItemTracking_Full.addOrigin(builder, originOffset);
  ItemTracking_Full.addOrigNetwork(builder, origNetworkOffset);
  ItemTracking_Full.addDataMode(builder, dataMode);
  return ItemTracking_Full.endItemTracking_Full(builder);
}

unpack(): ItemTracking_FullT {
  return new ItemTracking_FullT(
    this.id(),
    this.classificationMarking(),
    this.scanCode(),
    this.scGenTool(),
    this.scannerId(),
    this.ts(),
    this.idItem(),
    this.type(),
    this.lat(),
    this.lon(),
    this.scanType(),
    this.dvCode(),
    this.notes(),
    this.bb!.createScalarList<string>(this.keys.bind(this), this.keys_Length()),
    this.bb!.createScalarList<string>(this.values.bind(this), this.values_Length()),
    this.createdAt(),
    this.createdBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: ItemTracking_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.scanCode = this.scanCode();
  _o.scGenTool = this.scGenTool();
  _o.scannerId = this.scannerId();
  _o.ts = this.ts();
  _o.idItem = this.idItem();
  _o.type = this.type();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.scanType = this.scanType();
  _o.dvCode = this.dvCode();
  _o.notes = this.notes();
  _o.keys = this.bb!.createScalarList<string>(this.keys.bind(this), this.keys_Length());
  _o.values = this.bb!.createScalarList<string>(this.values.bind(this), this.values_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class ItemTracking_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public scanCode: string|Uint8Array|null = null,
  public scGenTool: string|Uint8Array|null = null,
  public scannerId: string|Uint8Array|null = null,
  public ts: string|Uint8Array|null = null,
  public idItem: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public scanType: string|Uint8Array|null = null,
  public dvCode: string|Uint8Array|null = null,
  public notes: string|Uint8Array|null = null,
  public keys: (string)[] = [],
  public values: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: ItemTracking_Full_dataMode_Enum = ItemTracking_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const scanCode = (this.scanCode !== null ? builder.createString(this.scanCode!) : 0);
  const scGenTool = (this.scGenTool !== null ? builder.createString(this.scGenTool!) : 0);
  const scannerId = (this.scannerId !== null ? builder.createString(this.scannerId!) : 0);
  const ts = (this.ts !== null ? builder.createString(this.ts!) : 0);
  const idItem = (this.idItem !== null ? builder.createString(this.idItem!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const scanType = (this.scanType !== null ? builder.createString(this.scanType!) : 0);
  const dvCode = (this.dvCode !== null ? builder.createString(this.dvCode!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const keys = ItemTracking_Full.createKeysVector(builder, builder.createObjectOffsetList(this.keys));
  const values = ItemTracking_Full.createValuesVector(builder, builder.createObjectOffsetList(this.values));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return ItemTracking_Full.createItemTracking_Full(builder,
    id,
    classificationMarking,
    scanCode,
    scGenTool,
    scannerId,
    ts,
    idItem,
    type,
    this.lat,
    this.lon,
    scanType,
    dvCode,
    notes,
    keys,
    values,
    createdAt,
    createdBy,
    sourceDL,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
