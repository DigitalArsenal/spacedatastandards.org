// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * Data defining any enemy intelligence reported by the requestor.
 */
export class EvacEnemyData_Ingest implements flatbuffers.IUnpackableObject<EvacEnemyData_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EvacEnemyData_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEvacEnemyData_Ingest(bb:flatbuffers.ByteBuffer, obj?:EvacEnemyData_Ingest):EvacEnemyData_Ingest {
  return (obj || new EvacEnemyData_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEvacEnemyData_Ingest(bb:flatbuffers.ByteBuffer, obj?:EvacEnemyData_Ingest):EvacEnemyData_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EvacEnemyData_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
 * Example: NORTH
 * Constraints: Minimum length = 0, Maximum length = 32
 */
dirToEnemy():string|null
dirToEnemy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dirToEnemy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
 * Example: SMALL ARMS
 * Constraints: Minimum length = 0, Maximum length = 32
 */
hostileFireType():string|null
hostileFireType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hostileFireType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Comments provided by friendlies about the evac zone.
 * Example: Comments from friendlies.
 * Constraints: Minimum length = 0, Maximum length = 128
 */
friendliesRemarks():string|null
friendliesRemarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
friendliesRemarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Hot Landing Zone remarks.
 * Example: Remarks about hot landing zone.
 * Constraints: Minimum length = 0, Maximum length = 128
 */
hlzRemarks():string|null
hlzRemarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hlzRemarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEvacEnemyData_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addDirToEnemy(builder:flatbuffers.Builder, dirToEnemyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dirToEnemyOffset, 0);
}

static addHostileFireType(builder:flatbuffers.Builder, hostileFireTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, hostileFireTypeOffset, 0);
}

static addFriendliesRemarks(builder:flatbuffers.Builder, friendliesRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, friendliesRemarksOffset, 0);
}

static addHlzRemarks(builder:flatbuffers.Builder, hlzRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, hlzRemarksOffset, 0);
}

static endEvacEnemyData_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEvacEnemyData_Ingest(builder:flatbuffers.Builder, dirToEnemyOffset:flatbuffers.Offset, hostileFireTypeOffset:flatbuffers.Offset, friendliesRemarksOffset:flatbuffers.Offset, hlzRemarksOffset:flatbuffers.Offset):flatbuffers.Offset {
  EvacEnemyData_Ingest.startEvacEnemyData_Ingest(builder);
  EvacEnemyData_Ingest.addDirToEnemy(builder, dirToEnemyOffset);
  EvacEnemyData_Ingest.addHostileFireType(builder, hostileFireTypeOffset);
  EvacEnemyData_Ingest.addFriendliesRemarks(builder, friendliesRemarksOffset);
  EvacEnemyData_Ingest.addHlzRemarks(builder, hlzRemarksOffset);
  return EvacEnemyData_Ingest.endEvacEnemyData_Ingest(builder);
}

unpack(): EvacEnemyData_IngestT {
  return new EvacEnemyData_IngestT(
    this.dirToEnemy(),
    this.hostileFireType(),
    this.friendliesRemarks(),
    this.hlzRemarks()
  );
}


unpackTo(_o: EvacEnemyData_IngestT): void {
  _o.dirToEnemy = this.dirToEnemy();
  _o.hostileFireType = this.hostileFireType();
  _o.friendliesRemarks = this.friendliesRemarks();
  _o.hlzRemarks = this.hlzRemarks();
}
}

export class EvacEnemyData_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public dirToEnemy: string|Uint8Array|null = null,
  public hostileFireType: string|Uint8Array|null = null,
  public friendliesRemarks: string|Uint8Array|null = null,
  public hlzRemarks: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const dirToEnemy = (this.dirToEnemy !== null ? builder.createString(this.dirToEnemy!) : 0);
  const hostileFireType = (this.hostileFireType !== null ? builder.createString(this.hostileFireType!) : 0);
  const friendliesRemarks = (this.friendliesRemarks !== null ? builder.createString(this.friendliesRemarks!) : 0);
  const hlzRemarks = (this.hlzRemarks !== null ? builder.createString(this.hlzRemarks!) : 0);

  return EvacEnemyData_Ingest.createEvacEnemyData_Ingest(builder,
    dirToEnemy,
    hostileFireType,
    friendliesRemarks,
    hlzRemarks
  );
}
}
