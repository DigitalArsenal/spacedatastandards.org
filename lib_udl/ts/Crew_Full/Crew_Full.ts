// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Crew_Full_dataMode_Enum } from './Crew_Full_dataMode_Enum.js';


/**
 * /// Crew Services.
 */
export class Crew_Full implements flatbuffers.IUnpackableObject<Crew_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Crew_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCrew_Full(bb:flatbuffers.ByteBuffer, obj?:Crew_Full):Crew_Full {
  return (obj || new Crew_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCrew_Full(bb:flatbuffers.ByteBuffer, obj?:Crew_Full):Crew_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Crew_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('CREW');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the formed crew provided by the originating source. Provided for systems that require tracking of an internal system generated ID.
 * Example: /// Example: JHJDHjhuu929o92
 * Constraints: Minimum length = 1, Maximum length = 36
 */
origCrewId():string|null
origCrewId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origCrewId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the formed crew.
 * Example: /// Example: falcon
 * Constraints: Minimum length = 0, Maximum length = 36
 */
crewName():string|null
crewName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
crewName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Crew Status (e.g. APPROVED, PENDING).
 * Example: /// Example: APPROVED
 * Constraints: Minimum length = 0, Maximum length = 64
 */
status():string|null
status(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
status(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Aircraft Sortie associated with this crew record.
 * Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSortie():string|null
idSortie(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSortie(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the crew is legal for alert, in ISO8601 UTC format, with millisecond precision.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
legalAlertTime():string|null
legalAlertTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
legalAlertTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the crew is legal for bravo, in ISO8601 UTC format, with millisecond precision.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
legalBravoTime():string|null
legalBravoTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
legalBravoTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the crew was alerted, in ISO8601 UTC format, with millisecond precision.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
alertedTime():string|null
alertedTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
alertedTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Scheduled return time, in ISO8601 UTC format, with millisecond precision.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
returnTime():string|null
returnTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
returnTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Crew Flight Duty Period (FDP) eligibility type.
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 32
 */
fdpEligType():string|null
fdpEligType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fdpEligType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flight Duty Period (FDP) type.
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 32
 */
fdpType():string|null
fdpType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fdpType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Crew type.
 * Example: /// Example: AIRLAND
 * Constraints: Minimum length = 0, Maximum length = 32
 */
crewType():string|null
crewType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
crewType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The crew's Aviation Resource Management System (ARMS) unit.  If multiple units exist, use the Aircraft Commander's Unit.
 * Example: /// Example: 00016ALSQ
 * Constraints: Minimum length = 0, Maximum length = 32
 */
armsCrewUnit():string|null
armsCrewUnit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
armsCrewUnit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * CrewMembers Collection.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
crewMembers(index: number):string
crewMembers(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
crewMembers(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

crewMembersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Crew_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Crew_Full_dataMode_Enum.REAL;
}

static startCrew_Full(builder:flatbuffers.Builder) {
  builder.startObject(23);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addOrigCrewId(builder:flatbuffers.Builder, origCrewIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, origCrewIdOffset, 0);
}

static addCrewName(builder:flatbuffers.Builder, crewNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, crewNameOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, statusOffset, 0);
}

static addIdSortie(builder:flatbuffers.Builder, idSortieOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idSortieOffset, 0);
}

static addLegalAlertTime(builder:flatbuffers.Builder, legalAlertTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, legalAlertTimeOffset, 0);
}

static addLegalBravoTime(builder:flatbuffers.Builder, legalBravoTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, legalBravoTimeOffset, 0);
}

static addAlertedTime(builder:flatbuffers.Builder, alertedTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, alertedTimeOffset, 0);
}

static addReturnTime(builder:flatbuffers.Builder, returnTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, returnTimeOffset, 0);
}

static addFdpEligType(builder:flatbuffers.Builder, fdpEligTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, fdpEligTypeOffset, 0);
}

static addFdpType(builder:flatbuffers.Builder, fdpTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, fdpTypeOffset, 0);
}

static addCrewType(builder:flatbuffers.Builder, crewTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, crewTypeOffset, 0);
}

static addArmsCrewUnit(builder:flatbuffers.Builder, armsCrewUnitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, armsCrewUnitOffset, 0);
}

static addCrewMembers(builder:flatbuffers.Builder, crewMembersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, crewMembersOffset, 0);
}

static createCrewMembersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCrewMembersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, updatedByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Crew_Full_dataMode_Enum) {
  builder.addFieldInt8(22, dataMode, Crew_Full_dataMode_Enum.REAL);
}

static endCrew_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCrew_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CREW');
}

static finishSizePrefixedCrew_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CREW', true);
}

static createCrew_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, origCrewIdOffset:flatbuffers.Offset, crewNameOffset:flatbuffers.Offset, statusOffset:flatbuffers.Offset, idSortieOffset:flatbuffers.Offset, legalAlertTimeOffset:flatbuffers.Offset, legalBravoTimeOffset:flatbuffers.Offset, alertedTimeOffset:flatbuffers.Offset, returnTimeOffset:flatbuffers.Offset, fdpEligTypeOffset:flatbuffers.Offset, fdpTypeOffset:flatbuffers.Offset, crewTypeOffset:flatbuffers.Offset, armsCrewUnitOffset:flatbuffers.Offset, crewMembersOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:Crew_Full_dataMode_Enum):flatbuffers.Offset {
  Crew_Full.startCrew_Full(builder);
  Crew_Full.addId(builder, idOffset);
  Crew_Full.addClassificationMarking(builder, classificationMarkingOffset);
  Crew_Full.addOrigCrewId(builder, origCrewIdOffset);
  Crew_Full.addCrewName(builder, crewNameOffset);
  Crew_Full.addStatus(builder, statusOffset);
  Crew_Full.addIdSortie(builder, idSortieOffset);
  Crew_Full.addLegalAlertTime(builder, legalAlertTimeOffset);
  Crew_Full.addLegalBravoTime(builder, legalBravoTimeOffset);
  Crew_Full.addAlertedTime(builder, alertedTimeOffset);
  Crew_Full.addReturnTime(builder, returnTimeOffset);
  Crew_Full.addFdpEligType(builder, fdpEligTypeOffset);
  Crew_Full.addFdpType(builder, fdpTypeOffset);
  Crew_Full.addCrewType(builder, crewTypeOffset);
  Crew_Full.addArmsCrewUnit(builder, armsCrewUnitOffset);
  Crew_Full.addCrewMembers(builder, crewMembersOffset);
  Crew_Full.addCreatedAt(builder, createdAtOffset);
  Crew_Full.addCreatedBy(builder, createdByOffset);
  Crew_Full.addUpdatedAt(builder, updatedAtOffset);
  Crew_Full.addUpdatedBy(builder, updatedByOffset);
  Crew_Full.addSource(builder, sourceOffset);
  Crew_Full.addOrigin(builder, originOffset);
  Crew_Full.addOrigNetwork(builder, origNetworkOffset);
  Crew_Full.addDataMode(builder, dataMode);
  return Crew_Full.endCrew_Full(builder);
}

unpack(): Crew_FullT {
  return new Crew_FullT(
    this.id(),
    this.classificationMarking(),
    this.origCrewId(),
    this.crewName(),
    this.status(),
    this.idSortie(),
    this.legalAlertTime(),
    this.legalBravoTime(),
    this.alertedTime(),
    this.returnTime(),
    this.fdpEligType(),
    this.fdpType(),
    this.crewType(),
    this.armsCrewUnit(),
    this.bb!.createScalarList<string>(this.crewMembers.bind(this), this.crewMembersLength()),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: Crew_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.origCrewId = this.origCrewId();
  _o.crewName = this.crewName();
  _o.status = this.status();
  _o.idSortie = this.idSortie();
  _o.legalAlertTime = this.legalAlertTime();
  _o.legalBravoTime = this.legalBravoTime();
  _o.alertedTime = this.alertedTime();
  _o.returnTime = this.returnTime();
  _o.fdpEligType = this.fdpEligType();
  _o.fdpType = this.fdpType();
  _o.crewType = this.crewType();
  _o.armsCrewUnit = this.armsCrewUnit();
  _o.crewMembers = this.bb!.createScalarList<string>(this.crewMembers.bind(this), this.crewMembersLength());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class Crew_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public origCrewId: string|Uint8Array|null = null,
  public crewName: string|Uint8Array|null = null,
  public status: string|Uint8Array|null = null,
  public idSortie: string|Uint8Array|null = null,
  public legalAlertTime: string|Uint8Array|null = null,
  public legalBravoTime: string|Uint8Array|null = null,
  public alertedTime: string|Uint8Array|null = null,
  public returnTime: string|Uint8Array|null = null,
  public fdpEligType: string|Uint8Array|null = null,
  public fdpType: string|Uint8Array|null = null,
  public crewType: string|Uint8Array|null = null,
  public armsCrewUnit: string|Uint8Array|null = null,
  public crewMembers: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: Crew_Full_dataMode_Enum = Crew_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const origCrewId = (this.origCrewId !== null ? builder.createString(this.origCrewId!) : 0);
  const crewName = (this.crewName !== null ? builder.createString(this.crewName!) : 0);
  const status = (this.status !== null ? builder.createString(this.status!) : 0);
  const idSortie = (this.idSortie !== null ? builder.createString(this.idSortie!) : 0);
  const legalAlertTime = (this.legalAlertTime !== null ? builder.createString(this.legalAlertTime!) : 0);
  const legalBravoTime = (this.legalBravoTime !== null ? builder.createString(this.legalBravoTime!) : 0);
  const alertedTime = (this.alertedTime !== null ? builder.createString(this.alertedTime!) : 0);
  const returnTime = (this.returnTime !== null ? builder.createString(this.returnTime!) : 0);
  const fdpEligType = (this.fdpEligType !== null ? builder.createString(this.fdpEligType!) : 0);
  const fdpType = (this.fdpType !== null ? builder.createString(this.fdpType!) : 0);
  const crewType = (this.crewType !== null ? builder.createString(this.crewType!) : 0);
  const armsCrewUnit = (this.armsCrewUnit !== null ? builder.createString(this.armsCrewUnit!) : 0);
  const crewMembers = Crew_Full.createCrewMembersVector(builder, builder.createObjectOffsetList(this.crewMembers));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Crew_Full.createCrew_Full(builder,
    id,
    classificationMarking,
    origCrewId,
    crewName,
    status,
    idSortie,
    legalAlertTime,
    legalBravoTime,
    alertedTime,
    returnTime,
    fdpEligType,
    fdpType,
    crewType,
    armsCrewUnit,
    crewMembers,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
