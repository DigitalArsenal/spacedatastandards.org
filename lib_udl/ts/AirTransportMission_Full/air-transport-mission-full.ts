// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AirTransportMission_Full_dataMode_Enum } from './air-transport-mission-full-data-mode-enum.js';


/**
 * /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
 */
export class AirTransportMission_Full implements flatbuffers.IUnpackableObject<AirTransportMission_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirTransportMission_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirTransportMission_Full(bb:flatbuffers.ByteBuffer, obj?:AirTransportMission_Full):AirTransportMission_Full {
  return (obj || new AirTransportMission_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirTransportMission_Full(bb:flatbuffers.ByteBuffer, obj?:AirTransportMission_Full):AirTransportMission_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirTransportMission_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRT');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The mission identifier provided by the originating source.
 * Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origMissionId():string|null
origMissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origMissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
 * Example: /// Example: AJM7939B1123
 * Constraints: Minimum length = 0, Maximum length = 36
 */
amcMissionId():string|null
amcMissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
amcMissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Global Decision Support System (GDSS) mission unique identifier.
 * Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
 * Constraints: Minimum length = 0, Maximum length = 36
 */
gdssMissionId():string|null
gdssMissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gdssMissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
 * Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
 * Constraints: Minimum length = 0, Maximum length = 36
 */
prevMissionId():string|null
prevMissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
prevMissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
 * Example: /// Example: AJM7939B1122
 * Constraints: Minimum length = 0, Maximum length = 36
 */
prevAmcmissionId():string|null
prevAmcmissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
prevAmcmissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
 * Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
 * Constraints: Minimum length = 0, Maximum length = 36
 */
nextMissionId():string|null
nextMissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nextMissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
 * Example: /// Example: AJM7939B1124
 * Constraints: Minimum length = 0, Maximum length = 36
 */
nextAmcmissionId():string|null
nextAmcmissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nextAmcmissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A description of this mission's objective.
 * Example: /// Example: Deliver water to island X.
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
objective():string|null
objective(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objective(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
 * Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
purpose():string|null
purpose(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
purpose(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Highest Joint Chiefs of Staff priority of this mission.
 * Example: /// Example: 1A3
 * Constraints: Minimum length = 3, Maximum length = 3
 */
jcsPriority():string|null
jcsPriority(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
jcsPriority(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating this is a close watch mission.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
cw():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The type of mission (e.g. SAAM, CHNL, etc.).
 * Example: /// Example: SAAM
 * Constraints: Minimum length = 0, Maximum length = 32
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
 * Example: /// Example: KFAY
 * Constraints: Minimum length = 4, Maximum length = 4
 */
firstPickUp():string|null
firstPickUp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
firstPickUp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
 * Example: /// Example: PGUA
 * Constraints: Minimum length = 4, Maximum length = 4
 */
lastDropOff():string|null
lastDropOff(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastDropOff(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mission alias.
 * Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
 * Constraints: Minimum length = 0, Maximum length = 48
 */
alias():string|null
alias(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
alias(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The call sign for this mission.
 * Example: /// Example: RCH123
 * Constraints: Minimum length = 0, Maximum length = 32
 */
callSign():string|null
callSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the operation that this mission supports.
 * Example: /// Example: Golden Eye
 * Constraints: Minimum length = 0, Maximum length = 100
 */
operation():string|null
operation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Numbered Air Force (NAF) organization that owns the mission.
 * Example: /// Example: 18AF
 * Constraints: Minimum length = 0, Maximum length = 100
 */
naf():string|null
naf(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
naf(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The unit the mission is allocated to.
 * Example: /// Example: 437 AEW
 * Constraints: Minimum length = 0, Maximum length = 256
 */
allocatedUnit():string|null
allocatedUnit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
allocatedUnit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
 * Example: /// Example: MIXED
 * Constraints: Minimum length = 0, Maximum length = 32
 */
loadCategoryType():string|null
loadCategoryType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
loadCategoryType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Current state of the mission.
 * Example: /// Example: EXECUTION
 * Constraints: Minimum length = 0, Maximum length = 32
 */
state():string|null
state(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
state(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
 * Example: /// Example: -90.12
 * Constraints: No constraints specified.
 */
sourceSysDeviation():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
 * Example: /// Example: 1083034
 * Constraints: Minimum length = 0, Maximum length = 64
 */
apacsId():string|null
apacsId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
apacsId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
 * Example: /// Example: G2-182402-AB
 * Constraints: Minimum length = 0, Maximum length = 256
 */
dipWorksheetName():string|null
dipWorksheetName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dipWorksheetName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AirTransportMission_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AirTransportMission_Full_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
requirements(index: number):string
requirements(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
requirements(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

requirementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
remarks(index: number):string
remarks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
remarks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

remarksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Collection of Hazardous Material information associated with this Air Transport Mission.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
hazMat(index: number):string
hazMat(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
hazMat(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

hazMatLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The Aircraft Sortie Records linked to this mission. Do not set this field to send data to the UDL. This field is set by the UDL when returning full Air Transport Mission records.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
aircraftSorties(index: number):string
aircraftSorties(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
aircraftSorties(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

aircraftSortiesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startAirTransportMission_Full(builder:flatbuffers.Builder) {
  builder.startObject(39);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addOrigMissionId(builder:flatbuffers.Builder, origMissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, origMissionIdOffset, 0);
}

static addAmcMissionId(builder:flatbuffers.Builder, amcMissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, amcMissionIdOffset, 0);
}

static addGdssMissionId(builder:flatbuffers.Builder, gdssMissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, gdssMissionIdOffset, 0);
}

static addPrevMissionId(builder:flatbuffers.Builder, prevMissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, prevMissionIdOffset, 0);
}

static addPrevAmcmissionId(builder:flatbuffers.Builder, prevAmcmissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, prevAmcmissionIdOffset, 0);
}

static addNextMissionId(builder:flatbuffers.Builder, nextMissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, nextMissionIdOffset, 0);
}

static addNextAmcmissionId(builder:flatbuffers.Builder, nextAmcmissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, nextAmcmissionIdOffset, 0);
}

static addObjective(builder:flatbuffers.Builder, objectiveOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, objectiveOffset, 0);
}

static addPurpose(builder:flatbuffers.Builder, purposeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, purposeOffset, 0);
}

static addJcsPriority(builder:flatbuffers.Builder, jcsPriorityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, jcsPriorityOffset, 0);
}

static addCw(builder:flatbuffers.Builder, cw:boolean) {
  builder.addFieldInt8(12, +cw, +false);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, typeOffset, 0);
}

static addFirstPickUp(builder:flatbuffers.Builder, firstPickUpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, firstPickUpOffset, 0);
}

static addLastDropOff(builder:flatbuffers.Builder, lastDropOffOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, lastDropOffOffset, 0);
}

static addAlias(builder:flatbuffers.Builder, aliasOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, aliasOffset, 0);
}

static addCallSign(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, callSignOffset, 0);
}

static addOperation(builder:flatbuffers.Builder, operationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, operationOffset, 0);
}

static addNaf(builder:flatbuffers.Builder, nafOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, nafOffset, 0);
}

static addAllocatedUnit(builder:flatbuffers.Builder, allocatedUnitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, allocatedUnitOffset, 0);
}

static addLoadCategoryType(builder:flatbuffers.Builder, loadCategoryTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, loadCategoryTypeOffset, 0);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, stateOffset, 0);
}

static addSourceSysDeviation(builder:flatbuffers.Builder, sourceSysDeviation:number) {
  builder.addFieldFloat64(23, sourceSysDeviation, 0.0);
}

static addApacsId(builder:flatbuffers.Builder, apacsIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, apacsIdOffset, 0);
}

static addDipWorksheetName(builder:flatbuffers.Builder, dipWorksheetNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, dipWorksheetNameOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, updatedByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AirTransportMission_Full_dataMode_Enum) {
  builder.addFieldInt8(33, dataMode, AirTransportMission_Full_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, origNetworkOffset, 0);
}

static addRequirements(builder:flatbuffers.Builder, requirementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, requirementsOffset, 0);
}

static createRequirementsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRequirementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRemarks(builder:flatbuffers.Builder, remarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, remarksOffset, 0);
}

static createRemarksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRemarksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addHazMat(builder:flatbuffers.Builder, hazMatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, hazMatOffset, 0);
}

static createHazMatVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startHazMatVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAircraftSorties(builder:flatbuffers.Builder, aircraftSortiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, aircraftSortiesOffset, 0);
}

static createAircraftSortiesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAircraftSortiesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endAirTransportMission_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirTransportMission_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRT');
}

static finishSizePrefixedAirTransportMission_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRT', true);
}

static createAirTransportMission_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, origMissionIdOffset:flatbuffers.Offset, amcMissionIdOffset:flatbuffers.Offset, gdssMissionIdOffset:flatbuffers.Offset, prevMissionIdOffset:flatbuffers.Offset, prevAmcmissionIdOffset:flatbuffers.Offset, nextMissionIdOffset:flatbuffers.Offset, nextAmcmissionIdOffset:flatbuffers.Offset, objectiveOffset:flatbuffers.Offset, purposeOffset:flatbuffers.Offset, jcsPriorityOffset:flatbuffers.Offset, cw:boolean, typeOffset:flatbuffers.Offset, firstPickUpOffset:flatbuffers.Offset, lastDropOffOffset:flatbuffers.Offset, aliasOffset:flatbuffers.Offset, callSignOffset:flatbuffers.Offset, operationOffset:flatbuffers.Offset, nafOffset:flatbuffers.Offset, allocatedUnitOffset:flatbuffers.Offset, loadCategoryTypeOffset:flatbuffers.Offset, stateOffset:flatbuffers.Offset, sourceSysDeviation:number, apacsIdOffset:flatbuffers.Offset, dipWorksheetNameOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:AirTransportMission_Full_dataMode_Enum, origNetworkOffset:flatbuffers.Offset, requirementsOffset:flatbuffers.Offset, remarksOffset:flatbuffers.Offset, hazMatOffset:flatbuffers.Offset, aircraftSortiesOffset:flatbuffers.Offset):flatbuffers.Offset {
  AirTransportMission_Full.startAirTransportMission_Full(builder);
  AirTransportMission_Full.addId(builder, idOffset);
  AirTransportMission_Full.addClassificationMarking(builder, classificationMarkingOffset);
  AirTransportMission_Full.addOrigMissionId(builder, origMissionIdOffset);
  AirTransportMission_Full.addAmcMissionId(builder, amcMissionIdOffset);
  AirTransportMission_Full.addGdssMissionId(builder, gdssMissionIdOffset);
  AirTransportMission_Full.addPrevMissionId(builder, prevMissionIdOffset);
  AirTransportMission_Full.addPrevAmcmissionId(builder, prevAmcmissionIdOffset);
  AirTransportMission_Full.addNextMissionId(builder, nextMissionIdOffset);
  AirTransportMission_Full.addNextAmcmissionId(builder, nextAmcmissionIdOffset);
  AirTransportMission_Full.addObjective(builder, objectiveOffset);
  AirTransportMission_Full.addPurpose(builder, purposeOffset);
  AirTransportMission_Full.addJcsPriority(builder, jcsPriorityOffset);
  AirTransportMission_Full.addCw(builder, cw);
  AirTransportMission_Full.addType(builder, typeOffset);
  AirTransportMission_Full.addFirstPickUp(builder, firstPickUpOffset);
  AirTransportMission_Full.addLastDropOff(builder, lastDropOffOffset);
  AirTransportMission_Full.addAlias(builder, aliasOffset);
  AirTransportMission_Full.addCallSign(builder, callSignOffset);
  AirTransportMission_Full.addOperation(builder, operationOffset);
  AirTransportMission_Full.addNaf(builder, nafOffset);
  AirTransportMission_Full.addAllocatedUnit(builder, allocatedUnitOffset);
  AirTransportMission_Full.addLoadCategoryType(builder, loadCategoryTypeOffset);
  AirTransportMission_Full.addState(builder, stateOffset);
  AirTransportMission_Full.addSourceSysDeviation(builder, sourceSysDeviation);
  AirTransportMission_Full.addApacsId(builder, apacsIdOffset);
  AirTransportMission_Full.addDipWorksheetName(builder, dipWorksheetNameOffset);
  AirTransportMission_Full.addCreatedAt(builder, createdAtOffset);
  AirTransportMission_Full.addCreatedBy(builder, createdByOffset);
  AirTransportMission_Full.addUpdatedAt(builder, updatedAtOffset);
  AirTransportMission_Full.addUpdatedBy(builder, updatedByOffset);
  AirTransportMission_Full.addSourceDl(builder, sourceDlOffset);
  AirTransportMission_Full.addSource(builder, sourceOffset);
  AirTransportMission_Full.addOrigin(builder, originOffset);
  AirTransportMission_Full.addDataMode(builder, dataMode);
  AirTransportMission_Full.addOrigNetwork(builder, origNetworkOffset);
  AirTransportMission_Full.addRequirements(builder, requirementsOffset);
  AirTransportMission_Full.addRemarks(builder, remarksOffset);
  AirTransportMission_Full.addHazMat(builder, hazMatOffset);
  AirTransportMission_Full.addAircraftSorties(builder, aircraftSortiesOffset);
  return AirTransportMission_Full.endAirTransportMission_Full(builder);
}

unpack(): AirTransportMission_FullT {
  return new AirTransportMission_FullT(
    this.id(),
    this.classificationMarking(),
    this.origMissionId(),
    this.amcMissionId(),
    this.gdssMissionId(),
    this.prevMissionId(),
    this.prevAmcmissionId(),
    this.nextMissionId(),
    this.nextAmcmissionId(),
    this.objective(),
    this.purpose(),
    this.jcsPriority(),
    this.cw(),
    this.type(),
    this.firstPickUp(),
    this.lastDropOff(),
    this.alias(),
    this.callSign(),
    this.operation(),
    this.naf(),
    this.allocatedUnit(),
    this.loadCategoryType(),
    this.state(),
    this.sourceSysDeviation(),
    this.apacsId(),
    this.dipWorksheetName(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork(),
    this.bb!.createScalarList<string>(this.requirements.bind(this), this.requirements_Length()),
    this.bb!.createScalarList<string>(this.remarks.bind(this), this.remarks_Length()),
    this.bb!.createScalarList<string>(this.hazMat.bind(this), this.hazMat_Length()),
    this.bb!.createScalarList<string>(this.aircraftSorties.bind(this), this.aircraftSorties_Length())
  );
}


unpackTo(_o: AirTransportMission_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.origMissionId = this.origMissionId();
  _o.amcMissionId = this.amcMissionId();
  _o.gdssMissionId = this.gdssMissionId();
  _o.prevMissionId = this.prevMissionId();
  _o.prevAMCMissionId = this.prevAmcmissionId();
  _o.nextMissionId = this.nextMissionId();
  _o.nextAMCMissionId = this.nextAmcmissionId();
  _o.objective = this.objective();
  _o.purpose = this.purpose();
  _o.jcsPriority = this.jcsPriority();
  _o.cw = this.cw();
  _o.type = this.type();
  _o.firstPickUp = this.firstPickUp();
  _o.lastDropOff = this.lastDropOff();
  _o.alias = this.alias();
  _o.callSign = this.callSign();
  _o.operation = this.operation();
  _o.naf = this.naf();
  _o.allocatedUnit = this.allocatedUnit();
  _o.loadCategoryType = this.loadCategoryType();
  _o.state = this.state();
  _o.sourceSysDeviation = this.sourceSysDeviation();
  _o.apacsId = this.apacsId();
  _o.dipWorksheetName = this.dipWorksheetName();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
  _o.requirements = this.bb!.createScalarList<string>(this.requirements.bind(this), this.requirements_Length());
  _o.remarks = this.bb!.createScalarList<string>(this.remarks.bind(this), this.remarks_Length());
  _o.hazMat = this.bb!.createScalarList<string>(this.hazMat.bind(this), this.hazMat_Length());
  _o.aircraftSorties = this.bb!.createScalarList<string>(this.aircraftSorties.bind(this), this.aircraftSorties_Length());
}
}

export class AirTransportMission_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public origMissionId: string|Uint8Array|null = null,
  public amcMissionId: string|Uint8Array|null = null,
  public gdssMissionId: string|Uint8Array|null = null,
  public prevMissionId: string|Uint8Array|null = null,
  public prevAMCMissionId: string|Uint8Array|null = null,
  public nextMissionId: string|Uint8Array|null = null,
  public nextAMCMissionId: string|Uint8Array|null = null,
  public objective: string|Uint8Array|null = null,
  public purpose: string|Uint8Array|null = null,
  public jcsPriority: string|Uint8Array|null = null,
  public cw: boolean = false,
  public type: string|Uint8Array|null = null,
  public firstPickUp: string|Uint8Array|null = null,
  public lastDropOff: string|Uint8Array|null = null,
  public alias: string|Uint8Array|null = null,
  public callSign: string|Uint8Array|null = null,
  public operation: string|Uint8Array|null = null,
  public naf: string|Uint8Array|null = null,
  public allocatedUnit: string|Uint8Array|null = null,
  public loadCategoryType: string|Uint8Array|null = null,
  public state: string|Uint8Array|null = null,
  public sourceSysDeviation: number = 0.0,
  public apacsId: string|Uint8Array|null = null,
  public dipWorksheetName: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: AirTransportMission_Full_dataMode_Enum = AirTransportMission_Full_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null,
  public requirements: (string)[] = [],
  public remarks: (string)[] = [],
  public hazMat: (string)[] = [],
  public aircraftSorties: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const origMissionId = (this.origMissionId !== null ? builder.createString(this.origMissionId!) : 0);
  const amcMissionId = (this.amcMissionId !== null ? builder.createString(this.amcMissionId!) : 0);
  const gdssMissionId = (this.gdssMissionId !== null ? builder.createString(this.gdssMissionId!) : 0);
  const prevMissionId = (this.prevMissionId !== null ? builder.createString(this.prevMissionId!) : 0);
  const prevAMCMissionId = (this.prevAMCMissionId !== null ? builder.createString(this.prevAMCMissionId!) : 0);
  const nextMissionId = (this.nextMissionId !== null ? builder.createString(this.nextMissionId!) : 0);
  const nextAMCMissionId = (this.nextAMCMissionId !== null ? builder.createString(this.nextAMCMissionId!) : 0);
  const objective = (this.objective !== null ? builder.createString(this.objective!) : 0);
  const purpose = (this.purpose !== null ? builder.createString(this.purpose!) : 0);
  const jcsPriority = (this.jcsPriority !== null ? builder.createString(this.jcsPriority!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const firstPickUp = (this.firstPickUp !== null ? builder.createString(this.firstPickUp!) : 0);
  const lastDropOff = (this.lastDropOff !== null ? builder.createString(this.lastDropOff!) : 0);
  const alias = (this.alias !== null ? builder.createString(this.alias!) : 0);
  const callSign = (this.callSign !== null ? builder.createString(this.callSign!) : 0);
  const operation = (this.operation !== null ? builder.createString(this.operation!) : 0);
  const naf = (this.naf !== null ? builder.createString(this.naf!) : 0);
  const allocatedUnit = (this.allocatedUnit !== null ? builder.createString(this.allocatedUnit!) : 0);
  const loadCategoryType = (this.loadCategoryType !== null ? builder.createString(this.loadCategoryType!) : 0);
  const state = (this.state !== null ? builder.createString(this.state!) : 0);
  const apacsId = (this.apacsId !== null ? builder.createString(this.apacsId!) : 0);
  const dipWorksheetName = (this.dipWorksheetName !== null ? builder.createString(this.dipWorksheetName!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const requirements = AirTransportMission_Full.createRequirementsVector(builder, builder.createObjectOffsetList(this.requirements));
  const remarks = AirTransportMission_Full.createRemarksVector(builder, builder.createObjectOffsetList(this.remarks));
  const hazMat = AirTransportMission_Full.createHazMatVector(builder, builder.createObjectOffsetList(this.hazMat));
  const aircraftSorties = AirTransportMission_Full.createAircraftSortiesVector(builder, builder.createObjectOffsetList(this.aircraftSorties));

  return AirTransportMission_Full.createAirTransportMission_Full(builder,
    id,
    classificationMarking,
    origMissionId,
    amcMissionId,
    gdssMissionId,
    prevMissionId,
    prevAMCMissionId,
    nextMissionId,
    nextAMCMissionId,
    objective,
    purpose,
    jcsPriority,
    this.cw,
    type,
    firstPickUp,
    lastDropOff,
    alias,
    callSign,
    operation,
    naf,
    allocatedUnit,
    loadCategoryType,
    state,
    this.sourceSysDeviation,
    apacsId,
    dipWorksheetName,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    sourceDL,
    source,
    origin,
    this.dataMode,
    origNetwork,
    requirements,
    remarks,
    hazMat,
    aircraftSorties
  );
}
}
