// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of tanker aircraft associated with this Air Event.
 */
export class AirEventTankers_Abridged implements flatbuffers.IUnpackableObject<AirEventTankers_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirEventTankers_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirEventTankers_Abridged(bb:flatbuffers.ByteBuffer, obj?:AirEventTankers_Abridged):AirEventTankers_Abridged {
  return (obj || new AirEventTankers_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirEventTankers_Abridged(bb:flatbuffers.ByteBuffer, obj?:AirEventTankers_Abridged):AirEventTankers_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirEventTankers_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRE');
}

/**
 * The UDL ID of the aircraft sortie this tanker is associated with for this event.
 * Example: /// Example: d833a4bc-756b-41d5-8845-f146fe563387
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idTankerSortie():string|null
idTankerSortie(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idTankerSortie(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL ID of the mission this tanker is associated with for this event.
 * Example: /// Example: edef700c-9917-4dbf-a153-89ffd4446fe9
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idTankerMission():string|null
idTankerMission(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idTankerMission(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL ID of the airfield this tanker is associated with for this event.
 * Example: /// Example: b33955d2-67d3-42be-8316-263e284ce6cc
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idTankerAirfield():string|null
idTankerAirfield(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idTankerAirfield(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional tanker identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: ca673c580fb949a5b733f0e0b67ffab2
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalTankerId():string|null
externalTankerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalTankerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Coordination record identifier of this tanker.
 * Example: /// Example: TTC601
 * Constraints: Minimum length = 0, Maximum length = 6
 */
tankerCoord():string|null
tankerCoord(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tankerCoord(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Model Design Series designation of this tanker.
 * Example: /// Example: KC135R
 * Constraints: Minimum length = 0, Maximum length = 128
 */
tankerMds():string|null
tankerMds(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tankerMds(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Air Mobility Command (AMC) mission identifier of this tanker.
 * Example: /// Example: 8PH000B1S052
 * Constraints: Minimum length = 0, Maximum length = 36
 */
amcTankerMissionId():string|null
amcTankerMissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
amcTankerMissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate mission identifier of this tanker provided by source.
 * Example: /// Example: 1UN05201L121
 * Constraints: Minimum length = 0, Maximum length = 32
 */
altTankerMissionId():string|null
altTankerMissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altTankerMissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The call sign assigned to this tanker.
 * Example: /// Example: BAKER
 * Constraints: Minimum length = 0, Maximum length = 24
 */
tankerCallSign():string|null
tankerCallSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tankerCallSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The wing or unit that owns this tanker.
 * Example: /// Example: 117ARW
 * Constraints: Minimum length = 0, Maximum length = 256
 */
tankerOwner():string|null
tankerOwner(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tankerOwner(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name and/or number of the point of contact for this tanker.
 * Example: /// Example: JOHN SMITH (555)555-5555
 * Constraints: Minimum length = 0, Maximum length = 68
 */
tankerPoc():string|null
tankerPoc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tankerPoc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifies the itinerary point of a mission that this tanker is linked to.
 * Example: /// Example: 825
 * Constraints: No constraints specified.
 */
tankerLegNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Location the tanker has been deployed to in preparation for an air refueling event.
 * Example: /// Example: KOFF
 * Constraints: Minimum length = 0, Maximum length = 4
 */
tankerDeployedIcao():string|null
tankerDeployedIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tankerDeployedIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of fuel delivery method used by the tanker during an air refueling event (BOOM, DROGUE, BOTH).
 * Example: /// Example: DROGUE
 * Constraints: Minimum length = 0, Maximum length = 6
 */
tankerDeliveryMethod():string|null
tankerDeliveryMethod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tankerDeliveryMethod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Total weight of the fuel transferred from this tanker during an air refueling event, in pounds.
 * Example: /// Example: 15000000.1
 * Constraints: No constraints specified.
 */
fuelOff():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Position of this tanker within a group of tankers in an air refueling event.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
tankerCellPosition():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Type of fuel being transferred from the tanker in an air refueling event.
 * Example: /// Example: JP8
 * Constraints: Minimum length = 0, Maximum length = 3
 */
tankerFuelType():string|null
tankerFuelType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tankerFuelType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating that this tanker is flying a dual role mission in an air refueling event.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
dualRole():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startAirEventTankers_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(18);
}

static addIdTankerSortie(builder:flatbuffers.Builder, idTankerSortieOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idTankerSortieOffset, 0);
}

static addIdTankerMission(builder:flatbuffers.Builder, idTankerMissionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idTankerMissionOffset, 0);
}

static addIdTankerAirfield(builder:flatbuffers.Builder, idTankerAirfieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idTankerAirfieldOffset, 0);
}

static addExternalTankerId(builder:flatbuffers.Builder, externalTankerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, externalTankerIdOffset, 0);
}

static addTankerCoord(builder:flatbuffers.Builder, tankerCoordOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, tankerCoordOffset, 0);
}

static addTankerMds(builder:flatbuffers.Builder, tankerMdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, tankerMdsOffset, 0);
}

static addAmcTankerMissionId(builder:flatbuffers.Builder, amcTankerMissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, amcTankerMissionIdOffset, 0);
}

static addAltTankerMissionId(builder:flatbuffers.Builder, altTankerMissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, altTankerMissionIdOffset, 0);
}

static addTankerCallSign(builder:flatbuffers.Builder, tankerCallSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, tankerCallSignOffset, 0);
}

static addTankerOwner(builder:flatbuffers.Builder, tankerOwnerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, tankerOwnerOffset, 0);
}

static addTankerPoc(builder:flatbuffers.Builder, tankerPocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, tankerPocOffset, 0);
}

static addTankerLegNum(builder:flatbuffers.Builder, tankerLegNum:number) {
  builder.addFieldInt32(11, tankerLegNum, 0);
}

static addTankerDeployedIcao(builder:flatbuffers.Builder, tankerDeployedIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, tankerDeployedIcaoOffset, 0);
}

static addTankerDeliveryMethod(builder:flatbuffers.Builder, tankerDeliveryMethodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, tankerDeliveryMethodOffset, 0);
}

static addFuelOff(builder:flatbuffers.Builder, fuelOff:number) {
  builder.addFieldFloat64(14, fuelOff, 0.0);
}

static addTankerCellPosition(builder:flatbuffers.Builder, tankerCellPosition:number) {
  builder.addFieldInt32(15, tankerCellPosition, 0);
}

static addTankerFuelType(builder:flatbuffers.Builder, tankerFuelTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, tankerFuelTypeOffset, 0);
}

static addDualRole(builder:flatbuffers.Builder, dualRole:boolean) {
  builder.addFieldInt8(17, +dualRole, +false);
}

static endAirEventTankers_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirEventTankers_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRE');
}

static finishSizePrefixedAirEventTankers_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRE', true);
}

static createAirEventTankers_Abridged(builder:flatbuffers.Builder, idTankerSortieOffset:flatbuffers.Offset, idTankerMissionOffset:flatbuffers.Offset, idTankerAirfieldOffset:flatbuffers.Offset, externalTankerIdOffset:flatbuffers.Offset, tankerCoordOffset:flatbuffers.Offset, tankerMdsOffset:flatbuffers.Offset, amcTankerMissionIdOffset:flatbuffers.Offset, altTankerMissionIdOffset:flatbuffers.Offset, tankerCallSignOffset:flatbuffers.Offset, tankerOwnerOffset:flatbuffers.Offset, tankerPocOffset:flatbuffers.Offset, tankerLegNum:number, tankerDeployedIcaoOffset:flatbuffers.Offset, tankerDeliveryMethodOffset:flatbuffers.Offset, fuelOff:number, tankerCellPosition:number, tankerFuelTypeOffset:flatbuffers.Offset, dualRole:boolean):flatbuffers.Offset {
  AirEventTankers_Abridged.startAirEventTankers_Abridged(builder);
  AirEventTankers_Abridged.addIdTankerSortie(builder, idTankerSortieOffset);
  AirEventTankers_Abridged.addIdTankerMission(builder, idTankerMissionOffset);
  AirEventTankers_Abridged.addIdTankerAirfield(builder, idTankerAirfieldOffset);
  AirEventTankers_Abridged.addExternalTankerId(builder, externalTankerIdOffset);
  AirEventTankers_Abridged.addTankerCoord(builder, tankerCoordOffset);
  AirEventTankers_Abridged.addTankerMds(builder, tankerMdsOffset);
  AirEventTankers_Abridged.addAmcTankerMissionId(builder, amcTankerMissionIdOffset);
  AirEventTankers_Abridged.addAltTankerMissionId(builder, altTankerMissionIdOffset);
  AirEventTankers_Abridged.addTankerCallSign(builder, tankerCallSignOffset);
  AirEventTankers_Abridged.addTankerOwner(builder, tankerOwnerOffset);
  AirEventTankers_Abridged.addTankerPoc(builder, tankerPocOffset);
  AirEventTankers_Abridged.addTankerLegNum(builder, tankerLegNum);
  AirEventTankers_Abridged.addTankerDeployedIcao(builder, tankerDeployedIcaoOffset);
  AirEventTankers_Abridged.addTankerDeliveryMethod(builder, tankerDeliveryMethodOffset);
  AirEventTankers_Abridged.addFuelOff(builder, fuelOff);
  AirEventTankers_Abridged.addTankerCellPosition(builder, tankerCellPosition);
  AirEventTankers_Abridged.addTankerFuelType(builder, tankerFuelTypeOffset);
  AirEventTankers_Abridged.addDualRole(builder, dualRole);
  return AirEventTankers_Abridged.endAirEventTankers_Abridged(builder);
}

unpack(): AirEventTankers_AbridgedT {
  return new AirEventTankers_AbridgedT(
    this.idTankerSortie(),
    this.idTankerMission(),
    this.idTankerAirfield(),
    this.externalTankerId(),
    this.tankerCoord(),
    this.tankerMds(),
    this.amcTankerMissionId(),
    this.altTankerMissionId(),
    this.tankerCallSign(),
    this.tankerOwner(),
    this.tankerPoc(),
    this.tankerLegNum(),
    this.tankerDeployedIcao(),
    this.tankerDeliveryMethod(),
    this.fuelOff(),
    this.tankerCellPosition(),
    this.tankerFuelType(),
    this.dualRole()
  );
}


unpackTo(_o: AirEventTankers_AbridgedT): void {
  _o.idTankerSortie = this.idTankerSortie();
  _o.idTankerMission = this.idTankerMission();
  _o.idTankerAirfield = this.idTankerAirfield();
  _o.externalTankerId = this.externalTankerId();
  _o.tankerCoord = this.tankerCoord();
  _o.tankerMds = this.tankerMds();
  _o.amcTankerMissionId = this.amcTankerMissionId();
  _o.altTankerMissionId = this.altTankerMissionId();
  _o.tankerCallSign = this.tankerCallSign();
  _o.tankerOwner = this.tankerOwner();
  _o.tankerPoc = this.tankerPoc();
  _o.tankerLegNum = this.tankerLegNum();
  _o.tankerDeployedIcao = this.tankerDeployedIcao();
  _o.tankerDeliveryMethod = this.tankerDeliveryMethod();
  _o.fuelOff = this.fuelOff();
  _o.tankerCellPosition = this.tankerCellPosition();
  _o.tankerFuelType = this.tankerFuelType();
  _o.dualRole = this.dualRole();
}
}

export class AirEventTankers_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public idTankerSortie: string|Uint8Array|null = null,
  public idTankerMission: string|Uint8Array|null = null,
  public idTankerAirfield: string|Uint8Array|null = null,
  public externalTankerId: string|Uint8Array|null = null,
  public tankerCoord: string|Uint8Array|null = null,
  public tankerMds: string|Uint8Array|null = null,
  public amcTankerMissionId: string|Uint8Array|null = null,
  public altTankerMissionId: string|Uint8Array|null = null,
  public tankerCallSign: string|Uint8Array|null = null,
  public tankerOwner: string|Uint8Array|null = null,
  public tankerPoc: string|Uint8Array|null = null,
  public tankerLegNum: number = 0,
  public tankerDeployedIcao: string|Uint8Array|null = null,
  public tankerDeliveryMethod: string|Uint8Array|null = null,
  public fuelOff: number = 0.0,
  public tankerCellPosition: number = 0,
  public tankerFuelType: string|Uint8Array|null = null,
  public dualRole: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const idTankerSortie = (this.idTankerSortie !== null ? builder.createString(this.idTankerSortie!) : 0);
  const idTankerMission = (this.idTankerMission !== null ? builder.createString(this.idTankerMission!) : 0);
  const idTankerAirfield = (this.idTankerAirfield !== null ? builder.createString(this.idTankerAirfield!) : 0);
  const externalTankerId = (this.externalTankerId !== null ? builder.createString(this.externalTankerId!) : 0);
  const tankerCoord = (this.tankerCoord !== null ? builder.createString(this.tankerCoord!) : 0);
  const tankerMds = (this.tankerMds !== null ? builder.createString(this.tankerMds!) : 0);
  const amcTankerMissionId = (this.amcTankerMissionId !== null ? builder.createString(this.amcTankerMissionId!) : 0);
  const altTankerMissionId = (this.altTankerMissionId !== null ? builder.createString(this.altTankerMissionId!) : 0);
  const tankerCallSign = (this.tankerCallSign !== null ? builder.createString(this.tankerCallSign!) : 0);
  const tankerOwner = (this.tankerOwner !== null ? builder.createString(this.tankerOwner!) : 0);
  const tankerPoc = (this.tankerPoc !== null ? builder.createString(this.tankerPoc!) : 0);
  const tankerDeployedIcao = (this.tankerDeployedIcao !== null ? builder.createString(this.tankerDeployedIcao!) : 0);
  const tankerDeliveryMethod = (this.tankerDeliveryMethod !== null ? builder.createString(this.tankerDeliveryMethod!) : 0);
  const tankerFuelType = (this.tankerFuelType !== null ? builder.createString(this.tankerFuelType!) : 0);

  return AirEventTankers_Abridged.createAirEventTankers_Abridged(builder,
    idTankerSortie,
    idTankerMission,
    idTankerAirfield,
    externalTankerId,
    tankerCoord,
    tankerMds,
    amcTankerMissionId,
    altTankerMissionId,
    tankerCallSign,
    tankerOwner,
    tankerPoc,
    this.tankerLegNum,
    tankerDeployedIcao,
    tankerDeliveryMethod,
    this.fuelOff,
    this.tankerCellPosition,
    tankerFuelType,
    this.dualRole
  );
}
}
