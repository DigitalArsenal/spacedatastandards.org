// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ISRCollection_Ingest_dataMode_Enum } from './isrcollection-ingest-data-mode-enum.js';


/**
 * /// ISR Collection data.
 */
export class ISRCollection_Ingest implements flatbuffers.IUnpackableObject<ISRCollection_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ISRCollection_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsISRCollection_Ingest(bb:flatbuffers.ByteBuffer, obj?:ISRCollection_Ingest):ISRCollection_Ingest {
  return (obj || new ISRCollection_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsISRCollection_Ingest(bb:flatbuffers.ByteBuffer, obj?:ISRCollection_Ingest):ISRCollection_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ISRCollection_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ISRC');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: ISRCOLLECTION-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Version of the IDEX software the request came from for compatibility.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
idexVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Human readable Mission Name.
 * Example: /// Example: Example mission name
 * Constraints: Minimum length = 0, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mission Identifier.
 * Example: /// Example: myTask-2020-04-23T00:00:00.000Z
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionId():string|null
missionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Designation of mission Area Of Responsibility.
 * Example: /// Example: Kandahar
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionAor():string|null
missionAor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionAor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Primary type of intelligence to be collected during the mission.
 * Example: /// Example: Sig
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionPrimaryIntelDiscipline():string|null
missionPrimaryIntelDiscipline(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionPrimaryIntelDiscipline(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sub category of primary intelligence to be collected.
 * Example: /// Example: FMV
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionPrimarySubCategory():string|null
missionPrimarySubCategory(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionPrimarySubCategory(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of intelligence to be collected second.
 * Example: /// Example: Intelligence_2
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionSecondaryIntelDiscipline():string|null
missionSecondaryIntelDiscipline(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionSecondaryIntelDiscipline(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mission sub category for secondary intelligence discipline to be collected.
 * Example: /// Example: Convoy
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionSecondarySubCategory():string|null
missionSecondarySubCategory(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionSecondarySubCategory(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * What is the primary objective(Role) of this mission.
 * Example: /// Example: Targeting of Lead Vehicle
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionRole():string|null
missionRole(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionRole(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mission operation name.
 * Example: /// Example: OP-HONEY-BADGER
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionOperation():string|null
missionOperation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionOperation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mission Priority (1-n).
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
missionPriority():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Name of the Supporting unit/Location that is performing this mission.
 * Example: /// Example: ENVOYS
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionSupportedUnit():string|null
missionSupportedUnit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionSupportedUnit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Text version of what we are emphasizing in this mission.
 * Example: /// Example: Mission emphasis
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionEmphasis():string|null
missionEmphasis(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionEmphasis(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
missionStartPointLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 80.23
 * Constraints: No constraints specified.
 */
missionStartPointLong():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Mission geographical collection area.
 * Example: /// Example: Example collection area
 * Constraints: Minimum length = 0, Maximum length = 512
 */
missionCollectionArea():string|null
missionCollectionArea(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionCollectionArea(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Joint Operations Area.
 * Example: /// Example: Operation area
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionJoa():string|null
missionJoa(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionJoa(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A synchronization matrix is used to organize the logistics synchronization process during a mission.
 * Example: /// Example: MATRIX
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionSyncMatrixBin():string|null
missionSyncMatrixBin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionSyncMatrixBin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.
 * Example: /// Example: US
 * Constraints: Minimum length = 0, Maximum length = 4
 */
missionCountry():string|null
missionCountry(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionCountry(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Region of the mission.
 * Example: /// Example: Example Region
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionRegion():string|null
missionRegion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionRegion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Subregion of the mission.
 * Example: /// Example: Example Subregion
 * Constraints: Minimum length = 0, Maximum length = 32
 */
missionSubRegion():string|null
missionSubRegion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionSubRegion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mission desired collection requirements.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
collectionRequirements(index: number):string
collectionRequirements(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
collectionRequirements(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

collectionRequirementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Object for data dissemination.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
transit(index: number):string
transit(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
transit(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

transitLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Individual taskings to complete the mission.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
taskings(index: number):string
taskings(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
taskings(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

taskingsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2021-01-19T01:01:15.001Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():ISRCollection_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ISRCollection_Ingest_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startISRCollection_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(34);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdexVersion(builder:flatbuffers.Builder, idexVersion:number) {
  builder.addFieldInt32(2, idexVersion, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addMissionId(builder:flatbuffers.Builder, missionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, missionIdOffset, 0);
}

static addMissionAor(builder:flatbuffers.Builder, missionAorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, missionAorOffset, 0);
}

static addMissionPrimaryIntelDiscipline(builder:flatbuffers.Builder, missionPrimaryIntelDisciplineOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, missionPrimaryIntelDisciplineOffset, 0);
}

static addMissionPrimarySubCategory(builder:flatbuffers.Builder, missionPrimarySubCategoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, missionPrimarySubCategoryOffset, 0);
}

static addMissionSecondaryIntelDiscipline(builder:flatbuffers.Builder, missionSecondaryIntelDisciplineOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, missionSecondaryIntelDisciplineOffset, 0);
}

static addMissionSecondarySubCategory(builder:flatbuffers.Builder, missionSecondarySubCategoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, missionSecondarySubCategoryOffset, 0);
}

static addMissionRole(builder:flatbuffers.Builder, missionRoleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, missionRoleOffset, 0);
}

static addMissionOperation(builder:flatbuffers.Builder, missionOperationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, missionOperationOffset, 0);
}

static addMissionPriority(builder:flatbuffers.Builder, missionPriority:number) {
  builder.addFieldInt32(12, missionPriority, 0);
}

static addMissionSupportedUnit(builder:flatbuffers.Builder, missionSupportedUnitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, missionSupportedUnitOffset, 0);
}

static addMissionEmphasis(builder:flatbuffers.Builder, missionEmphasisOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, missionEmphasisOffset, 0);
}

static addMissionStartPointLat(builder:flatbuffers.Builder, missionStartPointLat:number) {
  builder.addFieldFloat64(15, missionStartPointLat, 0.0);
}

static addMissionStartPointLong(builder:flatbuffers.Builder, missionStartPointLong:number) {
  builder.addFieldFloat64(16, missionStartPointLong, 0.0);
}

static addMissionCollectionArea(builder:flatbuffers.Builder, missionCollectionAreaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, missionCollectionAreaOffset, 0);
}

static addMissionJoa(builder:flatbuffers.Builder, missionJoaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, missionJoaOffset, 0);
}

static addMissionSyncMatrixBin(builder:flatbuffers.Builder, missionSyncMatrixBinOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, missionSyncMatrixBinOffset, 0);
}

static addMissionCountry(builder:flatbuffers.Builder, missionCountryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, missionCountryOffset, 0);
}

static addMissionRegion(builder:flatbuffers.Builder, missionRegionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, missionRegionOffset, 0);
}

static addMissionSubRegion(builder:flatbuffers.Builder, missionSubRegionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, missionSubRegionOffset, 0);
}

static addCollectionRequirements(builder:flatbuffers.Builder, collectionRequirementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, collectionRequirementsOffset, 0);
}

static createCollectionRequirementsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCollectionRequirementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTransit(builder:flatbuffers.Builder, transitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, transitOffset, 0);
}

static createTransitVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTransitVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTaskings(builder:flatbuffers.Builder, taskingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, taskingsOffset, 0);
}

static createTaskingsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTaskingsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, updatedByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:ISRCollection_Ingest_dataMode_Enum) {
  builder.addFieldInt8(32, dataMode, ISRCollection_Ingest_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, origNetworkOffset, 0);
}

static endISRCollection_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishISRCollection_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC');
}

static finishSizePrefixedISRCollection_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC', true);
}

static createISRCollection_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idexVersion:number, nameOffset:flatbuffers.Offset, missionIdOffset:flatbuffers.Offset, missionAorOffset:flatbuffers.Offset, missionPrimaryIntelDisciplineOffset:flatbuffers.Offset, missionPrimarySubCategoryOffset:flatbuffers.Offset, missionSecondaryIntelDisciplineOffset:flatbuffers.Offset, missionSecondarySubCategoryOffset:flatbuffers.Offset, missionRoleOffset:flatbuffers.Offset, missionOperationOffset:flatbuffers.Offset, missionPriority:number, missionSupportedUnitOffset:flatbuffers.Offset, missionEmphasisOffset:flatbuffers.Offset, missionStartPointLat:number, missionStartPointLong:number, missionCollectionAreaOffset:flatbuffers.Offset, missionJoaOffset:flatbuffers.Offset, missionSyncMatrixBinOffset:flatbuffers.Offset, missionCountryOffset:flatbuffers.Offset, missionRegionOffset:flatbuffers.Offset, missionSubRegionOffset:flatbuffers.Offset, collectionRequirementsOffset:flatbuffers.Offset, transitOffset:flatbuffers.Offset, taskingsOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:ISRCollection_Ingest_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  ISRCollection_Ingest.startISRCollection_Ingest(builder);
  ISRCollection_Ingest.addId(builder, idOffset);
  ISRCollection_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  ISRCollection_Ingest.addIdexVersion(builder, idexVersion);
  ISRCollection_Ingest.addName(builder, nameOffset);
  ISRCollection_Ingest.addMissionId(builder, missionIdOffset);
  ISRCollection_Ingest.addMissionAor(builder, missionAorOffset);
  ISRCollection_Ingest.addMissionPrimaryIntelDiscipline(builder, missionPrimaryIntelDisciplineOffset);
  ISRCollection_Ingest.addMissionPrimarySubCategory(builder, missionPrimarySubCategoryOffset);
  ISRCollection_Ingest.addMissionSecondaryIntelDiscipline(builder, missionSecondaryIntelDisciplineOffset);
  ISRCollection_Ingest.addMissionSecondarySubCategory(builder, missionSecondarySubCategoryOffset);
  ISRCollection_Ingest.addMissionRole(builder, missionRoleOffset);
  ISRCollection_Ingest.addMissionOperation(builder, missionOperationOffset);
  ISRCollection_Ingest.addMissionPriority(builder, missionPriority);
  ISRCollection_Ingest.addMissionSupportedUnit(builder, missionSupportedUnitOffset);
  ISRCollection_Ingest.addMissionEmphasis(builder, missionEmphasisOffset);
  ISRCollection_Ingest.addMissionStartPointLat(builder, missionStartPointLat);
  ISRCollection_Ingest.addMissionStartPointLong(builder, missionStartPointLong);
  ISRCollection_Ingest.addMissionCollectionArea(builder, missionCollectionAreaOffset);
  ISRCollection_Ingest.addMissionJoa(builder, missionJoaOffset);
  ISRCollection_Ingest.addMissionSyncMatrixBin(builder, missionSyncMatrixBinOffset);
  ISRCollection_Ingest.addMissionCountry(builder, missionCountryOffset);
  ISRCollection_Ingest.addMissionRegion(builder, missionRegionOffset);
  ISRCollection_Ingest.addMissionSubRegion(builder, missionSubRegionOffset);
  ISRCollection_Ingest.addCollectionRequirements(builder, collectionRequirementsOffset);
  ISRCollection_Ingest.addTransit(builder, transitOffset);
  ISRCollection_Ingest.addTaskings(builder, taskingsOffset);
  ISRCollection_Ingest.addCreatedAt(builder, createdAtOffset);
  ISRCollection_Ingest.addCreatedBy(builder, createdByOffset);
  ISRCollection_Ingest.addUpdatedAt(builder, updatedAtOffset);
  ISRCollection_Ingest.addUpdatedBy(builder, updatedByOffset);
  ISRCollection_Ingest.addSource(builder, sourceOffset);
  ISRCollection_Ingest.addOrigin(builder, originOffset);
  ISRCollection_Ingest.addDataMode(builder, dataMode);
  ISRCollection_Ingest.addOrigNetwork(builder, origNetworkOffset);
  return ISRCollection_Ingest.endISRCollection_Ingest(builder);
}

unpack(): ISRCollection_IngestT {
  return new ISRCollection_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idexVersion(),
    this.name(),
    this.missionId(),
    this.missionAor(),
    this.missionPrimaryIntelDiscipline(),
    this.missionPrimarySubCategory(),
    this.missionSecondaryIntelDiscipline(),
    this.missionSecondarySubCategory(),
    this.missionRole(),
    this.missionOperation(),
    this.missionPriority(),
    this.missionSupportedUnit(),
    this.missionEmphasis(),
    this.missionStartPointLat(),
    this.missionStartPointLong(),
    this.missionCollectionArea(),
    this.missionJoa(),
    this.missionSyncMatrixBin(),
    this.missionCountry(),
    this.missionRegion(),
    this.missionSubRegion(),
    this.bb!.createScalarList<string>(this.collectionRequirements.bind(this), this.collectionRequirements_Length()),
    this.bb!.createScalarList<string>(this.transit.bind(this), this.transit_Length()),
    this.bb!.createScalarList<string>(this.taskings.bind(this), this.taskings_Length()),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: ISRCollection_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idexVersion = this.idexVersion();
  _o.name = this.name();
  _o.missionId = this.missionId();
  _o.missionAOR = this.missionAor();
  _o.missionPrimaryIntelDiscipline = this.missionPrimaryIntelDiscipline();
  _o.missionPrimarySubCategory = this.missionPrimarySubCategory();
  _o.missionSecondaryIntelDiscipline = this.missionSecondaryIntelDiscipline();
  _o.missionSecondarySubCategory = this.missionSecondarySubCategory();
  _o.missionRole = this.missionRole();
  _o.missionOperation = this.missionOperation();
  _o.missionPriority = this.missionPriority();
  _o.missionSupportedUnit = this.missionSupportedUnit();
  _o.missionEmphasis = this.missionEmphasis();
  _o.missionStartPointLat = this.missionStartPointLat();
  _o.missionStartPointLong = this.missionStartPointLong();
  _o.missionCollectionArea = this.missionCollectionArea();
  _o.missionJoa = this.missionJoa();
  _o.missionSyncMatrixBin = this.missionSyncMatrixBin();
  _o.missionCountry = this.missionCountry();
  _o.missionRegion = this.missionRegion();
  _o.missionSubRegion = this.missionSubRegion();
  _o.collectionRequirements = this.bb!.createScalarList<string>(this.collectionRequirements.bind(this), this.collectionRequirements_Length());
  _o.transit = this.bb!.createScalarList<string>(this.transit.bind(this), this.transit_Length());
  _o.taskings = this.bb!.createScalarList<string>(this.taskings.bind(this), this.taskings_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class ISRCollection_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idexVersion: number = 0,
  public name: string|Uint8Array|null = null,
  public missionId: string|Uint8Array|null = null,
  public missionAOR: string|Uint8Array|null = null,
  public missionPrimaryIntelDiscipline: string|Uint8Array|null = null,
  public missionPrimarySubCategory: string|Uint8Array|null = null,
  public missionSecondaryIntelDiscipline: string|Uint8Array|null = null,
  public missionSecondarySubCategory: string|Uint8Array|null = null,
  public missionRole: string|Uint8Array|null = null,
  public missionOperation: string|Uint8Array|null = null,
  public missionPriority: number = 0,
  public missionSupportedUnit: string|Uint8Array|null = null,
  public missionEmphasis: string|Uint8Array|null = null,
  public missionStartPointLat: number = 0.0,
  public missionStartPointLong: number = 0.0,
  public missionCollectionArea: string|Uint8Array|null = null,
  public missionJoa: string|Uint8Array|null = null,
  public missionSyncMatrixBin: string|Uint8Array|null = null,
  public missionCountry: string|Uint8Array|null = null,
  public missionRegion: string|Uint8Array|null = null,
  public missionSubRegion: string|Uint8Array|null = null,
  public collectionRequirements: (string)[] = [],
  public transit: (string)[] = [],
  public taskings: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: ISRCollection_Ingest_dataMode_Enum = ISRCollection_Ingest_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const missionId = (this.missionId !== null ? builder.createString(this.missionId!) : 0);
  const missionAOR = (this.missionAOR !== null ? builder.createString(this.missionAOR!) : 0);
  const missionPrimaryIntelDiscipline = (this.missionPrimaryIntelDiscipline !== null ? builder.createString(this.missionPrimaryIntelDiscipline!) : 0);
  const missionPrimarySubCategory = (this.missionPrimarySubCategory !== null ? builder.createString(this.missionPrimarySubCategory!) : 0);
  const missionSecondaryIntelDiscipline = (this.missionSecondaryIntelDiscipline !== null ? builder.createString(this.missionSecondaryIntelDiscipline!) : 0);
  const missionSecondarySubCategory = (this.missionSecondarySubCategory !== null ? builder.createString(this.missionSecondarySubCategory!) : 0);
  const missionRole = (this.missionRole !== null ? builder.createString(this.missionRole!) : 0);
  const missionOperation = (this.missionOperation !== null ? builder.createString(this.missionOperation!) : 0);
  const missionSupportedUnit = (this.missionSupportedUnit !== null ? builder.createString(this.missionSupportedUnit!) : 0);
  const missionEmphasis = (this.missionEmphasis !== null ? builder.createString(this.missionEmphasis!) : 0);
  const missionCollectionArea = (this.missionCollectionArea !== null ? builder.createString(this.missionCollectionArea!) : 0);
  const missionJoa = (this.missionJoa !== null ? builder.createString(this.missionJoa!) : 0);
  const missionSyncMatrixBin = (this.missionSyncMatrixBin !== null ? builder.createString(this.missionSyncMatrixBin!) : 0);
  const missionCountry = (this.missionCountry !== null ? builder.createString(this.missionCountry!) : 0);
  const missionRegion = (this.missionRegion !== null ? builder.createString(this.missionRegion!) : 0);
  const missionSubRegion = (this.missionSubRegion !== null ? builder.createString(this.missionSubRegion!) : 0);
  const collectionRequirements = ISRCollection_Ingest.createCollectionRequirementsVector(builder, builder.createObjectOffsetList(this.collectionRequirements));
  const transit = ISRCollection_Ingest.createTransitVector(builder, builder.createObjectOffsetList(this.transit));
  const taskings = ISRCollection_Ingest.createTaskingsVector(builder, builder.createObjectOffsetList(this.taskings));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return ISRCollection_Ingest.createISRCollection_Ingest(builder,
    id,
    classificationMarking,
    this.idexVersion,
    name,
    missionId,
    missionAOR,
    missionPrimaryIntelDiscipline,
    missionPrimarySubCategory,
    missionSecondaryIntelDiscipline,
    missionSecondarySubCategory,
    missionRole,
    missionOperation,
    this.missionPriority,
    missionSupportedUnit,
    missionEmphasis,
    this.missionStartPointLat,
    this.missionStartPointLong,
    missionCollectionArea,
    missionJoa,
    missionSyncMatrixBin,
    missionCountry,
    missionRegion,
    missionSubRegion,
    collectionRequirements,
    transit,
    taskings,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
