// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Item_Ingest_dataMode_Enum } from './item-ingest-data-mode-enum.js';


/**
 * /// No description available.
 */
export class Item_Ingest implements flatbuffers.IUnpackableObject<Item_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Item_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsItem_Ingest(bb:flatbuffers.ByteBuffer, obj?:Item_Ingest):Item_Ingest {
  return (obj || new Item_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsItem_Ingest(bb:flatbuffers.ByteBuffer, obj?:Item_Ingest):Item_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Item_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ITEM');
}

/**
 * Unique identifier of the record, auto-generated by the system if not provided on create operations.
 * Example: /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL ID of the air load plan this item is associated with.
 * Example: /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idAirLoadPlan():string|null
idAirLoadPlan(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idAirLoadPlan(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
 * Example: /// Example: 12345ABCD
 * Constraints: Minimum length = 1, Maximum length = 36
 */
scanCode():string|null
scanCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scanCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
 * Example: /// Example: bID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
scGenTool():string|null
scGenTool(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scGenTool(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
 * Example: /// Example: CARGO
 * Constraints: Minimum length = 1, Maximum length = 32
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
 * Example: /// Example: PALLET
 * Constraints: Minimum length = 0, Maximum length = 32
 */
cargoType():string|null
cargoType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cargoType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the item. Applicable for equipment and cargo item types only.
 * Example: /// Example: Product Name
 * Constraints: Minimum length = 0, Maximum length = 100
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
 * Example: /// Example: RMS
 * Constraints: Minimum length = 0, Maximum length = 36
 */
destination():string|null
destination(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
destination(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The departure code or location where this item has left or is leaving.
 * Example: /// Example: CHS
 * Constraints: Minimum length = 0, Maximum length = 36
 */
departure():string|null
departure(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
departure(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the unit receiving this item.
 * Example: /// Example: 50 SBN
 * Constraints: Minimum length = 0, Maximum length = 100
 */
receivingUnit():string|null
receivingUnit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receivingUnit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The military branch receiving this item.
 * Example: /// Example: Air Force
 * Constraints: Minimum length = 0, Maximum length = 32
 */
receivingBranch():string|null
receivingBranch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receivingBranch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
 * Example: /// Example: 2023-03-13
 * Constraints: No constraints specified.
 */
lastArrDate():string|null
lastArrDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastArrDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The unit line number of this item.
 * Example: /// Example: T01ME01
 * Constraints: Minimum length = 0, Maximum length = 16
 */
uln():string|null
uln(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
uln(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Weight of the item in kilograms (if item is a passenger, include on-person bags).
 * Example: /// Example: 5443.335
 * Constraints: No constraints specified.
 */
weight():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-03-13T16:06:00.123Z
 * Constraints: No constraints specified.
 */
weightTs():string|null
weightTs(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
weightTs(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The classification code of the commodity or group of commodities.
 * Example: /// Example: 2304116
 * Constraints: Minimum length = 0, Maximum length = 50
 */
commodityCode():string|null
commodityCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
commodityCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
 * Example: /// Example: STCC
 * Constraints: Minimum length = 0, Maximum length = 36
 */
commoditySys():string|null
commoditySys(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
commoditySys(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The code denoting the type of material item.
 * Example: /// Example: 530500234
 * Constraints: Minimum length = 0, Maximum length = 36
 */
productCode():string|null
productCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
productCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
 * Example: /// Example: NSN
 * Constraints: Minimum length = 0, Maximum length = 32
 */
productSys():string|null
productSys(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
productSys(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Width of the cargo in meters. Applicable for cargo item types only.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
width():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Length of the cargo in meters. Applicable for cargo item types only.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
length():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Height of the cargo in meters. Applicable for cargo item types only.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
height():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The volume of the item, in cubic meters. Applicable for cargo item types only.
 * Example: /// Example: 7.8902
 * Constraints: No constraints specified.
 */
volume():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Center of gravity position of the item, measured from the item's front datum, in centimeters.
 * Example: /// Example: 112.014
 * Constraints: No constraints specified.
 */
cg():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
 * Example: /// Example: 412.1
 * Constraints: No constraints specified.
 */
fs():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
 * Example: /// Example: 3.1
 * Constraints: No constraints specified.
 */
centerlineOffset():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
 * Example: /// Example: 4000.1
 * Constraints: No constraints specified.
 */
moment():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
airdrop():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Transportation Control Number of the cargo. Applicable for cargo item types only.
 * Example: /// Example: M1358232245912XXX
 * Constraints: Minimum length = 0, Maximum length = 17
 */
tcn():string|null
tcn(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tcn(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of UN hazard classes or division codes that apply to this item.
 * Example: /// Example: [1.1, 1.2]
 * Constraints: No constraints specified.
 */
hazCodes(index: number):string
hazCodes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
hazCodes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

hazCodesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Net explosive weight of the item, in kilograms.
 * Example: /// Example: 51.437
 * Constraints: No constraints specified.
 */
netExpWt():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating this item acts as a container and contains additional items.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
container():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Array of tracking identifiers that are contained within this item.
 * Example: /// Example: ['2UJ8843K', '745YV1T65']
 * Constraints: No constraints specified.
 */
itemContains(index: number):string
itemContains(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
itemContains(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

itemContainsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
numPalletPos():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * United States Distinguished Visitor Code, only applicable to people.
 * Example: /// Example: DV-2
 * Constraints: Minimum length = 0, Maximum length = 16
 */
dvCode():string|null
dvCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dvCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional notes or comments about this item.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
 * Example: /// Example: ['key1', 'key2']
 * Constraints: No constraints specified.
 */
keys(index: number):string
keys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
keys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

keysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
 * Example: /// Example: ['value1', 'value2']
 * Constraints: No constraints specified.
 */
values(index: number):string
values(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
values(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
 * Example: /// Example: Alt Data Format
 * Constraints: Minimum length = 0, Maximum length = 100
 */
altDataFormat():string|null
altDataFormat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altDataFormat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
 * Example: /// Example: Accepting System
 * Constraints: Minimum length = 0, Maximum length = 100
 */
accSystem():string|null
accSystem(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
accSystem(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional data required to find this item in the accepting system.
 * Example: /// Example: Accepting System Notes
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
accSysNotes():string|null
accSysNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
accSysNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
 * Example: /// Example: ['System key1', 'System key2']
 * Constraints: No constraints specified.
 */
accSysKeys(index: number):string
accSysKeys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
accSysKeys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

accSysKeysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
 * Example: /// Example: ['System value1', 'System value2']
 * Constraints: No constraints specified.
 */
accSysValues(index: number):string
accSysValues(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
accSysValues(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

accSysValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2023-03-21T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Item_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Item_Ingest_dataMode_Enum.REAL;
}

static startItem_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(51);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdAirLoadPlan(builder:flatbuffers.Builder, idAirLoadPlanOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idAirLoadPlanOffset, 0);
}

static addScanCode(builder:flatbuffers.Builder, scanCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, scanCodeOffset, 0);
}

static addScGenTool(builder:flatbuffers.Builder, scGenToolOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, scGenToolOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, typeOffset, 0);
}

static addCargoType(builder:flatbuffers.Builder, cargoTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, cargoTypeOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, nameOffset, 0);
}

static addDestination(builder:flatbuffers.Builder, destinationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, destinationOffset, 0);
}

static addDeparture(builder:flatbuffers.Builder, departureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, departureOffset, 0);
}

static addReceivingUnit(builder:flatbuffers.Builder, receivingUnitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, receivingUnitOffset, 0);
}

static addReceivingBranch(builder:flatbuffers.Builder, receivingBranchOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, receivingBranchOffset, 0);
}

static addLastArrDate(builder:flatbuffers.Builder, lastArrDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, lastArrDateOffset, 0);
}

static addUln(builder:flatbuffers.Builder, ulnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, ulnOffset, 0);
}

static addWeight(builder:flatbuffers.Builder, weight:number) {
  builder.addFieldFloat64(14, weight, 0.0);
}

static addWeightTs(builder:flatbuffers.Builder, weightTsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, weightTsOffset, 0);
}

static addCommodityCode(builder:flatbuffers.Builder, commodityCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, commodityCodeOffset, 0);
}

static addCommoditySys(builder:flatbuffers.Builder, commoditySysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, commoditySysOffset, 0);
}

static addProductCode(builder:flatbuffers.Builder, productCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, productCodeOffset, 0);
}

static addProductSys(builder:flatbuffers.Builder, productSysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, productSysOffset, 0);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldFloat64(20, width, 0.0);
}

static addLength(builder:flatbuffers.Builder, length:number) {
  builder.addFieldFloat64(21, length, 0.0);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldFloat64(22, height, 0.0);
}

static addVolume(builder:flatbuffers.Builder, volume:number) {
  builder.addFieldFloat64(23, volume, 0.0);
}

static addCg(builder:flatbuffers.Builder, cg:number) {
  builder.addFieldFloat64(24, cg, 0.0);
}

static addFs(builder:flatbuffers.Builder, fs:number) {
  builder.addFieldFloat64(25, fs, 0.0);
}

static addCenterlineOffset(builder:flatbuffers.Builder, centerlineOffset:number) {
  builder.addFieldFloat64(26, centerlineOffset, 0.0);
}

static addMoment(builder:flatbuffers.Builder, moment:number) {
  builder.addFieldFloat64(27, moment, 0.0);
}

static addAirdrop(builder:flatbuffers.Builder, airdrop:boolean) {
  builder.addFieldInt8(28, +airdrop, +false);
}

static addTcn(builder:flatbuffers.Builder, tcnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, tcnOffset, 0);
}

static addHazCodes(builder:flatbuffers.Builder, hazCodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, hazCodesOffset, 0);
}

static createHazCodesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startHazCodesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNetExpWt(builder:flatbuffers.Builder, netExpWt:number) {
  builder.addFieldFloat64(31, netExpWt, 0.0);
}

static addContainer(builder:flatbuffers.Builder, container:boolean) {
  builder.addFieldInt8(32, +container, +false);
}

static addItemContains(builder:flatbuffers.Builder, itemContainsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, itemContainsOffset, 0);
}

static createItemContainsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startItemContainsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNumPalletPos(builder:flatbuffers.Builder, numPalletPos:number) {
  builder.addFieldInt32(34, numPalletPos, 0);
}

static addDvCode(builder:flatbuffers.Builder, dvCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, dvCodeOffset, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, notesOffset, 0);
}

static addKeys(builder:flatbuffers.Builder, keysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, keysOffset, 0);
}

static createKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAltDataFormat(builder:flatbuffers.Builder, altDataFormatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, altDataFormatOffset, 0);
}

static addAccSystem(builder:flatbuffers.Builder, accSystemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, accSystemOffset, 0);
}

static addAccSysNotes(builder:flatbuffers.Builder, accSysNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, accSysNotesOffset, 0);
}

static addAccSysKeys(builder:flatbuffers.Builder, accSysKeysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, accSysKeysOffset, 0);
}

static createAccSysKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAccSysKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAccSysValues(builder:flatbuffers.Builder, accSysValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, accSysValuesOffset, 0);
}

static createAccSysValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAccSysValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, createdByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Item_Ingest_dataMode_Enum) {
  builder.addFieldInt8(50, dataMode, Item_Ingest_dataMode_Enum.REAL);
}

static endItem_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishItem_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ITEM');
}

static finishSizePrefixedItem_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ITEM', true);
}

static createItem_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idAirLoadPlanOffset:flatbuffers.Offset, scanCodeOffset:flatbuffers.Offset, scGenToolOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, cargoTypeOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, destinationOffset:flatbuffers.Offset, departureOffset:flatbuffers.Offset, receivingUnitOffset:flatbuffers.Offset, receivingBranchOffset:flatbuffers.Offset, lastArrDateOffset:flatbuffers.Offset, ulnOffset:flatbuffers.Offset, weight:number, weightTsOffset:flatbuffers.Offset, commodityCodeOffset:flatbuffers.Offset, commoditySysOffset:flatbuffers.Offset, productCodeOffset:flatbuffers.Offset, productSysOffset:flatbuffers.Offset, width:number, length:number, height:number, volume:number, cg:number, fs:number, centerlineOffset:number, moment:number, airdrop:boolean, tcnOffset:flatbuffers.Offset, hazCodesOffset:flatbuffers.Offset, netExpWt:number, container:boolean, itemContainsOffset:flatbuffers.Offset, numPalletPos:number, dvCodeOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, keysOffset:flatbuffers.Offset, valuesOffset:flatbuffers.Offset, altDataFormatOffset:flatbuffers.Offset, accSystemOffset:flatbuffers.Offset, accSysNotesOffset:flatbuffers.Offset, accSysKeysOffset:flatbuffers.Offset, accSysValuesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:Item_Ingest_dataMode_Enum):flatbuffers.Offset {
  Item_Ingest.startItem_Ingest(builder);
  Item_Ingest.addId(builder, idOffset);
  Item_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  Item_Ingest.addIdAirLoadPlan(builder, idAirLoadPlanOffset);
  Item_Ingest.addScanCode(builder, scanCodeOffset);
  Item_Ingest.addScGenTool(builder, scGenToolOffset);
  Item_Ingest.addType(builder, typeOffset);
  Item_Ingest.addCargoType(builder, cargoTypeOffset);
  Item_Ingest.addName(builder, nameOffset);
  Item_Ingest.addDestination(builder, destinationOffset);
  Item_Ingest.addDeparture(builder, departureOffset);
  Item_Ingest.addReceivingUnit(builder, receivingUnitOffset);
  Item_Ingest.addReceivingBranch(builder, receivingBranchOffset);
  Item_Ingest.addLastArrDate(builder, lastArrDateOffset);
  Item_Ingest.addUln(builder, ulnOffset);
  Item_Ingest.addWeight(builder, weight);
  Item_Ingest.addWeightTs(builder, weightTsOffset);
  Item_Ingest.addCommodityCode(builder, commodityCodeOffset);
  Item_Ingest.addCommoditySys(builder, commoditySysOffset);
  Item_Ingest.addProductCode(builder, productCodeOffset);
  Item_Ingest.addProductSys(builder, productSysOffset);
  Item_Ingest.addWidth(builder, width);
  Item_Ingest.addLength(builder, length);
  Item_Ingest.addHeight(builder, height);
  Item_Ingest.addVolume(builder, volume);
  Item_Ingest.addCg(builder, cg);
  Item_Ingest.addFs(builder, fs);
  Item_Ingest.addCenterlineOffset(builder, centerlineOffset);
  Item_Ingest.addMoment(builder, moment);
  Item_Ingest.addAirdrop(builder, airdrop);
  Item_Ingest.addTcn(builder, tcnOffset);
  Item_Ingest.addHazCodes(builder, hazCodesOffset);
  Item_Ingest.addNetExpWt(builder, netExpWt);
  Item_Ingest.addContainer(builder, container);
  Item_Ingest.addItemContains(builder, itemContainsOffset);
  Item_Ingest.addNumPalletPos(builder, numPalletPos);
  Item_Ingest.addDvCode(builder, dvCodeOffset);
  Item_Ingest.addNotes(builder, notesOffset);
  Item_Ingest.addKeys(builder, keysOffset);
  Item_Ingest.addValues(builder, valuesOffset);
  Item_Ingest.addAltDataFormat(builder, altDataFormatOffset);
  Item_Ingest.addAccSystem(builder, accSystemOffset);
  Item_Ingest.addAccSysNotes(builder, accSysNotesOffset);
  Item_Ingest.addAccSysKeys(builder, accSysKeysOffset);
  Item_Ingest.addAccSysValues(builder, accSysValuesOffset);
  Item_Ingest.addCreatedAt(builder, createdAtOffset);
  Item_Ingest.addCreatedBy(builder, createdByOffset);
  Item_Ingest.addSourceDl(builder, sourceDlOffset);
  Item_Ingest.addSource(builder, sourceOffset);
  Item_Ingest.addOrigin(builder, originOffset);
  Item_Ingest.addOrigNetwork(builder, origNetworkOffset);
  Item_Ingest.addDataMode(builder, dataMode);
  return Item_Ingest.endItem_Ingest(builder);
}

unpack(): Item_IngestT {
  return new Item_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idAirLoadPlan(),
    this.scanCode(),
    this.scGenTool(),
    this.type(),
    this.cargoType(),
    this.name(),
    this.destination(),
    this.departure(),
    this.receivingUnit(),
    this.receivingBranch(),
    this.lastArrDate(),
    this.uln(),
    this.weight(),
    this.weightTs(),
    this.commodityCode(),
    this.commoditySys(),
    this.productCode(),
    this.productSys(),
    this.width(),
    this.length(),
    this.height(),
    this.volume(),
    this.cg(),
    this.fs(),
    this.centerlineOffset(),
    this.moment(),
    this.airdrop(),
    this.tcn(),
    this.bb!.createScalarList<string>(this.hazCodes.bind(this), this.hazCodes_Length()),
    this.netExpWt(),
    this.container(),
    this.bb!.createScalarList<string>(this.itemContains.bind(this), this.itemContains_Length()),
    this.numPalletPos(),
    this.dvCode(),
    this.notes(),
    this.bb!.createScalarList<string>(this.keys.bind(this), this.keys_Length()),
    this.bb!.createScalarList<string>(this.values.bind(this), this.values_Length()),
    this.altDataFormat(),
    this.accSystem(),
    this.accSysNotes(),
    this.bb!.createScalarList<string>(this.accSysKeys.bind(this), this.accSysKeys_Length()),
    this.bb!.createScalarList<string>(this.accSysValues.bind(this), this.accSysValues_Length()),
    this.createdAt(),
    this.createdBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: Item_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idAirLoadPlan = this.idAirLoadPlan();
  _o.scanCode = this.scanCode();
  _o.scGenTool = this.scGenTool();
  _o.type = this.type();
  _o.cargoType = this.cargoType();
  _o.name = this.name();
  _o.destination = this.destination();
  _o.departure = this.departure();
  _o.receivingUnit = this.receivingUnit();
  _o.receivingBranch = this.receivingBranch();
  _o.lastArrDate = this.lastArrDate();
  _o.uln = this.uln();
  _o.weight = this.weight();
  _o.weightTS = this.weightTs();
  _o.commodityCode = this.commodityCode();
  _o.commoditySys = this.commoditySys();
  _o.productCode = this.productCode();
  _o.productSys = this.productSys();
  _o.width = this.width();
  _o.length = this.length();
  _o.height = this.height();
  _o.volume = this.volume();
  _o.cg = this.cg();
  _o.fs = this.fs();
  _o.centerlineOffset = this.centerlineOffset();
  _o.moment = this.moment();
  _o.airdrop = this.airdrop();
  _o.tcn = this.tcn();
  _o.hazCodes = this.bb!.createScalarList<string>(this.hazCodes.bind(this), this.hazCodes_Length());
  _o.netExpWt = this.netExpWt();
  _o.container = this.container();
  _o.itemContains = this.bb!.createScalarList<string>(this.itemContains.bind(this), this.itemContains_Length());
  _o.numPalletPos = this.numPalletPos();
  _o.dvCode = this.dvCode();
  _o.notes = this.notes();
  _o.keys = this.bb!.createScalarList<string>(this.keys.bind(this), this.keys_Length());
  _o.values = this.bb!.createScalarList<string>(this.values.bind(this), this.values_Length());
  _o.altDataFormat = this.altDataFormat();
  _o.accSystem = this.accSystem();
  _o.accSysNotes = this.accSysNotes();
  _o.accSysKeys = this.bb!.createScalarList<string>(this.accSysKeys.bind(this), this.accSysKeys_Length());
  _o.accSysValues = this.bb!.createScalarList<string>(this.accSysValues.bind(this), this.accSysValues_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class Item_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idAirLoadPlan: string|Uint8Array|null = null,
  public scanCode: string|Uint8Array|null = null,
  public scGenTool: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public cargoType: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public destination: string|Uint8Array|null = null,
  public departure: string|Uint8Array|null = null,
  public receivingUnit: string|Uint8Array|null = null,
  public receivingBranch: string|Uint8Array|null = null,
  public lastArrDate: string|Uint8Array|null = null,
  public uln: string|Uint8Array|null = null,
  public weight: number = 0.0,
  public weightTS: string|Uint8Array|null = null,
  public commodityCode: string|Uint8Array|null = null,
  public commoditySys: string|Uint8Array|null = null,
  public productCode: string|Uint8Array|null = null,
  public productSys: string|Uint8Array|null = null,
  public width: number = 0.0,
  public length: number = 0.0,
  public height: number = 0.0,
  public volume: number = 0.0,
  public cg: number = 0.0,
  public fs: number = 0.0,
  public centerlineOffset: number = 0.0,
  public moment: number = 0.0,
  public airdrop: boolean = false,
  public tcn: string|Uint8Array|null = null,
  public hazCodes: (string)[] = [],
  public netExpWt: number = 0.0,
  public container: boolean = false,
  public itemContains: (string)[] = [],
  public numPalletPos: number = 0,
  public dvCode: string|Uint8Array|null = null,
  public notes: string|Uint8Array|null = null,
  public keys: (string)[] = [],
  public values: (string)[] = [],
  public altDataFormat: string|Uint8Array|null = null,
  public accSystem: string|Uint8Array|null = null,
  public accSysNotes: string|Uint8Array|null = null,
  public accSysKeys: (string)[] = [],
  public accSysValues: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: Item_Ingest_dataMode_Enum = Item_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idAirLoadPlan = (this.idAirLoadPlan !== null ? builder.createString(this.idAirLoadPlan!) : 0);
  const scanCode = (this.scanCode !== null ? builder.createString(this.scanCode!) : 0);
  const scGenTool = (this.scGenTool !== null ? builder.createString(this.scGenTool!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const cargoType = (this.cargoType !== null ? builder.createString(this.cargoType!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const destination = (this.destination !== null ? builder.createString(this.destination!) : 0);
  const departure = (this.departure !== null ? builder.createString(this.departure!) : 0);
  const receivingUnit = (this.receivingUnit !== null ? builder.createString(this.receivingUnit!) : 0);
  const receivingBranch = (this.receivingBranch !== null ? builder.createString(this.receivingBranch!) : 0);
  const lastArrDate = (this.lastArrDate !== null ? builder.createString(this.lastArrDate!) : 0);
  const uln = (this.uln !== null ? builder.createString(this.uln!) : 0);
  const weightTS = (this.weightTS !== null ? builder.createString(this.weightTS!) : 0);
  const commodityCode = (this.commodityCode !== null ? builder.createString(this.commodityCode!) : 0);
  const commoditySys = (this.commoditySys !== null ? builder.createString(this.commoditySys!) : 0);
  const productCode = (this.productCode !== null ? builder.createString(this.productCode!) : 0);
  const productSys = (this.productSys !== null ? builder.createString(this.productSys!) : 0);
  const tcn = (this.tcn !== null ? builder.createString(this.tcn!) : 0);
  const hazCodes = Item_Ingest.createHazCodesVector(builder, builder.createObjectOffsetList(this.hazCodes));
  const itemContains = Item_Ingest.createItemContainsVector(builder, builder.createObjectOffsetList(this.itemContains));
  const dvCode = (this.dvCode !== null ? builder.createString(this.dvCode!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const keys = Item_Ingest.createKeysVector(builder, builder.createObjectOffsetList(this.keys));
  const values = Item_Ingest.createValuesVector(builder, builder.createObjectOffsetList(this.values));
  const altDataFormat = (this.altDataFormat !== null ? builder.createString(this.altDataFormat!) : 0);
  const accSystem = (this.accSystem !== null ? builder.createString(this.accSystem!) : 0);
  const accSysNotes = (this.accSysNotes !== null ? builder.createString(this.accSysNotes!) : 0);
  const accSysKeys = Item_Ingest.createAccSysKeysVector(builder, builder.createObjectOffsetList(this.accSysKeys));
  const accSysValues = Item_Ingest.createAccSysValuesVector(builder, builder.createObjectOffsetList(this.accSysValues));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Item_Ingest.createItem_Ingest(builder,
    id,
    classificationMarking,
    idAirLoadPlan,
    scanCode,
    scGenTool,
    type,
    cargoType,
    name,
    destination,
    departure,
    receivingUnit,
    receivingBranch,
    lastArrDate,
    uln,
    this.weight,
    weightTS,
    commodityCode,
    commoditySys,
    productCode,
    productSys,
    this.width,
    this.length,
    this.height,
    this.volume,
    this.cg,
    this.fs,
    this.centerlineOffset,
    this.moment,
    this.airdrop,
    tcn,
    hazCodes,
    this.netExpWt,
    this.container,
    itemContains,
    this.numPalletPos,
    dvCode,
    notes,
    keys,
    values,
    altDataFormat,
    accSystem,
    accSysNotes,
    accSysKeys,
    accSysValues,
    createdAt,
    createdBy,
    sourceDL,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
