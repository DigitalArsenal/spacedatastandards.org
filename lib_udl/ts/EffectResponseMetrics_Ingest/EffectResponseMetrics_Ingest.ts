// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// List of COA metrics associated with this effect response.
 */
export class EffectResponseMetrics_Ingest implements flatbuffers.IUnpackableObject<EffectResponseMetrics_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EffectResponseMetrics_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEffectResponseMetrics_Ingest(bb:flatbuffers.ByteBuffer, obj?:EffectResponseMetrics_Ingest):EffectResponseMetrics_Ingest {
  return (obj || new EffectResponseMetrics_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEffectResponseMetrics_Ingest(bb:flatbuffers.ByteBuffer, obj?:EffectResponseMetrics_Ingest):EffectResponseMetrics_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EffectResponseMetrics_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EFFE');
}

/**
 * The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).
 * Example: /// Example: GoalAchievement
 * Constraints: Minimum length = 0, Maximum length = 64
 */
metricType():string|null
metricType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
metricType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The metric score specific to its domain.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
domainValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The metric score adjusted to be relative and comparable to other domains.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
relativeValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The metric that was used to score this task.
 * Example: /// Example: Example metric
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
provenance():string|null
provenance(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
provenance(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEffectResponseMetrics_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addMetricType(builder:flatbuffers.Builder, metricTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, metricTypeOffset, 0);
}

static addDomainValue(builder:flatbuffers.Builder, domainValue:number) {
  builder.addFieldFloat64(1, domainValue, 0.0);
}

static addRelativeValue(builder:flatbuffers.Builder, relativeValue:number) {
  builder.addFieldFloat64(2, relativeValue, 0.0);
}

static addProvenance(builder:flatbuffers.Builder, provenanceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, provenanceOffset, 0);
}

static endEffectResponseMetrics_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEffectResponseMetrics_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EFFE');
}

static finishSizePrefixedEffectResponseMetrics_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EFFE', true);
}

static createEffectResponseMetrics_Ingest(builder:flatbuffers.Builder, metricTypeOffset:flatbuffers.Offset, domainValue:number, relativeValue:number, provenanceOffset:flatbuffers.Offset):flatbuffers.Offset {
  EffectResponseMetrics_Ingest.startEffectResponseMetrics_Ingest(builder);
  EffectResponseMetrics_Ingest.addMetricType(builder, metricTypeOffset);
  EffectResponseMetrics_Ingest.addDomainValue(builder, domainValue);
  EffectResponseMetrics_Ingest.addRelativeValue(builder, relativeValue);
  EffectResponseMetrics_Ingest.addProvenance(builder, provenanceOffset);
  return EffectResponseMetrics_Ingest.endEffectResponseMetrics_Ingest(builder);
}

unpack(): EffectResponseMetrics_IngestT {
  return new EffectResponseMetrics_IngestT(
    this.metricType(),
    this.domainValue(),
    this.relativeValue(),
    this.provenance()
  );
}


unpackTo(_o: EffectResponseMetrics_IngestT): void {
  _o.metricType = this.metricType();
  _o.domainValue = this.domainValue();
  _o.relativeValue = this.relativeValue();
  _o.provenance = this.provenance();
}
}

export class EffectResponseMetrics_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public metricType: string|Uint8Array|null = null,
  public domainValue: number = 0.0,
  public relativeValue: number = 0.0,
  public provenance: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const metricType = (this.metricType !== null ? builder.createString(this.metricType!) : 0);
  const provenance = (this.provenance !== null ? builder.createString(this.provenance!) : 0);

  return EffectResponseMetrics_Ingest.createEffectResponseMetrics_Ingest(builder,
    metricType,
    this.domainValue,
    this.relativeValue,
    provenance
  );
}
}
