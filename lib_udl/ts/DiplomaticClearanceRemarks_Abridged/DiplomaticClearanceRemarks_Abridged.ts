// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of diplomatic clearance remarks.
 */
export class DiplomaticClearanceRemarks_Abridged implements flatbuffers.IUnpackableObject<DiplomaticClearanceRemarks_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DiplomaticClearanceRemarks_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDiplomaticClearanceRemarks_Abridged(bb:flatbuffers.ByteBuffer, obj?:DiplomaticClearanceRemarks_Abridged):DiplomaticClearanceRemarks_Abridged {
  return (obj || new DiplomaticClearanceRemarks_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDiplomaticClearanceRemarks_Abridged(bb:flatbuffers.ByteBuffer, obj?:DiplomaticClearanceRemarks_Abridged):DiplomaticClearanceRemarks_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DiplomaticClearanceRemarks_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DIPL');
}

/**
 * Global Decision Support System (GDSS) remark identifier.
 * Example: /// Example: GDSSREMARK-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
gdssRemarkId():string|null
gdssRemarkId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gdssRemarkId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Text of the remark.
 * Example: /// Example: Example mission remarks.
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
 * Example: /// Example: 2024-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
date():string|null
date(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
date(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * User who published the remark.
 * Example: /// Example: John Doe
 * Constraints: Minimum length = 0, Maximum length = 20
 */
user():string|null
user(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
user(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDiplomaticClearanceRemarks_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addGdssRemarkId(builder:flatbuffers.Builder, gdssRemarkIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, gdssRemarkIdOffset, 0);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, textOffset, 0);
}

static addDate(builder:flatbuffers.Builder, dateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dateOffset, 0);
}

static addUser(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, userOffset, 0);
}

static endDiplomaticClearanceRemarks_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDiplomaticClearanceRemarks_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DIPL');
}

static finishSizePrefixedDiplomaticClearanceRemarks_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DIPL', true);
}

static createDiplomaticClearanceRemarks_Abridged(builder:flatbuffers.Builder, gdssRemarkIdOffset:flatbuffers.Offset, textOffset:flatbuffers.Offset, dateOffset:flatbuffers.Offset, userOffset:flatbuffers.Offset):flatbuffers.Offset {
  DiplomaticClearanceRemarks_Abridged.startDiplomaticClearanceRemarks_Abridged(builder);
  DiplomaticClearanceRemarks_Abridged.addGdssRemarkId(builder, gdssRemarkIdOffset);
  DiplomaticClearanceRemarks_Abridged.addText(builder, textOffset);
  DiplomaticClearanceRemarks_Abridged.addDate(builder, dateOffset);
  DiplomaticClearanceRemarks_Abridged.addUser(builder, userOffset);
  return DiplomaticClearanceRemarks_Abridged.endDiplomaticClearanceRemarks_Abridged(builder);
}

unpack(): DiplomaticClearanceRemarks_AbridgedT {
  return new DiplomaticClearanceRemarks_AbridgedT(
    this.gdssRemarkId(),
    this.text(),
    this.date(),
    this.user()
  );
}


unpackTo(_o: DiplomaticClearanceRemarks_AbridgedT): void {
  _o.gdssRemarkId = this.gdssRemarkId();
  _o.text = this.text();
  _o.date = this.date();
  _o.user = this.user();
}
}

export class DiplomaticClearanceRemarks_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public gdssRemarkId: string|Uint8Array|null = null,
  public text: string|Uint8Array|null = null,
  public date: string|Uint8Array|null = null,
  public user: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const gdssRemarkId = (this.gdssRemarkId !== null ? builder.createString(this.gdssRemarkId!) : 0);
  const text = (this.text !== null ? builder.createString(this.text!) : 0);
  const date = (this.date !== null ? builder.createString(this.date!) : 0);
  const user = (this.user !== null ? builder.createString(this.user!) : 0);

  return DiplomaticClearanceRemarks_Abridged.createDiplomaticClearanceRemarks_Abridged(builder,
    gdssRemarkId,
    text,
    date,
    user
  );
}
}
