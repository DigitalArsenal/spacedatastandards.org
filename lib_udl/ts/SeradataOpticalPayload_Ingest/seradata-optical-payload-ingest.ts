// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SeradataOpticalPayload_Ingest_dataMode_Enum } from './seradata-optical-payload-ingest-data-mode-enum.js';


/**
 * /// Details for an optical payload from  Seradata.
 */
export class SeradataOpticalPayload_Ingest implements flatbuffers.IUnpackableObject<SeradataOpticalPayload_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SeradataOpticalPayload_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSeradataOpticalPayload_Ingest(bb:flatbuffers.ByteBuffer, obj?:SeradataOpticalPayload_Ingest):SeradataOpticalPayload_Ingest {
  return (obj || new SeradataOpticalPayload_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSeradataOpticalPayload_Ingest(bb:flatbuffers.ByteBuffer, obj?:SeradataOpticalPayload_Ingest):SeradataOpticalPayload_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SeradataOpticalPayload_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SERA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SERADATAOPTICALPAYLOAD-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
 * Example: /// Example: spacecraftId
 * Constraints: Minimum length = 1, Maximum length = 36
 */
spacecraftId():string|null
spacecraftId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spacecraftId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID of the Sensor record.
 * Example: /// Example: idSensor
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Hosted for company/Organization Id.
 * Example: /// Example: hostedForCompanyOrgId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
hostedForCompanyOrgId():string|null
hostedForCompanyOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hostedForCompanyOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Manufacturer Organization Id.
 * Example: /// Example: manufacturerOrgId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Imaging category for this payload, e.g. Multispectral, Infrared, Panchromatic.
 * Example: /// Example: Infrared
 * Constraints: Minimum length = 0, Maximum length = 50
 */
imagingPayloadCategory():string|null
imagingPayloadCategory(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imagingPayloadCategory(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sensor name from Seradata, e.g. TOURNESOL, MESSR (Multispectral Self-Scanning Radiometer), AWFI, etc.
 * Example: /// Example: TOURNESOL
 * Constraints: Minimum length = 0, Maximum length = 50
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spectral Band supported by this payload, e.g. Green, Red, Mid-wave infrared, etc.
 * Example: /// Example: Green
 * Constraints: Minimum length = 0, Maximum length = 20
 */
spectralBand():string|null
spectralBand(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spectralBand(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Frequency limit for this payload, e.g. 0.51 - 0.59.
 * Example: /// Example: 0.51
 * Constraints: Minimum length = 0, Maximum length = 50
 */
spectralFrequencyLimits():string|null
spectralFrequencyLimits(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spectralFrequencyLimits(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of film return canisters.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numberOfFilmReturnCanisters():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Best resolution.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
bestResolution():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Swath width in kilometers.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
swathWidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Recorder size.
 * Example: /// Example: 1024
 * Constraints: Minimum length = 0, Maximum length = 50
 */
recorderSize():string|null
recorderSize(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recorderSize(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Field of view of this radar in kilometers.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
fieldOfView():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Field of regard of this radar in degrees.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
fieldOfRegard():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Point method for this radar, e.g. Spacecraft.
 * Example: /// Example: Spacecraft
 * Constraints: Minimum length = 0, Maximum length = 50
 */
pointingMethod():string|null
pointingMethod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pointingMethod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ground Station info for this payload.
 * Example: /// Example: groundStations
 * Constraints: Minimum length = 0, Maximum length = 256
 */
groundStations():string|null
groundStations(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groundStations(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ground Station Locations for this payload.
 * Example: /// Example: groundStationLocations
 * Constraints: Minimum length = 0, Maximum length = 128
 */
groundStationLocations():string|null
groundStationLocations(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groundStationLocations(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Payload notes.
 * Example: /// Example: Sample Notes
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SeradataOpticalPayload_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SeradataOpticalPayload_Ingest_dataMode_Enum.REAL;
}

static startSeradataOpticalPayload_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(26);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addSpacecraftId(builder:flatbuffers.Builder, spacecraftIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, spacecraftIdOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idSensorOffset, 0);
}

static addHostedForCompanyOrgId(builder:flatbuffers.Builder, hostedForCompanyOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, hostedForCompanyOrgIdOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, manufacturerOrgIdOffset, 0);
}

static addImagingPayloadCategory(builder:flatbuffers.Builder, imagingPayloadCategoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, imagingPayloadCategoryOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, nameOffset, 0);
}

static addSpectralBand(builder:flatbuffers.Builder, spectralBandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, spectralBandOffset, 0);
}

static addSpectralFrequencyLimits(builder:flatbuffers.Builder, spectralFrequencyLimitsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, spectralFrequencyLimitsOffset, 0);
}

static addNumberOfFilmReturnCanisters(builder:flatbuffers.Builder, numberOfFilmReturnCanisters:number) {
  builder.addFieldInt32(10, numberOfFilmReturnCanisters, 0);
}

static addBestResolution(builder:flatbuffers.Builder, bestResolution:number) {
  builder.addFieldFloat64(11, bestResolution, 0.0);
}

static addSwathWidth(builder:flatbuffers.Builder, swathWidth:number) {
  builder.addFieldFloat64(12, swathWidth, 0.0);
}

static addRecorderSize(builder:flatbuffers.Builder, recorderSizeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, recorderSizeOffset, 0);
}

static addFieldOfView(builder:flatbuffers.Builder, fieldOfView:number) {
  builder.addFieldFloat64(14, fieldOfView, 0.0);
}

static addFieldOfRegard(builder:flatbuffers.Builder, fieldOfRegard:number) {
  builder.addFieldFloat64(15, fieldOfRegard, 0.0);
}

static addPointingMethod(builder:flatbuffers.Builder, pointingMethodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, pointingMethodOffset, 0);
}

static addGroundStations(builder:flatbuffers.Builder, groundStationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, groundStationsOffset, 0);
}

static addGroundStationLocations(builder:flatbuffers.Builder, groundStationLocationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, groundStationLocationsOffset, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, notesOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SeradataOpticalPayload_Ingest_dataMode_Enum) {
  builder.addFieldInt8(25, dataMode, SeradataOpticalPayload_Ingest_dataMode_Enum.REAL);
}

static endSeradataOpticalPayload_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSeradataOpticalPayload_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SERA');
}

static finishSizePrefixedSeradataOpticalPayload_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SERA', true);
}

static createSeradataOpticalPayload_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, spacecraftIdOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, hostedForCompanyOrgIdOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, imagingPayloadCategoryOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, spectralBandOffset:flatbuffers.Offset, spectralFrequencyLimitsOffset:flatbuffers.Offset, numberOfFilmReturnCanisters:number, bestResolution:number, swathWidth:number, recorderSizeOffset:flatbuffers.Offset, fieldOfView:number, fieldOfRegard:number, pointingMethodOffset:flatbuffers.Offset, groundStationsOffset:flatbuffers.Offset, groundStationLocationsOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:SeradataOpticalPayload_Ingest_dataMode_Enum):flatbuffers.Offset {
  SeradataOpticalPayload_Ingest.startSeradataOpticalPayload_Ingest(builder);
  SeradataOpticalPayload_Ingest.addId(builder, idOffset);
  SeradataOpticalPayload_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  SeradataOpticalPayload_Ingest.addSpacecraftId(builder, spacecraftIdOffset);
  SeradataOpticalPayload_Ingest.addIdSensor(builder, idSensorOffset);
  SeradataOpticalPayload_Ingest.addHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset);
  SeradataOpticalPayload_Ingest.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  SeradataOpticalPayload_Ingest.addImagingPayloadCategory(builder, imagingPayloadCategoryOffset);
  SeradataOpticalPayload_Ingest.addName(builder, nameOffset);
  SeradataOpticalPayload_Ingest.addSpectralBand(builder, spectralBandOffset);
  SeradataOpticalPayload_Ingest.addSpectralFrequencyLimits(builder, spectralFrequencyLimitsOffset);
  SeradataOpticalPayload_Ingest.addNumberOfFilmReturnCanisters(builder, numberOfFilmReturnCanisters);
  SeradataOpticalPayload_Ingest.addBestResolution(builder, bestResolution);
  SeradataOpticalPayload_Ingest.addSwathWidth(builder, swathWidth);
  SeradataOpticalPayload_Ingest.addRecorderSize(builder, recorderSizeOffset);
  SeradataOpticalPayload_Ingest.addFieldOfView(builder, fieldOfView);
  SeradataOpticalPayload_Ingest.addFieldOfRegard(builder, fieldOfRegard);
  SeradataOpticalPayload_Ingest.addPointingMethod(builder, pointingMethodOffset);
  SeradataOpticalPayload_Ingest.addGroundStations(builder, groundStationsOffset);
  SeradataOpticalPayload_Ingest.addGroundStationLocations(builder, groundStationLocationsOffset);
  SeradataOpticalPayload_Ingest.addNotes(builder, notesOffset);
  SeradataOpticalPayload_Ingest.addCreatedAt(builder, createdAtOffset);
  SeradataOpticalPayload_Ingest.addCreatedBy(builder, createdByOffset);
  SeradataOpticalPayload_Ingest.addSource(builder, sourceOffset);
  SeradataOpticalPayload_Ingest.addOrigin(builder, originOffset);
  SeradataOpticalPayload_Ingest.addOrigNetwork(builder, origNetworkOffset);
  SeradataOpticalPayload_Ingest.addDataMode(builder, dataMode);
  return SeradataOpticalPayload_Ingest.endSeradataOpticalPayload_Ingest(builder);
}

unpack(): SeradataOpticalPayload_IngestT {
  return new SeradataOpticalPayload_IngestT(
    this.id(),
    this.classificationMarking(),
    this.spacecraftId(),
    this.idSensor(),
    this.hostedForCompanyOrgId(),
    this.manufacturerOrgId(),
    this.imagingPayloadCategory(),
    this.name(),
    this.spectralBand(),
    this.spectralFrequencyLimits(),
    this.numberOfFilmReturnCanisters(),
    this.bestResolution(),
    this.swathWidth(),
    this.recorderSize(),
    this.fieldOfView(),
    this.fieldOfRegard(),
    this.pointingMethod(),
    this.groundStations(),
    this.groundStationLocations(),
    this.notes(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: SeradataOpticalPayload_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.spacecraftId = this.spacecraftId();
  _o.idSensor = this.idSensor();
  _o.hostedForCompanyOrgId = this.hostedForCompanyOrgId();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.imagingPayloadCategory = this.imagingPayloadCategory();
  _o.name = this.name();
  _o.spectralBand = this.spectralBand();
  _o.spectralFrequencyLimits = this.spectralFrequencyLimits();
  _o.numberOfFilmReturnCanisters = this.numberOfFilmReturnCanisters();
  _o.bestResolution = this.bestResolution();
  _o.swathWidth = this.swathWidth();
  _o.recorderSize = this.recorderSize();
  _o.fieldOfView = this.fieldOfView();
  _o.fieldOfRegard = this.fieldOfRegard();
  _o.pointingMethod = this.pointingMethod();
  _o.groundStations = this.groundStations();
  _o.groundStationLocations = this.groundStationLocations();
  _o.notes = this.notes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class SeradataOpticalPayload_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public spacecraftId: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public hostedForCompanyOrgId: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public imagingPayloadCategory: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public spectralBand: string|Uint8Array|null = null,
  public spectralFrequencyLimits: string|Uint8Array|null = null,
  public numberOfFilmReturnCanisters: number = 0,
  public bestResolution: number = 0.0,
  public swathWidth: number = 0.0,
  public recorderSize: string|Uint8Array|null = null,
  public fieldOfView: number = 0.0,
  public fieldOfRegard: number = 0.0,
  public pointingMethod: string|Uint8Array|null = null,
  public groundStations: string|Uint8Array|null = null,
  public groundStationLocations: string|Uint8Array|null = null,
  public notes: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: SeradataOpticalPayload_Ingest_dataMode_Enum = SeradataOpticalPayload_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const spacecraftId = (this.spacecraftId !== null ? builder.createString(this.spacecraftId!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const hostedForCompanyOrgId = (this.hostedForCompanyOrgId !== null ? builder.createString(this.hostedForCompanyOrgId!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const imagingPayloadCategory = (this.imagingPayloadCategory !== null ? builder.createString(this.imagingPayloadCategory!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const spectralBand = (this.spectralBand !== null ? builder.createString(this.spectralBand!) : 0);
  const spectralFrequencyLimits = (this.spectralFrequencyLimits !== null ? builder.createString(this.spectralFrequencyLimits!) : 0);
  const recorderSize = (this.recorderSize !== null ? builder.createString(this.recorderSize!) : 0);
  const pointingMethod = (this.pointingMethod !== null ? builder.createString(this.pointingMethod!) : 0);
  const groundStations = (this.groundStations !== null ? builder.createString(this.groundStations!) : 0);
  const groundStationLocations = (this.groundStationLocations !== null ? builder.createString(this.groundStationLocations!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return SeradataOpticalPayload_Ingest.createSeradataOpticalPayload_Ingest(builder,
    id,
    classificationMarking,
    spacecraftId,
    idSensor,
    hostedForCompanyOrgId,
    manufacturerOrgId,
    imagingPayloadCategory,
    name,
    spectralBand,
    spectralFrequencyLimits,
    this.numberOfFilmReturnCanisters,
    this.bestResolution,
    this.swathWidth,
    recorderSize,
    this.fieldOfView,
    this.fieldOfRegard,
    pointingMethod,
    groundStations,
    groundStationLocations,
    notes,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
