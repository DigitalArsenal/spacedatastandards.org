// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OnboardNavigation_Ingest_dataMode_Enum } from './onboard-navigation-ingest-data-mode-enum.js';
import { OnboardNavigation_Ingest_referenceFrame_Enum } from './onboard-navigation-ingest-reference-frame-enum.js';


/**
 * /// These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.
 */
export class OnboardNavigation_Ingest implements flatbuffers.IUnpackableObject<OnboardNavigation_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OnboardNavigation_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOnboardNavigation_Ingest(bb:flatbuffers.ByteBuffer, obj?:OnboardNavigation_Ingest):OnboardNavigation_Ingest {
  return (obj || new OnboardNavigation_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOnboardNavigation_Ingest(bb:flatbuffers.ByteBuffer, obj?:OnboardNavigation_Ingest):OnboardNavigation_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OnboardNavigation_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ONBO');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: ONBOARD-NAVIGATION-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the primary satellite on-orbit object.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the target on-orbit object.
 * Example: /// Example: 101
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start time of the sensor data, in ISO 8601 UTC format.
 * Example: /// Example: 2021-07-20T01:02:03.123456Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * End time of the sensor data, in ISO 8601 UTC format.
 * Example: /// Example: 2021-07-20T01:02:03.123456Z
 * Constraints: No constraints specified.
 */
endTime():string|null
endTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.
 * Example: /// Example: EPHEMERISSET-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
esId():string|null
esId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
esId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name or identifier the star catalog in use.
 * Example: /// Example: STAR-CAT-NAME
 * Constraints: Minimum length = 0, Maximum length = 24
 */
starCatName():string|null
starCatName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
starCatName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The last load time of the current star catalog onboard this spacecraft.
 * Example: /// Example: 2021-07-21T01:02:03.123Z
 * Constraints: No constraints specified.
 */
starCatLoadTime():string|null
starCatLoadTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
starCatLoadTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the last onboard state vector.
 * Example: /// Example: STATE-VECTOR-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idStateVector():string|null
idStateVector(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idStateVector(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.
 * Example: /// Example: ['2021-07-21T01:02:03.120003Z']
 * Constraints: No constraints specified.
 */
ts(index: number):string
ts(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ts(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.
 * Example: /// Example: J2000
 * Constraints: Minimum length = 0, Maximum length = 24
 */
referenceFrame():OnboardNavigation_Ingest_referenceFrame_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OnboardNavigation_Ingest_referenceFrame_Enum.J2000;
}

/**
 * Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.
 * Example: /// Example: [[1.1, 2.2, 3.3]]
 * Constraints: No constraints specified.
 */
sunSensor(index: number):string
sunSensor(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
sunSensor(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

sunSensorLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.
 * Example: /// Example: [[1.1, 2.2, 3.3]]
 * Constraints: No constraints specified.
 */
mag(index: number):string
mag(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
mag(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

magLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.
 * Example: /// Example: [[1.1, 2.2, 3.3]]
 * Constraints: No constraints specified.
 */
starTracker(index: number):string
starTracker(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
starTracker(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

starTrackerLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.
 * Example: /// Example: [[1.1, 2.2, 3.3]]
 * Constraints: No constraints specified.
 */
deltaPos(index: number):string
deltaPos(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
deltaPos(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

deltaPosLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 36
 */
dataMode():OnboardNavigation_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OnboardNavigation_Ingest_dataMode_Enum.REAL;
}

static startOnboardNavigation_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(23);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(3, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, origObjectIdOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, startTimeOffset, 0);
}

static addEndTime(builder:flatbuffers.Builder, endTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, endTimeOffset, 0);
}

static addEsId(builder:flatbuffers.Builder, esIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, esIdOffset, 0);
}

static addStarCatName(builder:flatbuffers.Builder, starCatNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, starCatNameOffset, 0);
}

static addStarCatLoadTime(builder:flatbuffers.Builder, starCatLoadTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, starCatLoadTimeOffset, 0);
}

static addIdStateVector(builder:flatbuffers.Builder, idStateVectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, idStateVectorOffset, 0);
}

static addTs(builder:flatbuffers.Builder, tsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, tsOffset, 0);
}

static createTsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addReferenceFrame(builder:flatbuffers.Builder, referenceFrame:OnboardNavigation_Ingest_referenceFrame_Enum) {
  builder.addFieldInt8(12, referenceFrame, OnboardNavigation_Ingest_referenceFrame_Enum.J2000);
}

static addSunSensor(builder:flatbuffers.Builder, sunSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, sunSensorOffset, 0);
}

static createSunSensorVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSunSensorVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMag(builder:flatbuffers.Builder, magOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, magOffset, 0);
}

static createMagVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMagVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStarTracker(builder:flatbuffers.Builder, starTrackerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, starTrackerOffset, 0);
}

static createStarTrackerVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStarTrackerVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDeltaPos(builder:flatbuffers.Builder, deltaPosOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, deltaPosOffset, 0);
}

static createDeltaPosVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDeltaPosVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:OnboardNavigation_Ingest_dataMode_Enum) {
  builder.addFieldInt8(22, dataMode, OnboardNavigation_Ingest_dataMode_Enum.REAL);
}

static endOnboardNavigation_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOnboardNavigation_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ONBO');
}

static finishSizePrefixedOnboardNavigation_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ONBO', true);
}

static createOnboardNavigation_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, endTimeOffset:flatbuffers.Offset, esIdOffset:flatbuffers.Offset, starCatNameOffset:flatbuffers.Offset, starCatLoadTimeOffset:flatbuffers.Offset, idStateVectorOffset:flatbuffers.Offset, tsOffset:flatbuffers.Offset, referenceFrame:OnboardNavigation_Ingest_referenceFrame_Enum, sunSensorOffset:flatbuffers.Offset, magOffset:flatbuffers.Offset, starTrackerOffset:flatbuffers.Offset, deltaPosOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:OnboardNavigation_Ingest_dataMode_Enum):flatbuffers.Offset {
  OnboardNavigation_Ingest.startOnboardNavigation_Ingest(builder);
  OnboardNavigation_Ingest.addId(builder, idOffset);
  OnboardNavigation_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  OnboardNavigation_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
  OnboardNavigation_Ingest.addSatNo(builder, satNo);
  OnboardNavigation_Ingest.addOrigObjectId(builder, origObjectIdOffset);
  OnboardNavigation_Ingest.addStartTime(builder, startTimeOffset);
  OnboardNavigation_Ingest.addEndTime(builder, endTimeOffset);
  OnboardNavigation_Ingest.addEsId(builder, esIdOffset);
  OnboardNavigation_Ingest.addStarCatName(builder, starCatNameOffset);
  OnboardNavigation_Ingest.addStarCatLoadTime(builder, starCatLoadTimeOffset);
  OnboardNavigation_Ingest.addIdStateVector(builder, idStateVectorOffset);
  OnboardNavigation_Ingest.addTs(builder, tsOffset);
  OnboardNavigation_Ingest.addReferenceFrame(builder, referenceFrame);
  OnboardNavigation_Ingest.addSunSensor(builder, sunSensorOffset);
  OnboardNavigation_Ingest.addMag(builder, magOffset);
  OnboardNavigation_Ingest.addStarTracker(builder, starTrackerOffset);
  OnboardNavigation_Ingest.addDeltaPos(builder, deltaPosOffset);
  OnboardNavigation_Ingest.addCreatedAt(builder, createdAtOffset);
  OnboardNavigation_Ingest.addCreatedBy(builder, createdByOffset);
  OnboardNavigation_Ingest.addSource(builder, sourceOffset);
  OnboardNavigation_Ingest.addOrigin(builder, originOffset);
  OnboardNavigation_Ingest.addOrigNetwork(builder, origNetworkOffset);
  OnboardNavigation_Ingest.addDataMode(builder, dataMode);
  return OnboardNavigation_Ingest.endOnboardNavigation_Ingest(builder);
}

unpack(): OnboardNavigation_IngestT {
  return new OnboardNavigation_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.startTime(),
    this.endTime(),
    this.esId(),
    this.starCatName(),
    this.starCatLoadTime(),
    this.idStateVector(),
    this.bb!.createScalarList<string>(this.ts.bind(this), this.ts_Length()),
    this.referenceFrame(),
    this.bb!.createScalarList<string>(this.sunSensor.bind(this), this.sunSensor_Length()),
    this.bb!.createScalarList<string>(this.mag.bind(this), this.mag_Length()),
    this.bb!.createScalarList<string>(this.starTracker.bind(this), this.starTracker_Length()),
    this.bb!.createScalarList<string>(this.deltaPos.bind(this), this.deltaPos_Length()),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: OnboardNavigation_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.esId = this.esId();
  _o.starCatName = this.starCatName();
  _o.starCatLoadTime = this.starCatLoadTime();
  _o.idStateVector = this.idStateVector();
  _o.ts = this.bb!.createScalarList<string>(this.ts.bind(this), this.ts_Length());
  _o.referenceFrame = this.referenceFrame();
  _o.sunSensor = this.bb!.createScalarList<string>(this.sunSensor.bind(this), this.sunSensor_Length());
  _o.mag = this.bb!.createScalarList<string>(this.mag.bind(this), this.mag_Length());
  _o.starTracker = this.bb!.createScalarList<string>(this.starTracker.bind(this), this.starTracker_Length());
  _o.deltaPos = this.bb!.createScalarList<string>(this.deltaPos.bind(this), this.deltaPos_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class OnboardNavigation_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public endTime: string|Uint8Array|null = null,
  public esId: string|Uint8Array|null = null,
  public starCatName: string|Uint8Array|null = null,
  public starCatLoadTime: string|Uint8Array|null = null,
  public idStateVector: string|Uint8Array|null = null,
  public ts: (string)[] = [],
  public referenceFrame: OnboardNavigation_Ingest_referenceFrame_Enum = OnboardNavigation_Ingest_referenceFrame_Enum.J2000,
  public sunSensor: (string)[] = [],
  public mag: (string)[] = [],
  public starTracker: (string)[] = [],
  public deltaPos: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: OnboardNavigation_Ingest_dataMode_Enum = OnboardNavigation_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const endTime = (this.endTime !== null ? builder.createString(this.endTime!) : 0);
  const esId = (this.esId !== null ? builder.createString(this.esId!) : 0);
  const starCatName = (this.starCatName !== null ? builder.createString(this.starCatName!) : 0);
  const starCatLoadTime = (this.starCatLoadTime !== null ? builder.createString(this.starCatLoadTime!) : 0);
  const idStateVector = (this.idStateVector !== null ? builder.createString(this.idStateVector!) : 0);
  const ts = OnboardNavigation_Ingest.createTsVector(builder, builder.createObjectOffsetList(this.ts));
  const sunSensor = OnboardNavigation_Ingest.createSunSensorVector(builder, builder.createObjectOffsetList(this.sunSensor));
  const mag = OnboardNavigation_Ingest.createMagVector(builder, builder.createObjectOffsetList(this.mag));
  const starTracker = OnboardNavigation_Ingest.createStarTrackerVector(builder, builder.createObjectOffsetList(this.starTracker));
  const deltaPos = OnboardNavigation_Ingest.createDeltaPosVector(builder, builder.createObjectOffsetList(this.deltaPos));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return OnboardNavigation_Ingest.createOnboardNavigation_Ingest(builder,
    id,
    classificationMarking,
    idOnOrbit,
    this.satNo,
    origObjectId,
    startTime,
    endTime,
    esId,
    starCatName,
    starCatLoadTime,
    idStateVector,
    ts,
    this.referenceFrame,
    sunSensor,
    mag,
    starTracker,
    deltaPos,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
