// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DriftHistory_Full_dataMode_Enum } from './DriftHistory_Full_dataMode_Enum.js';


/**
 * /// Historical drift rates for GEO Onorbit objects resulting from updates to OnorbitDetails driftRate values.
 */
export class DriftHistory_Full implements flatbuffers.IUnpackableObject<DriftHistory_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DriftHistory_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDriftHistory_Full(bb:flatbuffers.ByteBuffer, obj?:DriftHistory_Full):DriftHistory_Full {
  return (obj || new DriftHistory_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDriftHistory_Full(bb:flatbuffers.ByteBuffer, obj?:DriftHistory_Full):DriftHistory_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DriftHistory_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DRIF');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: DRIFTHISTORY-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID of the parent Onorbit record.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the drift rate was replaced with another value and no longer the current value.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
effectiveUntil():string|null
effectiveUntil(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectiveUntil(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * GEO drift rate, if applicable in degrees per day.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
driftRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():DriftHistory_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DriftHistory_Full_dataMode_Enum.REAL;
}

static startDriftHistory_Full(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idOnOrbitOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addEffectiveUntil(builder:flatbuffers.Builder, effectiveUntilOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, effectiveUntilOffset, 0);
}

static addDriftRate(builder:flatbuffers.Builder, driftRate:number) {
  builder.addFieldFloat64(4, driftRate, 0.0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:DriftHistory_Full_dataMode_Enum) {
  builder.addFieldInt8(8, dataMode, DriftHistory_Full_dataMode_Enum.REAL);
}

static endDriftHistory_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDriftHistory_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DRIF');
}

static finishSizePrefixedDriftHistory_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DRIF', true);
}

static createDriftHistory_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, effectiveUntilOffset:flatbuffers.Offset, driftRate:number, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:DriftHistory_Full_dataMode_Enum):flatbuffers.Offset {
  DriftHistory_Full.startDriftHistory_Full(builder);
  DriftHistory_Full.addId(builder, idOffset);
  DriftHistory_Full.addIdOnOrbit(builder, idOnOrbitOffset);
  DriftHistory_Full.addClassificationMarking(builder, classificationMarkingOffset);
  DriftHistory_Full.addEffectiveUntil(builder, effectiveUntilOffset);
  DriftHistory_Full.addDriftRate(builder, driftRate);
  DriftHistory_Full.addCreatedBy(builder, createdByOffset);
  DriftHistory_Full.addSource(builder, sourceOffset);
  DriftHistory_Full.addOrigin(builder, originOffset);
  DriftHistory_Full.addDataMode(builder, dataMode);
  return DriftHistory_Full.endDriftHistory_Full(builder);
}

unpack(): DriftHistory_FullT {
  return new DriftHistory_FullT(
    this.id(),
    this.idOnOrbit(),
    this.classificationMarking(),
    this.effectiveUntil(),
    this.driftRate(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode()
  );
}


unpackTo(_o: DriftHistory_FullT): void {
  _o.id = this.id();
  _o.idOnOrbit = this.idOnOrbit();
  _o.classificationMarking = this.classificationMarking();
  _o.effectiveUntil = this.effectiveUntil();
  _o.driftRate = this.driftRate();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
}
}

export class DriftHistory_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public effectiveUntil: string|Uint8Array|null = null,
  public driftRate: number = 0.0,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: DriftHistory_Full_dataMode_Enum = DriftHistory_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const effectiveUntil = (this.effectiveUntil !== null ? builder.createString(this.effectiveUntil!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);

  return DriftHistory_Full.createDriftHistory_Full(builder,
    id,
    idOnOrbit,
    classificationMarking,
    effectiveUntil,
    this.driftRate,
    createdBy,
    source,
    origin,
    this.dataMode
  );
}
}
