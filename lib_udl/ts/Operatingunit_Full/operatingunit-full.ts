// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Operatingunit_Full_dataMode_Enum } from './operatingunit-full-data-mode-enum.js';


/**
 * /// Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.
 */
export class Operatingunit_Full implements flatbuffers.IUnpackableObject<Operatingunit_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Operatingunit_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOperatingunit_Full(bb:flatbuffers.ByteBuffer, obj?:Operatingunit_Full):Operatingunit_Full {
  return (obj || new Operatingunit_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOperatingunit_Full(bb:flatbuffers.ByteBuffer, obj?:Operatingunit_Full):Operatingunit_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Operatingunit_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('OPER');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: OPERATINGUNIT-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idOperatingUnit():string|null
idOperatingUnit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOperatingUnit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the operating unit record from the originating system.
 * Example: /// Example: 32100000000021
 * Constraints: Minimum length = 0, Maximum length = 36
 */
altOperatingUnitId():string|null
altOperatingUnitId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altOperatingUnitId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the operating unit.
 * Example: /// Example: SOME_NAME
 * Constraints: Minimum length = 1, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the operating unit.
 * Example: /// Example: Description of unit
 * Constraints: Minimum length = 0, Maximum length = 256
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the location record for this operating unit.
 * Example: /// Example: LOCATION-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idLocation():string|null
idLocation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idLocation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the contact for this operating unit.
 * Example: /// Example: CONTACT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idContact():string|null
idContact(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idContact(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the organization record for this operating unit.
 * Example: /// Example: ORGANIZATION-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOrganization():string|null
idOrganization(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOrganization(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.
 * Example: /// Example: AZXAZ12345
 * Constraints: Minimum length = 0, Maximum length = 10
 */
unitIdentifier():string|null
unitIdentifier(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unitIdentifier(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
 * Example: /// Example: IQ
 * Constraints: Minimum length = 0, Maximum length = 4
 */
countryCode():string|null
countryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
 * Example: /// Example: IZ
 * Constraints: Minimum length = 0, Maximum length = 4
 */
altCountryCode():string|null
altCountryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altCountryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * World Aeronautical Chart identifier for the area in which a designated operating unit is located.
 * Example: /// Example: 0427
 * Constraints: Minimum length = 0, Maximum length = 4
 */
wac():string|null
wac(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
wac(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: OPR
 * Constraints: Minimum length = 0, Maximum length = 3
 */
operStatus():string|null
operStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: RDY
 * Constraints: Minimum length = 0, Maximum length = 4
 */
condition():string|null
condition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
condition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 4
 */
conditionAvail():string|null
conditionAvail(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
conditionAvail(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
 * Example: /// Example: 7
 * Constraints: No constraints specified.
 */
eval():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: EOB
 * Constraints: Minimum length = 0, Maximum length = 5
 */
fpa():string|null
fpa(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fpa(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
 * ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
 * FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
 * HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
 * FAKER: Friendly track, object, or entity acting as an exercise hostile.
 * JOKER: Friendly track, object, or entity acting as an exercise suspect.
 * NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
 * PENDING: Track object which has not been evaluated.
 * SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
 * UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
 * Example: /// Example: FRIEND
 * Constraints: Minimum length = 0, Maximum length = 32
 */
ident():string|null
ident(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ident(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
 * Example: /// Example: OTHR
 * Constraints: Minimum length = 0, Maximum length = 4
 */
allegiance():string|null
allegiance(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
allegiance(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
 * Example: /// Example: HL
 * Constraints: Minimum length = 0, Maximum length = 4
 */
altAllegiance():string|null
altAllegiance(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altAllegiance(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Location name for the coordinates.
 * Example: /// Example: LOCATION_NAME
 * Constraints: Minimum length = 0, Maximum length = 54
 */
locName():string|null
locName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
locName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: GR
 * Constraints: Minimum length = 0, Maximum length = 9
 */
locReason():string|null
locReason(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
locReason(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: NV
 * Constraints: Minimum length = 0, Maximum length = 4
 */
force():string|null
force(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
force(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.
 * Example: /// Example: FORCE-NAME
 * Constraints: Minimum length = 0, Maximum length = 54
 */
forceName():string|null
forceName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
forceName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: MIL
 * Constraints: Minimum length = 0, Maximum length = 3
 */
functRole():string|null
functRole(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
functRole(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: W6
 * Constraints: Minimum length = 0, Maximum length = 4
 */
msnPrimary():string|null
msnPrimary(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msnPrimary(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: QK
 * Constraints: Minimum length = 0, Maximum length = 4
 */
msnPrimarySpecialty():string|null
msnPrimarySpecialty(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msnPrimarySpecialty(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
masterUnit():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
stylizedUnit():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: 5
 * Constraints: Minimum length = 0, Maximum length = 1
 */
divCat():string|null
divCat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
divCat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: SHIP
 * Constraints: Minimum length = 0, Maximum length = 4
 */
echelon():string|null
echelon(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
echelon(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: 68
 * Constraints: Minimum length = 0, Maximum length = 2
 */
echelonTier():string|null
echelonTier(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
echelonTier(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 1
 */
fleetId():string|null
fleetId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fleetId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: ND
 * Constraints: Minimum length = 0, Maximum length = 2
 */
deployStatus():string|null
deployStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
deployStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The country code of the observed flag flown.
 * Example: /// Example: IZ
 * Constraints: Minimum length = 0, Maximum length = 4
 */
flagFlown():string|null
flagFlown(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
flagFlown(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: WGS
 * Constraints: Minimum length = 0, Maximum length = 16
 */
coordDatum():string|null
coordDatum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
coordDatum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * "Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
 * Pos. 1-2.  Latitude Degrees     [00-90]
 * Pos. 3-4.  Latitude Minutes     [00-59]
 * Pos. 5-6.  Latitude Seconds     [00-59]
 * Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
 * Pos. 10. Latitude Hemisphere       [NS] 
 * Pos. 11-13. Longitude Degrees     [00-180] 
 * Pos. 14-15. Longitude Minutes     [00-59] 
 * Pos. 16-17. Longitude Seconds     [00-59] 
 * Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
 * Pos. 21. Longitude Hemisphere     [EW]
 * Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]".
 * Example: /// Example: 340000000N0430000000E
 * Constraints: Minimum length = 0, Maximum length = 21
 */
coord():string|null
coord(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
coord(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the plus or minus error assessed against the method used to derive the coordinate.
 * Example: /// Example: 12.345
 * Constraints: No constraints specified.
 */
coordDerivAcc():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 179.1
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
 * Example: /// Example: 123.45
 * Constraints: No constraints specified.
 */
elevMsl():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
 * Example: /// Example: 50
 * Constraints: No constraints specified.
 */
elevMslConfLvl():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Indicates the plus or minus error assessed against the method used to derive the elevation.
 * Example: /// Example: 12.34
 * Constraints: No constraints specified.
 */
elevMslDerivAcc():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The distance between Mean Sea Level and a referenced ellipsoid.
 * Example: /// Example: 12.34
 * Constraints: No constraints specified.
 */
geoidalMslSep():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * "Indicates the grid system used in the development of the milGrid coordinates. Values are:
 * UPS - Universal Polar System
 * UTM - Universal Transverse Mercator".
 * Example: /// Example: UTM
 * Constraints: Minimum length = 0, Maximum length = 3
 */
milGridSys():string|null
milGridSys(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milGridSys(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
 * 4Q (grid zone designator, GZD)
 * FJ (the 100,000-meter square identifier)
 * 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
 * Example: /// Example: 4QFJ12345678
 * Constraints: Minimum length = 0, Maximum length = 15
 */
milGrid():string|null
milGrid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milGrid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Universal Transverse Mercator (UTM) grid coordinates.
 * Pos. 1-2, UTM Zone Column   [01-60
 * Pos. 3, UTM Zone Row   [C-HJ-NP-X]
 * Pos. 4, UTM False Easting   [0-9]
 * Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
 * Pos. 10-11, UTM False Northing    [0-9][0-9]
 * Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
 * Example: /// Example: 19P4390691376966
 * Constraints: Minimum length = 0, Maximum length = 16
 */
utm():string|null
utm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
utm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
 * Example: /// Example: AL006
 * Constraints: Minimum length = 0, Maximum length = 5
 */
airDefArea():string|null
airDefArea(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
airDefArea(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: IZ07
 * Constraints: Minimum length = 0, Maximum length = 7
 */
polSubdiv():string|null
polSubdiv(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
polSubdiv(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
 * Example: /// Example: SOGPU----------
 * Constraints: Minimum length = 0, Maximum length = 15
 */
symCode():string|null
symCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
symCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
 * 0 - Does not meet criteria above
 * 1 - Primary importance to system
 * 2 - Secondary importance to system
 * 3 - Tertiary importance to system
 * O - Other. Explain in Remarks.
 * Example: /// Example: 1
 * Constraints: Minimum length = 0, Maximum length = 1
 */
classRating():string|null
classRating(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classRating(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:
 * A - Active
 * I - Inactive
 * K - Acknowledged
 * L - Local
 * Q - A nominated (NOM) or Data Change Request (DCR) record
 * R - Production reduced by CMD decision
 * W - Working Record.
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 1
 */
recStatus():string|null
recStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
 * Example: /// Example: 2008-06-10
 * Constraints: No constraints specified.
 */
reviewDate():string|null
reviewDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reviewDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Responsible Producer - Organization that is responsible for the maintenance of the record.
 * Example: /// Example: RT
 * Constraints: Minimum length = 0, Maximum length = 4
 */
resProd():string|null
resProd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
resProd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: Provider Reference Documentation
 * Constraints: Minimum length = 0, Maximum length = 128
 */
referenceDoc():string|null
referenceDoc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
referenceDoc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
operatingUnitRemarks(index: number):string
operatingUnitRemarks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
operatingUnitRemarks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

operatingUnitRemarksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was last updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Operatingunit_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Operatingunit_Full_dataMode_Enum.REAL;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
organization():string|null
organization(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
organization(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
location():string|null
location(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
location(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startOperatingunit_Full(builder:flatbuffers.Builder) {
  builder.startObject(65);
}

static addIdOperatingUnit(builder:flatbuffers.Builder, idOperatingUnitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOperatingUnitOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addAltOperatingUnitId(builder:flatbuffers.Builder, altOperatingUnitIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, altOperatingUnitIdOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, descriptionOffset, 0);
}

static addIdLocation(builder:flatbuffers.Builder, idLocationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idLocationOffset, 0);
}

static addIdContact(builder:flatbuffers.Builder, idContactOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, idContactOffset, 0);
}

static addIdOrganization(builder:flatbuffers.Builder, idOrganizationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, idOrganizationOffset, 0);
}

static addUnitIdentifier(builder:flatbuffers.Builder, unitIdentifierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, unitIdentifierOffset, 0);
}

static addCountryCode(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, countryCodeOffset, 0);
}

static addAltCountryCode(builder:flatbuffers.Builder, altCountryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, altCountryCodeOffset, 0);
}

static addWac(builder:flatbuffers.Builder, wacOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, wacOffset, 0);
}

static addOperStatus(builder:flatbuffers.Builder, operStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, operStatusOffset, 0);
}

static addCondition(builder:flatbuffers.Builder, conditionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, conditionOffset, 0);
}

static addConditionAvail(builder:flatbuffers.Builder, conditionAvailOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, conditionAvailOffset, 0);
}

static addEval(builder:flatbuffers.Builder, eval:number) {
  builder.addFieldInt32(15, eval, 0);
}

static addFpa(builder:flatbuffers.Builder, fpaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, fpaOffset, 0);
}

static addIdent(builder:flatbuffers.Builder, identOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, identOffset, 0);
}

static addAllegiance(builder:flatbuffers.Builder, allegianceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, allegianceOffset, 0);
}

static addAltAllegiance(builder:flatbuffers.Builder, altAllegianceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, altAllegianceOffset, 0);
}

static addLocName(builder:flatbuffers.Builder, locNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, locNameOffset, 0);
}

static addLocReason(builder:flatbuffers.Builder, locReasonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, locReasonOffset, 0);
}

static addForce(builder:flatbuffers.Builder, forceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, forceOffset, 0);
}

static addForceName(builder:flatbuffers.Builder, forceNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, forceNameOffset, 0);
}

static addFunctRole(builder:flatbuffers.Builder, functRoleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, functRoleOffset, 0);
}

static addMsnPrimary(builder:flatbuffers.Builder, msnPrimaryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, msnPrimaryOffset, 0);
}

static addMsnPrimarySpecialty(builder:flatbuffers.Builder, msnPrimarySpecialtyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, msnPrimarySpecialtyOffset, 0);
}

static addMasterUnit(builder:flatbuffers.Builder, masterUnit:boolean) {
  builder.addFieldInt8(27, +masterUnit, +false);
}

static addStylizedUnit(builder:flatbuffers.Builder, stylizedUnit:boolean) {
  builder.addFieldInt8(28, +stylizedUnit, +false);
}

static addDivCat(builder:flatbuffers.Builder, divCatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, divCatOffset, 0);
}

static addEchelon(builder:flatbuffers.Builder, echelonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, echelonOffset, 0);
}

static addEchelonTier(builder:flatbuffers.Builder, echelonTierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, echelonTierOffset, 0);
}

static addFleetId(builder:flatbuffers.Builder, fleetIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, fleetIdOffset, 0);
}

static addDeployStatus(builder:flatbuffers.Builder, deployStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, deployStatusOffset, 0);
}

static addFlagFlown(builder:flatbuffers.Builder, flagFlownOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, flagFlownOffset, 0);
}

static addCoordDatum(builder:flatbuffers.Builder, coordDatumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, coordDatumOffset, 0);
}

static addCoord(builder:flatbuffers.Builder, coordOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, coordOffset, 0);
}

static addCoordDerivAcc(builder:flatbuffers.Builder, coordDerivAcc:number) {
  builder.addFieldFloat64(37, coordDerivAcc, 0.0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(38, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(39, lon, 0.0);
}

static addElevMsl(builder:flatbuffers.Builder, elevMsl:number) {
  builder.addFieldFloat64(40, elevMsl, 0.0);
}

static addElevMslConfLvl(builder:flatbuffers.Builder, elevMslConfLvl:number) {
  builder.addFieldInt32(41, elevMslConfLvl, 0);
}

static addElevMslDerivAcc(builder:flatbuffers.Builder, elevMslDerivAcc:number) {
  builder.addFieldFloat64(42, elevMslDerivAcc, 0.0);
}

static addGeoidalMslSep(builder:flatbuffers.Builder, geoidalMslSep:number) {
  builder.addFieldFloat64(43, geoidalMslSep, 0.0);
}

static addMilGridSys(builder:flatbuffers.Builder, milGridSysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, milGridSysOffset, 0);
}

static addMilGrid(builder:flatbuffers.Builder, milGridOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, milGridOffset, 0);
}

static addUtm(builder:flatbuffers.Builder, utmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, utmOffset, 0);
}

static addAirDefArea(builder:flatbuffers.Builder, airDefAreaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, airDefAreaOffset, 0);
}

static addPolSubdiv(builder:flatbuffers.Builder, polSubdivOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, polSubdivOffset, 0);
}

static addSymCode(builder:flatbuffers.Builder, symCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, symCodeOffset, 0);
}

static addClassRating(builder:flatbuffers.Builder, classRatingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, classRatingOffset, 0);
}

static addRecStatus(builder:flatbuffers.Builder, recStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, recStatusOffset, 0);
}

static addReviewDate(builder:flatbuffers.Builder, reviewDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, reviewDateOffset, 0);
}

static addResProd(builder:flatbuffers.Builder, resProdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, resProdOffset, 0);
}

static addReferenceDoc(builder:flatbuffers.Builder, referenceDocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, referenceDocOffset, 0);
}

static addOperatingUnitRemarks(builder:flatbuffers.Builder, operatingUnitRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, operatingUnitRemarksOffset, 0);
}

static createOperatingUnitRemarksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOperatingUnitRemarksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, updatedByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Operatingunit_Full_dataMode_Enum) {
  builder.addFieldInt8(62, dataMode, Operatingunit_Full_dataMode_Enum.REAL);
}

static addOrganization(builder:flatbuffers.Builder, organizationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, organizationOffset, 0);
}

static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, locationOffset, 0);
}

static endOperatingunit_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOperatingunit_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'OPER');
}

static finishSizePrefixedOperatingunit_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'OPER', true);
}

static createOperatingunit_Full(builder:flatbuffers.Builder, idOperatingUnitOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, altOperatingUnitIdOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, idLocationOffset:flatbuffers.Offset, idContactOffset:flatbuffers.Offset, idOrganizationOffset:flatbuffers.Offset, unitIdentifierOffset:flatbuffers.Offset, countryCodeOffset:flatbuffers.Offset, altCountryCodeOffset:flatbuffers.Offset, wacOffset:flatbuffers.Offset, operStatusOffset:flatbuffers.Offset, conditionOffset:flatbuffers.Offset, conditionAvailOffset:flatbuffers.Offset, eval:number, fpaOffset:flatbuffers.Offset, identOffset:flatbuffers.Offset, allegianceOffset:flatbuffers.Offset, altAllegianceOffset:flatbuffers.Offset, locNameOffset:flatbuffers.Offset, locReasonOffset:flatbuffers.Offset, forceOffset:flatbuffers.Offset, forceNameOffset:flatbuffers.Offset, functRoleOffset:flatbuffers.Offset, msnPrimaryOffset:flatbuffers.Offset, msnPrimarySpecialtyOffset:flatbuffers.Offset, masterUnit:boolean, stylizedUnit:boolean, divCatOffset:flatbuffers.Offset, echelonOffset:flatbuffers.Offset, echelonTierOffset:flatbuffers.Offset, fleetIdOffset:flatbuffers.Offset, deployStatusOffset:flatbuffers.Offset, flagFlownOffset:flatbuffers.Offset, coordDatumOffset:flatbuffers.Offset, coordOffset:flatbuffers.Offset, coordDerivAcc:number, lat:number, lon:number, elevMsl:number, elevMslConfLvl:number, elevMslDerivAcc:number, geoidalMslSep:number, milGridSysOffset:flatbuffers.Offset, milGridOffset:flatbuffers.Offset, utmOffset:flatbuffers.Offset, airDefAreaOffset:flatbuffers.Offset, polSubdivOffset:flatbuffers.Offset, symCodeOffset:flatbuffers.Offset, classRatingOffset:flatbuffers.Offset, recStatusOffset:flatbuffers.Offset, reviewDateOffset:flatbuffers.Offset, resProdOffset:flatbuffers.Offset, referenceDocOffset:flatbuffers.Offset, operatingUnitRemarksOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:Operatingunit_Full_dataMode_Enum, organizationOffset:flatbuffers.Offset, locationOffset:flatbuffers.Offset):flatbuffers.Offset {
  Operatingunit_Full.startOperatingunit_Full(builder);
  Operatingunit_Full.addIdOperatingUnit(builder, idOperatingUnitOffset);
  Operatingunit_Full.addClassificationMarking(builder, classificationMarkingOffset);
  Operatingunit_Full.addAltOperatingUnitId(builder, altOperatingUnitIdOffset);
  Operatingunit_Full.addName(builder, nameOffset);
  Operatingunit_Full.addDescription(builder, descriptionOffset);
  Operatingunit_Full.addIdLocation(builder, idLocationOffset);
  Operatingunit_Full.addIdContact(builder, idContactOffset);
  Operatingunit_Full.addIdOrganization(builder, idOrganizationOffset);
  Operatingunit_Full.addUnitIdentifier(builder, unitIdentifierOffset);
  Operatingunit_Full.addCountryCode(builder, countryCodeOffset);
  Operatingunit_Full.addAltCountryCode(builder, altCountryCodeOffset);
  Operatingunit_Full.addWac(builder, wacOffset);
  Operatingunit_Full.addOperStatus(builder, operStatusOffset);
  Operatingunit_Full.addCondition(builder, conditionOffset);
  Operatingunit_Full.addConditionAvail(builder, conditionAvailOffset);
  Operatingunit_Full.addEval(builder, eval);
  Operatingunit_Full.addFpa(builder, fpaOffset);
  Operatingunit_Full.addIdent(builder, identOffset);
  Operatingunit_Full.addAllegiance(builder, allegianceOffset);
  Operatingunit_Full.addAltAllegiance(builder, altAllegianceOffset);
  Operatingunit_Full.addLocName(builder, locNameOffset);
  Operatingunit_Full.addLocReason(builder, locReasonOffset);
  Operatingunit_Full.addForce(builder, forceOffset);
  Operatingunit_Full.addForceName(builder, forceNameOffset);
  Operatingunit_Full.addFunctRole(builder, functRoleOffset);
  Operatingunit_Full.addMsnPrimary(builder, msnPrimaryOffset);
  Operatingunit_Full.addMsnPrimarySpecialty(builder, msnPrimarySpecialtyOffset);
  Operatingunit_Full.addMasterUnit(builder, masterUnit);
  Operatingunit_Full.addStylizedUnit(builder, stylizedUnit);
  Operatingunit_Full.addDivCat(builder, divCatOffset);
  Operatingunit_Full.addEchelon(builder, echelonOffset);
  Operatingunit_Full.addEchelonTier(builder, echelonTierOffset);
  Operatingunit_Full.addFleetId(builder, fleetIdOffset);
  Operatingunit_Full.addDeployStatus(builder, deployStatusOffset);
  Operatingunit_Full.addFlagFlown(builder, flagFlownOffset);
  Operatingunit_Full.addCoordDatum(builder, coordDatumOffset);
  Operatingunit_Full.addCoord(builder, coordOffset);
  Operatingunit_Full.addCoordDerivAcc(builder, coordDerivAcc);
  Operatingunit_Full.addLat(builder, lat);
  Operatingunit_Full.addLon(builder, lon);
  Operatingunit_Full.addElevMsl(builder, elevMsl);
  Operatingunit_Full.addElevMslConfLvl(builder, elevMslConfLvl);
  Operatingunit_Full.addElevMslDerivAcc(builder, elevMslDerivAcc);
  Operatingunit_Full.addGeoidalMslSep(builder, geoidalMslSep);
  Operatingunit_Full.addMilGridSys(builder, milGridSysOffset);
  Operatingunit_Full.addMilGrid(builder, milGridOffset);
  Operatingunit_Full.addUtm(builder, utmOffset);
  Operatingunit_Full.addAirDefArea(builder, airDefAreaOffset);
  Operatingunit_Full.addPolSubdiv(builder, polSubdivOffset);
  Operatingunit_Full.addSymCode(builder, symCodeOffset);
  Operatingunit_Full.addClassRating(builder, classRatingOffset);
  Operatingunit_Full.addRecStatus(builder, recStatusOffset);
  Operatingunit_Full.addReviewDate(builder, reviewDateOffset);
  Operatingunit_Full.addResProd(builder, resProdOffset);
  Operatingunit_Full.addReferenceDoc(builder, referenceDocOffset);
  Operatingunit_Full.addOperatingUnitRemarks(builder, operatingUnitRemarksOffset);
  Operatingunit_Full.addCreatedAt(builder, createdAtOffset);
  Operatingunit_Full.addCreatedBy(builder, createdByOffset);
  Operatingunit_Full.addUpdatedAt(builder, updatedAtOffset);
  Operatingunit_Full.addUpdatedBy(builder, updatedByOffset);
  Operatingunit_Full.addSource(builder, sourceOffset);
  Operatingunit_Full.addOrigin(builder, originOffset);
  Operatingunit_Full.addDataMode(builder, dataMode);
  Operatingunit_Full.addOrganization(builder, organizationOffset);
  Operatingunit_Full.addLocation(builder, locationOffset);
  return Operatingunit_Full.endOperatingunit_Full(builder);
}

unpack(): Operatingunit_FullT {
  return new Operatingunit_FullT(
    this.idOperatingUnit(),
    this.classificationMarking(),
    this.altOperatingUnitId(),
    this.name(),
    this.description(),
    this.idLocation(),
    this.idContact(),
    this.idOrganization(),
    this.unitIdentifier(),
    this.countryCode(),
    this.altCountryCode(),
    this.wac(),
    this.operStatus(),
    this.condition(),
    this.conditionAvail(),
    this.eval(),
    this.fpa(),
    this.ident(),
    this.allegiance(),
    this.altAllegiance(),
    this.locName(),
    this.locReason(),
    this.force(),
    this.forceName(),
    this.functRole(),
    this.msnPrimary(),
    this.msnPrimarySpecialty(),
    this.masterUnit(),
    this.stylizedUnit(),
    this.divCat(),
    this.echelon(),
    this.echelonTier(),
    this.fleetId(),
    this.deployStatus(),
    this.flagFlown(),
    this.coordDatum(),
    this.coord(),
    this.coordDerivAcc(),
    this.lat(),
    this.lon(),
    this.elevMsl(),
    this.elevMslConfLvl(),
    this.elevMslDerivAcc(),
    this.geoidalMslSep(),
    this.milGridSys(),
    this.milGrid(),
    this.utm(),
    this.airDefArea(),
    this.polSubdiv(),
    this.symCode(),
    this.classRating(),
    this.recStatus(),
    this.reviewDate(),
    this.resProd(),
    this.referenceDoc(),
    this.bb!.createScalarList<string>(this.operatingUnitRemarks.bind(this), this.operatingUnitRemarks_Length()),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.organization(),
    this.location()
  );
}


unpackTo(_o: Operatingunit_FullT): void {
  _o.idOperatingUnit = this.idOperatingUnit();
  _o.classificationMarking = this.classificationMarking();
  _o.altOperatingUnitId = this.altOperatingUnitId();
  _o.name = this.name();
  _o.description = this.description();
  _o.idLocation = this.idLocation();
  _o.idContact = this.idContact();
  _o.idOrganization = this.idOrganization();
  _o.unitIdentifier = this.unitIdentifier();
  _o.countryCode = this.countryCode();
  _o.altCountryCode = this.altCountryCode();
  _o.wac = this.wac();
  _o.operStatus = this.operStatus();
  _o.condition = this.condition();
  _o.conditionAvail = this.conditionAvail();
  _o.eval = this.eval();
  _o.fpa = this.fpa();
  _o.ident = this.ident();
  _o.allegiance = this.allegiance();
  _o.altAllegiance = this.altAllegiance();
  _o.locName = this.locName();
  _o.locReason = this.locReason();
  _o.force = this.force();
  _o.forceName = this.forceName();
  _o.functRole = this.functRole();
  _o.msnPrimary = this.msnPrimary();
  _o.msnPrimarySpecialty = this.msnPrimarySpecialty();
  _o.masterUnit = this.masterUnit();
  _o.stylizedUnit = this.stylizedUnit();
  _o.divCat = this.divCat();
  _o.echelon = this.echelon();
  _o.echelonTier = this.echelonTier();
  _o.fleetId = this.fleetId();
  _o.deployStatus = this.deployStatus();
  _o.flagFlown = this.flagFlown();
  _o.coordDatum = this.coordDatum();
  _o.coord = this.coord();
  _o.coordDerivAcc = this.coordDerivAcc();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.elevMsl = this.elevMsl();
  _o.elevMslConfLvl = this.elevMslConfLvl();
  _o.elevMslDerivAcc = this.elevMslDerivAcc();
  _o.geoidalMslSep = this.geoidalMslSep();
  _o.milGridSys = this.milGridSys();
  _o.milGrid = this.milGrid();
  _o.utm = this.utm();
  _o.airDefArea = this.airDefArea();
  _o.polSubdiv = this.polSubdiv();
  _o.symCode = this.symCode();
  _o.classRating = this.classRating();
  _o.recStatus = this.recStatus();
  _o.reviewDate = this.reviewDate();
  _o.resProd = this.resProd();
  _o.referenceDoc = this.referenceDoc();
  _o.operatingUnitRemarks = this.bb!.createScalarList<string>(this.operatingUnitRemarks.bind(this), this.operatingUnitRemarks_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.organization = this.organization();
  _o.location = this.location();
}
}

export class Operatingunit_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public idOperatingUnit: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public altOperatingUnitId: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public idLocation: string|Uint8Array|null = null,
  public idContact: string|Uint8Array|null = null,
  public idOrganization: string|Uint8Array|null = null,
  public unitIdentifier: string|Uint8Array|null = null,
  public countryCode: string|Uint8Array|null = null,
  public altCountryCode: string|Uint8Array|null = null,
  public wac: string|Uint8Array|null = null,
  public operStatus: string|Uint8Array|null = null,
  public condition: string|Uint8Array|null = null,
  public conditionAvail: string|Uint8Array|null = null,
  public eval: number = 0,
  public fpa: string|Uint8Array|null = null,
  public ident: string|Uint8Array|null = null,
  public allegiance: string|Uint8Array|null = null,
  public altAllegiance: string|Uint8Array|null = null,
  public locName: string|Uint8Array|null = null,
  public locReason: string|Uint8Array|null = null,
  public force: string|Uint8Array|null = null,
  public forceName: string|Uint8Array|null = null,
  public functRole: string|Uint8Array|null = null,
  public msnPrimary: string|Uint8Array|null = null,
  public msnPrimarySpecialty: string|Uint8Array|null = null,
  public masterUnit: boolean = false,
  public stylizedUnit: boolean = false,
  public divCat: string|Uint8Array|null = null,
  public echelon: string|Uint8Array|null = null,
  public echelonTier: string|Uint8Array|null = null,
  public fleetId: string|Uint8Array|null = null,
  public deployStatus: string|Uint8Array|null = null,
  public flagFlown: string|Uint8Array|null = null,
  public coordDatum: string|Uint8Array|null = null,
  public coord: string|Uint8Array|null = null,
  public coordDerivAcc: number = 0.0,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public elevMsl: number = 0.0,
  public elevMslConfLvl: number = 0,
  public elevMslDerivAcc: number = 0.0,
  public geoidalMslSep: number = 0.0,
  public milGridSys: string|Uint8Array|null = null,
  public milGrid: string|Uint8Array|null = null,
  public utm: string|Uint8Array|null = null,
  public airDefArea: string|Uint8Array|null = null,
  public polSubdiv: string|Uint8Array|null = null,
  public symCode: string|Uint8Array|null = null,
  public classRating: string|Uint8Array|null = null,
  public recStatus: string|Uint8Array|null = null,
  public reviewDate: string|Uint8Array|null = null,
  public resProd: string|Uint8Array|null = null,
  public referenceDoc: string|Uint8Array|null = null,
  public operatingUnitRemarks: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: Operatingunit_Full_dataMode_Enum = Operatingunit_Full_dataMode_Enum.REAL,
  public organization: string|Uint8Array|null = null,
  public location: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const idOperatingUnit = (this.idOperatingUnit !== null ? builder.createString(this.idOperatingUnit!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const altOperatingUnitId = (this.altOperatingUnitId !== null ? builder.createString(this.altOperatingUnitId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const idLocation = (this.idLocation !== null ? builder.createString(this.idLocation!) : 0);
  const idContact = (this.idContact !== null ? builder.createString(this.idContact!) : 0);
  const idOrganization = (this.idOrganization !== null ? builder.createString(this.idOrganization!) : 0);
  const unitIdentifier = (this.unitIdentifier !== null ? builder.createString(this.unitIdentifier!) : 0);
  const countryCode = (this.countryCode !== null ? builder.createString(this.countryCode!) : 0);
  const altCountryCode = (this.altCountryCode !== null ? builder.createString(this.altCountryCode!) : 0);
  const wac = (this.wac !== null ? builder.createString(this.wac!) : 0);
  const operStatus = (this.operStatus !== null ? builder.createString(this.operStatus!) : 0);
  const condition = (this.condition !== null ? builder.createString(this.condition!) : 0);
  const conditionAvail = (this.conditionAvail !== null ? builder.createString(this.conditionAvail!) : 0);
  const fpa = (this.fpa !== null ? builder.createString(this.fpa!) : 0);
  const ident = (this.ident !== null ? builder.createString(this.ident!) : 0);
  const allegiance = (this.allegiance !== null ? builder.createString(this.allegiance!) : 0);
  const altAllegiance = (this.altAllegiance !== null ? builder.createString(this.altAllegiance!) : 0);
  const locName = (this.locName !== null ? builder.createString(this.locName!) : 0);
  const locReason = (this.locReason !== null ? builder.createString(this.locReason!) : 0);
  const force = (this.force !== null ? builder.createString(this.force!) : 0);
  const forceName = (this.forceName !== null ? builder.createString(this.forceName!) : 0);
  const functRole = (this.functRole !== null ? builder.createString(this.functRole!) : 0);
  const msnPrimary = (this.msnPrimary !== null ? builder.createString(this.msnPrimary!) : 0);
  const msnPrimarySpecialty = (this.msnPrimarySpecialty !== null ? builder.createString(this.msnPrimarySpecialty!) : 0);
  const divCat = (this.divCat !== null ? builder.createString(this.divCat!) : 0);
  const echelon = (this.echelon !== null ? builder.createString(this.echelon!) : 0);
  const echelonTier = (this.echelonTier !== null ? builder.createString(this.echelonTier!) : 0);
  const fleetId = (this.fleetId !== null ? builder.createString(this.fleetId!) : 0);
  const deployStatus = (this.deployStatus !== null ? builder.createString(this.deployStatus!) : 0);
  const flagFlown = (this.flagFlown !== null ? builder.createString(this.flagFlown!) : 0);
  const coordDatum = (this.coordDatum !== null ? builder.createString(this.coordDatum!) : 0);
  const coord = (this.coord !== null ? builder.createString(this.coord!) : 0);
  const milGridSys = (this.milGridSys !== null ? builder.createString(this.milGridSys!) : 0);
  const milGrid = (this.milGrid !== null ? builder.createString(this.milGrid!) : 0);
  const utm = (this.utm !== null ? builder.createString(this.utm!) : 0);
  const airDefArea = (this.airDefArea !== null ? builder.createString(this.airDefArea!) : 0);
  const polSubdiv = (this.polSubdiv !== null ? builder.createString(this.polSubdiv!) : 0);
  const symCode = (this.symCode !== null ? builder.createString(this.symCode!) : 0);
  const classRating = (this.classRating !== null ? builder.createString(this.classRating!) : 0);
  const recStatus = (this.recStatus !== null ? builder.createString(this.recStatus!) : 0);
  const reviewDate = (this.reviewDate !== null ? builder.createString(this.reviewDate!) : 0);
  const resProd = (this.resProd !== null ? builder.createString(this.resProd!) : 0);
  const referenceDoc = (this.referenceDoc !== null ? builder.createString(this.referenceDoc!) : 0);
  const operatingUnitRemarks = Operatingunit_Full.createOperatingUnitRemarksVector(builder, builder.createObjectOffsetList(this.operatingUnitRemarks));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const organization = (this.organization !== null ? builder.createString(this.organization!) : 0);
  const location = (this.location !== null ? builder.createString(this.location!) : 0);

  return Operatingunit_Full.createOperatingunit_Full(builder,
    idOperatingUnit,
    classificationMarking,
    altOperatingUnitId,
    name,
    description,
    idLocation,
    idContact,
    idOrganization,
    unitIdentifier,
    countryCode,
    altCountryCode,
    wac,
    operStatus,
    condition,
    conditionAvail,
    this.eval,
    fpa,
    ident,
    allegiance,
    altAllegiance,
    locName,
    locReason,
    force,
    forceName,
    functRole,
    msnPrimary,
    msnPrimarySpecialty,
    this.masterUnit,
    this.stylizedUnit,
    divCat,
    echelon,
    echelonTier,
    fleetId,
    deployStatus,
    flagFlown,
    coordDatum,
    coord,
    this.coordDerivAcc,
    this.lat,
    this.lon,
    this.elevMsl,
    this.elevMslConfLvl,
    this.elevMslDerivAcc,
    this.geoidalMslSep,
    milGridSys,
    milGrid,
    utm,
    airDefArea,
    polSubdiv,
    symCode,
    classRating,
    recStatus,
    reviewDate,
    resProd,
    referenceDoc,
    operatingUnitRemarks,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    source,
    origin,
    this.dataMode,
    organization,
    location
  );
}
}
