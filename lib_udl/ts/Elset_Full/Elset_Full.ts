// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Elset_Full_dataMode_Enum } from './Elset_Full_dataMode_Enum.js';
import { Elset_Full_sourcedDataTypes_Enum } from './Elset_Full_sourcedDataTypes_Enum.js';


/**
 * /// An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.
 */
export class Elset_Full implements flatbuffers.IUnpackableObject<Elset_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Elset_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsElset_Full(bb:flatbuffers.ByteBuffer, obj?:Elset_Full):Elset_Full {
  return (obj || new Elset_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsElset_Full(bb:flatbuffers.ByteBuffer, obj?:Elset_Full):Elset_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Elset_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ELSE');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: ELSET-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idElset():string|null
idElset(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idElset(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the target on-orbit object.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Elset epoch time in ISO 8601 UTC format, with microsecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
epoch():string|null
epoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
epoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
meanMotion():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
uct():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
 * Example: /// Example: 0.333
 * Constraints: No constraints specified.
 */
eccentricity():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
 * Example: /// Example: 45.1
 * Constraints: No constraints specified.
 */
inclination():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
raan():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
argOfPerigee():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
 * Example: /// Example: 179.1
 * Constraints: No constraints specified.
 */
meanAnomaly():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
 * Example: /// Example: 111
 * Constraints: No constraints specified.
 */
revNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
bStar():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.
 * Example: /// Example: 0.0126
 * Constraints: No constraints specified.
 */
agom():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
 * Example: /// Example: 0.00815
 * Constraints: No constraints specified.
 */
ballisticCoeff():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
meanMotionDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
meanMotionDdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
semiMajorAxis():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Period of the orbit equal to inverse of mean motion, in minutes.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
period():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
apogee():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
perigee():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.
 * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOrbitDetermination():string|null
idOrbitDetermination(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOrbitDetermination(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Read-only start time at which this elset was the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
effectiveFrom():string|null
effectiveFrom(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectiveFrom(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Read-only end time at which this elset was no longer the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
effectiveUntil():string|null
effectiveUntil(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectiveUntil(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
 * Example: /// Example: Example line1
 * Constraints: Minimum length = 0, Maximum length = 69
 */
line1():string|null
line1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
line1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
 * Example: /// Example: Example line2
 * Constraints: Minimum length = 0, Maximum length = 69
 */
line2():string|null
line2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
line2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional source-provided and searchable metadata or descriptor of the data.
 * Example: /// Example: Example description
 * Constraints: Minimum length = 0, Maximum length = 64
 */
descriptor():string|null
descriptor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
descriptor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: Example URI
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Elset_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Elset_Full_dataMode_Enum.REAL;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional algorithm used to produce this record.
 * Example: /// Example: Example algorithm
 * Constraints: Minimum length = 0, Maximum length = 64
 */
algorithm():string|null
algorithm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
algorithm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
 * Example: /// Example: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2']
 * Constraints: No constraints specified.
 */
sourcedData(index: number):string
sourcedData(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
sourcedData(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

sourcedDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
 * Example: /// Example: ['RADAR', 'RF']
 * Constraints: No constraints specified.
 */
sourcedDataTypes():Elset_Full_sourcedDataTypes_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Elset_Full_sourcedDataTypes_Enum.EO;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: TRANSACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The ephemeris type associated with this TLE:
 * 0:&nbsp;SGP4 if orbital period&nbsp;&lt;&nbsp;225 minutes, and SDP4 otherwise
 * 1:&nbsp;SGP
 * 2:&nbsp;SGP4
 * 3:&nbsp;SDP4
 * 4:&nbsp;SGP8, also referred to as SGP4-XP
 * 5:&nbsp;SDP8
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
ephemType():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
onOrbit():string|null
onOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
onOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startElset_Full(builder:flatbuffers.Builder) {
  builder.startObject(44);
}

static addIdElset(builder:flatbuffers.Builder, idElsetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idElsetOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(2, satNo, 0);
}

static addEpoch(builder:flatbuffers.Builder, epochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, epochOffset, 0);
}

static addMeanMotion(builder:flatbuffers.Builder, meanMotion:number) {
  builder.addFieldFloat64(4, meanMotion, 0.0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idOnOrbitOffset, 0);
}

static addUct(builder:flatbuffers.Builder, uct:boolean) {
  builder.addFieldInt8(6, +uct, +false);
}

static addEccentricity(builder:flatbuffers.Builder, eccentricity:number) {
  builder.addFieldFloat64(7, eccentricity, 0.0);
}

static addInclination(builder:flatbuffers.Builder, inclination:number) {
  builder.addFieldFloat64(8, inclination, 0.0);
}

static addRaan(builder:flatbuffers.Builder, raan:number) {
  builder.addFieldFloat64(9, raan, 0.0);
}

static addArgOfPerigee(builder:flatbuffers.Builder, argOfPerigee:number) {
  builder.addFieldFloat64(10, argOfPerigee, 0.0);
}

static addMeanAnomaly(builder:flatbuffers.Builder, meanAnomaly:number) {
  builder.addFieldFloat64(11, meanAnomaly, 0.0);
}

static addRevNo(builder:flatbuffers.Builder, revNo:number) {
  builder.addFieldInt32(12, revNo, 0);
}

static addBStar(builder:flatbuffers.Builder, bStar:number) {
  builder.addFieldFloat64(13, bStar, 0.0);
}

static addAgom(builder:flatbuffers.Builder, agom:number) {
  builder.addFieldFloat64(14, agom, 0.0);
}

static addBallisticCoeff(builder:flatbuffers.Builder, ballisticCoeff:number) {
  builder.addFieldFloat64(15, ballisticCoeff, 0.0);
}

static addMeanMotionDot(builder:flatbuffers.Builder, meanMotionDot:number) {
  builder.addFieldFloat64(16, meanMotionDot, 0.0);
}

static addMeanMotionDdot(builder:flatbuffers.Builder, meanMotionDdot:number) {
  builder.addFieldFloat64(17, meanMotionDdot, 0.0);
}

static addSemiMajorAxis(builder:flatbuffers.Builder, semiMajorAxis:number) {
  builder.addFieldFloat64(18, semiMajorAxis, 0.0);
}

static addPeriod(builder:flatbuffers.Builder, period:number) {
  builder.addFieldFloat64(19, period, 0.0);
}

static addApogee(builder:flatbuffers.Builder, apogee:number) {
  builder.addFieldFloat64(20, apogee, 0.0);
}

static addPerigee(builder:flatbuffers.Builder, perigee:number) {
  builder.addFieldFloat64(21, perigee, 0.0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, origObjectIdOffset, 0);
}

static addIdOrbitDetermination(builder:flatbuffers.Builder, idOrbitDeterminationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, idOrbitDeterminationOffset, 0);
}

static addEffectiveFrom(builder:flatbuffers.Builder, effectiveFromOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, effectiveFromOffset, 0);
}

static addEffectiveUntil(builder:flatbuffers.Builder, effectiveUntilOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, effectiveUntilOffset, 0);
}

static addLine1(builder:flatbuffers.Builder, line1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(26, line1Offset, 0);
}

static addLine2(builder:flatbuffers.Builder, line2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(27, line2Offset, 0);
}

static addDescriptor(builder:flatbuffers.Builder, descriptorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, descriptorOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, createdByOffset, 0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, rawFileUriOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, originOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, sourceOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Elset_Full_dataMode_Enum) {
  builder.addFieldInt8(35, dataMode, Elset_Full_dataMode_Enum.REAL);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAlgorithm(builder:flatbuffers.Builder, algorithmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, algorithmOffset, 0);
}

static addSourcedData(builder:flatbuffers.Builder, sourcedDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, sourcedDataOffset, 0);
}

static createSourcedDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSourcedDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSourcedDataTypes(builder:flatbuffers.Builder, sourcedDataTypes:Elset_Full_sourcedDataTypes_Enum) {
  builder.addFieldInt8(39, sourcedDataTypes, Elset_Full_sourcedDataTypes_Enum.EO);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, transactionIdOffset, 0);
}

static addEphemType(builder:flatbuffers.Builder, ephemType:number) {
  builder.addFieldInt32(41, ephemType, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, origNetworkOffset, 0);
}

static addOnOrbit(builder:flatbuffers.Builder, onOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, onOrbitOffset, 0);
}

static endElset_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishElset_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ELSE');
}

static finishSizePrefixedElset_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ELSE', true);
}

static createElset_Full(builder:flatbuffers.Builder, idElsetOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, satNo:number, epochOffset:flatbuffers.Offset, meanMotion:number, idOnOrbitOffset:flatbuffers.Offset, uct:boolean, eccentricity:number, inclination:number, raan:number, argOfPerigee:number, meanAnomaly:number, revNo:number, bStar:number, agom:number, ballisticCoeff:number, meanMotionDot:number, meanMotionDdot:number, semiMajorAxis:number, period:number, apogee:number, perigee:number, origObjectIdOffset:flatbuffers.Offset, idOrbitDeterminationOffset:flatbuffers.Offset, effectiveFromOffset:flatbuffers.Offset, effectiveUntilOffset:flatbuffers.Offset, line1Offset:flatbuffers.Offset, line2Offset:flatbuffers.Offset, descriptorOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, rawFileUriOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, dataMode:Elset_Full_dataMode_Enum, tagsOffset:flatbuffers.Offset, algorithmOffset:flatbuffers.Offset, sourcedDataOffset:flatbuffers.Offset, sourcedDataTypes:Elset_Full_sourcedDataTypes_Enum, transactionIdOffset:flatbuffers.Offset, ephemType:number, origNetworkOffset:flatbuffers.Offset, onOrbitOffset:flatbuffers.Offset):flatbuffers.Offset {
  Elset_Full.startElset_Full(builder);
  Elset_Full.addIdElset(builder, idElsetOffset);
  Elset_Full.addClassificationMarking(builder, classificationMarkingOffset);
  Elset_Full.addSatNo(builder, satNo);
  Elset_Full.addEpoch(builder, epochOffset);
  Elset_Full.addMeanMotion(builder, meanMotion);
  Elset_Full.addIdOnOrbit(builder, idOnOrbitOffset);
  Elset_Full.addUct(builder, uct);
  Elset_Full.addEccentricity(builder, eccentricity);
  Elset_Full.addInclination(builder, inclination);
  Elset_Full.addRaan(builder, raan);
  Elset_Full.addArgOfPerigee(builder, argOfPerigee);
  Elset_Full.addMeanAnomaly(builder, meanAnomaly);
  Elset_Full.addRevNo(builder, revNo);
  Elset_Full.addBStar(builder, bStar);
  Elset_Full.addAgom(builder, agom);
  Elset_Full.addBallisticCoeff(builder, ballisticCoeff);
  Elset_Full.addMeanMotionDot(builder, meanMotionDot);
  Elset_Full.addMeanMotionDdot(builder, meanMotionDdot);
  Elset_Full.addSemiMajorAxis(builder, semiMajorAxis);
  Elset_Full.addPeriod(builder, period);
  Elset_Full.addApogee(builder, apogee);
  Elset_Full.addPerigee(builder, perigee);
  Elset_Full.addOrigObjectId(builder, origObjectIdOffset);
  Elset_Full.addIdOrbitDetermination(builder, idOrbitDeterminationOffset);
  Elset_Full.addEffectiveFrom(builder, effectiveFromOffset);
  Elset_Full.addEffectiveUntil(builder, effectiveUntilOffset);
  Elset_Full.addLine1(builder, line1Offset);
  Elset_Full.addLine2(builder, line2Offset);
  Elset_Full.addDescriptor(builder, descriptorOffset);
  Elset_Full.addCreatedAt(builder, createdAtOffset);
  Elset_Full.addCreatedBy(builder, createdByOffset);
  Elset_Full.addRawFileUri(builder, rawFileUriOffset);
  Elset_Full.addOrigin(builder, originOffset);
  Elset_Full.addSourceDl(builder, sourceDlOffset);
  Elset_Full.addSource(builder, sourceOffset);
  Elset_Full.addDataMode(builder, dataMode);
  Elset_Full.addTags(builder, tagsOffset);
  Elset_Full.addAlgorithm(builder, algorithmOffset);
  Elset_Full.addSourcedData(builder, sourcedDataOffset);
  Elset_Full.addSourcedDataTypes(builder, sourcedDataTypes);
  Elset_Full.addTransactionId(builder, transactionIdOffset);
  Elset_Full.addEphemType(builder, ephemType);
  Elset_Full.addOrigNetwork(builder, origNetworkOffset);
  Elset_Full.addOnOrbit(builder, onOrbitOffset);
  return Elset_Full.endElset_Full(builder);
}

unpack(): Elset_FullT {
  return new Elset_FullT(
    this.idElset(),
    this.classificationMarking(),
    this.satNo(),
    this.epoch(),
    this.meanMotion(),
    this.idOnOrbit(),
    this.uct(),
    this.eccentricity(),
    this.inclination(),
    this.raan(),
    this.argOfPerigee(),
    this.meanAnomaly(),
    this.revNo(),
    this.bStar(),
    this.agom(),
    this.ballisticCoeff(),
    this.meanMotionDot(),
    this.meanMotionDdot(),
    this.semiMajorAxis(),
    this.period(),
    this.apogee(),
    this.perigee(),
    this.origObjectId(),
    this.idOrbitDetermination(),
    this.effectiveFrom(),
    this.effectiveUntil(),
    this.line1(),
    this.line2(),
    this.descriptor(),
    this.createdAt(),
    this.createdBy(),
    this.rawFileUri(),
    this.origin(),
    this.sourceDl(),
    this.source(),
    this.dataMode(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength()),
    this.algorithm(),
    this.bb!.createScalarList<string>(this.sourcedData.bind(this), this.sourcedDataLength()),
    this.sourcedDataTypes(),
    this.transactionId(),
    this.ephemType(),
    this.origNetwork(),
    this.onOrbit()
  );
}


unpackTo(_o: Elset_FullT): void {
  _o.idElset = this.idElset();
  _o.classificationMarking = this.classificationMarking();
  _o.satNo = this.satNo();
  _o.epoch = this.epoch();
  _o.meanMotion = this.meanMotion();
  _o.idOnOrbit = this.idOnOrbit();
  _o.uct = this.uct();
  _o.eccentricity = this.eccentricity();
  _o.inclination = this.inclination();
  _o.raan = this.raan();
  _o.argOfPerigee = this.argOfPerigee();
  _o.meanAnomaly = this.meanAnomaly();
  _o.revNo = this.revNo();
  _o.bStar = this.bStar();
  _o.agom = this.agom();
  _o.ballisticCoeff = this.ballisticCoeff();
  _o.meanMotionDot = this.meanMotionDot();
  _o.meanMotionDdot = this.meanMotionDdot();
  _o.semiMajorAxis = this.semiMajorAxis();
  _o.period = this.period();
  _o.apogee = this.apogee();
  _o.perigee = this.perigee();
  _o.origObjectId = this.origObjectId();
  _o.idOrbitDetermination = this.idOrbitDetermination();
  _o.effectiveFrom = this.effectiveFrom();
  _o.effectiveUntil = this.effectiveUntil();
  _o.line1 = this.line1();
  _o.line2 = this.line2();
  _o.descriptor = this.descriptor();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.rawFileUri = this.rawFileUri();
  _o.origin = this.origin();
  _o.sourceDl = this.sourceDl();
  _o.source = this.source();
  _o.dataMode = this.dataMode();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength());
  _o.algorithm = this.algorithm();
  _o.sourcedData = this.bb!.createScalarList<string>(this.sourcedData.bind(this), this.sourcedDataLength());
  _o.sourcedDataTypes = this.sourcedDataTypes();
  _o.transactionId = this.transactionId();
  _o.ephemType = this.ephemType();
  _o.origNetwork = this.origNetwork();
  _o.onOrbit = this.onOrbit();
}
}

export class Elset_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public idElset: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public satNo: number = 0,
  public epoch: string|Uint8Array|null = null,
  public meanMotion: number = 0.0,
  public idOnOrbit: string|Uint8Array|null = null,
  public uct: boolean = false,
  public eccentricity: number = 0.0,
  public inclination: number = 0.0,
  public raan: number = 0.0,
  public argOfPerigee: number = 0.0,
  public meanAnomaly: number = 0.0,
  public revNo: number = 0,
  public bStar: number = 0.0,
  public agom: number = 0.0,
  public ballisticCoeff: number = 0.0,
  public meanMotionDot: number = 0.0,
  public meanMotionDdot: number = 0.0,
  public semiMajorAxis: number = 0.0,
  public period: number = 0.0,
  public apogee: number = 0.0,
  public perigee: number = 0.0,
  public origObjectId: string|Uint8Array|null = null,
  public idOrbitDetermination: string|Uint8Array|null = null,
  public effectiveFrom: string|Uint8Array|null = null,
  public effectiveUntil: string|Uint8Array|null = null,
  public line1: string|Uint8Array|null = null,
  public line2: string|Uint8Array|null = null,
  public descriptor: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public rawFileUri: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public dataMode: Elset_Full_dataMode_Enum = Elset_Full_dataMode_Enum.REAL,
  public tags: (string)[] = [],
  public algorithm: string|Uint8Array|null = null,
  public sourcedData: (string)[] = [],
  public sourcedDataTypes: Elset_Full_sourcedDataTypes_Enum = Elset_Full_sourcedDataTypes_Enum.EO,
  public transactionId: string|Uint8Array|null = null,
  public ephemType: number = 0,
  public origNetwork: string|Uint8Array|null = null,
  public onOrbit: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const idElset = (this.idElset !== null ? builder.createString(this.idElset!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const epoch = (this.epoch !== null ? builder.createString(this.epoch!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const idOrbitDetermination = (this.idOrbitDetermination !== null ? builder.createString(this.idOrbitDetermination!) : 0);
  const effectiveFrom = (this.effectiveFrom !== null ? builder.createString(this.effectiveFrom!) : 0);
  const effectiveUntil = (this.effectiveUntil !== null ? builder.createString(this.effectiveUntil!) : 0);
  const line1 = (this.line1 !== null ? builder.createString(this.line1!) : 0);
  const line2 = (this.line2 !== null ? builder.createString(this.line2!) : 0);
  const descriptor = (this.descriptor !== null ? builder.createString(this.descriptor!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const rawFileUri = (this.rawFileUri !== null ? builder.createString(this.rawFileUri!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const tags = Elset_Full.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const algorithm = (this.algorithm !== null ? builder.createString(this.algorithm!) : 0);
  const sourcedData = Elset_Full.createSourcedDataVector(builder, builder.createObjectOffsetList(this.sourcedData));
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const onOrbit = (this.onOrbit !== null ? builder.createString(this.onOrbit!) : 0);

  return Elset_Full.createElset_Full(builder,
    idElset,
    classificationMarking,
    this.satNo,
    epoch,
    this.meanMotion,
    idOnOrbit,
    this.uct,
    this.eccentricity,
    this.inclination,
    this.raan,
    this.argOfPerigee,
    this.meanAnomaly,
    this.revNo,
    this.bStar,
    this.agom,
    this.ballisticCoeff,
    this.meanMotionDot,
    this.meanMotionDdot,
    this.semiMajorAxis,
    this.period,
    this.apogee,
    this.perigee,
    origObjectId,
    idOrbitDetermination,
    effectiveFrom,
    effectiveUntil,
    line1,
    line2,
    descriptor,
    createdAt,
    createdBy,
    rawFileUri,
    origin,
    sourceDl,
    source,
    this.dataMode,
    tags,
    algorithm,
    sourcedData,
    this.sourcedDataTypes,
    transactionId,
    this.ephemType,
    origNetwork,
    onOrbit
  );
}
}
