// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SkyImagery_Ingest_dataMode_Enum } from './SkyImagery_Ingest_dataMode_Enum.js';


/**
 * /// Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP) . Binary content must be downloaded individually by ID using the 'getFile' operation.
 */
export class SkyImagery_Ingest implements flatbuffers.IUnpackableObject<SkyImagery_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SkyImagery_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSkyImagery_Ingest(bb:flatbuffers.ByteBuffer, obj?:SkyImagery_Ingest):SkyImagery_Ingest {
  return (obj || new SkyImagery_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSkyImagery_Ingest(bb:flatbuffers.ByteBuffer, obj?:SkyImagery_Ingest):SkyImagery_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SkyImagery_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SKYI');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SKYIMAGERY-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier of the target on-orbit object, if correlated.
 * Example: /// Example: 44920
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.
 * Example: /// Example: X15-23452
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier of the AttitudeSet data record describing the orientation of an object body.
 * Example: /// Example: d039ba29-52f4-4839-8a8f-e85fa416aec5
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idAttitudeSet():string|null
idAttitudeSet(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idAttitudeSet(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the reporting sensor.
 * Example: /// Example: 420
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Catalog number of the target on-orbit object.
 * Example: /// Example: 25544
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: origSensorId
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: -33.283048
 * Constraints: No constraints specified.
 */
senlat():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 149.372549
 * Constraints: No constraints specified.
 */
senlon():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.
 * Example: /// Example: 14.483619321
 * Constraints: No constraints specified.
 */
senalt():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
 * Example: /// Example: 14.52
 * Constraints: No constraints specified.
 */
senx():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
 * Example: /// Example: 32.41
 * Constraints: No constraints specified.
 */
seny():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
 * Example: /// Example: 376.12
 * Constraints: No constraints specified.
 */
senz():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
 * Example: /// Example: [0.03, 0.02, 0.01, 0.012]
 * Constraints: No constraints specified.
 */
senQuat(index: number):string
senQuat(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
senQuat(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

senQuatLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
 * Example: /// Example: [0.03, 0.02, 0.01, 0.012]
 * Constraints: No constraints specified.
 */
senQuatDot(index: number):string
senQuatDot(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
senQuatDot(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

senQuatDotLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP).
 * Example: /// Example: imageType
 * Constraints: Minimum length = 1, Maximum length = 24
 */
imageType():string|null
imageType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imageType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start time of the exposure, in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
expStartTime():string|null
expStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
expStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * End time of the exposure, in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
expEndTime():string|null
expEndTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
expEndTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * String that uniquely identifies the data source.
 * Example: /// Example: imageSourceInfo
 * Constraints: Minimum length = 0, Maximum length = 100
 */
imageSourceInfo():string|null
imageSourceInfo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imageSourceInfo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The telescope pointing azimuth, in degrees, at the exposure start epoch.
 * Example: /// Example: 146.321
 * Constraints: No constraints specified.
 */
topLeftStartAz():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The telescope pointing elevation, in degrees, at the exposure start epoch.
 * Example: /// Example: 146.321
 * Constraints: No constraints specified.
 */
topLeftStartEl():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The telescope pointing azimuth, in degrees, at the exposure stop epoch.
 * Example: /// Example: 3.7
 * Constraints: No constraints specified.
 */
topLeftStopAz():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The telescope pointing elevation, in degrees, at the exposure stop epoch.
 * Example: /// Example: 34.233
 * Constraints: No constraints specified.
 */
topLeftStopEl():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The user-defined set ID of a sequence of images.
 * Example: /// Example: imageSetId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
imageSetId():string|null
imageSetId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imageSetId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of images in an image set.
 * Example: /// Example: 9
 * Constraints: No constraints specified.
 */
imageSetLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The sequence ID of an image within an image set.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
sequenceId():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Field Of View frame width, in degrees.
 * Example: /// Example: 21.23
 * Constraints: No constraints specified.
 */
frameFovwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Field Of View frame height, in degrees.
 * Example: /// Example: 21.23
 * Constraints: No constraints specified.
 */
frameFovheight():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Field Of View pixel width, in degrees.
 * Example: /// Example: 321.123
 * Constraints: No constraints specified.
 */
pixelFovwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Field Of View pixel height, in degrees.
 * Example: /// Example: 321.123
 * Constraints: No constraints specified.
 */
pixelFovheight():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Frame width of the image, in number of pixels.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
frameWidthPixels():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Frame height of the image, in number of pixels.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
frameHeightPixels():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Bit depth of the image, in number of pixels.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
pixelBitDepth():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Reference to an annotation document associated with this image.
 * Example: /// Example: annotationKey
 * Constraints: Minimum length = 0, Maximum length = 128
 */
annotationKey():string|null
annotationKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
annotationKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Reference to a calibration document associated with this image.
 * Example: /// Example: calibrationKey
 * Constraints: Minimum length = 0, Maximum length = 128
 */
calibrationKey():string|null
calibrationKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
calibrationKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the uploaded image file.
 * Example: /// Example: filename.jpg
 * Constraints: Minimum length = 0, Maximum length = 128
 */
filename():string|null
filename(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
filename(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Size of the image file, in bytes.
 * Example: /// Example: 371945
 * Constraints: No constraints specified.
 */
filesize():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

/**
 * MD5 value of the file. The ingest/create operation will automatically generate the value.
 * Example: /// Example: checksumValue
 * Constraints: Minimum length = 0, Maximum length = 256
 */
checksumValue():string|null
checksumValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
checksumValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional name/description associated with this image.
 * Example: /// Example: description
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SkyImagery_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SkyImagery_Ingest_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Collection of linked EOObservations.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
eoObservations(index: number):string
eoObservations(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
eoObservations(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

eoObservationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSkyImagery_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(50);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOnOrbitOffset, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, origObjectIdOffset, 0);
}

static addIdAttitudeSet(builder:flatbuffers.Builder, idAttitudeSetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idAttitudeSetOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idSensorOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(6, satNo, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, origSensorIdOffset, 0);
}

static addSenlat(builder:flatbuffers.Builder, senlat:number) {
  builder.addFieldFloat64(8, senlat, 0.0);
}

static addSenlon(builder:flatbuffers.Builder, senlon:number) {
  builder.addFieldFloat64(9, senlon, 0.0);
}

static addSenalt(builder:flatbuffers.Builder, senalt:number) {
  builder.addFieldFloat64(10, senalt, 0.0);
}

static addSenx(builder:flatbuffers.Builder, senx:number) {
  builder.addFieldFloat64(11, senx, 0.0);
}

static addSeny(builder:flatbuffers.Builder, seny:number) {
  builder.addFieldFloat64(12, seny, 0.0);
}

static addSenz(builder:flatbuffers.Builder, senz:number) {
  builder.addFieldFloat64(13, senz, 0.0);
}

static addSenQuat(builder:flatbuffers.Builder, senQuatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, senQuatOffset, 0);
}

static createSenQuatVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSenQuatVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSenQuatDot(builder:flatbuffers.Builder, senQuatDotOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, senQuatDotOffset, 0);
}

static createSenQuatDotVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSenQuatDotVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addImageType(builder:flatbuffers.Builder, imageTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, imageTypeOffset, 0);
}

static addExpStartTime(builder:flatbuffers.Builder, expStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, expStartTimeOffset, 0);
}

static addExpEndTime(builder:flatbuffers.Builder, expEndTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, expEndTimeOffset, 0);
}

static addImageSourceInfo(builder:flatbuffers.Builder, imageSourceInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, imageSourceInfoOffset, 0);
}

static addTopLeftStartAz(builder:flatbuffers.Builder, topLeftStartAz:number) {
  builder.addFieldFloat64(20, topLeftStartAz, 0.0);
}

static addTopLeftStartEl(builder:flatbuffers.Builder, topLeftStartEl:number) {
  builder.addFieldFloat64(21, topLeftStartEl, 0.0);
}

static addTopLeftStopAz(builder:flatbuffers.Builder, topLeftStopAz:number) {
  builder.addFieldFloat64(22, topLeftStopAz, 0.0);
}

static addTopLeftStopEl(builder:flatbuffers.Builder, topLeftStopEl:number) {
  builder.addFieldFloat64(23, topLeftStopEl, 0.0);
}

static addImageSetId(builder:flatbuffers.Builder, imageSetIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, imageSetIdOffset, 0);
}

static addImageSetLength(builder:flatbuffers.Builder, imageSetLength:number) {
  builder.addFieldInt32(25, imageSetLength, 0);
}

static addSequenceId(builder:flatbuffers.Builder, sequenceId:number) {
  builder.addFieldInt32(26, sequenceId, 0);
}

static addFrameFovwidth(builder:flatbuffers.Builder, frameFovwidth:number) {
  builder.addFieldFloat64(27, frameFovwidth, 0.0);
}

static addFrameFovheight(builder:flatbuffers.Builder, frameFovheight:number) {
  builder.addFieldFloat64(28, frameFovheight, 0.0);
}

static addPixelFovwidth(builder:flatbuffers.Builder, pixelFovwidth:number) {
  builder.addFieldFloat64(29, pixelFovwidth, 0.0);
}

static addPixelFovheight(builder:flatbuffers.Builder, pixelFovheight:number) {
  builder.addFieldFloat64(30, pixelFovheight, 0.0);
}

static addFrameWidthPixels(builder:flatbuffers.Builder, frameWidthPixels:number) {
  builder.addFieldInt32(31, frameWidthPixels, 0);
}

static addFrameHeightPixels(builder:flatbuffers.Builder, frameHeightPixels:number) {
  builder.addFieldInt32(32, frameHeightPixels, 0);
}

static addPixelBitDepth(builder:flatbuffers.Builder, pixelBitDepth:number) {
  builder.addFieldInt32(33, pixelBitDepth, 0);
}

static addAnnotationKey(builder:flatbuffers.Builder, annotationKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, annotationKeyOffset, 0);
}

static addCalibrationKey(builder:flatbuffers.Builder, calibrationKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, calibrationKeyOffset, 0);
}

static addFilename(builder:flatbuffers.Builder, filenameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, filenameOffset, 0);
}

static addFilesize(builder:flatbuffers.Builder, filesize:bigint) {
  builder.addFieldInt64(37, filesize, BigInt('0'));
}

static addChecksumValue(builder:flatbuffers.Builder, checksumValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, checksumValueOffset, 0);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, transactionIdOffset, 0);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, origNetworkOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, sourceDlOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, descriptionOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SkyImagery_Ingest_dataMode_Enum) {
  builder.addFieldInt8(46, dataMode, SkyImagery_Ingest_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, createdByOffset, 0);
}

static addEoObservations(builder:flatbuffers.Builder, eoObservationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, eoObservationsOffset, 0);
}

static createEoObservationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEoObservationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSkyImagery_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSkyImagery_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SKYI');
}

static finishSizePrefixedSkyImagery_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SKYI', true);
}

static createSkyImagery_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, origObjectIdOffset:flatbuffers.Offset, idAttitudeSetOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, satNo:number, origSensorIdOffset:flatbuffers.Offset, senlat:number, senlon:number, senalt:number, senx:number, seny:number, senz:number, senQuatOffset:flatbuffers.Offset, senQuatDotOffset:flatbuffers.Offset, imageTypeOffset:flatbuffers.Offset, expStartTimeOffset:flatbuffers.Offset, expEndTimeOffset:flatbuffers.Offset, imageSourceInfoOffset:flatbuffers.Offset, topLeftStartAz:number, topLeftStartEl:number, topLeftStopAz:number, topLeftStopEl:number, imageSetIdOffset:flatbuffers.Offset, imageSetLength:number, sequenceId:number, frameFovwidth:number, frameFovheight:number, pixelFovwidth:number, pixelFovheight:number, frameWidthPixels:number, frameHeightPixels:number, pixelBitDepth:number, annotationKeyOffset:flatbuffers.Offset, calibrationKeyOffset:flatbuffers.Offset, filenameOffset:flatbuffers.Offset, filesize:bigint, checksumValueOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, tagsOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, dataMode:SkyImagery_Ingest_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, eoObservationsOffset:flatbuffers.Offset):flatbuffers.Offset {
  SkyImagery_Ingest.startSkyImagery_Ingest(builder);
  SkyImagery_Ingest.addId(builder, idOffset);
  SkyImagery_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  SkyImagery_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
  SkyImagery_Ingest.addOrigObjectId(builder, origObjectIdOffset);
  SkyImagery_Ingest.addIdAttitudeSet(builder, idAttitudeSetOffset);
  SkyImagery_Ingest.addIdSensor(builder, idSensorOffset);
  SkyImagery_Ingest.addSatNo(builder, satNo);
  SkyImagery_Ingest.addOrigSensorId(builder, origSensorIdOffset);
  SkyImagery_Ingest.addSenlat(builder, senlat);
  SkyImagery_Ingest.addSenlon(builder, senlon);
  SkyImagery_Ingest.addSenalt(builder, senalt);
  SkyImagery_Ingest.addSenx(builder, senx);
  SkyImagery_Ingest.addSeny(builder, seny);
  SkyImagery_Ingest.addSenz(builder, senz);
  SkyImagery_Ingest.addSenQuat(builder, senQuatOffset);
  SkyImagery_Ingest.addSenQuatDot(builder, senQuatDotOffset);
  SkyImagery_Ingest.addImageType(builder, imageTypeOffset);
  SkyImagery_Ingest.addExpStartTime(builder, expStartTimeOffset);
  SkyImagery_Ingest.addExpEndTime(builder, expEndTimeOffset);
  SkyImagery_Ingest.addImageSourceInfo(builder, imageSourceInfoOffset);
  SkyImagery_Ingest.addTopLeftStartAz(builder, topLeftStartAz);
  SkyImagery_Ingest.addTopLeftStartEl(builder, topLeftStartEl);
  SkyImagery_Ingest.addTopLeftStopAz(builder, topLeftStopAz);
  SkyImagery_Ingest.addTopLeftStopEl(builder, topLeftStopEl);
  SkyImagery_Ingest.addImageSetId(builder, imageSetIdOffset);
  SkyImagery_Ingest.addImageSetLength(builder, imageSetLength);
  SkyImagery_Ingest.addSequenceId(builder, sequenceId);
  SkyImagery_Ingest.addFrameFovwidth(builder, frameFovwidth);
  SkyImagery_Ingest.addFrameFovheight(builder, frameFovheight);
  SkyImagery_Ingest.addPixelFovwidth(builder, pixelFovwidth);
  SkyImagery_Ingest.addPixelFovheight(builder, pixelFovheight);
  SkyImagery_Ingest.addFrameWidthPixels(builder, frameWidthPixels);
  SkyImagery_Ingest.addFrameHeightPixels(builder, frameHeightPixels);
  SkyImagery_Ingest.addPixelBitDepth(builder, pixelBitDepth);
  SkyImagery_Ingest.addAnnotationKey(builder, annotationKeyOffset);
  SkyImagery_Ingest.addCalibrationKey(builder, calibrationKeyOffset);
  SkyImagery_Ingest.addFilename(builder, filenameOffset);
  SkyImagery_Ingest.addFilesize(builder, filesize);
  SkyImagery_Ingest.addChecksumValue(builder, checksumValueOffset);
  SkyImagery_Ingest.addTransactionId(builder, transactionIdOffset);
  SkyImagery_Ingest.addTags(builder, tagsOffset);
  SkyImagery_Ingest.addSource(builder, sourceOffset);
  SkyImagery_Ingest.addOrigin(builder, originOffset);
  SkyImagery_Ingest.addOrigNetwork(builder, origNetworkOffset);
  SkyImagery_Ingest.addSourceDl(builder, sourceDlOffset);
  SkyImagery_Ingest.addDescription(builder, descriptionOffset);
  SkyImagery_Ingest.addDataMode(builder, dataMode);
  SkyImagery_Ingest.addCreatedAt(builder, createdAtOffset);
  SkyImagery_Ingest.addCreatedBy(builder, createdByOffset);
  SkyImagery_Ingest.addEoObservations(builder, eoObservationsOffset);
  return SkyImagery_Ingest.endSkyImagery_Ingest(builder);
}

unpack(): SkyImagery_IngestT {
  return new SkyImagery_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idOnOrbit(),
    this.origObjectId(),
    this.idAttitudeSet(),
    this.idSensor(),
    this.satNo(),
    this.origSensorId(),
    this.senlat(),
    this.senlon(),
    this.senalt(),
    this.senx(),
    this.seny(),
    this.senz(),
    this.bb!.createScalarList<string>(this.senQuat.bind(this), this.senQuatLength()),
    this.bb!.createScalarList<string>(this.senQuatDot.bind(this), this.senQuatDotLength()),
    this.imageType(),
    this.expStartTime(),
    this.expEndTime(),
    this.imageSourceInfo(),
    this.topLeftStartAz(),
    this.topLeftStartEl(),
    this.topLeftStopAz(),
    this.topLeftStopEl(),
    this.imageSetId(),
    this.imageSetLength(),
    this.sequenceId(),
    this.frameFovwidth(),
    this.frameFovheight(),
    this.pixelFovwidth(),
    this.pixelFovheight(),
    this.frameWidthPixels(),
    this.frameHeightPixels(),
    this.pixelBitDepth(),
    this.annotationKey(),
    this.calibrationKey(),
    this.filename(),
    this.filesize(),
    this.checksumValue(),
    this.transactionId(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength()),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.sourceDl(),
    this.description(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.bb!.createScalarList<string>(this.eoObservations.bind(this), this.eoObservationsLength())
  );
}


unpackTo(_o: SkyImagery_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idOnOrbit = this.idOnOrbit();
  _o.origObjectId = this.origObjectId();
  _o.idAttitudeSet = this.idAttitudeSet();
  _o.idSensor = this.idSensor();
  _o.satNo = this.satNo();
  _o.origSensorId = this.origSensorId();
  _o.senlat = this.senlat();
  _o.senlon = this.senlon();
  _o.senalt = this.senalt();
  _o.senx = this.senx();
  _o.seny = this.seny();
  _o.senz = this.senz();
  _o.senQuat = this.bb!.createScalarList<string>(this.senQuat.bind(this), this.senQuatLength());
  _o.senQuatDot = this.bb!.createScalarList<string>(this.senQuatDot.bind(this), this.senQuatDotLength());
  _o.imageType = this.imageType();
  _o.expStartTime = this.expStartTime();
  _o.expEndTime = this.expEndTime();
  _o.imageSourceInfo = this.imageSourceInfo();
  _o.topLeftStartAz = this.topLeftStartAz();
  _o.topLeftStartEl = this.topLeftStartEl();
  _o.topLeftStopAz = this.topLeftStopAz();
  _o.topLeftStopEl = this.topLeftStopEl();
  _o.imageSetId = this.imageSetId();
  _o.imageSetLength = this.imageSetLength();
  _o.sequenceId = this.sequenceId();
  _o.frameFovwidth = this.frameFovwidth();
  _o.frameFovheight = this.frameFovheight();
  _o.pixelFovwidth = this.pixelFovwidth();
  _o.pixelFovheight = this.pixelFovheight();
  _o.frameWidthPixels = this.frameWidthPixels();
  _o.frameHeightPixels = this.frameHeightPixels();
  _o.pixelBitDepth = this.pixelBitDepth();
  _o.annotationKey = this.annotationKey();
  _o.calibrationKey = this.calibrationKey();
  _o.filename = this.filename();
  _o.filesize = this.filesize();
  _o.checksumValue = this.checksumValue();
  _o.transactionId = this.transactionId();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength());
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.sourceDl = this.sourceDl();
  _o.description = this.description();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.eoObservations = this.bb!.createScalarList<string>(this.eoObservations.bind(this), this.eoObservationsLength());
}
}

export class SkyImagery_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public origObjectId: string|Uint8Array|null = null,
  public idAttitudeSet: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origSensorId: string|Uint8Array|null = null,
  public senlat: number = 0.0,
  public senlon: number = 0.0,
  public senalt: number = 0.0,
  public senx: number = 0.0,
  public seny: number = 0.0,
  public senz: number = 0.0,
  public senQuat: (string)[] = [],
  public senQuatDot: (string)[] = [],
  public imageType: string|Uint8Array|null = null,
  public expStartTime: string|Uint8Array|null = null,
  public expEndTime: string|Uint8Array|null = null,
  public imageSourceInfo: string|Uint8Array|null = null,
  public topLeftStartAz: number = 0.0,
  public topLeftStartEl: number = 0.0,
  public topLeftStopAz: number = 0.0,
  public topLeftStopEl: number = 0.0,
  public imageSetId: string|Uint8Array|null = null,
  public imageSetLength: number = 0,
  public sequenceId: number = 0,
  public frameFovwidth: number = 0.0,
  public frameFovheight: number = 0.0,
  public pixelFovwidth: number = 0.0,
  public pixelFovheight: number = 0.0,
  public frameWidthPixels: number = 0,
  public frameHeightPixels: number = 0,
  public pixelBitDepth: number = 0,
  public annotationKey: string|Uint8Array|null = null,
  public calibrationKey: string|Uint8Array|null = null,
  public filename: string|Uint8Array|null = null,
  public filesize: bigint = BigInt('0'),
  public checksumValue: string|Uint8Array|null = null,
  public transactionId: string|Uint8Array|null = null,
  public tags: (string)[] = [],
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public dataMode: SkyImagery_Ingest_dataMode_Enum = SkyImagery_Ingest_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public eoObservations: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const idAttitudeSet = (this.idAttitudeSet !== null ? builder.createString(this.idAttitudeSet!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const senQuat = SkyImagery_Ingest.createSenQuatVector(builder, builder.createObjectOffsetList(this.senQuat));
  const senQuatDot = SkyImagery_Ingest.createSenQuatDotVector(builder, builder.createObjectOffsetList(this.senQuatDot));
  const imageType = (this.imageType !== null ? builder.createString(this.imageType!) : 0);
  const expStartTime = (this.expStartTime !== null ? builder.createString(this.expStartTime!) : 0);
  const expEndTime = (this.expEndTime !== null ? builder.createString(this.expEndTime!) : 0);
  const imageSourceInfo = (this.imageSourceInfo !== null ? builder.createString(this.imageSourceInfo!) : 0);
  const imageSetId = (this.imageSetId !== null ? builder.createString(this.imageSetId!) : 0);
  const annotationKey = (this.annotationKey !== null ? builder.createString(this.annotationKey!) : 0);
  const calibrationKey = (this.calibrationKey !== null ? builder.createString(this.calibrationKey!) : 0);
  const filename = (this.filename !== null ? builder.createString(this.filename!) : 0);
  const checksumValue = (this.checksumValue !== null ? builder.createString(this.checksumValue!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const tags = SkyImagery_Ingest.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const eoObservations = SkyImagery_Ingest.createEoObservationsVector(builder, builder.createObjectOffsetList(this.eoObservations));

  return SkyImagery_Ingest.createSkyImagery_Ingest(builder,
    id,
    classificationMarking,
    idOnOrbit,
    origObjectId,
    idAttitudeSet,
    idSensor,
    this.satNo,
    origSensorId,
    this.senlat,
    this.senlon,
    this.senalt,
    this.senx,
    this.seny,
    this.senz,
    senQuat,
    senQuatDot,
    imageType,
    expStartTime,
    expEndTime,
    imageSourceInfo,
    this.topLeftStartAz,
    this.topLeftStartEl,
    this.topLeftStopAz,
    this.topLeftStopEl,
    imageSetId,
    this.imageSetLength,
    this.sequenceId,
    this.frameFovwidth,
    this.frameFovheight,
    this.pixelFovwidth,
    this.pixelFovheight,
    this.frameWidthPixels,
    this.frameHeightPixels,
    this.pixelBitDepth,
    annotationKey,
    calibrationKey,
    filename,
    this.filesize,
    checksumValue,
    transactionId,
    tags,
    source,
    origin,
    origNetwork,
    sourceDl,
    description,
    this.dataMode,
    createdAt,
    createdBy,
    eoObservations
  );
}
}
