// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Ephemeris_Abridged_dataMode_Enum } from './ephemeris-abridged-data-mode-enum.js';


/**
 * /// An ephemeris record is a position and velocity vector identifying the location and trajectory of an on-orbit object at a specified time. Ephemeris points, including covariance, are in kilometer and second based units in a user specified reference frame, with ECI J2K being preferred. The EphemerisSet ID (esId) links all points associated with an ephemeris set. The 'EphemerisSet' record contains details of the underlying data and propagation models used in the generation of the ephemeris. Ephemeris points must be retrieved by specifying the parent EphemerisSet ID (esId).
 */
export class Ephemeris_Abridged implements flatbuffers.IUnpackableObject<Ephemeris_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Ephemeris_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEphemeris_Abridged(bb:flatbuffers.ByteBuffer, obj?:Ephemeris_Abridged):Ephemeris_Abridged {
  return (obj || new Ephemeris_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEphemeris_Abridged(bb:flatbuffers.ByteBuffer, obj?:Ephemeris_Abridged):Ephemeris_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Ephemeris_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EPHE');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: EPHEMERIS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet.
 * Example: /// Example: ES-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
esId():string|null
esId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
esId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time associated with the Ephemeris Point, in ISO8601 UTC format.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
ts():string|null
ts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Cartesian X position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
xpos():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
ypos():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z position of target, in km, in the specified EphemerisSet referenceFrame. If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
zpos():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian X velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
xvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
yvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
zvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
xaccel():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
yaccel():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
zaccel():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix, in kilometer and second based units, in the specified Ephemeris Set covReferenceFrame.  If the covReferenceFrame from the EphemerisSet table is null it is assumed to be J2000.
 * The array values represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
 * x&nbsp;&nbsp;&nbsp;&nbsp;1
 * y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
 * z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
 * x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
 * y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
 * z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
 * The array containing the covariance matrix elements will be of length 6 for position only covariance, or length 21 for position-velocity covariance.  The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
cov(index: number):string
cov(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
cov(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

covLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Ephemeris_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Ephemeris_Abridged_dataMode_Enum.REAL;
}

/**
 * Unique identifier of the on-orbit satellite object.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEphemeris_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addEsId(builder:flatbuffers.Builder, esIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, esIdOffset, 0);
}

static addTs(builder:flatbuffers.Builder, tsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, tsOffset, 0);
}

static addXpos(builder:flatbuffers.Builder, xpos:number) {
  builder.addFieldFloat64(4, xpos, 0.0);
}

static addYpos(builder:flatbuffers.Builder, ypos:number) {
  builder.addFieldFloat64(5, ypos, 0.0);
}

static addZpos(builder:flatbuffers.Builder, zpos:number) {
  builder.addFieldFloat64(6, zpos, 0.0);
}

static addXvel(builder:flatbuffers.Builder, xvel:number) {
  builder.addFieldFloat64(7, xvel, 0.0);
}

static addYvel(builder:flatbuffers.Builder, yvel:number) {
  builder.addFieldFloat64(8, yvel, 0.0);
}

static addZvel(builder:flatbuffers.Builder, zvel:number) {
  builder.addFieldFloat64(9, zvel, 0.0);
}

static addXaccel(builder:flatbuffers.Builder, xaccel:number) {
  builder.addFieldFloat64(10, xaccel, 0.0);
}

static addYaccel(builder:flatbuffers.Builder, yaccel:number) {
  builder.addFieldFloat64(11, yaccel, 0.0);
}

static addZaccel(builder:flatbuffers.Builder, zaccel:number) {
  builder.addFieldFloat64(12, zaccel, 0.0);
}

static addCov(builder:flatbuffers.Builder, covOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, covOffset, 0);
}

static createCovVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCovVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, sourceOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Ephemeris_Abridged_dataMode_Enum) {
  builder.addFieldInt8(17, dataMode, Ephemeris_Abridged_dataMode_Enum.REAL);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, idOnOrbitOffset, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, origObjectIdOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, originOffset, 0);
}

static endEphemeris_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEphemeris_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EPHE');
}

static finishSizePrefixedEphemeris_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EPHE', true);
}

static createEphemeris_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, esIdOffset:flatbuffers.Offset, tsOffset:flatbuffers.Offset, xpos:number, ypos:number, zpos:number, xvel:number, yvel:number, zvel:number, xaccel:number, yaccel:number, zaccel:number, covOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, dataMode:Ephemeris_Abridged_dataMode_Enum, idOnOrbitOffset:flatbuffers.Offset, origObjectIdOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset):flatbuffers.Offset {
  Ephemeris_Abridged.startEphemeris_Abridged(builder);
  Ephemeris_Abridged.addId(builder, idOffset);
  Ephemeris_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  Ephemeris_Abridged.addEsId(builder, esIdOffset);
  Ephemeris_Abridged.addTs(builder, tsOffset);
  Ephemeris_Abridged.addXpos(builder, xpos);
  Ephemeris_Abridged.addYpos(builder, ypos);
  Ephemeris_Abridged.addZpos(builder, zpos);
  Ephemeris_Abridged.addXvel(builder, xvel);
  Ephemeris_Abridged.addYvel(builder, yvel);
  Ephemeris_Abridged.addZvel(builder, zvel);
  Ephemeris_Abridged.addXaccel(builder, xaccel);
  Ephemeris_Abridged.addYaccel(builder, yaccel);
  Ephemeris_Abridged.addZaccel(builder, zaccel);
  Ephemeris_Abridged.addCov(builder, covOffset);
  Ephemeris_Abridged.addCreatedAt(builder, createdAtOffset);
  Ephemeris_Abridged.addCreatedBy(builder, createdByOffset);
  Ephemeris_Abridged.addSource(builder, sourceOffset);
  Ephemeris_Abridged.addDataMode(builder, dataMode);
  Ephemeris_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
  Ephemeris_Abridged.addOrigObjectId(builder, origObjectIdOffset);
  Ephemeris_Abridged.addOrigin(builder, originOffset);
  return Ephemeris_Abridged.endEphemeris_Abridged(builder);
}

unpack(): Ephemeris_AbridgedT {
  return new Ephemeris_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.esId(),
    this.ts(),
    this.xpos(),
    this.ypos(),
    this.zpos(),
    this.xvel(),
    this.yvel(),
    this.zvel(),
    this.xaccel(),
    this.yaccel(),
    this.zaccel(),
    this.bb!.createScalarList<string>(this.cov.bind(this), this.cov_Length()),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.dataMode(),
    this.idOnOrbit(),
    this.origObjectId(),
    this.origin()
  );
}


unpackTo(_o: Ephemeris_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.esId = this.esId();
  _o.ts = this.ts();
  _o.xpos = this.xpos();
  _o.ypos = this.ypos();
  _o.zpos = this.zpos();
  _o.xvel = this.xvel();
  _o.yvel = this.yvel();
  _o.zvel = this.zvel();
  _o.xaccel = this.xaccel();
  _o.yaccel = this.yaccel();
  _o.zaccel = this.zaccel();
  _o.cov = this.bb!.createScalarList<string>(this.cov.bind(this), this.cov_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.dataMode = this.dataMode();
  _o.idOnOrbit = this.idOnOrbit();
  _o.origObjectId = this.origObjectId();
  _o.origin = this.origin();
}
}

export class Ephemeris_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public esId: string|Uint8Array|null = null,
  public ts: string|Uint8Array|null = null,
  public xpos: number = 0.0,
  public ypos: number = 0.0,
  public zpos: number = 0.0,
  public xvel: number = 0.0,
  public yvel: number = 0.0,
  public zvel: number = 0.0,
  public xaccel: number = 0.0,
  public yaccel: number = 0.0,
  public zaccel: number = 0.0,
  public cov: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public dataMode: Ephemeris_Abridged_dataMode_Enum = Ephemeris_Abridged_dataMode_Enum.REAL,
  public idOnOrbit: string|Uint8Array|null = null,
  public origObjectId: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const esId = (this.esId !== null ? builder.createString(this.esId!) : 0);
  const ts = (this.ts !== null ? builder.createString(this.ts!) : 0);
  const cov = Ephemeris_Abridged.createCovVector(builder, builder.createObjectOffsetList(this.cov));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);

  return Ephemeris_Abridged.createEphemeris_Abridged(builder,
    id,
    classificationMarking,
    esId,
    ts,
    this.xpos,
    this.ypos,
    this.zpos,
    this.xvel,
    this.yvel,
    this.zvel,
    this.xaccel,
    this.yaccel,
    this.zaccel,
    cov,
    createdAt,
    createdBy,
    source,
    this.dataMode,
    idOnOrbit,
    origObjectId,
    origin
  );
}
}
