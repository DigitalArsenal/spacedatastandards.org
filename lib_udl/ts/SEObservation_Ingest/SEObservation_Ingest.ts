// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// A single space environment observation.
 */
export class SEObservation_Ingest implements flatbuffers.IUnpackableObject<SEObservation_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SEObservation_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSEObservation_Ingest(bb:flatbuffers.ByteBuffer, obj?:SEObservation_Ingest):SEObservation_Ingest {
  return (obj || new SEObservation_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSEObservation_Ingest(bb:flatbuffers.ByteBuffer, obj?:SEObservation_Ingest):SEObservation_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SEObservation_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SEOB');
}

/**
 * The type of observation associated with this record.
 * Example: /// Example: INTEGRAL FLUX
 * Constraints: Minimum length = 1, Maximum length = 24
 */
obType():string|null
obType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.
 * Example: /// Example: particles/cm^2/s/sr
 * Constraints: Minimum length = 1, Maximum length = 32
 */
obUoM():string|null
obUoM(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obUoM(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
 * Example: /// Example: 0.487687826
 * Constraints: No constraints specified.
 */
obValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
 * Example: /// Example: C1.3
 * Constraints: Minimum length = 0, Maximum length = 64
 */
obString():string|null
obString(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obString(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
 * Example: /// Example: [1.7, 35.6, 21.2, 19.01]
 * Constraints: No constraints specified.
 */
obArray(index: number):string
obArray(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
obArray(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

obArrayLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
obBool():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.
 * Example: /// Example: GOOD
 * Constraints: Minimum length = 0, Maximum length = 16
 */
obQuality():string|null
obQuality(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obQuality(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Descriptive or additional information associated with this individual observation.
 * Example: /// Example: Observation Description Text
 * Constraints: Minimum length = 0, Maximum length = 512
 */
obDescription():string|null
obDescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obDescription(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSEObservation_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addObType(builder:flatbuffers.Builder, obTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, obTypeOffset, 0);
}

static addObUoM(builder:flatbuffers.Builder, obUoMOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, obUoMOffset, 0);
}

static addObValue(builder:flatbuffers.Builder, obValue:number) {
  builder.addFieldFloat64(2, obValue, 0.0);
}

static addObString(builder:flatbuffers.Builder, obStringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, obStringOffset, 0);
}

static addObArray(builder:flatbuffers.Builder, obArrayOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, obArrayOffset, 0);
}

static createObArrayVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startObArrayVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addObBool(builder:flatbuffers.Builder, obBool:boolean) {
  builder.addFieldInt8(5, +obBool, +false);
}

static addObQuality(builder:flatbuffers.Builder, obQualityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, obQualityOffset, 0);
}

static addObDescription(builder:flatbuffers.Builder, obDescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, obDescriptionOffset, 0);
}

static endSEObservation_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSEObservation_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SEOB');
}

static finishSizePrefixedSEObservation_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SEOB', true);
}

static createSEObservation_Ingest(builder:flatbuffers.Builder, obTypeOffset:flatbuffers.Offset, obUoMOffset:flatbuffers.Offset, obValue:number, obStringOffset:flatbuffers.Offset, obArrayOffset:flatbuffers.Offset, obBool:boolean, obQualityOffset:flatbuffers.Offset, obDescriptionOffset:flatbuffers.Offset):flatbuffers.Offset {
  SEObservation_Ingest.startSEObservation_Ingest(builder);
  SEObservation_Ingest.addObType(builder, obTypeOffset);
  SEObservation_Ingest.addObUoM(builder, obUoMOffset);
  SEObservation_Ingest.addObValue(builder, obValue);
  SEObservation_Ingest.addObString(builder, obStringOffset);
  SEObservation_Ingest.addObArray(builder, obArrayOffset);
  SEObservation_Ingest.addObBool(builder, obBool);
  SEObservation_Ingest.addObQuality(builder, obQualityOffset);
  SEObservation_Ingest.addObDescription(builder, obDescriptionOffset);
  return SEObservation_Ingest.endSEObservation_Ingest(builder);
}

unpack(): SEObservation_IngestT {
  return new SEObservation_IngestT(
    this.obType(),
    this.obUoM(),
    this.obValue(),
    this.obString(),
    this.bb!.createScalarList<string>(this.obArray.bind(this), this.obArrayLength()),
    this.obBool(),
    this.obQuality(),
    this.obDescription()
  );
}


unpackTo(_o: SEObservation_IngestT): void {
  _o.obType = this.obType();
  _o.obUoM = this.obUoM();
  _o.obValue = this.obValue();
  _o.obString = this.obString();
  _o.obArray = this.bb!.createScalarList<string>(this.obArray.bind(this), this.obArrayLength());
  _o.obBool = this.obBool();
  _o.obQuality = this.obQuality();
  _o.obDescription = this.obDescription();
}
}

export class SEObservation_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public obType: string|Uint8Array|null = null,
  public obUoM: string|Uint8Array|null = null,
  public obValue: number = 0.0,
  public obString: string|Uint8Array|null = null,
  public obArray: (string)[] = [],
  public obBool: boolean = false,
  public obQuality: string|Uint8Array|null = null,
  public obDescription: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const obType = (this.obType !== null ? builder.createString(this.obType!) : 0);
  const obUoM = (this.obUoM !== null ? builder.createString(this.obUoM!) : 0);
  const obString = (this.obString !== null ? builder.createString(this.obString!) : 0);
  const obArray = SEObservation_Ingest.createObArrayVector(builder, builder.createObjectOffsetList(this.obArray));
  const obQuality = (this.obQuality !== null ? builder.createString(this.obQuality!) : 0);
  const obDescription = (this.obDescription !== null ? builder.createString(this.obDescription!) : 0);

  return SEObservation_Ingest.createSEObservation_Ingest(builder,
    obType,
    obUoM,
    this.obValue,
    obString,
    obArray,
    this.obBool,
    obQuality,
    obDescription
  );
}
}
