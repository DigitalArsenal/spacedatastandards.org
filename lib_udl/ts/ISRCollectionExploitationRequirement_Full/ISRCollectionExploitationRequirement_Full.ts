// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// What it is that is trying to be exploited.
 */
export class ISRCollectionExploitationRequirement_Full implements flatbuffers.IUnpackableObject<ISRCollectionExploitationRequirement_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ISRCollectionExploitationRequirement_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsISRCollectionExploitationRequirement_Full(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionExploitationRequirement_Full):ISRCollectionExploitationRequirement_Full {
  return (obj || new ISRCollectionExploitationRequirement_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsISRCollectionExploitationRequirement_Full(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionExploitationRequirement_Full):ISRCollectionExploitationRequirement_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ISRCollectionExploitationRequirement_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ISRC');
}

/**
 * Exploitation requirement id.
 * Example: /// Example: ISRCOLLECTIONEXPLOITATIONREQUIREMENT
 * Constraints: Minimum length = 0, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Amplifying data for the exploitation requirement.
 * Example: /// Example: AMPLIFICATION
 * Constraints: Minimum length = 0, Maximum length = 256
 */
amplification():string|null
amplification(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
amplification(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reporting criteria of the collection requirement.
 * Example: /// Example: CRITERIA
 * Constraints: Minimum length = 0, Maximum length = 32
 */
reportingCriteria():string|null
reportingCriteria(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reportingCriteria(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * List of e-mails to disseminate collection verification information.
 * Example: /// Example: EMAILS
 * Constraints: Minimum length = 0, Maximum length = 32
 */
dissemination():string|null
dissemination(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dissemination(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Essential Elements of Information.
 * Example: /// Example: ESSENTIAL_ELEMENTS
 * Constraints: Minimum length = 0, Maximum length = 32
 */
eei():string|null
eei(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eei(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
poc():string|null
poc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
poc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startISRCollectionExploitationRequirement_Full(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addAmplification(builder:flatbuffers.Builder, amplificationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, amplificationOffset, 0);
}

static addReportingCriteria(builder:flatbuffers.Builder, reportingCriteriaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, reportingCriteriaOffset, 0);
}

static addDissemination(builder:flatbuffers.Builder, disseminationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, disseminationOffset, 0);
}

static addEei(builder:flatbuffers.Builder, eeiOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, eeiOffset, 0);
}

static addPoc(builder:flatbuffers.Builder, pocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, pocOffset, 0);
}

static endISRCollectionExploitationRequirement_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishISRCollectionExploitationRequirement_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC');
}

static finishSizePrefixedISRCollectionExploitationRequirement_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC', true);
}

static createISRCollectionExploitationRequirement_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, amplificationOffset:flatbuffers.Offset, reportingCriteriaOffset:flatbuffers.Offset, disseminationOffset:flatbuffers.Offset, eeiOffset:flatbuffers.Offset, pocOffset:flatbuffers.Offset):flatbuffers.Offset {
  ISRCollectionExploitationRequirement_Full.startISRCollectionExploitationRequirement_Full(builder);
  ISRCollectionExploitationRequirement_Full.addId(builder, idOffset);
  ISRCollectionExploitationRequirement_Full.addAmplification(builder, amplificationOffset);
  ISRCollectionExploitationRequirement_Full.addReportingCriteria(builder, reportingCriteriaOffset);
  ISRCollectionExploitationRequirement_Full.addDissemination(builder, disseminationOffset);
  ISRCollectionExploitationRequirement_Full.addEei(builder, eeiOffset);
  ISRCollectionExploitationRequirement_Full.addPoc(builder, pocOffset);
  return ISRCollectionExploitationRequirement_Full.endISRCollectionExploitationRequirement_Full(builder);
}

unpack(): ISRCollectionExploitationRequirement_FullT {
  return new ISRCollectionExploitationRequirement_FullT(
    this.id(),
    this.amplification(),
    this.reportingCriteria(),
    this.dissemination(),
    this.eei(),
    this.poc()
  );
}


unpackTo(_o: ISRCollectionExploitationRequirement_FullT): void {
  _o.id = this.id();
  _o.amplification = this.amplification();
  _o.reportingCriteria = this.reportingCriteria();
  _o.dissemination = this.dissemination();
  _o.eei = this.eei();
  _o.poc = this.poc();
}
}

export class ISRCollectionExploitationRequirement_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public amplification: string|Uint8Array|null = null,
  public reportingCriteria: string|Uint8Array|null = null,
  public dissemination: string|Uint8Array|null = null,
  public eei: string|Uint8Array|null = null,
  public poc: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const amplification = (this.amplification !== null ? builder.createString(this.amplification!) : 0);
  const reportingCriteria = (this.reportingCriteria !== null ? builder.createString(this.reportingCriteria!) : 0);
  const dissemination = (this.dissemination !== null ? builder.createString(this.dissemination!) : 0);
  const eei = (this.eei !== null ? builder.createString(this.eei!) : 0);
  const poc = (this.poc !== null ? builder.createString(this.poc!) : 0);

  return ISRCollectionExploitationRequirement_Full.createISRCollectionExploitationRequirement_Full(builder,
    id,
    amplification,
    reportingCriteria,
    dissemination,
    eei,
    poc
  );
}
}
