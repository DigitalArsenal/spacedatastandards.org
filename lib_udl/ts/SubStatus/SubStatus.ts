// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SubStatus_dataMode_Enum } from './SubStatus_dataMode_Enum.js';
import { SubStatus_status_Enum } from './SubStatus_status_Enum.js';
import { SubStatus_type_Enum } from './SubStatus_type_Enum.js';


/**
 * /// Additional sub-system or capability status for the parent entity.
 */
export class SubStatus implements flatbuffers.IUnpackableObject<SubStatusT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SubStatus {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSubStatus(bb:flatbuffers.ByteBuffer, obj?:SubStatus):SubStatus {
  return (obj || new SubStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSubStatus(bb:flatbuffers.ByteBuffer, obj?:SubStatus):SubStatus {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SubStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SUBS');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SUBSTATUS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.
 * Example: /// Example: mdCap
 * Constraints: Minimum length = 1, Maximum length = 16
 */
type():SubStatus_type_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SubStatus_type_Enum.MWCAP;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Id of the parent status.
 * Example: /// Example: REF-STATUS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
statusId():string|null
statusId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
statusId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.
 * Example: /// Example: FMC
 * Constraints: Minimum length = 1, Maximum length = 16
 */
status():SubStatus_status_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SubStatus_status_Enum.FMC;
}

/**
 * Descriptions and/or comments associated with the sub-status.
 * Example: /// Example: Sample Notes
 * Constraints: Minimum length = 1, Maximum length = 4096
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: TST1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SubStatus_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SubStatus_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSubStatus(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:SubStatus_type_Enum) {
  builder.addFieldInt8(1, type, SubStatus_type_Enum.MWCAP);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addStatusId(builder:flatbuffers.Builder, statusIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, statusIdOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, status:SubStatus_status_Enum) {
  builder.addFieldInt8(4, status, SubStatus_status_Enum.FMC);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, notesOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SubStatus_dataMode_Enum) {
  builder.addFieldInt8(9, dataMode, SubStatus_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, updatedByOffset, 0);
}

static endSubStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSubStatusBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SUBS');
}

static finishSizePrefixedSubStatusBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SUBS', true);
}

static createSubStatus(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, type:SubStatus_type_Enum, classificationMarkingOffset:flatbuffers.Offset, statusIdOffset:flatbuffers.Offset, status:SubStatus_status_Enum, notesOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:SubStatus_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset):flatbuffers.Offset {
  SubStatus.startSubStatus(builder);
  SubStatus.addId(builder, idOffset);
  SubStatus.addType(builder, type);
  SubStatus.addClassificationMarking(builder, classificationMarkingOffset);
  SubStatus.addStatusId(builder, statusIdOffset);
  SubStatus.addStatus(builder, status);
  SubStatus.addNotes(builder, notesOffset);
  SubStatus.addSource(builder, sourceOffset);
  SubStatus.addOrigin(builder, originOffset);
  SubStatus.addOrigNetwork(builder, origNetworkOffset);
  SubStatus.addDataMode(builder, dataMode);
  SubStatus.addCreatedAt(builder, createdAtOffset);
  SubStatus.addCreatedBy(builder, createdByOffset);
  SubStatus.addUpdatedAt(builder, updatedAtOffset);
  SubStatus.addUpdatedBy(builder, updatedByOffset);
  return SubStatus.endSubStatus(builder);
}

unpack(): SubStatusT {
  return new SubStatusT(
    this.id(),
    this.type(),
    this.classificationMarking(),
    this.statusId(),
    this.status(),
    this.notes(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy()
  );
}


unpackTo(_o: SubStatusT): void {
  _o.id = this.id();
  _o.type = this.type();
  _o.classificationMarking = this.classificationMarking();
  _o.statusId = this.statusId();
  _o.status = this.status();
  _o.notes = this.notes();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
}
}

export class SubStatusT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public type: SubStatus_type_Enum = SubStatus_type_Enum.MWCAP,
  public classificationMarking: string|Uint8Array|null = null,
  public statusId: string|Uint8Array|null = null,
  public status: SubStatus_status_Enum = SubStatus_status_Enum.FMC,
  public notes: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: SubStatus_dataMode_Enum = SubStatus_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const statusId = (this.statusId !== null ? builder.createString(this.statusId!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);

  return SubStatus.createSubStatus(builder,
    id,
    this.type,
    classificationMarking,
    statusId,
    this.status,
    notes,
    source,
    origin,
    origNetwork,
    this.dataMode,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy
  );
}
}
