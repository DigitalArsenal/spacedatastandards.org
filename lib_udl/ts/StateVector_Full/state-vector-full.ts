// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { StateVector_Full_covReferenceFrame_Enum } from './state-vector-full-cov-reference-frame-enum.js';
import { StateVector_Full_dataMode_Enum } from './state-vector-full-data-mode-enum.js';
import { StateVector_Full_referenceFrame_Enum } from './state-vector-full-reference-frame-enum.js';
import { StateVector_Full_sourcedDataTypes_Enum } from './state-vector-full-sourced-data-types-enum.js';


/**
 * /// This service provides operations for querying and manipulation of state vectors for OnOrbit objects. State vectors are cartesian vectors of position (r) and velocity (v) that, together with their time (epoch) (t), uniquely determine the trajectory of the orbiting body in space. J2000 is the preferred coordinate frame for all state vector positions/velocities in UDL, but in some cases data may be in another frame depending on the provider and/or datatype. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
 */
export class StateVector_Full implements flatbuffers.IUnpackableObject<StateVector_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StateVector_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStateVector_Full(bb:flatbuffers.ByteBuffer, obj?:StateVector_Full):StateVector_Full {
  return (obj || new StateVector_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStateVector_Full(bb:flatbuffers.ByteBuffer, obj?:StateVector_Full):StateVector_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StateVector_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('STAT');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: STATEVECTOR-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idStateVector():string|null
idStateVector(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idStateVector(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
epoch():string|null
epoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
epoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).
 * Example: /// Example: CONJUNCTION
 * Constraints: Minimum length = 0, Maximum length = 32
 */
pedigree():string|null
pedigree(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pedigree(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/Catalog number of the target OnOrbit object.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.
 * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOrbitDetermination():string|null
idOrbitDetermination(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOrbitDetermination(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
uct():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: -1118.577381
 * Constraints: No constraints specified.
 */
xpos():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 3026.231084
 * Constraints: No constraints specified.
 */
ypos():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 6167.831808
 * Constraints: No constraints specified.
 */
zpos():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: -4.25242784
 * Constraints: No constraints specified.
 */
xvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 5.291107434
 * Constraints: No constraints specified.
 */
yvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: -3.356493869
 * Constraints: No constraints specified.
 */
zvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.
 * Example: /// Example: J2000
 * Constraints: Minimum length = 0, Maximum length = 24
 */
referenceFrame():StateVector_Full_referenceFrame_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : StateVector_Full_referenceFrame_Enum.J2000;
}

/**
 * Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.
 * The array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
 * x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
 * y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
 * z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
 * x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
 * y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
 * z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
 * The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
 * If additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
 * DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
 * SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
 * THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
 * Example: /// Example: [1.1, 2.2]
 * Constraints: No constraints specified.
 */
cov(index: number):string
cov(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
cov(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

covLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.
 * Example: /// Example: J2000
 * Constraints: Minimum length = 0, Maximum length = 24
 */
covReferenceFrame():StateVector_Full_covReferenceFrame_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : StateVector_Full_covReferenceFrame_Enum.J2000;
}

/**
 * The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).
 * Example: /// Example: CALCULATED
 * Constraints: Minimum length = 0, Maximum length = 24
 */
covMethod():string|null
covMethod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
covMethod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:
 * 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
 * 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
 * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
 * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
 * 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
 * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
 * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
 * The ordering of values is as follows:
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
 * Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
 * Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
 * L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
 * N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
 * Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
 * Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
 * B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
 * BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
 * AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
 * T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
 * C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
 * C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
 * :
 * :
 * where C1, C2, etc, are the "consider parameters" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.
 * Example: /// Example: [1.1, 2.2]
 * Constraints: No constraints specified.
 */
eqCov(index: number):string
eqCov(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
eqCov(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

eqCovLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
 * Example: /// Example: -1145.688502
 * Constraints: No constraints specified.
 */
xposAlt1():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
 * Example: /// Example: 3020.729572
 * Constraints: No constraints specified.
 */
yposAlt1():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
 * Example: /// Example: 6165.55187
 * Constraints: No constraints specified.
 */
zposAlt1():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
 * Example: /// Example: -4.270832252
 * Constraints: No constraints specified.
 */
xvelAlt1():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
 * Example: /// Example: 5.27074276
 * Constraints: No constraints specified.
 */
yvelAlt1():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
 * Example: /// Example: -3.365155181
 * Constraints: No constraints specified.
 */
zvelAlt1():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The reference frame of the alternate1 (Alt1) cartesian orbital state.
 * Example: /// Example: TEME
 * Constraints: Minimum length = 0, Maximum length = 24
 */
alt1ReferenceFrame():string|null
alt1ReferenceFrame(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
alt1ReferenceFrame(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
 * Example: /// Example: -1456.915926
 * Constraints: No constraints specified.
 */
xposAlt2():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
 * Example: /// Example: -2883.540406
 * Constraints: No constraints specified.
 */
yposAlt2():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
 * Example: /// Example: 6165.55187
 * Constraints: No constraints specified.
 */
zposAlt2():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
 * Example: /// Example: -1.219814294
 * Constraints: No constraints specified.
 */
xvelAlt2():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
 * Example: /// Example: -6.602080212
 * Constraints: No constraints specified.
 */
yvelAlt2():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
 * Example: /// Example: -3.365155181
 * Constraints: No constraints specified.
 */
zvelAlt2():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The reference frame of the alternate2 (Alt2) cartesian orbital state.
 * Example: /// Example: EFG/TDR
 * Constraints: Minimum length = 0, Maximum length = 24
 */
alt2ReferenceFrame():string|null
alt2ReferenceFrame(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
alt2ReferenceFrame(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * One sigma position uncertainty, in kilometers.
 * Example: /// Example: 0.333399744452
 * Constraints: No constraints specified.
 */
posUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma velocity uncertainty, in kilometers/second.
 * Example: /// Example: 4e-06
 * Constraints: No constraints specified.
 */
velUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The mass of the object, in kilograms.
 * Example: /// Example: 164.5
 * Constraints: No constraints specified.
 */
mass():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The actual area of the object at it's largest cross-section, expressed in meters^2.
 * Example: /// Example: 5.065
 * Constraints: No constraints specified.
 */
area():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Area-to-mass ratio coefficient for solar radiation pressure.
 * Example: /// Example: 0.0244394
 * Constraints: No constraints specified.
 */
solarRadPressCoeff():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
 * Example: /// Example: 0.0224391269775
 * Constraints: No constraints specified.
 */
dragCoeff():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The effective area of the object exposed to atmospheric drag, expressed in meters^2.
 * Example: /// Example: 4.739
 * Constraints: No constraints specified.
 */
dragArea():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Epoch revolution number.
 * Example: /// Example: 7205
 * Constraints: No constraints specified.
 */
revNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.
 * Example: /// Example: EGM-96
 * Constraints: Minimum length = 0, Maximum length = 32
 */
geopotentialModel():string|null
geopotentialModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geopotentialModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).
 * Example: /// Example: JAC70
 * Constraints: Minimum length = 0, Maximum length = 32
 */
dragModel():string|null
dragModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dragModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating use of lunar/solar perturbations for this vector.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
lunarSolar():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Boolean indicating use of solar radiation pressure perturbations for this vector.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
solarRadPress():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The effective area of the object exposed to solar radiation pressure, expressed in meters^2.
 * Example: /// Example: 4.311
 * Constraints: No constraints specified.
 */
srpArea():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Boolean indicating use of solid earth tide perturbations for this vector.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
solidEarthTides():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Boolean indicating use of in-track thrust perturbations for this vector.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
inTrackThrust():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * First derivative of drag/ballistic coefficient (m2/kg-s).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
bDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Model parameter value for energy dissipation rate (EDR) (w/kg).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
edr():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Model parameter value for thrust acceleration (m/s2).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
thrustAccel():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Model parameter value for center of mass offset (m).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
cmOffset():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.
 * Example: /// Example: 2022-11-09T11:20:21.247192Z
 * Constraints: No constraints specified.
 */
lastObStart():string|null
lastObStart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastObStart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.
 * Example: /// Example: 2022-11-09T11:20:21.247192Z
 * Constraints: No constraints specified.
 */
lastObEnd():string|null
lastObEnd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastObEnd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of observations available for the OD of the object.
 * Example: /// Example: 376
 * Constraints: No constraints specified.
 */
obsAvailable():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The number of observations accepted for the OD of the object.
 * Example: /// Example: 374
 * Constraints: No constraints specified.
 */
obsUsed():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The number of sensor tracks available for the OD of the object.
 * Example: /// Example: 163
 * Constraints: No constraints specified.
 */
tracksAvail():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The number of sensor tracks accepted for the OD of the object.
 * Example: /// Example: 163
 * Constraints: No constraints specified.
 */
tracksUsed():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The recommended OD time span calculated for the object, expressed in days.
 * Example: /// Example: 3.5
 * Constraints: No constraints specified.
 */
recOdspan():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The actual time span used for the OD of the object, expressed in days.
 * Example: /// Example: 3.5
 * Constraints: No constraints specified.
 */
actualOdspan():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The percentage of residuals accepted in the OD of the object.
 * Example: /// Example: 99.5
 * Constraints: No constraints specified.
 */
residualsAcc():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * F10 (10.7 cm) solar flux value.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
solarFluxF10():number {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * F10 (10.7 cm) solar flux 81-day average value.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
solarFluxF10Avg():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average solar flux geomagnetic index.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
solarFluxApavg():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
taiUtc():number {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Universal Time-1 (UT1) minus UTC offset, in seconds.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
ut1Utc():number {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
ut1Rate():number {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Polar Wander Motion X (arc seconds).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
polarMotionX():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Polar Wander Motion Y (arc seconds).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
polarMotionY():number {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
 * Example: /// Example: 4
 * Constraints: No constraints specified.
 */
iau1980Terms():number {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
leapSecondTime():string|null
leapSecondTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
leapSecondTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Integrator Mode.
 * Example: /// Example: integratorMode
 * Constraints: Minimum length = 0, Maximum length = 32
 */
integratorMode():string|null
integratorMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
integratorMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
 * Example: /// Example: ANALYTIC
 * Constraints: Minimum length = 0, Maximum length = 16
 */
partials():string|null
partials(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
partials(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Integrator step mode (AUTO, TIME, or S).
 * Example: /// Example: AUTO
 * Constraints: Minimum length = 0, Maximum length = 16
 */
stepMode():string|null
stepMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stepMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating use of fixed step size for this vector.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
fixedStep():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Initial step size selection (AUTO or MANUAL).
 * Example: /// Example: AUTO
 * Constraints: Minimum length = 0, Maximum length = 16
 */
stepSizeSelection():string|null
stepSizeSelection(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stepSizeSelection(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Initial integration step size (seconds).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
stepSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Integrator error control.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
errorControl():number {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).
 * Example: /// Example: [1.23, 4.56]
 * Constraints: No constraints specified.
 */
sigmaPosUvw(index: number):string
sigmaPosUvw(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
sigmaPosUvw(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

sigmaPosUvwLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).
 * Example: /// Example: [1.23, 4.56]
 * Constraints: No constraints specified.
 */
sigmaVelUvw(index: number):string
sigmaVelUvw(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
sigmaVelUvw(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

sigmaVelUvwLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.
 * Example: /// Example: 0.991
 * Constraints: No constraints specified.
 */
rms():number {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Start time at which this state vector was the 'current' state vector for its satellite.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
effectiveFrom():string|null
effectiveFrom(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectiveFrom(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * End time at which this state vector was no longer the 'current' state vector for its satellite.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
effectiveUntil():string|null
effectiveUntil(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectiveUntil(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: rawFileURI
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 176);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():StateVector_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 178);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : StateVector_Full_dataMode_Enum.REAL;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['TAG1', 'TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 180);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 180);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional algorithm used to produce this record.
 * Example: /// Example: SAMPLE_ALGORITHM
 * Constraints: Minimum length = 0, Maximum length = 64
 */
algorithm():string|null
algorithm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
algorithm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 182);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional array of UDL data (observation) UUIDs used to build this state vector. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
 * Example: /// Example: ['DATA1', 'DATA2']
 * Constraints: No constraints specified.
 */
sourcedData(index: number):string
sourcedData(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
sourcedData(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 184);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

sourcedDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 184);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional array of UDL observation data types used to build this state vector (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
 * Example: /// Example: ['RADAR']
 * Constraints: No constraints specified.
 */
sourcedDataTypes():StateVector_Full_sourcedDataTypes_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 186);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : StateVector_Full_sourcedDataTypes_Enum.EO;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 188);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 190);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
onOrbit():string|null
onOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
onOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 192);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional source-provided and searchable metadata or descriptor of the data.
 * Example: /// Example: descriptor
 * Constraints: Minimum length = 0, Maximum length = 64
 */
descriptor():string|null
descriptor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
descriptor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 194);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: transactionId
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 196);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 198);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 200);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startStateVector_Full(builder:flatbuffers.Builder) {
  builder.startObject(99);
}

static addIdStateVector(builder:flatbuffers.Builder, idStateVectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idStateVectorOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addEpoch(builder:flatbuffers.Builder, epochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, epochOffset, 0);
}

static addPedigree(builder:flatbuffers.Builder, pedigreeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, pedigreeOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(5, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, origObjectIdOffset, 0);
}

static addIdOrbitDetermination(builder:flatbuffers.Builder, idOrbitDeterminationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, idOrbitDeterminationOffset, 0);
}

static addUct(builder:flatbuffers.Builder, uct:boolean) {
  builder.addFieldInt8(8, +uct, +false);
}

static addXpos(builder:flatbuffers.Builder, xpos:number) {
  builder.addFieldFloat64(9, xpos, 0.0);
}

static addYpos(builder:flatbuffers.Builder, ypos:number) {
  builder.addFieldFloat64(10, ypos, 0.0);
}

static addZpos(builder:flatbuffers.Builder, zpos:number) {
  builder.addFieldFloat64(11, zpos, 0.0);
}

static addXvel(builder:flatbuffers.Builder, xvel:number) {
  builder.addFieldFloat64(12, xvel, 0.0);
}

static addYvel(builder:flatbuffers.Builder, yvel:number) {
  builder.addFieldFloat64(13, yvel, 0.0);
}

static addZvel(builder:flatbuffers.Builder, zvel:number) {
  builder.addFieldFloat64(14, zvel, 0.0);
}

static addReferenceFrame(builder:flatbuffers.Builder, referenceFrame:StateVector_Full_referenceFrame_Enum) {
  builder.addFieldInt8(15, referenceFrame, StateVector_Full_referenceFrame_Enum.J2000);
}

static addCov(builder:flatbuffers.Builder, covOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, covOffset, 0);
}

static createCovVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCovVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCovReferenceFrame(builder:flatbuffers.Builder, covReferenceFrame:StateVector_Full_covReferenceFrame_Enum) {
  builder.addFieldInt8(17, covReferenceFrame, StateVector_Full_covReferenceFrame_Enum.J2000);
}

static addCovMethod(builder:flatbuffers.Builder, covMethodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, covMethodOffset, 0);
}

static addEqCov(builder:flatbuffers.Builder, eqCovOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, eqCovOffset, 0);
}

static createEqCovVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEqCovVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addXposAlt1(builder:flatbuffers.Builder, xposAlt1:number) {
  builder.addFieldFloat64(20, xposAlt1, 0.0);
}

static addYposAlt1(builder:flatbuffers.Builder, yposAlt1:number) {
  builder.addFieldFloat64(21, yposAlt1, 0.0);
}

static addZposAlt1(builder:flatbuffers.Builder, zposAlt1:number) {
  builder.addFieldFloat64(22, zposAlt1, 0.0);
}

static addXvelAlt1(builder:flatbuffers.Builder, xvelAlt1:number) {
  builder.addFieldFloat64(23, xvelAlt1, 0.0);
}

static addYvelAlt1(builder:flatbuffers.Builder, yvelAlt1:number) {
  builder.addFieldFloat64(24, yvelAlt1, 0.0);
}

static addZvelAlt1(builder:flatbuffers.Builder, zvelAlt1:number) {
  builder.addFieldFloat64(25, zvelAlt1, 0.0);
}

static addAlt1ReferenceFrame(builder:flatbuffers.Builder, alt1ReferenceFrameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, alt1ReferenceFrameOffset, 0);
}

static addXposAlt2(builder:flatbuffers.Builder, xposAlt2:number) {
  builder.addFieldFloat64(27, xposAlt2, 0.0);
}

static addYposAlt2(builder:flatbuffers.Builder, yposAlt2:number) {
  builder.addFieldFloat64(28, yposAlt2, 0.0);
}

static addZposAlt2(builder:flatbuffers.Builder, zposAlt2:number) {
  builder.addFieldFloat64(29, zposAlt2, 0.0);
}

static addXvelAlt2(builder:flatbuffers.Builder, xvelAlt2:number) {
  builder.addFieldFloat64(30, xvelAlt2, 0.0);
}

static addYvelAlt2(builder:flatbuffers.Builder, yvelAlt2:number) {
  builder.addFieldFloat64(31, yvelAlt2, 0.0);
}

static addZvelAlt2(builder:flatbuffers.Builder, zvelAlt2:number) {
  builder.addFieldFloat64(32, zvelAlt2, 0.0);
}

static addAlt2ReferenceFrame(builder:flatbuffers.Builder, alt2ReferenceFrameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, alt2ReferenceFrameOffset, 0);
}

static addPosUnc(builder:flatbuffers.Builder, posUnc:number) {
  builder.addFieldFloat64(34, posUnc, 0.0);
}

static addVelUnc(builder:flatbuffers.Builder, velUnc:number) {
  builder.addFieldFloat64(35, velUnc, 0.0);
}

static addMass(builder:flatbuffers.Builder, mass:number) {
  builder.addFieldFloat64(36, mass, 0.0);
}

static addArea(builder:flatbuffers.Builder, area:number) {
  builder.addFieldFloat64(37, area, 0.0);
}

static addSolarRadPressCoeff(builder:flatbuffers.Builder, solarRadPressCoeff:number) {
  builder.addFieldFloat64(38, solarRadPressCoeff, 0.0);
}

static addDragCoeff(builder:flatbuffers.Builder, dragCoeff:number) {
  builder.addFieldFloat64(39, dragCoeff, 0.0);
}

static addDragArea(builder:flatbuffers.Builder, dragArea:number) {
  builder.addFieldFloat64(40, dragArea, 0.0);
}

static addRevNo(builder:flatbuffers.Builder, revNo:number) {
  builder.addFieldInt32(41, revNo, 0);
}

static addGeopotentialModel(builder:flatbuffers.Builder, geopotentialModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, geopotentialModelOffset, 0);
}

static addDragModel(builder:flatbuffers.Builder, dragModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, dragModelOffset, 0);
}

static addLunarSolar(builder:flatbuffers.Builder, lunarSolar:boolean) {
  builder.addFieldInt8(44, +lunarSolar, +false);
}

static addSolarRadPress(builder:flatbuffers.Builder, solarRadPress:boolean) {
  builder.addFieldInt8(45, +solarRadPress, +false);
}

static addSrpArea(builder:flatbuffers.Builder, srpArea:number) {
  builder.addFieldFloat64(46, srpArea, 0.0);
}

static addSolidEarthTides(builder:flatbuffers.Builder, solidEarthTides:boolean) {
  builder.addFieldInt8(47, +solidEarthTides, +false);
}

static addInTrackThrust(builder:flatbuffers.Builder, inTrackThrust:boolean) {
  builder.addFieldInt8(48, +inTrackThrust, +false);
}

static addBDot(builder:flatbuffers.Builder, bDot:number) {
  builder.addFieldFloat64(49, bDot, 0.0);
}

static addEdr(builder:flatbuffers.Builder, edr:number) {
  builder.addFieldFloat64(50, edr, 0.0);
}

static addThrustAccel(builder:flatbuffers.Builder, thrustAccel:number) {
  builder.addFieldFloat64(51, thrustAccel, 0.0);
}

static addCmOffset(builder:flatbuffers.Builder, cmOffset:number) {
  builder.addFieldFloat64(52, cmOffset, 0.0);
}

static addLastObStart(builder:flatbuffers.Builder, lastObStartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, lastObStartOffset, 0);
}

static addLastObEnd(builder:flatbuffers.Builder, lastObEndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, lastObEndOffset, 0);
}

static addObsAvailable(builder:flatbuffers.Builder, obsAvailable:number) {
  builder.addFieldInt32(55, obsAvailable, 0);
}

static addObsUsed(builder:flatbuffers.Builder, obsUsed:number) {
  builder.addFieldInt32(56, obsUsed, 0);
}

static addTracksAvail(builder:flatbuffers.Builder, tracksAvail:number) {
  builder.addFieldInt32(57, tracksAvail, 0);
}

static addTracksUsed(builder:flatbuffers.Builder, tracksUsed:number) {
  builder.addFieldInt32(58, tracksUsed, 0);
}

static addRecOdspan(builder:flatbuffers.Builder, recOdspan:number) {
  builder.addFieldFloat64(59, recOdspan, 0.0);
}

static addActualOdspan(builder:flatbuffers.Builder, actualOdspan:number) {
  builder.addFieldFloat64(60, actualOdspan, 0.0);
}

static addResidualsAcc(builder:flatbuffers.Builder, residualsAcc:number) {
  builder.addFieldFloat64(61, residualsAcc, 0.0);
}

static addSolarFluxF10(builder:flatbuffers.Builder, solarFluxF10:number) {
  builder.addFieldFloat64(62, solarFluxF10, 0.0);
}

static addSolarFluxF10Avg(builder:flatbuffers.Builder, solarFluxF10Avg:number) {
  builder.addFieldFloat64(63, solarFluxF10Avg, 0.0);
}

static addSolarFluxApavg(builder:flatbuffers.Builder, solarFluxApavg:number) {
  builder.addFieldFloat64(64, solarFluxApavg, 0.0);
}

static addTaiUtc(builder:flatbuffers.Builder, taiUtc:number) {
  builder.addFieldFloat64(65, taiUtc, 0.0);
}

static addUt1Utc(builder:flatbuffers.Builder, ut1Utc:number) {
  builder.addFieldFloat64(66, ut1Utc, 0.0);
}

static addUt1Rate(builder:flatbuffers.Builder, ut1Rate:number) {
  builder.addFieldFloat64(67, ut1Rate, 0.0);
}

static addPolarMotionX(builder:flatbuffers.Builder, polarMotionX:number) {
  builder.addFieldFloat64(68, polarMotionX, 0.0);
}

static addPolarMotionY(builder:flatbuffers.Builder, polarMotionY:number) {
  builder.addFieldFloat64(69, polarMotionY, 0.0);
}

static addIau1980Terms(builder:flatbuffers.Builder, iau1980Terms:number) {
  builder.addFieldInt32(70, iau1980Terms, 0);
}

static addLeapSecondTime(builder:flatbuffers.Builder, leapSecondTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(71, leapSecondTimeOffset, 0);
}

static addIntegratorMode(builder:flatbuffers.Builder, integratorModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(72, integratorModeOffset, 0);
}

static addPartials(builder:flatbuffers.Builder, partialsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(73, partialsOffset, 0);
}

static addStepMode(builder:flatbuffers.Builder, stepModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(74, stepModeOffset, 0);
}

static addFixedStep(builder:flatbuffers.Builder, fixedStep:boolean) {
  builder.addFieldInt8(75, +fixedStep, +false);
}

static addStepSizeSelection(builder:flatbuffers.Builder, stepSizeSelectionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(76, stepSizeSelectionOffset, 0);
}

static addStepSize(builder:flatbuffers.Builder, stepSize:number) {
  builder.addFieldFloat64(77, stepSize, 0.0);
}

static addErrorControl(builder:flatbuffers.Builder, errorControl:number) {
  builder.addFieldFloat64(78, errorControl, 0.0);
}

static addSigmaPosUvw(builder:flatbuffers.Builder, sigmaPosUvwOffset:flatbuffers.Offset) {
  builder.addFieldOffset(79, sigmaPosUvwOffset, 0);
}

static createSigmaPosUvwVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSigmaPosUvwVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSigmaVelUvw(builder:flatbuffers.Builder, sigmaVelUvwOffset:flatbuffers.Offset) {
  builder.addFieldOffset(80, sigmaVelUvwOffset, 0);
}

static createSigmaVelUvwVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSigmaVelUvwVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRms(builder:flatbuffers.Builder, rms:number) {
  builder.addFieldFloat64(81, rms, 0.0);
}

static addEffectiveFrom(builder:flatbuffers.Builder, effectiveFromOffset:flatbuffers.Offset) {
  builder.addFieldOffset(82, effectiveFromOffset, 0);
}

static addEffectiveUntil(builder:flatbuffers.Builder, effectiveUntilOffset:flatbuffers.Offset) {
  builder.addFieldOffset(83, effectiveUntilOffset, 0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(84, rawFileUriOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(85, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(86, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:StateVector_Full_dataMode_Enum) {
  builder.addFieldInt8(87, dataMode, StateVector_Full_dataMode_Enum.REAL);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(88, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAlgorithm(builder:flatbuffers.Builder, algorithmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(89, algorithmOffset, 0);
}

static addSourcedData(builder:flatbuffers.Builder, sourcedDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(90, sourcedDataOffset, 0);
}

static createSourcedDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSourcedDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSourcedDataTypes(builder:flatbuffers.Builder, sourcedDataTypes:StateVector_Full_sourcedDataTypes_Enum) {
  builder.addFieldInt8(91, sourcedDataTypes, StateVector_Full_sourcedDataTypes_Enum.EO);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(92, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(93, createdByOffset, 0);
}

static addOnOrbit(builder:flatbuffers.Builder, onOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(94, onOrbitOffset, 0);
}

static addDescriptor(builder:flatbuffers.Builder, descriptorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(95, descriptorOffset, 0);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(96, transactionIdOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(97, origNetworkOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(98, sourceDlOffset, 0);
}

static endStateVector_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishStateVector_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'STAT');
}

static finishSizePrefixedStateVector_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'STAT', true);
}

static createStateVector_Full(builder:flatbuffers.Builder, idStateVectorOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, epochOffset:flatbuffers.Offset, pedigreeOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, idOrbitDeterminationOffset:flatbuffers.Offset, uct:boolean, xpos:number, ypos:number, zpos:number, xvel:number, yvel:number, zvel:number, referenceFrame:StateVector_Full_referenceFrame_Enum, covOffset:flatbuffers.Offset, covReferenceFrame:StateVector_Full_covReferenceFrame_Enum, covMethodOffset:flatbuffers.Offset, eqCovOffset:flatbuffers.Offset, xposAlt1:number, yposAlt1:number, zposAlt1:number, xvelAlt1:number, yvelAlt1:number, zvelAlt1:number, alt1ReferenceFrameOffset:flatbuffers.Offset, xposAlt2:number, yposAlt2:number, zposAlt2:number, xvelAlt2:number, yvelAlt2:number, zvelAlt2:number, alt2ReferenceFrameOffset:flatbuffers.Offset, posUnc:number, velUnc:number, mass:number, area:number, solarRadPressCoeff:number, dragCoeff:number, dragArea:number, revNo:number, geopotentialModelOffset:flatbuffers.Offset, dragModelOffset:flatbuffers.Offset, lunarSolar:boolean, solarRadPress:boolean, srpArea:number, solidEarthTides:boolean, inTrackThrust:boolean, bDot:number, edr:number, thrustAccel:number, cmOffset:number, lastObStartOffset:flatbuffers.Offset, lastObEndOffset:flatbuffers.Offset, obsAvailable:number, obsUsed:number, tracksAvail:number, tracksUsed:number, recOdspan:number, actualOdspan:number, residualsAcc:number, solarFluxF10:number, solarFluxF10Avg:number, solarFluxApavg:number, taiUtc:number, ut1Utc:number, ut1Rate:number, polarMotionX:number, polarMotionY:number, iau1980Terms:number, leapSecondTimeOffset:flatbuffers.Offset, integratorModeOffset:flatbuffers.Offset, partialsOffset:flatbuffers.Offset, stepModeOffset:flatbuffers.Offset, fixedStep:boolean, stepSizeSelectionOffset:flatbuffers.Offset, stepSize:number, errorControl:number, sigmaPosUvwOffset:flatbuffers.Offset, sigmaVelUvwOffset:flatbuffers.Offset, rms:number, effectiveFromOffset:flatbuffers.Offset, effectiveUntilOffset:flatbuffers.Offset, rawFileUriOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:StateVector_Full_dataMode_Enum, tagsOffset:flatbuffers.Offset, algorithmOffset:flatbuffers.Offset, sourcedDataOffset:flatbuffers.Offset, sourcedDataTypes:StateVector_Full_sourcedDataTypes_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, onOrbitOffset:flatbuffers.Offset, descriptorOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset):flatbuffers.Offset {
  StateVector_Full.startStateVector_Full(builder);
  StateVector_Full.addIdStateVector(builder, idStateVectorOffset);
  StateVector_Full.addClassificationMarking(builder, classificationMarkingOffset);
  StateVector_Full.addEpoch(builder, epochOffset);
  StateVector_Full.addPedigree(builder, pedigreeOffset);
  StateVector_Full.addIdOnOrbit(builder, idOnOrbitOffset);
  StateVector_Full.addSatNo(builder, satNo);
  StateVector_Full.addOrigObjectId(builder, origObjectIdOffset);
  StateVector_Full.addIdOrbitDetermination(builder, idOrbitDeterminationOffset);
  StateVector_Full.addUct(builder, uct);
  StateVector_Full.addXpos(builder, xpos);
  StateVector_Full.addYpos(builder, ypos);
  StateVector_Full.addZpos(builder, zpos);
  StateVector_Full.addXvel(builder, xvel);
  StateVector_Full.addYvel(builder, yvel);
  StateVector_Full.addZvel(builder, zvel);
  StateVector_Full.addReferenceFrame(builder, referenceFrame);
  StateVector_Full.addCov(builder, covOffset);
  StateVector_Full.addCovReferenceFrame(builder, covReferenceFrame);
  StateVector_Full.addCovMethod(builder, covMethodOffset);
  StateVector_Full.addEqCov(builder, eqCovOffset);
  StateVector_Full.addXposAlt1(builder, xposAlt1);
  StateVector_Full.addYposAlt1(builder, yposAlt1);
  StateVector_Full.addZposAlt1(builder, zposAlt1);
  StateVector_Full.addXvelAlt1(builder, xvelAlt1);
  StateVector_Full.addYvelAlt1(builder, yvelAlt1);
  StateVector_Full.addZvelAlt1(builder, zvelAlt1);
  StateVector_Full.addAlt1ReferenceFrame(builder, alt1ReferenceFrameOffset);
  StateVector_Full.addXposAlt2(builder, xposAlt2);
  StateVector_Full.addYposAlt2(builder, yposAlt2);
  StateVector_Full.addZposAlt2(builder, zposAlt2);
  StateVector_Full.addXvelAlt2(builder, xvelAlt2);
  StateVector_Full.addYvelAlt2(builder, yvelAlt2);
  StateVector_Full.addZvelAlt2(builder, zvelAlt2);
  StateVector_Full.addAlt2ReferenceFrame(builder, alt2ReferenceFrameOffset);
  StateVector_Full.addPosUnc(builder, posUnc);
  StateVector_Full.addVelUnc(builder, velUnc);
  StateVector_Full.addMass(builder, mass);
  StateVector_Full.addArea(builder, area);
  StateVector_Full.addSolarRadPressCoeff(builder, solarRadPressCoeff);
  StateVector_Full.addDragCoeff(builder, dragCoeff);
  StateVector_Full.addDragArea(builder, dragArea);
  StateVector_Full.addRevNo(builder, revNo);
  StateVector_Full.addGeopotentialModel(builder, geopotentialModelOffset);
  StateVector_Full.addDragModel(builder, dragModelOffset);
  StateVector_Full.addLunarSolar(builder, lunarSolar);
  StateVector_Full.addSolarRadPress(builder, solarRadPress);
  StateVector_Full.addSrpArea(builder, srpArea);
  StateVector_Full.addSolidEarthTides(builder, solidEarthTides);
  StateVector_Full.addInTrackThrust(builder, inTrackThrust);
  StateVector_Full.addBDot(builder, bDot);
  StateVector_Full.addEdr(builder, edr);
  StateVector_Full.addThrustAccel(builder, thrustAccel);
  StateVector_Full.addCmOffset(builder, cmOffset);
  StateVector_Full.addLastObStart(builder, lastObStartOffset);
  StateVector_Full.addLastObEnd(builder, lastObEndOffset);
  StateVector_Full.addObsAvailable(builder, obsAvailable);
  StateVector_Full.addObsUsed(builder, obsUsed);
  StateVector_Full.addTracksAvail(builder, tracksAvail);
  StateVector_Full.addTracksUsed(builder, tracksUsed);
  StateVector_Full.addRecOdspan(builder, recOdspan);
  StateVector_Full.addActualOdspan(builder, actualOdspan);
  StateVector_Full.addResidualsAcc(builder, residualsAcc);
  StateVector_Full.addSolarFluxF10(builder, solarFluxF10);
  StateVector_Full.addSolarFluxF10Avg(builder, solarFluxF10Avg);
  StateVector_Full.addSolarFluxApavg(builder, solarFluxApavg);
  StateVector_Full.addTaiUtc(builder, taiUtc);
  StateVector_Full.addUt1Utc(builder, ut1Utc);
  StateVector_Full.addUt1Rate(builder, ut1Rate);
  StateVector_Full.addPolarMotionX(builder, polarMotionX);
  StateVector_Full.addPolarMotionY(builder, polarMotionY);
  StateVector_Full.addIau1980Terms(builder, iau1980Terms);
  StateVector_Full.addLeapSecondTime(builder, leapSecondTimeOffset);
  StateVector_Full.addIntegratorMode(builder, integratorModeOffset);
  StateVector_Full.addPartials(builder, partialsOffset);
  StateVector_Full.addStepMode(builder, stepModeOffset);
  StateVector_Full.addFixedStep(builder, fixedStep);
  StateVector_Full.addStepSizeSelection(builder, stepSizeSelectionOffset);
  StateVector_Full.addStepSize(builder, stepSize);
  StateVector_Full.addErrorControl(builder, errorControl);
  StateVector_Full.addSigmaPosUvw(builder, sigmaPosUvwOffset);
  StateVector_Full.addSigmaVelUvw(builder, sigmaVelUvwOffset);
  StateVector_Full.addRms(builder, rms);
  StateVector_Full.addEffectiveFrom(builder, effectiveFromOffset);
  StateVector_Full.addEffectiveUntil(builder, effectiveUntilOffset);
  StateVector_Full.addRawFileUri(builder, rawFileUriOffset);
  StateVector_Full.addSource(builder, sourceOffset);
  StateVector_Full.addOrigin(builder, originOffset);
  StateVector_Full.addDataMode(builder, dataMode);
  StateVector_Full.addTags(builder, tagsOffset);
  StateVector_Full.addAlgorithm(builder, algorithmOffset);
  StateVector_Full.addSourcedData(builder, sourcedDataOffset);
  StateVector_Full.addSourcedDataTypes(builder, sourcedDataTypes);
  StateVector_Full.addCreatedAt(builder, createdAtOffset);
  StateVector_Full.addCreatedBy(builder, createdByOffset);
  StateVector_Full.addOnOrbit(builder, onOrbitOffset);
  StateVector_Full.addDescriptor(builder, descriptorOffset);
  StateVector_Full.addTransactionId(builder, transactionIdOffset);
  StateVector_Full.addOrigNetwork(builder, origNetworkOffset);
  StateVector_Full.addSourceDl(builder, sourceDlOffset);
  return StateVector_Full.endStateVector_Full(builder);
}

unpack(): StateVector_FullT {
  return new StateVector_FullT(
    this.idStateVector(),
    this.classificationMarking(),
    this.epoch(),
    this.pedigree(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.idOrbitDetermination(),
    this.uct(),
    this.xpos(),
    this.ypos(),
    this.zpos(),
    this.xvel(),
    this.yvel(),
    this.zvel(),
    this.referenceFrame(),
    this.bb!.createScalarList<string>(this.cov.bind(this), this.cov_Length()),
    this.covReferenceFrame(),
    this.covMethod(),
    this.bb!.createScalarList<string>(this.eqCov.bind(this), this.eqCov_Length()),
    this.xposAlt1(),
    this.yposAlt1(),
    this.zposAlt1(),
    this.xvelAlt1(),
    this.yvelAlt1(),
    this.zvelAlt1(),
    this.alt1ReferenceFrame(),
    this.xposAlt2(),
    this.yposAlt2(),
    this.zposAlt2(),
    this.xvelAlt2(),
    this.yvelAlt2(),
    this.zvelAlt2(),
    this.alt2ReferenceFrame(),
    this.posUnc(),
    this.velUnc(),
    this.mass(),
    this.area(),
    this.solarRadPressCoeff(),
    this.dragCoeff(),
    this.dragArea(),
    this.revNo(),
    this.geopotentialModel(),
    this.dragModel(),
    this.lunarSolar(),
    this.solarRadPress(),
    this.srpArea(),
    this.solidEarthTides(),
    this.inTrackThrust(),
    this.bDot(),
    this.edr(),
    this.thrustAccel(),
    this.cmOffset(),
    this.lastObStart(),
    this.lastObEnd(),
    this.obsAvailable(),
    this.obsUsed(),
    this.tracksAvail(),
    this.tracksUsed(),
    this.recOdspan(),
    this.actualOdspan(),
    this.residualsAcc(),
    this.solarFluxF10(),
    this.solarFluxF10Avg(),
    this.solarFluxApavg(),
    this.taiUtc(),
    this.ut1Utc(),
    this.ut1Rate(),
    this.polarMotionX(),
    this.polarMotionY(),
    this.iau1980Terms(),
    this.leapSecondTime(),
    this.integratorMode(),
    this.partials(),
    this.stepMode(),
    this.fixedStep(),
    this.stepSizeSelection(),
    this.stepSize(),
    this.errorControl(),
    this.bb!.createScalarList<string>(this.sigmaPosUvw.bind(this), this.sigmaPosUVW_Length()),
    this.bb!.createScalarList<string>(this.sigmaVelUvw.bind(this), this.sigmaVelUVW_Length()),
    this.rms(),
    this.effectiveFrom(),
    this.effectiveUntil(),
    this.rawFileUri(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length()),
    this.algorithm(),
    this.bb!.createScalarList<string>(this.sourcedData.bind(this), this.sourcedData_Length()),
    this.sourcedDataTypes(),
    this.createdAt(),
    this.createdBy(),
    this.onOrbit(),
    this.descriptor(),
    this.transactionId(),
    this.origNetwork(),
    this.sourceDl()
  );
}


unpackTo(_o: StateVector_FullT): void {
  _o.idStateVector = this.idStateVector();
  _o.classificationMarking = this.classificationMarking();
  _o.epoch = this.epoch();
  _o.pedigree = this.pedigree();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.idOrbitDetermination = this.idOrbitDetermination();
  _o.uct = this.uct();
  _o.xpos = this.xpos();
  _o.ypos = this.ypos();
  _o.zpos = this.zpos();
  _o.xvel = this.xvel();
  _o.yvel = this.yvel();
  _o.zvel = this.zvel();
  _o.referenceFrame = this.referenceFrame();
  _o.cov = this.bb!.createScalarList<string>(this.cov.bind(this), this.cov_Length());
  _o.covReferenceFrame = this.covReferenceFrame();
  _o.covMethod = this.covMethod();
  _o.eqCov = this.bb!.createScalarList<string>(this.eqCov.bind(this), this.eqCov_Length());
  _o.xposAlt1 = this.xposAlt1();
  _o.yposAlt1 = this.yposAlt1();
  _o.zposAlt1 = this.zposAlt1();
  _o.xvelAlt1 = this.xvelAlt1();
  _o.yvelAlt1 = this.yvelAlt1();
  _o.zvelAlt1 = this.zvelAlt1();
  _o.alt1ReferenceFrame = this.alt1ReferenceFrame();
  _o.xposAlt2 = this.xposAlt2();
  _o.yposAlt2 = this.yposAlt2();
  _o.zposAlt2 = this.zposAlt2();
  _o.xvelAlt2 = this.xvelAlt2();
  _o.yvelAlt2 = this.yvelAlt2();
  _o.zvelAlt2 = this.zvelAlt2();
  _o.alt2ReferenceFrame = this.alt2ReferenceFrame();
  _o.posUnc = this.posUnc();
  _o.velUnc = this.velUnc();
  _o.mass = this.mass();
  _o.area = this.area();
  _o.solarRadPressCoeff = this.solarRadPressCoeff();
  _o.dragCoeff = this.dragCoeff();
  _o.dragArea = this.dragArea();
  _o.revNo = this.revNo();
  _o.geopotentialModel = this.geopotentialModel();
  _o.dragModel = this.dragModel();
  _o.lunarSolar = this.lunarSolar();
  _o.solarRadPress = this.solarRadPress();
  _o.srpArea = this.srpArea();
  _o.solidEarthTides = this.solidEarthTides();
  _o.inTrackThrust = this.inTrackThrust();
  _o.bDot = this.bDot();
  _o.edr = this.edr();
  _o.thrustAccel = this.thrustAccel();
  _o.cmOffset = this.cmOffset();
  _o.lastObStart = this.lastObStart();
  _o.lastObEnd = this.lastObEnd();
  _o.obsAvailable = this.obsAvailable();
  _o.obsUsed = this.obsUsed();
  _o.tracksAvail = this.tracksAvail();
  _o.tracksUsed = this.tracksUsed();
  _o.recODSpan = this.recOdspan();
  _o.actualODSpan = this.actualOdspan();
  _o.residualsAcc = this.residualsAcc();
  _o.solarFluxF10 = this.solarFluxF10();
  _o.solarFluxF10Avg = this.solarFluxF10Avg();
  _o.solarFluxAPAvg = this.solarFluxApavg();
  _o.taiUtc = this.taiUtc();
  _o.ut1Utc = this.ut1Utc();
  _o.ut1Rate = this.ut1Rate();
  _o.polarMotionX = this.polarMotionX();
  _o.polarMotionY = this.polarMotionY();
  _o.iau1980Terms = this.iau1980Terms();
  _o.leapSecondTime = this.leapSecondTime();
  _o.integratorMode = this.integratorMode();
  _o.partials = this.partials();
  _o.stepMode = this.stepMode();
  _o.fixedStep = this.fixedStep();
  _o.stepSizeSelection = this.stepSizeSelection();
  _o.stepSize = this.stepSize();
  _o.errorControl = this.errorControl();
  _o.sigmaPosUVW = this.bb!.createScalarList<string>(this.sigmaPosUvw.bind(this), this.sigmaPosUVW_Length());
  _o.sigmaVelUVW = this.bb!.createScalarList<string>(this.sigmaVelUvw.bind(this), this.sigmaVelUVW_Length());
  _o.rms = this.rms();
  _o.effectiveFrom = this.effectiveFrom();
  _o.effectiveUntil = this.effectiveUntil();
  _o.rawFileURI = this.rawFileUri();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length());
  _o.algorithm = this.algorithm();
  _o.sourcedData = this.bb!.createScalarList<string>(this.sourcedData.bind(this), this.sourcedData_Length());
  _o.sourcedDataTypes = this.sourcedDataTypes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.onOrbit = this.onOrbit();
  _o.descriptor = this.descriptor();
  _o.transactionId = this.transactionId();
  _o.origNetwork = this.origNetwork();
  _o.sourceDL = this.sourceDl();
}
}

export class StateVector_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public idStateVector: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public epoch: string|Uint8Array|null = null,
  public pedigree: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public idOrbitDetermination: string|Uint8Array|null = null,
  public uct: boolean = false,
  public xpos: number = 0.0,
  public ypos: number = 0.0,
  public zpos: number = 0.0,
  public xvel: number = 0.0,
  public yvel: number = 0.0,
  public zvel: number = 0.0,
  public referenceFrame: StateVector_Full_referenceFrame_Enum = StateVector_Full_referenceFrame_Enum.J2000,
  public cov: (string)[] = [],
  public covReferenceFrame: StateVector_Full_covReferenceFrame_Enum = StateVector_Full_covReferenceFrame_Enum.J2000,
  public covMethod: string|Uint8Array|null = null,
  public eqCov: (string)[] = [],
  public xposAlt1: number = 0.0,
  public yposAlt1: number = 0.0,
  public zposAlt1: number = 0.0,
  public xvelAlt1: number = 0.0,
  public yvelAlt1: number = 0.0,
  public zvelAlt1: number = 0.0,
  public alt1ReferenceFrame: string|Uint8Array|null = null,
  public xposAlt2: number = 0.0,
  public yposAlt2: number = 0.0,
  public zposAlt2: number = 0.0,
  public xvelAlt2: number = 0.0,
  public yvelAlt2: number = 0.0,
  public zvelAlt2: number = 0.0,
  public alt2ReferenceFrame: string|Uint8Array|null = null,
  public posUnc: number = 0.0,
  public velUnc: number = 0.0,
  public mass: number = 0.0,
  public area: number = 0.0,
  public solarRadPressCoeff: number = 0.0,
  public dragCoeff: number = 0.0,
  public dragArea: number = 0.0,
  public revNo: number = 0,
  public geopotentialModel: string|Uint8Array|null = null,
  public dragModel: string|Uint8Array|null = null,
  public lunarSolar: boolean = false,
  public solarRadPress: boolean = false,
  public srpArea: number = 0.0,
  public solidEarthTides: boolean = false,
  public inTrackThrust: boolean = false,
  public bDot: number = 0.0,
  public edr: number = 0.0,
  public thrustAccel: number = 0.0,
  public cmOffset: number = 0.0,
  public lastObStart: string|Uint8Array|null = null,
  public lastObEnd: string|Uint8Array|null = null,
  public obsAvailable: number = 0,
  public obsUsed: number = 0,
  public tracksAvail: number = 0,
  public tracksUsed: number = 0,
  public recODSpan: number = 0.0,
  public actualODSpan: number = 0.0,
  public residualsAcc: number = 0.0,
  public solarFluxF10: number = 0.0,
  public solarFluxF10Avg: number = 0.0,
  public solarFluxAPAvg: number = 0.0,
  public taiUtc: number = 0.0,
  public ut1Utc: number = 0.0,
  public ut1Rate: number = 0.0,
  public polarMotionX: number = 0.0,
  public polarMotionY: number = 0.0,
  public iau1980Terms: number = 0,
  public leapSecondTime: string|Uint8Array|null = null,
  public integratorMode: string|Uint8Array|null = null,
  public partials: string|Uint8Array|null = null,
  public stepMode: string|Uint8Array|null = null,
  public fixedStep: boolean = false,
  public stepSizeSelection: string|Uint8Array|null = null,
  public stepSize: number = 0.0,
  public errorControl: number = 0.0,
  public sigmaPosUVW: (string)[] = [],
  public sigmaVelUVW: (string)[] = [],
  public rms: number = 0.0,
  public effectiveFrom: string|Uint8Array|null = null,
  public effectiveUntil: string|Uint8Array|null = null,
  public rawFileURI: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: StateVector_Full_dataMode_Enum = StateVector_Full_dataMode_Enum.REAL,
  public tags: (string)[] = [],
  public algorithm: string|Uint8Array|null = null,
  public sourcedData: (string)[] = [],
  public sourcedDataTypes: StateVector_Full_sourcedDataTypes_Enum = StateVector_Full_sourcedDataTypes_Enum.EO,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public onOrbit: string|Uint8Array|null = null,
  public descriptor: string|Uint8Array|null = null,
  public transactionId: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const idStateVector = (this.idStateVector !== null ? builder.createString(this.idStateVector!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const epoch = (this.epoch !== null ? builder.createString(this.epoch!) : 0);
  const pedigree = (this.pedigree !== null ? builder.createString(this.pedigree!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const idOrbitDetermination = (this.idOrbitDetermination !== null ? builder.createString(this.idOrbitDetermination!) : 0);
  const cov = StateVector_Full.createCovVector(builder, builder.createObjectOffsetList(this.cov));
  const covMethod = (this.covMethod !== null ? builder.createString(this.covMethod!) : 0);
  const eqCov = StateVector_Full.createEqCovVector(builder, builder.createObjectOffsetList(this.eqCov));
  const alt1ReferenceFrame = (this.alt1ReferenceFrame !== null ? builder.createString(this.alt1ReferenceFrame!) : 0);
  const alt2ReferenceFrame = (this.alt2ReferenceFrame !== null ? builder.createString(this.alt2ReferenceFrame!) : 0);
  const geopotentialModel = (this.geopotentialModel !== null ? builder.createString(this.geopotentialModel!) : 0);
  const dragModel = (this.dragModel !== null ? builder.createString(this.dragModel!) : 0);
  const lastObStart = (this.lastObStart !== null ? builder.createString(this.lastObStart!) : 0);
  const lastObEnd = (this.lastObEnd !== null ? builder.createString(this.lastObEnd!) : 0);
  const leapSecondTime = (this.leapSecondTime !== null ? builder.createString(this.leapSecondTime!) : 0);
  const integratorMode = (this.integratorMode !== null ? builder.createString(this.integratorMode!) : 0);
  const partials = (this.partials !== null ? builder.createString(this.partials!) : 0);
  const stepMode = (this.stepMode !== null ? builder.createString(this.stepMode!) : 0);
  const stepSizeSelection = (this.stepSizeSelection !== null ? builder.createString(this.stepSizeSelection!) : 0);
  const sigmaPosUVW = StateVector_Full.createSigmaPosUvwVector(builder, builder.createObjectOffsetList(this.sigmaPosUVW));
  const sigmaVelUVW = StateVector_Full.createSigmaVelUvwVector(builder, builder.createObjectOffsetList(this.sigmaVelUVW));
  const effectiveFrom = (this.effectiveFrom !== null ? builder.createString(this.effectiveFrom!) : 0);
  const effectiveUntil = (this.effectiveUntil !== null ? builder.createString(this.effectiveUntil!) : 0);
  const rawFileURI = (this.rawFileURI !== null ? builder.createString(this.rawFileURI!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const tags = StateVector_Full.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const algorithm = (this.algorithm !== null ? builder.createString(this.algorithm!) : 0);
  const sourcedData = StateVector_Full.createSourcedDataVector(builder, builder.createObjectOffsetList(this.sourcedData));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const onOrbit = (this.onOrbit !== null ? builder.createString(this.onOrbit!) : 0);
  const descriptor = (this.descriptor !== null ? builder.createString(this.descriptor!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);

  return StateVector_Full.createStateVector_Full(builder,
    idStateVector,
    classificationMarking,
    epoch,
    pedigree,
    idOnOrbit,
    this.satNo,
    origObjectId,
    idOrbitDetermination,
    this.uct,
    this.xpos,
    this.ypos,
    this.zpos,
    this.xvel,
    this.yvel,
    this.zvel,
    this.referenceFrame,
    cov,
    this.covReferenceFrame,
    covMethod,
    eqCov,
    this.xposAlt1,
    this.yposAlt1,
    this.zposAlt1,
    this.xvelAlt1,
    this.yvelAlt1,
    this.zvelAlt1,
    alt1ReferenceFrame,
    this.xposAlt2,
    this.yposAlt2,
    this.zposAlt2,
    this.xvelAlt2,
    this.yvelAlt2,
    this.zvelAlt2,
    alt2ReferenceFrame,
    this.posUnc,
    this.velUnc,
    this.mass,
    this.area,
    this.solarRadPressCoeff,
    this.dragCoeff,
    this.dragArea,
    this.revNo,
    geopotentialModel,
    dragModel,
    this.lunarSolar,
    this.solarRadPress,
    this.srpArea,
    this.solidEarthTides,
    this.inTrackThrust,
    this.bDot,
    this.edr,
    this.thrustAccel,
    this.cmOffset,
    lastObStart,
    lastObEnd,
    this.obsAvailable,
    this.obsUsed,
    this.tracksAvail,
    this.tracksUsed,
    this.recODSpan,
    this.actualODSpan,
    this.residualsAcc,
    this.solarFluxF10,
    this.solarFluxF10Avg,
    this.solarFluxAPAvg,
    this.taiUtc,
    this.ut1Utc,
    this.ut1Rate,
    this.polarMotionX,
    this.polarMotionY,
    this.iau1980Terms,
    leapSecondTime,
    integratorMode,
    partials,
    stepMode,
    this.fixedStep,
    stepSizeSelection,
    this.stepSize,
    this.errorControl,
    sigmaPosUVW,
    sigmaVelUVW,
    this.rms,
    effectiveFrom,
    effectiveUntil,
    rawFileURI,
    source,
    origin,
    this.dataMode,
    tags,
    algorithm,
    sourcedData,
    this.sourcedDataTypes,
    createdAt,
    createdBy,
    onOrbit,
    descriptor,
    transactionId,
    origNetwork,
    sourceDL
  );
}
}
