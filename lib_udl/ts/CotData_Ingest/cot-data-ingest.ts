// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Schema for the CotData to post.
 */
export class CotData_Ingest implements flatbuffers.IUnpackableObject<CotData_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CotData_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCotData_Ingest(bb:flatbuffers.ByteBuffer, obj?:CotData_Ingest):CotData_Ingest {
  return (obj || new CotData_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCotData_Ingest(bb:flatbuffers.ByteBuffer, obj?:CotData_Ingest):CotData_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CotData_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('COTD');
}

/**
 * Identifier of the sender of the cot message which should remain the same on subsequent POI records of the same point of interest.
 * Example: /// Example: POI-ID
 * Constraints: No constraints specified.
 */
senderUid():string|null
senderUid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
senderUid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * How the event point was generated, in CoT object heirarchy notation (optional, CoT).
 * Example: /// Example: h-e
 * Constraints: No constraints specified.
 */
how():string|null
how(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
how(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
ce():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Height above lat/lon point, in meters (1-sigma, if representing linear error).
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
le():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Stale timestamp (optional), in ISO8601 UTC format.
 * Example: /// Example: 2020-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
stale():string|null
stale(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stale(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start time of event validity (optional), in ISO8601 UTC format.
 * Example: /// Example: 2020-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
start():string|null
start(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
start(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Event type, in CoT object heirarchy notation (optional, CoT).
 * Example: /// Example: a-h-G
 * Constraints: No constraints specified.
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Point height above ellipsoid (WGS-84), in meters.
 * Example: /// Example: 5.23
 * Constraints: No constraints specified.
 */
alt():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
cotPositionData():string|null
cotPositionData(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cotPositionData(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
cotChatData():string|null
cotChatData(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cotChatData(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional list of call signs to send message to directly.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
callSigns(index: number):string
callSigns(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
callSigns(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

callSignsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional list of TAK user ids to send message to directly.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
uids(index: number):string
uids(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
uids(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

uidsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional set of groups to send message to specifically.  If not specified, the message will be sent to the default _ANON_ group.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
groups(index: number):string
groups(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
groups(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

groupsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startCotData_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(15);
}

static addSenderUid(builder:flatbuffers.Builder, senderUidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, senderUidOffset, 0);
}

static addHow(builder:flatbuffers.Builder, howOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, howOffset, 0);
}

static addCe(builder:flatbuffers.Builder, ce:number) {
  builder.addFieldFloat64(2, ce, 0.0);
}

static addLe(builder:flatbuffers.Builder, le:number) {
  builder.addFieldFloat64(3, le, 0.0);
}

static addStale(builder:flatbuffers.Builder, staleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, staleOffset, 0);
}

static addStart(builder:flatbuffers.Builder, startOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, startOffset, 0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(6, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(7, lon, 0.0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, typeOffset, 0);
}

static addAlt(builder:flatbuffers.Builder, alt:number) {
  builder.addFieldFloat64(9, alt, 0.0);
}

static addCotPositionData(builder:flatbuffers.Builder, cotPositionDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, cotPositionDataOffset, 0);
}

static addCotChatData(builder:flatbuffers.Builder, cotChatDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, cotChatDataOffset, 0);
}

static addCallSigns(builder:flatbuffers.Builder, callSignsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, callSignsOffset, 0);
}

static createCallSignsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCallSignsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUids(builder:flatbuffers.Builder, uidsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, uidsOffset, 0);
}

static createUidsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUidsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGroups(builder:flatbuffers.Builder, groupsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, groupsOffset, 0);
}

static createGroupsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGroupsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endCotData_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCotData_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'COTD');
}

static finishSizePrefixedCotData_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'COTD', true);
}

static createCotData_Ingest(builder:flatbuffers.Builder, senderUidOffset:flatbuffers.Offset, howOffset:flatbuffers.Offset, ce:number, le:number, staleOffset:flatbuffers.Offset, startOffset:flatbuffers.Offset, lat:number, lon:number, typeOffset:flatbuffers.Offset, alt:number, cotPositionDataOffset:flatbuffers.Offset, cotChatDataOffset:flatbuffers.Offset, callSignsOffset:flatbuffers.Offset, uidsOffset:flatbuffers.Offset, groupsOffset:flatbuffers.Offset):flatbuffers.Offset {
  CotData_Ingest.startCotData_Ingest(builder);
  CotData_Ingest.addSenderUid(builder, senderUidOffset);
  CotData_Ingest.addHow(builder, howOffset);
  CotData_Ingest.addCe(builder, ce);
  CotData_Ingest.addLe(builder, le);
  CotData_Ingest.addStale(builder, staleOffset);
  CotData_Ingest.addStart(builder, startOffset);
  CotData_Ingest.addLat(builder, lat);
  CotData_Ingest.addLon(builder, lon);
  CotData_Ingest.addType(builder, typeOffset);
  CotData_Ingest.addAlt(builder, alt);
  CotData_Ingest.addCotPositionData(builder, cotPositionDataOffset);
  CotData_Ingest.addCotChatData(builder, cotChatDataOffset);
  CotData_Ingest.addCallSigns(builder, callSignsOffset);
  CotData_Ingest.addUids(builder, uidsOffset);
  CotData_Ingest.addGroups(builder, groupsOffset);
  return CotData_Ingest.endCotData_Ingest(builder);
}

unpack(): CotData_IngestT {
  return new CotData_IngestT(
    this.senderUid(),
    this.how(),
    this.ce(),
    this.le(),
    this.stale(),
    this.start(),
    this.lat(),
    this.lon(),
    this.type(),
    this.alt(),
    this.cotPositionData(),
    this.cotChatData(),
    this.bb!.createScalarList<string>(this.callSigns.bind(this), this.callSigns_Length()),
    this.bb!.createScalarList<string>(this.uids.bind(this), this.uids_Length()),
    this.bb!.createScalarList<string>(this.groups.bind(this), this.groups_Length())
  );
}


unpackTo(_o: CotData_IngestT): void {
  _o.senderUid = this.senderUid();
  _o.how = this.how();
  _o.ce = this.ce();
  _o.le = this.le();
  _o.stale = this.stale();
  _o.start = this.start();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.type = this.type();
  _o.alt = this.alt();
  _o.cotPositionData = this.cotPositionData();
  _o.cotChatData = this.cotChatData();
  _o.callSigns = this.bb!.createScalarList<string>(this.callSigns.bind(this), this.callSigns_Length());
  _o.uids = this.bb!.createScalarList<string>(this.uids.bind(this), this.uids_Length());
  _o.groups = this.bb!.createScalarList<string>(this.groups.bind(this), this.groups_Length());
}
}

export class CotData_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public senderUid: string|Uint8Array|null = null,
  public how: string|Uint8Array|null = null,
  public ce: number = 0.0,
  public le: number = 0.0,
  public stale: string|Uint8Array|null = null,
  public start: string|Uint8Array|null = null,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public type: string|Uint8Array|null = null,
  public alt: number = 0.0,
  public cotPositionData: string|Uint8Array|null = null,
  public cotChatData: string|Uint8Array|null = null,
  public callSigns: (string)[] = [],
  public uids: (string)[] = [],
  public groups: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const senderUid = (this.senderUid !== null ? builder.createString(this.senderUid!) : 0);
  const how = (this.how !== null ? builder.createString(this.how!) : 0);
  const stale = (this.stale !== null ? builder.createString(this.stale!) : 0);
  const start = (this.start !== null ? builder.createString(this.start!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const cotPositionData = (this.cotPositionData !== null ? builder.createString(this.cotPositionData!) : 0);
  const cotChatData = (this.cotChatData !== null ? builder.createString(this.cotChatData!) : 0);
  const callSigns = CotData_Ingest.createCallSignsVector(builder, builder.createObjectOffsetList(this.callSigns));
  const uids = CotData_Ingest.createUidsVector(builder, builder.createObjectOffsetList(this.uids));
  const groups = CotData_Ingest.createGroupsVector(builder, builder.createObjectOffsetList(this.groups));

  return CotData_Ingest.createCotData_Ingest(builder,
    senderUid,
    how,
    this.ce,
    this.le,
    stale,
    start,
    this.lat,
    this.lon,
    type,
    this.alt,
    cotPositionData,
    cotChatData,
    callSigns,
    uids,
    groups
  );
}
}
