// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AirEvent_Full_dataMode_Enum } from './air-event-full-data-mode-enum.js';


/**
 * /// Information related to an air event (e.g. FUEL TRANSFER, AIR DROP) and the associated aircraft.
 */
export class AirEvent_Full implements flatbuffers.IUnpackableObject<AirEvent_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirEvent_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirEvent_Full(bb:flatbuffers.ByteBuffer, obj?:AirEvent_Full):AirEvent_Full {
  return (obj || new AirEvent_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirEvent_Full(bb:flatbuffers.ByteBuffer, obj?:AirEvent_Full):AirEvent_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirEvent_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRE');
}

/**
 * Unique identifier of the record, auto-generated by the system if not provided on create operations.
 * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of air event (e.g. FUEL TRANSFER, AIR DROP, etc).
 * Example: /// Example: FUEL TRANSFER
 * Constraints: Minimum length = 1, Maximum length = 32
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL unique identifier of the sortie associated with this air event.
 * Example: /// Example: b9866c03-2397-4506-8153-852e72d9b54f
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSortie():string|null
idSortie(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSortie(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL unique identifier of the mission associated with this air event.
 * Example: /// Example: 190dea6d-2a90-45a2-a276-be9047d9b96c
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idMission():string|null
idMission(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idMission(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional air event ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: MB014313032022407540
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalAirEventId():string|null
externalAirEventId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalAirEventId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifies the Itinerary point of a sortie where an air event occurs.
 * Example: /// Example: 825
 * Constraints: No constraints specified.
 */
legNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The location representing this air event specified as a feature Id. Locations specified include air refueling track Ids and air drop event locations.
 * Example: /// Example: 901EW
 * Constraints: Minimum length = 0, Maximum length = 32
 */
location():string|null
location(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
location(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The purpose of the air event at the arrival location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 36
 */
arrPurpose():string|null
arrPurpose(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrPurpose(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The scheduled arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-07T13:55:43.123Z
 * Constraints: No constraints specified.
 */
plannedArrTime():string|null
plannedArrTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
plannedArrTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The current estimated arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-07T13:59:48.123Z
 * Constraints: No constraints specified.
 */
estArrTime():string|null
estArrTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
estArrTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The actual arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-07T14:00:03.123Z
 * Constraints: No constraints specified.
 */
actualArrTime():string|null
actualArrTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actualArrTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The purpose of the air event at the departure location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
 * Example: /// Example: Q
 * Constraints: Minimum length = 0, Maximum length = 36
 */
depPurpose():string|null
depPurpose(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depPurpose(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The scheduled departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-07T14:15:43.123Z
 * Constraints: No constraints specified.
 */
plannedDepTime():string|null
plannedDepTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
plannedDepTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The current estimated departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-07T14:19:48.123Z
 * Constraints: No constraints specified.
 */
estDepTime():string|null
estDepTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
estDepTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The actual departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-07T14:17:03.123Z
 * Constraints: No constraints specified.
 */
actualDepTime():string|null
actualDepTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actualDepTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: 6418a4b68e5c3896bf024cc79aa4174c
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalArtrackId():string|null
externalArtrackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalArtrackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the air refueling track, if applicable.
 * Example: /// Example: CH61
 * Constraints: Minimum length = 0, Maximum length = 15
 */
arTrackId():string|null
arTrackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arTrackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the air refueling track, if applicable.
 * Example: /// Example: CH61 POST
 * Constraints: Minimum length = 0, Maximum length = 50
 */
arTrackName():string|null
arTrackName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arTrackName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Rendezvous Control Time is the planned time the tanker and receiver aircraft will rendezvous for an en route type air refueling event, in ISO 8601 UTC format, with millisecond precision.
 * Example: /// Example: 2024-01-07T13:55:43.123Z
 * Constraints: No constraints specified.
 */
rzct():string|null
rzct(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rzct(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Air Refueling Control Time is the planned time the tanker aircraft will transfer fuel to the receiver aircraft, in ISO 8601 UTC format, with millisecond precision.
 * Example: /// Example: 2024-01-07T15:11:27.123Z
 * Constraints: No constraints specified.
 */
arct():string|null
arct(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arct(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Altitude of this air event, in feet.
 * Example: /// Example: 28000.1
 * Constraints: No constraints specified.
 */
baseAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Priority of this air event.
 * Example: /// Example: 1A2
 * Constraints: Minimum length = 0, Maximum length = 3
 */
priority():string|null
priority(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
priority(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Length of time the receiver unit has requested for an air event, in hours.
 * Example: /// Example: 1.5
 * Constraints: No constraints specified.
 */
trackTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Status of this air refueling event track reservation. Receivers are responsible for scheduling or reserving air refueling tracks. Possible values are A (Altitude Reservation), R (Reserved), or Q (Questionable).
 * Example: /// Example: R
 * Constraints: Minimum length = 0, Maximum length = 2
 */
statusCode():string|null
statusCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
statusCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Rendezvous point for the tanker and receiver during this air refueling event. Possible values are AN (Anchor Nav Point), AP (Anchor Pattern), CP (Control Point), ET (Entry Point), EX (Exit Point), IP (Initial Point), NC (Nav Check Point).
 * Example: /// Example: AN
 * Constraints: Minimum length = 0, Maximum length = 20
 */
rzPoint():string|null
rzPoint(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rzPoint(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of rendezvous used for this air refueling event. Possible values are BUD (Buddy), EN (Enroute), GCI (Ground Control), PP (Point Parallel).
 * Example: /// Example: PP
 * Constraints: Minimum length = 0, Maximum length = 3
 */
rzType():string|null
rzType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rzType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of process used by AMC to schedule this air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
 * Example: /// Example: V
 * Constraints: Minimum length = 0, Maximum length = 2
 */
arEventType():string|null
arEventType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arEventType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of tankers requested for an air refueling event.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numTankers():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Flag indicating if the receiver unit has requested flying an air refueling track in both directions.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
revTrack():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that the receiver unit has requested flying a short portion of an air refueling track.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
shortTrack():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this air refueling event has been cancelled.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
cancelled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Collection of tanker aircraft associated with this Air Event.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
tankers(index: number):string
tankers(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tankers(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tankersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Collection of receiver aircraft associated with this Air Event.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
receivers(index: number):string
receivers(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
receivers(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

receiversLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Collection of remarks associated with this Air Event.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
remarks(index: number):string
remarks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
remarks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

remarksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AirEvent_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AirEvent_Full_dataMode_Enum.REAL;
}

static startAirEvent_Full(builder:flatbuffers.Builder) {
  builder.startObject(44);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, typeOffset, 0);
}

static addIdSortie(builder:flatbuffers.Builder, idSortieOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idSortieOffset, 0);
}

static addIdMission(builder:flatbuffers.Builder, idMissionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idMissionOffset, 0);
}

static addExternalAirEventId(builder:flatbuffers.Builder, externalAirEventIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, externalAirEventIdOffset, 0);
}

static addLegNum(builder:flatbuffers.Builder, legNum:number) {
  builder.addFieldInt32(6, legNum, 0);
}

static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, locationOffset, 0);
}

static addArrPurpose(builder:flatbuffers.Builder, arrPurposeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, arrPurposeOffset, 0);
}

static addPlannedArrTime(builder:flatbuffers.Builder, plannedArrTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, plannedArrTimeOffset, 0);
}

static addEstArrTime(builder:flatbuffers.Builder, estArrTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, estArrTimeOffset, 0);
}

static addActualArrTime(builder:flatbuffers.Builder, actualArrTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, actualArrTimeOffset, 0);
}

static addDepPurpose(builder:flatbuffers.Builder, depPurposeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, depPurposeOffset, 0);
}

static addPlannedDepTime(builder:flatbuffers.Builder, plannedDepTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, plannedDepTimeOffset, 0);
}

static addEstDepTime(builder:flatbuffers.Builder, estDepTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, estDepTimeOffset, 0);
}

static addActualDepTime(builder:flatbuffers.Builder, actualDepTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, actualDepTimeOffset, 0);
}

static addExternalArtrackId(builder:flatbuffers.Builder, externalArtrackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, externalArtrackIdOffset, 0);
}

static addArTrackId(builder:flatbuffers.Builder, arTrackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, arTrackIdOffset, 0);
}

static addArTrackName(builder:flatbuffers.Builder, arTrackNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, arTrackNameOffset, 0);
}

static addRzct(builder:flatbuffers.Builder, rzctOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, rzctOffset, 0);
}

static addArct(builder:flatbuffers.Builder, arctOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, arctOffset, 0);
}

static addBaseAlt(builder:flatbuffers.Builder, baseAlt:number) {
  builder.addFieldFloat64(21, baseAlt, 0.0);
}

static addPriority(builder:flatbuffers.Builder, priorityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, priorityOffset, 0);
}

static addTrackTime(builder:flatbuffers.Builder, trackTime:number) {
  builder.addFieldFloat64(23, trackTime, 0.0);
}

static addStatusCode(builder:flatbuffers.Builder, statusCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, statusCodeOffset, 0);
}

static addRzPoint(builder:flatbuffers.Builder, rzPointOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, rzPointOffset, 0);
}

static addRzType(builder:flatbuffers.Builder, rzTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, rzTypeOffset, 0);
}

static addArEventType(builder:flatbuffers.Builder, arEventTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, arEventTypeOffset, 0);
}

static addNumTankers(builder:flatbuffers.Builder, numTankers:number) {
  builder.addFieldInt32(28, numTankers, 0);
}

static addRevTrack(builder:flatbuffers.Builder, revTrack:boolean) {
  builder.addFieldInt8(29, +revTrack, +false);
}

static addShortTrack(builder:flatbuffers.Builder, shortTrack:boolean) {
  builder.addFieldInt8(30, +shortTrack, +false);
}

static addCancelled(builder:flatbuffers.Builder, cancelled:boolean) {
  builder.addFieldInt8(31, +cancelled, +false);
}

static addTankers(builder:flatbuffers.Builder, tankersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, tankersOffset, 0);
}

static createTankersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTankersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addReceivers(builder:flatbuffers.Builder, receiversOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, receiversOffset, 0);
}

static createReceiversVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startReceiversVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRemarks(builder:flatbuffers.Builder, remarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, remarksOffset, 0);
}

static createRemarksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRemarksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, updatedByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AirEvent_Full_dataMode_Enum) {
  builder.addFieldInt8(43, dataMode, AirEvent_Full_dataMode_Enum.REAL);
}

static endAirEvent_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirEvent_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRE');
}

static finishSizePrefixedAirEvent_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRE', true);
}

static createAirEvent_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, idSortieOffset:flatbuffers.Offset, idMissionOffset:flatbuffers.Offset, externalAirEventIdOffset:flatbuffers.Offset, legNum:number, locationOffset:flatbuffers.Offset, arrPurposeOffset:flatbuffers.Offset, plannedArrTimeOffset:flatbuffers.Offset, estArrTimeOffset:flatbuffers.Offset, actualArrTimeOffset:flatbuffers.Offset, depPurposeOffset:flatbuffers.Offset, plannedDepTimeOffset:flatbuffers.Offset, estDepTimeOffset:flatbuffers.Offset, actualDepTimeOffset:flatbuffers.Offset, externalArtrackIdOffset:flatbuffers.Offset, arTrackIdOffset:flatbuffers.Offset, arTrackNameOffset:flatbuffers.Offset, rzctOffset:flatbuffers.Offset, arctOffset:flatbuffers.Offset, baseAlt:number, priorityOffset:flatbuffers.Offset, trackTime:number, statusCodeOffset:flatbuffers.Offset, rzPointOffset:flatbuffers.Offset, rzTypeOffset:flatbuffers.Offset, arEventTypeOffset:flatbuffers.Offset, numTankers:number, revTrack:boolean, shortTrack:boolean, cancelled:boolean, tankersOffset:flatbuffers.Offset, receiversOffset:flatbuffers.Offset, remarksOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:AirEvent_Full_dataMode_Enum):flatbuffers.Offset {
  AirEvent_Full.startAirEvent_Full(builder);
  AirEvent_Full.addId(builder, idOffset);
  AirEvent_Full.addClassificationMarking(builder, classificationMarkingOffset);
  AirEvent_Full.addType(builder, typeOffset);
  AirEvent_Full.addIdSortie(builder, idSortieOffset);
  AirEvent_Full.addIdMission(builder, idMissionOffset);
  AirEvent_Full.addExternalAirEventId(builder, externalAirEventIdOffset);
  AirEvent_Full.addLegNum(builder, legNum);
  AirEvent_Full.addLocation(builder, locationOffset);
  AirEvent_Full.addArrPurpose(builder, arrPurposeOffset);
  AirEvent_Full.addPlannedArrTime(builder, plannedArrTimeOffset);
  AirEvent_Full.addEstArrTime(builder, estArrTimeOffset);
  AirEvent_Full.addActualArrTime(builder, actualArrTimeOffset);
  AirEvent_Full.addDepPurpose(builder, depPurposeOffset);
  AirEvent_Full.addPlannedDepTime(builder, plannedDepTimeOffset);
  AirEvent_Full.addEstDepTime(builder, estDepTimeOffset);
  AirEvent_Full.addActualDepTime(builder, actualDepTimeOffset);
  AirEvent_Full.addExternalArtrackId(builder, externalArtrackIdOffset);
  AirEvent_Full.addArTrackId(builder, arTrackIdOffset);
  AirEvent_Full.addArTrackName(builder, arTrackNameOffset);
  AirEvent_Full.addRzct(builder, rzctOffset);
  AirEvent_Full.addArct(builder, arctOffset);
  AirEvent_Full.addBaseAlt(builder, baseAlt);
  AirEvent_Full.addPriority(builder, priorityOffset);
  AirEvent_Full.addTrackTime(builder, trackTime);
  AirEvent_Full.addStatusCode(builder, statusCodeOffset);
  AirEvent_Full.addRzPoint(builder, rzPointOffset);
  AirEvent_Full.addRzType(builder, rzTypeOffset);
  AirEvent_Full.addArEventType(builder, arEventTypeOffset);
  AirEvent_Full.addNumTankers(builder, numTankers);
  AirEvent_Full.addRevTrack(builder, revTrack);
  AirEvent_Full.addShortTrack(builder, shortTrack);
  AirEvent_Full.addCancelled(builder, cancelled);
  AirEvent_Full.addTankers(builder, tankersOffset);
  AirEvent_Full.addReceivers(builder, receiversOffset);
  AirEvent_Full.addRemarks(builder, remarksOffset);
  AirEvent_Full.addCreatedAt(builder, createdAtOffset);
  AirEvent_Full.addCreatedBy(builder, createdByOffset);
  AirEvent_Full.addUpdatedAt(builder, updatedAtOffset);
  AirEvent_Full.addUpdatedBy(builder, updatedByOffset);
  AirEvent_Full.addSourceDl(builder, sourceDlOffset);
  AirEvent_Full.addSource(builder, sourceOffset);
  AirEvent_Full.addOrigin(builder, originOffset);
  AirEvent_Full.addOrigNetwork(builder, origNetworkOffset);
  AirEvent_Full.addDataMode(builder, dataMode);
  return AirEvent_Full.endAirEvent_Full(builder);
}

unpack(): AirEvent_FullT {
  return new AirEvent_FullT(
    this.id(),
    this.classificationMarking(),
    this.type(),
    this.idSortie(),
    this.idMission(),
    this.externalAirEventId(),
    this.legNum(),
    this.location(),
    this.arrPurpose(),
    this.plannedArrTime(),
    this.estArrTime(),
    this.actualArrTime(),
    this.depPurpose(),
    this.plannedDepTime(),
    this.estDepTime(),
    this.actualDepTime(),
    this.externalArtrackId(),
    this.arTrackId(),
    this.arTrackName(),
    this.rzct(),
    this.arct(),
    this.baseAlt(),
    this.priority(),
    this.trackTime(),
    this.statusCode(),
    this.rzPoint(),
    this.rzType(),
    this.arEventType(),
    this.numTankers(),
    this.revTrack(),
    this.shortTrack(),
    this.cancelled(),
    this.bb!.createScalarList<string>(this.tankers.bind(this), this.tankers_Length()),
    this.bb!.createScalarList<string>(this.receivers.bind(this), this.receivers_Length()),
    this.bb!.createScalarList<string>(this.remarks.bind(this), this.remarks_Length()),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: AirEvent_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.type = this.type();
  _o.idSortie = this.idSortie();
  _o.idMission = this.idMission();
  _o.externalAirEventId = this.externalAirEventId();
  _o.legNum = this.legNum();
  _o.location = this.location();
  _o.arrPurpose = this.arrPurpose();
  _o.plannedArrTime = this.plannedArrTime();
  _o.estArrTime = this.estArrTime();
  _o.actualArrTime = this.actualArrTime();
  _o.depPurpose = this.depPurpose();
  _o.plannedDepTime = this.plannedDepTime();
  _o.estDepTime = this.estDepTime();
  _o.actualDepTime = this.actualDepTime();
  _o.externalARTrackId = this.externalArtrackId();
  _o.arTrackId = this.arTrackId();
  _o.arTrackName = this.arTrackName();
  _o.rzct = this.rzct();
  _o.arct = this.arct();
  _o.baseAlt = this.baseAlt();
  _o.priority = this.priority();
  _o.trackTime = this.trackTime();
  _o.statusCode = this.statusCode();
  _o.rzPoint = this.rzPoint();
  _o.rzType = this.rzType();
  _o.arEventType = this.arEventType();
  _o.numTankers = this.numTankers();
  _o.revTrack = this.revTrack();
  _o.shortTrack = this.shortTrack();
  _o.cancelled = this.cancelled();
  _o.tankers = this.bb!.createScalarList<string>(this.tankers.bind(this), this.tankers_Length());
  _o.receivers = this.bb!.createScalarList<string>(this.receivers.bind(this), this.receivers_Length());
  _o.remarks = this.bb!.createScalarList<string>(this.remarks.bind(this), this.remarks_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class AirEvent_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public idSortie: string|Uint8Array|null = null,
  public idMission: string|Uint8Array|null = null,
  public externalAirEventId: string|Uint8Array|null = null,
  public legNum: number = 0,
  public location: string|Uint8Array|null = null,
  public arrPurpose: string|Uint8Array|null = null,
  public plannedArrTime: string|Uint8Array|null = null,
  public estArrTime: string|Uint8Array|null = null,
  public actualArrTime: string|Uint8Array|null = null,
  public depPurpose: string|Uint8Array|null = null,
  public plannedDepTime: string|Uint8Array|null = null,
  public estDepTime: string|Uint8Array|null = null,
  public actualDepTime: string|Uint8Array|null = null,
  public externalARTrackId: string|Uint8Array|null = null,
  public arTrackId: string|Uint8Array|null = null,
  public arTrackName: string|Uint8Array|null = null,
  public rzct: string|Uint8Array|null = null,
  public arct: string|Uint8Array|null = null,
  public baseAlt: number = 0.0,
  public priority: string|Uint8Array|null = null,
  public trackTime: number = 0.0,
  public statusCode: string|Uint8Array|null = null,
  public rzPoint: string|Uint8Array|null = null,
  public rzType: string|Uint8Array|null = null,
  public arEventType: string|Uint8Array|null = null,
  public numTankers: number = 0,
  public revTrack: boolean = false,
  public shortTrack: boolean = false,
  public cancelled: boolean = false,
  public tankers: (string)[] = [],
  public receivers: (string)[] = [],
  public remarks: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: AirEvent_Full_dataMode_Enum = AirEvent_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const idSortie = (this.idSortie !== null ? builder.createString(this.idSortie!) : 0);
  const idMission = (this.idMission !== null ? builder.createString(this.idMission!) : 0);
  const externalAirEventId = (this.externalAirEventId !== null ? builder.createString(this.externalAirEventId!) : 0);
  const location = (this.location !== null ? builder.createString(this.location!) : 0);
  const arrPurpose = (this.arrPurpose !== null ? builder.createString(this.arrPurpose!) : 0);
  const plannedArrTime = (this.plannedArrTime !== null ? builder.createString(this.plannedArrTime!) : 0);
  const estArrTime = (this.estArrTime !== null ? builder.createString(this.estArrTime!) : 0);
  const actualArrTime = (this.actualArrTime !== null ? builder.createString(this.actualArrTime!) : 0);
  const depPurpose = (this.depPurpose !== null ? builder.createString(this.depPurpose!) : 0);
  const plannedDepTime = (this.plannedDepTime !== null ? builder.createString(this.plannedDepTime!) : 0);
  const estDepTime = (this.estDepTime !== null ? builder.createString(this.estDepTime!) : 0);
  const actualDepTime = (this.actualDepTime !== null ? builder.createString(this.actualDepTime!) : 0);
  const externalARTrackId = (this.externalARTrackId !== null ? builder.createString(this.externalARTrackId!) : 0);
  const arTrackId = (this.arTrackId !== null ? builder.createString(this.arTrackId!) : 0);
  const arTrackName = (this.arTrackName !== null ? builder.createString(this.arTrackName!) : 0);
  const rzct = (this.rzct !== null ? builder.createString(this.rzct!) : 0);
  const arct = (this.arct !== null ? builder.createString(this.arct!) : 0);
  const priority = (this.priority !== null ? builder.createString(this.priority!) : 0);
  const statusCode = (this.statusCode !== null ? builder.createString(this.statusCode!) : 0);
  const rzPoint = (this.rzPoint !== null ? builder.createString(this.rzPoint!) : 0);
  const rzType = (this.rzType !== null ? builder.createString(this.rzType!) : 0);
  const arEventType = (this.arEventType !== null ? builder.createString(this.arEventType!) : 0);
  const tankers = AirEvent_Full.createTankersVector(builder, builder.createObjectOffsetList(this.tankers));
  const receivers = AirEvent_Full.createReceiversVector(builder, builder.createObjectOffsetList(this.receivers));
  const remarks = AirEvent_Full.createRemarksVector(builder, builder.createObjectOffsetList(this.remarks));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return AirEvent_Full.createAirEvent_Full(builder,
    id,
    classificationMarking,
    type,
    idSortie,
    idMission,
    externalAirEventId,
    this.legNum,
    location,
    arrPurpose,
    plannedArrTime,
    estArrTime,
    actualArrTime,
    depPurpose,
    plannedDepTime,
    estDepTime,
    actualDepTime,
    externalARTrackId,
    arTrackId,
    arTrackName,
    rzct,
    arct,
    this.baseAlt,
    priority,
    this.trackTime,
    statusCode,
    rzPoint,
    rzType,
    arEventType,
    this.numTankers,
    this.revTrack,
    this.shortTrack,
    this.cancelled,
    tankers,
    receivers,
    remarks,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    sourceDL,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
