// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Information pertaining to UDL data owners.
 */
export class DataOwner_Abridged implements flatbuffers.IUnpackableObject<DataOwner_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataOwner_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataOwner_Abridged(bb:flatbuffers.ByteBuffer, obj?:DataOwner_Abridged):DataOwner_Abridged {
  return (obj || new DataOwner_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataOwner_Abridged(bb:flatbuffers.ByteBuffer, obj?:DataOwner_Abridged):DataOwner_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataOwner_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DATA');
}

/**
 * The name of the data owner.
 * Example: /// Example: Data owner name
 * Constraints: Minimum length = 1, Maximum length = 64
 */
doName():string|null
doName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
doName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of organization which this data owner belongs to (e.g. Commercial, Government, Academic, Consortium, etc.).
 * Example: /// Example: Commercial
 * Constraints: Minimum length = 1, Maximum length = 32
 */
ownerType():string|null
ownerType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ownerType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of data this data owner owns (e.g. EPHEMERIS, IMAGERY, MANEUVER, etc.).
 * Example: /// Example: ELSET
 * Constraints: Minimum length = 1, Maximum length = 64
 */
dataType():string|null
dataType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Organization name for the data provider.
 * Example: /// Example: ACME
 * Constraints: Minimum length = 1, Maximum length = 64
 */
provider():string|null
provider(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
provider(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
 * Example: /// Example: US
 * Constraints: Minimum length = 1, Maximum length = 4
 */
countryCode():string|null
countryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the contact for this data owner.
 * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idContact():string|null
idContact(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idContact(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of this data owner.
 * Example: /// Example: Description of this data owner.
 * Constraints: No constraints specified.
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional control required to access this data type from this owner.
 * Example: /// Example: PR-ACME-ELSETS
 * Constraints: Minimum length = 1, Maximum length = 128
 */
control():string|null
control(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
control(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating if the data owner is enabled (if not enabled, they should not appear on the data products screen on the storefront).
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
enabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Boolean indicating if the data owner is coming soon or not yet available.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
comingSoon():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Source of the data.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDataOwner_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addDoName(builder:flatbuffers.Builder, doNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, doNameOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addOwnerType(builder:flatbuffers.Builder, ownerTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, ownerTypeOffset, 0);
}

static addDataType(builder:flatbuffers.Builder, dataTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dataTypeOffset, 0);
}

static addProvider(builder:flatbuffers.Builder, providerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, providerOffset, 0);
}

static addCountryCode(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, countryCodeOffset, 0);
}

static addIdContact(builder:flatbuffers.Builder, idContactOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, idContactOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, descriptionOffset, 0);
}

static addControl(builder:flatbuffers.Builder, controlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, controlOffset, 0);
}

static addEnabled(builder:flatbuffers.Builder, enabled:boolean) {
  builder.addFieldInt8(9, +enabled, +false);
}

static addComingSoon(builder:flatbuffers.Builder, comingSoon:boolean) {
  builder.addFieldInt8(10, +comingSoon, +false);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, sourceOffset, 0);
}

static endDataOwner_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDataOwner_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA');
}

static finishSizePrefixedDataOwner_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA', true);
}

static createDataOwner_Abridged(builder:flatbuffers.Builder, doNameOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, ownerTypeOffset:flatbuffers.Offset, dataTypeOffset:flatbuffers.Offset, providerOffset:flatbuffers.Offset, countryCodeOffset:flatbuffers.Offset, idContactOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, controlOffset:flatbuffers.Offset, enabled:boolean, comingSoon:boolean, sourceOffset:flatbuffers.Offset):flatbuffers.Offset {
  DataOwner_Abridged.startDataOwner_Abridged(builder);
  DataOwner_Abridged.addDoName(builder, doNameOffset);
  DataOwner_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  DataOwner_Abridged.addOwnerType(builder, ownerTypeOffset);
  DataOwner_Abridged.addDataType(builder, dataTypeOffset);
  DataOwner_Abridged.addProvider(builder, providerOffset);
  DataOwner_Abridged.addCountryCode(builder, countryCodeOffset);
  DataOwner_Abridged.addIdContact(builder, idContactOffset);
  DataOwner_Abridged.addDescription(builder, descriptionOffset);
  DataOwner_Abridged.addControl(builder, controlOffset);
  DataOwner_Abridged.addEnabled(builder, enabled);
  DataOwner_Abridged.addComingSoon(builder, comingSoon);
  DataOwner_Abridged.addSource(builder, sourceOffset);
  return DataOwner_Abridged.endDataOwner_Abridged(builder);
}

unpack(): DataOwner_AbridgedT {
  return new DataOwner_AbridgedT(
    this.doName(),
    this.classificationMarking(),
    this.ownerType(),
    this.dataType(),
    this.provider(),
    this.countryCode(),
    this.idContact(),
    this.description(),
    this.control(),
    this.enabled(),
    this.comingSoon(),
    this.source()
  );
}


unpackTo(_o: DataOwner_AbridgedT): void {
  _o.doName = this.doName();
  _o.classificationMarking = this.classificationMarking();
  _o.ownerType = this.ownerType();
  _o.dataType = this.dataType();
  _o.provider = this.provider();
  _o.countryCode = this.countryCode();
  _o.idContact = this.idContact();
  _o.description = this.description();
  _o.control = this.control();
  _o.enabled = this.enabled();
  _o.comingSoon = this.comingSoon();
  _o.source = this.source();
}
}

export class DataOwner_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public doName: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public ownerType: string|Uint8Array|null = null,
  public dataType: string|Uint8Array|null = null,
  public provider: string|Uint8Array|null = null,
  public countryCode: string|Uint8Array|null = null,
  public idContact: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public control: string|Uint8Array|null = null,
  public enabled: boolean = false,
  public comingSoon: boolean = false,
  public source: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const doName = (this.doName !== null ? builder.createString(this.doName!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const ownerType = (this.ownerType !== null ? builder.createString(this.ownerType!) : 0);
  const dataType = (this.dataType !== null ? builder.createString(this.dataType!) : 0);
  const provider = (this.provider !== null ? builder.createString(this.provider!) : 0);
  const countryCode = (this.countryCode !== null ? builder.createString(this.countryCode!) : 0);
  const idContact = (this.idContact !== null ? builder.createString(this.idContact!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const control = (this.control !== null ? builder.createString(this.control!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);

  return DataOwner_Abridged.createDataOwner_Abridged(builder,
    doName,
    classificationMarking,
    ownerType,
    dataType,
    provider,
    countryCode,
    idContact,
    description,
    control,
    this.enabled,
    this.comingSoon,
    source
  );
}
}
