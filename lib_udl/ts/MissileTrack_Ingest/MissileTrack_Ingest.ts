// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MissileTrack_Ingest_dataMode_Enum } from './MissileTrack_Ingest_dataMode_Enum.js';
import { MissileTrack_Ingest_env_Enum } from './MissileTrack_Ingest_env_Enum.js';
import { MissileTrack_Ingest_objIdent_Enum } from './MissileTrack_Ingest_objIdent_Enum.js';


/**
 * /// These services provide operations for querying of all available missile track details and amplifying missile data. A missile track is a position and optionally a heading/velocity of an object across all environments at a particular timestamp. It also includes optional information regarding the identity/type of missile, impact location, launch location and other amplifying object data, if known.
 */
export class MissileTrack_Ingest implements flatbuffers.IUnpackableObject<MissileTrack_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MissileTrack_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMissileTrack_Ingest(bb:flatbuffers.ByteBuffer, obj?:MissileTrack_Ingest):MissileTrack_Ingest {
  return (obj || new MissileTrack_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMissileTrack_Ingest(bb:flatbuffers.ByteBuffer, obj?:MissileTrack_Ingest):MissileTrack_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MissileTrack_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MISS');
}

/**
 * Unique identifier of the record, auto-generated by the system if not provided on create operations.
 * Example: /// Example: MissileTrack_ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of external message from which this request originated.
 * Example: /// Example: MSG-TYPE
 * Constraints: Minimum length = 0, Maximum length = 16
 */
msgType():string|null
msgType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The message subtype is a finer grain categorization of message types as many messages can contain a variety of data content within the same structure.  Examples include but are not limited to Initial, Final, Launch, Update, etc.  Users should consult the appropriate documentation, based on the message type, for the definitions of the subtypes that apply to that message.
 * Example: /// Example: Update
 * Constraints: Minimum length = 0, Maximum length = 32
 */
msgSubType():string|null
msgSubType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgSubType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-04-25T08:17:01.346Z
 * Constraints: No constraints specified.
 */
msgCreateDate():string|null
msgCreateDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgCreateDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
 *  AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
 *  LAND: On the surface of dry land.
 *  SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
 *  SURFACE: On the surface of a body of water.
 *  SUBSURFACE: Below the surface of a body of water.
 *  UNKNOWN: Environment is not known.
 * Example: /// Example: AIR
 * Constraints: Minimum length = 0, Maximum length = 16
 */
env():MissileTrack_Ingest_env_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MissileTrack_Ingest_env_Enum.AIR;
}

/**
 * The type of object to which this record refers. The object type may be updated in later records based on assessment of additional data.
 * Example: /// Example: Ballistic
 * Constraints: Minimum length = 0, Maximum length = 32
 */
objType():string|null
objType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Confidence of the object type, 0-100.
 * Example: /// Example: 90
 * Constraints: No constraints specified.
 */
objTypeConf():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Space Platform field along with the Space Activity field further defines the identity of a Space track (examples: SATELLITE, WEAPON, PATROL). The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
 * Example: /// Example: WEAPON
 * Constraints: Minimum length = 0, Maximum length = 32
 */
objPlat():string|null
objPlat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objPlat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
 *  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
 *  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
 *  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
 *  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
 *  PENDING: Track object which has not been evaluated.
 *  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
 *  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
 * Example: /// Example: FRIEND
 * Constraints: Minimum length = 0, Maximum length = 32
 */
objIdent():MissileTrack_Ingest_objIdent_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MissileTrack_Ingest_objIdent_Enum.ASSUMED_FRIEND;
}

/**
 * Space amplification indicates additional information on the space environment being reported (examples: NUCLEAR WARHEAD, FUEL-AIR EXPLOSIVE WARHEAD, DEBRIS).
 * Example: /// Example: NUCLEAR WARHEAD
 * Constraints: Minimum length = 0, Maximum length = 32
 */
spaceAmp():string|null
spaceAmp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spaceAmp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Space activity (examples: RECONNAISSANCE, ANTISPACE WARFARE, TELEVISION). The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
 * Example: /// Example: HOLDING
 * Constraints: Minimum length = 0, Maximum length = 32
 */
objAct():string|null
objAct(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objAct(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specific type of point or track with an environment of space.
 * Example: /// Example: SS-21_MOD_2_CRBM
 * Constraints: Minimum length = 0, Maximum length = 32
 */
spaceSpecType():string|null
spaceSpecType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spaceSpecType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM. 
 * &nbsp;SRBM - Short-Range Ballistic Missile
 * &nbsp;MRBM - Medium-Range Ballistic Missile
 * &nbsp;IRBM - Intermediate-Range Ballistic Missile
 * &nbsp;LRBM - Long-Range Ballistic Missile
 * &nbsp;ICBM - Intercontinental Ballistic Missile
 * &nbsp;SLBM - Submarine-Launched Ballistic Missile.
 * Example: /// Example: SLBM
 * Constraints: Minimum length = 0, Maximum length = 16
 */
acftSubType():string|null
acftSubType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
acftSubType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Track name.
 * Example: /// Example: TRACK-NAME
 * Constraints: Minimum length = 0, Maximum length = 48
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The call sign currently assigned to the track object.
 * Example: /// Example: Charlie
 * Constraints: Minimum length = 0, Maximum length = 24
 */
callSign():string|null
callSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates whether or not the missile is considered lost.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
lostTrkInd():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Track ID within the originating system.
 * Example: /// Example: 102288
 * Constraints: Minimum length = 0, Maximum length = 36
 */
trackId():string|null
trackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Track ID of the parent track, within the originating system, from which the track was developed.
 * Example: /// Example: 102288
 * Constraints: Minimum length = 0, Maximum length = 36
 */
parentTrackId():string|null
parentTrackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
parentTrackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Track ID for the source of the missile-unique identifier.
 * Example: /// Example: MUID-SRC-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
muidSrcTrk():string|null
muidSrcTrk(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
muidSrcTrk(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the missile-unique identifier (MUID).
 * Example: /// Example: MUID-SRC
 * Constraints: Minimum length = 0, Maximum length = 36
 */
muidSrc():string|null
muidSrc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
muidSrc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A track may be designated as a non-alert track or an alert track.
 * Examples include but are not limited to:
 * &nbsp;Non-alert tracks – choose None (Blank).
 * &nbsp;Alert tracks – enter the proper alert classification:
 * &nbsp;HIT - High Interest Track
 * &nbsp;TGT - Target
 * &nbsp;SUS - Suspect Carrier
 * &nbsp;NSP - Cleared Suspect.
 * Example: /// Example: HIT
 * Constraints: Minimum length = 0, Maximum length = 4
 */
alert():string|null
alert(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
alert(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Missile status enumeration examples include but are not limited to:
 * &nbsp;AT LAUNCH 
 * &nbsp;AT OBSERVATION 
 * &nbsp;FLYING 
 * &nbsp;IMPACTED 
 * &nbsp;LOST 
 * &nbsp;STALE
 * &nbsp;DEBRIS.
 * Example: /// Example: AT LAUNCH
 * Constraints: Minimum length = 0, Maximum length = 32
 */
mslStatus():string|null
mslStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mslStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The receipt time of the data by the processing system, in ISO8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
ts():string|null
ts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
 * Example: /// Example: ELLIPSE
 * Constraints: Minimum length = 0, Maximum length = 40
 */
aouRptType():string|null
aouRptType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aouRptType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
 * &nbsp;ELLIPSE:
 * &nbsp;&nbsp;brg - orientation in degrees of the ellipse
 * &nbsp;&nbsp;a1 - semi-major axis in kilometers
 * &nbsp;&nbsp;a2 - semi-minor axis in kilometers
 * &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
 * &nbsp;&nbsp;brg - orientation in degrees of the bearing box
 * &nbsp;&nbsp;a1 - length of bearing box in kilometers
 * &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
 * &nbsp;OTHER (All other type values):
 * &nbsp;&nbsp;brg - line of bearing in degrees true
 * &nbsp;&nbsp;a1 - bearing error in degrees
 * &nbsp;&nbsp;a2 - estimated range in kilometers.
 * Example: /// Example: [34.3, 26.5, 1.2]
 * Constraints: No constraints specified.
 */
aouRptData(index: number):string
aouRptData(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
aouRptData(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

aouRptDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The percentage of time that the estimated AoU will "cover" the true position of the track.
 * Example: /// Example: 90.64
 * Constraints: No constraints specified.
 */
containment():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
 * Example: /// Example: 0.95
 * Constraints: No constraints specified.
 */
trkConf():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track, with higher values indicating higher track quality; i.e., lower errors in reported position.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
trkQual():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Angle of elevation/depression between observer and missile in degrees.
 * Example: /// Example: 15.2
 * Constraints: No constraints specified.
 */
angElev():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last report type received from the sensor (for example, OBSBO = observation burnout).
 * Example: /// Example: OBSBO
 * Constraints: Minimum length = 0, Maximum length = 64
 */
senMode():string|null
senMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
senMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source code for source of information used to detect track.
 * Example: /// Example: S1
 * Constraints: Minimum length = 0, Maximum length = 64
 */
infoSource():string|null
infoSource(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
infoSource(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates whether or not the missile is currently in a state of boosting.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
boosting():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Azimuth corridor reference point latitude.
 * Example: /// Example: 19.88550102
 * Constraints: No constraints specified.
 */
polarSingLocLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Azimuth corridor reference point longitude.
 * Example: /// Example: 46.74596844
 * Constraints: No constraints specified.
 */
polarSingLocLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Indicates whether or not a track has an emergency.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
emgInd():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The drop-point indicator setting.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
dropPtInd():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Confidence level of the amplifying characteristics. Values range from 0 to 6.
 * Example: /// Example: 6
 * Constraints: No constraints specified.
 */
spaceAmpConf():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Missile launch timestamp in ISO8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
launchTime():string|null
launchTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 19.88550102
 * Constraints: No constraints specified.
 */
launchLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 46.74596844
 * Constraints: No constraints specified.
 */
launchLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Missile azimuth corridor data.
 * Example: /// Example: 12.876
 * Constraints: No constraints specified.
 */
azCorr():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Track point burnout altitude relative to WGS-84 ellipsoid, in kilometers.
 * Example: /// Example: 30567.452
 * Constraints: No constraints specified.
 */
burnoutAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
 * Example: /// Example: ELLIPSE
 * Constraints: Minimum length = 0, Maximum length = 40
 */
launchAouType():string|null
launchAouType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchAouType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
 * &nbsp;ELLIPSE:
 * &nbsp;&nbsp;brg - orientation in degrees of the ellipse
 * &nbsp;&nbsp;a1 - semi-major axis in kilometers
 * &nbsp;&nbsp;a2 - semi-minor axis in kilometers
 * &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
 * &nbsp;&nbsp;brg - orientation in degrees of the bearing box
 * &nbsp;&nbsp;a1 - length of bearing box in kilometers
 * &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
 * &nbsp;OTHER (All other type values):
 * &nbsp;&nbsp;brg - line of bearing in degrees true
 * &nbsp;&nbsp;a1 - bearing error in degrees
 * &nbsp;&nbsp;a2 - estimated range in kilometers.
 * Example: /// Example: [1.23, 2.34, 3.45]
 * Constraints: No constraints specified.
 */
launchAouData(index: number):string
launchAouData(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
launchAouData(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

launchAouDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Estimated time of impact timestamp in ISO8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
impactTime():string|null
impactTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
impactTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 latitude of the missile object impact point, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 19.88550102
 * Constraints: No constraints specified.
 */
impactLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the missile object impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 46.74596844
 * Constraints: No constraints specified.
 */
impactLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
 * Example: /// Example: ELLIPSE
 * Constraints: Minimum length = 0, Maximum length = 40
 */
impactAouType():string|null
impactAouType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
impactAouType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
 * &nbsp;ELLIPSE:
 * &nbsp;&nbsp;brg - orientation in degrees of the ellipse
 * &nbsp;&nbsp;a1 - semi-major axis in kilometers
 * &nbsp;&nbsp;a2 - semi-minor axis in kilometers
 * &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
 * &nbsp;&nbsp;brg - orientation in degrees of the bearing box
 * &nbsp;&nbsp;a1 - length of bearing box in kilometers
 * &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
 * &nbsp;OTHER (All other type values):
 * &nbsp;&nbsp;brg - line of bearing in degrees true
 * &nbsp;&nbsp;a1 - bearing error in degrees
 * &nbsp;&nbsp;a2 - estimated range in kilometers.
 * Example: /// Example: [34.3, 26.5, 1.2]
 * Constraints: No constraints specified.
 */
impactAouData(index: number):string
impactAouData(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
impactAouData(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

impactAouDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of MissileTrackVector objects. Missile track vectors are cartesian vectors of position, velocity, and acceleration that, together with their time, 'epoch', uniquely determine the trajectory of the missile. ECEF is the preferred coordinate frame but in some cases data may be in another frame as specified by 'referenceFrame', depending on the provider.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
vectors(index: number):string
vectors(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
vectors(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

vectorsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database.
 * Example: /// Example: 2021-02-25T12:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():MissileTrack_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MissileTrack_Ingest_dataMode_Enum.REAL;
}

static startMissileTrack_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(57);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addMsgType(builder:flatbuffers.Builder, msgTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, msgTypeOffset, 0);
}

static addMsgSubType(builder:flatbuffers.Builder, msgSubTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, msgSubTypeOffset, 0);
}

static addMsgCreateDate(builder:flatbuffers.Builder, msgCreateDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, msgCreateDateOffset, 0);
}

static addEnv(builder:flatbuffers.Builder, env:MissileTrack_Ingest_env_Enum) {
  builder.addFieldInt8(5, env, MissileTrack_Ingest_env_Enum.AIR);
}

static addObjType(builder:flatbuffers.Builder, objTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, objTypeOffset, 0);
}

static addObjTypeConf(builder:flatbuffers.Builder, objTypeConf:number) {
  builder.addFieldInt32(7, objTypeConf, 0);
}

static addObjPlat(builder:flatbuffers.Builder, objPlatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, objPlatOffset, 0);
}

static addObjIdent(builder:flatbuffers.Builder, objIdent:MissileTrack_Ingest_objIdent_Enum) {
  builder.addFieldInt8(9, objIdent, MissileTrack_Ingest_objIdent_Enum.ASSUMED_FRIEND);
}

static addSpaceAmp(builder:flatbuffers.Builder, spaceAmpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, spaceAmpOffset, 0);
}

static addObjAct(builder:flatbuffers.Builder, objActOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, objActOffset, 0);
}

static addSpaceSpecType(builder:flatbuffers.Builder, spaceSpecTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, spaceSpecTypeOffset, 0);
}

static addAcftSubType(builder:flatbuffers.Builder, acftSubTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, acftSubTypeOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, nameOffset, 0);
}

static addCallSign(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, callSignOffset, 0);
}

static addLostTrkInd(builder:flatbuffers.Builder, lostTrkInd:boolean) {
  builder.addFieldInt8(16, +lostTrkInd, +false);
}

static addTrackId(builder:flatbuffers.Builder, trackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, trackIdOffset, 0);
}

static addParentTrackId(builder:flatbuffers.Builder, parentTrackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, parentTrackIdOffset, 0);
}

static addMuidSrcTrk(builder:flatbuffers.Builder, muidSrcTrkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, muidSrcTrkOffset, 0);
}

static addMuidSrc(builder:flatbuffers.Builder, muidSrcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, muidSrcOffset, 0);
}

static addAlert(builder:flatbuffers.Builder, alertOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, alertOffset, 0);
}

static addMslStatus(builder:flatbuffers.Builder, mslStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, mslStatusOffset, 0);
}

static addTs(builder:flatbuffers.Builder, tsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, tsOffset, 0);
}

static addAouRptType(builder:flatbuffers.Builder, aouRptTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, aouRptTypeOffset, 0);
}

static addAouRptData(builder:flatbuffers.Builder, aouRptDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, aouRptDataOffset, 0);
}

static createAouRptDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAouRptDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addContainment(builder:flatbuffers.Builder, containment:number) {
  builder.addFieldFloat64(26, containment, 0.0);
}

static addTrkConf(builder:flatbuffers.Builder, trkConf:number) {
  builder.addFieldFloat64(27, trkConf, 0.0);
}

static addTrkQual(builder:flatbuffers.Builder, trkQual:number) {
  builder.addFieldInt32(28, trkQual, 0);
}

static addAngElev(builder:flatbuffers.Builder, angElev:number) {
  builder.addFieldFloat64(29, angElev, 0.0);
}

static addSenMode(builder:flatbuffers.Builder, senModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, senModeOffset, 0);
}

static addInfoSource(builder:flatbuffers.Builder, infoSourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, infoSourceOffset, 0);
}

static addBoosting(builder:flatbuffers.Builder, boosting:boolean) {
  builder.addFieldInt8(32, +boosting, +false);
}

static addPolarSingLocLat(builder:flatbuffers.Builder, polarSingLocLat:number) {
  builder.addFieldFloat64(33, polarSingLocLat, 0.0);
}

static addPolarSingLocLon(builder:flatbuffers.Builder, polarSingLocLon:number) {
  builder.addFieldFloat64(34, polarSingLocLon, 0.0);
}

static addEmgInd(builder:flatbuffers.Builder, emgInd:boolean) {
  builder.addFieldInt8(35, +emgInd, +false);
}

static addDropPtInd(builder:flatbuffers.Builder, dropPtInd:boolean) {
  builder.addFieldInt8(36, +dropPtInd, +false);
}

static addSpaceAmpConf(builder:flatbuffers.Builder, spaceAmpConf:number) {
  builder.addFieldInt32(37, spaceAmpConf, 0);
}

static addLaunchTime(builder:flatbuffers.Builder, launchTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, launchTimeOffset, 0);
}

static addLaunchLat(builder:flatbuffers.Builder, launchLat:number) {
  builder.addFieldFloat64(39, launchLat, 0.0);
}

static addLaunchLon(builder:flatbuffers.Builder, launchLon:number) {
  builder.addFieldFloat64(40, launchLon, 0.0);
}

static addAzCorr(builder:flatbuffers.Builder, azCorr:number) {
  builder.addFieldFloat64(41, azCorr, 0.0);
}

static addBurnoutAlt(builder:flatbuffers.Builder, burnoutAlt:number) {
  builder.addFieldFloat64(42, burnoutAlt, 0.0);
}

static addLaunchAouType(builder:flatbuffers.Builder, launchAouTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, launchAouTypeOffset, 0);
}

static addLaunchAouData(builder:flatbuffers.Builder, launchAouDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, launchAouDataOffset, 0);
}

static createLaunchAouDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLaunchAouDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addImpactTime(builder:flatbuffers.Builder, impactTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, impactTimeOffset, 0);
}

static addImpactLat(builder:flatbuffers.Builder, impactLat:number) {
  builder.addFieldFloat64(46, impactLat, 0.0);
}

static addImpactLon(builder:flatbuffers.Builder, impactLon:number) {
  builder.addFieldFloat64(47, impactLon, 0.0);
}

static addImpactAouType(builder:flatbuffers.Builder, impactAouTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, impactAouTypeOffset, 0);
}

static addImpactAouData(builder:flatbuffers.Builder, impactAouDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, impactAouDataOffset, 0);
}

static createImpactAouDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startImpactAouDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addVectors(builder:flatbuffers.Builder, vectorsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, vectorsOffset, 0);
}

static createVectorsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVectorsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, origNetworkOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:MissileTrack_Ingest_dataMode_Enum) {
  builder.addFieldInt8(56, dataMode, MissileTrack_Ingest_dataMode_Enum.REAL);
}

static endMissileTrack_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMissileTrack_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MISS');
}

static finishSizePrefixedMissileTrack_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MISS', true);
}

static createMissileTrack_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, msgTypeOffset:flatbuffers.Offset, msgSubTypeOffset:flatbuffers.Offset, msgCreateDateOffset:flatbuffers.Offset, env:MissileTrack_Ingest_env_Enum, objTypeOffset:flatbuffers.Offset, objTypeConf:number, objPlatOffset:flatbuffers.Offset, objIdent:MissileTrack_Ingest_objIdent_Enum, spaceAmpOffset:flatbuffers.Offset, objActOffset:flatbuffers.Offset, spaceSpecTypeOffset:flatbuffers.Offset, acftSubTypeOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, callSignOffset:flatbuffers.Offset, lostTrkInd:boolean, trackIdOffset:flatbuffers.Offset, parentTrackIdOffset:flatbuffers.Offset, muidSrcTrkOffset:flatbuffers.Offset, muidSrcOffset:flatbuffers.Offset, alertOffset:flatbuffers.Offset, mslStatusOffset:flatbuffers.Offset, tsOffset:flatbuffers.Offset, aouRptTypeOffset:flatbuffers.Offset, aouRptDataOffset:flatbuffers.Offset, containment:number, trkConf:number, trkQual:number, angElev:number, senModeOffset:flatbuffers.Offset, infoSourceOffset:flatbuffers.Offset, boosting:boolean, polarSingLocLat:number, polarSingLocLon:number, emgInd:boolean, dropPtInd:boolean, spaceAmpConf:number, launchTimeOffset:flatbuffers.Offset, launchLat:number, launchLon:number, azCorr:number, burnoutAlt:number, launchAouTypeOffset:flatbuffers.Offset, launchAouDataOffset:flatbuffers.Offset, impactTimeOffset:flatbuffers.Offset, impactLat:number, impactLon:number, impactAouTypeOffset:flatbuffers.Offset, impactAouDataOffset:flatbuffers.Offset, vectorsOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:MissileTrack_Ingest_dataMode_Enum):flatbuffers.Offset {
  MissileTrack_Ingest.startMissileTrack_Ingest(builder);
  MissileTrack_Ingest.addId(builder, idOffset);
  MissileTrack_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  MissileTrack_Ingest.addMsgType(builder, msgTypeOffset);
  MissileTrack_Ingest.addMsgSubType(builder, msgSubTypeOffset);
  MissileTrack_Ingest.addMsgCreateDate(builder, msgCreateDateOffset);
  MissileTrack_Ingest.addEnv(builder, env);
  MissileTrack_Ingest.addObjType(builder, objTypeOffset);
  MissileTrack_Ingest.addObjTypeConf(builder, objTypeConf);
  MissileTrack_Ingest.addObjPlat(builder, objPlatOffset);
  MissileTrack_Ingest.addObjIdent(builder, objIdent);
  MissileTrack_Ingest.addSpaceAmp(builder, spaceAmpOffset);
  MissileTrack_Ingest.addObjAct(builder, objActOffset);
  MissileTrack_Ingest.addSpaceSpecType(builder, spaceSpecTypeOffset);
  MissileTrack_Ingest.addAcftSubType(builder, acftSubTypeOffset);
  MissileTrack_Ingest.addName(builder, nameOffset);
  MissileTrack_Ingest.addCallSign(builder, callSignOffset);
  MissileTrack_Ingest.addLostTrkInd(builder, lostTrkInd);
  MissileTrack_Ingest.addTrackId(builder, trackIdOffset);
  MissileTrack_Ingest.addParentTrackId(builder, parentTrackIdOffset);
  MissileTrack_Ingest.addMuidSrcTrk(builder, muidSrcTrkOffset);
  MissileTrack_Ingest.addMuidSrc(builder, muidSrcOffset);
  MissileTrack_Ingest.addAlert(builder, alertOffset);
  MissileTrack_Ingest.addMslStatus(builder, mslStatusOffset);
  MissileTrack_Ingest.addTs(builder, tsOffset);
  MissileTrack_Ingest.addAouRptType(builder, aouRptTypeOffset);
  MissileTrack_Ingest.addAouRptData(builder, aouRptDataOffset);
  MissileTrack_Ingest.addContainment(builder, containment);
  MissileTrack_Ingest.addTrkConf(builder, trkConf);
  MissileTrack_Ingest.addTrkQual(builder, trkQual);
  MissileTrack_Ingest.addAngElev(builder, angElev);
  MissileTrack_Ingest.addSenMode(builder, senModeOffset);
  MissileTrack_Ingest.addInfoSource(builder, infoSourceOffset);
  MissileTrack_Ingest.addBoosting(builder, boosting);
  MissileTrack_Ingest.addPolarSingLocLat(builder, polarSingLocLat);
  MissileTrack_Ingest.addPolarSingLocLon(builder, polarSingLocLon);
  MissileTrack_Ingest.addEmgInd(builder, emgInd);
  MissileTrack_Ingest.addDropPtInd(builder, dropPtInd);
  MissileTrack_Ingest.addSpaceAmpConf(builder, spaceAmpConf);
  MissileTrack_Ingest.addLaunchTime(builder, launchTimeOffset);
  MissileTrack_Ingest.addLaunchLat(builder, launchLat);
  MissileTrack_Ingest.addLaunchLon(builder, launchLon);
  MissileTrack_Ingest.addAzCorr(builder, azCorr);
  MissileTrack_Ingest.addBurnoutAlt(builder, burnoutAlt);
  MissileTrack_Ingest.addLaunchAouType(builder, launchAouTypeOffset);
  MissileTrack_Ingest.addLaunchAouData(builder, launchAouDataOffset);
  MissileTrack_Ingest.addImpactTime(builder, impactTimeOffset);
  MissileTrack_Ingest.addImpactLat(builder, impactLat);
  MissileTrack_Ingest.addImpactLon(builder, impactLon);
  MissileTrack_Ingest.addImpactAouType(builder, impactAouTypeOffset);
  MissileTrack_Ingest.addImpactAouData(builder, impactAouDataOffset);
  MissileTrack_Ingest.addVectors(builder, vectorsOffset);
  MissileTrack_Ingest.addOrigNetwork(builder, origNetworkOffset);
  MissileTrack_Ingest.addCreatedAt(builder, createdAtOffset);
  MissileTrack_Ingest.addCreatedBy(builder, createdByOffset);
  MissileTrack_Ingest.addSource(builder, sourceOffset);
  MissileTrack_Ingest.addOrigin(builder, originOffset);
  MissileTrack_Ingest.addDataMode(builder, dataMode);
  return MissileTrack_Ingest.endMissileTrack_Ingest(builder);
}

unpack(): MissileTrack_IngestT {
  return new MissileTrack_IngestT(
    this.id(),
    this.classificationMarking(),
    this.msgType(),
    this.msgSubType(),
    this.msgCreateDate(),
    this.env(),
    this.objType(),
    this.objTypeConf(),
    this.objPlat(),
    this.objIdent(),
    this.spaceAmp(),
    this.objAct(),
    this.spaceSpecType(),
    this.acftSubType(),
    this.name(),
    this.callSign(),
    this.lostTrkInd(),
    this.trackId(),
    this.parentTrackId(),
    this.muidSrcTrk(),
    this.muidSrc(),
    this.alert(),
    this.mslStatus(),
    this.ts(),
    this.aouRptType(),
    this.bb!.createScalarList<string>(this.aouRptData.bind(this), this.aouRptDataLength()),
    this.containment(),
    this.trkConf(),
    this.trkQual(),
    this.angElev(),
    this.senMode(),
    this.infoSource(),
    this.boosting(),
    this.polarSingLocLat(),
    this.polarSingLocLon(),
    this.emgInd(),
    this.dropPtInd(),
    this.spaceAmpConf(),
    this.launchTime(),
    this.launchLat(),
    this.launchLon(),
    this.azCorr(),
    this.burnoutAlt(),
    this.launchAouType(),
    this.bb!.createScalarList<string>(this.launchAouData.bind(this), this.launchAouDataLength()),
    this.impactTime(),
    this.impactLat(),
    this.impactLon(),
    this.impactAouType(),
    this.bb!.createScalarList<string>(this.impactAouData.bind(this), this.impactAouDataLength()),
    this.bb!.createScalarList<string>(this.vectors.bind(this), this.vectorsLength()),
    this.origNetwork(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode()
  );
}


unpackTo(_o: MissileTrack_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.msgType = this.msgType();
  _o.msgSubType = this.msgSubType();
  _o.msgCreateDate = this.msgCreateDate();
  _o.env = this.env();
  _o.objType = this.objType();
  _o.objTypeConf = this.objTypeConf();
  _o.objPlat = this.objPlat();
  _o.objIdent = this.objIdent();
  _o.spaceAmp = this.spaceAmp();
  _o.objAct = this.objAct();
  _o.spaceSpecType = this.spaceSpecType();
  _o.acftSubType = this.acftSubType();
  _o.name = this.name();
  _o.callSign = this.callSign();
  _o.lostTrkInd = this.lostTrkInd();
  _o.trackId = this.trackId();
  _o.parentTrackId = this.parentTrackId();
  _o.muidSrcTrk = this.muidSrcTrk();
  _o.muidSrc = this.muidSrc();
  _o.alert = this.alert();
  _o.mslStatus = this.mslStatus();
  _o.ts = this.ts();
  _o.aouRptType = this.aouRptType();
  _o.aouRptData = this.bb!.createScalarList<string>(this.aouRptData.bind(this), this.aouRptDataLength());
  _o.containment = this.containment();
  _o.trkConf = this.trkConf();
  _o.trkQual = this.trkQual();
  _o.angElev = this.angElev();
  _o.senMode = this.senMode();
  _o.infoSource = this.infoSource();
  _o.boosting = this.boosting();
  _o.polarSingLocLat = this.polarSingLocLat();
  _o.polarSingLocLon = this.polarSingLocLon();
  _o.emgInd = this.emgInd();
  _o.dropPtInd = this.dropPtInd();
  _o.spaceAmpConf = this.spaceAmpConf();
  _o.launchTime = this.launchTime();
  _o.launchLat = this.launchLat();
  _o.launchLon = this.launchLon();
  _o.azCorr = this.azCorr();
  _o.burnoutAlt = this.burnoutAlt();
  _o.launchAouType = this.launchAouType();
  _o.launchAouData = this.bb!.createScalarList<string>(this.launchAouData.bind(this), this.launchAouDataLength());
  _o.impactTime = this.impactTime();
  _o.impactLat = this.impactLat();
  _o.impactLon = this.impactLon();
  _o.impactAouType = this.impactAouType();
  _o.impactAouData = this.bb!.createScalarList<string>(this.impactAouData.bind(this), this.impactAouDataLength());
  _o.vectors = this.bb!.createScalarList<string>(this.vectors.bind(this), this.vectorsLength());
  _o.origNetwork = this.origNetwork();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
}
}

export class MissileTrack_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public msgType: string|Uint8Array|null = null,
  public msgSubType: string|Uint8Array|null = null,
  public msgCreateDate: string|Uint8Array|null = null,
  public env: MissileTrack_Ingest_env_Enum = MissileTrack_Ingest_env_Enum.AIR,
  public objType: string|Uint8Array|null = null,
  public objTypeConf: number = 0,
  public objPlat: string|Uint8Array|null = null,
  public objIdent: MissileTrack_Ingest_objIdent_Enum = MissileTrack_Ingest_objIdent_Enum.ASSUMED_FRIEND,
  public spaceAmp: string|Uint8Array|null = null,
  public objAct: string|Uint8Array|null = null,
  public spaceSpecType: string|Uint8Array|null = null,
  public acftSubType: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public callSign: string|Uint8Array|null = null,
  public lostTrkInd: boolean = false,
  public trackId: string|Uint8Array|null = null,
  public parentTrackId: string|Uint8Array|null = null,
  public muidSrcTrk: string|Uint8Array|null = null,
  public muidSrc: string|Uint8Array|null = null,
  public alert: string|Uint8Array|null = null,
  public mslStatus: string|Uint8Array|null = null,
  public ts: string|Uint8Array|null = null,
  public aouRptType: string|Uint8Array|null = null,
  public aouRptData: (string)[] = [],
  public containment: number = 0.0,
  public trkConf: number = 0.0,
  public trkQual: number = 0,
  public angElev: number = 0.0,
  public senMode: string|Uint8Array|null = null,
  public infoSource: string|Uint8Array|null = null,
  public boosting: boolean = false,
  public polarSingLocLat: number = 0.0,
  public polarSingLocLon: number = 0.0,
  public emgInd: boolean = false,
  public dropPtInd: boolean = false,
  public spaceAmpConf: number = 0,
  public launchTime: string|Uint8Array|null = null,
  public launchLat: number = 0.0,
  public launchLon: number = 0.0,
  public azCorr: number = 0.0,
  public burnoutAlt: number = 0.0,
  public launchAouType: string|Uint8Array|null = null,
  public launchAouData: (string)[] = [],
  public impactTime: string|Uint8Array|null = null,
  public impactLat: number = 0.0,
  public impactLon: number = 0.0,
  public impactAouType: string|Uint8Array|null = null,
  public impactAouData: (string)[] = [],
  public vectors: (string)[] = [],
  public origNetwork: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: MissileTrack_Ingest_dataMode_Enum = MissileTrack_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const msgType = (this.msgType !== null ? builder.createString(this.msgType!) : 0);
  const msgSubType = (this.msgSubType !== null ? builder.createString(this.msgSubType!) : 0);
  const msgCreateDate = (this.msgCreateDate !== null ? builder.createString(this.msgCreateDate!) : 0);
  const objType = (this.objType !== null ? builder.createString(this.objType!) : 0);
  const objPlat = (this.objPlat !== null ? builder.createString(this.objPlat!) : 0);
  const spaceAmp = (this.spaceAmp !== null ? builder.createString(this.spaceAmp!) : 0);
  const objAct = (this.objAct !== null ? builder.createString(this.objAct!) : 0);
  const spaceSpecType = (this.spaceSpecType !== null ? builder.createString(this.spaceSpecType!) : 0);
  const acftSubType = (this.acftSubType !== null ? builder.createString(this.acftSubType!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const callSign = (this.callSign !== null ? builder.createString(this.callSign!) : 0);
  const trackId = (this.trackId !== null ? builder.createString(this.trackId!) : 0);
  const parentTrackId = (this.parentTrackId !== null ? builder.createString(this.parentTrackId!) : 0);
  const muidSrcTrk = (this.muidSrcTrk !== null ? builder.createString(this.muidSrcTrk!) : 0);
  const muidSrc = (this.muidSrc !== null ? builder.createString(this.muidSrc!) : 0);
  const alert = (this.alert !== null ? builder.createString(this.alert!) : 0);
  const mslStatus = (this.mslStatus !== null ? builder.createString(this.mslStatus!) : 0);
  const ts = (this.ts !== null ? builder.createString(this.ts!) : 0);
  const aouRptType = (this.aouRptType !== null ? builder.createString(this.aouRptType!) : 0);
  const aouRptData = MissileTrack_Ingest.createAouRptDataVector(builder, builder.createObjectOffsetList(this.aouRptData));
  const senMode = (this.senMode !== null ? builder.createString(this.senMode!) : 0);
  const infoSource = (this.infoSource !== null ? builder.createString(this.infoSource!) : 0);
  const launchTime = (this.launchTime !== null ? builder.createString(this.launchTime!) : 0);
  const launchAouType = (this.launchAouType !== null ? builder.createString(this.launchAouType!) : 0);
  const launchAouData = MissileTrack_Ingest.createLaunchAouDataVector(builder, builder.createObjectOffsetList(this.launchAouData));
  const impactTime = (this.impactTime !== null ? builder.createString(this.impactTime!) : 0);
  const impactAouType = (this.impactAouType !== null ? builder.createString(this.impactAouType!) : 0);
  const impactAouData = MissileTrack_Ingest.createImpactAouDataVector(builder, builder.createObjectOffsetList(this.impactAouData));
  const vectors = MissileTrack_Ingest.createVectorsVector(builder, builder.createObjectOffsetList(this.vectors));
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);

  return MissileTrack_Ingest.createMissileTrack_Ingest(builder,
    id,
    classificationMarking,
    msgType,
    msgSubType,
    msgCreateDate,
    this.env,
    objType,
    this.objTypeConf,
    objPlat,
    this.objIdent,
    spaceAmp,
    objAct,
    spaceSpecType,
    acftSubType,
    name,
    callSign,
    this.lostTrkInd,
    trackId,
    parentTrackId,
    muidSrcTrk,
    muidSrc,
    alert,
    mslStatus,
    ts,
    aouRptType,
    aouRptData,
    this.containment,
    this.trkConf,
    this.trkQual,
    this.angElev,
    senMode,
    infoSource,
    this.boosting,
    this.polarSingLocLat,
    this.polarSingLocLon,
    this.emgInd,
    this.dropPtInd,
    this.spaceAmpConf,
    launchTime,
    this.launchLat,
    this.launchLon,
    this.azCorr,
    this.burnoutAlt,
    launchAouType,
    launchAouData,
    impactTime,
    this.impactLat,
    this.impactLon,
    impactAouType,
    impactAouData,
    vectors,
    origNetwork,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode
  );
}
}
