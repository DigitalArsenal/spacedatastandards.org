// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PersonnelRecovery_Ingest_dataMode_Enum } from './personnel-recovery-ingest-data-mode-enum.js';


/**
 * /// Provides information concerning search and rescue operations and other situations involving personnel recovery.
 */
export class PersonnelRecovery_Ingest implements flatbuffers.IUnpackableObject<PersonnelRecovery_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PersonnelRecovery_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPersonnelRecovery_Ingest(bb:flatbuffers.ByteBuffer, obj?:PersonnelRecovery_Ingest):PersonnelRecovery_Ingest {
  return (obj || new PersonnelRecovery_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPersonnelRecovery_Ingest(bb:flatbuffers.ByteBuffer, obj?:PersonnelRecovery_Ingest):PersonnelRecovery_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PersonnelRecovery_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('PERS');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: PERSONNEL_RECOVERY-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies the type of incident resulting in a recovery or evacuation mission.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Emergency Type (e.g. NO STATEMENT, DOWN AIRCRAFT, MAN IN WATER, DITCHING, BAILOUT, DISTRESSED VEHICLE, GROUND INCIDENT, MEDICAL, ISOLATED PERSONS, etc.).
 * Example: /// Example: MEDICAL
 * Constraints: Minimum length = 1, Maximum length = 64
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time stamp of the original personnel recovery message, in ISO 8601 UTC format.
 * Example: /// Example: 2021-10-15T16:00:00.123Z
 * Constraints: No constraints specified.
 */
msgTime():string|null
msgTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID identifying the Personnel Recovery  mission, which should remain the same on subsequent posts related to the same recovery mission.
 * Example: /// Example: RECOV-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
recovId():string|null
recovId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recovId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of a weather report associated with this recovery.
 * Example: /// Example: WEATHER_REPORT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idWeatherReport():string|null
idWeatherReport(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idWeatherReport(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 75.1234
 * Constraints: No constraints specified.
 */
pickupLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 175.1234
 * Constraints: No constraints specified.
 */
pickupLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point eight below ellipsoid.
 * Example: /// Example: 30.1234
 * Constraints: No constraints specified.
 */
pickupAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating the cancellation of this recovery.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
termInd():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The confirmation status of the isolated personnel identity. Intended as, but not constrained to, MIL-STD-6016 J6.1 Authentication Status, Isolated Personnel (NO STATEMENT, AUTHENTICATED, NOT AUTHENTICATED, AUTHENTICATED UNDER DURESS, NOT APPLICABLE):
 * AUTHENTICATED:  Confirmed Friend
 * NOT AUTHENTICATED: Unconfirmed status
 * AUTHENTICATED UNDER DURESS:  Authentication comprised by hostiles.
 * NOT APPLICABLE:  Authentication not required.
 * Example: /// Example: NO STATEMENT
 * Constraints: Minimum length = 0, Maximum length = 36
 */
authStatus():string|null
authStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
authStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The count of persons requiring recovery.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numPersons():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The military classification of the personnel to be recovered. Intended as, but not constrained to, MIL-STD-6016 J6.1 Isolated Personnel Classification (NO STATEMENT, MILITARY, GOVERNMENT CIVILIAN, GOVERNMENT CONTRACTOR, CIVILIAN, MULTIPLE CLASSIFICATIONS).
 * Example: /// Example: CIVILIAN
 * Constraints: Minimum length = 0, Maximum length = 36
 */
milClass():string|null
milClass(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milClass(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The country of origin or political entity of an isolated person subject to rescue or evacuation. If natAlliance is set to 126, then natAlliance1 must be non 0. If natAlliance is any number other than 126, then natAlliance1 will be set to 0 regardless. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s).
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
natAlliance():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Extended country of origin or political entity of an isolated person subject to rescue or evacuation. Specify an entry here only if natAlliance is 126. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s), 1.
 * Example: /// Example: 0
 * Constraints: No constraints specified.
 */
natAlliance1():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The survivor service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVIILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
 * Example: /// Example: NEUTRAL CIVILIAN
 * Constraints: Minimum length = 0, Maximum length = 32
 */
identity():string|null
identity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
identity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
 * Example: /// Example: LL PHONE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
commEq1():string|null
commEq1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
commEq1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
 * Example: /// Example: LL PHONE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
commEq2():string|null
commEq2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
commEq2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
 * Example: /// Example: LL PHONE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
commEq3():string|null
commEq3(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
commEq3(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Transmit voice frequency in 5Hz increments.
 * Example: /// Example: 5.5
 * Constraints: No constraints specified.
 */
txFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Receive voice frequency in 5Hz increments. This field will auto populate with the txFreq value if the post element is null.
 * Example: /// Example: 5.5
 * Constraints: No constraints specified.
 */
rxFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of littered personnel requiring recovery.
 * Example: /// Example: 0
 * Constraints: No constraints specified.
 */
numNonAmbulatory():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of ambulatory personnel requiring recovery.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numAmbulatory():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of injured, but ambulatory, personnel requiring recovery.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
numAmbulatoryInjured():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Survivor radio equipment. Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Type (NO STATEMENT, PRQ7SEL, PRC90, PRC112, PRC112B B1, PRC112C, PRC112D, PRC148 MBITR, PRC148 JEM, PRC149, PRC152, ACRPLB, OTHER).
 * Example: /// Example: NO STATEMENT
 * Constraints: Minimum length = 0, Maximum length = 32
 */
survivorRadio():string|null
survivorRadio(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
survivorRadio(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Preloaded message conveying the situation confronting the isolated person(s). Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Messages (e.g. INJURED CANT MOVE NO KNOWN HOSTILES, INJURED CANT MOVE HOSTILES NEARBY, UNINJURED CANT MOVE HOSTILES NEARBY, UNINJURED NO KNOWN HOSTILES, INJURED LIMITED MOBILITY).
 * Example: /// Example: UNINJURED CANT MOVE HOSTILES NEARBY
 * Constraints: Minimum length = 0, Maximum length = 64
 */
survivorMessages():string|null
survivorMessages(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
survivorMessages(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating whether a radio identifier is reported.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
beaconInd():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The call sign of the personnel to be recovered.
 * Example: /// Example: BADGER
 * Constraints: Minimum length = 0, Maximum length = 128
 */
callSign():string|null
callSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional specific messages received from survivor.
 * Example: /// Example: Additional message from survivor.
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
textMsg():string|null
textMsg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
textMsg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mechanism used to verify the survivors identity.
 * Example: /// Example: PASSPORT
 * Constraints: Minimum length = 0, Maximum length = 64
 */
authMethod():string|null
authMethod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
authMethod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
objectiveAreaInfo():string|null
objectiveAreaInfo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectiveAreaInfo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
executionInfo():string|null
executionInfo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
executionInfo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():PersonnelRecovery_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : PersonnelRecovery_Ingest_dataMode_Enum.REAL;
}

static startPersonnelRecovery_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(38);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, typeOffset, 0);
}

static addMsgTime(builder:flatbuffers.Builder, msgTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, msgTimeOffset, 0);
}

static addRecovId(builder:flatbuffers.Builder, recovIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, recovIdOffset, 0);
}

static addIdWeatherReport(builder:flatbuffers.Builder, idWeatherReportOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idWeatherReportOffset, 0);
}

static addPickupLat(builder:flatbuffers.Builder, pickupLat:number) {
  builder.addFieldFloat64(6, pickupLat, 0.0);
}

static addPickupLon(builder:flatbuffers.Builder, pickupLon:number) {
  builder.addFieldFloat64(7, pickupLon, 0.0);
}

static addPickupAlt(builder:flatbuffers.Builder, pickupAlt:number) {
  builder.addFieldFloat64(8, pickupAlt, 0.0);
}

static addTermInd(builder:flatbuffers.Builder, termInd:boolean) {
  builder.addFieldInt8(9, +termInd, +false);
}

static addAuthStatus(builder:flatbuffers.Builder, authStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, authStatusOffset, 0);
}

static addNumPersons(builder:flatbuffers.Builder, numPersons:number) {
  builder.addFieldInt32(11, numPersons, 0);
}

static addMilClass(builder:flatbuffers.Builder, milClassOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, milClassOffset, 0);
}

static addNatAlliance(builder:flatbuffers.Builder, natAlliance:number) {
  builder.addFieldInt32(13, natAlliance, 0);
}

static addNatAlliance1(builder:flatbuffers.Builder, natAlliance1:number) {
  builder.addFieldInt32(14, natAlliance1, 0);
}

static addIdentity(builder:flatbuffers.Builder, identityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, identityOffset, 0);
}

static addCommEq1(builder:flatbuffers.Builder, commEq1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(16, commEq1Offset, 0);
}

static addCommEq2(builder:flatbuffers.Builder, commEq2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(17, commEq2Offset, 0);
}

static addCommEq3(builder:flatbuffers.Builder, commEq3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(18, commEq3Offset, 0);
}

static addTxFreq(builder:flatbuffers.Builder, txFreq:number) {
  builder.addFieldFloat64(19, txFreq, 0.0);
}

static addRxFreq(builder:flatbuffers.Builder, rxFreq:number) {
  builder.addFieldFloat64(20, rxFreq, 0.0);
}

static addNumNonAmbulatory(builder:flatbuffers.Builder, numNonAmbulatory:number) {
  builder.addFieldInt32(21, numNonAmbulatory, 0);
}

static addNumAmbulatory(builder:flatbuffers.Builder, numAmbulatory:number) {
  builder.addFieldInt32(22, numAmbulatory, 0);
}

static addNumAmbulatoryInjured(builder:flatbuffers.Builder, numAmbulatoryInjured:number) {
  builder.addFieldInt32(23, numAmbulatoryInjured, 0);
}

static addSurvivorRadio(builder:flatbuffers.Builder, survivorRadioOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, survivorRadioOffset, 0);
}

static addSurvivorMessages(builder:flatbuffers.Builder, survivorMessagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, survivorMessagesOffset, 0);
}

static addBeaconInd(builder:flatbuffers.Builder, beaconInd:boolean) {
  builder.addFieldInt8(26, +beaconInd, +false);
}

static addCallSign(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, callSignOffset, 0);
}

static addTextMsg(builder:flatbuffers.Builder, textMsgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, textMsgOffset, 0);
}

static addAuthMethod(builder:flatbuffers.Builder, authMethodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, authMethodOffset, 0);
}

static addObjectiveAreaInfo(builder:flatbuffers.Builder, objectiveAreaInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, objectiveAreaInfoOffset, 0);
}

static addExecutionInfo(builder:flatbuffers.Builder, executionInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, executionInfoOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, origNetworkOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:PersonnelRecovery_Ingest_dataMode_Enum) {
  builder.addFieldInt8(37, dataMode, PersonnelRecovery_Ingest_dataMode_Enum.REAL);
}

static endPersonnelRecovery_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPersonnelRecovery_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'PERS');
}

static finishSizePrefixedPersonnelRecovery_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'PERS', true);
}

static createPersonnelRecovery_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, msgTimeOffset:flatbuffers.Offset, recovIdOffset:flatbuffers.Offset, idWeatherReportOffset:flatbuffers.Offset, pickupLat:number, pickupLon:number, pickupAlt:number, termInd:boolean, authStatusOffset:flatbuffers.Offset, numPersons:number, milClassOffset:flatbuffers.Offset, natAlliance:number, natAlliance1:number, identityOffset:flatbuffers.Offset, commEq1Offset:flatbuffers.Offset, commEq2Offset:flatbuffers.Offset, commEq3Offset:flatbuffers.Offset, txFreq:number, rxFreq:number, numNonAmbulatory:number, numAmbulatory:number, numAmbulatoryInjured:number, survivorRadioOffset:flatbuffers.Offset, survivorMessagesOffset:flatbuffers.Offset, beaconInd:boolean, callSignOffset:flatbuffers.Offset, textMsgOffset:flatbuffers.Offset, authMethodOffset:flatbuffers.Offset, objectiveAreaInfoOffset:flatbuffers.Offset, executionInfoOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:PersonnelRecovery_Ingest_dataMode_Enum):flatbuffers.Offset {
  PersonnelRecovery_Ingest.startPersonnelRecovery_Ingest(builder);
  PersonnelRecovery_Ingest.addId(builder, idOffset);
  PersonnelRecovery_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  PersonnelRecovery_Ingest.addType(builder, typeOffset);
  PersonnelRecovery_Ingest.addMsgTime(builder, msgTimeOffset);
  PersonnelRecovery_Ingest.addRecovId(builder, recovIdOffset);
  PersonnelRecovery_Ingest.addIdWeatherReport(builder, idWeatherReportOffset);
  PersonnelRecovery_Ingest.addPickupLat(builder, pickupLat);
  PersonnelRecovery_Ingest.addPickupLon(builder, pickupLon);
  PersonnelRecovery_Ingest.addPickupAlt(builder, pickupAlt);
  PersonnelRecovery_Ingest.addTermInd(builder, termInd);
  PersonnelRecovery_Ingest.addAuthStatus(builder, authStatusOffset);
  PersonnelRecovery_Ingest.addNumPersons(builder, numPersons);
  PersonnelRecovery_Ingest.addMilClass(builder, milClassOffset);
  PersonnelRecovery_Ingest.addNatAlliance(builder, natAlliance);
  PersonnelRecovery_Ingest.addNatAlliance1(builder, natAlliance1);
  PersonnelRecovery_Ingest.addIdentity(builder, identityOffset);
  PersonnelRecovery_Ingest.addCommEq1(builder, commEq1Offset);
  PersonnelRecovery_Ingest.addCommEq2(builder, commEq2Offset);
  PersonnelRecovery_Ingest.addCommEq3(builder, commEq3Offset);
  PersonnelRecovery_Ingest.addTxFreq(builder, txFreq);
  PersonnelRecovery_Ingest.addRxFreq(builder, rxFreq);
  PersonnelRecovery_Ingest.addNumNonAmbulatory(builder, numNonAmbulatory);
  PersonnelRecovery_Ingest.addNumAmbulatory(builder, numAmbulatory);
  PersonnelRecovery_Ingest.addNumAmbulatoryInjured(builder, numAmbulatoryInjured);
  PersonnelRecovery_Ingest.addSurvivorRadio(builder, survivorRadioOffset);
  PersonnelRecovery_Ingest.addSurvivorMessages(builder, survivorMessagesOffset);
  PersonnelRecovery_Ingest.addBeaconInd(builder, beaconInd);
  PersonnelRecovery_Ingest.addCallSign(builder, callSignOffset);
  PersonnelRecovery_Ingest.addTextMsg(builder, textMsgOffset);
  PersonnelRecovery_Ingest.addAuthMethod(builder, authMethodOffset);
  PersonnelRecovery_Ingest.addObjectiveAreaInfo(builder, objectiveAreaInfoOffset);
  PersonnelRecovery_Ingest.addExecutionInfo(builder, executionInfoOffset);
  PersonnelRecovery_Ingest.addOrigNetwork(builder, origNetworkOffset);
  PersonnelRecovery_Ingest.addCreatedAt(builder, createdAtOffset);
  PersonnelRecovery_Ingest.addCreatedBy(builder, createdByOffset);
  PersonnelRecovery_Ingest.addSource(builder, sourceOffset);
  PersonnelRecovery_Ingest.addOrigin(builder, originOffset);
  PersonnelRecovery_Ingest.addDataMode(builder, dataMode);
  return PersonnelRecovery_Ingest.endPersonnelRecovery_Ingest(builder);
}

unpack(): PersonnelRecovery_IngestT {
  return new PersonnelRecovery_IngestT(
    this.id(),
    this.classificationMarking(),
    this.type(),
    this.msgTime(),
    this.recovId(),
    this.idWeatherReport(),
    this.pickupLat(),
    this.pickupLon(),
    this.pickupAlt(),
    this.termInd(),
    this.authStatus(),
    this.numPersons(),
    this.milClass(),
    this.natAlliance(),
    this.natAlliance1(),
    this.identity(),
    this.commEq1(),
    this.commEq2(),
    this.commEq3(),
    this.txFreq(),
    this.rxFreq(),
    this.numNonAmbulatory(),
    this.numAmbulatory(),
    this.numAmbulatoryInjured(),
    this.survivorRadio(),
    this.survivorMessages(),
    this.beaconInd(),
    this.callSign(),
    this.textMsg(),
    this.authMethod(),
    this.objectiveAreaInfo(),
    this.executionInfo(),
    this.origNetwork(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode()
  );
}


unpackTo(_o: PersonnelRecovery_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.type = this.type();
  _o.msgTime = this.msgTime();
  _o.recovId = this.recovId();
  _o.idWeatherReport = this.idWeatherReport();
  _o.pickupLat = this.pickupLat();
  _o.pickupLon = this.pickupLon();
  _o.pickupAlt = this.pickupAlt();
  _o.termInd = this.termInd();
  _o.authStatus = this.authStatus();
  _o.numPersons = this.numPersons();
  _o.milClass = this.milClass();
  _o.natAlliance = this.natAlliance();
  _o.natAlliance1 = this.natAlliance1();
  _o.identity = this.identity();
  _o.commEq1 = this.commEq1();
  _o.commEq2 = this.commEq2();
  _o.commEq3 = this.commEq3();
  _o.txFreq = this.txFreq();
  _o.rxFreq = this.rxFreq();
  _o.numNonAmbulatory = this.numNonAmbulatory();
  _o.numAmbulatory = this.numAmbulatory();
  _o.numAmbulatoryInjured = this.numAmbulatoryInjured();
  _o.survivorRadio = this.survivorRadio();
  _o.survivorMessages = this.survivorMessages();
  _o.beaconInd = this.beaconInd();
  _o.callSign = this.callSign();
  _o.textMsg = this.textMsg();
  _o.authMethod = this.authMethod();
  _o.objectiveAreaInfo = this.objectiveAreaInfo();
  _o.executionInfo = this.executionInfo();
  _o.origNetwork = this.origNetwork();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
}
}

export class PersonnelRecovery_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public msgTime: string|Uint8Array|null = null,
  public recovId: string|Uint8Array|null = null,
  public idWeatherReport: string|Uint8Array|null = null,
  public pickupLat: number = 0.0,
  public pickupLon: number = 0.0,
  public pickupAlt: number = 0.0,
  public termInd: boolean = false,
  public authStatus: string|Uint8Array|null = null,
  public numPersons: number = 0,
  public milClass: string|Uint8Array|null = null,
  public natAlliance: number = 0,
  public natAlliance1: number = 0,
  public identity: string|Uint8Array|null = null,
  public commEq1: string|Uint8Array|null = null,
  public commEq2: string|Uint8Array|null = null,
  public commEq3: string|Uint8Array|null = null,
  public txFreq: number = 0.0,
  public rxFreq: number = 0.0,
  public numNonAmbulatory: number = 0,
  public numAmbulatory: number = 0,
  public numAmbulatoryInjured: number = 0,
  public survivorRadio: string|Uint8Array|null = null,
  public survivorMessages: string|Uint8Array|null = null,
  public beaconInd: boolean = false,
  public callSign: string|Uint8Array|null = null,
  public textMsg: string|Uint8Array|null = null,
  public authMethod: string|Uint8Array|null = null,
  public objectiveAreaInfo: string|Uint8Array|null = null,
  public executionInfo: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: PersonnelRecovery_Ingest_dataMode_Enum = PersonnelRecovery_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const msgTime = (this.msgTime !== null ? builder.createString(this.msgTime!) : 0);
  const recovId = (this.recovId !== null ? builder.createString(this.recovId!) : 0);
  const idWeatherReport = (this.idWeatherReport !== null ? builder.createString(this.idWeatherReport!) : 0);
  const authStatus = (this.authStatus !== null ? builder.createString(this.authStatus!) : 0);
  const milClass = (this.milClass !== null ? builder.createString(this.milClass!) : 0);
  const identity = (this.identity !== null ? builder.createString(this.identity!) : 0);
  const commEq1 = (this.commEq1 !== null ? builder.createString(this.commEq1!) : 0);
  const commEq2 = (this.commEq2 !== null ? builder.createString(this.commEq2!) : 0);
  const commEq3 = (this.commEq3 !== null ? builder.createString(this.commEq3!) : 0);
  const survivorRadio = (this.survivorRadio !== null ? builder.createString(this.survivorRadio!) : 0);
  const survivorMessages = (this.survivorMessages !== null ? builder.createString(this.survivorMessages!) : 0);
  const callSign = (this.callSign !== null ? builder.createString(this.callSign!) : 0);
  const textMsg = (this.textMsg !== null ? builder.createString(this.textMsg!) : 0);
  const authMethod = (this.authMethod !== null ? builder.createString(this.authMethod!) : 0);
  const objectiveAreaInfo = (this.objectiveAreaInfo !== null ? builder.createString(this.objectiveAreaInfo!) : 0);
  const executionInfo = (this.executionInfo !== null ? builder.createString(this.executionInfo!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);

  return PersonnelRecovery_Ingest.createPersonnelRecovery_Ingest(builder,
    id,
    classificationMarking,
    type,
    msgTime,
    recovId,
    idWeatherReport,
    this.pickupLat,
    this.pickupLon,
    this.pickupAlt,
    this.termInd,
    authStatus,
    this.numPersons,
    milClass,
    this.natAlliance,
    this.natAlliance1,
    identity,
    commEq1,
    commEq2,
    commEq3,
    this.txFreq,
    this.rxFreq,
    this.numNonAmbulatory,
    this.numAmbulatory,
    this.numAmbulatoryInjured,
    survivorRadio,
    survivorMessages,
    this.beaconInd,
    callSign,
    textMsg,
    authMethod,
    objectiveAreaInfo,
    executionInfo,
    origNetwork,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode
  );
}
}
