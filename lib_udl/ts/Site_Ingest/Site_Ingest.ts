// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Site_Ingest_dataMode_Enum } from './Site_Ingest_dataMode_Enum.js';


/**
 * /// Properties and characteristics of a site entity, such as an airbase, airfield, naval station, etc.
 */
export class Site_Ingest implements flatbuffers.IUnpackableObject<Site_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Site_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSite_Ingest(bb:flatbuffers.ByteBuffer, obj?:Site_Ingest):Site_Ingest {
  return (obj || new Site_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSite_Ingest(bb:flatbuffers.ByteBuffer, obj?:Site_Ingest):Site_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Site_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SITE');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SITE-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
entity():string|null
entity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent entity. idEntity is required for Put.
 * Example: /// Example: ENTITY-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idEntity():string|null
idEntity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idEntity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Parent Site record associated with this Site record.
 * Example: /// Example: ID-Parent-Site
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idParentSite():string|null
idParentSite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idParentSite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Site record from the originating system.
 * Example: /// Example: ORIG-SITE-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origSiteId():string|null
origSiteId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSiteId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the LZ record from the originating system.
 * Example: /// Example: ORIG-LZ-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origLzId():string|null
origLzId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origLzId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Site number of a specific electronic site or its associated equipment.
 * Example: /// Example: 25200
 * Constraints: Minimum length = 0, Maximum length = 5
 */
pin():string|null
pin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).
 * Example: /// Example: AIRBASE
 * Constraints: Minimum length = 0, Maximum length = 16
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).
 * Example: /// Example: MILITARY
 * Constraints: Minimum length = 0, Maximum length = 16
 */
usage():string|null
usage(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
usage(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:
 * AF - Airfield
 * FD - Field
 * HC - High Crop.  1 meter and over.
 * HY - Highway
 * LB - Lake Bed
 * LC - Low Crop.  0-1 meters
 * O - Other. Explain In Remarks.
 * PD - Paddy
 * PK - Park
 * PS - Pasture
 * RB - Riverbed
 * SP - Sport Field
 * U - Unknown
 * Z - Inconclusive Analysis.
 * Example: /// Example: AF
 * Constraints: Minimum length = 0, Maximum length = 3
 */
lzUsage():string|null
lzUsage(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lzUsage(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of this site.
 * Example: /// Example: Site Name
 * Constraints: Minimum length = 1, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: WGS
 * Constraints: Minimum length = 0, Maximum length = 3
 */
coordDatum():string|null
coordDatum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
coordDatum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
 * Pos. 1-2.  Latitude Degrees     [00-90]
 * Pos. 3-4.  Latitude Minutes     [00-59]
 * Pos. 5-6.  Latitude Seconds     [00-59]
 * Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
 * Pos. 10. Latitude Hemisphere       [NS] 
 * Pos. 11-13. Longitude Degrees     [00-180] 
 * Pos. 14-15. Longitude Minutes     [00-59] 
 * Pos. 16-17. Longitude Seconds     [00-59] 
 * Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
 * Pos. 21. Longitude Hemisphere     [EW]
 * Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].
 * Example: /// Example: 340000000N0430000000E
 * Constraints: Minimum length = 0, Maximum length = 21
 */
coord():string|null
coord(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
coord(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the plus or minus error assessed against the method used to derive the coordinate.
 * Example: /// Example: 12.345
 * Constraints: No constraints specified.
 */
coordDerivAcc():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.
 * Example: /// Example: BB002
 * Constraints: Minimum length = 0, Maximum length = 5
 */
osuffix():string|null
osuffix(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
osuffix(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The International Air Transport Association (IATA) code of this site, if applicable.
 * Example: /// Example: AAA
 * Constraints: Minimum length = 0, Maximum length = 3
 */
iata():string|null
iata(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
iata(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The International Civil Aviation Organization (ICAO) code of this site, if applicable.
 * Example: /// Example: ICA1
 * Constraints: Minimum length = 0, Maximum length = 4
 */
icao():string|null
icao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
icao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Federal Aviation Administration (FAA) Location ID of this site, if applicable.
 * Example: /// Example: FAA1
 * Constraints: Minimum length = 0, Maximum length = 5
 */
faa():string|null
faa(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
faa(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
 * Example: /// Example: AL006
 * Constraints: Minimum length = 0, Maximum length = 5
 */
airDefArea():string|null
airDefArea(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
airDefArea(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Universal Transverse Mercator (UTM) grid coordinates.
 * Pos. 1-2, UTM Zone Column   [01-60
 * Pos. 3, UTM Zone Row   [C-HJ-NP-X]
 * Pos. 4, UTM False Easting   [0-9]
 * Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
 * Pos. 10-11, UTM False Northing    [0-9][0-9]
 * Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
 * Example: /// Example: 19P4390691376966
 * Constraints: Minimum length = 0, Maximum length = 16
 */
utm():string|null
utm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
utm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the grid system used in the development of the milGrid coordinates. Values are:
 * UPS - Universal Polar System
 * UTM - Universal Transverse Mercator.
 * Example: /// Example: UTM
 * Constraints: Minimum length = 0, Maximum length = 3
 */
milGridSys():string|null
milGridSys(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milGridSys(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
 * 4Q (grid zone designator, GZD)
 * FJ (the 100,000-meter square identifier)
 * 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
 * Example: /// Example: 4QFJ12345678
 * Constraints: Minimum length = 0, Maximum length = 15
 */
milGrid():string|null
milGrid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milGrid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The category code that represents the associated site purpose within the target system.
 * Example: /// Example: 20345
 * Constraints: Minimum length = 0, Maximum length = 16
 */
catCode():string|null
catCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
catCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Textual Description of Site catCode.
 * Example: /// Example: Radar Facility, General
 * Constraints: Minimum length = 0, Maximum length = 148
 */
catText():string|null
catText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
catText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * World Aeronautical Chart identifier for the area in which a designated place is located.
 * Example: /// Example: 0427
 * Constraints: Minimum length = 0, Maximum length = 4
 */
wac():string|null
wac(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
wac(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: IZO7
 * Constraints: Minimum length = 0, Maximum length = 7
 */
polSubdiv():string|null
polSubdiv(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
polSubdiv(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: E2
 * Constraints: Minimum length = 0, Maximum length = 2
 */
geoArea():string|null
geoArea(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geoArea(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The distance between Mean Sea Level and a referenced ellipsoid, in meters.
 * Example: /// Example: 12.34
 * Constraints: No constraints specified.
 */
geoidalMslSep():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
 * Example: /// Example: OTHR
 * Constraints: Minimum length = 0, Maximum length = 4
 */
allegiance():string|null
allegiance(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
allegiance(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
 * Example: /// Example: HL
 * Constraints: Minimum length = 0, Maximum length = 4
 */
altAllegiance():string|null
altAllegiance(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altAllegiance(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
 * 0 - Does not meet criteria above
 * 1 - Primary importance to system
 * 2 - Secondary importance to system
 * 3 - Tertiary importance to system
 * O - Other. Explain in Remarks.
 * Example: /// Example: 1
 * Constraints: Minimum length = 0, Maximum length = 1
 */
classRating():string|null
classRating(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classRating(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: EOB
 * Constraints: Minimum length = 0, Maximum length = 5
 */
fpa():string|null
fpa(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fpa(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.
 * Example: /// Example: 0427RT1030
 * Constraints: Minimum length = 0, Maximum length = 10
 */
beNumber():string|null
beNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
beNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of runways at the site, if applicable.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
runways():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The length of the longest runway at this site, if applicable, in meters.
 * Example: /// Example: 1000
 * Constraints: No constraints specified.
 */
maxRunwayLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: RDY
 * Constraints: Minimum length = 0, Maximum length = 4
 */
condition():string|null
condition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
condition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 4
 */
conditionAvail():string|null
conditionAvail(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
conditionAvail(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: OPR
 * Constraints: Minimum length = 0, Maximum length = 3
 */
operStatus():string|null
operStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
grade():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: OCC
 * Constraints: Minimum length = 0, Maximum length = 3
 */
activity():string|null
activity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
activity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: JG
 * Constraints: Minimum length = 0, Maximum length = 4
 */
functPrimary():string|null
functPrimary(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
functPrimary(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: AA
 * Constraints: Minimum length = 0, Maximum length = 4
 */
msnPrimary():string|null
msnPrimary(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msnPrimary(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: AB
 * Constraints: Minimum length = 0, Maximum length = 4
 */
msnPrimarySpec():string|null
msnPrimarySpec(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msnPrimarySpec(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A sites ability to conduct nuclear warfare. Valid Values are:
 * A - Nuclear Ammo Or Warheads Available
 * N - No Nuclear Offense
 * O - Other. Explain in Remarks
 * U - Unknown
 * W - Nuclear Weapons Available
 * Y - Nuclear Warfare Offensive Capability
 * Z - Inconclusive Analysis.
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 1
 */
nucCap():string|null
nucCap(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nucCap(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
 * ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
 * FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
 * HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
 * FAKER: Friendly track, object, or entity acting as an exercise hostile.
 * JOKER: Friendly track, object, or entity acting as an exercise suspect.
 * NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
 * PENDING: Track object which has not been evaluated.
 * SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
 * UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
 * Example: /// Example: FRIEND
 * Constraints: Minimum length = 0, Maximum length = 32
 */
ident():string|null
ident(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ident(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.
 * Example: /// Example: 123.45
 * Constraints: No constraints specified.
 */
elevMsl():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
 * Example: /// Example: 50
 * Constraints: No constraints specified.
 */
elevMslConfLvl():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Indicates the plus or minus error assessed against the method used to derive the elevation.
 * Example: /// Example: 12.34
 * Constraints: No constraints specified.
 */
elevMslDerivAcc():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
vegHt():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: FR
 * Constraints: Minimum length = 0, Maximum length = 4
 */
vegType():string|null
vegType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vegType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
popArea():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.
 * Example: /// Example: 12.345
 * Constraints: No constraints specified.
 */
popAreaProx():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional notes/comments for the site.
 * Example: /// Example: Example Notes
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Responsible Producer - Organization that is responsible for the maintenance of the record.
 * Example: /// Example: RT
 * Constraints: Minimum length = 0, Maximum length = 4
 */
resProd():string|null
resProd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
resProd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
 * Example: /// Example: 7
 * Constraints: No constraints specified.
 */
eval():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.
 * Example: /// Example: 2008-06-10
 * Constraints: No constraints specified.
 */
reviewDate():string|null
reviewDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reviewDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.
 * A - Active
 * I - Inactive
 * K - Acknowledged
 * L - Local
 * Q - A nominated (NOM) or Data Change Request (DCR) record
 * R - Production reduced by CMD decision
 * W - Working Record.
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 1
 */
recStatus():string|null
recStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.
 * Example: /// Example: SOGPU----------
 * Constraints: Minimum length = 0, Maximum length = 15
 */
symCode():string|null
symCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
symCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
 * Example: /// Example: Provider Reference Documentation
 * Constraints: Minimum length = 0, Maximum length = 128
 */
referenceDoc():string|null
referenceDoc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
referenceDoc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Site_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Site_Ingest_dataMode_Enum.REAL;
}

static startSite_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(66);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addEntity(builder:flatbuffers.Builder, entityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, entityOffset, 0);
}

static addIdEntity(builder:flatbuffers.Builder, idEntityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idEntityOffset, 0);
}

static addIdParentSite(builder:flatbuffers.Builder, idParentSiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idParentSiteOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, classificationMarkingOffset, 0);
}

static addOrigSiteId(builder:flatbuffers.Builder, origSiteIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, origSiteIdOffset, 0);
}

static addOrigLzId(builder:flatbuffers.Builder, origLzIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, origLzIdOffset, 0);
}

static addPin(builder:flatbuffers.Builder, pinOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, pinOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, typeOffset, 0);
}

static addUsage(builder:flatbuffers.Builder, usageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, usageOffset, 0);
}

static addLzUsage(builder:flatbuffers.Builder, lzUsageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, lzUsageOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, nameOffset, 0);
}

static addCoordDatum(builder:flatbuffers.Builder, coordDatumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, coordDatumOffset, 0);
}

static addCoord(builder:flatbuffers.Builder, coordOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, coordOffset, 0);
}

static addCoordDerivAcc(builder:flatbuffers.Builder, coordDerivAcc:number) {
  builder.addFieldFloat64(14, coordDerivAcc, 0.0);
}

static addOsuffix(builder:flatbuffers.Builder, osuffixOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, osuffixOffset, 0);
}

static addIata(builder:flatbuffers.Builder, iataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, iataOffset, 0);
}

static addIcao(builder:flatbuffers.Builder, icaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, icaoOffset, 0);
}

static addFaa(builder:flatbuffers.Builder, faaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, faaOffset, 0);
}

static addAirDefArea(builder:flatbuffers.Builder, airDefAreaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, airDefAreaOffset, 0);
}

static addUtm(builder:flatbuffers.Builder, utmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, utmOffset, 0);
}

static addMilGridSys(builder:flatbuffers.Builder, milGridSysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, milGridSysOffset, 0);
}

static addMilGrid(builder:flatbuffers.Builder, milGridOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, milGridOffset, 0);
}

static addCatCode(builder:flatbuffers.Builder, catCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, catCodeOffset, 0);
}

static addCatText(builder:flatbuffers.Builder, catTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, catTextOffset, 0);
}

static addWac(builder:flatbuffers.Builder, wacOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, wacOffset, 0);
}

static addPolSubdiv(builder:flatbuffers.Builder, polSubdivOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, polSubdivOffset, 0);
}

static addGeoArea(builder:flatbuffers.Builder, geoAreaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, geoAreaOffset, 0);
}

static addGeoidalMslSep(builder:flatbuffers.Builder, geoidalMslSep:number) {
  builder.addFieldFloat64(28, geoidalMslSep, 0.0);
}

static addAllegiance(builder:flatbuffers.Builder, allegianceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, allegianceOffset, 0);
}

static addAltAllegiance(builder:flatbuffers.Builder, altAllegianceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, altAllegianceOffset, 0);
}

static addClassRating(builder:flatbuffers.Builder, classRatingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, classRatingOffset, 0);
}

static addFpa(builder:flatbuffers.Builder, fpaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, fpaOffset, 0);
}

static addBeNumber(builder:flatbuffers.Builder, beNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, beNumberOffset, 0);
}

static addRunways(builder:flatbuffers.Builder, runways:number) {
  builder.addFieldInt32(34, runways, 0);
}

static addMaxRunwayLength(builder:flatbuffers.Builder, maxRunwayLength:number) {
  builder.addFieldInt32(35, maxRunwayLength, 0);
}

static addCondition(builder:flatbuffers.Builder, conditionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, conditionOffset, 0);
}

static addConditionAvail(builder:flatbuffers.Builder, conditionAvailOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, conditionAvailOffset, 0);
}

static addOperStatus(builder:flatbuffers.Builder, operStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, operStatusOffset, 0);
}

static addGrade(builder:flatbuffers.Builder, grade:number) {
  builder.addFieldInt32(39, grade, 0);
}

static addActivity(builder:flatbuffers.Builder, activityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, activityOffset, 0);
}

static addFunctPrimary(builder:flatbuffers.Builder, functPrimaryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, functPrimaryOffset, 0);
}

static addMsnPrimary(builder:flatbuffers.Builder, msnPrimaryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, msnPrimaryOffset, 0);
}

static addMsnPrimarySpec(builder:flatbuffers.Builder, msnPrimarySpecOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, msnPrimarySpecOffset, 0);
}

static addNucCap(builder:flatbuffers.Builder, nucCapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, nucCapOffset, 0);
}

static addIdent(builder:flatbuffers.Builder, identOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, identOffset, 0);
}

static addElevMsl(builder:flatbuffers.Builder, elevMsl:number) {
  builder.addFieldFloat64(46, elevMsl, 0.0);
}

static addElevMslConfLvl(builder:flatbuffers.Builder, elevMslConfLvl:number) {
  builder.addFieldInt32(47, elevMslConfLvl, 0);
}

static addElevMslDerivAcc(builder:flatbuffers.Builder, elevMslDerivAcc:number) {
  builder.addFieldFloat64(48, elevMslDerivAcc, 0.0);
}

static addVegHt(builder:flatbuffers.Builder, vegHt:number) {
  builder.addFieldFloat64(49, vegHt, 0.0);
}

static addVegType(builder:flatbuffers.Builder, vegTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, vegTypeOffset, 0);
}

static addPopArea(builder:flatbuffers.Builder, popArea:boolean) {
  builder.addFieldInt8(51, +popArea, +false);
}

static addPopAreaProx(builder:flatbuffers.Builder, popAreaProx:number) {
  builder.addFieldFloat64(52, popAreaProx, 0.0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, notesOffset, 0);
}

static addResProd(builder:flatbuffers.Builder, resProdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, resProdOffset, 0);
}

static addEval(builder:flatbuffers.Builder, eval:number) {
  builder.addFieldInt32(55, eval, 0);
}

static addReviewDate(builder:flatbuffers.Builder, reviewDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, reviewDateOffset, 0);
}

static addRecStatus(builder:flatbuffers.Builder, recStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, recStatusOffset, 0);
}

static addSymCode(builder:flatbuffers.Builder, symCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, symCodeOffset, 0);
}

static addReferenceDoc(builder:flatbuffers.Builder, referenceDocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, referenceDocOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Site_Ingest_dataMode_Enum) {
  builder.addFieldInt8(65, dataMode, Site_Ingest_dataMode_Enum.REAL);
}

static endSite_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSite_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SITE');
}

static finishSizePrefixedSite_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SITE', true);
}

static createSite_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, entityOffset:flatbuffers.Offset, idEntityOffset:flatbuffers.Offset, idParentSiteOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, origSiteIdOffset:flatbuffers.Offset, origLzIdOffset:flatbuffers.Offset, pinOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, usageOffset:flatbuffers.Offset, lzUsageOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, coordDatumOffset:flatbuffers.Offset, coordOffset:flatbuffers.Offset, coordDerivAcc:number, osuffixOffset:flatbuffers.Offset, iataOffset:flatbuffers.Offset, icaoOffset:flatbuffers.Offset, faaOffset:flatbuffers.Offset, airDefAreaOffset:flatbuffers.Offset, utmOffset:flatbuffers.Offset, milGridSysOffset:flatbuffers.Offset, milGridOffset:flatbuffers.Offset, catCodeOffset:flatbuffers.Offset, catTextOffset:flatbuffers.Offset, wacOffset:flatbuffers.Offset, polSubdivOffset:flatbuffers.Offset, geoAreaOffset:flatbuffers.Offset, geoidalMslSep:number, allegianceOffset:flatbuffers.Offset, altAllegianceOffset:flatbuffers.Offset, classRatingOffset:flatbuffers.Offset, fpaOffset:flatbuffers.Offset, beNumberOffset:flatbuffers.Offset, runways:number, maxRunwayLength:number, conditionOffset:flatbuffers.Offset, conditionAvailOffset:flatbuffers.Offset, operStatusOffset:flatbuffers.Offset, grade:number, activityOffset:flatbuffers.Offset, functPrimaryOffset:flatbuffers.Offset, msnPrimaryOffset:flatbuffers.Offset, msnPrimarySpecOffset:flatbuffers.Offset, nucCapOffset:flatbuffers.Offset, identOffset:flatbuffers.Offset, elevMsl:number, elevMslConfLvl:number, elevMslDerivAcc:number, vegHt:number, vegTypeOffset:flatbuffers.Offset, popArea:boolean, popAreaProx:number, notesOffset:flatbuffers.Offset, resProdOffset:flatbuffers.Offset, eval:number, reviewDateOffset:flatbuffers.Offset, recStatusOffset:flatbuffers.Offset, symCodeOffset:flatbuffers.Offset, referenceDocOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:Site_Ingest_dataMode_Enum):flatbuffers.Offset {
  Site_Ingest.startSite_Ingest(builder);
  Site_Ingest.addId(builder, idOffset);
  Site_Ingest.addEntity(builder, entityOffset);
  Site_Ingest.addIdEntity(builder, idEntityOffset);
  Site_Ingest.addIdParentSite(builder, idParentSiteOffset);
  Site_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  Site_Ingest.addOrigSiteId(builder, origSiteIdOffset);
  Site_Ingest.addOrigLzId(builder, origLzIdOffset);
  Site_Ingest.addPin(builder, pinOffset);
  Site_Ingest.addType(builder, typeOffset);
  Site_Ingest.addUsage(builder, usageOffset);
  Site_Ingest.addLzUsage(builder, lzUsageOffset);
  Site_Ingest.addName(builder, nameOffset);
  Site_Ingest.addCoordDatum(builder, coordDatumOffset);
  Site_Ingest.addCoord(builder, coordOffset);
  Site_Ingest.addCoordDerivAcc(builder, coordDerivAcc);
  Site_Ingest.addOsuffix(builder, osuffixOffset);
  Site_Ingest.addIata(builder, iataOffset);
  Site_Ingest.addIcao(builder, icaoOffset);
  Site_Ingest.addFaa(builder, faaOffset);
  Site_Ingest.addAirDefArea(builder, airDefAreaOffset);
  Site_Ingest.addUtm(builder, utmOffset);
  Site_Ingest.addMilGridSys(builder, milGridSysOffset);
  Site_Ingest.addMilGrid(builder, milGridOffset);
  Site_Ingest.addCatCode(builder, catCodeOffset);
  Site_Ingest.addCatText(builder, catTextOffset);
  Site_Ingest.addWac(builder, wacOffset);
  Site_Ingest.addPolSubdiv(builder, polSubdivOffset);
  Site_Ingest.addGeoArea(builder, geoAreaOffset);
  Site_Ingest.addGeoidalMslSep(builder, geoidalMslSep);
  Site_Ingest.addAllegiance(builder, allegianceOffset);
  Site_Ingest.addAltAllegiance(builder, altAllegianceOffset);
  Site_Ingest.addClassRating(builder, classRatingOffset);
  Site_Ingest.addFpa(builder, fpaOffset);
  Site_Ingest.addBeNumber(builder, beNumberOffset);
  Site_Ingest.addRunways(builder, runways);
  Site_Ingest.addMaxRunwayLength(builder, maxRunwayLength);
  Site_Ingest.addCondition(builder, conditionOffset);
  Site_Ingest.addConditionAvail(builder, conditionAvailOffset);
  Site_Ingest.addOperStatus(builder, operStatusOffset);
  Site_Ingest.addGrade(builder, grade);
  Site_Ingest.addActivity(builder, activityOffset);
  Site_Ingest.addFunctPrimary(builder, functPrimaryOffset);
  Site_Ingest.addMsnPrimary(builder, msnPrimaryOffset);
  Site_Ingest.addMsnPrimarySpec(builder, msnPrimarySpecOffset);
  Site_Ingest.addNucCap(builder, nucCapOffset);
  Site_Ingest.addIdent(builder, identOffset);
  Site_Ingest.addElevMsl(builder, elevMsl);
  Site_Ingest.addElevMslConfLvl(builder, elevMslConfLvl);
  Site_Ingest.addElevMslDerivAcc(builder, elevMslDerivAcc);
  Site_Ingest.addVegHt(builder, vegHt);
  Site_Ingest.addVegType(builder, vegTypeOffset);
  Site_Ingest.addPopArea(builder, popArea);
  Site_Ingest.addPopAreaProx(builder, popAreaProx);
  Site_Ingest.addNotes(builder, notesOffset);
  Site_Ingest.addResProd(builder, resProdOffset);
  Site_Ingest.addEval(builder, eval);
  Site_Ingest.addReviewDate(builder, reviewDateOffset);
  Site_Ingest.addRecStatus(builder, recStatusOffset);
  Site_Ingest.addSymCode(builder, symCodeOffset);
  Site_Ingest.addReferenceDoc(builder, referenceDocOffset);
  Site_Ingest.addCreatedAt(builder, createdAtOffset);
  Site_Ingest.addCreatedBy(builder, createdByOffset);
  Site_Ingest.addSource(builder, sourceOffset);
  Site_Ingest.addOrigin(builder, originOffset);
  Site_Ingest.addOrigNetwork(builder, origNetworkOffset);
  Site_Ingest.addDataMode(builder, dataMode);
  return Site_Ingest.endSite_Ingest(builder);
}

unpack(): Site_IngestT {
  return new Site_IngestT(
    this.id(),
    this.entity(),
    this.idEntity(),
    this.idParentSite(),
    this.classificationMarking(),
    this.origSiteId(),
    this.origLzId(),
    this.pin(),
    this.type(),
    this.usage(),
    this.lzUsage(),
    this.name(),
    this.coordDatum(),
    this.coord(),
    this.coordDerivAcc(),
    this.osuffix(),
    this.iata(),
    this.icao(),
    this.faa(),
    this.airDefArea(),
    this.utm(),
    this.milGridSys(),
    this.milGrid(),
    this.catCode(),
    this.catText(),
    this.wac(),
    this.polSubdiv(),
    this.geoArea(),
    this.geoidalMslSep(),
    this.allegiance(),
    this.altAllegiance(),
    this.classRating(),
    this.fpa(),
    this.beNumber(),
    this.runways(),
    this.maxRunwayLength(),
    this.condition(),
    this.conditionAvail(),
    this.operStatus(),
    this.grade(),
    this.activity(),
    this.functPrimary(),
    this.msnPrimary(),
    this.msnPrimarySpec(),
    this.nucCap(),
    this.ident(),
    this.elevMsl(),
    this.elevMslConfLvl(),
    this.elevMslDerivAcc(),
    this.vegHt(),
    this.vegType(),
    this.popArea(),
    this.popAreaProx(),
    this.notes(),
    this.resProd(),
    this.eval(),
    this.reviewDate(),
    this.recStatus(),
    this.symCode(),
    this.referenceDoc(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: Site_IngestT): void {
  _o.id = this.id();
  _o.entity = this.entity();
  _o.idEntity = this.idEntity();
  _o.idParentSite = this.idParentSite();
  _o.classificationMarking = this.classificationMarking();
  _o.origSiteId = this.origSiteId();
  _o.origLzId = this.origLzId();
  _o.pin = this.pin();
  _o.type = this.type();
  _o.usage = this.usage();
  _o.lzUsage = this.lzUsage();
  _o.name = this.name();
  _o.coordDatum = this.coordDatum();
  _o.coord = this.coord();
  _o.coordDerivAcc = this.coordDerivAcc();
  _o.osuffix = this.osuffix();
  _o.iata = this.iata();
  _o.icao = this.icao();
  _o.faa = this.faa();
  _o.airDefArea = this.airDefArea();
  _o.utm = this.utm();
  _o.milGridSys = this.milGridSys();
  _o.milGrid = this.milGrid();
  _o.catCode = this.catCode();
  _o.catText = this.catText();
  _o.wac = this.wac();
  _o.polSubdiv = this.polSubdiv();
  _o.geoArea = this.geoArea();
  _o.geoidalMslSep = this.geoidalMslSep();
  _o.allegiance = this.allegiance();
  _o.altAllegiance = this.altAllegiance();
  _o.classRating = this.classRating();
  _o.fpa = this.fpa();
  _o.beNumber = this.beNumber();
  _o.runways = this.runways();
  _o.maxRunwayLength = this.maxRunwayLength();
  _o.condition = this.condition();
  _o.conditionAvail = this.conditionAvail();
  _o.operStatus = this.operStatus();
  _o.grade = this.grade();
  _o.activity = this.activity();
  _o.functPrimary = this.functPrimary();
  _o.msnPrimary = this.msnPrimary();
  _o.msnPrimarySpec = this.msnPrimarySpec();
  _o.nucCap = this.nucCap();
  _o.ident = this.ident();
  _o.elevMsl = this.elevMsl();
  _o.elevMslConfLvl = this.elevMslConfLvl();
  _o.elevMslDerivAcc = this.elevMslDerivAcc();
  _o.vegHt = this.vegHt();
  _o.vegType = this.vegType();
  _o.popArea = this.popArea();
  _o.popAreaProx = this.popAreaProx();
  _o.notes = this.notes();
  _o.resProd = this.resProd();
  _o.eval = this.eval();
  _o.reviewDate = this.reviewDate();
  _o.recStatus = this.recStatus();
  _o.symCode = this.symCode();
  _o.referenceDoc = this.referenceDoc();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class Site_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public entity: string|Uint8Array|null = null,
  public idEntity: string|Uint8Array|null = null,
  public idParentSite: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public origSiteId: string|Uint8Array|null = null,
  public origLzId: string|Uint8Array|null = null,
  public pin: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public usage: string|Uint8Array|null = null,
  public lzUsage: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public coordDatum: string|Uint8Array|null = null,
  public coord: string|Uint8Array|null = null,
  public coordDerivAcc: number = 0.0,
  public osuffix: string|Uint8Array|null = null,
  public iata: string|Uint8Array|null = null,
  public icao: string|Uint8Array|null = null,
  public faa: string|Uint8Array|null = null,
  public airDefArea: string|Uint8Array|null = null,
  public utm: string|Uint8Array|null = null,
  public milGridSys: string|Uint8Array|null = null,
  public milGrid: string|Uint8Array|null = null,
  public catCode: string|Uint8Array|null = null,
  public catText: string|Uint8Array|null = null,
  public wac: string|Uint8Array|null = null,
  public polSubdiv: string|Uint8Array|null = null,
  public geoArea: string|Uint8Array|null = null,
  public geoidalMslSep: number = 0.0,
  public allegiance: string|Uint8Array|null = null,
  public altAllegiance: string|Uint8Array|null = null,
  public classRating: string|Uint8Array|null = null,
  public fpa: string|Uint8Array|null = null,
  public beNumber: string|Uint8Array|null = null,
  public runways: number = 0,
  public maxRunwayLength: number = 0,
  public condition: string|Uint8Array|null = null,
  public conditionAvail: string|Uint8Array|null = null,
  public operStatus: string|Uint8Array|null = null,
  public grade: number = 0,
  public activity: string|Uint8Array|null = null,
  public functPrimary: string|Uint8Array|null = null,
  public msnPrimary: string|Uint8Array|null = null,
  public msnPrimarySpec: string|Uint8Array|null = null,
  public nucCap: string|Uint8Array|null = null,
  public ident: string|Uint8Array|null = null,
  public elevMsl: number = 0.0,
  public elevMslConfLvl: number = 0,
  public elevMslDerivAcc: number = 0.0,
  public vegHt: number = 0.0,
  public vegType: string|Uint8Array|null = null,
  public popArea: boolean = false,
  public popAreaProx: number = 0.0,
  public notes: string|Uint8Array|null = null,
  public resProd: string|Uint8Array|null = null,
  public eval: number = 0,
  public reviewDate: string|Uint8Array|null = null,
  public recStatus: string|Uint8Array|null = null,
  public symCode: string|Uint8Array|null = null,
  public referenceDoc: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: Site_Ingest_dataMode_Enum = Site_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const entity = (this.entity !== null ? builder.createString(this.entity!) : 0);
  const idEntity = (this.idEntity !== null ? builder.createString(this.idEntity!) : 0);
  const idParentSite = (this.idParentSite !== null ? builder.createString(this.idParentSite!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const origSiteId = (this.origSiteId !== null ? builder.createString(this.origSiteId!) : 0);
  const origLzId = (this.origLzId !== null ? builder.createString(this.origLzId!) : 0);
  const pin = (this.pin !== null ? builder.createString(this.pin!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const usage = (this.usage !== null ? builder.createString(this.usage!) : 0);
  const lzUsage = (this.lzUsage !== null ? builder.createString(this.lzUsage!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const coordDatum = (this.coordDatum !== null ? builder.createString(this.coordDatum!) : 0);
  const coord = (this.coord !== null ? builder.createString(this.coord!) : 0);
  const osuffix = (this.osuffix !== null ? builder.createString(this.osuffix!) : 0);
  const iata = (this.iata !== null ? builder.createString(this.iata!) : 0);
  const icao = (this.icao !== null ? builder.createString(this.icao!) : 0);
  const faa = (this.faa !== null ? builder.createString(this.faa!) : 0);
  const airDefArea = (this.airDefArea !== null ? builder.createString(this.airDefArea!) : 0);
  const utm = (this.utm !== null ? builder.createString(this.utm!) : 0);
  const milGridSys = (this.milGridSys !== null ? builder.createString(this.milGridSys!) : 0);
  const milGrid = (this.milGrid !== null ? builder.createString(this.milGrid!) : 0);
  const catCode = (this.catCode !== null ? builder.createString(this.catCode!) : 0);
  const catText = (this.catText !== null ? builder.createString(this.catText!) : 0);
  const wac = (this.wac !== null ? builder.createString(this.wac!) : 0);
  const polSubdiv = (this.polSubdiv !== null ? builder.createString(this.polSubdiv!) : 0);
  const geoArea = (this.geoArea !== null ? builder.createString(this.geoArea!) : 0);
  const allegiance = (this.allegiance !== null ? builder.createString(this.allegiance!) : 0);
  const altAllegiance = (this.altAllegiance !== null ? builder.createString(this.altAllegiance!) : 0);
  const classRating = (this.classRating !== null ? builder.createString(this.classRating!) : 0);
  const fpa = (this.fpa !== null ? builder.createString(this.fpa!) : 0);
  const beNumber = (this.beNumber !== null ? builder.createString(this.beNumber!) : 0);
  const condition = (this.condition !== null ? builder.createString(this.condition!) : 0);
  const conditionAvail = (this.conditionAvail !== null ? builder.createString(this.conditionAvail!) : 0);
  const operStatus = (this.operStatus !== null ? builder.createString(this.operStatus!) : 0);
  const activity = (this.activity !== null ? builder.createString(this.activity!) : 0);
  const functPrimary = (this.functPrimary !== null ? builder.createString(this.functPrimary!) : 0);
  const msnPrimary = (this.msnPrimary !== null ? builder.createString(this.msnPrimary!) : 0);
  const msnPrimarySpec = (this.msnPrimarySpec !== null ? builder.createString(this.msnPrimarySpec!) : 0);
  const nucCap = (this.nucCap !== null ? builder.createString(this.nucCap!) : 0);
  const ident = (this.ident !== null ? builder.createString(this.ident!) : 0);
  const vegType = (this.vegType !== null ? builder.createString(this.vegType!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const resProd = (this.resProd !== null ? builder.createString(this.resProd!) : 0);
  const reviewDate = (this.reviewDate !== null ? builder.createString(this.reviewDate!) : 0);
  const recStatus = (this.recStatus !== null ? builder.createString(this.recStatus!) : 0);
  const symCode = (this.symCode !== null ? builder.createString(this.symCode!) : 0);
  const referenceDoc = (this.referenceDoc !== null ? builder.createString(this.referenceDoc!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Site_Ingest.createSite_Ingest(builder,
    id,
    entity,
    idEntity,
    idParentSite,
    classificationMarking,
    origSiteId,
    origLzId,
    pin,
    type,
    usage,
    lzUsage,
    name,
    coordDatum,
    coord,
    this.coordDerivAcc,
    osuffix,
    iata,
    icao,
    faa,
    airDefArea,
    utm,
    milGridSys,
    milGrid,
    catCode,
    catText,
    wac,
    polSubdiv,
    geoArea,
    this.geoidalMslSep,
    allegiance,
    altAllegiance,
    classRating,
    fpa,
    beNumber,
    this.runways,
    this.maxRunwayLength,
    condition,
    conditionAvail,
    operStatus,
    this.grade,
    activity,
    functPrimary,
    msnPrimary,
    msnPrimarySpec,
    nucCap,
    ident,
    this.elevMsl,
    this.elevMslConfLvl,
    this.elevMslDerivAcc,
    this.vegHt,
    vegType,
    this.popArea,
    this.popAreaProx,
    notes,
    resProd,
    this.eval,
    reviewDate,
    recStatus,
    symCode,
    referenceDoc,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
