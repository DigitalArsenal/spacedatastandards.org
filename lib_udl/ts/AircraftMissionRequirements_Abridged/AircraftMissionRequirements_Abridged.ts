// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of Requirements associated with this Air Transport Mission.
 */
export class AircraftMissionRequirements_Abridged implements flatbuffers.IUnpackableObject<AircraftMissionRequirements_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AircraftMissionRequirements_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAircraftMissionRequirements_Abridged(bb:flatbuffers.ByteBuffer, obj?:AircraftMissionRequirements_Abridged):AircraftMissionRequirements_Abridged {
  return (obj || new AircraftMissionRequirements_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAircraftMissionRequirements_Abridged(bb:flatbuffers.ByteBuffer, obj?:AircraftMissionRequirements_Abridged):AircraftMissionRequirements_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AircraftMissionRequirements_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRC');
}

/**
 * Global Decision Support System (GDSS) mission requirement identifier.
 * Example: /// Example: 23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c
 * Constraints: Minimum length = 0, Maximum length = 36
 */
gdssReqId():string|null
gdssReqId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gdssReqId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the onload itinerary location.
 * Example: /// Example: 200
 * Constraints: No constraints specified.
 */
onloadId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Onload location code.
 * Example: /// Example: KCHS
 * Constraints: Minimum length = 0, Maximum length = 20
 */
onloadLocode():string|null
onloadLocode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
onloadLocode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the offload itinerary location.
 * Example: /// Example: 300
 * Constraints: No constraints specified.
 */
offloadId():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Offload location code.
 * Example: /// Example: KHOP
 * Constraints: Minimum length = 0, Maximum length = 20
 */
offloadLocode():string|null
offloadLocode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
offloadLocode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unit line number.
 * Example: /// Example: T01ME01
 * Constraints: Minimum length = 0, Maximum length = 8
 */
uln():string|null
uln(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
uln(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Transportation requirement number.
 * Example: /// Example: T01ME01
 * Constraints: Minimum length = 0, Maximum length = 50
 */
transReqNum():string|null
transReqNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transReqNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Project name.
 * Example: /// Example: CENTINTRA21
 * Constraints: Minimum length = 0, Maximum length = 50
 */
projName():string|null
projName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
projName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identification number of the Operation Plan (OPLAN) associated with this mission.
 * Example: /// Example: 5027
 * Constraints: Minimum length = 0, Maximum length = 32
 */
oplan():string|null
oplan(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
oplan(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of passengers associated with the mission.
 * Example: /// Example: 44
 * Constraints: No constraints specified.
 */
numPax():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of litter patients tasked for the mission.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
numLitter():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of ambulatory patients tasked for the mission.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
numAmbulatory():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of attendants tasked for the mission.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
numAttendant():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Total weight of the bulk cargo, in kilograms.
 * Example: /// Example: 1.3
 * Constraints: No constraints specified.
 */
bulkWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total weight of the oversized cargo, in kilograms.
 * Example: /// Example: 1.3
 * Constraints: No constraints specified.
 */
oversizeWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total weight of the outsize cargo, in kilograms.
 * Example: /// Example: 1.3
 * Constraints: No constraints specified.
 */
outsizeWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Earliest available date the cargo can be picked up.
 * Example: /// Example: 2024-01-01T16:00:00Z
 * Constraints: No constraints specified.
 */
ead():string|null
ead(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ead(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Latest available date the cargo may be delivered.
 * Example: /// Example: 2024-01-01T16:00:00Z
 * Constraints: No constraints specified.
 */
lad():string|null
lad(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lad(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAircraftMissionRequirements_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(18);
}

static addGdssReqId(builder:flatbuffers.Builder, gdssReqIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, gdssReqIdOffset, 0);
}

static addOnloadId(builder:flatbuffers.Builder, onloadId:number) {
  builder.addFieldInt32(1, onloadId, 0);
}

static addOnloadLocode(builder:flatbuffers.Builder, onloadLocodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, onloadLocodeOffset, 0);
}

static addOffloadId(builder:flatbuffers.Builder, offloadId:number) {
  builder.addFieldInt32(3, offloadId, 0);
}

static addOffloadLocode(builder:flatbuffers.Builder, offloadLocodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, offloadLocodeOffset, 0);
}

static addUln(builder:flatbuffers.Builder, ulnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, ulnOffset, 0);
}

static addTransReqNum(builder:flatbuffers.Builder, transReqNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, transReqNumOffset, 0);
}

static addProjName(builder:flatbuffers.Builder, projNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, projNameOffset, 0);
}

static addOplan(builder:flatbuffers.Builder, oplanOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, oplanOffset, 0);
}

static addNumPax(builder:flatbuffers.Builder, numPax:number) {
  builder.addFieldInt32(9, numPax, 0);
}

static addNumLitter(builder:flatbuffers.Builder, numLitter:number) {
  builder.addFieldInt32(10, numLitter, 0);
}

static addNumAmbulatory(builder:flatbuffers.Builder, numAmbulatory:number) {
  builder.addFieldInt32(11, numAmbulatory, 0);
}

static addNumAttendant(builder:flatbuffers.Builder, numAttendant:number) {
  builder.addFieldInt32(12, numAttendant, 0);
}

static addBulkWeight(builder:flatbuffers.Builder, bulkWeight:number) {
  builder.addFieldFloat64(13, bulkWeight, 0.0);
}

static addOversizeWeight(builder:flatbuffers.Builder, oversizeWeight:number) {
  builder.addFieldFloat64(14, oversizeWeight, 0.0);
}

static addOutsizeWeight(builder:flatbuffers.Builder, outsizeWeight:number) {
  builder.addFieldFloat64(15, outsizeWeight, 0.0);
}

static addEad(builder:flatbuffers.Builder, eadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, eadOffset, 0);
}

static addLad(builder:flatbuffers.Builder, ladOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, ladOffset, 0);
}

static endAircraftMissionRequirements_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAircraftMissionRequirements_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC');
}

static finishSizePrefixedAircraftMissionRequirements_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC', true);
}

static createAircraftMissionRequirements_Abridged(builder:flatbuffers.Builder, gdssReqIdOffset:flatbuffers.Offset, onloadId:number, onloadLocodeOffset:flatbuffers.Offset, offloadId:number, offloadLocodeOffset:flatbuffers.Offset, ulnOffset:flatbuffers.Offset, transReqNumOffset:flatbuffers.Offset, projNameOffset:flatbuffers.Offset, oplanOffset:flatbuffers.Offset, numPax:number, numLitter:number, numAmbulatory:number, numAttendant:number, bulkWeight:number, oversizeWeight:number, outsizeWeight:number, eadOffset:flatbuffers.Offset, ladOffset:flatbuffers.Offset):flatbuffers.Offset {
  AircraftMissionRequirements_Abridged.startAircraftMissionRequirements_Abridged(builder);
  AircraftMissionRequirements_Abridged.addGdssReqId(builder, gdssReqIdOffset);
  AircraftMissionRequirements_Abridged.addOnloadId(builder, onloadId);
  AircraftMissionRequirements_Abridged.addOnloadLocode(builder, onloadLocodeOffset);
  AircraftMissionRequirements_Abridged.addOffloadId(builder, offloadId);
  AircraftMissionRequirements_Abridged.addOffloadLocode(builder, offloadLocodeOffset);
  AircraftMissionRequirements_Abridged.addUln(builder, ulnOffset);
  AircraftMissionRequirements_Abridged.addTransReqNum(builder, transReqNumOffset);
  AircraftMissionRequirements_Abridged.addProjName(builder, projNameOffset);
  AircraftMissionRequirements_Abridged.addOplan(builder, oplanOffset);
  AircraftMissionRequirements_Abridged.addNumPax(builder, numPax);
  AircraftMissionRequirements_Abridged.addNumLitter(builder, numLitter);
  AircraftMissionRequirements_Abridged.addNumAmbulatory(builder, numAmbulatory);
  AircraftMissionRequirements_Abridged.addNumAttendant(builder, numAttendant);
  AircraftMissionRequirements_Abridged.addBulkWeight(builder, bulkWeight);
  AircraftMissionRequirements_Abridged.addOversizeWeight(builder, oversizeWeight);
  AircraftMissionRequirements_Abridged.addOutsizeWeight(builder, outsizeWeight);
  AircraftMissionRequirements_Abridged.addEad(builder, eadOffset);
  AircraftMissionRequirements_Abridged.addLad(builder, ladOffset);
  return AircraftMissionRequirements_Abridged.endAircraftMissionRequirements_Abridged(builder);
}

unpack(): AircraftMissionRequirements_AbridgedT {
  return new AircraftMissionRequirements_AbridgedT(
    this.gdssReqId(),
    this.onloadId(),
    this.onloadLocode(),
    this.offloadId(),
    this.offloadLocode(),
    this.uln(),
    this.transReqNum(),
    this.projName(),
    this.oplan(),
    this.numPax(),
    this.numLitter(),
    this.numAmbulatory(),
    this.numAttendant(),
    this.bulkWeight(),
    this.oversizeWeight(),
    this.outsizeWeight(),
    this.ead(),
    this.lad()
  );
}


unpackTo(_o: AircraftMissionRequirements_AbridgedT): void {
  _o.gdssReqId = this.gdssReqId();
  _o.onloadId = this.onloadId();
  _o.onloadLocode = this.onloadLocode();
  _o.offloadId = this.offloadId();
  _o.offloadLocode = this.offloadLocode();
  _o.uln = this.uln();
  _o.transReqNum = this.transReqNum();
  _o.projName = this.projName();
  _o.oplan = this.oplan();
  _o.numPax = this.numPax();
  _o.numLitter = this.numLitter();
  _o.numAmbulatory = this.numAmbulatory();
  _o.numAttendant = this.numAttendant();
  _o.bulkWeight = this.bulkWeight();
  _o.oversizeWeight = this.oversizeWeight();
  _o.outsizeWeight = this.outsizeWeight();
  _o.ead = this.ead();
  _o.lad = this.lad();
}
}

export class AircraftMissionRequirements_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public gdssReqId: string|Uint8Array|null = null,
  public onloadId: number = 0,
  public onloadLocode: string|Uint8Array|null = null,
  public offloadId: number = 0,
  public offloadLocode: string|Uint8Array|null = null,
  public uln: string|Uint8Array|null = null,
  public transReqNum: string|Uint8Array|null = null,
  public projName: string|Uint8Array|null = null,
  public oplan: string|Uint8Array|null = null,
  public numPax: number = 0,
  public numLitter: number = 0,
  public numAmbulatory: number = 0,
  public numAttendant: number = 0,
  public bulkWeight: number = 0.0,
  public oversizeWeight: number = 0.0,
  public outsizeWeight: number = 0.0,
  public ead: string|Uint8Array|null = null,
  public lad: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const gdssReqId = (this.gdssReqId !== null ? builder.createString(this.gdssReqId!) : 0);
  const onloadLocode = (this.onloadLocode !== null ? builder.createString(this.onloadLocode!) : 0);
  const offloadLocode = (this.offloadLocode !== null ? builder.createString(this.offloadLocode!) : 0);
  const uln = (this.uln !== null ? builder.createString(this.uln!) : 0);
  const transReqNum = (this.transReqNum !== null ? builder.createString(this.transReqNum!) : 0);
  const projName = (this.projName !== null ? builder.createString(this.projName!) : 0);
  const oplan = (this.oplan !== null ? builder.createString(this.oplan!) : 0);
  const ead = (this.ead !== null ? builder.createString(this.ead!) : 0);
  const lad = (this.lad !== null ? builder.createString(this.lad!) : 0);

  return AircraftMissionRequirements_Abridged.createAircraftMissionRequirements_Abridged(builder,
    gdssReqId,
    this.onloadId,
    onloadLocode,
    this.offloadId,
    offloadLocode,
    uln,
    transReqNum,
    projName,
    oplan,
    this.numPax,
    this.numLitter,
    this.numAmbulatory,
    this.numAttendant,
    this.bulkWeight,
    this.oversizeWeight,
    this.outsizeWeight,
    ead,
    lad
  );
}
}
