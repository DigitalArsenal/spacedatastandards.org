// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AircraftStatus_Full_airToAirStatus_Enum } from './aircraft-status-full-air-to-air-status-enum.js';
import { AircraftStatus_Full_airToGroundStatus_Enum } from './aircraft-status-full-air-to-ground-status-enum.js';
import { AircraftStatus_Full_dataMode_Enum } from './aircraft-status-full-data-mode-enum.js';


/**
 * /// Aircraft readiness and status data. Contains the dynamic data associated with the specific aircraft status, either in-flight or on-ground, including remaining fuel, mission readiness, and inventory, etc.
 */
export class AircraftStatus_Full implements flatbuffers.IUnpackableObject<AircraftStatus_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AircraftStatus_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAircraftStatus_Full(bb:flatbuffers.ByteBuffer, obj?:AircraftStatus_Full):AircraftStatus_Full {
  return (obj || new AircraftStatus_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAircraftStatus_Full(bb:flatbuffers.ByteBuffer, obj?:AircraftStatus_Full):AircraftStatus_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AircraftStatus_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRC');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the aircraft.
 * Example: /// Example: 29232269-e4c2-45c9-aa21-039a33209340
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idAircraft():string|null
idAircraft(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idAircraft(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate Aircraft Identifier provided by source.
 * Example: /// Example: ORIG-AIRCRAFT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
altAircraftId():string|null
altAircraftId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altAircraftId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
 * Example: /// Example: AVAILABLE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
currentState():string|null
currentState(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentState(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * If not airborne, the unique identifier of the installation currently hosting the aircraft.
 * Example: /// Example: b89430e3-97d9-408c-9c89-fd3840c4b84d
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idAirfield():string|null
idAirfield(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idAirfield(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * US Air Force geographic location code of the airfield where the aircraft is located.
 * Example: /// Example: AJJY
 * Constraints: Minimum length = 0, Maximum length = 16
 */
geoLoc():string|null
geoLoc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geoLoc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The International Civil Aviation Organization (ICAO) code at which this aircraft was previously located.
 * Example: /// Example: EGLL
 * Constraints: Minimum length = 0, Maximum length = 4
 */
previousIcao():string|null
previousIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
previousIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The International Civil Aviation Organization (ICAO) code at which this aircraft is currently located or has most recently departed, if airborne.
 * Example: /// Example: KCHS
 * Constraints: Minimum length = 0, Maximum length = 4
 */
currentIcao():string|null
currentIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The International Civil Aviation Organization (ICAO) code of the next destination of this aircraft.
 * Example: /// Example: PHNL
 * Constraints: Minimum length = 0, Maximum length = 4
 */
nextIcao():string|null
nextIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nextIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
 * Example: /// Example: Landing
 * Constraints: Minimum length = 0, Maximum length = 16
 */
flightPhase():string|null
flightPhase(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
flightPhase(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The turnaround start time, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
taStartTime():string|null
taStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
earliestTaendTime():string|null
earliestTaendTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
earliestTaendTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
 * Example: /// Example: ABLE
 * Constraints: Minimum length = 0, Maximum length = 16
 */
missionReadiness():string|null
missionReadiness(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionReadiness(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The mass of fuel remaining on the aircraft, in kilograms.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
fuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Used in conjunction with the fuel field to indicate either burnable or offload fuel.
 * Example: /// Example: Burn
 * Constraints: Minimum length = 0, Maximum length = 8
 */
fuelFunction():string|null
fuelFunction(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fuelFunction(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating that the aircraft is capable of making at least one gun pass.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
gunCapable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
 * Example: /// Example: 7.62 MM
 * Constraints: Minimum length = 0, Maximum length = 64
 */
gunRdsType():string|null
gunRdsType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gunRdsType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The lower bound of the estimated number of gun rounds available.
 * Example: /// Example: 150
 * Constraints: No constraints specified.
 */
gunRdsMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The upper bound of the estimated number of gun rounds available.
 * Example: /// Example: 550
 * Constraints: No constraints specified.
 */
gunRdsMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
 * Example: /// Example: OPERATIONAL
 * Constraints: Minimum length = 0, Maximum length = 16
 */
airToAirStatus():AircraftStatus_Full_airToAirStatus_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AircraftStatus_Full_airToAirStatus_Enum.OPERATIONAL;
}

/**
 * The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
 * Example: /// Example: OPERATIONAL
 * Constraints: Minimum length = 0, Maximum length = 16
 */
airToGroundStatus():AircraftStatus_Full_airToGroundStatus_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AircraftStatus_Full_airToGroundStatus_Enum.OPERATIONAL;
}

/**
 * Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific/store type designations.  This array must be the same length as inventoryMin and inventoryMax.
 * Example: /// Example: ['AIM-9 SIDEWINDER', 'AIM-120 AMRAAM']
 * Constraints: No constraints specified.
 */
inventory(index: number):string
inventory(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
inventory(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

inventoryLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the lower bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMax.
 * Example: /// Example: [1, 2]
 * Constraints: No constraints specified.
 */
inventoryMin(index: number):string
inventoryMin(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
inventoryMin(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

inventoryMinLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the upper bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMin.
 * Example: /// Example: [2, 2]
 * Constraints: No constraints specified.
 */
inventoryMax(index: number):string
inventoryMax(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
inventoryMax(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

inventoryMaxLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * List of unavailable systems that would normally be on this aircraft.
 * Example: /// Example: ['CMDS', 'AOC']
 * Constraints: No constraints specified.
 */
unavailableSys(index: number):string
unavailableSys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
unavailableSys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

unavailableSysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * List of additional operational systems on this aircraft beyond what is normally available.
 * Example: /// Example: ['ATOMS', 'TUDL', 'BLOS1']
 * Constraints: No constraints specified.
 */
additionalSys(index: number):string
additionalSys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
additionalSys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

additionalSysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional notes/comments concerning this aircraft status.
 * Example: /// Example: Some notes for aircraft A
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Maintenance pacing remarks assocociated with this aircraft.
 * Example: /// Example: COM2 INOP
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
mxRemark():string|null
mxRemark(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mxRemark(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The maintenance status of the aircraft.
 * Example: /// Example: maintenance status
 * Constraints: Minimum length = 0, Maximum length = 24
 */
maintStatus():string|null
maintStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
maintStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the maintenance discrepancy that drives the current maintenance status.
 * Example: /// Example: SCREW STUCK IN LEFT NLG TIRE
 * Constraints: Minimum length = 0, Maximum length = 128
 */
maintStatusDriver():string|null
maintStatusDriver(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
maintStatusDriver(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the priority of the maintenance effort.
 * Example: /// Example: 1
 * Constraints: Minimum length = 0, Maximum length = 1
 */
maintPriority():string|null
maintPriority(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
maintPriority(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Aircraft alpha status code that indicates the aircraft maintenance status estimated by the pilot.
 * Example: /// Example: A2
 * Constraints: Minimum length = 0, Maximum length = 2
 */
alphaStatusCode():string|null
alphaStatusCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
alphaStatusCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time of the last maintenance status update, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
maintStatusUpdate():string|null
maintStatusUpdate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
maintStatusUpdate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Date when the military aircraft inspection was last performed, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-09-09T16:00:00.123Z
 * Constraints: No constraints specified.
 */
lastInspectionDate():string|null
lastInspectionDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastInspectionDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Military aircraft maintenance point of contact for this aircraft.
 * Example: /// Example: PSUP NIGHT SHIFT 800-555-4412
 * Constraints: Minimum length = 0, Maximum length = 32
 */
maintPoc():string|null
maintPoc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
maintPoc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
 * Example: /// Example: ALERT
 * Constraints: Minimum length = 0, Maximum length = 24
 */
groundStatus():string|null
groundStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groundStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN, etc.).
 * Example: /// Example: CLEAR
 * Constraints: Minimum length = 0, Maximum length = 24
 */
contaminationStatus():string|null
contaminationStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
contaminationStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED, etc.).
 * Example: /// Example: DELIVERED
 * Constraints: Minimum length = 0, Maximum length = 24
 */
fuelStatus():string|null
fuelStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fuelStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name or ID of the external user that updated this status.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 36
 */
lastUpdatedBy():string|null
lastUpdatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastUpdatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the course of action to resolve the issue will be determined.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
troubleshootEtic():string|null
troubleshootEtic(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
troubleshootEtic(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the issue will be resolved.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
etic():string|null
etic(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
etic(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The parking location of this aircraft.
 * Example: /// Example: B1
 * Constraints: Minimum length = 0, Maximum length = 24
 */
parkLocation():string|null
parkLocation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
parkLocation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
 * Example: /// Example: GDSS
 * Constraints: Minimum length = 0, Maximum length = 24
 */
parkLocationSystem():string|null
parkLocationSystem(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
parkLocationSystem(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Point of Interest (POI) record related to this aircraft status. This will generally represent the location of an aircraft on the ground.
 * Example: /// Example: 0e52f081-a2e3-4b73-b822-88b882232691
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idPoi():string|null
idPoi(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idPoi(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AircraftStatus_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AircraftStatus_Full_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAircraftStatus_Full(builder:flatbuffers.Builder) {
  builder.startObject(54);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdAircraft(builder:flatbuffers.Builder, idAircraftOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idAircraftOffset, 0);
}

static addAltAircraftId(builder:flatbuffers.Builder, altAircraftIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, altAircraftIdOffset, 0);
}

static addCurrentState(builder:flatbuffers.Builder, currentStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, currentStateOffset, 0);
}

static addIdAirfield(builder:flatbuffers.Builder, idAirfieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idAirfieldOffset, 0);
}

static addGeoLoc(builder:flatbuffers.Builder, geoLocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, geoLocOffset, 0);
}

static addPreviousIcao(builder:flatbuffers.Builder, previousIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, previousIcaoOffset, 0);
}

static addCurrentIcao(builder:flatbuffers.Builder, currentIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, currentIcaoOffset, 0);
}

static addNextIcao(builder:flatbuffers.Builder, nextIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, nextIcaoOffset, 0);
}

static addFlightPhase(builder:flatbuffers.Builder, flightPhaseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, flightPhaseOffset, 0);
}

static addTaStartTime(builder:flatbuffers.Builder, taStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, taStartTimeOffset, 0);
}

static addEarliestTaendTime(builder:flatbuffers.Builder, earliestTaendTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, earliestTaendTimeOffset, 0);
}

static addMissionReadiness(builder:flatbuffers.Builder, missionReadinessOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, missionReadinessOffset, 0);
}

static addFuel(builder:flatbuffers.Builder, fuel:number) {
  builder.addFieldInt32(14, fuel, 0);
}

static addFuelFunction(builder:flatbuffers.Builder, fuelFunctionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, fuelFunctionOffset, 0);
}

static addGunCapable(builder:flatbuffers.Builder, gunCapable:boolean) {
  builder.addFieldInt8(16, +gunCapable, +false);
}

static addGunRdsType(builder:flatbuffers.Builder, gunRdsTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, gunRdsTypeOffset, 0);
}

static addGunRdsMin(builder:flatbuffers.Builder, gunRdsMin:number) {
  builder.addFieldInt32(18, gunRdsMin, 0);
}

static addGunRdsMax(builder:flatbuffers.Builder, gunRdsMax:number) {
  builder.addFieldInt32(19, gunRdsMax, 0);
}

static addAirToAirStatus(builder:flatbuffers.Builder, airToAirStatus:AircraftStatus_Full_airToAirStatus_Enum) {
  builder.addFieldInt8(20, airToAirStatus, AircraftStatus_Full_airToAirStatus_Enum.OPERATIONAL);
}

static addAirToGroundStatus(builder:flatbuffers.Builder, airToGroundStatus:AircraftStatus_Full_airToGroundStatus_Enum) {
  builder.addFieldInt8(21, airToGroundStatus, AircraftStatus_Full_airToGroundStatus_Enum.OPERATIONAL);
}

static addInventory(builder:flatbuffers.Builder, inventoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, inventoryOffset, 0);
}

static createInventoryVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInventoryVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addInventoryMin(builder:flatbuffers.Builder, inventoryMinOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, inventoryMinOffset, 0);
}

static createInventoryMinVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInventoryMinVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addInventoryMax(builder:flatbuffers.Builder, inventoryMaxOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, inventoryMaxOffset, 0);
}

static createInventoryMaxVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInventoryMaxVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUnavailableSys(builder:flatbuffers.Builder, unavailableSysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, unavailableSysOffset, 0);
}

static createUnavailableSysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUnavailableSysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAdditionalSys(builder:flatbuffers.Builder, additionalSysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, additionalSysOffset, 0);
}

static createAdditionalSysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAdditionalSysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, notesOffset, 0);
}

static addMxRemark(builder:flatbuffers.Builder, mxRemarkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, mxRemarkOffset, 0);
}

static addMaintStatus(builder:flatbuffers.Builder, maintStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, maintStatusOffset, 0);
}

static addMaintStatusDriver(builder:flatbuffers.Builder, maintStatusDriverOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, maintStatusDriverOffset, 0);
}

static addMaintPriority(builder:flatbuffers.Builder, maintPriorityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, maintPriorityOffset, 0);
}

static addAlphaStatusCode(builder:flatbuffers.Builder, alphaStatusCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, alphaStatusCodeOffset, 0);
}

static addMaintStatusUpdate(builder:flatbuffers.Builder, maintStatusUpdateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, maintStatusUpdateOffset, 0);
}

static addLastInspectionDate(builder:flatbuffers.Builder, lastInspectionDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, lastInspectionDateOffset, 0);
}

static addMaintPoc(builder:flatbuffers.Builder, maintPocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, maintPocOffset, 0);
}

static addGroundStatus(builder:flatbuffers.Builder, groundStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, groundStatusOffset, 0);
}

static addContaminationStatus(builder:flatbuffers.Builder, contaminationStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, contaminationStatusOffset, 0);
}

static addFuelStatus(builder:flatbuffers.Builder, fuelStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, fuelStatusOffset, 0);
}

static addLastUpdatedBy(builder:flatbuffers.Builder, lastUpdatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, lastUpdatedByOffset, 0);
}

static addTroubleshootEtic(builder:flatbuffers.Builder, troubleshootEticOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, troubleshootEticOffset, 0);
}

static addEtic(builder:flatbuffers.Builder, eticOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, eticOffset, 0);
}

static addParkLocation(builder:flatbuffers.Builder, parkLocationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, parkLocationOffset, 0);
}

static addParkLocationSystem(builder:flatbuffers.Builder, parkLocationSystemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, parkLocationSystemOffset, 0);
}

static addIdPoi(builder:flatbuffers.Builder, idPoiOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, idPoiOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, updatedByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AircraftStatus_Full_dataMode_Enum) {
  builder.addFieldInt8(52, dataMode, AircraftStatus_Full_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, origNetworkOffset, 0);
}

static endAircraftStatus_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAircraftStatus_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC');
}

static finishSizePrefixedAircraftStatus_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC', true);
}

static createAircraftStatus_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idAircraftOffset:flatbuffers.Offset, altAircraftIdOffset:flatbuffers.Offset, currentStateOffset:flatbuffers.Offset, idAirfieldOffset:flatbuffers.Offset, geoLocOffset:flatbuffers.Offset, previousIcaoOffset:flatbuffers.Offset, currentIcaoOffset:flatbuffers.Offset, nextIcaoOffset:flatbuffers.Offset, flightPhaseOffset:flatbuffers.Offset, taStartTimeOffset:flatbuffers.Offset, earliestTaendTimeOffset:flatbuffers.Offset, missionReadinessOffset:flatbuffers.Offset, fuel:number, fuelFunctionOffset:flatbuffers.Offset, gunCapable:boolean, gunRdsTypeOffset:flatbuffers.Offset, gunRdsMin:number, gunRdsMax:number, airToAirStatus:AircraftStatus_Full_airToAirStatus_Enum, airToGroundStatus:AircraftStatus_Full_airToGroundStatus_Enum, inventoryOffset:flatbuffers.Offset, inventoryMinOffset:flatbuffers.Offset, inventoryMaxOffset:flatbuffers.Offset, unavailableSysOffset:flatbuffers.Offset, additionalSysOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, mxRemarkOffset:flatbuffers.Offset, maintStatusOffset:flatbuffers.Offset, maintStatusDriverOffset:flatbuffers.Offset, maintPriorityOffset:flatbuffers.Offset, alphaStatusCodeOffset:flatbuffers.Offset, maintStatusUpdateOffset:flatbuffers.Offset, lastInspectionDateOffset:flatbuffers.Offset, maintPocOffset:flatbuffers.Offset, groundStatusOffset:flatbuffers.Offset, contaminationStatusOffset:flatbuffers.Offset, fuelStatusOffset:flatbuffers.Offset, lastUpdatedByOffset:flatbuffers.Offset, troubleshootEticOffset:flatbuffers.Offset, eticOffset:flatbuffers.Offset, parkLocationOffset:flatbuffers.Offset, parkLocationSystemOffset:flatbuffers.Offset, idPoiOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:AircraftStatus_Full_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  AircraftStatus_Full.startAircraftStatus_Full(builder);
  AircraftStatus_Full.addId(builder, idOffset);
  AircraftStatus_Full.addClassificationMarking(builder, classificationMarkingOffset);
  AircraftStatus_Full.addIdAircraft(builder, idAircraftOffset);
  AircraftStatus_Full.addAltAircraftId(builder, altAircraftIdOffset);
  AircraftStatus_Full.addCurrentState(builder, currentStateOffset);
  AircraftStatus_Full.addIdAirfield(builder, idAirfieldOffset);
  AircraftStatus_Full.addGeoLoc(builder, geoLocOffset);
  AircraftStatus_Full.addPreviousIcao(builder, previousIcaoOffset);
  AircraftStatus_Full.addCurrentIcao(builder, currentIcaoOffset);
  AircraftStatus_Full.addNextIcao(builder, nextIcaoOffset);
  AircraftStatus_Full.addFlightPhase(builder, flightPhaseOffset);
  AircraftStatus_Full.addTaStartTime(builder, taStartTimeOffset);
  AircraftStatus_Full.addEarliestTaendTime(builder, earliestTaendTimeOffset);
  AircraftStatus_Full.addMissionReadiness(builder, missionReadinessOffset);
  AircraftStatus_Full.addFuel(builder, fuel);
  AircraftStatus_Full.addFuelFunction(builder, fuelFunctionOffset);
  AircraftStatus_Full.addGunCapable(builder, gunCapable);
  AircraftStatus_Full.addGunRdsType(builder, gunRdsTypeOffset);
  AircraftStatus_Full.addGunRdsMin(builder, gunRdsMin);
  AircraftStatus_Full.addGunRdsMax(builder, gunRdsMax);
  AircraftStatus_Full.addAirToAirStatus(builder, airToAirStatus);
  AircraftStatus_Full.addAirToGroundStatus(builder, airToGroundStatus);
  AircraftStatus_Full.addInventory(builder, inventoryOffset);
  AircraftStatus_Full.addInventoryMin(builder, inventoryMinOffset);
  AircraftStatus_Full.addInventoryMax(builder, inventoryMaxOffset);
  AircraftStatus_Full.addUnavailableSys(builder, unavailableSysOffset);
  AircraftStatus_Full.addAdditionalSys(builder, additionalSysOffset);
  AircraftStatus_Full.addNotes(builder, notesOffset);
  AircraftStatus_Full.addMxRemark(builder, mxRemarkOffset);
  AircraftStatus_Full.addMaintStatus(builder, maintStatusOffset);
  AircraftStatus_Full.addMaintStatusDriver(builder, maintStatusDriverOffset);
  AircraftStatus_Full.addMaintPriority(builder, maintPriorityOffset);
  AircraftStatus_Full.addAlphaStatusCode(builder, alphaStatusCodeOffset);
  AircraftStatus_Full.addMaintStatusUpdate(builder, maintStatusUpdateOffset);
  AircraftStatus_Full.addLastInspectionDate(builder, lastInspectionDateOffset);
  AircraftStatus_Full.addMaintPoc(builder, maintPocOffset);
  AircraftStatus_Full.addGroundStatus(builder, groundStatusOffset);
  AircraftStatus_Full.addContaminationStatus(builder, contaminationStatusOffset);
  AircraftStatus_Full.addFuelStatus(builder, fuelStatusOffset);
  AircraftStatus_Full.addLastUpdatedBy(builder, lastUpdatedByOffset);
  AircraftStatus_Full.addTroubleshootEtic(builder, troubleshootEticOffset);
  AircraftStatus_Full.addEtic(builder, eticOffset);
  AircraftStatus_Full.addParkLocation(builder, parkLocationOffset);
  AircraftStatus_Full.addParkLocationSystem(builder, parkLocationSystemOffset);
  AircraftStatus_Full.addIdPoi(builder, idPoiOffset);
  AircraftStatus_Full.addCreatedAt(builder, createdAtOffset);
  AircraftStatus_Full.addCreatedBy(builder, createdByOffset);
  AircraftStatus_Full.addUpdatedAt(builder, updatedAtOffset);
  AircraftStatus_Full.addUpdatedBy(builder, updatedByOffset);
  AircraftStatus_Full.addSourceDl(builder, sourceDlOffset);
  AircraftStatus_Full.addSource(builder, sourceOffset);
  AircraftStatus_Full.addOrigin(builder, originOffset);
  AircraftStatus_Full.addDataMode(builder, dataMode);
  AircraftStatus_Full.addOrigNetwork(builder, origNetworkOffset);
  return AircraftStatus_Full.endAircraftStatus_Full(builder);
}

unpack(): AircraftStatus_FullT {
  return new AircraftStatus_FullT(
    this.id(),
    this.classificationMarking(),
    this.idAircraft(),
    this.altAircraftId(),
    this.currentState(),
    this.idAirfield(),
    this.geoLoc(),
    this.previousIcao(),
    this.currentIcao(),
    this.nextIcao(),
    this.flightPhase(),
    this.taStartTime(),
    this.earliestTaendTime(),
    this.missionReadiness(),
    this.fuel(),
    this.fuelFunction(),
    this.gunCapable(),
    this.gunRdsType(),
    this.gunRdsMin(),
    this.gunRdsMax(),
    this.airToAirStatus(),
    this.airToGroundStatus(),
    this.bb!.createScalarList<string>(this.inventory.bind(this), this.inventory_Length()),
    this.bb!.createScalarList<string>(this.inventoryMin.bind(this), this.inventoryMin_Length()),
    this.bb!.createScalarList<string>(this.inventoryMax.bind(this), this.inventoryMax_Length()),
    this.bb!.createScalarList<string>(this.unavailableSys.bind(this), this.unavailableSys_Length()),
    this.bb!.createScalarList<string>(this.additionalSys.bind(this), this.additionalSys_Length()),
    this.notes(),
    this.mxRemark(),
    this.maintStatus(),
    this.maintStatusDriver(),
    this.maintPriority(),
    this.alphaStatusCode(),
    this.maintStatusUpdate(),
    this.lastInspectionDate(),
    this.maintPoc(),
    this.groundStatus(),
    this.contaminationStatus(),
    this.fuelStatus(),
    this.lastUpdatedBy(),
    this.troubleshootEtic(),
    this.etic(),
    this.parkLocation(),
    this.parkLocationSystem(),
    this.idPoi(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: AircraftStatus_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idAircraft = this.idAircraft();
  _o.altAircraftId = this.altAircraftId();
  _o.currentState = this.currentState();
  _o.idAirfield = this.idAirfield();
  _o.geoLoc = this.geoLoc();
  _o.previousICAO = this.previousIcao();
  _o.currentICAO = this.currentIcao();
  _o.nextICAO = this.nextIcao();
  _o.flightPhase = this.flightPhase();
  _o.taStartTime = this.taStartTime();
  _o.earliestTAEndTime = this.earliestTaendTime();
  _o.missionReadiness = this.missionReadiness();
  _o.fuel = this.fuel();
  _o.fuelFunction = this.fuelFunction();
  _o.gunCapable = this.gunCapable();
  _o.gunRdsType = this.gunRdsType();
  _o.gunRdsMin = this.gunRdsMin();
  _o.gunRdsMax = this.gunRdsMax();
  _o.airToAirStatus = this.airToAirStatus();
  _o.airToGroundStatus = this.airToGroundStatus();
  _o.inventory = this.bb!.createScalarList<string>(this.inventory.bind(this), this.inventory_Length());
  _o.inventoryMin = this.bb!.createScalarList<string>(this.inventoryMin.bind(this), this.inventoryMin_Length());
  _o.inventoryMax = this.bb!.createScalarList<string>(this.inventoryMax.bind(this), this.inventoryMax_Length());
  _o.unavailableSys = this.bb!.createScalarList<string>(this.unavailableSys.bind(this), this.unavailableSys_Length());
  _o.additionalSys = this.bb!.createScalarList<string>(this.additionalSys.bind(this), this.additionalSys_Length());
  _o.notes = this.notes();
  _o.mxRemark = this.mxRemark();
  _o.maintStatus = this.maintStatus();
  _o.maintStatusDriver = this.maintStatusDriver();
  _o.maintPriority = this.maintPriority();
  _o.alphaStatusCode = this.alphaStatusCode();
  _o.maintStatusUpdate = this.maintStatusUpdate();
  _o.lastInspectionDate = this.lastInspectionDate();
  _o.maintPoc = this.maintPoc();
  _o.groundStatus = this.groundStatus();
  _o.contaminationStatus = this.contaminationStatus();
  _o.fuelStatus = this.fuelStatus();
  _o.lastUpdatedBy = this.lastUpdatedBy();
  _o.troubleshootEtic = this.troubleshootEtic();
  _o.etic = this.etic();
  _o.parkLocation = this.parkLocation();
  _o.parkLocationSystem = this.parkLocationSystem();
  _o.idPOI = this.idPoi();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class AircraftStatus_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idAircraft: string|Uint8Array|null = null,
  public altAircraftId: string|Uint8Array|null = null,
  public currentState: string|Uint8Array|null = null,
  public idAirfield: string|Uint8Array|null = null,
  public geoLoc: string|Uint8Array|null = null,
  public previousICAO: string|Uint8Array|null = null,
  public currentICAO: string|Uint8Array|null = null,
  public nextICAO: string|Uint8Array|null = null,
  public flightPhase: string|Uint8Array|null = null,
  public taStartTime: string|Uint8Array|null = null,
  public earliestTAEndTime: string|Uint8Array|null = null,
  public missionReadiness: string|Uint8Array|null = null,
  public fuel: number = 0,
  public fuelFunction: string|Uint8Array|null = null,
  public gunCapable: boolean = false,
  public gunRdsType: string|Uint8Array|null = null,
  public gunRdsMin: number = 0,
  public gunRdsMax: number = 0,
  public airToAirStatus: AircraftStatus_Full_airToAirStatus_Enum = AircraftStatus_Full_airToAirStatus_Enum.OPERATIONAL,
  public airToGroundStatus: AircraftStatus_Full_airToGroundStatus_Enum = AircraftStatus_Full_airToGroundStatus_Enum.OPERATIONAL,
  public inventory: (string)[] = [],
  public inventoryMin: (string)[] = [],
  public inventoryMax: (string)[] = [],
  public unavailableSys: (string)[] = [],
  public additionalSys: (string)[] = [],
  public notes: string|Uint8Array|null = null,
  public mxRemark: string|Uint8Array|null = null,
  public maintStatus: string|Uint8Array|null = null,
  public maintStatusDriver: string|Uint8Array|null = null,
  public maintPriority: string|Uint8Array|null = null,
  public alphaStatusCode: string|Uint8Array|null = null,
  public maintStatusUpdate: string|Uint8Array|null = null,
  public lastInspectionDate: string|Uint8Array|null = null,
  public maintPoc: string|Uint8Array|null = null,
  public groundStatus: string|Uint8Array|null = null,
  public contaminationStatus: string|Uint8Array|null = null,
  public fuelStatus: string|Uint8Array|null = null,
  public lastUpdatedBy: string|Uint8Array|null = null,
  public troubleshootEtic: string|Uint8Array|null = null,
  public etic: string|Uint8Array|null = null,
  public parkLocation: string|Uint8Array|null = null,
  public parkLocationSystem: string|Uint8Array|null = null,
  public idPOI: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: AircraftStatus_Full_dataMode_Enum = AircraftStatus_Full_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idAircraft = (this.idAircraft !== null ? builder.createString(this.idAircraft!) : 0);
  const altAircraftId = (this.altAircraftId !== null ? builder.createString(this.altAircraftId!) : 0);
  const currentState = (this.currentState !== null ? builder.createString(this.currentState!) : 0);
  const idAirfield = (this.idAirfield !== null ? builder.createString(this.idAirfield!) : 0);
  const geoLoc = (this.geoLoc !== null ? builder.createString(this.geoLoc!) : 0);
  const previousICAO = (this.previousICAO !== null ? builder.createString(this.previousICAO!) : 0);
  const currentICAO = (this.currentICAO !== null ? builder.createString(this.currentICAO!) : 0);
  const nextICAO = (this.nextICAO !== null ? builder.createString(this.nextICAO!) : 0);
  const flightPhase = (this.flightPhase !== null ? builder.createString(this.flightPhase!) : 0);
  const taStartTime = (this.taStartTime !== null ? builder.createString(this.taStartTime!) : 0);
  const earliestTAEndTime = (this.earliestTAEndTime !== null ? builder.createString(this.earliestTAEndTime!) : 0);
  const missionReadiness = (this.missionReadiness !== null ? builder.createString(this.missionReadiness!) : 0);
  const fuelFunction = (this.fuelFunction !== null ? builder.createString(this.fuelFunction!) : 0);
  const gunRdsType = (this.gunRdsType !== null ? builder.createString(this.gunRdsType!) : 0);
  const inventory = AircraftStatus_Full.createInventoryVector(builder, builder.createObjectOffsetList(this.inventory));
  const inventoryMin = AircraftStatus_Full.createInventoryMinVector(builder, builder.createObjectOffsetList(this.inventoryMin));
  const inventoryMax = AircraftStatus_Full.createInventoryMaxVector(builder, builder.createObjectOffsetList(this.inventoryMax));
  const unavailableSys = AircraftStatus_Full.createUnavailableSysVector(builder, builder.createObjectOffsetList(this.unavailableSys));
  const additionalSys = AircraftStatus_Full.createAdditionalSysVector(builder, builder.createObjectOffsetList(this.additionalSys));
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const mxRemark = (this.mxRemark !== null ? builder.createString(this.mxRemark!) : 0);
  const maintStatus = (this.maintStatus !== null ? builder.createString(this.maintStatus!) : 0);
  const maintStatusDriver = (this.maintStatusDriver !== null ? builder.createString(this.maintStatusDriver!) : 0);
  const maintPriority = (this.maintPriority !== null ? builder.createString(this.maintPriority!) : 0);
  const alphaStatusCode = (this.alphaStatusCode !== null ? builder.createString(this.alphaStatusCode!) : 0);
  const maintStatusUpdate = (this.maintStatusUpdate !== null ? builder.createString(this.maintStatusUpdate!) : 0);
  const lastInspectionDate = (this.lastInspectionDate !== null ? builder.createString(this.lastInspectionDate!) : 0);
  const maintPoc = (this.maintPoc !== null ? builder.createString(this.maintPoc!) : 0);
  const groundStatus = (this.groundStatus !== null ? builder.createString(this.groundStatus!) : 0);
  const contaminationStatus = (this.contaminationStatus !== null ? builder.createString(this.contaminationStatus!) : 0);
  const fuelStatus = (this.fuelStatus !== null ? builder.createString(this.fuelStatus!) : 0);
  const lastUpdatedBy = (this.lastUpdatedBy !== null ? builder.createString(this.lastUpdatedBy!) : 0);
  const troubleshootEtic = (this.troubleshootEtic !== null ? builder.createString(this.troubleshootEtic!) : 0);
  const etic = (this.etic !== null ? builder.createString(this.etic!) : 0);
  const parkLocation = (this.parkLocation !== null ? builder.createString(this.parkLocation!) : 0);
  const parkLocationSystem = (this.parkLocationSystem !== null ? builder.createString(this.parkLocationSystem!) : 0);
  const idPOI = (this.idPOI !== null ? builder.createString(this.idPOI!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return AircraftStatus_Full.createAircraftStatus_Full(builder,
    id,
    classificationMarking,
    idAircraft,
    altAircraftId,
    currentState,
    idAirfield,
    geoLoc,
    previousICAO,
    currentICAO,
    nextICAO,
    flightPhase,
    taStartTime,
    earliestTAEndTime,
    missionReadiness,
    this.fuel,
    fuelFunction,
    this.gunCapable,
    gunRdsType,
    this.gunRdsMin,
    this.gunRdsMax,
    this.airToAirStatus,
    this.airToGroundStatus,
    inventory,
    inventoryMin,
    inventoryMax,
    unavailableSys,
    additionalSys,
    notes,
    mxRemark,
    maintStatus,
    maintStatusDriver,
    maintPriority,
    alphaStatusCode,
    maintStatusUpdate,
    lastInspectionDate,
    maintPoc,
    groundStatus,
    contaminationStatus,
    fuelStatus,
    lastUpdatedBy,
    troubleshootEtic,
    etic,
    parkLocation,
    parkLocationSystem,
    idPOI,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    sourceDL,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
