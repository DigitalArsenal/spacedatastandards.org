// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DiplomaticClearance_Ingest_dataMode_Enum } from './diplomatic-clearance-ingest-data-mode-enum.js';


/**
 * /// A diplomatic clearance is an authorization for an aircraft to traverse or land within a specified country.
 */
export class DiplomaticClearance_Ingest implements flatbuffers.IUnpackableObject<DiplomaticClearance_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DiplomaticClearance_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDiplomaticClearance_Ingest(bb:flatbuffers.ByteBuffer, obj?:DiplomaticClearance_Ingest):DiplomaticClearance_Ingest {
  return (obj || new DiplomaticClearance_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDiplomaticClearance_Ingest(bb:flatbuffers.ByteBuffer, obj?:DiplomaticClearance_Ingest):DiplomaticClearance_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DiplomaticClearance_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DIPL');
}

/**
 * Unique identifier of the record, auto-generated by the system if not provided on create operations.
 * Example: /// Example: 25059135-4afc-45c2-b78b-d6e843dbd96d
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Mission associated with this diplomatic clearance record.
 * Example: /// Example: 0dba1363-2d09-49fa-a784-4bb4cbb1674a
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idMission():string|null
idMission(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idMission(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional diplomatic clearance worksheet ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: 990ae849089e3d6cad69655324176bb6
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalWorksheetId():string|null
externalWorksheetId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalWorksheetId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
 * Example: /// Example: G2-939911-AC
 * Constraints: Minimum length = 0, Maximum length = 256
 */
dipWorksheetName():string|null
dipWorksheetName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dipWorksheetName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The First Departure Date (FDD) the mission is scheduled for departure, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
firstDepDate():string|null
firstDepDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
firstDepDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
docDeadline():string|null
docDeadline(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
docDeadline(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve this clearance request.
 * Example: /// Example: 1083034
 * Constraints: Minimum length = 0, Maximum length = 40
 */
apacsId():string|null
apacsId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
apacsId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Collection of diplomatic clearance details.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
diplomaticClearanceDetails(index: number):string
diplomaticClearanceDetails(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
diplomaticClearanceDetails(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

diplomaticClearanceDetailsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Collection of diplomatic clearance remarks.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
diplomaticClearanceRemarks(index: number):string
diplomaticClearanceRemarks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
diplomaticClearanceRemarks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

diplomaticClearanceRemarksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():DiplomaticClearance_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DiplomaticClearance_Ingest_dataMode_Enum.REAL;
}

static startDiplomaticClearance_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdMission(builder:flatbuffers.Builder, idMissionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idMissionOffset, 0);
}

static addExternalWorksheetId(builder:flatbuffers.Builder, externalWorksheetIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, externalWorksheetIdOffset, 0);
}

static addDipWorksheetName(builder:flatbuffers.Builder, dipWorksheetNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, dipWorksheetNameOffset, 0);
}

static addFirstDepDate(builder:flatbuffers.Builder, firstDepDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, firstDepDateOffset, 0);
}

static addDocDeadline(builder:flatbuffers.Builder, docDeadlineOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, docDeadlineOffset, 0);
}

static addApacsId(builder:flatbuffers.Builder, apacsIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, apacsIdOffset, 0);
}

static addDiplomaticClearanceDetails(builder:flatbuffers.Builder, diplomaticClearanceDetailsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, diplomaticClearanceDetailsOffset, 0);
}

static createDiplomaticClearanceDetailsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDiplomaticClearanceDetailsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDiplomaticClearanceRemarks(builder:flatbuffers.Builder, diplomaticClearanceRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, diplomaticClearanceRemarksOffset, 0);
}

static createDiplomaticClearanceRemarksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDiplomaticClearanceRemarksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, updatedByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:DiplomaticClearance_Ingest_dataMode_Enum) {
  builder.addFieldInt8(18, dataMode, DiplomaticClearance_Ingest_dataMode_Enum.REAL);
}

static endDiplomaticClearance_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDiplomaticClearance_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DIPL');
}

static finishSizePrefixedDiplomaticClearance_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DIPL', true);
}

static createDiplomaticClearance_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idMissionOffset:flatbuffers.Offset, externalWorksheetIdOffset:flatbuffers.Offset, dipWorksheetNameOffset:flatbuffers.Offset, firstDepDateOffset:flatbuffers.Offset, docDeadlineOffset:flatbuffers.Offset, apacsIdOffset:flatbuffers.Offset, diplomaticClearanceDetailsOffset:flatbuffers.Offset, diplomaticClearanceRemarksOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:DiplomaticClearance_Ingest_dataMode_Enum):flatbuffers.Offset {
  DiplomaticClearance_Ingest.startDiplomaticClearance_Ingest(builder);
  DiplomaticClearance_Ingest.addId(builder, idOffset);
  DiplomaticClearance_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  DiplomaticClearance_Ingest.addIdMission(builder, idMissionOffset);
  DiplomaticClearance_Ingest.addExternalWorksheetId(builder, externalWorksheetIdOffset);
  DiplomaticClearance_Ingest.addDipWorksheetName(builder, dipWorksheetNameOffset);
  DiplomaticClearance_Ingest.addFirstDepDate(builder, firstDepDateOffset);
  DiplomaticClearance_Ingest.addDocDeadline(builder, docDeadlineOffset);
  DiplomaticClearance_Ingest.addApacsId(builder, apacsIdOffset);
  DiplomaticClearance_Ingest.addDiplomaticClearanceDetails(builder, diplomaticClearanceDetailsOffset);
  DiplomaticClearance_Ingest.addDiplomaticClearanceRemarks(builder, diplomaticClearanceRemarksOffset);
  DiplomaticClearance_Ingest.addCreatedAt(builder, createdAtOffset);
  DiplomaticClearance_Ingest.addCreatedBy(builder, createdByOffset);
  DiplomaticClearance_Ingest.addUpdatedAt(builder, updatedAtOffset);
  DiplomaticClearance_Ingest.addUpdatedBy(builder, updatedByOffset);
  DiplomaticClearance_Ingest.addSourceDl(builder, sourceDlOffset);
  DiplomaticClearance_Ingest.addSource(builder, sourceOffset);
  DiplomaticClearance_Ingest.addOrigin(builder, originOffset);
  DiplomaticClearance_Ingest.addOrigNetwork(builder, origNetworkOffset);
  DiplomaticClearance_Ingest.addDataMode(builder, dataMode);
  return DiplomaticClearance_Ingest.endDiplomaticClearance_Ingest(builder);
}

unpack(): DiplomaticClearance_IngestT {
  return new DiplomaticClearance_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idMission(),
    this.externalWorksheetId(),
    this.dipWorksheetName(),
    this.firstDepDate(),
    this.docDeadline(),
    this.apacsId(),
    this.bb!.createScalarList<string>(this.diplomaticClearanceDetails.bind(this), this.diplomaticClearanceDetails_Length()),
    this.bb!.createScalarList<string>(this.diplomaticClearanceRemarks.bind(this), this.diplomaticClearanceRemarks_Length()),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: DiplomaticClearance_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idMission = this.idMission();
  _o.externalWorksheetId = this.externalWorksheetId();
  _o.dipWorksheetName = this.dipWorksheetName();
  _o.firstDepDate = this.firstDepDate();
  _o.docDeadline = this.docDeadline();
  _o.apacsId = this.apacsId();
  _o.diplomaticClearanceDetails = this.bb!.createScalarList<string>(this.diplomaticClearanceDetails.bind(this), this.diplomaticClearanceDetails_Length());
  _o.diplomaticClearanceRemarks = this.bb!.createScalarList<string>(this.diplomaticClearanceRemarks.bind(this), this.diplomaticClearanceRemarks_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class DiplomaticClearance_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idMission: string|Uint8Array|null = null,
  public externalWorksheetId: string|Uint8Array|null = null,
  public dipWorksheetName: string|Uint8Array|null = null,
  public firstDepDate: string|Uint8Array|null = null,
  public docDeadline: string|Uint8Array|null = null,
  public apacsId: string|Uint8Array|null = null,
  public diplomaticClearanceDetails: (string)[] = [],
  public diplomaticClearanceRemarks: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: DiplomaticClearance_Ingest_dataMode_Enum = DiplomaticClearance_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idMission = (this.idMission !== null ? builder.createString(this.idMission!) : 0);
  const externalWorksheetId = (this.externalWorksheetId !== null ? builder.createString(this.externalWorksheetId!) : 0);
  const dipWorksheetName = (this.dipWorksheetName !== null ? builder.createString(this.dipWorksheetName!) : 0);
  const firstDepDate = (this.firstDepDate !== null ? builder.createString(this.firstDepDate!) : 0);
  const docDeadline = (this.docDeadline !== null ? builder.createString(this.docDeadline!) : 0);
  const apacsId = (this.apacsId !== null ? builder.createString(this.apacsId!) : 0);
  const diplomaticClearanceDetails = DiplomaticClearance_Ingest.createDiplomaticClearanceDetailsVector(builder, builder.createObjectOffsetList(this.diplomaticClearanceDetails));
  const diplomaticClearanceRemarks = DiplomaticClearance_Ingest.createDiplomaticClearanceRemarksVector(builder, builder.createObjectOffsetList(this.diplomaticClearanceRemarks));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return DiplomaticClearance_Ingest.createDiplomaticClearance_Ingest(builder,
    id,
    classificationMarking,
    idMission,
    externalWorksheetId,
    dipWorksheetName,
    firstDepDate,
    docDeadline,
    apacsId,
    diplomaticClearanceDetails,
    diplomaticClearanceRemarks,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    sourceDL,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
