// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SeradataSpacecraftDetails_Full_dataMode_Enum } from './seradata-spacecraft-details-full-data-mode-enum.js';


/**
 * /// On-orbit spacecraft details compiled by Seradata for a particular satellite.
 */
export class SeradataSpacecraftDetails_Full implements flatbuffers.IUnpackableObject<SeradataSpacecraftDetails_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SeradataSpacecraftDetails_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSeradataSpacecraftDetails_Full(bb:flatbuffers.ByteBuffer, obj?:SeradataSpacecraftDetails_Full):SeradataSpacecraftDetails_Full {
  return (obj || new SeradataSpacecraftDetails_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSeradataSpacecraftDetails_Full(bb:flatbuffers.ByteBuffer, obj?:SeradataSpacecraftDetails_Full):SeradataSpacecraftDetails_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SeradataSpacecraftDetails_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SERA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SERADATASPACECRAFTDETAILS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID of the parent Onorbit record, if available.
 * Example: /// Example: 503
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft name.
 * Example: /// Example: name
 * Constraints: Minimum length = 1, Maximum length = 64
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description associated with the spacecraft.
 * Example: /// Example: description
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata international number.
 * Example: /// Example: number
 * Constraints: Minimum length = 0, Maximum length = 16
 */
intlNumber():string|null
intlNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
intlNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata sector (e.g. Commercial, Military, Civil/Other).
 * Example: /// Example: Commercial
 * Constraints: Minimum length = 0, Maximum length = 16
 */
sector():string|null
sector(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sector(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Apogee in km.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
apogee():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Perigee in km.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
perigee():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft period in minutes.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
period():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Seradata provided inclination in degrees.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
inclination():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * UUID of the prime manufacturer organization, if available.
 * Example: /// Example: 05c43360-382e-4aa2-b875-ed28945ff2e5
 * Constraints: Minimum length = 0, Maximum length = 36
 */
primeManufacturerOrgId():string|null
primeManufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
primeManufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).
 * Example: /// Example: 3-Axis
 * Constraints: Minimum length = 0, Maximum length = 32
 */
stabilizer():string|null
stabilizer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stabilizer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft design life in days.
 * Example: /// Example: 231
 * Constraints: No constraints specified.
 */
designLife():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Spacecraft expected life in days.
 * Example: /// Example: 231
 * Constraints: No constraints specified.
 */
expectedLife():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Boolean indicating if the spacecraft was insured at launch.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
insuredAtLaunch():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Mass at launch in kg.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
launchMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Mass dry in kg.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
dryMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * NORAD satellite number if available.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
catalogNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Mass dry in kg.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
totalPayloadPower():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft constellation.
 * Example: /// Example: GPS
 * Constraints: Minimum length = 0, Maximum length = 64
 */
constellation():string|null
constellation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
constellation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft orbit category (e.g GEO, LEO, etc).
 * Example: /// Example: GEO
 * Constraints: Minimum length = 0, Maximum length = 64
 */
orbitCategory():string|null
orbitCategory(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
orbitCategory(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).
 * Example: /// Example: Geostationary
 * Constraints: Minimum length = 0, Maximum length = 64
 */
orbitSubCategory():string|null
orbitSubCategory(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
orbitSubCategory(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Cost of launch in M USD.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
launchCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Boolean indicating if the spacecraft launch cost is estimated.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
launchCostEstimated():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Boolean indicating if the spacecraft cost is estimated.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
costEstimated():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Cost of spacecraft at new in M USD.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
newCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Combined cost of spacecraft at new in M USD.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
combinedNewCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Boolean indicating if the spacecraft combined new cost is estimated.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
combinedCostEstimated():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Insured value of spacecraft at launch in M USD.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
insuredValueAtLaunch():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Boolean indicating if the spacecraft insured value at launch is estimated.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
insuredValueLaunchEstimated():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Annual insured depreciaion factor as a percent fraction.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
annualInsuredDepreciationFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
annualInsuredDepreciationFactorEstimated():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Insurance premium at launch in M USD.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
insurancePremiumAtLaunch():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
insurancePremiumAtLaunchEstimated():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Number of humans carried on spacecraft.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numHumans():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Cubesat dispenser type.
 * Example: /// Example: cubesatDispenserType
 * Constraints: Minimum length = 0, Maximum length = 64
 */
cubesatDispenserType():string|null
cubesatDispenserType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cubesatDispenserType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).
 * Example: /// Example: 2500 - 3500kg  - Large Satellite
 * Constraints: Minimum length = 0, Maximum length = 64
 */
massCategory():string|null
massCategory(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
massCategory(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata launch ID.
 * Example: /// Example: 11573
 * Constraints: Minimum length = 0, Maximum length = 32
 */
launchId():string|null
launchId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata launch ID.
 * Example: /// Example: 123
 * Constraints: Minimum length = 0, Maximum length = 36
 */
launchVehicleId():string|null
launchVehicleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchVehicleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata launch vehicle family.
 * Example: /// Example: launchProviderFlightNumber
 * Constraints: Minimum length = 0, Maximum length = 64
 */
launchProviderFlightNumber():string|null
launchProviderFlightNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchProviderFlightNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Launch Site Name.
 * Example: /// Example: launchSiteName
 * Constraints: Minimum length = 0, Maximum length = 64
 */
launchSiteName():string|null
launchSiteName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchSiteName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata Launch Site ID.
 * Example: /// Example: 28
 * Constraints: Minimum length = 0, Maximum length = 32
 */
launchSiteId():string|null
launchSiteId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchSiteId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata launch country.
 * Example: /// Example: USA
 * Constraints: Minimum length = 0, Maximum length = 32
 */
launchCountry():string|null
launchCountry(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchCountry(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata launch provider.
 * Example: /// Example: launchProvider
 * Constraints: Minimum length = 0, Maximum length = 128
 */
launchProvider():string|null
launchProvider(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchProvider(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata launch provider country.
 * Example: /// Example: USA
 * Constraints: Minimum length = 0, Maximum length = 32
 */
launchProviderCountry():string|null
launchProviderCountry(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchProviderCountry(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating if the launch was commercial.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
commercialLaunch():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Seradata launch type (e.g. Launched, Future, etc).
 * Example: /// Example: Future
 * Constraints: Minimum length = 0, Maximum length = 32
 */
launchType():string|null
launchType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).
 * Example: /// Example: Expendable
 * Constraints: Minimum length = 0, Maximum length = 64
 */
launchCharacteristic():string|null
launchCharacteristic(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchCharacteristic(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata launch number.
 * Example: /// Example: FN040
 * Constraints: Minimum length = 0, Maximum length = 16
 */
launchNumber():string|null
launchNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Launch date.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
launchDate():string|null
launchDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata remarks on launch date.
 * Example: /// Example: launchDateRemarks
 * Constraints: Minimum length = 0, Maximum length = 64
 */
launchDateRemarks():string|null
launchDateRemarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchDateRemarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Youtube link of launch.
 * Example: /// Example: youtubeLaunchLink
 * Constraints: Minimum length = 0, Maximum length = 32
 */
youtubeLaunchLink():string|null
youtubeLaunchLink(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
youtubeLaunchLink(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).
 * Example: /// Example: Inactive - Retired
 * Constraints: Minimum length = 0, Maximum length = 64
 */
status():string|null
status(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
status(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft owner name.
 * Example: /// Example: owner
 * Constraints: Minimum length = 0, Maximum length = 128
 */
owner():string|null
owner(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
owner(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft owner country.
 * Example: /// Example: USA
 * Constraints: Minimum length = 0, Maximum length = 64
 */
ownerCountry():string|null
ownerCountry(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ownerCountry(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft operator name.
 * Example: /// Example: operator
 * Constraints: Minimum length = 0, Maximum length = 128
 */
operator():string|null
operator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft operator country.
 * Example: /// Example: USA
 * Constraints: Minimum length = 0, Maximum length = 64
 */
operatorCountry():string|null
operatorCountry(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operatorCountry(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating if the spacecraft was leased.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
leased():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Spacecraft order date.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
orderDate():string|null
orderDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
orderDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Total capability lost as a percent fraction.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
capabilityLost():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total capacity lost as a percent fraction.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
capacityLost():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft primary mission and group.
 * Example: /// Example: primaryMissionGroup
 * Constraints: Minimum length = 0, Maximum length = 64
 */
primaryMissionGroup():string|null
primaryMissionGroup(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
primaryMissionGroup(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft additional missions and groups.
 * Example: /// Example: additionalMissionsGroups
 * Constraints: Minimum length = 0, Maximum length = 256
 */
additionalMissionsGroups():string|null
additionalMissionsGroups(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
additionalMissionsGroups(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of insurance claims for this spacecraft.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
totalClaims():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of injuries related to this spacecraft.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
totalInjuries():number {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of fatalities related to this spacecraft.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
totalFatalities():number {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Spacecraft name at launch.
 * Example: /// Example: nameAtLaunch
 * Constraints: Minimum length = 0, Maximum length = 64
 */
nameAtLaunch():string|null
nameAtLaunch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nameAtLaunch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft Bus ID.
 * Example: /// Example: BUS-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
busId():string|null
busId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
busId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Current age in years.
 * Example: /// Example: 5.898630136986301
 * Constraints: No constraints specified.
 */
currentAge():number {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft life lost as a percent fraction.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
lifeLost():number {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: -8.23
 * Constraints: No constraints specified.
 */
geoPosition():number {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft total insurance losses as a fraction.
 * Example: /// Example: 0.393
 * Constraints: No constraints specified.
 */
insuranceLossesTotal():number {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft launch arranger.
 * Example: /// Example: launchArranger
 * Constraints: Minimum length = 0, Maximum length = 64
 */
launchArranger():string|null
launchArranger(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchArranger(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft launch arranger country.
 * Example: /// Example: USA
 * Constraints: Minimum length = 0, Maximum length = 64
 */
launchArrangerCountry():string|null
launchArrangerCountry(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchArrangerCountry(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft serial number.
 * Example: /// Example: serialNumber
 * Constraints: Minimum length = 0, Maximum length = 64
 */
serialNumber():string|null
serialNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
serialNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft program name.
 * Example: /// Example: programName
 * Constraints: Minimum length = 0, Maximum length = 64
 */
programName():string|null
programName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
programName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft reused hull name.
 * Example: /// Example: reusedHullName
 * Constraints: Minimum length = 0, Maximum length = 64
 */
reusedHullName():string|null
reusedHullName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reusedHullName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft date of observation.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
dateOfObservation():string|null
dateOfObservation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dateOfObservation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft latest latitude in degrees.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft latest longitude in degrees.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft latest altitude in km.
 * Example: /// Example: 36036.6330576414
 * Constraints: No constraints specified.
 */
altitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft collision risk 1mm sqm latest.
 * Example: /// Example: 1.33
 * Constraints: No constraints specified.
 */
collisionRiskMm():number {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft collision risk 1cm sqm latest.
 * Example: /// Example: 1.43
 * Constraints: No constraints specified.
 */
collisionRiskCm():number {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft quantity.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
quantity():number {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Spacecraft reusable flights.
 * Example: /// Example: reusableFlights
 * Constraints: Minimum length = 0, Maximum length = 64
 */
reusableFlights():string|null
reusableFlights(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reusableFlights(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Notes on the spacecraft.
 * Example: /// Example: Sample Notes
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 176);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Insurance notes for the spacecraft.
 * Example: /// Example: Sample Notes
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
insuranceNotes():string|null
insuranceNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
insuranceNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 178);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Insurance notes for the spacecraft.
 * Example: /// Example: Sample Notes
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
launchNotes():string|null
launchNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 180);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 182);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 184);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 186);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SeradataSpacecraftDetails_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 188);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SeradataSpacecraftDetails_Full_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 190);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 192);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was last updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 194);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 196);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Read-only details of the SeradataSigIntPayload object, only used during detail queries (not to be provided on create/update operations).
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
seradataSigIntPayload(index: number):string
seradataSigIntPayload(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
seradataSigIntPayload(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 198);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

seradataSigIntPayloadLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 198);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Read-only details of the SeradataRadarPayload object, only used during detail queries (not to be provided on create/update operations).
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
seradataRadarPayload(index: number):string
seradataRadarPayload(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
seradataRadarPayload(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 200);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

seradataRadarPayloadLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 200);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Read-only details of the SeradataNavigation object, only used during detail queries (not to be provided on create/update operations).
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
seradataNavigation(index: number):string
seradataNavigation(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
seradataNavigation(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 202);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

seradataNavigationLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 202);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Read-only details of the SeradataOpticalPayload object, only used during detail queries (not to be provided on create/update operations).
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
seradataOpticalPayload(index: number):string
seradataOpticalPayload(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
seradataOpticalPayload(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 204);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

seradataOpticalPayloadLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 204);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Read-only details of the SeradataEarlyWarning object, only used during detail queries (not to be provided on create/update operations).
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
seradataEarlyWarning(index: number):string
seradataEarlyWarning(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
seradataEarlyWarning(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 206);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

seradataEarlyWarningLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 206);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Read-only details of the Scientific object, only used during detail queries (not to be provided on create/update operations).
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
scientific(index: number):string
scientific(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
scientific(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 208);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

scientificLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 208);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Read-only details of the SeradataCommDetails object, only used during detail queries (not to be provided on create/update operations).
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
seradataCommDetails(index: number):string
seradataCommDetails(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
seradataCommDetails(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 210);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

seradataCommDetailsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 210);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
onOrbit():string|null
onOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
onOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 212);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSeradataSpacecraftDetails_Full(builder:flatbuffers.Builder) {
  builder.startObject(105);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idOnOrbitOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, descriptionOffset, 0);
}

static addIntlNumber(builder:flatbuffers.Builder, intlNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, intlNumberOffset, 0);
}

static addSector(builder:flatbuffers.Builder, sectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, sectorOffset, 0);
}

static addApogee(builder:flatbuffers.Builder, apogee:number) {
  builder.addFieldFloat64(7, apogee, 0.0);
}

static addPerigee(builder:flatbuffers.Builder, perigee:number) {
  builder.addFieldFloat64(8, perigee, 0.0);
}

static addPeriod(builder:flatbuffers.Builder, period:number) {
  builder.addFieldFloat64(9, period, 0.0);
}

static addInclination(builder:flatbuffers.Builder, inclination:number) {
  builder.addFieldFloat64(10, inclination, 0.0);
}

static addPrimeManufacturerOrgId(builder:flatbuffers.Builder, primeManufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, primeManufacturerOrgIdOffset, 0);
}

static addStabilizer(builder:flatbuffers.Builder, stabilizerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, stabilizerOffset, 0);
}

static addDesignLife(builder:flatbuffers.Builder, designLife:number) {
  builder.addFieldInt32(13, designLife, 0);
}

static addExpectedLife(builder:flatbuffers.Builder, expectedLife:number) {
  builder.addFieldInt32(14, expectedLife, 0);
}

static addInsuredAtLaunch(builder:flatbuffers.Builder, insuredAtLaunch:boolean) {
  builder.addFieldInt8(15, +insuredAtLaunch, +false);
}

static addLaunchMass(builder:flatbuffers.Builder, launchMass:number) {
  builder.addFieldFloat64(16, launchMass, 0.0);
}

static addDryMass(builder:flatbuffers.Builder, dryMass:number) {
  builder.addFieldFloat64(17, dryMass, 0.0);
}

static addCatalogNumber(builder:flatbuffers.Builder, catalogNumber:number) {
  builder.addFieldInt32(18, catalogNumber, 0);
}

static addTotalPayloadPower(builder:flatbuffers.Builder, totalPayloadPower:number) {
  builder.addFieldFloat64(19, totalPayloadPower, 0.0);
}

static addConstellation(builder:flatbuffers.Builder, constellationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, constellationOffset, 0);
}

static addOrbitCategory(builder:flatbuffers.Builder, orbitCategoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, orbitCategoryOffset, 0);
}

static addOrbitSubCategory(builder:flatbuffers.Builder, orbitSubCategoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, orbitSubCategoryOffset, 0);
}

static addLaunchCost(builder:flatbuffers.Builder, launchCost:number) {
  builder.addFieldFloat64(23, launchCost, 0.0);
}

static addLaunchCostEstimated(builder:flatbuffers.Builder, launchCostEstimated:boolean) {
  builder.addFieldInt8(24, +launchCostEstimated, +false);
}

static addCostEstimated(builder:flatbuffers.Builder, costEstimated:boolean) {
  builder.addFieldInt8(25, +costEstimated, +false);
}

static addNewCost(builder:flatbuffers.Builder, newCost:number) {
  builder.addFieldFloat64(26, newCost, 0.0);
}

static addCombinedNewCost(builder:flatbuffers.Builder, combinedNewCost:number) {
  builder.addFieldFloat64(27, combinedNewCost, 0.0);
}

static addCombinedCostEstimated(builder:flatbuffers.Builder, combinedCostEstimated:boolean) {
  builder.addFieldInt8(28, +combinedCostEstimated, +false);
}

static addInsuredValueAtLaunch(builder:flatbuffers.Builder, insuredValueAtLaunch:number) {
  builder.addFieldFloat64(29, insuredValueAtLaunch, 0.0);
}

static addInsuredValueLaunchEstimated(builder:flatbuffers.Builder, insuredValueLaunchEstimated:boolean) {
  builder.addFieldInt8(30, +insuredValueLaunchEstimated, +false);
}

static addAnnualInsuredDepreciationFactor(builder:flatbuffers.Builder, annualInsuredDepreciationFactor:number) {
  builder.addFieldFloat64(31, annualInsuredDepreciationFactor, 0.0);
}

static addAnnualInsuredDepreciationFactorEstimated(builder:flatbuffers.Builder, annualInsuredDepreciationFactorEstimated:boolean) {
  builder.addFieldInt8(32, +annualInsuredDepreciationFactorEstimated, +false);
}

static addInsurancePremiumAtLaunch(builder:flatbuffers.Builder, insurancePremiumAtLaunch:number) {
  builder.addFieldFloat64(33, insurancePremiumAtLaunch, 0.0);
}

static addInsurancePremiumAtLaunchEstimated(builder:flatbuffers.Builder, insurancePremiumAtLaunchEstimated:boolean) {
  builder.addFieldInt8(34, +insurancePremiumAtLaunchEstimated, +false);
}

static addNumHumans(builder:flatbuffers.Builder, numHumans:number) {
  builder.addFieldInt32(35, numHumans, 0);
}

static addCubesatDispenserType(builder:flatbuffers.Builder, cubesatDispenserTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, cubesatDispenserTypeOffset, 0);
}

static addMassCategory(builder:flatbuffers.Builder, massCategoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, massCategoryOffset, 0);
}

static addLaunchId(builder:flatbuffers.Builder, launchIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, launchIdOffset, 0);
}

static addLaunchVehicleId(builder:flatbuffers.Builder, launchVehicleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, launchVehicleIdOffset, 0);
}

static addLaunchProviderFlightNumber(builder:flatbuffers.Builder, launchProviderFlightNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, launchProviderFlightNumberOffset, 0);
}

static addLaunchSiteName(builder:flatbuffers.Builder, launchSiteNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, launchSiteNameOffset, 0);
}

static addLaunchSiteId(builder:flatbuffers.Builder, launchSiteIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, launchSiteIdOffset, 0);
}

static addLaunchCountry(builder:flatbuffers.Builder, launchCountryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, launchCountryOffset, 0);
}

static addLaunchProvider(builder:flatbuffers.Builder, launchProviderOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, launchProviderOffset, 0);
}

static addLaunchProviderCountry(builder:flatbuffers.Builder, launchProviderCountryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, launchProviderCountryOffset, 0);
}

static addCommercialLaunch(builder:flatbuffers.Builder, commercialLaunch:boolean) {
  builder.addFieldInt8(46, +commercialLaunch, +false);
}

static addLaunchType(builder:flatbuffers.Builder, launchTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, launchTypeOffset, 0);
}

static addLaunchCharacteristic(builder:flatbuffers.Builder, launchCharacteristicOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, launchCharacteristicOffset, 0);
}

static addLaunchNumber(builder:flatbuffers.Builder, launchNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, launchNumberOffset, 0);
}

static addLaunchDate(builder:flatbuffers.Builder, launchDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, launchDateOffset, 0);
}

static addLaunchDateRemarks(builder:flatbuffers.Builder, launchDateRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, launchDateRemarksOffset, 0);
}

static addYoutubeLaunchLink(builder:flatbuffers.Builder, youtubeLaunchLinkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, youtubeLaunchLinkOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, statusOffset, 0);
}

static addOwner(builder:flatbuffers.Builder, ownerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, ownerOffset, 0);
}

static addOwnerCountry(builder:flatbuffers.Builder, ownerCountryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, ownerCountryOffset, 0);
}

static addOperator(builder:flatbuffers.Builder, operatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, operatorOffset, 0);
}

static addOperatorCountry(builder:flatbuffers.Builder, operatorCountryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, operatorCountryOffset, 0);
}

static addLeased(builder:flatbuffers.Builder, leased:boolean) {
  builder.addFieldInt8(58, +leased, +false);
}

static addOrderDate(builder:flatbuffers.Builder, orderDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, orderDateOffset, 0);
}

static addCapabilityLost(builder:flatbuffers.Builder, capabilityLost:number) {
  builder.addFieldFloat64(60, capabilityLost, 0.0);
}

static addCapacityLost(builder:flatbuffers.Builder, capacityLost:number) {
  builder.addFieldFloat64(61, capacityLost, 0.0);
}

static addPrimaryMissionGroup(builder:flatbuffers.Builder, primaryMissionGroupOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, primaryMissionGroupOffset, 0);
}

static addAdditionalMissionsGroups(builder:flatbuffers.Builder, additionalMissionsGroupsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, additionalMissionsGroupsOffset, 0);
}

static addTotalClaims(builder:flatbuffers.Builder, totalClaims:number) {
  builder.addFieldInt32(64, totalClaims, 0);
}

static addTotalInjuries(builder:flatbuffers.Builder, totalInjuries:number) {
  builder.addFieldInt32(65, totalInjuries, 0);
}

static addTotalFatalities(builder:flatbuffers.Builder, totalFatalities:number) {
  builder.addFieldInt32(66, totalFatalities, 0);
}

static addNameAtLaunch(builder:flatbuffers.Builder, nameAtLaunchOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, nameAtLaunchOffset, 0);
}

static addBusId(builder:flatbuffers.Builder, busIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(68, busIdOffset, 0);
}

static addCurrentAge(builder:flatbuffers.Builder, currentAge:number) {
  builder.addFieldFloat64(69, currentAge, 0.0);
}

static addLifeLost(builder:flatbuffers.Builder, lifeLost:number) {
  builder.addFieldFloat64(70, lifeLost, 0.0);
}

static addGeoPosition(builder:flatbuffers.Builder, geoPosition:number) {
  builder.addFieldFloat64(71, geoPosition, 0.0);
}

static addInsuranceLossesTotal(builder:flatbuffers.Builder, insuranceLossesTotal:number) {
  builder.addFieldFloat64(72, insuranceLossesTotal, 0.0);
}

static addLaunchArranger(builder:flatbuffers.Builder, launchArrangerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(73, launchArrangerOffset, 0);
}

static addLaunchArrangerCountry(builder:flatbuffers.Builder, launchArrangerCountryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(74, launchArrangerCountryOffset, 0);
}

static addSerialNumber(builder:flatbuffers.Builder, serialNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(75, serialNumberOffset, 0);
}

static addProgramName(builder:flatbuffers.Builder, programNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(76, programNameOffset, 0);
}

static addReusedHullName(builder:flatbuffers.Builder, reusedHullNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(77, reusedHullNameOffset, 0);
}

static addDateOfObservation(builder:flatbuffers.Builder, dateOfObservationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(78, dateOfObservationOffset, 0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(79, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(80, lon, 0.0);
}

static addAltitude(builder:flatbuffers.Builder, altitude:number) {
  builder.addFieldFloat64(81, altitude, 0.0);
}

static addCollisionRiskMm(builder:flatbuffers.Builder, collisionRiskMm:number) {
  builder.addFieldFloat64(82, collisionRiskMm, 0.0);
}

static addCollisionRiskCm(builder:flatbuffers.Builder, collisionRiskCm:number) {
  builder.addFieldFloat64(83, collisionRiskCm, 0.0);
}

static addQuantity(builder:flatbuffers.Builder, quantity:number) {
  builder.addFieldInt32(84, quantity, 0);
}

static addReusableFlights(builder:flatbuffers.Builder, reusableFlightsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(85, reusableFlightsOffset, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(86, notesOffset, 0);
}

static addInsuranceNotes(builder:flatbuffers.Builder, insuranceNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(87, insuranceNotesOffset, 0);
}

static addLaunchNotes(builder:flatbuffers.Builder, launchNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(88, launchNotesOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(89, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(90, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(91, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SeradataSpacecraftDetails_Full_dataMode_Enum) {
  builder.addFieldInt8(92, dataMode, SeradataSpacecraftDetails_Full_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(93, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(94, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(95, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(96, updatedByOffset, 0);
}

static addSeradataSigIntPayload(builder:flatbuffers.Builder, seradataSigIntPayloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(97, seradataSigIntPayloadOffset, 0);
}

static createSeradataSigIntPayloadVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSeradataSigIntPayloadVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSeradataRadarPayload(builder:flatbuffers.Builder, seradataRadarPayloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(98, seradataRadarPayloadOffset, 0);
}

static createSeradataRadarPayloadVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSeradataRadarPayloadVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSeradataNavigation(builder:flatbuffers.Builder, seradataNavigationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(99, seradataNavigationOffset, 0);
}

static createSeradataNavigationVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSeradataNavigationVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSeradataOpticalPayload(builder:flatbuffers.Builder, seradataOpticalPayloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(100, seradataOpticalPayloadOffset, 0);
}

static createSeradataOpticalPayloadVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSeradataOpticalPayloadVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSeradataEarlyWarning(builder:flatbuffers.Builder, seradataEarlyWarningOffset:flatbuffers.Offset) {
  builder.addFieldOffset(101, seradataEarlyWarningOffset, 0);
}

static createSeradataEarlyWarningVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSeradataEarlyWarningVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addScientific(builder:flatbuffers.Builder, scientificOffset:flatbuffers.Offset) {
  builder.addFieldOffset(102, scientificOffset, 0);
}

static createScientificVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startScientificVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSeradataCommDetails(builder:flatbuffers.Builder, seradataCommDetailsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(103, seradataCommDetailsOffset, 0);
}

static createSeradataCommDetailsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSeradataCommDetailsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOnOrbit(builder:flatbuffers.Builder, onOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(104, onOrbitOffset, 0);
}

static endSeradataSpacecraftDetails_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSeradataSpacecraftDetails_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SERA');
}

static finishSizePrefixedSeradataSpacecraftDetails_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SERA', true);
}

static createSeradataSpacecraftDetails_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, intlNumberOffset:flatbuffers.Offset, sectorOffset:flatbuffers.Offset, apogee:number, perigee:number, period:number, inclination:number, primeManufacturerOrgIdOffset:flatbuffers.Offset, stabilizerOffset:flatbuffers.Offset, designLife:number, expectedLife:number, insuredAtLaunch:boolean, launchMass:number, dryMass:number, catalogNumber:number, totalPayloadPower:number, constellationOffset:flatbuffers.Offset, orbitCategoryOffset:flatbuffers.Offset, orbitSubCategoryOffset:flatbuffers.Offset, launchCost:number, launchCostEstimated:boolean, costEstimated:boolean, newCost:number, combinedNewCost:number, combinedCostEstimated:boolean, insuredValueAtLaunch:number, insuredValueLaunchEstimated:boolean, annualInsuredDepreciationFactor:number, annualInsuredDepreciationFactorEstimated:boolean, insurancePremiumAtLaunch:number, insurancePremiumAtLaunchEstimated:boolean, numHumans:number, cubesatDispenserTypeOffset:flatbuffers.Offset, massCategoryOffset:flatbuffers.Offset, launchIdOffset:flatbuffers.Offset, launchVehicleIdOffset:flatbuffers.Offset, launchProviderFlightNumberOffset:flatbuffers.Offset, launchSiteNameOffset:flatbuffers.Offset, launchSiteIdOffset:flatbuffers.Offset, launchCountryOffset:flatbuffers.Offset, launchProviderOffset:flatbuffers.Offset, launchProviderCountryOffset:flatbuffers.Offset, commercialLaunch:boolean, launchTypeOffset:flatbuffers.Offset, launchCharacteristicOffset:flatbuffers.Offset, launchNumberOffset:flatbuffers.Offset, launchDateOffset:flatbuffers.Offset, launchDateRemarksOffset:flatbuffers.Offset, youtubeLaunchLinkOffset:flatbuffers.Offset, statusOffset:flatbuffers.Offset, ownerOffset:flatbuffers.Offset, ownerCountryOffset:flatbuffers.Offset, operatorOffset:flatbuffers.Offset, operatorCountryOffset:flatbuffers.Offset, leased:boolean, orderDateOffset:flatbuffers.Offset, capabilityLost:number, capacityLost:number, primaryMissionGroupOffset:flatbuffers.Offset, additionalMissionsGroupsOffset:flatbuffers.Offset, totalClaims:number, totalInjuries:number, totalFatalities:number, nameAtLaunchOffset:flatbuffers.Offset, busIdOffset:flatbuffers.Offset, currentAge:number, lifeLost:number, geoPosition:number, insuranceLossesTotal:number, launchArrangerOffset:flatbuffers.Offset, launchArrangerCountryOffset:flatbuffers.Offset, serialNumberOffset:flatbuffers.Offset, programNameOffset:flatbuffers.Offset, reusedHullNameOffset:flatbuffers.Offset, dateOfObservationOffset:flatbuffers.Offset, lat:number, lon:number, altitude:number, collisionRiskMm:number, collisionRiskCm:number, quantity:number, reusableFlightsOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, insuranceNotesOffset:flatbuffers.Offset, launchNotesOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:SeradataSpacecraftDetails_Full_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, seradataSigIntPayloadOffset:flatbuffers.Offset, seradataRadarPayloadOffset:flatbuffers.Offset, seradataNavigationOffset:flatbuffers.Offset, seradataOpticalPayloadOffset:flatbuffers.Offset, seradataEarlyWarningOffset:flatbuffers.Offset, scientificOffset:flatbuffers.Offset, seradataCommDetailsOffset:flatbuffers.Offset, onOrbitOffset:flatbuffers.Offset):flatbuffers.Offset {
  SeradataSpacecraftDetails_Full.startSeradataSpacecraftDetails_Full(builder);
  SeradataSpacecraftDetails_Full.addId(builder, idOffset);
  SeradataSpacecraftDetails_Full.addIdOnOrbit(builder, idOnOrbitOffset);
  SeradataSpacecraftDetails_Full.addClassificationMarking(builder, classificationMarkingOffset);
  SeradataSpacecraftDetails_Full.addName(builder, nameOffset);
  SeradataSpacecraftDetails_Full.addDescription(builder, descriptionOffset);
  SeradataSpacecraftDetails_Full.addIntlNumber(builder, intlNumberOffset);
  SeradataSpacecraftDetails_Full.addSector(builder, sectorOffset);
  SeradataSpacecraftDetails_Full.addApogee(builder, apogee);
  SeradataSpacecraftDetails_Full.addPerigee(builder, perigee);
  SeradataSpacecraftDetails_Full.addPeriod(builder, period);
  SeradataSpacecraftDetails_Full.addInclination(builder, inclination);
  SeradataSpacecraftDetails_Full.addPrimeManufacturerOrgId(builder, primeManufacturerOrgIdOffset);
  SeradataSpacecraftDetails_Full.addStabilizer(builder, stabilizerOffset);
  SeradataSpacecraftDetails_Full.addDesignLife(builder, designLife);
  SeradataSpacecraftDetails_Full.addExpectedLife(builder, expectedLife);
  SeradataSpacecraftDetails_Full.addInsuredAtLaunch(builder, insuredAtLaunch);
  SeradataSpacecraftDetails_Full.addLaunchMass(builder, launchMass);
  SeradataSpacecraftDetails_Full.addDryMass(builder, dryMass);
  SeradataSpacecraftDetails_Full.addCatalogNumber(builder, catalogNumber);
  SeradataSpacecraftDetails_Full.addTotalPayloadPower(builder, totalPayloadPower);
  SeradataSpacecraftDetails_Full.addConstellation(builder, constellationOffset);
  SeradataSpacecraftDetails_Full.addOrbitCategory(builder, orbitCategoryOffset);
  SeradataSpacecraftDetails_Full.addOrbitSubCategory(builder, orbitSubCategoryOffset);
  SeradataSpacecraftDetails_Full.addLaunchCost(builder, launchCost);
  SeradataSpacecraftDetails_Full.addLaunchCostEstimated(builder, launchCostEstimated);
  SeradataSpacecraftDetails_Full.addCostEstimated(builder, costEstimated);
  SeradataSpacecraftDetails_Full.addNewCost(builder, newCost);
  SeradataSpacecraftDetails_Full.addCombinedNewCost(builder, combinedNewCost);
  SeradataSpacecraftDetails_Full.addCombinedCostEstimated(builder, combinedCostEstimated);
  SeradataSpacecraftDetails_Full.addInsuredValueAtLaunch(builder, insuredValueAtLaunch);
  SeradataSpacecraftDetails_Full.addInsuredValueLaunchEstimated(builder, insuredValueLaunchEstimated);
  SeradataSpacecraftDetails_Full.addAnnualInsuredDepreciationFactor(builder, annualInsuredDepreciationFactor);
  SeradataSpacecraftDetails_Full.addAnnualInsuredDepreciationFactorEstimated(builder, annualInsuredDepreciationFactorEstimated);
  SeradataSpacecraftDetails_Full.addInsurancePremiumAtLaunch(builder, insurancePremiumAtLaunch);
  SeradataSpacecraftDetails_Full.addInsurancePremiumAtLaunchEstimated(builder, insurancePremiumAtLaunchEstimated);
  SeradataSpacecraftDetails_Full.addNumHumans(builder, numHumans);
  SeradataSpacecraftDetails_Full.addCubesatDispenserType(builder, cubesatDispenserTypeOffset);
  SeradataSpacecraftDetails_Full.addMassCategory(builder, massCategoryOffset);
  SeradataSpacecraftDetails_Full.addLaunchId(builder, launchIdOffset);
  SeradataSpacecraftDetails_Full.addLaunchVehicleId(builder, launchVehicleIdOffset);
  SeradataSpacecraftDetails_Full.addLaunchProviderFlightNumber(builder, launchProviderFlightNumberOffset);
  SeradataSpacecraftDetails_Full.addLaunchSiteName(builder, launchSiteNameOffset);
  SeradataSpacecraftDetails_Full.addLaunchSiteId(builder, launchSiteIdOffset);
  SeradataSpacecraftDetails_Full.addLaunchCountry(builder, launchCountryOffset);
  SeradataSpacecraftDetails_Full.addLaunchProvider(builder, launchProviderOffset);
  SeradataSpacecraftDetails_Full.addLaunchProviderCountry(builder, launchProviderCountryOffset);
  SeradataSpacecraftDetails_Full.addCommercialLaunch(builder, commercialLaunch);
  SeradataSpacecraftDetails_Full.addLaunchType(builder, launchTypeOffset);
  SeradataSpacecraftDetails_Full.addLaunchCharacteristic(builder, launchCharacteristicOffset);
  SeradataSpacecraftDetails_Full.addLaunchNumber(builder, launchNumberOffset);
  SeradataSpacecraftDetails_Full.addLaunchDate(builder, launchDateOffset);
  SeradataSpacecraftDetails_Full.addLaunchDateRemarks(builder, launchDateRemarksOffset);
  SeradataSpacecraftDetails_Full.addYoutubeLaunchLink(builder, youtubeLaunchLinkOffset);
  SeradataSpacecraftDetails_Full.addStatus(builder, statusOffset);
  SeradataSpacecraftDetails_Full.addOwner(builder, ownerOffset);
  SeradataSpacecraftDetails_Full.addOwnerCountry(builder, ownerCountryOffset);
  SeradataSpacecraftDetails_Full.addOperator(builder, operatorOffset);
  SeradataSpacecraftDetails_Full.addOperatorCountry(builder, operatorCountryOffset);
  SeradataSpacecraftDetails_Full.addLeased(builder, leased);
  SeradataSpacecraftDetails_Full.addOrderDate(builder, orderDateOffset);
  SeradataSpacecraftDetails_Full.addCapabilityLost(builder, capabilityLost);
  SeradataSpacecraftDetails_Full.addCapacityLost(builder, capacityLost);
  SeradataSpacecraftDetails_Full.addPrimaryMissionGroup(builder, primaryMissionGroupOffset);
  SeradataSpacecraftDetails_Full.addAdditionalMissionsGroups(builder, additionalMissionsGroupsOffset);
  SeradataSpacecraftDetails_Full.addTotalClaims(builder, totalClaims);
  SeradataSpacecraftDetails_Full.addTotalInjuries(builder, totalInjuries);
  SeradataSpacecraftDetails_Full.addTotalFatalities(builder, totalFatalities);
  SeradataSpacecraftDetails_Full.addNameAtLaunch(builder, nameAtLaunchOffset);
  SeradataSpacecraftDetails_Full.addBusId(builder, busIdOffset);
  SeradataSpacecraftDetails_Full.addCurrentAge(builder, currentAge);
  SeradataSpacecraftDetails_Full.addLifeLost(builder, lifeLost);
  SeradataSpacecraftDetails_Full.addGeoPosition(builder, geoPosition);
  SeradataSpacecraftDetails_Full.addInsuranceLossesTotal(builder, insuranceLossesTotal);
  SeradataSpacecraftDetails_Full.addLaunchArranger(builder, launchArrangerOffset);
  SeradataSpacecraftDetails_Full.addLaunchArrangerCountry(builder, launchArrangerCountryOffset);
  SeradataSpacecraftDetails_Full.addSerialNumber(builder, serialNumberOffset);
  SeradataSpacecraftDetails_Full.addProgramName(builder, programNameOffset);
  SeradataSpacecraftDetails_Full.addReusedHullName(builder, reusedHullNameOffset);
  SeradataSpacecraftDetails_Full.addDateOfObservation(builder, dateOfObservationOffset);
  SeradataSpacecraftDetails_Full.addLat(builder, lat);
  SeradataSpacecraftDetails_Full.addLon(builder, lon);
  SeradataSpacecraftDetails_Full.addAltitude(builder, altitude);
  SeradataSpacecraftDetails_Full.addCollisionRiskMm(builder, collisionRiskMm);
  SeradataSpacecraftDetails_Full.addCollisionRiskCm(builder, collisionRiskCm);
  SeradataSpacecraftDetails_Full.addQuantity(builder, quantity);
  SeradataSpacecraftDetails_Full.addReusableFlights(builder, reusableFlightsOffset);
  SeradataSpacecraftDetails_Full.addNotes(builder, notesOffset);
  SeradataSpacecraftDetails_Full.addInsuranceNotes(builder, insuranceNotesOffset);
  SeradataSpacecraftDetails_Full.addLaunchNotes(builder, launchNotesOffset);
  SeradataSpacecraftDetails_Full.addSource(builder, sourceOffset);
  SeradataSpacecraftDetails_Full.addOrigin(builder, originOffset);
  SeradataSpacecraftDetails_Full.addOrigNetwork(builder, origNetworkOffset);
  SeradataSpacecraftDetails_Full.addDataMode(builder, dataMode);
  SeradataSpacecraftDetails_Full.addCreatedAt(builder, createdAtOffset);
  SeradataSpacecraftDetails_Full.addCreatedBy(builder, createdByOffset);
  SeradataSpacecraftDetails_Full.addUpdatedAt(builder, updatedAtOffset);
  SeradataSpacecraftDetails_Full.addUpdatedBy(builder, updatedByOffset);
  SeradataSpacecraftDetails_Full.addSeradataSigIntPayload(builder, seradataSigIntPayloadOffset);
  SeradataSpacecraftDetails_Full.addSeradataRadarPayload(builder, seradataRadarPayloadOffset);
  SeradataSpacecraftDetails_Full.addSeradataNavigation(builder, seradataNavigationOffset);
  SeradataSpacecraftDetails_Full.addSeradataOpticalPayload(builder, seradataOpticalPayloadOffset);
  SeradataSpacecraftDetails_Full.addSeradataEarlyWarning(builder, seradataEarlyWarningOffset);
  SeradataSpacecraftDetails_Full.addScientific(builder, scientificOffset);
  SeradataSpacecraftDetails_Full.addSeradataCommDetails(builder, seradataCommDetailsOffset);
  SeradataSpacecraftDetails_Full.addOnOrbit(builder, onOrbitOffset);
  return SeradataSpacecraftDetails_Full.endSeradataSpacecraftDetails_Full(builder);
}

unpack(): SeradataSpacecraftDetails_FullT {
  return new SeradataSpacecraftDetails_FullT(
    this.id(),
    this.idOnOrbit(),
    this.classificationMarking(),
    this.name(),
    this.description(),
    this.intlNumber(),
    this.sector(),
    this.apogee(),
    this.perigee(),
    this.period(),
    this.inclination(),
    this.primeManufacturerOrgId(),
    this.stabilizer(),
    this.designLife(),
    this.expectedLife(),
    this.insuredAtLaunch(),
    this.launchMass(),
    this.dryMass(),
    this.catalogNumber(),
    this.totalPayloadPower(),
    this.constellation(),
    this.orbitCategory(),
    this.orbitSubCategory(),
    this.launchCost(),
    this.launchCostEstimated(),
    this.costEstimated(),
    this.newCost(),
    this.combinedNewCost(),
    this.combinedCostEstimated(),
    this.insuredValueAtLaunch(),
    this.insuredValueLaunchEstimated(),
    this.annualInsuredDepreciationFactor(),
    this.annualInsuredDepreciationFactorEstimated(),
    this.insurancePremiumAtLaunch(),
    this.insurancePremiumAtLaunchEstimated(),
    this.numHumans(),
    this.cubesatDispenserType(),
    this.massCategory(),
    this.launchId(),
    this.launchVehicleId(),
    this.launchProviderFlightNumber(),
    this.launchSiteName(),
    this.launchSiteId(),
    this.launchCountry(),
    this.launchProvider(),
    this.launchProviderCountry(),
    this.commercialLaunch(),
    this.launchType(),
    this.launchCharacteristic(),
    this.launchNumber(),
    this.launchDate(),
    this.launchDateRemarks(),
    this.youtubeLaunchLink(),
    this.status(),
    this.owner(),
    this.ownerCountry(),
    this.operator(),
    this.operatorCountry(),
    this.leased(),
    this.orderDate(),
    this.capabilityLost(),
    this.capacityLost(),
    this.primaryMissionGroup(),
    this.additionalMissionsGroups(),
    this.totalClaims(),
    this.totalInjuries(),
    this.totalFatalities(),
    this.nameAtLaunch(),
    this.busId(),
    this.currentAge(),
    this.lifeLost(),
    this.geoPosition(),
    this.insuranceLossesTotal(),
    this.launchArranger(),
    this.launchArrangerCountry(),
    this.serialNumber(),
    this.programName(),
    this.reusedHullName(),
    this.dateOfObservation(),
    this.lat(),
    this.lon(),
    this.altitude(),
    this.collisionRiskMm(),
    this.collisionRiskCm(),
    this.quantity(),
    this.reusableFlights(),
    this.notes(),
    this.insuranceNotes(),
    this.launchNotes(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.bb!.createScalarList<string>(this.seradataSigIntPayload.bind(this), this.seradataSigIntPayload_Length()),
    this.bb!.createScalarList<string>(this.seradataRadarPayload.bind(this), this.seradataRadarPayload_Length()),
    this.bb!.createScalarList<string>(this.seradataNavigation.bind(this), this.seradataNavigation_Length()),
    this.bb!.createScalarList<string>(this.seradataOpticalPayload.bind(this), this.seradataOpticalPayload_Length()),
    this.bb!.createScalarList<string>(this.seradataEarlyWarning.bind(this), this.seradataEarlyWarning_Length()),
    this.bb!.createScalarList<string>(this.scientific.bind(this), this.scientific_Length()),
    this.bb!.createScalarList<string>(this.seradataCommDetails.bind(this), this.seradataCommDetails_Length()),
    this.onOrbit()
  );
}


unpackTo(_o: SeradataSpacecraftDetails_FullT): void {
  _o.id = this.id();
  _o.idOnOrbit = this.idOnOrbit();
  _o.classificationMarking = this.classificationMarking();
  _o.name = this.name();
  _o.description = this.description();
  _o.intlNumber = this.intlNumber();
  _o.sector = this.sector();
  _o.apogee = this.apogee();
  _o.perigee = this.perigee();
  _o.period = this.period();
  _o.inclination = this.inclination();
  _o.primeManufacturerOrgId = this.primeManufacturerOrgId();
  _o.stabilizer = this.stabilizer();
  _o.designLife = this.designLife();
  _o.expectedLife = this.expectedLife();
  _o.insuredAtLaunch = this.insuredAtLaunch();
  _o.launchMass = this.launchMass();
  _o.dryMass = this.dryMass();
  _o.catalogNumber = this.catalogNumber();
  _o.totalPayloadPower = this.totalPayloadPower();
  _o.constellation = this.constellation();
  _o.orbitCategory = this.orbitCategory();
  _o.orbitSubCategory = this.orbitSubCategory();
  _o.launchCost = this.launchCost();
  _o.launchCostEstimated = this.launchCostEstimated();
  _o.costEstimated = this.costEstimated();
  _o.newCost = this.newCost();
  _o.combinedNewCost = this.combinedNewCost();
  _o.combinedCostEstimated = this.combinedCostEstimated();
  _o.insuredValueAtLaunch = this.insuredValueAtLaunch();
  _o.insuredValueLaunchEstimated = this.insuredValueLaunchEstimated();
  _o.annualInsuredDepreciationFactor = this.annualInsuredDepreciationFactor();
  _o.annualInsuredDepreciationFactorEstimated = this.annualInsuredDepreciationFactorEstimated();
  _o.insurancePremiumAtLaunch = this.insurancePremiumAtLaunch();
  _o.insurancePremiumAtLaunchEstimated = this.insurancePremiumAtLaunchEstimated();
  _o.numHumans = this.numHumans();
  _o.cubesatDispenserType = this.cubesatDispenserType();
  _o.massCategory = this.massCategory();
  _o.launchId = this.launchId();
  _o.launchVehicleId = this.launchVehicleId();
  _o.launchProviderFlightNumber = this.launchProviderFlightNumber();
  _o.launchSiteName = this.launchSiteName();
  _o.launchSiteId = this.launchSiteId();
  _o.launchCountry = this.launchCountry();
  _o.launchProvider = this.launchProvider();
  _o.launchProviderCountry = this.launchProviderCountry();
  _o.commercialLaunch = this.commercialLaunch();
  _o.launchType = this.launchType();
  _o.launchCharacteristic = this.launchCharacteristic();
  _o.launchNumber = this.launchNumber();
  _o.launchDate = this.launchDate();
  _o.launchDateRemarks = this.launchDateRemarks();
  _o.youtubeLaunchLink = this.youtubeLaunchLink();
  _o.status = this.status();
  _o.owner = this.owner();
  _o.ownerCountry = this.ownerCountry();
  _o.operator = this.operator();
  _o.operatorCountry = this.operatorCountry();
  _o.leased = this.leased();
  _o.orderDate = this.orderDate();
  _o.capabilityLost = this.capabilityLost();
  _o.capacityLost = this.capacityLost();
  _o.primaryMissionGroup = this.primaryMissionGroup();
  _o.additionalMissionsGroups = this.additionalMissionsGroups();
  _o.totalClaims = this.totalClaims();
  _o.totalInjuries = this.totalInjuries();
  _o.totalFatalities = this.totalFatalities();
  _o.nameAtLaunch = this.nameAtLaunch();
  _o.busId = this.busId();
  _o.currentAge = this.currentAge();
  _o.lifeLost = this.lifeLost();
  _o.geoPosition = this.geoPosition();
  _o.insuranceLossesTotal = this.insuranceLossesTotal();
  _o.launchArranger = this.launchArranger();
  _o.launchArrangerCountry = this.launchArrangerCountry();
  _o.serialNumber = this.serialNumber();
  _o.programName = this.programName();
  _o.reusedHullName = this.reusedHullName();
  _o.dateOfObservation = this.dateOfObservation();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.altitude = this.altitude();
  _o.collisionRiskMM = this.collisionRiskMm();
  _o.collisionRiskCM = this.collisionRiskCm();
  _o.quantity = this.quantity();
  _o.reusableFlights = this.reusableFlights();
  _o.notes = this.notes();
  _o.insuranceNotes = this.insuranceNotes();
  _o.launchNotes = this.launchNotes();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.seradataSigIntPayload = this.bb!.createScalarList<string>(this.seradataSigIntPayload.bind(this), this.seradataSigIntPayload_Length());
  _o.seradataRadarPayload = this.bb!.createScalarList<string>(this.seradataRadarPayload.bind(this), this.seradataRadarPayload_Length());
  _o.seradataNavigation = this.bb!.createScalarList<string>(this.seradataNavigation.bind(this), this.seradataNavigation_Length());
  _o.seradataOpticalPayload = this.bb!.createScalarList<string>(this.seradataOpticalPayload.bind(this), this.seradataOpticalPayload_Length());
  _o.seradataEarlyWarning = this.bb!.createScalarList<string>(this.seradataEarlyWarning.bind(this), this.seradataEarlyWarning_Length());
  _o.scientific = this.bb!.createScalarList<string>(this.scientific.bind(this), this.scientific_Length());
  _o.seradataCommDetails = this.bb!.createScalarList<string>(this.seradataCommDetails.bind(this), this.seradataCommDetails_Length());
  _o.onOrbit = this.onOrbit();
}
}

export class SeradataSpacecraftDetails_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public intlNumber: string|Uint8Array|null = null,
  public sector: string|Uint8Array|null = null,
  public apogee: number = 0.0,
  public perigee: number = 0.0,
  public period: number = 0.0,
  public inclination: number = 0.0,
  public primeManufacturerOrgId: string|Uint8Array|null = null,
  public stabilizer: string|Uint8Array|null = null,
  public designLife: number = 0,
  public expectedLife: number = 0,
  public insuredAtLaunch: boolean = false,
  public launchMass: number = 0.0,
  public dryMass: number = 0.0,
  public catalogNumber: number = 0,
  public totalPayloadPower: number = 0.0,
  public constellation: string|Uint8Array|null = null,
  public orbitCategory: string|Uint8Array|null = null,
  public orbitSubCategory: string|Uint8Array|null = null,
  public launchCost: number = 0.0,
  public launchCostEstimated: boolean = false,
  public costEstimated: boolean = false,
  public newCost: number = 0.0,
  public combinedNewCost: number = 0.0,
  public combinedCostEstimated: boolean = false,
  public insuredValueAtLaunch: number = 0.0,
  public insuredValueLaunchEstimated: boolean = false,
  public annualInsuredDepreciationFactor: number = 0.0,
  public annualInsuredDepreciationFactorEstimated: boolean = false,
  public insurancePremiumAtLaunch: number = 0.0,
  public insurancePremiumAtLaunchEstimated: boolean = false,
  public numHumans: number = 0,
  public cubesatDispenserType: string|Uint8Array|null = null,
  public massCategory: string|Uint8Array|null = null,
  public launchId: string|Uint8Array|null = null,
  public launchVehicleId: string|Uint8Array|null = null,
  public launchProviderFlightNumber: string|Uint8Array|null = null,
  public launchSiteName: string|Uint8Array|null = null,
  public launchSiteId: string|Uint8Array|null = null,
  public launchCountry: string|Uint8Array|null = null,
  public launchProvider: string|Uint8Array|null = null,
  public launchProviderCountry: string|Uint8Array|null = null,
  public commercialLaunch: boolean = false,
  public launchType: string|Uint8Array|null = null,
  public launchCharacteristic: string|Uint8Array|null = null,
  public launchNumber: string|Uint8Array|null = null,
  public launchDate: string|Uint8Array|null = null,
  public launchDateRemarks: string|Uint8Array|null = null,
  public youtubeLaunchLink: string|Uint8Array|null = null,
  public status: string|Uint8Array|null = null,
  public owner: string|Uint8Array|null = null,
  public ownerCountry: string|Uint8Array|null = null,
  public operator: string|Uint8Array|null = null,
  public operatorCountry: string|Uint8Array|null = null,
  public leased: boolean = false,
  public orderDate: string|Uint8Array|null = null,
  public capabilityLost: number = 0.0,
  public capacityLost: number = 0.0,
  public primaryMissionGroup: string|Uint8Array|null = null,
  public additionalMissionsGroups: string|Uint8Array|null = null,
  public totalClaims: number = 0,
  public totalInjuries: number = 0,
  public totalFatalities: number = 0,
  public nameAtLaunch: string|Uint8Array|null = null,
  public busId: string|Uint8Array|null = null,
  public currentAge: number = 0.0,
  public lifeLost: number = 0.0,
  public geoPosition: number = 0.0,
  public insuranceLossesTotal: number = 0.0,
  public launchArranger: string|Uint8Array|null = null,
  public launchArrangerCountry: string|Uint8Array|null = null,
  public serialNumber: string|Uint8Array|null = null,
  public programName: string|Uint8Array|null = null,
  public reusedHullName: string|Uint8Array|null = null,
  public dateOfObservation: string|Uint8Array|null = null,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public altitude: number = 0.0,
  public collisionRiskMM: number = 0.0,
  public collisionRiskCM: number = 0.0,
  public quantity: number = 0,
  public reusableFlights: string|Uint8Array|null = null,
  public notes: string|Uint8Array|null = null,
  public insuranceNotes: string|Uint8Array|null = null,
  public launchNotes: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: SeradataSpacecraftDetails_Full_dataMode_Enum = SeradataSpacecraftDetails_Full_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public seradataSigIntPayload: (string)[] = [],
  public seradataRadarPayload: (string)[] = [],
  public seradataNavigation: (string)[] = [],
  public seradataOpticalPayload: (string)[] = [],
  public seradataEarlyWarning: (string)[] = [],
  public scientific: (string)[] = [],
  public seradataCommDetails: (string)[] = [],
  public onOrbit: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const intlNumber = (this.intlNumber !== null ? builder.createString(this.intlNumber!) : 0);
  const sector = (this.sector !== null ? builder.createString(this.sector!) : 0);
  const primeManufacturerOrgId = (this.primeManufacturerOrgId !== null ? builder.createString(this.primeManufacturerOrgId!) : 0);
  const stabilizer = (this.stabilizer !== null ? builder.createString(this.stabilizer!) : 0);
  const constellation = (this.constellation !== null ? builder.createString(this.constellation!) : 0);
  const orbitCategory = (this.orbitCategory !== null ? builder.createString(this.orbitCategory!) : 0);
  const orbitSubCategory = (this.orbitSubCategory !== null ? builder.createString(this.orbitSubCategory!) : 0);
  const cubesatDispenserType = (this.cubesatDispenserType !== null ? builder.createString(this.cubesatDispenserType!) : 0);
  const massCategory = (this.massCategory !== null ? builder.createString(this.massCategory!) : 0);
  const launchId = (this.launchId !== null ? builder.createString(this.launchId!) : 0);
  const launchVehicleId = (this.launchVehicleId !== null ? builder.createString(this.launchVehicleId!) : 0);
  const launchProviderFlightNumber = (this.launchProviderFlightNumber !== null ? builder.createString(this.launchProviderFlightNumber!) : 0);
  const launchSiteName = (this.launchSiteName !== null ? builder.createString(this.launchSiteName!) : 0);
  const launchSiteId = (this.launchSiteId !== null ? builder.createString(this.launchSiteId!) : 0);
  const launchCountry = (this.launchCountry !== null ? builder.createString(this.launchCountry!) : 0);
  const launchProvider = (this.launchProvider !== null ? builder.createString(this.launchProvider!) : 0);
  const launchProviderCountry = (this.launchProviderCountry !== null ? builder.createString(this.launchProviderCountry!) : 0);
  const launchType = (this.launchType !== null ? builder.createString(this.launchType!) : 0);
  const launchCharacteristic = (this.launchCharacteristic !== null ? builder.createString(this.launchCharacteristic!) : 0);
  const launchNumber = (this.launchNumber !== null ? builder.createString(this.launchNumber!) : 0);
  const launchDate = (this.launchDate !== null ? builder.createString(this.launchDate!) : 0);
  const launchDateRemarks = (this.launchDateRemarks !== null ? builder.createString(this.launchDateRemarks!) : 0);
  const youtubeLaunchLink = (this.youtubeLaunchLink !== null ? builder.createString(this.youtubeLaunchLink!) : 0);
  const status = (this.status !== null ? builder.createString(this.status!) : 0);
  const owner = (this.owner !== null ? builder.createString(this.owner!) : 0);
  const ownerCountry = (this.ownerCountry !== null ? builder.createString(this.ownerCountry!) : 0);
  const operator = (this.operator !== null ? builder.createString(this.operator!) : 0);
  const operatorCountry = (this.operatorCountry !== null ? builder.createString(this.operatorCountry!) : 0);
  const orderDate = (this.orderDate !== null ? builder.createString(this.orderDate!) : 0);
  const primaryMissionGroup = (this.primaryMissionGroup !== null ? builder.createString(this.primaryMissionGroup!) : 0);
  const additionalMissionsGroups = (this.additionalMissionsGroups !== null ? builder.createString(this.additionalMissionsGroups!) : 0);
  const nameAtLaunch = (this.nameAtLaunch !== null ? builder.createString(this.nameAtLaunch!) : 0);
  const busId = (this.busId !== null ? builder.createString(this.busId!) : 0);
  const launchArranger = (this.launchArranger !== null ? builder.createString(this.launchArranger!) : 0);
  const launchArrangerCountry = (this.launchArrangerCountry !== null ? builder.createString(this.launchArrangerCountry!) : 0);
  const serialNumber = (this.serialNumber !== null ? builder.createString(this.serialNumber!) : 0);
  const programName = (this.programName !== null ? builder.createString(this.programName!) : 0);
  const reusedHullName = (this.reusedHullName !== null ? builder.createString(this.reusedHullName!) : 0);
  const dateOfObservation = (this.dateOfObservation !== null ? builder.createString(this.dateOfObservation!) : 0);
  const reusableFlights = (this.reusableFlights !== null ? builder.createString(this.reusableFlights!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const insuranceNotes = (this.insuranceNotes !== null ? builder.createString(this.insuranceNotes!) : 0);
  const launchNotes = (this.launchNotes !== null ? builder.createString(this.launchNotes!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const seradataSigIntPayload = SeradataSpacecraftDetails_Full.createSeradataSigIntPayloadVector(builder, builder.createObjectOffsetList(this.seradataSigIntPayload));
  const seradataRadarPayload = SeradataSpacecraftDetails_Full.createSeradataRadarPayloadVector(builder, builder.createObjectOffsetList(this.seradataRadarPayload));
  const seradataNavigation = SeradataSpacecraftDetails_Full.createSeradataNavigationVector(builder, builder.createObjectOffsetList(this.seradataNavigation));
  const seradataOpticalPayload = SeradataSpacecraftDetails_Full.createSeradataOpticalPayloadVector(builder, builder.createObjectOffsetList(this.seradataOpticalPayload));
  const seradataEarlyWarning = SeradataSpacecraftDetails_Full.createSeradataEarlyWarningVector(builder, builder.createObjectOffsetList(this.seradataEarlyWarning));
  const scientific = SeradataSpacecraftDetails_Full.createScientificVector(builder, builder.createObjectOffsetList(this.scientific));
  const seradataCommDetails = SeradataSpacecraftDetails_Full.createSeradataCommDetailsVector(builder, builder.createObjectOffsetList(this.seradataCommDetails));
  const onOrbit = (this.onOrbit !== null ? builder.createString(this.onOrbit!) : 0);

  return SeradataSpacecraftDetails_Full.createSeradataSpacecraftDetails_Full(builder,
    id,
    idOnOrbit,
    classificationMarking,
    name,
    description,
    intlNumber,
    sector,
    this.apogee,
    this.perigee,
    this.period,
    this.inclination,
    primeManufacturerOrgId,
    stabilizer,
    this.designLife,
    this.expectedLife,
    this.insuredAtLaunch,
    this.launchMass,
    this.dryMass,
    this.catalogNumber,
    this.totalPayloadPower,
    constellation,
    orbitCategory,
    orbitSubCategory,
    this.launchCost,
    this.launchCostEstimated,
    this.costEstimated,
    this.newCost,
    this.combinedNewCost,
    this.combinedCostEstimated,
    this.insuredValueAtLaunch,
    this.insuredValueLaunchEstimated,
    this.annualInsuredDepreciationFactor,
    this.annualInsuredDepreciationFactorEstimated,
    this.insurancePremiumAtLaunch,
    this.insurancePremiumAtLaunchEstimated,
    this.numHumans,
    cubesatDispenserType,
    massCategory,
    launchId,
    launchVehicleId,
    launchProviderFlightNumber,
    launchSiteName,
    launchSiteId,
    launchCountry,
    launchProvider,
    launchProviderCountry,
    this.commercialLaunch,
    launchType,
    launchCharacteristic,
    launchNumber,
    launchDate,
    launchDateRemarks,
    youtubeLaunchLink,
    status,
    owner,
    ownerCountry,
    operator,
    operatorCountry,
    this.leased,
    orderDate,
    this.capabilityLost,
    this.capacityLost,
    primaryMissionGroup,
    additionalMissionsGroups,
    this.totalClaims,
    this.totalInjuries,
    this.totalFatalities,
    nameAtLaunch,
    busId,
    this.currentAge,
    this.lifeLost,
    this.geoPosition,
    this.insuranceLossesTotal,
    launchArranger,
    launchArrangerCountry,
    serialNumber,
    programName,
    reusedHullName,
    dateOfObservation,
    this.lat,
    this.lon,
    this.altitude,
    this.collisionRiskMM,
    this.collisionRiskCM,
    this.quantity,
    reusableFlights,
    notes,
    insuranceNotes,
    launchNotes,
    source,
    origin,
    origNetwork,
    this.dataMode,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    seradataSigIntPayload,
    seradataRadarPayload,
    seradataNavigation,
    seradataOpticalPayload,
    seradataEarlyWarning,
    scientific,
    seradataCommDetails,
    onOrbit
  );
}
}
