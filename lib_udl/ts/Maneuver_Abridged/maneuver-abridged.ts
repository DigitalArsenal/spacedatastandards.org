// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Maneuver_Abridged_dataMode_Enum } from './maneuver-abridged-data-mode-enum.js';


/**
 * /// Model representation of on-orbit object maneuver information for detected, possible, and confirmed maneuvers.
 */
export class Maneuver_Abridged implements flatbuffers.IUnpackableObject<Maneuver_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Maneuver_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsManeuver_Abridged(bb:flatbuffers.ByteBuffer, obj?:Maneuver_Abridged):Maneuver_Abridged {
  return (obj || new Maneuver_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsManeuver_Abridged(bb:flatbuffers.ByteBuffer, obj?:Maneuver_Abridged):Maneuver_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Maneuver_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MANE');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: MANEUVER-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/Catalog number of the target on-orbit object.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The time that the report or alert of this maneuver was generated, in ISO 8601 UTC format.
 * Example: /// Example: 2023-11-16T04:15:00.0001Z
 * Constraints: No constraints specified.
 */
reportTime():string|null
reportTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reportTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Maneuver event start time in ISO 8601 UTC with microsecond precision. For maneuvers without start and end times, the start time is considered to be the maneuver event time.
 * Example: /// Example: 2023-11-16T01:05:16.835689Z
 * Constraints: No constraints specified.
 */
eventStartTime():string|null
eventStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Maneuver event end time in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2023-11-16T01:09:01.350012Z
 * Constraints: No constraints specified.
 */
eventEndTime():string|null
eventEndTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventEndTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The estimated total active burn time of a maneuver, in seconds. This includes the sum of all burns in numAccelPoints. Not to be confused with the total duration of the maneuver.
 * Example: /// Example: 600.72
 * Constraints: No constraints specified.
 */
totalBurnTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2023-11-16T03:55:51Z
 * Constraints: No constraints specified.
 */
odFitEndTime():string|null
odFitEndTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odFitEndTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
 * Example: /// Example: 12
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional ID of the sensor that detected this maneuver (for example, if detected by passive RF anomalies).
 * Example: /// Example: SENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating this maneuver was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
uct():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Uncertainty in the occurrence of this maneuver (0 - 1).
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
maneuverUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional purpose of the maneuver if known (e.g. North-South Station Keeping, East-West Station Keeping, Longitude Shift, Unknown).
 * Example: /// Example: North-South Station Keeping
 * Constraints: Minimum length = 0, Maximum length = 64
 */
characterization():string|null
characterization(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
characterization(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Uncertainty in the characterization or purpose assessment of this maneuver (0 - 1).
 * Example: /// Example: 0.15
 * Constraints: No constraints specified.
 */
characterizationUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional source-provided identifier for this maneuver event. In the case where multiple maneuver records are submitted for the same event, this field can be used to tie them together to the same event.
 * Example: /// Example: EVENT-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
eventId():string|null
eventId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier provided by source to indicate the target on-orbit object performing this maneuver. This may be an internal identifier and not necessarily a valid satellite number/ID.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED).
 * CANCELLED:  A previously planned maneuver whose execution was cancelled.
 * PLANNED:  A maneuver planned to take place at the eventStartTime.
 * POSSIBLE:  A possible maneuver detected by observation of the spacecraft or by evaluation of the spacecraft orbit.
 * REDACTED:  A redaction of a reported possible maneuver that has been determined to have not taken place after further observation/evaluation.
 * VERIFIED:  A maneuver whose execution has been verified, either by the owner/operator or observation/evaluation.
 * Example: /// Example: POSSIBLE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
status():string|null
status(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
status(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Magnitude, in km, of the difference in the pre- and post-maneuver position vectors at the maneuver event time.
 * Example: /// Example: 0.715998327
 * Constraints: No constraints specified.
 */
deltaPos():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
 * Example: /// Example: -0.022172844
 * Constraints: No constraints specified.
 */
deltaPosU():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
 * Example: /// Example: -0.033700154
 * Constraints: No constraints specified.
 */
deltaPosV():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
 * Example: /// Example: -0.714861014
 * Constraints: No constraints specified.
 */
deltaPosW():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors at the maneuver event time.
 * Example: /// Example: 0.000631505
 * Constraints: No constraints specified.
 */
deltaVel():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
 * Example: /// Example: 3.50165629389647e-05
 * Constraints: No constraints specified.
 */
deltaVelU():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
 * Example: /// Example: 0.000544413
 * Constraints: No constraints specified.
 */
deltaVelV():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
 * Example: /// Example: -0.000318099
 * Constraints: No constraints specified.
 */
deltaVelW():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Difference in mass before and after the maneuver, in kg.
 * Example: /// Example: 0.15
 * Constraints: No constraints specified.
 */
deltaMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional identifier of the element set for the pre-maneuver orbit.
 * Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
 * Constraints: Minimum length = 0, Maximum length = 36
 */
preEventIdElset():string|null
preEventIdElset(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
preEventIdElset(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
preEventElset():string|null
preEventElset(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
preEventElset(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier of the state vector for the pre-maneuver trajectory of the spacecraft.
 * Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
 * Constraints: Minimum length = 0, Maximum length = 36
 */
preEventIdStateVector():string|null
preEventIdStateVector(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
preEventIdStateVector(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
preEventStateVector():string|null
preEventStateVector(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
preEventStateVector(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Pre-event X component of position in ECI space, in km.
 * Example: /// Example: 3584.432545
 * Constraints: No constraints specified.
 */
prePosX():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event Y component of position in ECI space, in km.
 * Example: /// Example: 42028.43245
 * Constraints: No constraints specified.
 */
prePosY():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event Z component of position in ECI space, in km.
 * Example: /// Example: -1.97765
 * Constraints: No constraints specified.
 */
prePosZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event X component of velocity in ECI space, in km/sec.
 * Example: /// Example: -2.543266
 * Constraints: No constraints specified.
 */
preVelX():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event Y component of velocity in ECI space, in km/sec.
 * Example: /// Example: 0.24876
 * Constraints: No constraints specified.
 */
preVelY():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event Z component of velocity in ECI space, in km/sec.
 * Example: /// Example: 0.0067352
 * Constraints: No constraints specified.
 */
preVelZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
 * Example: /// Example: 4.51e-07
 * Constraints: No constraints specified.
 */
preRadiationPressCoeff():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
 * Example: /// Example: 0.000437116
 * Constraints: No constraints specified.
 */
preBallisticCoeff():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event spacecraft apogee (measured from Earth center), in kilometers.
 * Example: /// Example: 35802
 * Constraints: No constraints specified.
 */
preApogee():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event spacecraft perigee (measured from Earth center), in kilometers.
 * Example: /// Example: 35786.5
 * Constraints: No constraints specified.
 */
prePerigee():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event spacecraft orbital inclination, in degrees. 0-180.
 * Example: /// Example: 0.0336
 * Constraints: No constraints specified.
 */
preInclination():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event spacecraft eccentricity.
 * Example: /// Example: 0.00017
 * Constraints: No constraints specified.
 */
preEccentricity():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event spacecraft orbital period, in minutes.
 * Example: /// Example: 1436.12
 * Constraints: No constraints specified.
 */
prePeriod():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
 * Example: /// Example: 98.3336
 * Constraints: No constraints specified.
 */
preRaan():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
 * Example: /// Example: 42165.1
 * Constraints: No constraints specified.
 */
preSma():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: -93.12
 * Constraints: No constraints specified.
 */
preGeoLongitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
 * Example: /// Example: -0.0125
 * Constraints: No constraints specified.
 */
preDriftRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
 * Example: /// Example: 0.215
 * Constraints: No constraints specified.
 */
preSigmaU():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
 * Example: /// Example: 1.97
 * Constraints: No constraints specified.
 */
preSigmaV():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pre-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
 * Example: /// Example: 0.208
 * Constraints: No constraints specified.
 */
preSigmaW():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional identifier of the element set for the post-maneuver orbit.
 * Example: /// Example: 225adf4c-8606-40a8-929e-63e22cffe220
 * Constraints: Minimum length = 0, Maximum length = 36
 */
postEventIdElset():string|null
postEventIdElset(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
postEventIdElset(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
postEventElset():string|null
postEventElset(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
postEventElset(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier of the state vector for the post-maneuver trajectory of the spacecraft.
 * Example: /// Example: d83a23f8-1496-485a-bd88-ec5808c73299
 * Constraints: Minimum length = 0, Maximum length = 36
 */
postEventIdStateVector():string|null
postEventIdStateVector(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
postEventIdStateVector(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
postEventStateVector():string|null
postEventStateVector(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
postEventStateVector(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Post-event X component of position in ECI space, in km.
 * Example: /// Example: 3589.351957
 * Constraints: No constraints specified.
 */
postPosX():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event Y component of position in ECI space, in km.
 * Example: /// Example: 42017.26823
 * Constraints: No constraints specified.
 */
postPosY():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event Z component of position in ECI space, in km.
 * Example: /// Example: -1.27161796
 * Constraints: No constraints specified.
 */
postPosZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event X component of velocity in ECI space, in km/sec.
 * Example: /// Example: -3.063152826
 * Constraints: No constraints specified.
 */
postVelX():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event Y component of velocity in ECI space, in km/sec.
 * Example: /// Example: 0.261586769
 * Constraints: No constraints specified.
 */
postVelY():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event Z component of velocity in ECI space, in km/sec.
 * Example: /// Example: 0.006842148
 * Constraints: No constraints specified.
 */
postVelZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
 * Example: /// Example: 4.51e-07
 * Constraints: No constraints specified.
 */
postRadiationPressCoeff():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
 * Example: /// Example: 0.000433209
 * Constraints: No constraints specified.
 */
postBallisticCoeff():number {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event spacecraft apogee (measured from Earth center), in kilometers.
 * Example: /// Example: 35800.1
 * Constraints: No constraints specified.
 */
postApogee():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event spacecraft perigee (measured from Earth center), in kilometers.
 * Example: /// Example: 35787.9
 * Constraints: No constraints specified.
 */
postPerigee():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event spacecraft orbital inclination, in degrees. 0-180.
 * Example: /// Example: 0.0327
 * Constraints: No constraints specified.
 */
postInclination():number {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event spacecraft eccentricity.
 * Example: /// Example: 0.000164
 * Constraints: No constraints specified.
 */
postEccentricity():number {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event spacecraft orbital period, in minutes.
 * Example: /// Example: 1436.01
 * Constraints: No constraints specified.
 */
postPeriod():number {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
 * Example: /// Example: 98.3335
 * Constraints: No constraints specified.
 */
postRaan():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
 * Example: /// Example: 42164.87
 * Constraints: No constraints specified.
 */
postSma():number {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: -93.15
 * Constraints: No constraints specified.
 */
postGeoLongitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
 * Example: /// Example: -0.0125
 * Constraints: No constraints specified.
 */
postDriftRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
 * Example: /// Example: 12.285
 * Constraints: No constraints specified.
 */
postSigmaU():number {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
 * Example: /// Example: 71.339
 * Constraints: No constraints specified.
 */
postSigmaV():number {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Post-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
 * Example: /// Example: 12.77
 * Constraints: No constraints specified.
 */
postSigmaW():number {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional maneuver cross-track/radial/in-track covariance array, in meter and second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C, CT_R, CT_I, CT_C, CT_T.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
cov(index: number):string
cov(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
cov(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

covLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 *  Estimated mass of the object following the maneuver, in kg.
 * Example: /// Example: 1844.5
 * Constraints: No constraints specified.
 */
postMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Estimated area of the object following the maneuver, in meters squared.
 * Example: /// Example: 35.77
 * Constraints: No constraints specified.
 */
postArea():number {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of observations used to generate the maneuver data.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
numObs():number {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Description and notes of the maneuver.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 256
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional source-provided and searchable metadata or descriptor of the data.
 * Example: /// Example: Example descriptor
 * Constraints: Minimum length = 0, Maximum length = 64
 */
descriptor():string|null
descriptor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
descriptor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the state model used to generate the maneuver data.
 * Example: /// Example: Example name
 * Constraints: Minimum length = 0, Maximum length = 32
 */
stateModel():string|null
stateModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stateModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Version of the state model used to generate the maneuver data.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
stateModelVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The total number of estimated acceleration points during the maneuver.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
numAccelPoints():number {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array of elapsed times, in seconds from maneuver start time, at which each acceleration point is estimated. Number of elements must match the numAccelPoints.
 * Example: /// Example: [10.25, 50.56, 150.78]
 * Constraints: No constraints specified.
 */
mnvrAccelTimes(index: number):string
mnvrAccelTimes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
mnvrAccelTimes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

mnvrAccelTimesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of estimated acceleration values, in meters per second squared. Number of elements must match the numAccelPoints.
 * Example: /// Example: [0.05, 0.1, 0.05]
 * Constraints: No constraints specified.
 */
mnvrAccels(index: number):string
mnvrAccels(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
mnvrAccels(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

mnvrAccelsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the 1-sigma uncertainties in estimated accelerations, in meters per second squared. Number of elements must match the numAccelPoints.
 * Example: /// Example: [0.0005, 0.001, 0.0005]
 * Constraints: No constraints specified.
 */
mnvrAccelUncs(index: number):string
mnvrAccelUncs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
mnvrAccelUncs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 176);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

mnvrAccelUncsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 176);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 178);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 180);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Maneuver_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 182);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Maneuver_Abridged_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 184);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 186);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional algorithm used to produce this record.
 * Example: /// Example: Example algorithm
 * Constraints: Minimum length = 0, Maximum length = 64
 */
algorithm():string|null
algorithm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
algorithm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 188);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: TRANSACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 190);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 192);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startManeuver_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(95);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(2, satNo, 0);
}

static addReportTime(builder:flatbuffers.Builder, reportTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, reportTimeOffset, 0);
}

static addEventStartTime(builder:flatbuffers.Builder, eventStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, eventStartTimeOffset, 0);
}

static addEventEndTime(builder:flatbuffers.Builder, eventEndTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, eventEndTimeOffset, 0);
}

static addTotalBurnTime(builder:flatbuffers.Builder, totalBurnTime:number) {
  builder.addFieldFloat64(6, totalBurnTime, 0.0);
}

static addOdFitEndTime(builder:flatbuffers.Builder, odFitEndTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, odFitEndTimeOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, idOnOrbitOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, idSensorOffset, 0);
}

static addUct(builder:flatbuffers.Builder, uct:boolean) {
  builder.addFieldInt8(10, +uct, +false);
}

static addManeuverUnc(builder:flatbuffers.Builder, maneuverUnc:number) {
  builder.addFieldFloat64(11, maneuverUnc, 0.0);
}

static addCharacterization(builder:flatbuffers.Builder, characterizationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, characterizationOffset, 0);
}

static addCharacterizationUnc(builder:flatbuffers.Builder, characterizationUnc:number) {
  builder.addFieldFloat64(13, characterizationUnc, 0.0);
}

static addEventId(builder:flatbuffers.Builder, eventIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, eventIdOffset, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, origObjectIdOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, origSensorIdOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, statusOffset, 0);
}

static addDeltaPos(builder:flatbuffers.Builder, deltaPos:number) {
  builder.addFieldFloat64(18, deltaPos, 0.0);
}

static addDeltaPosU(builder:flatbuffers.Builder, deltaPosU:number) {
  builder.addFieldFloat64(19, deltaPosU, 0.0);
}

static addDeltaPosV(builder:flatbuffers.Builder, deltaPosV:number) {
  builder.addFieldFloat64(20, deltaPosV, 0.0);
}

static addDeltaPosW(builder:flatbuffers.Builder, deltaPosW:number) {
  builder.addFieldFloat64(21, deltaPosW, 0.0);
}

static addDeltaVel(builder:flatbuffers.Builder, deltaVel:number) {
  builder.addFieldFloat64(22, deltaVel, 0.0);
}

static addDeltaVelU(builder:flatbuffers.Builder, deltaVelU:number) {
  builder.addFieldFloat64(23, deltaVelU, 0.0);
}

static addDeltaVelV(builder:flatbuffers.Builder, deltaVelV:number) {
  builder.addFieldFloat64(24, deltaVelV, 0.0);
}

static addDeltaVelW(builder:flatbuffers.Builder, deltaVelW:number) {
  builder.addFieldFloat64(25, deltaVelW, 0.0);
}

static addDeltaMass(builder:flatbuffers.Builder, deltaMass:number) {
  builder.addFieldFloat64(26, deltaMass, 0.0);
}

static addPreEventIdElset(builder:flatbuffers.Builder, preEventIdElsetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, preEventIdElsetOffset, 0);
}

static addPreEventElset(builder:flatbuffers.Builder, preEventElsetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, preEventElsetOffset, 0);
}

static addPreEventIdStateVector(builder:flatbuffers.Builder, preEventIdStateVectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, preEventIdStateVectorOffset, 0);
}

static addPreEventStateVector(builder:flatbuffers.Builder, preEventStateVectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, preEventStateVectorOffset, 0);
}

static addPrePosX(builder:flatbuffers.Builder, prePosX:number) {
  builder.addFieldFloat64(31, prePosX, 0.0);
}

static addPrePosY(builder:flatbuffers.Builder, prePosY:number) {
  builder.addFieldFloat64(32, prePosY, 0.0);
}

static addPrePosZ(builder:flatbuffers.Builder, prePosZ:number) {
  builder.addFieldFloat64(33, prePosZ, 0.0);
}

static addPreVelX(builder:flatbuffers.Builder, preVelX:number) {
  builder.addFieldFloat64(34, preVelX, 0.0);
}

static addPreVelY(builder:flatbuffers.Builder, preVelY:number) {
  builder.addFieldFloat64(35, preVelY, 0.0);
}

static addPreVelZ(builder:flatbuffers.Builder, preVelZ:number) {
  builder.addFieldFloat64(36, preVelZ, 0.0);
}

static addPreRadiationPressCoeff(builder:flatbuffers.Builder, preRadiationPressCoeff:number) {
  builder.addFieldFloat64(37, preRadiationPressCoeff, 0.0);
}

static addPreBallisticCoeff(builder:flatbuffers.Builder, preBallisticCoeff:number) {
  builder.addFieldFloat64(38, preBallisticCoeff, 0.0);
}

static addPreApogee(builder:flatbuffers.Builder, preApogee:number) {
  builder.addFieldFloat64(39, preApogee, 0.0);
}

static addPrePerigee(builder:flatbuffers.Builder, prePerigee:number) {
  builder.addFieldFloat64(40, prePerigee, 0.0);
}

static addPreInclination(builder:flatbuffers.Builder, preInclination:number) {
  builder.addFieldFloat64(41, preInclination, 0.0);
}

static addPreEccentricity(builder:flatbuffers.Builder, preEccentricity:number) {
  builder.addFieldFloat64(42, preEccentricity, 0.0);
}

static addPrePeriod(builder:flatbuffers.Builder, prePeriod:number) {
  builder.addFieldFloat64(43, prePeriod, 0.0);
}

static addPreRaan(builder:flatbuffers.Builder, preRaan:number) {
  builder.addFieldFloat64(44, preRaan, 0.0);
}

static addPreSma(builder:flatbuffers.Builder, preSma:number) {
  builder.addFieldFloat64(45, preSma, 0.0);
}

static addPreGeoLongitude(builder:flatbuffers.Builder, preGeoLongitude:number) {
  builder.addFieldFloat64(46, preGeoLongitude, 0.0);
}

static addPreDriftRate(builder:flatbuffers.Builder, preDriftRate:number) {
  builder.addFieldFloat64(47, preDriftRate, 0.0);
}

static addPreSigmaU(builder:flatbuffers.Builder, preSigmaU:number) {
  builder.addFieldFloat64(48, preSigmaU, 0.0);
}

static addPreSigmaV(builder:flatbuffers.Builder, preSigmaV:number) {
  builder.addFieldFloat64(49, preSigmaV, 0.0);
}

static addPreSigmaW(builder:flatbuffers.Builder, preSigmaW:number) {
  builder.addFieldFloat64(50, preSigmaW, 0.0);
}

static addPostEventIdElset(builder:flatbuffers.Builder, postEventIdElsetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, postEventIdElsetOffset, 0);
}

static addPostEventElset(builder:flatbuffers.Builder, postEventElsetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, postEventElsetOffset, 0);
}

static addPostEventIdStateVector(builder:flatbuffers.Builder, postEventIdStateVectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, postEventIdStateVectorOffset, 0);
}

static addPostEventStateVector(builder:flatbuffers.Builder, postEventStateVectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, postEventStateVectorOffset, 0);
}

static addPostPosX(builder:flatbuffers.Builder, postPosX:number) {
  builder.addFieldFloat64(55, postPosX, 0.0);
}

static addPostPosY(builder:flatbuffers.Builder, postPosY:number) {
  builder.addFieldFloat64(56, postPosY, 0.0);
}

static addPostPosZ(builder:flatbuffers.Builder, postPosZ:number) {
  builder.addFieldFloat64(57, postPosZ, 0.0);
}

static addPostVelX(builder:flatbuffers.Builder, postVelX:number) {
  builder.addFieldFloat64(58, postVelX, 0.0);
}

static addPostVelY(builder:flatbuffers.Builder, postVelY:number) {
  builder.addFieldFloat64(59, postVelY, 0.0);
}

static addPostVelZ(builder:flatbuffers.Builder, postVelZ:number) {
  builder.addFieldFloat64(60, postVelZ, 0.0);
}

static addPostRadiationPressCoeff(builder:flatbuffers.Builder, postRadiationPressCoeff:number) {
  builder.addFieldFloat64(61, postRadiationPressCoeff, 0.0);
}

static addPostBallisticCoeff(builder:flatbuffers.Builder, postBallisticCoeff:number) {
  builder.addFieldFloat64(62, postBallisticCoeff, 0.0);
}

static addPostApogee(builder:flatbuffers.Builder, postApogee:number) {
  builder.addFieldFloat64(63, postApogee, 0.0);
}

static addPostPerigee(builder:flatbuffers.Builder, postPerigee:number) {
  builder.addFieldFloat64(64, postPerigee, 0.0);
}

static addPostInclination(builder:flatbuffers.Builder, postInclination:number) {
  builder.addFieldFloat64(65, postInclination, 0.0);
}

static addPostEccentricity(builder:flatbuffers.Builder, postEccentricity:number) {
  builder.addFieldFloat64(66, postEccentricity, 0.0);
}

static addPostPeriod(builder:flatbuffers.Builder, postPeriod:number) {
  builder.addFieldFloat64(67, postPeriod, 0.0);
}

static addPostRaan(builder:flatbuffers.Builder, postRaan:number) {
  builder.addFieldFloat64(68, postRaan, 0.0);
}

static addPostSma(builder:flatbuffers.Builder, postSma:number) {
  builder.addFieldFloat64(69, postSma, 0.0);
}

static addPostGeoLongitude(builder:flatbuffers.Builder, postGeoLongitude:number) {
  builder.addFieldFloat64(70, postGeoLongitude, 0.0);
}

static addPostDriftRate(builder:flatbuffers.Builder, postDriftRate:number) {
  builder.addFieldFloat64(71, postDriftRate, 0.0);
}

static addPostSigmaU(builder:flatbuffers.Builder, postSigmaU:number) {
  builder.addFieldFloat64(72, postSigmaU, 0.0);
}

static addPostSigmaV(builder:flatbuffers.Builder, postSigmaV:number) {
  builder.addFieldFloat64(73, postSigmaV, 0.0);
}

static addPostSigmaW(builder:flatbuffers.Builder, postSigmaW:number) {
  builder.addFieldFloat64(74, postSigmaW, 0.0);
}

static addCov(builder:flatbuffers.Builder, covOffset:flatbuffers.Offset) {
  builder.addFieldOffset(75, covOffset, 0);
}

static createCovVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCovVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPostMass(builder:flatbuffers.Builder, postMass:number) {
  builder.addFieldFloat64(76, postMass, 0.0);
}

static addPostArea(builder:flatbuffers.Builder, postArea:number) {
  builder.addFieldFloat64(77, postArea, 0.0);
}

static addNumObs(builder:flatbuffers.Builder, numObs:number) {
  builder.addFieldInt32(78, numObs, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(79, descriptionOffset, 0);
}

static addDescriptor(builder:flatbuffers.Builder, descriptorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(80, descriptorOffset, 0);
}

static addStateModel(builder:flatbuffers.Builder, stateModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(81, stateModelOffset, 0);
}

static addStateModelVersion(builder:flatbuffers.Builder, stateModelVersion:number) {
  builder.addFieldFloat64(82, stateModelVersion, 0.0);
}

static addNumAccelPoints(builder:flatbuffers.Builder, numAccelPoints:number) {
  builder.addFieldInt32(83, numAccelPoints, 0);
}

static addMnvrAccelTimes(builder:flatbuffers.Builder, mnvrAccelTimesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(84, mnvrAccelTimesOffset, 0);
}

static createMnvrAccelTimesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMnvrAccelTimesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMnvrAccels(builder:flatbuffers.Builder, mnvrAccelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(85, mnvrAccelsOffset, 0);
}

static createMnvrAccelsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMnvrAccelsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMnvrAccelUncs(builder:flatbuffers.Builder, mnvrAccelUncsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(86, mnvrAccelUncsOffset, 0);
}

static createMnvrAccelUncsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMnvrAccelUncsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(87, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(88, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Maneuver_Abridged_dataMode_Enum) {
  builder.addFieldInt8(89, dataMode, Maneuver_Abridged_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(90, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(91, createdByOffset, 0);
}

static addAlgorithm(builder:flatbuffers.Builder, algorithmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(92, algorithmOffset, 0);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(93, transactionIdOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(94, origNetworkOffset, 0);
}

static endManeuver_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishManeuver_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MANE');
}

static finishSizePrefixedManeuver_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MANE', true);
}

static createManeuver_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, satNo:number, reportTimeOffset:flatbuffers.Offset, eventStartTimeOffset:flatbuffers.Offset, eventEndTimeOffset:flatbuffers.Offset, totalBurnTime:number, odFitEndTimeOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, uct:boolean, maneuverUnc:number, characterizationOffset:flatbuffers.Offset, characterizationUnc:number, eventIdOffset:flatbuffers.Offset, origObjectIdOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, statusOffset:flatbuffers.Offset, deltaPos:number, deltaPosU:number, deltaPosV:number, deltaPosW:number, deltaVel:number, deltaVelU:number, deltaVelV:number, deltaVelW:number, deltaMass:number, preEventIdElsetOffset:flatbuffers.Offset, preEventElsetOffset:flatbuffers.Offset, preEventIdStateVectorOffset:flatbuffers.Offset, preEventStateVectorOffset:flatbuffers.Offset, prePosX:number, prePosY:number, prePosZ:number, preVelX:number, preVelY:number, preVelZ:number, preRadiationPressCoeff:number, preBallisticCoeff:number, preApogee:number, prePerigee:number, preInclination:number, preEccentricity:number, prePeriod:number, preRaan:number, preSma:number, preGeoLongitude:number, preDriftRate:number, preSigmaU:number, preSigmaV:number, preSigmaW:number, postEventIdElsetOffset:flatbuffers.Offset, postEventElsetOffset:flatbuffers.Offset, postEventIdStateVectorOffset:flatbuffers.Offset, postEventStateVectorOffset:flatbuffers.Offset, postPosX:number, postPosY:number, postPosZ:number, postVelX:number, postVelY:number, postVelZ:number, postRadiationPressCoeff:number, postBallisticCoeff:number, postApogee:number, postPerigee:number, postInclination:number, postEccentricity:number, postPeriod:number, postRaan:number, postSma:number, postGeoLongitude:number, postDriftRate:number, postSigmaU:number, postSigmaV:number, postSigmaW:number, covOffset:flatbuffers.Offset, postMass:number, postArea:number, numObs:number, descriptionOffset:flatbuffers.Offset, descriptorOffset:flatbuffers.Offset, stateModelOffset:flatbuffers.Offset, stateModelVersion:number, numAccelPoints:number, mnvrAccelTimesOffset:flatbuffers.Offset, mnvrAccelsOffset:flatbuffers.Offset, mnvrAccelUncsOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:Maneuver_Abridged_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, algorithmOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  Maneuver_Abridged.startManeuver_Abridged(builder);
  Maneuver_Abridged.addId(builder, idOffset);
  Maneuver_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  Maneuver_Abridged.addSatNo(builder, satNo);
  Maneuver_Abridged.addReportTime(builder, reportTimeOffset);
  Maneuver_Abridged.addEventStartTime(builder, eventStartTimeOffset);
  Maneuver_Abridged.addEventEndTime(builder, eventEndTimeOffset);
  Maneuver_Abridged.addTotalBurnTime(builder, totalBurnTime);
  Maneuver_Abridged.addOdFitEndTime(builder, odFitEndTimeOffset);
  Maneuver_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
  Maneuver_Abridged.addIdSensor(builder, idSensorOffset);
  Maneuver_Abridged.addUct(builder, uct);
  Maneuver_Abridged.addManeuverUnc(builder, maneuverUnc);
  Maneuver_Abridged.addCharacterization(builder, characterizationOffset);
  Maneuver_Abridged.addCharacterizationUnc(builder, characterizationUnc);
  Maneuver_Abridged.addEventId(builder, eventIdOffset);
  Maneuver_Abridged.addOrigObjectId(builder, origObjectIdOffset);
  Maneuver_Abridged.addOrigSensorId(builder, origSensorIdOffset);
  Maneuver_Abridged.addStatus(builder, statusOffset);
  Maneuver_Abridged.addDeltaPos(builder, deltaPos);
  Maneuver_Abridged.addDeltaPosU(builder, deltaPosU);
  Maneuver_Abridged.addDeltaPosV(builder, deltaPosV);
  Maneuver_Abridged.addDeltaPosW(builder, deltaPosW);
  Maneuver_Abridged.addDeltaVel(builder, deltaVel);
  Maneuver_Abridged.addDeltaVelU(builder, deltaVelU);
  Maneuver_Abridged.addDeltaVelV(builder, deltaVelV);
  Maneuver_Abridged.addDeltaVelW(builder, deltaVelW);
  Maneuver_Abridged.addDeltaMass(builder, deltaMass);
  Maneuver_Abridged.addPreEventIdElset(builder, preEventIdElsetOffset);
  Maneuver_Abridged.addPreEventElset(builder, preEventElsetOffset);
  Maneuver_Abridged.addPreEventIdStateVector(builder, preEventIdStateVectorOffset);
  Maneuver_Abridged.addPreEventStateVector(builder, preEventStateVectorOffset);
  Maneuver_Abridged.addPrePosX(builder, prePosX);
  Maneuver_Abridged.addPrePosY(builder, prePosY);
  Maneuver_Abridged.addPrePosZ(builder, prePosZ);
  Maneuver_Abridged.addPreVelX(builder, preVelX);
  Maneuver_Abridged.addPreVelY(builder, preVelY);
  Maneuver_Abridged.addPreVelZ(builder, preVelZ);
  Maneuver_Abridged.addPreRadiationPressCoeff(builder, preRadiationPressCoeff);
  Maneuver_Abridged.addPreBallisticCoeff(builder, preBallisticCoeff);
  Maneuver_Abridged.addPreApogee(builder, preApogee);
  Maneuver_Abridged.addPrePerigee(builder, prePerigee);
  Maneuver_Abridged.addPreInclination(builder, preInclination);
  Maneuver_Abridged.addPreEccentricity(builder, preEccentricity);
  Maneuver_Abridged.addPrePeriod(builder, prePeriod);
  Maneuver_Abridged.addPreRaan(builder, preRaan);
  Maneuver_Abridged.addPreSma(builder, preSma);
  Maneuver_Abridged.addPreGeoLongitude(builder, preGeoLongitude);
  Maneuver_Abridged.addPreDriftRate(builder, preDriftRate);
  Maneuver_Abridged.addPreSigmaU(builder, preSigmaU);
  Maneuver_Abridged.addPreSigmaV(builder, preSigmaV);
  Maneuver_Abridged.addPreSigmaW(builder, preSigmaW);
  Maneuver_Abridged.addPostEventIdElset(builder, postEventIdElsetOffset);
  Maneuver_Abridged.addPostEventElset(builder, postEventElsetOffset);
  Maneuver_Abridged.addPostEventIdStateVector(builder, postEventIdStateVectorOffset);
  Maneuver_Abridged.addPostEventStateVector(builder, postEventStateVectorOffset);
  Maneuver_Abridged.addPostPosX(builder, postPosX);
  Maneuver_Abridged.addPostPosY(builder, postPosY);
  Maneuver_Abridged.addPostPosZ(builder, postPosZ);
  Maneuver_Abridged.addPostVelX(builder, postVelX);
  Maneuver_Abridged.addPostVelY(builder, postVelY);
  Maneuver_Abridged.addPostVelZ(builder, postVelZ);
  Maneuver_Abridged.addPostRadiationPressCoeff(builder, postRadiationPressCoeff);
  Maneuver_Abridged.addPostBallisticCoeff(builder, postBallisticCoeff);
  Maneuver_Abridged.addPostApogee(builder, postApogee);
  Maneuver_Abridged.addPostPerigee(builder, postPerigee);
  Maneuver_Abridged.addPostInclination(builder, postInclination);
  Maneuver_Abridged.addPostEccentricity(builder, postEccentricity);
  Maneuver_Abridged.addPostPeriod(builder, postPeriod);
  Maneuver_Abridged.addPostRaan(builder, postRaan);
  Maneuver_Abridged.addPostSma(builder, postSma);
  Maneuver_Abridged.addPostGeoLongitude(builder, postGeoLongitude);
  Maneuver_Abridged.addPostDriftRate(builder, postDriftRate);
  Maneuver_Abridged.addPostSigmaU(builder, postSigmaU);
  Maneuver_Abridged.addPostSigmaV(builder, postSigmaV);
  Maneuver_Abridged.addPostSigmaW(builder, postSigmaW);
  Maneuver_Abridged.addCov(builder, covOffset);
  Maneuver_Abridged.addPostMass(builder, postMass);
  Maneuver_Abridged.addPostArea(builder, postArea);
  Maneuver_Abridged.addNumObs(builder, numObs);
  Maneuver_Abridged.addDescription(builder, descriptionOffset);
  Maneuver_Abridged.addDescriptor(builder, descriptorOffset);
  Maneuver_Abridged.addStateModel(builder, stateModelOffset);
  Maneuver_Abridged.addStateModelVersion(builder, stateModelVersion);
  Maneuver_Abridged.addNumAccelPoints(builder, numAccelPoints);
  Maneuver_Abridged.addMnvrAccelTimes(builder, mnvrAccelTimesOffset);
  Maneuver_Abridged.addMnvrAccels(builder, mnvrAccelsOffset);
  Maneuver_Abridged.addMnvrAccelUncs(builder, mnvrAccelUncsOffset);
  Maneuver_Abridged.addSource(builder, sourceOffset);
  Maneuver_Abridged.addOrigin(builder, originOffset);
  Maneuver_Abridged.addDataMode(builder, dataMode);
  Maneuver_Abridged.addCreatedAt(builder, createdAtOffset);
  Maneuver_Abridged.addCreatedBy(builder, createdByOffset);
  Maneuver_Abridged.addAlgorithm(builder, algorithmOffset);
  Maneuver_Abridged.addTransactionId(builder, transactionIdOffset);
  Maneuver_Abridged.addOrigNetwork(builder, origNetworkOffset);
  return Maneuver_Abridged.endManeuver_Abridged(builder);
}

unpack(): Maneuver_AbridgedT {
  return new Maneuver_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.satNo(),
    this.reportTime(),
    this.eventStartTime(),
    this.eventEndTime(),
    this.totalBurnTime(),
    this.odFitEndTime(),
    this.idOnOrbit(),
    this.idSensor(),
    this.uct(),
    this.maneuverUnc(),
    this.characterization(),
    this.characterizationUnc(),
    this.eventId(),
    this.origObjectId(),
    this.origSensorId(),
    this.status(),
    this.deltaPos(),
    this.deltaPosU(),
    this.deltaPosV(),
    this.deltaPosW(),
    this.deltaVel(),
    this.deltaVelU(),
    this.deltaVelV(),
    this.deltaVelW(),
    this.deltaMass(),
    this.preEventIdElset(),
    this.preEventElset(),
    this.preEventIdStateVector(),
    this.preEventStateVector(),
    this.prePosX(),
    this.prePosY(),
    this.prePosZ(),
    this.preVelX(),
    this.preVelY(),
    this.preVelZ(),
    this.preRadiationPressCoeff(),
    this.preBallisticCoeff(),
    this.preApogee(),
    this.prePerigee(),
    this.preInclination(),
    this.preEccentricity(),
    this.prePeriod(),
    this.preRaan(),
    this.preSma(),
    this.preGeoLongitude(),
    this.preDriftRate(),
    this.preSigmaU(),
    this.preSigmaV(),
    this.preSigmaW(),
    this.postEventIdElset(),
    this.postEventElset(),
    this.postEventIdStateVector(),
    this.postEventStateVector(),
    this.postPosX(),
    this.postPosY(),
    this.postPosZ(),
    this.postVelX(),
    this.postVelY(),
    this.postVelZ(),
    this.postRadiationPressCoeff(),
    this.postBallisticCoeff(),
    this.postApogee(),
    this.postPerigee(),
    this.postInclination(),
    this.postEccentricity(),
    this.postPeriod(),
    this.postRaan(),
    this.postSma(),
    this.postGeoLongitude(),
    this.postDriftRate(),
    this.postSigmaU(),
    this.postSigmaV(),
    this.postSigmaW(),
    this.bb!.createScalarList<string>(this.cov.bind(this), this.cov_Length()),
    this.postMass(),
    this.postArea(),
    this.numObs(),
    this.description(),
    this.descriptor(),
    this.stateModel(),
    this.stateModelVersion(),
    this.numAccelPoints(),
    this.bb!.createScalarList<string>(this.mnvrAccelTimes.bind(this), this.mnvrAccelTimes_Length()),
    this.bb!.createScalarList<string>(this.mnvrAccels.bind(this), this.mnvrAccels_Length()),
    this.bb!.createScalarList<string>(this.mnvrAccelUncs.bind(this), this.mnvrAccelUncs_Length()),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.algorithm(),
    this.transactionId(),
    this.origNetwork()
  );
}


unpackTo(_o: Maneuver_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.satNo = this.satNo();
  _o.reportTime = this.reportTime();
  _o.eventStartTime = this.eventStartTime();
  _o.eventEndTime = this.eventEndTime();
  _o.totalBurnTime = this.totalBurnTime();
  _o.odFitEndTime = this.odFitEndTime();
  _o.idOnOrbit = this.idOnOrbit();
  _o.idSensor = this.idSensor();
  _o.uct = this.uct();
  _o.maneuverUnc = this.maneuverUnc();
  _o.characterization = this.characterization();
  _o.characterizationUnc = this.characterizationUnc();
  _o.eventId = this.eventId();
  _o.origObjectId = this.origObjectId();
  _o.origSensorId = this.origSensorId();
  _o.status = this.status();
  _o.deltaPos = this.deltaPos();
  _o.deltaPosU = this.deltaPosU();
  _o.deltaPosV = this.deltaPosV();
  _o.deltaPosW = this.deltaPosW();
  _o.deltaVel = this.deltaVel();
  _o.deltaVelU = this.deltaVelU();
  _o.deltaVelV = this.deltaVelV();
  _o.deltaVelW = this.deltaVelW();
  _o.deltaMass = this.deltaMass();
  _o.preEventIdElset = this.preEventIdElset();
  _o.preEventElset = this.preEventElset();
  _o.preEventIdStateVector = this.preEventIdStateVector();
  _o.preEventStateVector = this.preEventStateVector();
  _o.prePosX = this.prePosX();
  _o.prePosY = this.prePosY();
  _o.prePosZ = this.prePosZ();
  _o.preVelX = this.preVelX();
  _o.preVelY = this.preVelY();
  _o.preVelZ = this.preVelZ();
  _o.preRadiationPressCoeff = this.preRadiationPressCoeff();
  _o.preBallisticCoeff = this.preBallisticCoeff();
  _o.preApogee = this.preApogee();
  _o.prePerigee = this.prePerigee();
  _o.preInclination = this.preInclination();
  _o.preEccentricity = this.preEccentricity();
  _o.prePeriod = this.prePeriod();
  _o.preRAAN = this.preRaan();
  _o.preSMA = this.preSma();
  _o.preGeoLongitude = this.preGeoLongitude();
  _o.preDriftRate = this.preDriftRate();
  _o.preSigmaU = this.preSigmaU();
  _o.preSigmaV = this.preSigmaV();
  _o.preSigmaW = this.preSigmaW();
  _o.postEventIdElset = this.postEventIdElset();
  _o.postEventElset = this.postEventElset();
  _o.postEventIdStateVector = this.postEventIdStateVector();
  _o.postEventStateVector = this.postEventStateVector();
  _o.postPosX = this.postPosX();
  _o.postPosY = this.postPosY();
  _o.postPosZ = this.postPosZ();
  _o.postVelX = this.postVelX();
  _o.postVelY = this.postVelY();
  _o.postVelZ = this.postVelZ();
  _o.postRadiationPressCoeff = this.postRadiationPressCoeff();
  _o.postBallisticCoeff = this.postBallisticCoeff();
  _o.postApogee = this.postApogee();
  _o.postPerigee = this.postPerigee();
  _o.postInclination = this.postInclination();
  _o.postEccentricity = this.postEccentricity();
  _o.postPeriod = this.postPeriod();
  _o.postRAAN = this.postRaan();
  _o.postSMA = this.postSma();
  _o.postGeoLongitude = this.postGeoLongitude();
  _o.postDriftRate = this.postDriftRate();
  _o.postSigmaU = this.postSigmaU();
  _o.postSigmaV = this.postSigmaV();
  _o.postSigmaW = this.postSigmaW();
  _o.cov = this.bb!.createScalarList<string>(this.cov.bind(this), this.cov_Length());
  _o.postMass = this.postMass();
  _o.postArea = this.postArea();
  _o.numObs = this.numObs();
  _o.description = this.description();
  _o.descriptor = this.descriptor();
  _o.stateModel = this.stateModel();
  _o.stateModelVersion = this.stateModelVersion();
  _o.numAccelPoints = this.numAccelPoints();
  _o.mnvrAccelTimes = this.bb!.createScalarList<string>(this.mnvrAccelTimes.bind(this), this.mnvrAccelTimes_Length());
  _o.mnvrAccels = this.bb!.createScalarList<string>(this.mnvrAccels.bind(this), this.mnvrAccels_Length());
  _o.mnvrAccelUncs = this.bb!.createScalarList<string>(this.mnvrAccelUncs.bind(this), this.mnvrAccelUncs_Length());
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.algorithm = this.algorithm();
  _o.transactionId = this.transactionId();
  _o.origNetwork = this.origNetwork();
}
}

export class Maneuver_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public satNo: number = 0,
  public reportTime: string|Uint8Array|null = null,
  public eventStartTime: string|Uint8Array|null = null,
  public eventEndTime: string|Uint8Array|null = null,
  public totalBurnTime: number = 0.0,
  public odFitEndTime: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public uct: boolean = false,
  public maneuverUnc: number = 0.0,
  public characterization: string|Uint8Array|null = null,
  public characterizationUnc: number = 0.0,
  public eventId: string|Uint8Array|null = null,
  public origObjectId: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public status: string|Uint8Array|null = null,
  public deltaPos: number = 0.0,
  public deltaPosU: number = 0.0,
  public deltaPosV: number = 0.0,
  public deltaPosW: number = 0.0,
  public deltaVel: number = 0.0,
  public deltaVelU: number = 0.0,
  public deltaVelV: number = 0.0,
  public deltaVelW: number = 0.0,
  public deltaMass: number = 0.0,
  public preEventIdElset: string|Uint8Array|null = null,
  public preEventElset: string|Uint8Array|null = null,
  public preEventIdStateVector: string|Uint8Array|null = null,
  public preEventStateVector: string|Uint8Array|null = null,
  public prePosX: number = 0.0,
  public prePosY: number = 0.0,
  public prePosZ: number = 0.0,
  public preVelX: number = 0.0,
  public preVelY: number = 0.0,
  public preVelZ: number = 0.0,
  public preRadiationPressCoeff: number = 0.0,
  public preBallisticCoeff: number = 0.0,
  public preApogee: number = 0.0,
  public prePerigee: number = 0.0,
  public preInclination: number = 0.0,
  public preEccentricity: number = 0.0,
  public prePeriod: number = 0.0,
  public preRAAN: number = 0.0,
  public preSMA: number = 0.0,
  public preGeoLongitude: number = 0.0,
  public preDriftRate: number = 0.0,
  public preSigmaU: number = 0.0,
  public preSigmaV: number = 0.0,
  public preSigmaW: number = 0.0,
  public postEventIdElset: string|Uint8Array|null = null,
  public postEventElset: string|Uint8Array|null = null,
  public postEventIdStateVector: string|Uint8Array|null = null,
  public postEventStateVector: string|Uint8Array|null = null,
  public postPosX: number = 0.0,
  public postPosY: number = 0.0,
  public postPosZ: number = 0.0,
  public postVelX: number = 0.0,
  public postVelY: number = 0.0,
  public postVelZ: number = 0.0,
  public postRadiationPressCoeff: number = 0.0,
  public postBallisticCoeff: number = 0.0,
  public postApogee: number = 0.0,
  public postPerigee: number = 0.0,
  public postInclination: number = 0.0,
  public postEccentricity: number = 0.0,
  public postPeriod: number = 0.0,
  public postRAAN: number = 0.0,
  public postSMA: number = 0.0,
  public postGeoLongitude: number = 0.0,
  public postDriftRate: number = 0.0,
  public postSigmaU: number = 0.0,
  public postSigmaV: number = 0.0,
  public postSigmaW: number = 0.0,
  public cov: (string)[] = [],
  public postMass: number = 0.0,
  public postArea: number = 0.0,
  public numObs: number = 0,
  public description: string|Uint8Array|null = null,
  public descriptor: string|Uint8Array|null = null,
  public stateModel: string|Uint8Array|null = null,
  public stateModelVersion: number = 0.0,
  public numAccelPoints: number = 0,
  public mnvrAccelTimes: (string)[] = [],
  public mnvrAccels: (string)[] = [],
  public mnvrAccelUncs: (string)[] = [],
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: Maneuver_Abridged_dataMode_Enum = Maneuver_Abridged_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public algorithm: string|Uint8Array|null = null,
  public transactionId: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const reportTime = (this.reportTime !== null ? builder.createString(this.reportTime!) : 0);
  const eventStartTime = (this.eventStartTime !== null ? builder.createString(this.eventStartTime!) : 0);
  const eventEndTime = (this.eventEndTime !== null ? builder.createString(this.eventEndTime!) : 0);
  const odFitEndTime = (this.odFitEndTime !== null ? builder.createString(this.odFitEndTime!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const characterization = (this.characterization !== null ? builder.createString(this.characterization!) : 0);
  const eventId = (this.eventId !== null ? builder.createString(this.eventId!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const status = (this.status !== null ? builder.createString(this.status!) : 0);
  const preEventIdElset = (this.preEventIdElset !== null ? builder.createString(this.preEventIdElset!) : 0);
  const preEventElset = (this.preEventElset !== null ? builder.createString(this.preEventElset!) : 0);
  const preEventIdStateVector = (this.preEventIdStateVector !== null ? builder.createString(this.preEventIdStateVector!) : 0);
  const preEventStateVector = (this.preEventStateVector !== null ? builder.createString(this.preEventStateVector!) : 0);
  const postEventIdElset = (this.postEventIdElset !== null ? builder.createString(this.postEventIdElset!) : 0);
  const postEventElset = (this.postEventElset !== null ? builder.createString(this.postEventElset!) : 0);
  const postEventIdStateVector = (this.postEventIdStateVector !== null ? builder.createString(this.postEventIdStateVector!) : 0);
  const postEventStateVector = (this.postEventStateVector !== null ? builder.createString(this.postEventStateVector!) : 0);
  const cov = Maneuver_Abridged.createCovVector(builder, builder.createObjectOffsetList(this.cov));
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const descriptor = (this.descriptor !== null ? builder.createString(this.descriptor!) : 0);
  const stateModel = (this.stateModel !== null ? builder.createString(this.stateModel!) : 0);
  const mnvrAccelTimes = Maneuver_Abridged.createMnvrAccelTimesVector(builder, builder.createObjectOffsetList(this.mnvrAccelTimes));
  const mnvrAccels = Maneuver_Abridged.createMnvrAccelsVector(builder, builder.createObjectOffsetList(this.mnvrAccels));
  const mnvrAccelUncs = Maneuver_Abridged.createMnvrAccelUncsVector(builder, builder.createObjectOffsetList(this.mnvrAccelUncs));
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const algorithm = (this.algorithm !== null ? builder.createString(this.algorithm!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Maneuver_Abridged.createManeuver_Abridged(builder,
    id,
    classificationMarking,
    this.satNo,
    reportTime,
    eventStartTime,
    eventEndTime,
    this.totalBurnTime,
    odFitEndTime,
    idOnOrbit,
    idSensor,
    this.uct,
    this.maneuverUnc,
    characterization,
    this.characterizationUnc,
    eventId,
    origObjectId,
    origSensorId,
    status,
    this.deltaPos,
    this.deltaPosU,
    this.deltaPosV,
    this.deltaPosW,
    this.deltaVel,
    this.deltaVelU,
    this.deltaVelV,
    this.deltaVelW,
    this.deltaMass,
    preEventIdElset,
    preEventElset,
    preEventIdStateVector,
    preEventStateVector,
    this.prePosX,
    this.prePosY,
    this.prePosZ,
    this.preVelX,
    this.preVelY,
    this.preVelZ,
    this.preRadiationPressCoeff,
    this.preBallisticCoeff,
    this.preApogee,
    this.prePerigee,
    this.preInclination,
    this.preEccentricity,
    this.prePeriod,
    this.preRAAN,
    this.preSMA,
    this.preGeoLongitude,
    this.preDriftRate,
    this.preSigmaU,
    this.preSigmaV,
    this.preSigmaW,
    postEventIdElset,
    postEventElset,
    postEventIdStateVector,
    postEventStateVector,
    this.postPosX,
    this.postPosY,
    this.postPosZ,
    this.postVelX,
    this.postVelY,
    this.postVelZ,
    this.postRadiationPressCoeff,
    this.postBallisticCoeff,
    this.postApogee,
    this.postPerigee,
    this.postInclination,
    this.postEccentricity,
    this.postPeriod,
    this.postRAAN,
    this.postSMA,
    this.postGeoLongitude,
    this.postDriftRate,
    this.postSigmaU,
    this.postSigmaV,
    this.postSigmaW,
    cov,
    this.postMass,
    this.postArea,
    this.numObs,
    description,
    descriptor,
    stateModel,
    this.stateModelVersion,
    this.numAccelPoints,
    mnvrAccelTimes,
    mnvrAccels,
    mnvrAccelUncs,
    source,
    origin,
    this.dataMode,
    createdAt,
    createdBy,
    algorithm,
    transactionId,
    origNetwork
  );
}
}
