// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
 */
export class MtiDwell_Full implements flatbuffers.IUnpackableObject<MtiDwell_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MtiDwell_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMtiDwell_Full(bb:flatbuffers.ByteBuffer, obj?:MtiDwell_Full):MtiDwell_Full {
  return (obj || new MtiDwell_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMtiDwell_Full(bb:flatbuffers.ByteBuffer, obj?:MtiDwell_Full):MtiDwell_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MtiDwell_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MTID');
}

/**
 * Sequential count of a revisit of the bounding area in the last sent Job Definition Segment, where a Revisit Index of '0' indicates the first revisit.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
d2():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Temporally sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
d3():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Flag indicating the last dwell of the revisit.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
d4():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Count of the total number of targets reported during this dwell and sent in this Dwell Segment.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
d5():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields (missionRefTime) of the Mission Segment.
 * Example: /// Example: 1234567890
 * Constraints: No constraints specified.
 */
d6():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

/**
 * North-South position of the sensor at the temporal center of the dwell, in degrees.
 * Example: /// Example: 1.2
 * Constraints: No constraints specified.
 */
d7():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The East-West position of the sensor at the temporal center of the dwell, in degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
d8():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The altitude of the sensor at temporal center of the dwell, above the WGS 84 ellipsoid, expressed in centimeters.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
d9():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Factor which modifies the value of the reported target latitude (Delta Latitude, field D32.4).
 * Example: /// Example: 1.2
 * Constraints: No constraints specified.
 */
d10():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Factor which modifies the value of the reported target longitude (Delta Longitude, field D32.5).
 * Example: /// Example: 1.2
 * Constraints: No constraints specified.
 */
d11():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured along the sensor track direction (field D15), in centimeters.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
d12():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured orthogonal to the sensor track direction (field D15), in centimeters.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
d13():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Standard deviation of the sensor altitude estimate (field D9), in centimeters.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
d14():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Ground track of the sensor at the time of the dwell, as the angle in degrees (clockwise) from True North.
 * Example: /// Example: 1.2
 * Constraints: No constraints specified.
 */
d15():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Ground speed of the sensor at the time of the dwell, in millimeters per second.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
d16():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Velocity of the sensor in the vertical direction, in decimeters per second.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
d17():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Standard deviation of the estimate of the sensor track, in degrees.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
d18():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Standard deviation of estimate of the sensor speed, in millimeters per second.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
d19():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Standard deviation of estimate of the sensor vertical velocity, expressed in centimeters per second.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
d20():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Heading of the platform at the time of the dwell, as the angle in degrees (clockwise) from True North to the roll axis of the platform.
 * Example: /// Example: 1.2
 * Constraints: No constraints specified.
 */
d21():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pitch angle of the platform at the time of the dwell, in degrees.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
d22():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Roll angle of the platform at the time of the dwell, in degrees.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
d23():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The North-South position of the center of the dwell area, expressed as degrees North (positive) or South (negative) of the Equator.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
d24():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The East-West position of the center of the dwell area, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
d25():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Distance on the earth surface, expressed in kilometers, from the near edge to the center of the dwell area.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
d26():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * For dwell based radars, one-half of the 3-dB beamwidth.  For non-dwell based radars, the angle between the beginning of the dwell to the center of the dwell.  Measured in degrees.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
d27():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rotation of the sensor broadside face about the local vertical axis of the platform, in degrees.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
d28():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
d29():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
d30():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
d31():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
d32(index: number):string
d32(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
d32(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

d32Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Dwell timestamp in ISO8601 UTC format.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
dwellts():string|null
dwellts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dwellts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startMtiDwell_Full(builder:flatbuffers.Builder) {
  builder.startObject(32);
}

static addD2(builder:flatbuffers.Builder, d2:number) {
  builder.addFieldInt32(0, d2, 0);
}

static addD3(builder:flatbuffers.Builder, d3:number) {
  builder.addFieldInt32(1, d3, 0);
}

static addD4(builder:flatbuffers.Builder, d4:boolean) {
  builder.addFieldInt8(2, +d4, +false);
}

static addD5(builder:flatbuffers.Builder, d5:number) {
  builder.addFieldInt32(3, d5, 0);
}

static addD6(builder:flatbuffers.Builder, d6:bigint) {
  builder.addFieldInt64(4, d6, BigInt('0'));
}

static addD7(builder:flatbuffers.Builder, d7:number) {
  builder.addFieldFloat64(5, d7, 0.0);
}

static addD8(builder:flatbuffers.Builder, d8:number) {
  builder.addFieldFloat64(6, d8, 0.0);
}

static addD9(builder:flatbuffers.Builder, d9:number) {
  builder.addFieldInt32(7, d9, 0);
}

static addD10(builder:flatbuffers.Builder, d10:number) {
  builder.addFieldFloat64(8, d10, 0.0);
}

static addD11(builder:flatbuffers.Builder, d11:number) {
  builder.addFieldFloat64(9, d11, 0.0);
}

static addD12(builder:flatbuffers.Builder, d12:number) {
  builder.addFieldInt32(10, d12, 0);
}

static addD13(builder:flatbuffers.Builder, d13:number) {
  builder.addFieldInt32(11, d13, 0);
}

static addD14(builder:flatbuffers.Builder, d14:number) {
  builder.addFieldInt32(12, d14, 0);
}

static addD15(builder:flatbuffers.Builder, d15:number) {
  builder.addFieldFloat64(13, d15, 0.0);
}

static addD16(builder:flatbuffers.Builder, d16:number) {
  builder.addFieldInt32(14, d16, 0);
}

static addD17(builder:flatbuffers.Builder, d17:number) {
  builder.addFieldInt32(15, d17, 0);
}

static addD18(builder:flatbuffers.Builder, d18:number) {
  builder.addFieldInt32(16, d18, 0);
}

static addD19(builder:flatbuffers.Builder, d19:number) {
  builder.addFieldInt32(17, d19, 0);
}

static addD20(builder:flatbuffers.Builder, d20:number) {
  builder.addFieldInt32(18, d20, 0);
}

static addD21(builder:flatbuffers.Builder, d21:number) {
  builder.addFieldFloat64(19, d21, 0.0);
}

static addD22(builder:flatbuffers.Builder, d22:number) {
  builder.addFieldFloat64(20, d22, 0.0);
}

static addD23(builder:flatbuffers.Builder, d23:number) {
  builder.addFieldFloat64(21, d23, 0.0);
}

static addD24(builder:flatbuffers.Builder, d24:number) {
  builder.addFieldFloat64(22, d24, 0.0);
}

static addD25(builder:flatbuffers.Builder, d25:number) {
  builder.addFieldFloat64(23, d25, 0.0);
}

static addD26(builder:flatbuffers.Builder, d26:number) {
  builder.addFieldFloat64(24, d26, 0.0);
}

static addD27(builder:flatbuffers.Builder, d27:number) {
  builder.addFieldFloat64(25, d27, 0.0);
}

static addD28(builder:flatbuffers.Builder, d28:number) {
  builder.addFieldFloat64(26, d28, 0.0);
}

static addD29(builder:flatbuffers.Builder, d29:number) {
  builder.addFieldFloat64(27, d29, 0.0);
}

static addD30(builder:flatbuffers.Builder, d30:number) {
  builder.addFieldFloat64(28, d30, 0.0);
}

static addD31(builder:flatbuffers.Builder, d31:number) {
  builder.addFieldInt32(29, d31, 0);
}

static addD32(builder:flatbuffers.Builder, d32Offset:flatbuffers.Offset) {
  builder.addFieldOffset(30, d32Offset, 0);
}

static createD32Vector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startD32Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDwellts(builder:flatbuffers.Builder, dwelltsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, dwelltsOffset, 0);
}

static endMtiDwell_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMtiDwell_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTID');
}

static finishSizePrefixedMtiDwell_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTID', true);
}

static createMtiDwell_Full(builder:flatbuffers.Builder, d2:number, d3:number, d4:boolean, d5:number, d6:bigint, d7:number, d8:number, d9:number, d10:number, d11:number, d12:number, d13:number, d14:number, d15:number, d16:number, d17:number, d18:number, d19:number, d20:number, d21:number, d22:number, d23:number, d24:number, d25:number, d26:number, d27:number, d28:number, d29:number, d30:number, d31:number, d32Offset:flatbuffers.Offset, dwelltsOffset:flatbuffers.Offset):flatbuffers.Offset {
  MtiDwell_Full.startMtiDwell_Full(builder);
  MtiDwell_Full.addD2(builder, d2);
  MtiDwell_Full.addD3(builder, d3);
  MtiDwell_Full.addD4(builder, d4);
  MtiDwell_Full.addD5(builder, d5);
  MtiDwell_Full.addD6(builder, d6);
  MtiDwell_Full.addD7(builder, d7);
  MtiDwell_Full.addD8(builder, d8);
  MtiDwell_Full.addD9(builder, d9);
  MtiDwell_Full.addD10(builder, d10);
  MtiDwell_Full.addD11(builder, d11);
  MtiDwell_Full.addD12(builder, d12);
  MtiDwell_Full.addD13(builder, d13);
  MtiDwell_Full.addD14(builder, d14);
  MtiDwell_Full.addD15(builder, d15);
  MtiDwell_Full.addD16(builder, d16);
  MtiDwell_Full.addD17(builder, d17);
  MtiDwell_Full.addD18(builder, d18);
  MtiDwell_Full.addD19(builder, d19);
  MtiDwell_Full.addD20(builder, d20);
  MtiDwell_Full.addD21(builder, d21);
  MtiDwell_Full.addD22(builder, d22);
  MtiDwell_Full.addD23(builder, d23);
  MtiDwell_Full.addD24(builder, d24);
  MtiDwell_Full.addD25(builder, d25);
  MtiDwell_Full.addD26(builder, d26);
  MtiDwell_Full.addD27(builder, d27);
  MtiDwell_Full.addD28(builder, d28);
  MtiDwell_Full.addD29(builder, d29);
  MtiDwell_Full.addD30(builder, d30);
  MtiDwell_Full.addD31(builder, d31);
  MtiDwell_Full.addD32(builder, d32Offset);
  MtiDwell_Full.addDwellts(builder, dwelltsOffset);
  return MtiDwell_Full.endMtiDwell_Full(builder);
}

unpack(): MtiDwell_FullT {
  return new MtiDwell_FullT(
    this.d2(),
    this.d3(),
    this.d4(),
    this.d5(),
    this.d6(),
    this.d7(),
    this.d8(),
    this.d9(),
    this.d10(),
    this.d11(),
    this.d12(),
    this.d13(),
    this.d14(),
    this.d15(),
    this.d16(),
    this.d17(),
    this.d18(),
    this.d19(),
    this.d20(),
    this.d21(),
    this.d22(),
    this.d23(),
    this.d24(),
    this.d25(),
    this.d26(),
    this.d27(),
    this.d28(),
    this.d29(),
    this.d30(),
    this.d31(),
    this.bb!.createScalarList<string>(this.d32.bind(this), this.d32Length()),
    this.dwellts()
  );
}


unpackTo(_o: MtiDwell_FullT): void {
  _o.d2 = this.d2();
  _o.d3 = this.d3();
  _o.d4 = this.d4();
  _o.d5 = this.d5();
  _o.d6 = this.d6();
  _o.d7 = this.d7();
  _o.d8 = this.d8();
  _o.d9 = this.d9();
  _o.d10 = this.d10();
  _o.d11 = this.d11();
  _o.d12 = this.d12();
  _o.d13 = this.d13();
  _o.d14 = this.d14();
  _o.d15 = this.d15();
  _o.d16 = this.d16();
  _o.d17 = this.d17();
  _o.d18 = this.d18();
  _o.d19 = this.d19();
  _o.d20 = this.d20();
  _o.d21 = this.d21();
  _o.d22 = this.d22();
  _o.d23 = this.d23();
  _o.d24 = this.d24();
  _o.d25 = this.d25();
  _o.d26 = this.d26();
  _o.d27 = this.d27();
  _o.d28 = this.d28();
  _o.d29 = this.d29();
  _o.d30 = this.d30();
  _o.d31 = this.d31();
  _o.d32 = this.bb!.createScalarList<string>(this.d32.bind(this), this.d32Length());
  _o.dwellts = this.dwellts();
}
}

export class MtiDwell_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public d2: number = 0,
  public d3: number = 0,
  public d4: boolean = false,
  public d5: number = 0,
  public d6: bigint = BigInt('0'),
  public d7: number = 0.0,
  public d8: number = 0.0,
  public d9: number = 0,
  public d10: number = 0.0,
  public d11: number = 0.0,
  public d12: number = 0,
  public d13: number = 0,
  public d14: number = 0,
  public d15: number = 0.0,
  public d16: number = 0,
  public d17: number = 0,
  public d18: number = 0,
  public d19: number = 0,
  public d20: number = 0,
  public d21: number = 0.0,
  public d22: number = 0.0,
  public d23: number = 0.0,
  public d24: number = 0.0,
  public d25: number = 0.0,
  public d26: number = 0.0,
  public d27: number = 0.0,
  public d28: number = 0.0,
  public d29: number = 0.0,
  public d30: number = 0.0,
  public d31: number = 0,
  public d32: (string)[] = [],
  public dwellts: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const d32 = MtiDwell_Full.createD32Vector(builder, builder.createObjectOffsetList(this.d32));
  const dwellts = (this.dwellts !== null ? builder.createString(this.dwellts!) : 0);

  return MtiDwell_Full.createMtiDwell_Full(builder,
    this.d2,
    this.d3,
    this.d4,
    this.d5,
    this.d6,
    this.d7,
    this.d8,
    this.d9,
    this.d10,
    this.d11,
    this.d12,
    this.d13,
    this.d14,
    this.d15,
    this.d16,
    this.d17,
    this.d18,
    this.d19,
    this.d20,
    this.d21,
    this.d22,
    this.d23,
    this.d24,
    this.d25,
    this.d26,
    this.d27,
    this.d28,
    this.d29,
    this.d30,
    this.d31,
    d32,
    dwellts
  );
}
}
