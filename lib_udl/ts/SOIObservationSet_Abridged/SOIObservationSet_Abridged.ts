// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SOIObservationSet_Abridged_dataMode_Enum } from './SOIObservationSet_Abridged_dataMode_Enum.js';
import { SOIObservationSet_Abridged_referenceFrame_Enum } from './SOIObservationSet_Abridged_referenceFrame_Enum.js';
import { SOIObservationSet_Abridged_senReferenceFrame_Enum } from './SOIObservationSet_Abridged_senReferenceFrame_Enum.js';
import { SOIObservationSet_Abridged_type_Enum } from './SOIObservationSet_Abridged_type_Enum.js';


/**
 * /// These services provide operations for posting space object idenfification observation sets.
 */
export class SOIObservationSet_Abridged implements flatbuffers.IUnpackableObject<SOIObservationSet_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SOIObservationSet_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSOIObservationSet_Abridged(bb:flatbuffers.ByteBuffer, obj?:SOIObservationSet_Abridged):SOIObservationSet_Abridged {
  return (obj || new SOIObservationSet_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSOIObservationSet_Abridged(bb:flatbuffers.ByteBuffer, obj?:SOIObservationSet_Abridged):SOIObservationSet_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SOIObservationSet_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SOIO');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.
 * Example: /// Example: 2022-07-07T16:00:00.123Z
 * Constraints: No constraints specified.
 */
msgCreateDate():string|null
msgCreateDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgCreateDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the observing sensor.
 * Example: /// Example: SENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the AttitudeSet record for the observing sensor.
 * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
 * Constraints: Minimum length = 0, Maximum length = 36
 */
sensorAsId():string|null
sensorAsId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorAsId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the target on-orbit object, if correlated.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the target on-orbit object.
 * Example: /// Example: 101
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.1
 * Constraints: No constraints specified.
 */
senlat():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).
 * Example: /// Example: 179.1
 * Constraints: No constraints specified.
 */
senlon():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor altitude at startTime (if mobile/onorbit) in kilometers.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senalt():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senx():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
seny():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senz():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senvelx():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senvely():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senvelz():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * ID of the UDL Elset of the Space Object under observation.
 * Example: /// Example: REF-ELSET-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idElset():string|null
idElset(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idElset(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Observation set detection start time in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Observation set detection end time in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
endTime():string|null
endTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of observation records in the set.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numObs():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Observation type (OPTICAL, RADAR).
 * Example: /// Example: OPTICAL
 * Constraints: Minimum length = 1, Maximum length = 24
 */
type():SOIObservationSet_Abridged_type_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SOIObservationSet_Abridged_type_Enum.OPTICAL;
}

/**
 * Polar angle of the gimbal/mount at observation set detection start time in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
polarAngleStart():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Polar angle of the gimbal/mount at observation set detection end time in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
polarAngleEnd():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.
 * Example: /// Example: J2000
 * Constraints: Minimum length = 0, Maximum length = 24
 */
referenceFrame():SOIObservationSet_Abridged_referenceFrame_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SOIObservationSet_Abridged_referenceFrame_Enum.J2000;
}

/**
 * The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
 * Example: /// Example: J2000
 * Constraints: Minimum length = 0, Maximum length = 24
 */
senReferenceFrame():SOIObservationSet_Abridged_senReferenceFrame_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SOIObservationSet_Abridged_senReferenceFrame_Enum.J2000;
}

/**
 * Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
losDeclinationStart():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
losDeclinationEnd():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
pointingAngleAzStart():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
pointingAngleAzEnd():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
pointingAngleElStart():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
pointingAngleElEnd():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pixel array size (width) in pixels.
 * Example: /// Example: 32
 * Constraints: No constraints specified.
 */
pixelArrayWidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Pixel array size (height) in pixels.
 * Example: /// Example: 32
 * Constraints: No constraints specified.
 */
pixelArrayHeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The value is the number of spectral filters used.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
numSpectralFilters():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
 * Example: /// Example: ['Keyword1', 'Keyword2']
 * Constraints: No constraints specified.
 */
spectralFilters(index: number):string
spectralFilters(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
spectralFilters(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

spectralFiltersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
 * Example: /// Example: RATE TRACK
 * Constraints: Minimum length = 0, Maximum length = 32
 */
collectionMode():string|null
collectionMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collectionMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.
 * Example: /// Example: 234.2
 * Constraints: No constraints specified.
 */
gain():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The number of pixels binned horizontally.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
binningHoriz():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The number of pixels binned vertically.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
binningVert():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The in-band solar magnitude at 1 A.U.
 * Example: /// Example: -26.91
 * Constraints: No constraints specified.
 */
solarMag():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The minimum valid pixel value.
 * Example: /// Example: 0
 * Constraints: No constraints specified.
 */
pixelMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The maximum valid pixel value.
 * Example: /// Example: 16383
 * Constraints: No constraints specified.
 */
pixelMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Software Version used to Capture, Process, and Deliver the data.
 * Example: /// Example: GSV99/17-1
 * Constraints: Minimum length = 0, Maximum length = 70
 */
softwareVersion():string|null
softwareVersion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
softwareVersion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the target satellite.
 * Example: /// Example: TITAN 3C TRANSTAGE R/B
 * Constraints: Minimum length = 0, Maximum length = 70
 */
satelliteName():string|null
satelliteName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
satelliteName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the Star Catalog used for photometry and astrometry.
 * Example: /// Example: SSTRC5
 * Constraints: Minimum length = 0, Maximum length = 70
 */
starCatName():string|null
starCatName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
starCatName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).
 * Example: /// Example: 0.327
 * Constraints: No constraints specified.
 */
corrQuality():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
uct():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).
 * Example: /// Example: BOTH
 * Constraints: Minimum length = 0, Maximum length = 16
 */
validCalibrations():string|null
validCalibrations(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
validCalibrations(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).
 * Example: /// Example: ALL SKY
 * Constraints: Minimum length = 0, Maximum length = 32
 */
calibrationType():string|null
calibrationType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
calibrationType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.
 * Example: /// Example: 0.1
 * Constraints: No constraints specified.
 */
percentSatThreshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Boolean indicating if any change event was detected, based on historical collection data for the object.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
changeDetected():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
periodicityChangeDetected():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
brightnessVarianceChangeDetected():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
solarPhaseAngleBrightnessChangeDetected():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).
 * Example: /// Example: MEDIUM
 * Constraints: Minimum length = 0, Maximum length = 16
 */
changeConf():string|null
changeConf(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
changeConf(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
 * Example: /// Example: MEDIUM
 * Constraints: Minimum length = 0, Maximum length = 16
 */
collectionDensityConf():string|null
collectionDensityConf(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collectionDensityConf(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
 * Example: /// Example: MEDIUM
 * Constraints: Minimum length = 0, Maximum length = 16
 */
periodicitySamplingConf():string|null
periodicitySamplingConf(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
periodicitySamplingConf(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).
 * Example: /// Example: MEDIUM
 * Constraints: Minimum length = 0, Maximum length = 16
 */
periodicityDetectionConf():string|null
periodicityDetectionConf(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
periodicityDetectionConf(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.
 * Example: /// Example: b5133288-ab63-4b15-81f6-c7eec0cdb0c0
 * Constraints: Minimum length = 0, Maximum length = 36
 */
collectionId():string|null
collectionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collectionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of SOI Calibrations associated with this SOIObservationSet.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
calibrations(index: number):string
calibrations(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
calibrations(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

calibrationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['TAG1', 'TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: TRANSACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SOIObservationSet_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SOIObservationSet_Abridged_dataMode_Enum.REAL;
}

static startSOIObservationSet_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(71);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addMsgCreateDate(builder:flatbuffers.Builder, msgCreateDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, msgCreateDateOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idSensorOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, origSensorIdOffset, 0);
}

static addSensorAsId(builder:flatbuffers.Builder, sensorAsIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, sensorAsIdOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(7, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, origObjectIdOffset, 0);
}

static addSenlat(builder:flatbuffers.Builder, senlat:number) {
  builder.addFieldFloat64(9, senlat, 0.0);
}

static addSenlon(builder:flatbuffers.Builder, senlon:number) {
  builder.addFieldFloat64(10, senlon, 0.0);
}

static addSenalt(builder:flatbuffers.Builder, senalt:number) {
  builder.addFieldFloat64(11, senalt, 0.0);
}

static addSenx(builder:flatbuffers.Builder, senx:number) {
  builder.addFieldFloat64(12, senx, 0.0);
}

static addSeny(builder:flatbuffers.Builder, seny:number) {
  builder.addFieldFloat64(13, seny, 0.0);
}

static addSenz(builder:flatbuffers.Builder, senz:number) {
  builder.addFieldFloat64(14, senz, 0.0);
}

static addSenvelx(builder:flatbuffers.Builder, senvelx:number) {
  builder.addFieldFloat64(15, senvelx, 0.0);
}

static addSenvely(builder:flatbuffers.Builder, senvely:number) {
  builder.addFieldFloat64(16, senvely, 0.0);
}

static addSenvelz(builder:flatbuffers.Builder, senvelz:number) {
  builder.addFieldFloat64(17, senvelz, 0.0);
}

static addIdElset(builder:flatbuffers.Builder, idElsetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, idElsetOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, startTimeOffset, 0);
}

static addEndTime(builder:flatbuffers.Builder, endTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, endTimeOffset, 0);
}

static addNumObs(builder:flatbuffers.Builder, numObs:number) {
  builder.addFieldInt32(21, numObs, 0);
}

static addType(builder:flatbuffers.Builder, type:SOIObservationSet_Abridged_type_Enum) {
  builder.addFieldInt8(22, type, SOIObservationSet_Abridged_type_Enum.OPTICAL);
}

static addPolarAngleStart(builder:flatbuffers.Builder, polarAngleStart:number) {
  builder.addFieldFloat64(23, polarAngleStart, 0.0);
}

static addPolarAngleEnd(builder:flatbuffers.Builder, polarAngleEnd:number) {
  builder.addFieldFloat64(24, polarAngleEnd, 0.0);
}

static addReferenceFrame(builder:flatbuffers.Builder, referenceFrame:SOIObservationSet_Abridged_referenceFrame_Enum) {
  builder.addFieldInt8(25, referenceFrame, SOIObservationSet_Abridged_referenceFrame_Enum.J2000);
}

static addSenReferenceFrame(builder:flatbuffers.Builder, senReferenceFrame:SOIObservationSet_Abridged_senReferenceFrame_Enum) {
  builder.addFieldInt8(26, senReferenceFrame, SOIObservationSet_Abridged_senReferenceFrame_Enum.J2000);
}

static addLosDeclinationStart(builder:flatbuffers.Builder, losDeclinationStart:number) {
  builder.addFieldFloat64(27, losDeclinationStart, 0.0);
}

static addLosDeclinationEnd(builder:flatbuffers.Builder, losDeclinationEnd:number) {
  builder.addFieldFloat64(28, losDeclinationEnd, 0.0);
}

static addPointingAngleAzStart(builder:flatbuffers.Builder, pointingAngleAzStart:number) {
  builder.addFieldFloat64(29, pointingAngleAzStart, 0.0);
}

static addPointingAngleAzEnd(builder:flatbuffers.Builder, pointingAngleAzEnd:number) {
  builder.addFieldFloat64(30, pointingAngleAzEnd, 0.0);
}

static addPointingAngleElStart(builder:flatbuffers.Builder, pointingAngleElStart:number) {
  builder.addFieldFloat64(31, pointingAngleElStart, 0.0);
}

static addPointingAngleElEnd(builder:flatbuffers.Builder, pointingAngleElEnd:number) {
  builder.addFieldFloat64(32, pointingAngleElEnd, 0.0);
}

static addPixelArrayWidth(builder:flatbuffers.Builder, pixelArrayWidth:number) {
  builder.addFieldInt32(33, pixelArrayWidth, 0);
}

static addPixelArrayHeight(builder:flatbuffers.Builder, pixelArrayHeight:number) {
  builder.addFieldInt32(34, pixelArrayHeight, 0);
}

static addNumSpectralFilters(builder:flatbuffers.Builder, numSpectralFilters:number) {
  builder.addFieldInt32(35, numSpectralFilters, 0);
}

static addSpectralFilters(builder:flatbuffers.Builder, spectralFiltersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, spectralFiltersOffset, 0);
}

static createSpectralFiltersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSpectralFiltersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCollectionMode(builder:flatbuffers.Builder, collectionModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, collectionModeOffset, 0);
}

static addGain(builder:flatbuffers.Builder, gain:number) {
  builder.addFieldFloat64(38, gain, 0.0);
}

static addBinningHoriz(builder:flatbuffers.Builder, binningHoriz:number) {
  builder.addFieldInt32(39, binningHoriz, 0);
}

static addBinningVert(builder:flatbuffers.Builder, binningVert:number) {
  builder.addFieldInt32(40, binningVert, 0);
}

static addSolarMag(builder:flatbuffers.Builder, solarMag:number) {
  builder.addFieldFloat64(41, solarMag, 0.0);
}

static addPixelMin(builder:flatbuffers.Builder, pixelMin:number) {
  builder.addFieldInt32(42, pixelMin, 0);
}

static addPixelMax(builder:flatbuffers.Builder, pixelMax:number) {
  builder.addFieldInt32(43, pixelMax, 0);
}

static addSoftwareVersion(builder:flatbuffers.Builder, softwareVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, softwareVersionOffset, 0);
}

static addSatelliteName(builder:flatbuffers.Builder, satelliteNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, satelliteNameOffset, 0);
}

static addStarCatName(builder:flatbuffers.Builder, starCatNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, starCatNameOffset, 0);
}

static addCorrQuality(builder:flatbuffers.Builder, corrQuality:number) {
  builder.addFieldFloat64(47, corrQuality, 0.0);
}

static addUct(builder:flatbuffers.Builder, uct:boolean) {
  builder.addFieldInt8(48, +uct, +false);
}

static addValidCalibrations(builder:flatbuffers.Builder, validCalibrationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, validCalibrationsOffset, 0);
}

static addCalibrationType(builder:flatbuffers.Builder, calibrationTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, calibrationTypeOffset, 0);
}

static addPercentSatThreshold(builder:flatbuffers.Builder, percentSatThreshold:number) {
  builder.addFieldFloat64(51, percentSatThreshold, 0.0);
}

static addChangeDetected(builder:flatbuffers.Builder, changeDetected:boolean) {
  builder.addFieldInt8(52, +changeDetected, +false);
}

static addPeriodicityChangeDetected(builder:flatbuffers.Builder, periodicityChangeDetected:boolean) {
  builder.addFieldInt8(53, +periodicityChangeDetected, +false);
}

static addBrightnessVarianceChangeDetected(builder:flatbuffers.Builder, brightnessVarianceChangeDetected:boolean) {
  builder.addFieldInt8(54, +brightnessVarianceChangeDetected, +false);
}

static addSolarPhaseAngleBrightnessChangeDetected(builder:flatbuffers.Builder, solarPhaseAngleBrightnessChangeDetected:boolean) {
  builder.addFieldInt8(55, +solarPhaseAngleBrightnessChangeDetected, +false);
}

static addChangeConf(builder:flatbuffers.Builder, changeConfOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, changeConfOffset, 0);
}

static addCollectionDensityConf(builder:flatbuffers.Builder, collectionDensityConfOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, collectionDensityConfOffset, 0);
}

static addPeriodicitySamplingConf(builder:flatbuffers.Builder, periodicitySamplingConfOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, periodicitySamplingConfOffset, 0);
}

static addPeriodicityDetectionConf(builder:flatbuffers.Builder, periodicityDetectionConfOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, periodicityDetectionConfOffset, 0);
}

static addCollectionId(builder:flatbuffers.Builder, collectionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, collectionIdOffset, 0);
}

static addCalibrations(builder:flatbuffers.Builder, calibrationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, calibrationsOffset, 0);
}

static createCalibrationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCalibrationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, transactionIdOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(68, origNetworkOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(69, sourceDlOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SOIObservationSet_Abridged_dataMode_Enum) {
  builder.addFieldInt8(70, dataMode, SOIObservationSet_Abridged_dataMode_Enum.REAL);
}

static endSOIObservationSet_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSOIObservationSet_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SOIO');
}

static finishSizePrefixedSOIObservationSet_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SOIO', true);
}

static createSOIObservationSet_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, msgCreateDateOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, sensorAsIdOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, senlat:number, senlon:number, senalt:number, senx:number, seny:number, senz:number, senvelx:number, senvely:number, senvelz:number, idElsetOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, endTimeOffset:flatbuffers.Offset, numObs:number, type:SOIObservationSet_Abridged_type_Enum, polarAngleStart:number, polarAngleEnd:number, referenceFrame:SOIObservationSet_Abridged_referenceFrame_Enum, senReferenceFrame:SOIObservationSet_Abridged_senReferenceFrame_Enum, losDeclinationStart:number, losDeclinationEnd:number, pointingAngleAzStart:number, pointingAngleAzEnd:number, pointingAngleElStart:number, pointingAngleElEnd:number, pixelArrayWidth:number, pixelArrayHeight:number, numSpectralFilters:number, spectralFiltersOffset:flatbuffers.Offset, collectionModeOffset:flatbuffers.Offset, gain:number, binningHoriz:number, binningVert:number, solarMag:number, pixelMin:number, pixelMax:number, softwareVersionOffset:flatbuffers.Offset, satelliteNameOffset:flatbuffers.Offset, starCatNameOffset:flatbuffers.Offset, corrQuality:number, uct:boolean, validCalibrationsOffset:flatbuffers.Offset, calibrationTypeOffset:flatbuffers.Offset, percentSatThreshold:number, changeDetected:boolean, periodicityChangeDetected:boolean, brightnessVarianceChangeDetected:boolean, solarPhaseAngleBrightnessChangeDetected:boolean, changeConfOffset:flatbuffers.Offset, collectionDensityConfOffset:flatbuffers.Offset, periodicitySamplingConfOffset:flatbuffers.Offset, periodicityDetectionConfOffset:flatbuffers.Offset, collectionIdOffset:flatbuffers.Offset, calibrationsOffset:flatbuffers.Offset, tagsOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, dataMode:SOIObservationSet_Abridged_dataMode_Enum):flatbuffers.Offset {
  SOIObservationSet_Abridged.startSOIObservationSet_Abridged(builder);
  SOIObservationSet_Abridged.addId(builder, idOffset);
  SOIObservationSet_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  SOIObservationSet_Abridged.addMsgCreateDate(builder, msgCreateDateOffset);
  SOIObservationSet_Abridged.addIdSensor(builder, idSensorOffset);
  SOIObservationSet_Abridged.addOrigSensorId(builder, origSensorIdOffset);
  SOIObservationSet_Abridged.addSensorAsId(builder, sensorAsIdOffset);
  SOIObservationSet_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
  SOIObservationSet_Abridged.addSatNo(builder, satNo);
  SOIObservationSet_Abridged.addOrigObjectId(builder, origObjectIdOffset);
  SOIObservationSet_Abridged.addSenlat(builder, senlat);
  SOIObservationSet_Abridged.addSenlon(builder, senlon);
  SOIObservationSet_Abridged.addSenalt(builder, senalt);
  SOIObservationSet_Abridged.addSenx(builder, senx);
  SOIObservationSet_Abridged.addSeny(builder, seny);
  SOIObservationSet_Abridged.addSenz(builder, senz);
  SOIObservationSet_Abridged.addSenvelx(builder, senvelx);
  SOIObservationSet_Abridged.addSenvely(builder, senvely);
  SOIObservationSet_Abridged.addSenvelz(builder, senvelz);
  SOIObservationSet_Abridged.addIdElset(builder, idElsetOffset);
  SOIObservationSet_Abridged.addStartTime(builder, startTimeOffset);
  SOIObservationSet_Abridged.addEndTime(builder, endTimeOffset);
  SOIObservationSet_Abridged.addNumObs(builder, numObs);
  SOIObservationSet_Abridged.addType(builder, type);
  SOIObservationSet_Abridged.addPolarAngleStart(builder, polarAngleStart);
  SOIObservationSet_Abridged.addPolarAngleEnd(builder, polarAngleEnd);
  SOIObservationSet_Abridged.addReferenceFrame(builder, referenceFrame);
  SOIObservationSet_Abridged.addSenReferenceFrame(builder, senReferenceFrame);
  SOIObservationSet_Abridged.addLosDeclinationStart(builder, losDeclinationStart);
  SOIObservationSet_Abridged.addLosDeclinationEnd(builder, losDeclinationEnd);
  SOIObservationSet_Abridged.addPointingAngleAzStart(builder, pointingAngleAzStart);
  SOIObservationSet_Abridged.addPointingAngleAzEnd(builder, pointingAngleAzEnd);
  SOIObservationSet_Abridged.addPointingAngleElStart(builder, pointingAngleElStart);
  SOIObservationSet_Abridged.addPointingAngleElEnd(builder, pointingAngleElEnd);
  SOIObservationSet_Abridged.addPixelArrayWidth(builder, pixelArrayWidth);
  SOIObservationSet_Abridged.addPixelArrayHeight(builder, pixelArrayHeight);
  SOIObservationSet_Abridged.addNumSpectralFilters(builder, numSpectralFilters);
  SOIObservationSet_Abridged.addSpectralFilters(builder, spectralFiltersOffset);
  SOIObservationSet_Abridged.addCollectionMode(builder, collectionModeOffset);
  SOIObservationSet_Abridged.addGain(builder, gain);
  SOIObservationSet_Abridged.addBinningHoriz(builder, binningHoriz);
  SOIObservationSet_Abridged.addBinningVert(builder, binningVert);
  SOIObservationSet_Abridged.addSolarMag(builder, solarMag);
  SOIObservationSet_Abridged.addPixelMin(builder, pixelMin);
  SOIObservationSet_Abridged.addPixelMax(builder, pixelMax);
  SOIObservationSet_Abridged.addSoftwareVersion(builder, softwareVersionOffset);
  SOIObservationSet_Abridged.addSatelliteName(builder, satelliteNameOffset);
  SOIObservationSet_Abridged.addStarCatName(builder, starCatNameOffset);
  SOIObservationSet_Abridged.addCorrQuality(builder, corrQuality);
  SOIObservationSet_Abridged.addUct(builder, uct);
  SOIObservationSet_Abridged.addValidCalibrations(builder, validCalibrationsOffset);
  SOIObservationSet_Abridged.addCalibrationType(builder, calibrationTypeOffset);
  SOIObservationSet_Abridged.addPercentSatThreshold(builder, percentSatThreshold);
  SOIObservationSet_Abridged.addChangeDetected(builder, changeDetected);
  SOIObservationSet_Abridged.addPeriodicityChangeDetected(builder, periodicityChangeDetected);
  SOIObservationSet_Abridged.addBrightnessVarianceChangeDetected(builder, brightnessVarianceChangeDetected);
  SOIObservationSet_Abridged.addSolarPhaseAngleBrightnessChangeDetected(builder, solarPhaseAngleBrightnessChangeDetected);
  SOIObservationSet_Abridged.addChangeConf(builder, changeConfOffset);
  SOIObservationSet_Abridged.addCollectionDensityConf(builder, collectionDensityConfOffset);
  SOIObservationSet_Abridged.addPeriodicitySamplingConf(builder, periodicitySamplingConfOffset);
  SOIObservationSet_Abridged.addPeriodicityDetectionConf(builder, periodicityDetectionConfOffset);
  SOIObservationSet_Abridged.addCollectionId(builder, collectionIdOffset);
  SOIObservationSet_Abridged.addCalibrations(builder, calibrationsOffset);
  SOIObservationSet_Abridged.addTags(builder, tagsOffset);
  SOIObservationSet_Abridged.addTransactionId(builder, transactionIdOffset);
  SOIObservationSet_Abridged.addCreatedAt(builder, createdAtOffset);
  SOIObservationSet_Abridged.addCreatedBy(builder, createdByOffset);
  SOIObservationSet_Abridged.addSource(builder, sourceOffset);
  SOIObservationSet_Abridged.addOrigin(builder, originOffset);
  SOIObservationSet_Abridged.addOrigNetwork(builder, origNetworkOffset);
  SOIObservationSet_Abridged.addSourceDl(builder, sourceDlOffset);
  SOIObservationSet_Abridged.addDataMode(builder, dataMode);
  return SOIObservationSet_Abridged.endSOIObservationSet_Abridged(builder);
}

unpack(): SOIObservationSet_AbridgedT {
  return new SOIObservationSet_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.msgCreateDate(),
    this.idSensor(),
    this.origSensorId(),
    this.sensorAsId(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.senlat(),
    this.senlon(),
    this.senalt(),
    this.senx(),
    this.seny(),
    this.senz(),
    this.senvelx(),
    this.senvely(),
    this.senvelz(),
    this.idElset(),
    this.startTime(),
    this.endTime(),
    this.numObs(),
    this.type(),
    this.polarAngleStart(),
    this.polarAngleEnd(),
    this.referenceFrame(),
    this.senReferenceFrame(),
    this.losDeclinationStart(),
    this.losDeclinationEnd(),
    this.pointingAngleAzStart(),
    this.pointingAngleAzEnd(),
    this.pointingAngleElStart(),
    this.pointingAngleElEnd(),
    this.pixelArrayWidth(),
    this.pixelArrayHeight(),
    this.numSpectralFilters(),
    this.bb!.createScalarList<string>(this.spectralFilters.bind(this), this.spectralFiltersLength()),
    this.collectionMode(),
    this.gain(),
    this.binningHoriz(),
    this.binningVert(),
    this.solarMag(),
    this.pixelMin(),
    this.pixelMax(),
    this.softwareVersion(),
    this.satelliteName(),
    this.starCatName(),
    this.corrQuality(),
    this.uct(),
    this.validCalibrations(),
    this.calibrationType(),
    this.percentSatThreshold(),
    this.changeDetected(),
    this.periodicityChangeDetected(),
    this.brightnessVarianceChangeDetected(),
    this.solarPhaseAngleBrightnessChangeDetected(),
    this.changeConf(),
    this.collectionDensityConf(),
    this.periodicitySamplingConf(),
    this.periodicityDetectionConf(),
    this.collectionId(),
    this.bb!.createScalarList<string>(this.calibrations.bind(this), this.calibrationsLength()),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength()),
    this.transactionId(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.sourceDl(),
    this.dataMode()
  );
}


unpackTo(_o: SOIObservationSet_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.msgCreateDate = this.msgCreateDate();
  _o.idSensor = this.idSensor();
  _o.origSensorId = this.origSensorId();
  _o.sensorAsId = this.sensorAsId();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.senlat = this.senlat();
  _o.senlon = this.senlon();
  _o.senalt = this.senalt();
  _o.senx = this.senx();
  _o.seny = this.seny();
  _o.senz = this.senz();
  _o.senvelx = this.senvelx();
  _o.senvely = this.senvely();
  _o.senvelz = this.senvelz();
  _o.idElset = this.idElset();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.numObs = this.numObs();
  _o.type = this.type();
  _o.polarAngleStart = this.polarAngleStart();
  _o.polarAngleEnd = this.polarAngleEnd();
  _o.referenceFrame = this.referenceFrame();
  _o.senReferenceFrame = this.senReferenceFrame();
  _o.losDeclinationStart = this.losDeclinationStart();
  _o.losDeclinationEnd = this.losDeclinationEnd();
  _o.pointingAngleAzStart = this.pointingAngleAzStart();
  _o.pointingAngleAzEnd = this.pointingAngleAzEnd();
  _o.pointingAngleElStart = this.pointingAngleElStart();
  _o.pointingAngleElEnd = this.pointingAngleElEnd();
  _o.pixelArrayWidth = this.pixelArrayWidth();
  _o.pixelArrayHeight = this.pixelArrayHeight();
  _o.numSpectralFilters = this.numSpectralFilters();
  _o.spectralFilters = this.bb!.createScalarList<string>(this.spectralFilters.bind(this), this.spectralFiltersLength());
  _o.collectionMode = this.collectionMode();
  _o.gain = this.gain();
  _o.binningHoriz = this.binningHoriz();
  _o.binningVert = this.binningVert();
  _o.solarMag = this.solarMag();
  _o.pixelMin = this.pixelMin();
  _o.pixelMax = this.pixelMax();
  _o.softwareVersion = this.softwareVersion();
  _o.satelliteName = this.satelliteName();
  _o.starCatName = this.starCatName();
  _o.corrQuality = this.corrQuality();
  _o.uct = this.uct();
  _o.validCalibrations = this.validCalibrations();
  _o.calibrationType = this.calibrationType();
  _o.percentSatThreshold = this.percentSatThreshold();
  _o.changeDetected = this.changeDetected();
  _o.periodicityChangeDetected = this.periodicityChangeDetected();
  _o.brightnessVarianceChangeDetected = this.brightnessVarianceChangeDetected();
  _o.solarPhaseAngleBrightnessChangeDetected = this.solarPhaseAngleBrightnessChangeDetected();
  _o.changeConf = this.changeConf();
  _o.collectionDensityConf = this.collectionDensityConf();
  _o.periodicitySamplingConf = this.periodicitySamplingConf();
  _o.periodicityDetectionConf = this.periodicityDetectionConf();
  _o.collectionId = this.collectionId();
  _o.calibrations = this.bb!.createScalarList<string>(this.calibrations.bind(this), this.calibrationsLength());
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength());
  _o.transactionId = this.transactionId();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.sourceDl = this.sourceDl();
  _o.dataMode = this.dataMode();
}
}

export class SOIObservationSet_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public msgCreateDate: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public sensorAsId: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public senlat: number = 0.0,
  public senlon: number = 0.0,
  public senalt: number = 0.0,
  public senx: number = 0.0,
  public seny: number = 0.0,
  public senz: number = 0.0,
  public senvelx: number = 0.0,
  public senvely: number = 0.0,
  public senvelz: number = 0.0,
  public idElset: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public endTime: string|Uint8Array|null = null,
  public numObs: number = 0,
  public type: SOIObservationSet_Abridged_type_Enum = SOIObservationSet_Abridged_type_Enum.OPTICAL,
  public polarAngleStart: number = 0.0,
  public polarAngleEnd: number = 0.0,
  public referenceFrame: SOIObservationSet_Abridged_referenceFrame_Enum = SOIObservationSet_Abridged_referenceFrame_Enum.J2000,
  public senReferenceFrame: SOIObservationSet_Abridged_senReferenceFrame_Enum = SOIObservationSet_Abridged_senReferenceFrame_Enum.J2000,
  public losDeclinationStart: number = 0.0,
  public losDeclinationEnd: number = 0.0,
  public pointingAngleAzStart: number = 0.0,
  public pointingAngleAzEnd: number = 0.0,
  public pointingAngleElStart: number = 0.0,
  public pointingAngleElEnd: number = 0.0,
  public pixelArrayWidth: number = 0,
  public pixelArrayHeight: number = 0,
  public numSpectralFilters: number = 0,
  public spectralFilters: (string)[] = [],
  public collectionMode: string|Uint8Array|null = null,
  public gain: number = 0.0,
  public binningHoriz: number = 0,
  public binningVert: number = 0,
  public solarMag: number = 0.0,
  public pixelMin: number = 0,
  public pixelMax: number = 0,
  public softwareVersion: string|Uint8Array|null = null,
  public satelliteName: string|Uint8Array|null = null,
  public starCatName: string|Uint8Array|null = null,
  public corrQuality: number = 0.0,
  public uct: boolean = false,
  public validCalibrations: string|Uint8Array|null = null,
  public calibrationType: string|Uint8Array|null = null,
  public percentSatThreshold: number = 0.0,
  public changeDetected: boolean = false,
  public periodicityChangeDetected: boolean = false,
  public brightnessVarianceChangeDetected: boolean = false,
  public solarPhaseAngleBrightnessChangeDetected: boolean = false,
  public changeConf: string|Uint8Array|null = null,
  public collectionDensityConf: string|Uint8Array|null = null,
  public periodicitySamplingConf: string|Uint8Array|null = null,
  public periodicityDetectionConf: string|Uint8Array|null = null,
  public collectionId: string|Uint8Array|null = null,
  public calibrations: (string)[] = [],
  public tags: (string)[] = [],
  public transactionId: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public dataMode: SOIObservationSet_Abridged_dataMode_Enum = SOIObservationSet_Abridged_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const msgCreateDate = (this.msgCreateDate !== null ? builder.createString(this.msgCreateDate!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const sensorAsId = (this.sensorAsId !== null ? builder.createString(this.sensorAsId!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const idElset = (this.idElset !== null ? builder.createString(this.idElset!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const endTime = (this.endTime !== null ? builder.createString(this.endTime!) : 0);
  const spectralFilters = SOIObservationSet_Abridged.createSpectralFiltersVector(builder, builder.createObjectOffsetList(this.spectralFilters));
  const collectionMode = (this.collectionMode !== null ? builder.createString(this.collectionMode!) : 0);
  const softwareVersion = (this.softwareVersion !== null ? builder.createString(this.softwareVersion!) : 0);
  const satelliteName = (this.satelliteName !== null ? builder.createString(this.satelliteName!) : 0);
  const starCatName = (this.starCatName !== null ? builder.createString(this.starCatName!) : 0);
  const validCalibrations = (this.validCalibrations !== null ? builder.createString(this.validCalibrations!) : 0);
  const calibrationType = (this.calibrationType !== null ? builder.createString(this.calibrationType!) : 0);
  const changeConf = (this.changeConf !== null ? builder.createString(this.changeConf!) : 0);
  const collectionDensityConf = (this.collectionDensityConf !== null ? builder.createString(this.collectionDensityConf!) : 0);
  const periodicitySamplingConf = (this.periodicitySamplingConf !== null ? builder.createString(this.periodicitySamplingConf!) : 0);
  const periodicityDetectionConf = (this.periodicityDetectionConf !== null ? builder.createString(this.periodicityDetectionConf!) : 0);
  const collectionId = (this.collectionId !== null ? builder.createString(this.collectionId!) : 0);
  const calibrations = SOIObservationSet_Abridged.createCalibrationsVector(builder, builder.createObjectOffsetList(this.calibrations));
  const tags = SOIObservationSet_Abridged.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);

  return SOIObservationSet_Abridged.createSOIObservationSet_Abridged(builder,
    id,
    classificationMarking,
    msgCreateDate,
    idSensor,
    origSensorId,
    sensorAsId,
    idOnOrbit,
    this.satNo,
    origObjectId,
    this.senlat,
    this.senlon,
    this.senalt,
    this.senx,
    this.seny,
    this.senz,
    this.senvelx,
    this.senvely,
    this.senvelz,
    idElset,
    startTime,
    endTime,
    this.numObs,
    this.type,
    this.polarAngleStart,
    this.polarAngleEnd,
    this.referenceFrame,
    this.senReferenceFrame,
    this.losDeclinationStart,
    this.losDeclinationEnd,
    this.pointingAngleAzStart,
    this.pointingAngleAzEnd,
    this.pointingAngleElStart,
    this.pointingAngleElEnd,
    this.pixelArrayWidth,
    this.pixelArrayHeight,
    this.numSpectralFilters,
    spectralFilters,
    collectionMode,
    this.gain,
    this.binningHoriz,
    this.binningVert,
    this.solarMag,
    this.pixelMin,
    this.pixelMax,
    softwareVersion,
    satelliteName,
    starCatName,
    this.corrQuality,
    this.uct,
    validCalibrations,
    calibrationType,
    this.percentSatThreshold,
    this.changeDetected,
    this.periodicityChangeDetected,
    this.brightnessVarianceChangeDetected,
    this.solarPhaseAngleBrightnessChangeDetected,
    changeConf,
    collectionDensityConf,
    periodicitySamplingConf,
    periodicityDetectionConf,
    collectionId,
    calibrations,
    tags,
    transactionId,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    sourceDl,
    this.dataMode
  );
}
}
