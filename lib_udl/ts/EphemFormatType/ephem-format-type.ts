// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// No description available.
 */
export class EphemFormatType implements flatbuffers.IUnpackableObject<EphemFormatTypeT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EphemFormatType {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEphemFormatType(bb:flatbuffers.ByteBuffer, obj?:EphemFormatType):EphemFormatType {
  return (obj || new EphemFormatType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEphemFormatType(bb:flatbuffers.ByteBuffer, obj?:EphemFormatType):EphemFormatType {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EphemFormatType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EPHE');
}

static startEphemFormatType(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endEphemFormatType(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEphemFormatTypeBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EPHE');
}

static finishSizePrefixedEphemFormatTypeBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EPHE', true);
}

static createEphemFormatType(builder:flatbuffers.Builder):flatbuffers.Offset {
  EphemFormatType.startEphemFormatType(builder);
  return EphemFormatType.endEphemFormatType(builder);
}

unpack(): EphemFormatTypeT {
  return new EphemFormatTypeT();
}


unpackTo(_o: EphemFormatTypeT): void {}
}

export class EphemFormatTypeT implements flatbuffers.IGeneratedObject {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return EphemFormatType.createEphemFormatType(builder);
}
}
