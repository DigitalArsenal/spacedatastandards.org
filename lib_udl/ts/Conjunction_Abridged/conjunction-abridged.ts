// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Conjunction_Abridged_dataMode_Enum } from './conjunction-abridged-data-mode-enum.js';


/**
 * /// Stores the results of a particular Conjunction Assessment (CA) run.
 */
export class Conjunction_Abridged implements flatbuffers.IUnpackableObject<Conjunction_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Conjunction_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConjunction_Abridged(bb:flatbuffers.ByteBuffer, obj?:Conjunction_Abridged):Conjunction_Abridged {
  return (obj || new Conjunction_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConjunction_Abridged(bb:flatbuffers.ByteBuffer, obj?:Conjunction_Abridged):Conjunction_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Conjunction_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('CONJ');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: CONJUNCTION-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the primary satellite on-orbit object, if correlated.
 * Example: /// Example: ONORBIT1-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit1():string|null
idOnOrbit1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the secondary satellite on-orbit object, if correlated.
 * Example: /// Example: ONORBIT2-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit2():string|null
idOnOrbit2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of data represented in this conjunction record (e.g. CONJUNCTION, CARA-WORKLIST, etc.).  If type is null the record is assumed to be a Conjunction.
 * Example: /// Example: CONJUNCTION
 * Constraints: Minimum length = 0, Maximum length = 24
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of closest approach (TCA) in UTC.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
tca():string|null
tca(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tca(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Distance between objects at Time of Closest Approach (TCA) in meters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
missDistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that Object1 and Object2 will collide.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
collisionProb():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The method that was used to calculate the collision probability, ex. FOSTER-1992.
 * Example: /// Example: FOSTER-1992
 * Constraints: Minimum length = 0, Maximum length = 32
 */
collisionProbMethod():string|null
collisionProbMethod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collisionProbMethod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The filename of the primary (object1) ephemeris used in the screening, if applicable.
 * Example: /// Example: MEME_SPCFT_ABC_2180000_ops_nomnvr_unclassified.oem
 * Constraints: Minimum length = 0, Maximum length = 64
 */
ephemName1():string|null
ephemName1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ephemName1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris used in the screening, if applicable.
 * Example: /// Example: a2ae2356-6d83-4e4b-896d-ddd1958800fa
 * Constraints: Minimum length = 0, Maximum length = 36
 */
esId1():string|null
esId1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
esId1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The filename of the secondary (object2) ephemeris used in the screening, if applicable.
 * Example: /// Example: MEME_SPCFT_DEF_2170000_ops_nomnvr_unclassified.txt
 * Constraints: Minimum length = 0, Maximum length = 64
 */
ephemName2():string|null
ephemName2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ephemName2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent Ephemeris Set of the secondary (object2) ephemeris used in the screening, if applicable.
 * Example: /// Example: 6fa31433-8beb-4b9b-8bf9-326dbd041c3f
 * Constraints: Minimum length = 0, Maximum length = 36
 */
esId2():string|null
esId2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
esId2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Distance between objects along Radial Vector at Time of Closest Approach in meters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
relPosR():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Distance between objects along Tangential Vector in meters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
relPosT():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Distance between objects along Normal vector in meters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
relPosN():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Closing velocity magnitude (relative speed) at Time of Closest Approach in meters/sec.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
relVelMag():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Closing velocity between objects along Radial Vector at Time of Closest Approach in meters/sec.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
relVelR():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Closing velocity between objects along Tangential Vector in meters/sec.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
relVelT():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Closing velocity between objects along Normal Vector in meters/sec.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
relVelN():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The start time in UTC of the screening period for the conjunction assessment.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
screenEntryTime():string|null
screenEntryTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
screenEntryTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The stop time in UTC of the screening period for the conjunction assessment.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
screenExitTime():string|null
screenExitTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
screenExitTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Component size of screen in X component of  RTN (Radial, Transverse and Normal) frame in meters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
screenVolumeX():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Component size of screen in Y component of  RTN (Radial, Transverse and Normal) frame in meters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
screenVolumeY():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Component size of screen in Z component of  RTN (Radial, Transverse and Normal) frame in meters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
screenVolumeZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The shape (BOX, ELLIPSOID) of the screening volume.
 * Example: /// Example: ELLIPSOID
 * Constraints: Minimum length = 0, Maximum length = 12
 */
volShape():string|null
volShape(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
volShape(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time at which the secondary (object2) enters the screening volume, in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-01-01T01:02:01.123456Z
 * Constraints: No constraints specified.
 */
volEntryTime():string|null
volEntryTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
volEntryTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time at which the secondary (object2) exits the screening volume, in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-01-01T01:02:28.123456Z
 * Constraints: No constraints specified.
 */
volExitTime():string|null
volExitTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
volExitTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Penetration Level Sigma.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
penetrationLevelSigma():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional ID of the UDL State Vector at TCA of the primary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector1.
 * Example: /// Example: REF-STATEVECTOR1-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idStateVector1():string|null
idStateVector1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idStateVector1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of last positive metric observation of the primary satellite.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
lastObTime1():string|null
lastObTime1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastObTime1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The value of the primary (object1) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
 * Example: /// Example: 0.016386
 * Constraints: No constraints specified.
 */
cdAoM1():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The value of the primary (object1) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
 * Example: /// Example: 0.013814
 * Constraints: No constraints specified.
 */
crAoM1():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
 * Example: /// Example: 0.033814
 * Constraints: No constraints specified.
 */
thrustAccel1():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional ID of the UDL State Vector at TCA of the secondary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector2.
 * Example: /// Example: REF-STATEVECTOR2-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idStateVector2():string|null
idStateVector2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idStateVector2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of last positive metric observation of the secondary satellite.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
lastObTime2():string|null
lastObTime2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastObTime2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The value of the secondary (object2) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
 * Example: /// Example: 0.016386
 * Constraints: No constraints specified.
 */
cdAoM2():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The value of the secondary (object2) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
 * Example: /// Example: 0.013814
 * Constraints: No constraints specified.
 */
crAoM2():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
 * Example: /// Example: 0.033814
 * Constraints: No constraints specified.
 */
thrustAccel2():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Additional notes from data providers.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
comments():string|null
comments(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
comments(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Commander's critical information requirements notes.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 128
 */
ccir():string|null
ccir(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ccir(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Emergency comments.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 256
 */
concernNotes():string|null
concernNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
concernNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating if State department was notified.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
stateDeptNotified():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating if owner was contacted.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
ownerContacted():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Link to filename associated with JMS record.
 * Example: /// Example: Example link
 * Constraints: Minimum length = 0, Maximum length = 64
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft name(s) for which the Collision message is provided.
 * Example: /// Example: Message for space craft A
 * Constraints: Minimum length = 0, Maximum length = 64
 */
messageFor():string|null
messageFor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
messageFor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * JMS provided message ID link.
 * Example: /// Example: MESSAGE-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
messageId():string|null
messageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
messageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
uvwWarn():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
smallRelVelWarning():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
largeRelPosWarning():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
smallCovWarning():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
largeCovWarning():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: TRANSACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Creating agency or owner/operator (may be different than provider who submitted the conjunction message).
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
originator():string|null
originator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional source-provided identifier for this conjunction event. In the case where multiple conjunction records are submitted for the same event, this field can be used to tie them together to the same event.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
eventId():string|null
eventId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional source-provided and searchable metadata or descriptor of the data.
 * Example: /// Example: sample_descriptor here
 * Constraints: Minimum length = 0, Maximum length = 64
 */
descriptor():string|null
descriptor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
descriptor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Conjunction_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Conjunction_Abridged_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
stateVector1():string|null
stateVector1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stateVector1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
stateVector2():string|null
stateVector2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stateVector2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the target on-orbit primary object.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
satNo1():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Satellite/catalog number of the target on-orbit secondary object.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
satNo2():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional place holder for an OnOrbit ID that does not exist in UDL.
 * Example: /// Example: ORIGONORBIT1-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origIdOnOrbit1():string|null
origIdOnOrbit1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origIdOnOrbit1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional place holder for an OnOrbit ID that does not exist in UDL.
 * Example: /// Example: ORIGONORBIT2-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origIdOnOrbit2():string|null
origIdOnOrbit2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origIdOnOrbit2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startConjunction_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(68);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdOnOrbit1(builder:flatbuffers.Builder, idOnOrbit1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOnOrbit1Offset, 0);
}

static addIdOnOrbit2(builder:flatbuffers.Builder, idOnOrbit2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idOnOrbit2Offset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, typeOffset, 0);
}

static addTca(builder:flatbuffers.Builder, tcaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, tcaOffset, 0);
}

static addMissDistance(builder:flatbuffers.Builder, missDistance:number) {
  builder.addFieldFloat64(6, missDistance, 0.0);
}

static addCollisionProb(builder:flatbuffers.Builder, collisionProb:number) {
  builder.addFieldFloat64(7, collisionProb, 0.0);
}

static addCollisionProbMethod(builder:flatbuffers.Builder, collisionProbMethodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, collisionProbMethodOffset, 0);
}

static addEphemName1(builder:flatbuffers.Builder, ephemName1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(9, ephemName1Offset, 0);
}

static addEsId1(builder:flatbuffers.Builder, esId1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(10, esId1Offset, 0);
}

static addEphemName2(builder:flatbuffers.Builder, ephemName2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(11, ephemName2Offset, 0);
}

static addEsId2(builder:flatbuffers.Builder, esId2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(12, esId2Offset, 0);
}

static addRelPosR(builder:flatbuffers.Builder, relPosR:number) {
  builder.addFieldFloat64(13, relPosR, 0.0);
}

static addRelPosT(builder:flatbuffers.Builder, relPosT:number) {
  builder.addFieldFloat64(14, relPosT, 0.0);
}

static addRelPosN(builder:flatbuffers.Builder, relPosN:number) {
  builder.addFieldFloat64(15, relPosN, 0.0);
}

static addRelVelMag(builder:flatbuffers.Builder, relVelMag:number) {
  builder.addFieldFloat64(16, relVelMag, 0.0);
}

static addRelVelR(builder:flatbuffers.Builder, relVelR:number) {
  builder.addFieldFloat64(17, relVelR, 0.0);
}

static addRelVelT(builder:flatbuffers.Builder, relVelT:number) {
  builder.addFieldFloat64(18, relVelT, 0.0);
}

static addRelVelN(builder:flatbuffers.Builder, relVelN:number) {
  builder.addFieldFloat64(19, relVelN, 0.0);
}

static addScreenEntryTime(builder:flatbuffers.Builder, screenEntryTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, screenEntryTimeOffset, 0);
}

static addScreenExitTime(builder:flatbuffers.Builder, screenExitTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, screenExitTimeOffset, 0);
}

static addScreenVolumeX(builder:flatbuffers.Builder, screenVolumeX:number) {
  builder.addFieldFloat64(22, screenVolumeX, 0.0);
}

static addScreenVolumeY(builder:flatbuffers.Builder, screenVolumeY:number) {
  builder.addFieldFloat64(23, screenVolumeY, 0.0);
}

static addScreenVolumeZ(builder:flatbuffers.Builder, screenVolumeZ:number) {
  builder.addFieldFloat64(24, screenVolumeZ, 0.0);
}

static addVolShape(builder:flatbuffers.Builder, volShapeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, volShapeOffset, 0);
}

static addVolEntryTime(builder:flatbuffers.Builder, volEntryTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, volEntryTimeOffset, 0);
}

static addVolExitTime(builder:flatbuffers.Builder, volExitTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, volExitTimeOffset, 0);
}

static addPenetrationLevelSigma(builder:flatbuffers.Builder, penetrationLevelSigma:number) {
  builder.addFieldFloat64(28, penetrationLevelSigma, 0.0);
}

static addIdStateVector1(builder:flatbuffers.Builder, idStateVector1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(29, idStateVector1Offset, 0);
}

static addLastObTime1(builder:flatbuffers.Builder, lastObTime1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(30, lastObTime1Offset, 0);
}

static addCdAoM1(builder:flatbuffers.Builder, cdAoM1:number) {
  builder.addFieldFloat64(31, cdAoM1, 0.0);
}

static addCrAoM1(builder:flatbuffers.Builder, crAoM1:number) {
  builder.addFieldFloat64(32, crAoM1, 0.0);
}

static addThrustAccel1(builder:flatbuffers.Builder, thrustAccel1:number) {
  builder.addFieldFloat64(33, thrustAccel1, 0.0);
}

static addIdStateVector2(builder:flatbuffers.Builder, idStateVector2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(34, idStateVector2Offset, 0);
}

static addLastObTime2(builder:flatbuffers.Builder, lastObTime2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(35, lastObTime2Offset, 0);
}

static addCdAoM2(builder:flatbuffers.Builder, cdAoM2:number) {
  builder.addFieldFloat64(36, cdAoM2, 0.0);
}

static addCrAoM2(builder:flatbuffers.Builder, crAoM2:number) {
  builder.addFieldFloat64(37, crAoM2, 0.0);
}

static addThrustAccel2(builder:flatbuffers.Builder, thrustAccel2:number) {
  builder.addFieldFloat64(38, thrustAccel2, 0.0);
}

static addComments(builder:flatbuffers.Builder, commentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, commentsOffset, 0);
}

static addCcir(builder:flatbuffers.Builder, ccirOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, ccirOffset, 0);
}

static addConcernNotes(builder:flatbuffers.Builder, concernNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, concernNotesOffset, 0);
}

static addStateDeptNotified(builder:flatbuffers.Builder, stateDeptNotified:boolean) {
  builder.addFieldInt8(42, +stateDeptNotified, +false);
}

static addOwnerContacted(builder:flatbuffers.Builder, ownerContacted:boolean) {
  builder.addFieldInt8(43, +ownerContacted, +false);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, rawFileUriOffset, 0);
}

static addMessageFor(builder:flatbuffers.Builder, messageForOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, messageForOffset, 0);
}

static addMessageId(builder:flatbuffers.Builder, messageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, messageIdOffset, 0);
}

static addUvwWarn(builder:flatbuffers.Builder, uvwWarn:boolean) {
  builder.addFieldInt8(47, +uvwWarn, +false);
}

static addSmallRelVelWarning(builder:flatbuffers.Builder, smallRelVelWarning:boolean) {
  builder.addFieldInt8(48, +smallRelVelWarning, +false);
}

static addLargeRelPosWarning(builder:flatbuffers.Builder, largeRelPosWarning:boolean) {
  builder.addFieldInt8(49, +largeRelPosWarning, +false);
}

static addSmallCovWarning(builder:flatbuffers.Builder, smallCovWarning:boolean) {
  builder.addFieldInt8(50, +smallCovWarning, +false);
}

static addLargeCovWarning(builder:flatbuffers.Builder, largeCovWarning:boolean) {
  builder.addFieldInt8(51, +largeCovWarning, +false);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, transactionIdOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, originOffset, 0);
}

static addOriginator(builder:flatbuffers.Builder, originatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, originatorOffset, 0);
}

static addEventId(builder:flatbuffers.Builder, eventIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, eventIdOffset, 0);
}

static addDescriptor(builder:flatbuffers.Builder, descriptorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, descriptorOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Conjunction_Abridged_dataMode_Enum) {
  builder.addFieldInt8(58, dataMode, Conjunction_Abridged_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, createdByOffset, 0);
}

static addStateVector1(builder:flatbuffers.Builder, stateVector1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(61, stateVector1Offset, 0);
}

static addStateVector2(builder:flatbuffers.Builder, stateVector2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(62, stateVector2Offset, 0);
}

static addSatNo1(builder:flatbuffers.Builder, satNo1:number) {
  builder.addFieldInt32(63, satNo1, 0);
}

static addSatNo2(builder:flatbuffers.Builder, satNo2:number) {
  builder.addFieldInt32(64, satNo2, 0);
}

static addOrigIdOnOrbit1(builder:flatbuffers.Builder, origIdOnOrbit1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(65, origIdOnOrbit1Offset, 0);
}

static addOrigIdOnOrbit2(builder:flatbuffers.Builder, origIdOnOrbit2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(66, origIdOnOrbit2Offset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, origNetworkOffset, 0);
}

static endConjunction_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishConjunction_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CONJ');
}

static finishSizePrefixedConjunction_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CONJ', true);
}

static createConjunction_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idOnOrbit1Offset:flatbuffers.Offset, idOnOrbit2Offset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, tcaOffset:flatbuffers.Offset, missDistance:number, collisionProb:number, collisionProbMethodOffset:flatbuffers.Offset, ephemName1Offset:flatbuffers.Offset, esId1Offset:flatbuffers.Offset, ephemName2Offset:flatbuffers.Offset, esId2Offset:flatbuffers.Offset, relPosR:number, relPosT:number, relPosN:number, relVelMag:number, relVelR:number, relVelT:number, relVelN:number, screenEntryTimeOffset:flatbuffers.Offset, screenExitTimeOffset:flatbuffers.Offset, screenVolumeX:number, screenVolumeY:number, screenVolumeZ:number, volShapeOffset:flatbuffers.Offset, volEntryTimeOffset:flatbuffers.Offset, volExitTimeOffset:flatbuffers.Offset, penetrationLevelSigma:number, idStateVector1Offset:flatbuffers.Offset, lastObTime1Offset:flatbuffers.Offset, cdAoM1:number, crAoM1:number, thrustAccel1:number, idStateVector2Offset:flatbuffers.Offset, lastObTime2Offset:flatbuffers.Offset, cdAoM2:number, crAoM2:number, thrustAccel2:number, commentsOffset:flatbuffers.Offset, ccirOffset:flatbuffers.Offset, concernNotesOffset:flatbuffers.Offset, stateDeptNotified:boolean, ownerContacted:boolean, rawFileUriOffset:flatbuffers.Offset, messageForOffset:flatbuffers.Offset, messageIdOffset:flatbuffers.Offset, uvwWarn:boolean, smallRelVelWarning:boolean, largeRelPosWarning:boolean, smallCovWarning:boolean, largeCovWarning:boolean, transactionIdOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, originatorOffset:flatbuffers.Offset, eventIdOffset:flatbuffers.Offset, descriptorOffset:flatbuffers.Offset, dataMode:Conjunction_Abridged_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, stateVector1Offset:flatbuffers.Offset, stateVector2Offset:flatbuffers.Offset, satNo1:number, satNo2:number, origIdOnOrbit1Offset:flatbuffers.Offset, origIdOnOrbit2Offset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  Conjunction_Abridged.startConjunction_Abridged(builder);
  Conjunction_Abridged.addId(builder, idOffset);
  Conjunction_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  Conjunction_Abridged.addIdOnOrbit1(builder, idOnOrbit1Offset);
  Conjunction_Abridged.addIdOnOrbit2(builder, idOnOrbit2Offset);
  Conjunction_Abridged.addType(builder, typeOffset);
  Conjunction_Abridged.addTca(builder, tcaOffset);
  Conjunction_Abridged.addMissDistance(builder, missDistance);
  Conjunction_Abridged.addCollisionProb(builder, collisionProb);
  Conjunction_Abridged.addCollisionProbMethod(builder, collisionProbMethodOffset);
  Conjunction_Abridged.addEphemName1(builder, ephemName1Offset);
  Conjunction_Abridged.addEsId1(builder, esId1Offset);
  Conjunction_Abridged.addEphemName2(builder, ephemName2Offset);
  Conjunction_Abridged.addEsId2(builder, esId2Offset);
  Conjunction_Abridged.addRelPosR(builder, relPosR);
  Conjunction_Abridged.addRelPosT(builder, relPosT);
  Conjunction_Abridged.addRelPosN(builder, relPosN);
  Conjunction_Abridged.addRelVelMag(builder, relVelMag);
  Conjunction_Abridged.addRelVelR(builder, relVelR);
  Conjunction_Abridged.addRelVelT(builder, relVelT);
  Conjunction_Abridged.addRelVelN(builder, relVelN);
  Conjunction_Abridged.addScreenEntryTime(builder, screenEntryTimeOffset);
  Conjunction_Abridged.addScreenExitTime(builder, screenExitTimeOffset);
  Conjunction_Abridged.addScreenVolumeX(builder, screenVolumeX);
  Conjunction_Abridged.addScreenVolumeY(builder, screenVolumeY);
  Conjunction_Abridged.addScreenVolumeZ(builder, screenVolumeZ);
  Conjunction_Abridged.addVolShape(builder, volShapeOffset);
  Conjunction_Abridged.addVolEntryTime(builder, volEntryTimeOffset);
  Conjunction_Abridged.addVolExitTime(builder, volExitTimeOffset);
  Conjunction_Abridged.addPenetrationLevelSigma(builder, penetrationLevelSigma);
  Conjunction_Abridged.addIdStateVector1(builder, idStateVector1Offset);
  Conjunction_Abridged.addLastObTime1(builder, lastObTime1Offset);
  Conjunction_Abridged.addCdAoM1(builder, cdAoM1);
  Conjunction_Abridged.addCrAoM1(builder, crAoM1);
  Conjunction_Abridged.addThrustAccel1(builder, thrustAccel1);
  Conjunction_Abridged.addIdStateVector2(builder, idStateVector2Offset);
  Conjunction_Abridged.addLastObTime2(builder, lastObTime2Offset);
  Conjunction_Abridged.addCdAoM2(builder, cdAoM2);
  Conjunction_Abridged.addCrAoM2(builder, crAoM2);
  Conjunction_Abridged.addThrustAccel2(builder, thrustAccel2);
  Conjunction_Abridged.addComments(builder, commentsOffset);
  Conjunction_Abridged.addCcir(builder, ccirOffset);
  Conjunction_Abridged.addConcernNotes(builder, concernNotesOffset);
  Conjunction_Abridged.addStateDeptNotified(builder, stateDeptNotified);
  Conjunction_Abridged.addOwnerContacted(builder, ownerContacted);
  Conjunction_Abridged.addRawFileUri(builder, rawFileUriOffset);
  Conjunction_Abridged.addMessageFor(builder, messageForOffset);
  Conjunction_Abridged.addMessageId(builder, messageIdOffset);
  Conjunction_Abridged.addUvwWarn(builder, uvwWarn);
  Conjunction_Abridged.addSmallRelVelWarning(builder, smallRelVelWarning);
  Conjunction_Abridged.addLargeRelPosWarning(builder, largeRelPosWarning);
  Conjunction_Abridged.addSmallCovWarning(builder, smallCovWarning);
  Conjunction_Abridged.addLargeCovWarning(builder, largeCovWarning);
  Conjunction_Abridged.addTransactionId(builder, transactionIdOffset);
  Conjunction_Abridged.addSource(builder, sourceOffset);
  Conjunction_Abridged.addOrigin(builder, originOffset);
  Conjunction_Abridged.addOriginator(builder, originatorOffset);
  Conjunction_Abridged.addEventId(builder, eventIdOffset);
  Conjunction_Abridged.addDescriptor(builder, descriptorOffset);
  Conjunction_Abridged.addDataMode(builder, dataMode);
  Conjunction_Abridged.addCreatedAt(builder, createdAtOffset);
  Conjunction_Abridged.addCreatedBy(builder, createdByOffset);
  Conjunction_Abridged.addStateVector1(builder, stateVector1Offset);
  Conjunction_Abridged.addStateVector2(builder, stateVector2Offset);
  Conjunction_Abridged.addSatNo1(builder, satNo1);
  Conjunction_Abridged.addSatNo2(builder, satNo2);
  Conjunction_Abridged.addOrigIdOnOrbit1(builder, origIdOnOrbit1Offset);
  Conjunction_Abridged.addOrigIdOnOrbit2(builder, origIdOnOrbit2Offset);
  Conjunction_Abridged.addOrigNetwork(builder, origNetworkOffset);
  return Conjunction_Abridged.endConjunction_Abridged(builder);
}

unpack(): Conjunction_AbridgedT {
  return new Conjunction_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.idOnOrbit1(),
    this.idOnOrbit2(),
    this.type(),
    this.tca(),
    this.missDistance(),
    this.collisionProb(),
    this.collisionProbMethod(),
    this.ephemName1(),
    this.esId1(),
    this.ephemName2(),
    this.esId2(),
    this.relPosR(),
    this.relPosT(),
    this.relPosN(),
    this.relVelMag(),
    this.relVelR(),
    this.relVelT(),
    this.relVelN(),
    this.screenEntryTime(),
    this.screenExitTime(),
    this.screenVolumeX(),
    this.screenVolumeY(),
    this.screenVolumeZ(),
    this.volShape(),
    this.volEntryTime(),
    this.volExitTime(),
    this.penetrationLevelSigma(),
    this.idStateVector1(),
    this.lastObTime1(),
    this.cdAoM1(),
    this.crAoM1(),
    this.thrustAccel1(),
    this.idStateVector2(),
    this.lastObTime2(),
    this.cdAoM2(),
    this.crAoM2(),
    this.thrustAccel2(),
    this.comments(),
    this.ccir(),
    this.concernNotes(),
    this.stateDeptNotified(),
    this.ownerContacted(),
    this.rawFileUri(),
    this.messageFor(),
    this.messageId(),
    this.uvwWarn(),
    this.smallRelVelWarning(),
    this.largeRelPosWarning(),
    this.smallCovWarning(),
    this.largeCovWarning(),
    this.transactionId(),
    this.source(),
    this.origin(),
    this.originator(),
    this.eventId(),
    this.descriptor(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.stateVector1(),
    this.stateVector2(),
    this.satNo1(),
    this.satNo2(),
    this.origIdOnOrbit1(),
    this.origIdOnOrbit2(),
    this.origNetwork()
  );
}


unpackTo(_o: Conjunction_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idOnOrbit1 = this.idOnOrbit1();
  _o.idOnOrbit2 = this.idOnOrbit2();
  _o.type = this.type();
  _o.tca = this.tca();
  _o.missDistance = this.missDistance();
  _o.collisionProb = this.collisionProb();
  _o.collisionProbMethod = this.collisionProbMethod();
  _o.ephemName1 = this.ephemName1();
  _o.esId1 = this.esId1();
  _o.ephemName2 = this.ephemName2();
  _o.esId2 = this.esId2();
  _o.relPosR = this.relPosR();
  _o.relPosT = this.relPosT();
  _o.relPosN = this.relPosN();
  _o.relVelMag = this.relVelMag();
  _o.relVelR = this.relVelR();
  _o.relVelT = this.relVelT();
  _o.relVelN = this.relVelN();
  _o.screenEntryTime = this.screenEntryTime();
  _o.screenExitTime = this.screenExitTime();
  _o.screenVolumeX = this.screenVolumeX();
  _o.screenVolumeY = this.screenVolumeY();
  _o.screenVolumeZ = this.screenVolumeZ();
  _o.volShape = this.volShape();
  _o.volEntryTime = this.volEntryTime();
  _o.volExitTime = this.volExitTime();
  _o.penetrationLevelSigma = this.penetrationLevelSigma();
  _o.idStateVector1 = this.idStateVector1();
  _o.lastObTime1 = this.lastObTime1();
  _o.cdAoM1 = this.cdAoM1();
  _o.crAoM1 = this.crAoM1();
  _o.thrustAccel1 = this.thrustAccel1();
  _o.idStateVector2 = this.idStateVector2();
  _o.lastObTime2 = this.lastObTime2();
  _o.cdAoM2 = this.cdAoM2();
  _o.crAoM2 = this.crAoM2();
  _o.thrustAccel2 = this.thrustAccel2();
  _o.comments = this.comments();
  _o.ccir = this.ccir();
  _o.concernNotes = this.concernNotes();
  _o.stateDeptNotified = this.stateDeptNotified();
  _o.ownerContacted = this.ownerContacted();
  _o.rawFileURI = this.rawFileUri();
  _o.messageFor = this.messageFor();
  _o.messageId = this.messageId();
  _o.uvwWarn = this.uvwWarn();
  _o.smallRelVelWarning = this.smallRelVelWarning();
  _o.largeRelPosWarning = this.largeRelPosWarning();
  _o.smallCovWarning = this.smallCovWarning();
  _o.largeCovWarning = this.largeCovWarning();
  _o.transactionId = this.transactionId();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.originator = this.originator();
  _o.eventId = this.eventId();
  _o.descriptor = this.descriptor();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.stateVector1 = this.stateVector1();
  _o.stateVector2 = this.stateVector2();
  _o.satNo1 = this.satNo1();
  _o.satNo2 = this.satNo2();
  _o.origIdOnOrbit1 = this.origIdOnOrbit1();
  _o.origIdOnOrbit2 = this.origIdOnOrbit2();
  _o.origNetwork = this.origNetwork();
}
}

export class Conjunction_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idOnOrbit1: string|Uint8Array|null = null,
  public idOnOrbit2: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public tca: string|Uint8Array|null = null,
  public missDistance: number = 0.0,
  public collisionProb: number = 0.0,
  public collisionProbMethod: string|Uint8Array|null = null,
  public ephemName1: string|Uint8Array|null = null,
  public esId1: string|Uint8Array|null = null,
  public ephemName2: string|Uint8Array|null = null,
  public esId2: string|Uint8Array|null = null,
  public relPosR: number = 0.0,
  public relPosT: number = 0.0,
  public relPosN: number = 0.0,
  public relVelMag: number = 0.0,
  public relVelR: number = 0.0,
  public relVelT: number = 0.0,
  public relVelN: number = 0.0,
  public screenEntryTime: string|Uint8Array|null = null,
  public screenExitTime: string|Uint8Array|null = null,
  public screenVolumeX: number = 0.0,
  public screenVolumeY: number = 0.0,
  public screenVolumeZ: number = 0.0,
  public volShape: string|Uint8Array|null = null,
  public volEntryTime: string|Uint8Array|null = null,
  public volExitTime: string|Uint8Array|null = null,
  public penetrationLevelSigma: number = 0.0,
  public idStateVector1: string|Uint8Array|null = null,
  public lastObTime1: string|Uint8Array|null = null,
  public cdAoM1: number = 0.0,
  public crAoM1: number = 0.0,
  public thrustAccel1: number = 0.0,
  public idStateVector2: string|Uint8Array|null = null,
  public lastObTime2: string|Uint8Array|null = null,
  public cdAoM2: number = 0.0,
  public crAoM2: number = 0.0,
  public thrustAccel2: number = 0.0,
  public comments: string|Uint8Array|null = null,
  public ccir: string|Uint8Array|null = null,
  public concernNotes: string|Uint8Array|null = null,
  public stateDeptNotified: boolean = false,
  public ownerContacted: boolean = false,
  public rawFileURI: string|Uint8Array|null = null,
  public messageFor: string|Uint8Array|null = null,
  public messageId: string|Uint8Array|null = null,
  public uvwWarn: boolean = false,
  public smallRelVelWarning: boolean = false,
  public largeRelPosWarning: boolean = false,
  public smallCovWarning: boolean = false,
  public largeCovWarning: boolean = false,
  public transactionId: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public originator: string|Uint8Array|null = null,
  public eventId: string|Uint8Array|null = null,
  public descriptor: string|Uint8Array|null = null,
  public dataMode: Conjunction_Abridged_dataMode_Enum = Conjunction_Abridged_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public stateVector1: string|Uint8Array|null = null,
  public stateVector2: string|Uint8Array|null = null,
  public satNo1: number = 0,
  public satNo2: number = 0,
  public origIdOnOrbit1: string|Uint8Array|null = null,
  public origIdOnOrbit2: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idOnOrbit1 = (this.idOnOrbit1 !== null ? builder.createString(this.idOnOrbit1!) : 0);
  const idOnOrbit2 = (this.idOnOrbit2 !== null ? builder.createString(this.idOnOrbit2!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const tca = (this.tca !== null ? builder.createString(this.tca!) : 0);
  const collisionProbMethod = (this.collisionProbMethod !== null ? builder.createString(this.collisionProbMethod!) : 0);
  const ephemName1 = (this.ephemName1 !== null ? builder.createString(this.ephemName1!) : 0);
  const esId1 = (this.esId1 !== null ? builder.createString(this.esId1!) : 0);
  const ephemName2 = (this.ephemName2 !== null ? builder.createString(this.ephemName2!) : 0);
  const esId2 = (this.esId2 !== null ? builder.createString(this.esId2!) : 0);
  const screenEntryTime = (this.screenEntryTime !== null ? builder.createString(this.screenEntryTime!) : 0);
  const screenExitTime = (this.screenExitTime !== null ? builder.createString(this.screenExitTime!) : 0);
  const volShape = (this.volShape !== null ? builder.createString(this.volShape!) : 0);
  const volEntryTime = (this.volEntryTime !== null ? builder.createString(this.volEntryTime!) : 0);
  const volExitTime = (this.volExitTime !== null ? builder.createString(this.volExitTime!) : 0);
  const idStateVector1 = (this.idStateVector1 !== null ? builder.createString(this.idStateVector1!) : 0);
  const lastObTime1 = (this.lastObTime1 !== null ? builder.createString(this.lastObTime1!) : 0);
  const idStateVector2 = (this.idStateVector2 !== null ? builder.createString(this.idStateVector2!) : 0);
  const lastObTime2 = (this.lastObTime2 !== null ? builder.createString(this.lastObTime2!) : 0);
  const comments = (this.comments !== null ? builder.createString(this.comments!) : 0);
  const ccir = (this.ccir !== null ? builder.createString(this.ccir!) : 0);
  const concernNotes = (this.concernNotes !== null ? builder.createString(this.concernNotes!) : 0);
  const rawFileURI = (this.rawFileURI !== null ? builder.createString(this.rawFileURI!) : 0);
  const messageFor = (this.messageFor !== null ? builder.createString(this.messageFor!) : 0);
  const messageId = (this.messageId !== null ? builder.createString(this.messageId!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const originator = (this.originator !== null ? builder.createString(this.originator!) : 0);
  const eventId = (this.eventId !== null ? builder.createString(this.eventId!) : 0);
  const descriptor = (this.descriptor !== null ? builder.createString(this.descriptor!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const stateVector1 = (this.stateVector1 !== null ? builder.createString(this.stateVector1!) : 0);
  const stateVector2 = (this.stateVector2 !== null ? builder.createString(this.stateVector2!) : 0);
  const origIdOnOrbit1 = (this.origIdOnOrbit1 !== null ? builder.createString(this.origIdOnOrbit1!) : 0);
  const origIdOnOrbit2 = (this.origIdOnOrbit2 !== null ? builder.createString(this.origIdOnOrbit2!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Conjunction_Abridged.createConjunction_Abridged(builder,
    id,
    classificationMarking,
    idOnOrbit1,
    idOnOrbit2,
    type,
    tca,
    this.missDistance,
    this.collisionProb,
    collisionProbMethod,
    ephemName1,
    esId1,
    ephemName2,
    esId2,
    this.relPosR,
    this.relPosT,
    this.relPosN,
    this.relVelMag,
    this.relVelR,
    this.relVelT,
    this.relVelN,
    screenEntryTime,
    screenExitTime,
    this.screenVolumeX,
    this.screenVolumeY,
    this.screenVolumeZ,
    volShape,
    volEntryTime,
    volExitTime,
    this.penetrationLevelSigma,
    idStateVector1,
    lastObTime1,
    this.cdAoM1,
    this.crAoM1,
    this.thrustAccel1,
    idStateVector2,
    lastObTime2,
    this.cdAoM2,
    this.crAoM2,
    this.thrustAccel2,
    comments,
    ccir,
    concernNotes,
    this.stateDeptNotified,
    this.ownerContacted,
    rawFileURI,
    messageFor,
    messageId,
    this.uvwWarn,
    this.smallRelVelWarning,
    this.largeRelPosWarning,
    this.smallCovWarning,
    this.largeCovWarning,
    transactionId,
    source,
    origin,
    originator,
    eventId,
    descriptor,
    this.dataMode,
    createdAt,
    createdBy,
    stateVector1,
    stateVector2,
    this.satNo1,
    this.satNo2,
    origIdOnOrbit1,
    origIdOnOrbit2,
    origNetwork
  );
}
}
