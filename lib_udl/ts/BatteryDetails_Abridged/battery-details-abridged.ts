// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BatteryDetails_Abridged_dataMode_Enum } from './battery-details-abridged-data-mode-enum.js';


/**
 * /// Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.
 */
export class BatteryDetails_Abridged implements flatbuffers.IUnpackableObject<BatteryDetails_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BatteryDetails_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBatteryDetails_Abridged(bb:flatbuffers.ByteBuffer, obj?:BatteryDetails_Abridged):BatteryDetails_Abridged {
  return (obj || new BatteryDetails_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBatteryDetails_Abridged(bb:flatbuffers.ByteBuffer, obj?:BatteryDetails_Abridged):BatteryDetails_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BatteryDetails_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('BATT');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: BATTERYDETAILS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the parent battery type record.
 * Example: /// Example: BATTERY-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idBattery():string|null
idBattery(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idBattery(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
 * Example: /// Example: Ni-Cd
 * Constraints: Minimum length = 0, Maximum length = 32
 */
technology():string|null
technology(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
technology(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Battery capacity in Ah.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
capacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Depth of discharge as a percentage/fraction.
 * Example: /// Example: 0.2
 * Constraints: No constraints specified.
 */
dischargeDepth():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Battery model number or name.
 * Example: /// Example: 11212
 * Constraints: Minimum length = 0, Maximum length = 128
 */
model():string|null
model(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
model(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Battery description/notes.
 * Example: /// Example: example notes
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the organization that manufactures the battery.
 * Example: /// Example: MANUFACTURERORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():BatteryDetails_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BatteryDetails_Abridged_dataMode_Enum.REAL;
}

static startBatteryDetails_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(15);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdBattery(builder:flatbuffers.Builder, idBatteryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idBatteryOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addTechnology(builder:flatbuffers.Builder, technologyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, technologyOffset, 0);
}

static addCapacity(builder:flatbuffers.Builder, capacity:number) {
  builder.addFieldFloat64(4, capacity, 0.0);
}

static addDischargeDepth(builder:flatbuffers.Builder, dischargeDepth:number) {
  builder.addFieldFloat64(5, dischargeDepth, 0.0);
}

static addModel(builder:flatbuffers.Builder, modelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, modelOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, descriptionOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, manufacturerOrgIdOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:BatteryDetails_Abridged_dataMode_Enum) {
  builder.addFieldInt8(14, dataMode, BatteryDetails_Abridged_dataMode_Enum.REAL);
}

static endBatteryDetails_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishBatteryDetails_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'BATT');
}

static finishSizePrefixedBatteryDetails_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'BATT', true);
}

static createBatteryDetails_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idBatteryOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, technologyOffset:flatbuffers.Offset, capacity:number, dischargeDepth:number, modelOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:BatteryDetails_Abridged_dataMode_Enum):flatbuffers.Offset {
  BatteryDetails_Abridged.startBatteryDetails_Abridged(builder);
  BatteryDetails_Abridged.addId(builder, idOffset);
  BatteryDetails_Abridged.addIdBattery(builder, idBatteryOffset);
  BatteryDetails_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  BatteryDetails_Abridged.addTechnology(builder, technologyOffset);
  BatteryDetails_Abridged.addCapacity(builder, capacity);
  BatteryDetails_Abridged.addDischargeDepth(builder, dischargeDepth);
  BatteryDetails_Abridged.addModel(builder, modelOffset);
  BatteryDetails_Abridged.addDescription(builder, descriptionOffset);
  BatteryDetails_Abridged.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  BatteryDetails_Abridged.addCreatedAt(builder, createdAtOffset);
  BatteryDetails_Abridged.addCreatedBy(builder, createdByOffset);
  BatteryDetails_Abridged.addSource(builder, sourceOffset);
  BatteryDetails_Abridged.addOrigin(builder, originOffset);
  BatteryDetails_Abridged.addOrigNetwork(builder, origNetworkOffset);
  BatteryDetails_Abridged.addDataMode(builder, dataMode);
  return BatteryDetails_Abridged.endBatteryDetails_Abridged(builder);
}

unpack(): BatteryDetails_AbridgedT {
  return new BatteryDetails_AbridgedT(
    this.id(),
    this.idBattery(),
    this.classificationMarking(),
    this.technology(),
    this.capacity(),
    this.dischargeDepth(),
    this.model(),
    this.description(),
    this.manufacturerOrgId(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: BatteryDetails_AbridgedT): void {
  _o.id = this.id();
  _o.idBattery = this.idBattery();
  _o.classificationMarking = this.classificationMarking();
  _o.technology = this.technology();
  _o.capacity = this.capacity();
  _o.dischargeDepth = this.dischargeDepth();
  _o.model = this.model();
  _o.description = this.description();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class BatteryDetails_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idBattery: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public technology: string|Uint8Array|null = null,
  public capacity: number = 0.0,
  public dischargeDepth: number = 0.0,
  public model: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: BatteryDetails_Abridged_dataMode_Enum = BatteryDetails_Abridged_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idBattery = (this.idBattery !== null ? builder.createString(this.idBattery!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const technology = (this.technology !== null ? builder.createString(this.technology!) : 0);
  const model = (this.model !== null ? builder.createString(this.model!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return BatteryDetails_Abridged.createBatteryDetails_Abridged(builder,
    id,
    idBattery,
    classificationMarking,
    technology,
    this.capacity,
    this.dischargeDepth,
    model,
    description,
    manufacturerOrgId,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
