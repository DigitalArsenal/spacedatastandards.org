// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ISRCollectionTaskings_Ingest_collectionType_Enum } from './ISRCollectionTaskings_Ingest_collectionType_Enum.js';
import { ISRCollectionTaskings_Ingest_type_Enum } from './ISRCollectionTaskings_Ingest_type_Enum.js';


/**
 * /// Individual taskings to complete the mission.
 */
export class ISRCollectionTaskings_Ingest implements flatbuffers.IUnpackableObject<ISRCollectionTaskings_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ISRCollectionTaskings_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsISRCollectionTaskings_Ingest(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionTaskings_Ingest):ISRCollectionTaskings_Ingest {
  return (obj || new ISRCollectionTaskings_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsISRCollectionTaskings_Ingest(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionTaskings_Ingest):ISRCollectionTaskings_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ISRCollectionTaskings_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ISRC');
}

/**
 * Tasking Unique Identifier.
 * Example: /// Example: ISRCOLLECTIONTASKINGS-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of tasking.
 * Example: /// Example: Deliberate
 * Constraints: Minimum length = 1, Maximum length = 16
 */
type():ISRCollectionTaskings_Ingest_type_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ISRCollectionTaskings_Ingest_type_Enum.DELIBERATE;
}

/**
 * Type of collection tasked.
 * Example: /// Example: Simultaneous
 * Constraints: Minimum length = 1, Maximum length = 16
 */
collectionType():ISRCollectionTaskings_Ingest_collectionType_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ISRCollectionTaskings_Ingest_collectionType_Enum.SIMULTANEOUS;
}

/**
 * Human readable definition of this taskings Area Of Responsibility.
 * Example: /// Example: Kandahar
 * Constraints: Minimum length = 0, Maximum length = 32
 */
taskingAor():string|null
taskingAor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingAor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Eight line.
 * Example: /// Example: No example provided.
 * Constraints: Minimum length = 0, Maximum length = 256
 */
eightLine():string|null
eightLine(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eightLine(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Primary type of intelligence to be collected during the mission.
 * Example: /// Example: Sig
 * Constraints: Minimum length = 0, Maximum length = 32
 */
taskingPrimaryIntelDiscipline():string|null
taskingPrimaryIntelDiscipline(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingPrimaryIntelDiscipline(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sub category of primary intelligence to be collected.
 * Example: /// Example: FMV
 * Constraints: Minimum length = 0, Maximum length = 32
 */
taskingPrimarySubCategory():string|null
taskingPrimarySubCategory(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingPrimarySubCategory(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of tasking intelligence to be collected second.
 * Example: /// Example: Intelligence_2
 * Constraints: Minimum length = 0, Maximum length = 32
 */
taskingSecondaryIntelDiscipline():string|null
taskingSecondaryIntelDiscipline(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingSecondaryIntelDiscipline(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mission sub category for secondary intelligence discipline to be collected.
 * Example: /// Example: Convoy
 * Constraints: Minimum length = 0, Maximum length = 32
 */
taskingSecondarySubCategory():string|null
taskingSecondarySubCategory(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingSecondarySubCategory(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * What is the primary objective(Role) of this task.
 * Example: /// Example: Provide Targeting of Lead Vehicle
 * Constraints: Minimum length = 0, Maximum length = 32
 */
taskingRole():string|null
taskingRole(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingRole(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Tasking operation name.
 * Example: /// Example: OP-HONEY-BADGER
 * Constraints: Minimum length = 0, Maximum length = 32
 */
taskingOperation():string|null
taskingOperation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingOperation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Tasking Priority (1-n).
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
taskingPriority():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Military Base to transmit the dissemination of this data.
 * Example: /// Example: ENVOYS
 * Constraints: Minimum length = 0, Maximum length = 32
 */
taskingSupportedUnit():string|null
taskingSupportedUnit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingSupportedUnit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Tasking emphasis.
 * Example: /// Example: EMPHASIS
 * Constraints: Minimum length = 0, Maximum length = 32
 */
taskingEmphasis():string|null
taskingEmphasis(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingEmphasis(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of retasking, in ISO 8601 UTC format.
 * Example: /// Example: 2021-01-19T01:01:15.001Z
 * Constraints: No constraints specified.
 */
taskingRetaskTime():string|null
taskingRetaskTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingRetaskTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
taskingStartPointLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
taskingStartPointLong():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Tasking geographical collection area.
 * Example: /// Example: AREA
 * Constraints: No constraints specified.
 */
taskingCollectionArea():string|null
taskingCollectionArea(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingCollectionArea(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Joint Operations Area.
 * Example: /// Example: AREA
 * Constraints: Minimum length = 0, Maximum length = 32
 */
taskingJoa():string|null
taskingJoa(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingJoa(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A synchronization matrix is used to organize the logistics synchronization process during a mission.
 * Example: /// Example: MATRIX
 * Constraints: Minimum length = 0, Maximum length = 32
 */
taskingSyncMatrixBin():string|null
taskingSyncMatrixBin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingSyncMatrixBin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Country code of the tasking.  A Country may represent countries, multi-national consortiums, and international organizations.
 * Example: /// Example: CODE
 * Constraints: Minimum length = 0, Maximum length = 4
 */
taskingCountry():string|null
taskingCountry(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingCountry(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Region of the tasking.
 * Example: /// Example: REGION
 * Constraints: Minimum length = 0, Maximum length = 32
 */
taskingRegion():string|null
taskingRegion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingRegion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Subregion of the tasking.
 * Example: /// Example: SUBREGION
 * Constraints: Minimum length = 0, Maximum length = 32
 */
taskingSubRegion():string|null
taskingSubRegion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskingSubRegion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Value of the Sensitive Reconnaissance Operations Track.
 * Example: /// Example: SRO
 * Constraints: Minimum length = 0, Maximum length = 32
 */
sroTrack():string|null
sroTrack(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sroTrack(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Free text field for the user to specify special instructions needed for this collection.
 * Example: /// Example: TEXT
 * Constraints: Minimum length = 0, Maximum length = 256
 */
specialComGuidance():string|null
specialComGuidance(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
specialComGuidance(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
collectionPeriods():string|null
collectionPeriods(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collectionPeriods(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Tasking desired collection requirements.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
taskingCollectionRequirements(index: number):string
taskingCollectionRequirements(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
taskingCollectionRequirements(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

taskingCollectionRequirementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startISRCollectionTaskings_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(27);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:ISRCollectionTaskings_Ingest_type_Enum) {
  builder.addFieldInt8(1, type, ISRCollectionTaskings_Ingest_type_Enum.DELIBERATE);
}

static addCollectionType(builder:flatbuffers.Builder, collectionType:ISRCollectionTaskings_Ingest_collectionType_Enum) {
  builder.addFieldInt8(2, collectionType, ISRCollectionTaskings_Ingest_collectionType_Enum.SIMULTANEOUS);
}

static addTaskingAor(builder:flatbuffers.Builder, taskingAorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, taskingAorOffset, 0);
}

static addEightLine(builder:flatbuffers.Builder, eightLineOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, eightLineOffset, 0);
}

static addTaskingPrimaryIntelDiscipline(builder:flatbuffers.Builder, taskingPrimaryIntelDisciplineOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, taskingPrimaryIntelDisciplineOffset, 0);
}

static addTaskingPrimarySubCategory(builder:flatbuffers.Builder, taskingPrimarySubCategoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, taskingPrimarySubCategoryOffset, 0);
}

static addTaskingSecondaryIntelDiscipline(builder:flatbuffers.Builder, taskingSecondaryIntelDisciplineOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, taskingSecondaryIntelDisciplineOffset, 0);
}

static addTaskingSecondarySubCategory(builder:flatbuffers.Builder, taskingSecondarySubCategoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, taskingSecondarySubCategoryOffset, 0);
}

static addTaskingRole(builder:flatbuffers.Builder, taskingRoleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, taskingRoleOffset, 0);
}

static addTaskingOperation(builder:flatbuffers.Builder, taskingOperationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, taskingOperationOffset, 0);
}

static addTaskingPriority(builder:flatbuffers.Builder, taskingPriority:number) {
  builder.addFieldFloat64(11, taskingPriority, 0.0);
}

static addTaskingSupportedUnit(builder:flatbuffers.Builder, taskingSupportedUnitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, taskingSupportedUnitOffset, 0);
}

static addTaskingEmphasis(builder:flatbuffers.Builder, taskingEmphasisOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, taskingEmphasisOffset, 0);
}

static addTaskingRetaskTime(builder:flatbuffers.Builder, taskingRetaskTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, taskingRetaskTimeOffset, 0);
}

static addTaskingStartPointLat(builder:flatbuffers.Builder, taskingStartPointLat:number) {
  builder.addFieldFloat64(15, taskingStartPointLat, 0.0);
}

static addTaskingStartPointLong(builder:flatbuffers.Builder, taskingStartPointLong:number) {
  builder.addFieldFloat64(16, taskingStartPointLong, 0.0);
}

static addTaskingCollectionArea(builder:flatbuffers.Builder, taskingCollectionAreaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, taskingCollectionAreaOffset, 0);
}

static addTaskingJoa(builder:flatbuffers.Builder, taskingJoaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, taskingJoaOffset, 0);
}

static addTaskingSyncMatrixBin(builder:flatbuffers.Builder, taskingSyncMatrixBinOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, taskingSyncMatrixBinOffset, 0);
}

static addTaskingCountry(builder:flatbuffers.Builder, taskingCountryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, taskingCountryOffset, 0);
}

static addTaskingRegion(builder:flatbuffers.Builder, taskingRegionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, taskingRegionOffset, 0);
}

static addTaskingSubRegion(builder:flatbuffers.Builder, taskingSubRegionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, taskingSubRegionOffset, 0);
}

static addSroTrack(builder:flatbuffers.Builder, sroTrackOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, sroTrackOffset, 0);
}

static addSpecialComGuidance(builder:flatbuffers.Builder, specialComGuidanceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, specialComGuidanceOffset, 0);
}

static addCollectionPeriods(builder:flatbuffers.Builder, collectionPeriodsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, collectionPeriodsOffset, 0);
}

static addTaskingCollectionRequirements(builder:flatbuffers.Builder, taskingCollectionRequirementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, taskingCollectionRequirementsOffset, 0);
}

static createTaskingCollectionRequirementsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTaskingCollectionRequirementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endISRCollectionTaskings_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishISRCollectionTaskings_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC');
}

static finishSizePrefixedISRCollectionTaskings_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC', true);
}

static createISRCollectionTaskings_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, type:ISRCollectionTaskings_Ingest_type_Enum, collectionType:ISRCollectionTaskings_Ingest_collectionType_Enum, taskingAorOffset:flatbuffers.Offset, eightLineOffset:flatbuffers.Offset, taskingPrimaryIntelDisciplineOffset:flatbuffers.Offset, taskingPrimarySubCategoryOffset:flatbuffers.Offset, taskingSecondaryIntelDisciplineOffset:flatbuffers.Offset, taskingSecondarySubCategoryOffset:flatbuffers.Offset, taskingRoleOffset:flatbuffers.Offset, taskingOperationOffset:flatbuffers.Offset, taskingPriority:number, taskingSupportedUnitOffset:flatbuffers.Offset, taskingEmphasisOffset:flatbuffers.Offset, taskingRetaskTimeOffset:flatbuffers.Offset, taskingStartPointLat:number, taskingStartPointLong:number, taskingCollectionAreaOffset:flatbuffers.Offset, taskingJoaOffset:flatbuffers.Offset, taskingSyncMatrixBinOffset:flatbuffers.Offset, taskingCountryOffset:flatbuffers.Offset, taskingRegionOffset:flatbuffers.Offset, taskingSubRegionOffset:flatbuffers.Offset, sroTrackOffset:flatbuffers.Offset, specialComGuidanceOffset:flatbuffers.Offset, collectionPeriodsOffset:flatbuffers.Offset, taskingCollectionRequirementsOffset:flatbuffers.Offset):flatbuffers.Offset {
  ISRCollectionTaskings_Ingest.startISRCollectionTaskings_Ingest(builder);
  ISRCollectionTaskings_Ingest.addId(builder, idOffset);
  ISRCollectionTaskings_Ingest.addType(builder, type);
  ISRCollectionTaskings_Ingest.addCollectionType(builder, collectionType);
  ISRCollectionTaskings_Ingest.addTaskingAor(builder, taskingAorOffset);
  ISRCollectionTaskings_Ingest.addEightLine(builder, eightLineOffset);
  ISRCollectionTaskings_Ingest.addTaskingPrimaryIntelDiscipline(builder, taskingPrimaryIntelDisciplineOffset);
  ISRCollectionTaskings_Ingest.addTaskingPrimarySubCategory(builder, taskingPrimarySubCategoryOffset);
  ISRCollectionTaskings_Ingest.addTaskingSecondaryIntelDiscipline(builder, taskingSecondaryIntelDisciplineOffset);
  ISRCollectionTaskings_Ingest.addTaskingSecondarySubCategory(builder, taskingSecondarySubCategoryOffset);
  ISRCollectionTaskings_Ingest.addTaskingRole(builder, taskingRoleOffset);
  ISRCollectionTaskings_Ingest.addTaskingOperation(builder, taskingOperationOffset);
  ISRCollectionTaskings_Ingest.addTaskingPriority(builder, taskingPriority);
  ISRCollectionTaskings_Ingest.addTaskingSupportedUnit(builder, taskingSupportedUnitOffset);
  ISRCollectionTaskings_Ingest.addTaskingEmphasis(builder, taskingEmphasisOffset);
  ISRCollectionTaskings_Ingest.addTaskingRetaskTime(builder, taskingRetaskTimeOffset);
  ISRCollectionTaskings_Ingest.addTaskingStartPointLat(builder, taskingStartPointLat);
  ISRCollectionTaskings_Ingest.addTaskingStartPointLong(builder, taskingStartPointLong);
  ISRCollectionTaskings_Ingest.addTaskingCollectionArea(builder, taskingCollectionAreaOffset);
  ISRCollectionTaskings_Ingest.addTaskingJoa(builder, taskingJoaOffset);
  ISRCollectionTaskings_Ingest.addTaskingSyncMatrixBin(builder, taskingSyncMatrixBinOffset);
  ISRCollectionTaskings_Ingest.addTaskingCountry(builder, taskingCountryOffset);
  ISRCollectionTaskings_Ingest.addTaskingRegion(builder, taskingRegionOffset);
  ISRCollectionTaskings_Ingest.addTaskingSubRegion(builder, taskingSubRegionOffset);
  ISRCollectionTaskings_Ingest.addSroTrack(builder, sroTrackOffset);
  ISRCollectionTaskings_Ingest.addSpecialComGuidance(builder, specialComGuidanceOffset);
  ISRCollectionTaskings_Ingest.addCollectionPeriods(builder, collectionPeriodsOffset);
  ISRCollectionTaskings_Ingest.addTaskingCollectionRequirements(builder, taskingCollectionRequirementsOffset);
  return ISRCollectionTaskings_Ingest.endISRCollectionTaskings_Ingest(builder);
}

unpack(): ISRCollectionTaskings_IngestT {
  return new ISRCollectionTaskings_IngestT(
    this.id(),
    this.type(),
    this.collectionType(),
    this.taskingAor(),
    this.eightLine(),
    this.taskingPrimaryIntelDiscipline(),
    this.taskingPrimarySubCategory(),
    this.taskingSecondaryIntelDiscipline(),
    this.taskingSecondarySubCategory(),
    this.taskingRole(),
    this.taskingOperation(),
    this.taskingPriority(),
    this.taskingSupportedUnit(),
    this.taskingEmphasis(),
    this.taskingRetaskTime(),
    this.taskingStartPointLat(),
    this.taskingStartPointLong(),
    this.taskingCollectionArea(),
    this.taskingJoa(),
    this.taskingSyncMatrixBin(),
    this.taskingCountry(),
    this.taskingRegion(),
    this.taskingSubRegion(),
    this.sroTrack(),
    this.specialComGuidance(),
    this.collectionPeriods(),
    this.bb!.createScalarList<string>(this.taskingCollectionRequirements.bind(this), this.taskingCollectionRequirementsLength())
  );
}


unpackTo(_o: ISRCollectionTaskings_IngestT): void {
  _o.id = this.id();
  _o.type = this.type();
  _o.collectionType = this.collectionType();
  _o.taskingAor = this.taskingAor();
  _o.eightLine = this.eightLine();
  _o.taskingPrimaryIntelDiscipline = this.taskingPrimaryIntelDiscipline();
  _o.taskingPrimarySubCategory = this.taskingPrimarySubCategory();
  _o.taskingSecondaryIntelDiscipline = this.taskingSecondaryIntelDiscipline();
  _o.taskingSecondarySubCategory = this.taskingSecondarySubCategory();
  _o.taskingRole = this.taskingRole();
  _o.taskingOperation = this.taskingOperation();
  _o.taskingPriority = this.taskingPriority();
  _o.taskingSupportedUnit = this.taskingSupportedUnit();
  _o.taskingEmphasis = this.taskingEmphasis();
  _o.taskingRetaskTime = this.taskingRetaskTime();
  _o.taskingStartPointLat = this.taskingStartPointLat();
  _o.taskingStartPointLong = this.taskingStartPointLong();
  _o.taskingCollectionArea = this.taskingCollectionArea();
  _o.taskingJoa = this.taskingJoa();
  _o.taskingSyncMatrixBin = this.taskingSyncMatrixBin();
  _o.taskingCountry = this.taskingCountry();
  _o.taskingRegion = this.taskingRegion();
  _o.taskingSubRegion = this.taskingSubRegion();
  _o.sroTrack = this.sroTrack();
  _o.specialComGuidance = this.specialComGuidance();
  _o.collectionPeriods = this.collectionPeriods();
  _o.taskingCollectionRequirements = this.bb!.createScalarList<string>(this.taskingCollectionRequirements.bind(this), this.taskingCollectionRequirementsLength());
}
}

export class ISRCollectionTaskings_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public type: ISRCollectionTaskings_Ingest_type_Enum = ISRCollectionTaskings_Ingest_type_Enum.DELIBERATE,
  public collectionType: ISRCollectionTaskings_Ingest_collectionType_Enum = ISRCollectionTaskings_Ingest_collectionType_Enum.SIMULTANEOUS,
  public taskingAor: string|Uint8Array|null = null,
  public eightLine: string|Uint8Array|null = null,
  public taskingPrimaryIntelDiscipline: string|Uint8Array|null = null,
  public taskingPrimarySubCategory: string|Uint8Array|null = null,
  public taskingSecondaryIntelDiscipline: string|Uint8Array|null = null,
  public taskingSecondarySubCategory: string|Uint8Array|null = null,
  public taskingRole: string|Uint8Array|null = null,
  public taskingOperation: string|Uint8Array|null = null,
  public taskingPriority: number = 0.0,
  public taskingSupportedUnit: string|Uint8Array|null = null,
  public taskingEmphasis: string|Uint8Array|null = null,
  public taskingRetaskTime: string|Uint8Array|null = null,
  public taskingStartPointLat: number = 0.0,
  public taskingStartPointLong: number = 0.0,
  public taskingCollectionArea: string|Uint8Array|null = null,
  public taskingJoa: string|Uint8Array|null = null,
  public taskingSyncMatrixBin: string|Uint8Array|null = null,
  public taskingCountry: string|Uint8Array|null = null,
  public taskingRegion: string|Uint8Array|null = null,
  public taskingSubRegion: string|Uint8Array|null = null,
  public sroTrack: string|Uint8Array|null = null,
  public specialComGuidance: string|Uint8Array|null = null,
  public collectionPeriods: string|Uint8Array|null = null,
  public taskingCollectionRequirements: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const taskingAor = (this.taskingAor !== null ? builder.createString(this.taskingAor!) : 0);
  const eightLine = (this.eightLine !== null ? builder.createString(this.eightLine!) : 0);
  const taskingPrimaryIntelDiscipline = (this.taskingPrimaryIntelDiscipline !== null ? builder.createString(this.taskingPrimaryIntelDiscipline!) : 0);
  const taskingPrimarySubCategory = (this.taskingPrimarySubCategory !== null ? builder.createString(this.taskingPrimarySubCategory!) : 0);
  const taskingSecondaryIntelDiscipline = (this.taskingSecondaryIntelDiscipline !== null ? builder.createString(this.taskingSecondaryIntelDiscipline!) : 0);
  const taskingSecondarySubCategory = (this.taskingSecondarySubCategory !== null ? builder.createString(this.taskingSecondarySubCategory!) : 0);
  const taskingRole = (this.taskingRole !== null ? builder.createString(this.taskingRole!) : 0);
  const taskingOperation = (this.taskingOperation !== null ? builder.createString(this.taskingOperation!) : 0);
  const taskingSupportedUnit = (this.taskingSupportedUnit !== null ? builder.createString(this.taskingSupportedUnit!) : 0);
  const taskingEmphasis = (this.taskingEmphasis !== null ? builder.createString(this.taskingEmphasis!) : 0);
  const taskingRetaskTime = (this.taskingRetaskTime !== null ? builder.createString(this.taskingRetaskTime!) : 0);
  const taskingCollectionArea = (this.taskingCollectionArea !== null ? builder.createString(this.taskingCollectionArea!) : 0);
  const taskingJoa = (this.taskingJoa !== null ? builder.createString(this.taskingJoa!) : 0);
  const taskingSyncMatrixBin = (this.taskingSyncMatrixBin !== null ? builder.createString(this.taskingSyncMatrixBin!) : 0);
  const taskingCountry = (this.taskingCountry !== null ? builder.createString(this.taskingCountry!) : 0);
  const taskingRegion = (this.taskingRegion !== null ? builder.createString(this.taskingRegion!) : 0);
  const taskingSubRegion = (this.taskingSubRegion !== null ? builder.createString(this.taskingSubRegion!) : 0);
  const sroTrack = (this.sroTrack !== null ? builder.createString(this.sroTrack!) : 0);
  const specialComGuidance = (this.specialComGuidance !== null ? builder.createString(this.specialComGuidance!) : 0);
  const collectionPeriods = (this.collectionPeriods !== null ? builder.createString(this.collectionPeriods!) : 0);
  const taskingCollectionRequirements = ISRCollectionTaskings_Ingest.createTaskingCollectionRequirementsVector(builder, builder.createObjectOffsetList(this.taskingCollectionRequirements));

  return ISRCollectionTaskings_Ingest.createISRCollectionTaskings_Ingest(builder,
    id,
    this.type,
    this.collectionType,
    taskingAor,
    eightLine,
    taskingPrimaryIntelDiscipline,
    taskingPrimarySubCategory,
    taskingSecondaryIntelDiscipline,
    taskingSecondarySubCategory,
    taskingRole,
    taskingOperation,
    this.taskingPriority,
    taskingSupportedUnit,
    taskingEmphasis,
    taskingRetaskTime,
    this.taskingStartPointLat,
    this.taskingStartPointLong,
    taskingCollectionArea,
    taskingJoa,
    taskingSyncMatrixBin,
    taskingCountry,
    taskingRegion,
    taskingSubRegion,
    sroTrack,
    specialComGuidance,
    collectionPeriods,
    taskingCollectionRequirements
  );
}
}
