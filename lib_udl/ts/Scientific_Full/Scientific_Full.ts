// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Scientific_Full_dataMode_Enum } from './Scientific_Full_dataMode_Enum.js';


/**
 * /// Scientific or other data from Seradata.
 */
export class Scientific_Full implements flatbuffers.IUnpackableObject<Scientific_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Scientific_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsScientific_Full(bb:flatbuffers.ByteBuffer, obj?:Scientific_Full):Scientific_Full {
  return (obj || new Scientific_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsScientific_Full(bb:flatbuffers.ByteBuffer, obj?:Scientific_Full):Scientific_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Scientific_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SCIE');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SCIENTIFIC-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
 * Example: /// Example: REF-SPACECRAFT-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
spacecraftId():string|null
spacecraftId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spacecraftId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Hosted for company/Organization Id.
 * Example: /// Example: REF-HOSTEDFORCOMPANYORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
hostedForCompanyOrgId():string|null
hostedForCompanyOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hostedForCompanyOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the organization which manufactures this bus.
 * Example: /// Example: REF-MANUFACTURERORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Payload category, e.g. Magnetometer, Radiometer, Sensor, etc.
 * Example: /// Example: Sensor
 * Constraints: Minimum length = 0, Maximum length = 50
 */
payloadCategory():string|null
payloadCategory(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
payloadCategory(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sensor name from sera data, e.g. SEM/MAG (SEM / Magnetometer).
 * Example: /// Example: SEM/MAG
 * Constraints: Minimum length = 1, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Frequency band, e.g. Gamma.
 * Example: /// Example: Gamma
 * Constraints: Minimum length = 0, Maximum length = 50
 */
frequencyBand():string|null
frequencyBand(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
frequencyBand(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Notes associated with the payload.
 * Example: /// Example: NOTES
 * Constraints: Minimum length = 0, Maximum length = 256
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was last updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Scientific_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Scientific_Full_dataMode_Enum.REAL;
}

/**
 * ID of the parent entity for this Scientific.
 * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idEntity():string|null
idEntity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idEntity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
entity():string|null
entity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startScientific_Full(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addSpacecraftId(builder:flatbuffers.Builder, spacecraftIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, spacecraftIdOffset, 0);
}

static addHostedForCompanyOrgId(builder:flatbuffers.Builder, hostedForCompanyOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, hostedForCompanyOrgIdOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, manufacturerOrgIdOffset, 0);
}

static addPayloadCategory(builder:flatbuffers.Builder, payloadCategoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, payloadCategoryOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, nameOffset, 0);
}

static addFrequencyBand(builder:flatbuffers.Builder, frequencyBandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, frequencyBandOffset, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, notesOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, updatedByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Scientific_Full_dataMode_Enum) {
  builder.addFieldInt8(16, dataMode, Scientific_Full_dataMode_Enum.REAL);
}

static addIdEntity(builder:flatbuffers.Builder, idEntityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, idEntityOffset, 0);
}

static addEntity(builder:flatbuffers.Builder, entityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, entityOffset, 0);
}

static endScientific_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishScientific_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SCIE');
}

static finishSizePrefixedScientific_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SCIE', true);
}

static createScientific_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, spacecraftIdOffset:flatbuffers.Offset, hostedForCompanyOrgIdOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, payloadCategoryOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, frequencyBandOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:Scientific_Full_dataMode_Enum, idEntityOffset:flatbuffers.Offset, entityOffset:flatbuffers.Offset):flatbuffers.Offset {
  Scientific_Full.startScientific_Full(builder);
  Scientific_Full.addId(builder, idOffset);
  Scientific_Full.addClassificationMarking(builder, classificationMarkingOffset);
  Scientific_Full.addSpacecraftId(builder, spacecraftIdOffset);
  Scientific_Full.addHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset);
  Scientific_Full.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  Scientific_Full.addPayloadCategory(builder, payloadCategoryOffset);
  Scientific_Full.addName(builder, nameOffset);
  Scientific_Full.addFrequencyBand(builder, frequencyBandOffset);
  Scientific_Full.addNotes(builder, notesOffset);
  Scientific_Full.addCreatedAt(builder, createdAtOffset);
  Scientific_Full.addCreatedBy(builder, createdByOffset);
  Scientific_Full.addUpdatedAt(builder, updatedAtOffset);
  Scientific_Full.addUpdatedBy(builder, updatedByOffset);
  Scientific_Full.addSource(builder, sourceOffset);
  Scientific_Full.addOrigin(builder, originOffset);
  Scientific_Full.addOrigNetwork(builder, origNetworkOffset);
  Scientific_Full.addDataMode(builder, dataMode);
  Scientific_Full.addIdEntity(builder, idEntityOffset);
  Scientific_Full.addEntity(builder, entityOffset);
  return Scientific_Full.endScientific_Full(builder);
}

unpack(): Scientific_FullT {
  return new Scientific_FullT(
    this.id(),
    this.classificationMarking(),
    this.spacecraftId(),
    this.hostedForCompanyOrgId(),
    this.manufacturerOrgId(),
    this.payloadCategory(),
    this.name(),
    this.frequencyBand(),
    this.notes(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.idEntity(),
    this.entity()
  );
}


unpackTo(_o: Scientific_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.spacecraftId = this.spacecraftId();
  _o.hostedForCompanyOrgId = this.hostedForCompanyOrgId();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.payloadCategory = this.payloadCategory();
  _o.name = this.name();
  _o.frequencyBand = this.frequencyBand();
  _o.notes = this.notes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.idEntity = this.idEntity();
  _o.entity = this.entity();
}
}

export class Scientific_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public spacecraftId: string|Uint8Array|null = null,
  public hostedForCompanyOrgId: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public payloadCategory: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public frequencyBand: string|Uint8Array|null = null,
  public notes: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: Scientific_Full_dataMode_Enum = Scientific_Full_dataMode_Enum.REAL,
  public idEntity: string|Uint8Array|null = null,
  public entity: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const spacecraftId = (this.spacecraftId !== null ? builder.createString(this.spacecraftId!) : 0);
  const hostedForCompanyOrgId = (this.hostedForCompanyOrgId !== null ? builder.createString(this.hostedForCompanyOrgId!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const payloadCategory = (this.payloadCategory !== null ? builder.createString(this.payloadCategory!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const frequencyBand = (this.frequencyBand !== null ? builder.createString(this.frequencyBand!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const idEntity = (this.idEntity !== null ? builder.createString(this.idEntity!) : 0);
  const entity = (this.entity !== null ? builder.createString(this.entity!) : 0);

  return Scientific_Full.createScientific_Full(builder,
    id,
    classificationMarking,
    spacecraftId,
    hostedForCompanyOrgId,
    manufacturerOrgId,
    payloadCategory,
    name,
    frequencyBand,
    notes,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    source,
    origin,
    origNetwork,
    this.dataMode,
    idEntity,
    entity
  );
}
}
