// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { POI_Full_dataMode_Enum } from './poi-full-data-mode-enum.js';


/**
 * /// A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).
 */
export class POI_Full implements flatbuffers.IUnpackableObject<POI_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):POI_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPOI_Full(bb:flatbuffers.ByteBuffer, obj?:POI_Full):POI_Full {
  return (obj || new POI_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPOI_Full(bb:flatbuffers.ByteBuffer, obj?:POI_Full):POI_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new POI_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('POIF');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: POI-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).
 * Example: /// Example: BDA
 * Constraints: Minimum length = 0, Maximum length = 36
 */
pps():string|null
pps(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pps(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional mission ID related to the POI.
 * Example: /// Example: MSN-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
msnid():string|null
msnid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msnid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Priority of the  POI target object.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
pri():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.
 * Example: /// Example: TRK-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
trkid():string|null
trkid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trkid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.
 * Example: /// Example: ['WEATHER-EVENT-ID1', 'WEATHER-EVENT-ID2']
 * Constraints: No constraints specified.
 */
idWeatherReport(index: number):string
idWeatherReport(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
idWeatherReport(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

idWeatherReportLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.
 * Example: /// Example: POI-ID
 * Constraints: Minimum length = 1, Maximum length = 128
 */
poiid():string|null
poiid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
poiid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the POI target object.
 * Example: /// Example: POI_NAME
 * Constraints: Minimum length = 1, Maximum length = 64
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the POI target object.
 * Example: /// Example: Description of the object
 * Constraints: Minimum length = 0, Maximum length = 128
 */
desc():string|null
desc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
desc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).
 * Example: /// Example: LIGHT_TANK
 * Constraints: Minimum length = 0, Maximum length = 24
 */
spec():string|null
spec(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spec(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).
 * Example: /// Example: FRIEND
 * Constraints: Minimum length = 0, Maximum length = 16
 */
ident():string|null
ident(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ident(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).
 * Example: /// Example: SURFACE
 * Constraints: Minimum length = 0, Maximum length = 24
 */
env():string|null
env(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
env(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).
 * Example: /// Example: COMBAT_VEHICLE
 * Constraints: Minimum length = 0, Maximum length = 36
 */
plat():string|null
plat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
plat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.
 * Example: /// Example: TRAINING
 * Constraints: Minimum length = 0, Maximum length = 32
 */
activity():string|null
activity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
activity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Activity/POI timestamp in ISO8601 UTC format.
 * Example: /// Example: 2020-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
ts():string|null
ts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start time of event validity (optional), in ISO8601 UTC format.
 * Example: /// Example: 2020-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
start():string|null
start(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
start(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Stale timestamp (optional), in ISO8601 UTC format.
 * Example: /// Example: 2020-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
stale():string|null
stale(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stale(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * How the event point was generated, in CoT object heirarchy notation (optional, CoT).
 * Example: /// Example: h-g-i-g-o
 * Constraints: Minimum length = 0, Maximum length = 36
 */
how():string|null
how(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
how(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Event type, in CoT object heirarchy notation (optional, CoT).
 * Example: /// Example: a-h-G
 * Constraints: Minimum length = 0, Maximum length = 36
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Point height above ellipsoid (WGS-84), in meters.
 * Example: /// Example: 5.23
 * Constraints: No constraints specified.
 */
alt():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
az():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
el():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Height above lat/lon point, in meters (1-sigma, if representing linear error).
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
le():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
ce():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].
 * Example: /// Example: [125.5, 85.1, 125.75]
 * Constraints: No constraints specified.
 */
elle(index: number):string
elle(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
elle(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

elleLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
 * Example: /// Example: Contact Info
 * Constraints: Minimum length = 0, Maximum length = 32
 */
cntct():string|null
cntct(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cntct(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
conf():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * List of URLs to before/after images of this Point of Interest entity.
 * Example: /// Example: ['URL1', 'URL2']
 * Constraints: No constraints specified.
 */
urls(index: number):string
urls(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
urls(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

urlsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
 * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
 * Constraints: No constraints specified.
 */
area():string|null
area(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
area(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
 * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
 * Constraints: No constraints specified.
 */
atext():string|null
atext(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atext(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
 * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
 * Constraints: No constraints specified.
 */
agjson():string|null
agjson(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
agjson(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of region as projected on the ground.
 * Example: /// Example: Type1
 * Constraints: Minimum length = 0, Maximum length = 128
 */
atype():string|null
atype(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atype(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of dimensions of the geometry depicted by region.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
andims():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Geographical spatial_ref_sys for region.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
asrid():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():POI_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : POI_Full_dataMode_Enum.REAL;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.
 * Example: /// Example: ['GROUP1', 'GROUP2']
 * Constraints: No constraints specified.
 */
groups(index: number):string
groups(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
groups(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

groupsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * ID/name of the platform or entity providing the POI data.
 * Example: /// Example: PLATFORM_NAME
 * Constraints: Minimum length = 0, Maximum length = 64
 */
asset():string|null
asset(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
asset(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['TAG1', 'TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UDL record types (GROUNDIMAGE, RFOBS) that are related to the determination of this Point of Interest. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
 * Example: /// Example: ['TYPE1', 'TYPE2']
 * Constraints: No constraints specified.
 */
srcTyps(index: number):string
srcTyps(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcTyps(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcTypsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UUIDs of the UDL data records that are related to the determination of this Point of Interest. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size.  See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/rfobservation/{uuid}).
 * Example: /// Example: ['ID1', 'ID2']
 * Constraints: No constraints specified.
 */
srcIds(index: number):string
srcIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The Basic Encyclopedia Number associated with the POI, if applicable.
 * Example: /// Example: 0427RT1030
 * Constraints: Minimum length = 0, Maximum length = 64
 */
beNumber():string|null
beNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
beNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
orientation():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: TRANSACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPOI_Full(builder:flatbuffers.Builder) {
  builder.startObject(52);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addPps(builder:flatbuffers.Builder, ppsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, ppsOffset, 0);
}

static addMsnid(builder:flatbuffers.Builder, msnidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, msnidOffset, 0);
}

static addPri(builder:flatbuffers.Builder, pri:number) {
  builder.addFieldInt32(4, pri, 0);
}

static addTrkid(builder:flatbuffers.Builder, trkidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, trkidOffset, 0);
}

static addIdWeatherReport(builder:flatbuffers.Builder, idWeatherReportOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, idWeatherReportOffset, 0);
}

static createIdWeatherReportVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startIdWeatherReportVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPoiid(builder:flatbuffers.Builder, poiidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, poiidOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, nameOffset, 0);
}

static addDesc(builder:flatbuffers.Builder, descOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, descOffset, 0);
}

static addSpec(builder:flatbuffers.Builder, specOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, specOffset, 0);
}

static addIdent(builder:flatbuffers.Builder, identOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, identOffset, 0);
}

static addEnv(builder:flatbuffers.Builder, envOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, envOffset, 0);
}

static addPlat(builder:flatbuffers.Builder, platOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, platOffset, 0);
}

static addActivity(builder:flatbuffers.Builder, activityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, activityOffset, 0);
}

static addTs(builder:flatbuffers.Builder, tsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, tsOffset, 0);
}

static addStart(builder:flatbuffers.Builder, startOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, startOffset, 0);
}

static addStale(builder:flatbuffers.Builder, staleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, staleOffset, 0);
}

static addHow(builder:flatbuffers.Builder, howOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, howOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, typeOffset, 0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(20, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(21, lon, 0.0);
}

static addAlt(builder:flatbuffers.Builder, alt:number) {
  builder.addFieldFloat64(22, alt, 0.0);
}

static addAz(builder:flatbuffers.Builder, az:number) {
  builder.addFieldFloat64(23, az, 0.0);
}

static addEl(builder:flatbuffers.Builder, el:number) {
  builder.addFieldFloat64(24, el, 0.0);
}

static addLe(builder:flatbuffers.Builder, le:number) {
  builder.addFieldFloat64(25, le, 0.0);
}

static addCe(builder:flatbuffers.Builder, ce:number) {
  builder.addFieldFloat64(26, ce, 0.0);
}

static addElle(builder:flatbuffers.Builder, elleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, elleOffset, 0);
}

static createElleVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startElleVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCntct(builder:flatbuffers.Builder, cntctOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, cntctOffset, 0);
}

static addConf(builder:flatbuffers.Builder, conf:number) {
  builder.addFieldFloat64(29, conf, 0.0);
}

static addUrls(builder:flatbuffers.Builder, urlsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, urlsOffset, 0);
}

static createUrlsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUrlsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addArea(builder:flatbuffers.Builder, areaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, areaOffset, 0);
}

static addAtext(builder:flatbuffers.Builder, atextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, atextOffset, 0);
}

static addAgjson(builder:flatbuffers.Builder, agjsonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, agjsonOffset, 0);
}

static addAtype(builder:flatbuffers.Builder, atypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, atypeOffset, 0);
}

static addAndims(builder:flatbuffers.Builder, andims:number) {
  builder.addFieldInt32(35, andims, 0);
}

static addAsrid(builder:flatbuffers.Builder, asrid:number) {
  builder.addFieldInt32(36, asrid, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, createdByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, sourceOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:POI_Full_dataMode_Enum) {
  builder.addFieldInt8(41, dataMode, POI_Full_dataMode_Enum.REAL);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, originOffset, 0);
}

static addGroups(builder:flatbuffers.Builder, groupsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, groupsOffset, 0);
}

static createGroupsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGroupsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAsset(builder:flatbuffers.Builder, assetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, assetOffset, 0);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSrcTyps(builder:flatbuffers.Builder, srcTypsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, srcTypsOffset, 0);
}

static createSrcTypsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcTypsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSrcIds(builder:flatbuffers.Builder, srcIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, srcIdsOffset, 0);
}

static createSrcIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBeNumber(builder:flatbuffers.Builder, beNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, beNumberOffset, 0);
}

static addOrientation(builder:flatbuffers.Builder, orientation:number) {
  builder.addFieldFloat64(49, orientation, 0.0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, origNetworkOffset, 0);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, transactionIdOffset, 0);
}

static endPOI_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPOI_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'POIF');
}

static finishSizePrefixedPOI_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'POIF', true);
}

static createPOI_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, ppsOffset:flatbuffers.Offset, msnidOffset:flatbuffers.Offset, pri:number, trkidOffset:flatbuffers.Offset, idWeatherReportOffset:flatbuffers.Offset, poiidOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, descOffset:flatbuffers.Offset, specOffset:flatbuffers.Offset, identOffset:flatbuffers.Offset, envOffset:flatbuffers.Offset, platOffset:flatbuffers.Offset, activityOffset:flatbuffers.Offset, tsOffset:flatbuffers.Offset, startOffset:flatbuffers.Offset, staleOffset:flatbuffers.Offset, howOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, lat:number, lon:number, alt:number, az:number, el:number, le:number, ce:number, elleOffset:flatbuffers.Offset, cntctOffset:flatbuffers.Offset, conf:number, urlsOffset:flatbuffers.Offset, areaOffset:flatbuffers.Offset, atextOffset:flatbuffers.Offset, agjsonOffset:flatbuffers.Offset, atypeOffset:flatbuffers.Offset, andims:number, asrid:number, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, dataMode:POI_Full_dataMode_Enum, originOffset:flatbuffers.Offset, groupsOffset:flatbuffers.Offset, assetOffset:flatbuffers.Offset, tagsOffset:flatbuffers.Offset, srcTypsOffset:flatbuffers.Offset, srcIdsOffset:flatbuffers.Offset, beNumberOffset:flatbuffers.Offset, orientation:number, origNetworkOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  POI_Full.startPOI_Full(builder);
  POI_Full.addId(builder, idOffset);
  POI_Full.addClassificationMarking(builder, classificationMarkingOffset);
  POI_Full.addPps(builder, ppsOffset);
  POI_Full.addMsnid(builder, msnidOffset);
  POI_Full.addPri(builder, pri);
  POI_Full.addTrkid(builder, trkidOffset);
  POI_Full.addIdWeatherReport(builder, idWeatherReportOffset);
  POI_Full.addPoiid(builder, poiidOffset);
  POI_Full.addName(builder, nameOffset);
  POI_Full.addDesc(builder, descOffset);
  POI_Full.addSpec(builder, specOffset);
  POI_Full.addIdent(builder, identOffset);
  POI_Full.addEnv(builder, envOffset);
  POI_Full.addPlat(builder, platOffset);
  POI_Full.addActivity(builder, activityOffset);
  POI_Full.addTs(builder, tsOffset);
  POI_Full.addStart(builder, startOffset);
  POI_Full.addStale(builder, staleOffset);
  POI_Full.addHow(builder, howOffset);
  POI_Full.addType(builder, typeOffset);
  POI_Full.addLat(builder, lat);
  POI_Full.addLon(builder, lon);
  POI_Full.addAlt(builder, alt);
  POI_Full.addAz(builder, az);
  POI_Full.addEl(builder, el);
  POI_Full.addLe(builder, le);
  POI_Full.addCe(builder, ce);
  POI_Full.addElle(builder, elleOffset);
  POI_Full.addCntct(builder, cntctOffset);
  POI_Full.addConf(builder, conf);
  POI_Full.addUrls(builder, urlsOffset);
  POI_Full.addArea(builder, areaOffset);
  POI_Full.addAtext(builder, atextOffset);
  POI_Full.addAgjson(builder, agjsonOffset);
  POI_Full.addAtype(builder, atypeOffset);
  POI_Full.addAndims(builder, andims);
  POI_Full.addAsrid(builder, asrid);
  POI_Full.addCreatedAt(builder, createdAtOffset);
  POI_Full.addCreatedBy(builder, createdByOffset);
  POI_Full.addSourceDl(builder, sourceDlOffset);
  POI_Full.addSource(builder, sourceOffset);
  POI_Full.addDataMode(builder, dataMode);
  POI_Full.addOrigin(builder, originOffset);
  POI_Full.addGroups(builder, groupsOffset);
  POI_Full.addAsset(builder, assetOffset);
  POI_Full.addTags(builder, tagsOffset);
  POI_Full.addSrcTyps(builder, srcTypsOffset);
  POI_Full.addSrcIds(builder, srcIdsOffset);
  POI_Full.addBeNumber(builder, beNumberOffset);
  POI_Full.addOrientation(builder, orientation);
  POI_Full.addOrigNetwork(builder, origNetworkOffset);
  POI_Full.addTransactionId(builder, transactionIdOffset);
  return POI_Full.endPOI_Full(builder);
}

unpack(): POI_FullT {
  return new POI_FullT(
    this.id(),
    this.classificationMarking(),
    this.pps(),
    this.msnid(),
    this.pri(),
    this.trkid(),
    this.bb!.createScalarList<string>(this.idWeatherReport.bind(this), this.idWeatherReport_Length()),
    this.poiid(),
    this.name(),
    this.desc(),
    this.spec(),
    this.ident(),
    this.env(),
    this.plat(),
    this.activity(),
    this.ts(),
    this.start(),
    this.stale(),
    this.how(),
    this.type(),
    this.lat(),
    this.lon(),
    this.alt(),
    this.az(),
    this.el(),
    this.le(),
    this.ce(),
    this.bb!.createScalarList<string>(this.elle.bind(this), this.elle_Length()),
    this.cntct(),
    this.conf(),
    this.bb!.createScalarList<string>(this.urls.bind(this), this.urls_Length()),
    this.area(),
    this.atext(),
    this.agjson(),
    this.atype(),
    this.andims(),
    this.asrid(),
    this.createdAt(),
    this.createdBy(),
    this.sourceDl(),
    this.source(),
    this.dataMode(),
    this.origin(),
    this.bb!.createScalarList<string>(this.groups.bind(this), this.groups_Length()),
    this.asset(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length()),
    this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTyps_Length()),
    this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIds_Length()),
    this.beNumber(),
    this.orientation(),
    this.origNetwork(),
    this.transactionId()
  );
}


unpackTo(_o: POI_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.pps = this.pps();
  _o.msnid = this.msnid();
  _o.pri = this.pri();
  _o.trkid = this.trkid();
  _o.idWeatherReport = this.bb!.createScalarList<string>(this.idWeatherReport.bind(this), this.idWeatherReport_Length());
  _o.poiid = this.poiid();
  _o.name = this.name();
  _o.desc = this.desc();
  _o.spec = this.spec();
  _o.ident = this.ident();
  _o.env = this.env();
  _o.plat = this.plat();
  _o.activity = this.activity();
  _o.ts = this.ts();
  _o.start = this.start();
  _o.stale = this.stale();
  _o.how = this.how();
  _o.type = this.type();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.alt = this.alt();
  _o.az = this.az();
  _o.el = this.el();
  _o.le = this.le();
  _o.ce = this.ce();
  _o.elle = this.bb!.createScalarList<string>(this.elle.bind(this), this.elle_Length());
  _o.cntct = this.cntct();
  _o.conf = this.conf();
  _o.urls = this.bb!.createScalarList<string>(this.urls.bind(this), this.urls_Length());
  _o.area = this.area();
  _o.atext = this.atext();
  _o.agjson = this.agjson();
  _o.atype = this.atype();
  _o.andims = this.andims();
  _o.asrid = this.asrid();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.dataMode = this.dataMode();
  _o.origin = this.origin();
  _o.groups = this.bb!.createScalarList<string>(this.groups.bind(this), this.groups_Length());
  _o.asset = this.asset();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length());
  _o.srcTyps = this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTyps_Length());
  _o.srcIds = this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIds_Length());
  _o.beNumber = this.beNumber();
  _o.orientation = this.orientation();
  _o.origNetwork = this.origNetwork();
  _o.transactionId = this.transactionId();
}
}

export class POI_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public pps: string|Uint8Array|null = null,
  public msnid: string|Uint8Array|null = null,
  public pri: number = 0,
  public trkid: string|Uint8Array|null = null,
  public idWeatherReport: (string)[] = [],
  public poiid: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public desc: string|Uint8Array|null = null,
  public spec: string|Uint8Array|null = null,
  public ident: string|Uint8Array|null = null,
  public env: string|Uint8Array|null = null,
  public plat: string|Uint8Array|null = null,
  public activity: string|Uint8Array|null = null,
  public ts: string|Uint8Array|null = null,
  public start: string|Uint8Array|null = null,
  public stale: string|Uint8Array|null = null,
  public how: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public alt: number = 0.0,
  public az: number = 0.0,
  public el: number = 0.0,
  public le: number = 0.0,
  public ce: number = 0.0,
  public elle: (string)[] = [],
  public cntct: string|Uint8Array|null = null,
  public conf: number = 0.0,
  public urls: (string)[] = [],
  public area: string|Uint8Array|null = null,
  public atext: string|Uint8Array|null = null,
  public agjson: string|Uint8Array|null = null,
  public atype: string|Uint8Array|null = null,
  public andims: number = 0,
  public asrid: number = 0,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public dataMode: POI_Full_dataMode_Enum = POI_Full_dataMode_Enum.REAL,
  public origin: string|Uint8Array|null = null,
  public groups: (string)[] = [],
  public asset: string|Uint8Array|null = null,
  public tags: (string)[] = [],
  public srcTyps: (string)[] = [],
  public srcIds: (string)[] = [],
  public beNumber: string|Uint8Array|null = null,
  public orientation: number = 0.0,
  public origNetwork: string|Uint8Array|null = null,
  public transactionId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const pps = (this.pps !== null ? builder.createString(this.pps!) : 0);
  const msnid = (this.msnid !== null ? builder.createString(this.msnid!) : 0);
  const trkid = (this.trkid !== null ? builder.createString(this.trkid!) : 0);
  const idWeatherReport = POI_Full.createIdWeatherReportVector(builder, builder.createObjectOffsetList(this.idWeatherReport));
  const poiid = (this.poiid !== null ? builder.createString(this.poiid!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const desc = (this.desc !== null ? builder.createString(this.desc!) : 0);
  const spec = (this.spec !== null ? builder.createString(this.spec!) : 0);
  const ident = (this.ident !== null ? builder.createString(this.ident!) : 0);
  const env = (this.env !== null ? builder.createString(this.env!) : 0);
  const plat = (this.plat !== null ? builder.createString(this.plat!) : 0);
  const activity = (this.activity !== null ? builder.createString(this.activity!) : 0);
  const ts = (this.ts !== null ? builder.createString(this.ts!) : 0);
  const start = (this.start !== null ? builder.createString(this.start!) : 0);
  const stale = (this.stale !== null ? builder.createString(this.stale!) : 0);
  const how = (this.how !== null ? builder.createString(this.how!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const elle = POI_Full.createElleVector(builder, builder.createObjectOffsetList(this.elle));
  const cntct = (this.cntct !== null ? builder.createString(this.cntct!) : 0);
  const urls = POI_Full.createUrlsVector(builder, builder.createObjectOffsetList(this.urls));
  const area = (this.area !== null ? builder.createString(this.area!) : 0);
  const atext = (this.atext !== null ? builder.createString(this.atext!) : 0);
  const agjson = (this.agjson !== null ? builder.createString(this.agjson!) : 0);
  const atype = (this.atype !== null ? builder.createString(this.atype!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const groups = POI_Full.createGroupsVector(builder, builder.createObjectOffsetList(this.groups));
  const asset = (this.asset !== null ? builder.createString(this.asset!) : 0);
  const tags = POI_Full.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const srcTyps = POI_Full.createSrcTypsVector(builder, builder.createObjectOffsetList(this.srcTyps));
  const srcIds = POI_Full.createSrcIdsVector(builder, builder.createObjectOffsetList(this.srcIds));
  const beNumber = (this.beNumber !== null ? builder.createString(this.beNumber!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);

  return POI_Full.createPOI_Full(builder,
    id,
    classificationMarking,
    pps,
    msnid,
    this.pri,
    trkid,
    idWeatherReport,
    poiid,
    name,
    desc,
    spec,
    ident,
    env,
    plat,
    activity,
    ts,
    start,
    stale,
    how,
    type,
    this.lat,
    this.lon,
    this.alt,
    this.az,
    this.el,
    this.le,
    this.ce,
    elle,
    cntct,
    this.conf,
    urls,
    area,
    atext,
    agjson,
    atype,
    this.andims,
    this.asrid,
    createdAt,
    createdBy,
    sourceDL,
    source,
    this.dataMode,
    origin,
    groups,
    asset,
    tags,
    srcTyps,
    srcIds,
    beNumber,
    this.orientation,
    origNetwork,
    transactionId
  );
}
}
