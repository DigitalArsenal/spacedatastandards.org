// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Characteristic attributes of a IonoObservation.
 */
export class IonoObservationCharAtts_Abridged implements flatbuffers.IUnpackableObject<IonoObservationCharAtts_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IonoObservationCharAtts_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIonoObservationCharAtts_Abridged(bb:flatbuffers.ByteBuffer, obj?:IonoObservationCharAtts_Abridged):IonoObservationCharAtts_Abridged {
  return (obj || new IonoObservationCharAtts_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIonoObservationCharAtts_Abridged(bb:flatbuffers.ByteBuffer, obj?:IonoObservationCharAtts_Abridged):IonoObservationCharAtts_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IonoObservationCharAtts_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('IONO');
}

/**
 * Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.
 * Example: /// Example: 04
 * Constraints: Minimum length = 0, Maximum length = 3
 */
ursiId():string|null
ursiId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ursiId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.
 * Example: /// Example: hprimeF2
 * Constraints: Minimum length = 0, Maximum length = 16
 */
charName():string|null
charName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.
 * Example: /// Example: 1.26
 * Constraints: No constraints specified.
 */
lowerBound():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.
 * Example: /// Example: 2.57
 * Constraints: No constraints specified.
 */
upperBound():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
 * Example: /// Example: T
 * Constraints: No constraints specified.
 */
q():string|null
q(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
q(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
 * Example: /// Example: K
 * Constraints: No constraints specified.
 */
d():string|null
d(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
d(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the climate model.
 * Example: /// Example: IRI
 * Constraints: Minimum length = 0, Maximum length = 64
 */
climateModelName():string|null
climateModelName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
climateModelName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * List of options for the climate model.
 * Example: /// Example: ['URSI-88', 'No storm']
 * Constraints: No constraints specified.
 */
climateModelOptions(index: number):string
climateModelOptions(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
climateModelOptions(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

climateModelOptionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Input parameters for the climate model.
 * Example: /// Example: ['ISSN1 88.1', 'Option 2']
 * Constraints: No constraints specified.
 */
climateModelInputParams(index: number):string
climateModelInputParams(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
climateModelInputParams(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

climateModelInputParamsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).
 * Example: /// Example: 1sigma
 * Constraints: No constraints specified.
 */
uncertaintyBoundType():string|null
uncertaintyBoundType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
uncertaintyBoundType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startIonoObservationCharAtts_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addUrsiId(builder:flatbuffers.Builder, ursiIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ursiIdOffset, 0);
}

static addCharName(builder:flatbuffers.Builder, charNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, charNameOffset, 0);
}

static addLowerBound(builder:flatbuffers.Builder, lowerBound:number) {
  builder.addFieldFloat64(2, lowerBound, 0.0);
}

static addUpperBound(builder:flatbuffers.Builder, upperBound:number) {
  builder.addFieldFloat64(3, upperBound, 0.0);
}

static addQ(builder:flatbuffers.Builder, qOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, qOffset, 0);
}

static addD(builder:flatbuffers.Builder, dOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, dOffset, 0);
}

static addClimateModelName(builder:flatbuffers.Builder, climateModelNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, climateModelNameOffset, 0);
}

static addClimateModelOptions(builder:flatbuffers.Builder, climateModelOptionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, climateModelOptionsOffset, 0);
}

static createClimateModelOptionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startClimateModelOptionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addClimateModelInputParams(builder:flatbuffers.Builder, climateModelInputParamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, climateModelInputParamsOffset, 0);
}

static createClimateModelInputParamsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startClimateModelInputParamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUncertaintyBoundType(builder:flatbuffers.Builder, uncertaintyBoundTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, uncertaintyBoundTypeOffset, 0);
}

static endIonoObservationCharAtts_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishIonoObservationCharAtts_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO');
}

static finishSizePrefixedIonoObservationCharAtts_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO', true);
}

static createIonoObservationCharAtts_Abridged(builder:flatbuffers.Builder, ursiIdOffset:flatbuffers.Offset, charNameOffset:flatbuffers.Offset, lowerBound:number, upperBound:number, qOffset:flatbuffers.Offset, dOffset:flatbuffers.Offset, climateModelNameOffset:flatbuffers.Offset, climateModelOptionsOffset:flatbuffers.Offset, climateModelInputParamsOffset:flatbuffers.Offset, uncertaintyBoundTypeOffset:flatbuffers.Offset):flatbuffers.Offset {
  IonoObservationCharAtts_Abridged.startIonoObservationCharAtts_Abridged(builder);
  IonoObservationCharAtts_Abridged.addUrsiId(builder, ursiIdOffset);
  IonoObservationCharAtts_Abridged.addCharName(builder, charNameOffset);
  IonoObservationCharAtts_Abridged.addLowerBound(builder, lowerBound);
  IonoObservationCharAtts_Abridged.addUpperBound(builder, upperBound);
  IonoObservationCharAtts_Abridged.addQ(builder, qOffset);
  IonoObservationCharAtts_Abridged.addD(builder, dOffset);
  IonoObservationCharAtts_Abridged.addClimateModelName(builder, climateModelNameOffset);
  IonoObservationCharAtts_Abridged.addClimateModelOptions(builder, climateModelOptionsOffset);
  IonoObservationCharAtts_Abridged.addClimateModelInputParams(builder, climateModelInputParamsOffset);
  IonoObservationCharAtts_Abridged.addUncertaintyBoundType(builder, uncertaintyBoundTypeOffset);
  return IonoObservationCharAtts_Abridged.endIonoObservationCharAtts_Abridged(builder);
}

unpack(): IonoObservationCharAtts_AbridgedT {
  return new IonoObservationCharAtts_AbridgedT(
    this.ursiId(),
    this.charName(),
    this.lowerBound(),
    this.upperBound(),
    this.q(),
    this.d(),
    this.climateModelName(),
    this.bb!.createScalarList<string>(this.climateModelOptions.bind(this), this.climateModelOptions_Length()),
    this.bb!.createScalarList<string>(this.climateModelInputParams.bind(this), this.climateModelInputParams_Length()),
    this.uncertaintyBoundType()
  );
}


unpackTo(_o: IonoObservationCharAtts_AbridgedT): void {
  _o.ursiID = this.ursiId();
  _o.charName = this.charName();
  _o.lowerBound = this.lowerBound();
  _o.upperBound = this.upperBound();
  _o.q = this.q();
  _o.d = this.d();
  _o.climateModelName = this.climateModelName();
  _o.climateModelOptions = this.bb!.createScalarList<string>(this.climateModelOptions.bind(this), this.climateModelOptions_Length());
  _o.climateModelInputParams = this.bb!.createScalarList<string>(this.climateModelInputParams.bind(this), this.climateModelInputParams_Length());
  _o.uncertaintyBoundType = this.uncertaintyBoundType();
}
}

export class IonoObservationCharAtts_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public ursiID: string|Uint8Array|null = null,
  public charName: string|Uint8Array|null = null,
  public lowerBound: number = 0.0,
  public upperBound: number = 0.0,
  public q: string|Uint8Array|null = null,
  public d: string|Uint8Array|null = null,
  public climateModelName: string|Uint8Array|null = null,
  public climateModelOptions: (string)[] = [],
  public climateModelInputParams: (string)[] = [],
  public uncertaintyBoundType: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ursiID = (this.ursiID !== null ? builder.createString(this.ursiID!) : 0);
  const charName = (this.charName !== null ? builder.createString(this.charName!) : 0);
  const q = (this.q !== null ? builder.createString(this.q!) : 0);
  const d = (this.d !== null ? builder.createString(this.d!) : 0);
  const climateModelName = (this.climateModelName !== null ? builder.createString(this.climateModelName!) : 0);
  const climateModelOptions = IonoObservationCharAtts_Abridged.createClimateModelOptionsVector(builder, builder.createObjectOffsetList(this.climateModelOptions));
  const climateModelInputParams = IonoObservationCharAtts_Abridged.createClimateModelInputParamsVector(builder, builder.createObjectOffsetList(this.climateModelInputParams));
  const uncertaintyBoundType = (this.uncertaintyBoundType !== null ? builder.createString(this.uncertaintyBoundType!) : 0);

  return IonoObservationCharAtts_Abridged.createIonoObservationCharAtts_Abridged(builder,
    ursiID,
    charName,
    this.lowerBound,
    this.upperBound,
    q,
    d,
    climateModelName,
    climateModelOptions,
    climateModelInputParams,
    uncertaintyBoundType
  );
}
}
