// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AnalyticImagery_Full_dataMode_Enum } from './analytic-imagery-full-data-mode-enum.js';


/**
 * /// The analytic imagery schema supports data plots and graphics of various types. The records contain general file information, allows for annotations to user-defined areas of interest on the graphics, and supports keyword searching.
 */
export class AnalyticImagery_Full implements flatbuffers.IUnpackableObject<AnalyticImagery_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AnalyticImagery_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAnalyticImagery_Full(bb:flatbuffers.ByteBuffer, obj?:AnalyticImagery_Full):AnalyticImagery_Full {
  return (obj || new AnalyticImagery_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAnalyticImagery_Full(bb:flatbuffers.ByteBuffer, obj?:AnalyticImagery_Full):AnalyticImagery_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AnalyticImagery_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ANAL');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: ANALYTIC-IMAGERY-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * General type of content of this image (CONTOUR, DIAGRAM, HEATMAP, HISTOGRAM, PLOT, SCREENSHOT).
 * Example: /// Example: CONTOUR
 * Constraints: Minimum length = 1, Maximum length = 36
 */
content():string|null
content(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
content(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The message time of this image record, in ISO8601 UTC format with millisecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
msgTime():string|null
msgTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of image associated with this record (GIF, JPG, PNG, TIF).
 * Example: /// Example: JPG
 * Constraints: Minimum length = 1, Maximum length = 16
 */
imageType():string|null
imageType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imageType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The image file name.
 * Example: /// Example: IMAGE-NAME
 * Constraints: Minimum length = 1, Maximum length = 128
 */
filename():string|null
filename(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
filename(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The image file size, in bytes.  The maximum file size for this service is 40,000,000 bytes (40MB). Files exceeding the maximum size will be rejected.
 * Example: /// Example: 7654321
 * Constraints: No constraints specified.
 */
filesize():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

/**
 * The image width (horizontal), in pixels.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
imgWidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The image height (vertical), in pixels.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
imgHeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional field indicating the units that apply to the x-axis of the attached image, when applicable.
 * Example: /// Example: pixels
 * Constraints: Minimum length = 0, Maximum length = 36
 */
xUnits():string|null
xUnits(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
xUnits(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional field indicating the units that apply to the y-axis of the attached image, when applicable.
 * Example: /// Example: pixels
 * Constraints: Minimum length = 0, Maximum length = 36
 */
yUnits():string|null
yUnits(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
yUnits(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional field indicating the units that apply to the z-axis of the attached image, when applicable.
 * Example: /// Example: pixels
 * Constraints: Minimum length = 0, Maximum length = 36
 */
zUnits():string|null
zUnits(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
zUnits(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * User-defined set ID of a sequence of images.  Used to associate related analytic image records.
 * Example: /// Example: IMAGE-IDS
 * Constraints: Minimum length = 0, Maximum length = 36
 */
imageSetId():string|null
imageSetId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imageSetId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of images in an image set.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
imageSetLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The sequence number of an image within an image set.  If null, then it is assumed that the order of images in an imageSet is not relevant.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
sequenceId():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Description of the image content and utility.
 * Example: /// Example: Image description
 * Constraints: Minimum length = 1, Maximum length = 512
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The start time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
dataStart():string|null
dataStart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataStart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The stop time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
dataStop():string|null
dataStop(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataStop(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Rectangular annotation limits, specified in pixels, as an array of arrays of the coordinates [ [UL1x, UL1y], [UR1x, UR1y], [LR1x, LR1y], [LL1x, LL1y] ], indicating the corners of a rectangle beginning with the Upper Left (UL) and moving clockwise. Allows the image provider to highlight one or more rectangular area(s) of interest. The array must contain Nx4 two-element arrays, where N is the number of rectangles of interest.  The associated annotation(s) should be included in the annText array.
 * Example: /// Example: [[1, 1], [1, 2], [1, 3], [1, 4]]
 * Constraints: No constraints specified.
 */
annLims(index: number):string
annLims(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
annLims(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

annLimsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Annotation text, a string array of annotation(s) corresponding to the rectangular areas specified in annLims.  This array contains the annotation text associated with the areas of interest indicated in annLims, in order.  This array should contain one annotation per four values of the area (annLims) array.
 * Example: /// Example: ['rec1', 'rec2']
 * Constraints: No constraints specified.
 */
annText(index: number):string
annText(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
annText(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

annTextLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of searchable keywords for this analytic imagery record.
 * Example: /// Example: ['Key1', 'Key2']
 * Constraints: No constraints specified.
 */
keywords(index: number):string
keywords(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
keywords(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

keywordsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
 * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
 * Constraints: No constraints specified.
 */
area():string|null
area(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
area(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
 * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
 * Constraints: No constraints specified.
 */
atext():string|null
atext(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atext(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
 * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
 * Constraints: No constraints specified.
 */
agjson():string|null
agjson(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
agjson(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of region as projected on the ground.
 * Example: /// Example: POLYGON
 * Constraints: Minimum length = 0, Maximum length = 128
 */
atype():string|null
atype(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atype(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of dimensions of the geometry depicted by region.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
andims():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Geographical spatial_ref_sys for region.
 * Example: /// Example: 4326
 * Constraints: No constraints specified.
 */
asrid():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Assessed satellite ID (NORAD RSO object number).  The 'satId' and 'satIdConf' arrays must match in size.
 * Example: /// Example: [12004, 12005]
 * Constraints: No constraints specified.
 */
satId(index: number):string
satId(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
satId(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

satIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Assessed satellite confidence corresponding to an assessment ID.  Values are between 0.0 and 1.0.  The 'satId' and 'satIdConf' arrays must match in size.
 * Example: /// Example: [0.98, 0.22]
 * Constraints: No constraints specified.
 */
satIdConf(index: number):string
satIdConf(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
satIdConf(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

satIdConfLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this image. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
 * Example: /// Example: ['MTI', 'POI']
 * Constraints: No constraints specified.
 */
srcTyps(index: number):string
srcTyps(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcTyps(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcTypsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UUIDs of the UDL data records that are related to this image. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
 * Example: /// Example: ['DOA_ID', 'DWELL_ID']
 * Constraints: No constraints specified.
 */
srcIds(index: number):string
srcIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['TAG1', 'TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * MD5 checksum value of the file. The ingest/create operation will automatically generate the value.
 * Example: /// Example: 123
 * Constraints: Minimum length = 0, Maximum length = 256
 */
checksumValue():string|null
checksumValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
checksumValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: ORIGIN
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: TST1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AnalyticImagery_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AnalyticImagery_Full_dataMode_Enum.REAL;
}

static startAnalyticImagery_Full(builder:flatbuffers.Builder) {
  builder.startObject(41);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, contentOffset, 0);
}

static addMsgTime(builder:flatbuffers.Builder, msgTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, msgTimeOffset, 0);
}

static addImageType(builder:flatbuffers.Builder, imageTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, imageTypeOffset, 0);
}

static addFilename(builder:flatbuffers.Builder, filenameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, filenameOffset, 0);
}

static addFilesize(builder:flatbuffers.Builder, filesize:bigint) {
  builder.addFieldInt64(6, filesize, BigInt('0'));
}

static addImgWidth(builder:flatbuffers.Builder, imgWidth:number) {
  builder.addFieldInt32(7, imgWidth, 0);
}

static addImgHeight(builder:flatbuffers.Builder, imgHeight:number) {
  builder.addFieldInt32(8, imgHeight, 0);
}

static addXUnits(builder:flatbuffers.Builder, xUnitsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, xUnitsOffset, 0);
}

static addYUnits(builder:flatbuffers.Builder, yUnitsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, yUnitsOffset, 0);
}

static addZUnits(builder:flatbuffers.Builder, zUnitsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, zUnitsOffset, 0);
}

static addImageSetId(builder:flatbuffers.Builder, imageSetIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, imageSetIdOffset, 0);
}

static addImageSetLength(builder:flatbuffers.Builder, imageSetLength:number) {
  builder.addFieldInt32(13, imageSetLength, 0);
}

static addSequenceId(builder:flatbuffers.Builder, sequenceId:number) {
  builder.addFieldInt32(14, sequenceId, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, descriptionOffset, 0);
}

static addDataStart(builder:flatbuffers.Builder, dataStartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, dataStartOffset, 0);
}

static addDataStop(builder:flatbuffers.Builder, dataStopOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, dataStopOffset, 0);
}

static addAnnLims(builder:flatbuffers.Builder, annLimsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, annLimsOffset, 0);
}

static createAnnLimsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAnnLimsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAnnText(builder:flatbuffers.Builder, annTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, annTextOffset, 0);
}

static createAnnTextVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAnnTextVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addKeywords(builder:flatbuffers.Builder, keywordsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, keywordsOffset, 0);
}

static createKeywordsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeywordsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addArea(builder:flatbuffers.Builder, areaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, areaOffset, 0);
}

static addAtext(builder:flatbuffers.Builder, atextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, atextOffset, 0);
}

static addAgjson(builder:flatbuffers.Builder, agjsonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, agjsonOffset, 0);
}

static addAtype(builder:flatbuffers.Builder, atypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, atypeOffset, 0);
}

static addAndims(builder:flatbuffers.Builder, andims:number) {
  builder.addFieldInt32(25, andims, 0);
}

static addAsrid(builder:flatbuffers.Builder, asrid:number) {
  builder.addFieldInt32(26, asrid, 0);
}

static addSatId(builder:flatbuffers.Builder, satIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, satIdOffset, 0);
}

static createSatIdVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSatIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSatIdConf(builder:flatbuffers.Builder, satIdConfOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, satIdConfOffset, 0);
}

static createSatIdConfVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSatIdConfVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSrcTyps(builder:flatbuffers.Builder, srcTypsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, srcTypsOffset, 0);
}

static createSrcTypsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcTypsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSrcIds(builder:flatbuffers.Builder, srcIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, srcIdsOffset, 0);
}

static createSrcIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addChecksumValue(builder:flatbuffers.Builder, checksumValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, checksumValueOffset, 0);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, transactionIdOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, origNetworkOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, sourceDlOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AnalyticImagery_Full_dataMode_Enum) {
  builder.addFieldInt8(40, dataMode, AnalyticImagery_Full_dataMode_Enum.REAL);
}

static endAnalyticImagery_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAnalyticImagery_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ANAL');
}

static finishSizePrefixedAnalyticImagery_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ANAL', true);
}

static createAnalyticImagery_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, contentOffset:flatbuffers.Offset, msgTimeOffset:flatbuffers.Offset, imageTypeOffset:flatbuffers.Offset, filenameOffset:flatbuffers.Offset, filesize:bigint, imgWidth:number, imgHeight:number, xUnitsOffset:flatbuffers.Offset, yUnitsOffset:flatbuffers.Offset, zUnitsOffset:flatbuffers.Offset, imageSetIdOffset:flatbuffers.Offset, imageSetLength:number, sequenceId:number, descriptionOffset:flatbuffers.Offset, dataStartOffset:flatbuffers.Offset, dataStopOffset:flatbuffers.Offset, annLimsOffset:flatbuffers.Offset, annTextOffset:flatbuffers.Offset, keywordsOffset:flatbuffers.Offset, areaOffset:flatbuffers.Offset, atextOffset:flatbuffers.Offset, agjsonOffset:flatbuffers.Offset, atypeOffset:flatbuffers.Offset, andims:number, asrid:number, satIdOffset:flatbuffers.Offset, satIdConfOffset:flatbuffers.Offset, srcTypsOffset:flatbuffers.Offset, srcIdsOffset:flatbuffers.Offset, tagsOffset:flatbuffers.Offset, checksumValueOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, dataMode:AnalyticImagery_Full_dataMode_Enum):flatbuffers.Offset {
  AnalyticImagery_Full.startAnalyticImagery_Full(builder);
  AnalyticImagery_Full.addId(builder, idOffset);
  AnalyticImagery_Full.addClassificationMarking(builder, classificationMarkingOffset);
  AnalyticImagery_Full.addContent(builder, contentOffset);
  AnalyticImagery_Full.addMsgTime(builder, msgTimeOffset);
  AnalyticImagery_Full.addImageType(builder, imageTypeOffset);
  AnalyticImagery_Full.addFilename(builder, filenameOffset);
  AnalyticImagery_Full.addFilesize(builder, filesize);
  AnalyticImagery_Full.addImgWidth(builder, imgWidth);
  AnalyticImagery_Full.addImgHeight(builder, imgHeight);
  AnalyticImagery_Full.addXUnits(builder, xUnitsOffset);
  AnalyticImagery_Full.addYUnits(builder, yUnitsOffset);
  AnalyticImagery_Full.addZUnits(builder, zUnitsOffset);
  AnalyticImagery_Full.addImageSetId(builder, imageSetIdOffset);
  AnalyticImagery_Full.addImageSetLength(builder, imageSetLength);
  AnalyticImagery_Full.addSequenceId(builder, sequenceId);
  AnalyticImagery_Full.addDescription(builder, descriptionOffset);
  AnalyticImagery_Full.addDataStart(builder, dataStartOffset);
  AnalyticImagery_Full.addDataStop(builder, dataStopOffset);
  AnalyticImagery_Full.addAnnLims(builder, annLimsOffset);
  AnalyticImagery_Full.addAnnText(builder, annTextOffset);
  AnalyticImagery_Full.addKeywords(builder, keywordsOffset);
  AnalyticImagery_Full.addArea(builder, areaOffset);
  AnalyticImagery_Full.addAtext(builder, atextOffset);
  AnalyticImagery_Full.addAgjson(builder, agjsonOffset);
  AnalyticImagery_Full.addAtype(builder, atypeOffset);
  AnalyticImagery_Full.addAndims(builder, andims);
  AnalyticImagery_Full.addAsrid(builder, asrid);
  AnalyticImagery_Full.addSatId(builder, satIdOffset);
  AnalyticImagery_Full.addSatIdConf(builder, satIdConfOffset);
  AnalyticImagery_Full.addSrcTyps(builder, srcTypsOffset);
  AnalyticImagery_Full.addSrcIds(builder, srcIdsOffset);
  AnalyticImagery_Full.addTags(builder, tagsOffset);
  AnalyticImagery_Full.addChecksumValue(builder, checksumValueOffset);
  AnalyticImagery_Full.addTransactionId(builder, transactionIdOffset);
  AnalyticImagery_Full.addCreatedAt(builder, createdAtOffset);
  AnalyticImagery_Full.addCreatedBy(builder, createdByOffset);
  AnalyticImagery_Full.addSource(builder, sourceOffset);
  AnalyticImagery_Full.addOrigin(builder, originOffset);
  AnalyticImagery_Full.addOrigNetwork(builder, origNetworkOffset);
  AnalyticImagery_Full.addSourceDl(builder, sourceDlOffset);
  AnalyticImagery_Full.addDataMode(builder, dataMode);
  return AnalyticImagery_Full.endAnalyticImagery_Full(builder);
}

unpack(): AnalyticImagery_FullT {
  return new AnalyticImagery_FullT(
    this.id(),
    this.classificationMarking(),
    this.content(),
    this.msgTime(),
    this.imageType(),
    this.filename(),
    this.filesize(),
    this.imgWidth(),
    this.imgHeight(),
    this.xUnits(),
    this.yUnits(),
    this.zUnits(),
    this.imageSetId(),
    this.imageSetLength(),
    this.sequenceId(),
    this.description(),
    this.dataStart(),
    this.dataStop(),
    this.bb!.createScalarList<string>(this.annLims.bind(this), this.annLims_Length()),
    this.bb!.createScalarList<string>(this.annText.bind(this), this.annText_Length()),
    this.bb!.createScalarList<string>(this.keywords.bind(this), this.keywords_Length()),
    this.area(),
    this.atext(),
    this.agjson(),
    this.atype(),
    this.andims(),
    this.asrid(),
    this.bb!.createScalarList<string>(this.satId.bind(this), this.satId_Length()),
    this.bb!.createScalarList<string>(this.satIdConf.bind(this), this.satIdConf_Length()),
    this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTyps_Length()),
    this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIds_Length()),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length()),
    this.checksumValue(),
    this.transactionId(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.sourceDl(),
    this.dataMode()
  );
}


unpackTo(_o: AnalyticImagery_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.content = this.content();
  _o.msgTime = this.msgTime();
  _o.imageType = this.imageType();
  _o.filename = this.filename();
  _o.filesize = this.filesize();
  _o.imgWidth = this.imgWidth();
  _o.imgHeight = this.imgHeight();
  _o.xUnits = this.xUnits();
  _o.yUnits = this.yUnits();
  _o.zUnits = this.zUnits();
  _o.imageSetId = this.imageSetId();
  _o.imageSetLength = this.imageSetLength();
  _o.sequenceId = this.sequenceId();
  _o.description = this.description();
  _o.dataStart = this.dataStart();
  _o.dataStop = this.dataStop();
  _o.annLims = this.bb!.createScalarList<string>(this.annLims.bind(this), this.annLims_Length());
  _o.annText = this.bb!.createScalarList<string>(this.annText.bind(this), this.annText_Length());
  _o.keywords = this.bb!.createScalarList<string>(this.keywords.bind(this), this.keywords_Length());
  _o.area = this.area();
  _o.atext = this.atext();
  _o.agjson = this.agjson();
  _o.atype = this.atype();
  _o.andims = this.andims();
  _o.asrid = this.asrid();
  _o.satId = this.bb!.createScalarList<string>(this.satId.bind(this), this.satId_Length());
  _o.satIdConf = this.bb!.createScalarList<string>(this.satIdConf.bind(this), this.satIdConf_Length());
  _o.srcTyps = this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTyps_Length());
  _o.srcIds = this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIds_Length());
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length());
  _o.checksumValue = this.checksumValue();
  _o.transactionId = this.transactionId();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.sourceDL = this.sourceDl();
  _o.dataMode = this.dataMode();
}
}

export class AnalyticImagery_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public content: string|Uint8Array|null = null,
  public msgTime: string|Uint8Array|null = null,
  public imageType: string|Uint8Array|null = null,
  public filename: string|Uint8Array|null = null,
  public filesize: bigint = BigInt('0'),
  public imgWidth: number = 0,
  public imgHeight: number = 0,
  public xUnits: string|Uint8Array|null = null,
  public yUnits: string|Uint8Array|null = null,
  public zUnits: string|Uint8Array|null = null,
  public imageSetId: string|Uint8Array|null = null,
  public imageSetLength: number = 0,
  public sequenceId: number = 0,
  public description: string|Uint8Array|null = null,
  public dataStart: string|Uint8Array|null = null,
  public dataStop: string|Uint8Array|null = null,
  public annLims: (string)[] = [],
  public annText: (string)[] = [],
  public keywords: (string)[] = [],
  public area: string|Uint8Array|null = null,
  public atext: string|Uint8Array|null = null,
  public agjson: string|Uint8Array|null = null,
  public atype: string|Uint8Array|null = null,
  public andims: number = 0,
  public asrid: number = 0,
  public satId: (string)[] = [],
  public satIdConf: (string)[] = [],
  public srcTyps: (string)[] = [],
  public srcIds: (string)[] = [],
  public tags: (string)[] = [],
  public checksumValue: string|Uint8Array|null = null,
  public transactionId: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public dataMode: AnalyticImagery_Full_dataMode_Enum = AnalyticImagery_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const content = (this.content !== null ? builder.createString(this.content!) : 0);
  const msgTime = (this.msgTime !== null ? builder.createString(this.msgTime!) : 0);
  const imageType = (this.imageType !== null ? builder.createString(this.imageType!) : 0);
  const filename = (this.filename !== null ? builder.createString(this.filename!) : 0);
  const xUnits = (this.xUnits !== null ? builder.createString(this.xUnits!) : 0);
  const yUnits = (this.yUnits !== null ? builder.createString(this.yUnits!) : 0);
  const zUnits = (this.zUnits !== null ? builder.createString(this.zUnits!) : 0);
  const imageSetId = (this.imageSetId !== null ? builder.createString(this.imageSetId!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const dataStart = (this.dataStart !== null ? builder.createString(this.dataStart!) : 0);
  const dataStop = (this.dataStop !== null ? builder.createString(this.dataStop!) : 0);
  const annLims = AnalyticImagery_Full.createAnnLimsVector(builder, builder.createObjectOffsetList(this.annLims));
  const annText = AnalyticImagery_Full.createAnnTextVector(builder, builder.createObjectOffsetList(this.annText));
  const keywords = AnalyticImagery_Full.createKeywordsVector(builder, builder.createObjectOffsetList(this.keywords));
  const area = (this.area !== null ? builder.createString(this.area!) : 0);
  const atext = (this.atext !== null ? builder.createString(this.atext!) : 0);
  const agjson = (this.agjson !== null ? builder.createString(this.agjson!) : 0);
  const atype = (this.atype !== null ? builder.createString(this.atype!) : 0);
  const satId = AnalyticImagery_Full.createSatIdVector(builder, builder.createObjectOffsetList(this.satId));
  const satIdConf = AnalyticImagery_Full.createSatIdConfVector(builder, builder.createObjectOffsetList(this.satIdConf));
  const srcTyps = AnalyticImagery_Full.createSrcTypsVector(builder, builder.createObjectOffsetList(this.srcTyps));
  const srcIds = AnalyticImagery_Full.createSrcIdsVector(builder, builder.createObjectOffsetList(this.srcIds));
  const tags = AnalyticImagery_Full.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const checksumValue = (this.checksumValue !== null ? builder.createString(this.checksumValue!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);

  return AnalyticImagery_Full.createAnalyticImagery_Full(builder,
    id,
    classificationMarking,
    content,
    msgTime,
    imageType,
    filename,
    this.filesize,
    this.imgWidth,
    this.imgHeight,
    xUnits,
    yUnits,
    zUnits,
    imageSetId,
    this.imageSetLength,
    this.sequenceId,
    description,
    dataStart,
    dataStop,
    annLims,
    annText,
    keywords,
    area,
    atext,
    agjson,
    atype,
    this.andims,
    this.asrid,
    satId,
    satIdConf,
    srcTyps,
    srcIds,
    tags,
    checksumValue,
    transactionId,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    sourceDL,
    this.dataMode
  );
}
}
