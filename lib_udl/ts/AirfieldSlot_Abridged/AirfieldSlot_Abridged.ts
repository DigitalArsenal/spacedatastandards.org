// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AirfieldSlot_Abridged_acSlotCat_Enum } from './AirfieldSlot_Abridged_acSlotCat_Enum.js';
import { AirfieldSlot_Abridged_dataMode_Enum } from './AirfieldSlot_Abridged_dataMode_Enum.js';
import { AirfieldSlot_Abridged_type_Enum } from './AirfieldSlot_Abridged_type_Enum.js';


/**
 * /// Airfield capacity data. Contains data associated with the airfieldslots available for parking, working, takeoff, and landing at the airfield, as well as the types of aircraft that can be accommodated.
 */
export class AirfieldSlot_Abridged implements flatbuffers.IUnpackableObject<AirfieldSlot_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirfieldSlot_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirfieldSlot_Abridged(bb:flatbuffers.ByteBuffer, obj?:AirfieldSlot_Abridged):AirfieldSlot_Abridged {
  return (obj || new AirfieldSlot_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirfieldSlot_Abridged(bb:flatbuffers.ByteBuffer, obj?:AirfieldSlot_Abridged):AirfieldSlot_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirfieldSlot_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRF');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the airfield where this slot is located.
 * Example: /// Example: USAF Academy AFLD
 * Constraints: Minimum length = 1, Maximum length = 64
 */
airfieldName():string|null
airfieldName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
airfieldName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The International Civil Aviation Organization (ICAO) code of the airfield.
 * Example: /// Example: KCOS
 * Constraints: Minimum length = 0, Maximum length = 4
 */
icao():string|null
icao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
icao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Airfield for which this slot information applies.
 * Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idAirfield():string|null
idAirfield(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idAirfield(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate airfield identifier provided by the source.
 * Example: /// Example: ALT-AIRFIELD-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
altAirfieldId():string|null
altAirfieldId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altAirfieldId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of this slot.
 * Example: /// Example: Apron 5
 * Constraints: Minimum length = 1, Maximum length = 32
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING, OTHER).
 * Example: /// Example: WORKING
 * Constraints: Minimum length = 0, Maximum length = 7
 */
type():AirfieldSlot_Abridged_type_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AirfieldSlot_Abridged_type_Enum.WORKING;
}

/**
 * Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL, OTHER).
 * Example: /// Example: WIDE
 * Constraints: Minimum length = 0, Maximum length = 6
 */
acSlotCat():AirfieldSlot_Abridged_acSlotCat_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AirfieldSlot_Abridged_acSlotCat_Enum.WIDE;
}

/**
 * Number of aircraft that can fit in this slot at the same time.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
capacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Zulu time this slot is first available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
 * Example: /// Example: 0000Z
 * Constraints: Minimum length = 0, Maximum length = 5
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Latest zulu time this slot is available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
 * Example: /// Example: 2359Z
 * Constraints: Minimum length = 0, Maximum length = 5
 */
endTime():string|null
endTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Minimum time that must elapse between different aircraft leaving and entering this slot, in minutes.
 * Example: /// Example: 7
 * Constraints: No constraints specified.
 */
minSeparation():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional notes/comments for this airfield slot.
 * Example: /// Example: Notes for an airfield slot.
 * Constraints: Minimum length = 0, Maximum length = 128
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AirfieldSlot_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AirfieldSlot_Abridged_dataMode_Enum.REAL;
}

static startAirfieldSlot_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addAirfieldName(builder:flatbuffers.Builder, airfieldNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, airfieldNameOffset, 0);
}

static addIcao(builder:flatbuffers.Builder, icaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, icaoOffset, 0);
}

static addIdAirfield(builder:flatbuffers.Builder, idAirfieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idAirfieldOffset, 0);
}

static addAltAirfieldId(builder:flatbuffers.Builder, altAirfieldIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, altAirfieldIdOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, nameOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:AirfieldSlot_Abridged_type_Enum) {
  builder.addFieldInt8(7, type, AirfieldSlot_Abridged_type_Enum.WORKING);
}

static addAcSlotCat(builder:flatbuffers.Builder, acSlotCat:AirfieldSlot_Abridged_acSlotCat_Enum) {
  builder.addFieldInt8(8, acSlotCat, AirfieldSlot_Abridged_acSlotCat_Enum.WIDE);
}

static addCapacity(builder:flatbuffers.Builder, capacity:number) {
  builder.addFieldInt32(9, capacity, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, startTimeOffset, 0);
}

static addEndTime(builder:flatbuffers.Builder, endTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, endTimeOffset, 0);
}

static addMinSeparation(builder:flatbuffers.Builder, minSeparation:number) {
  builder.addFieldInt32(12, minSeparation, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, notesOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, createdByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AirfieldSlot_Abridged_dataMode_Enum) {
  builder.addFieldInt8(20, dataMode, AirfieldSlot_Abridged_dataMode_Enum.REAL);
}

static endAirfieldSlot_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirfieldSlot_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRF');
}

static finishSizePrefixedAirfieldSlot_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRF', true);
}

static createAirfieldSlot_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, airfieldNameOffset:flatbuffers.Offset, icaoOffset:flatbuffers.Offset, idAirfieldOffset:flatbuffers.Offset, altAirfieldIdOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, type:AirfieldSlot_Abridged_type_Enum, acSlotCat:AirfieldSlot_Abridged_acSlotCat_Enum, capacity:number, startTimeOffset:flatbuffers.Offset, endTimeOffset:flatbuffers.Offset, minSeparation:number, notesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:AirfieldSlot_Abridged_dataMode_Enum):flatbuffers.Offset {
  AirfieldSlot_Abridged.startAirfieldSlot_Abridged(builder);
  AirfieldSlot_Abridged.addId(builder, idOffset);
  AirfieldSlot_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  AirfieldSlot_Abridged.addAirfieldName(builder, airfieldNameOffset);
  AirfieldSlot_Abridged.addIcao(builder, icaoOffset);
  AirfieldSlot_Abridged.addIdAirfield(builder, idAirfieldOffset);
  AirfieldSlot_Abridged.addAltAirfieldId(builder, altAirfieldIdOffset);
  AirfieldSlot_Abridged.addName(builder, nameOffset);
  AirfieldSlot_Abridged.addType(builder, type);
  AirfieldSlot_Abridged.addAcSlotCat(builder, acSlotCat);
  AirfieldSlot_Abridged.addCapacity(builder, capacity);
  AirfieldSlot_Abridged.addStartTime(builder, startTimeOffset);
  AirfieldSlot_Abridged.addEndTime(builder, endTimeOffset);
  AirfieldSlot_Abridged.addMinSeparation(builder, minSeparation);
  AirfieldSlot_Abridged.addNotes(builder, notesOffset);
  AirfieldSlot_Abridged.addCreatedAt(builder, createdAtOffset);
  AirfieldSlot_Abridged.addCreatedBy(builder, createdByOffset);
  AirfieldSlot_Abridged.addSourceDl(builder, sourceDlOffset);
  AirfieldSlot_Abridged.addSource(builder, sourceOffset);
  AirfieldSlot_Abridged.addOrigin(builder, originOffset);
  AirfieldSlot_Abridged.addOrigNetwork(builder, origNetworkOffset);
  AirfieldSlot_Abridged.addDataMode(builder, dataMode);
  return AirfieldSlot_Abridged.endAirfieldSlot_Abridged(builder);
}

unpack(): AirfieldSlot_AbridgedT {
  return new AirfieldSlot_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.airfieldName(),
    this.icao(),
    this.idAirfield(),
    this.altAirfieldId(),
    this.name(),
    this.type(),
    this.acSlotCat(),
    this.capacity(),
    this.startTime(),
    this.endTime(),
    this.minSeparation(),
    this.notes(),
    this.createdAt(),
    this.createdBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: AirfieldSlot_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.airfieldName = this.airfieldName();
  _o.icao = this.icao();
  _o.idAirfield = this.idAirfield();
  _o.altAirfieldId = this.altAirfieldId();
  _o.name = this.name();
  _o.type = this.type();
  _o.acSlotCat = this.acSlotCat();
  _o.capacity = this.capacity();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.minSeparation = this.minSeparation();
  _o.notes = this.notes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.sourceDl = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class AirfieldSlot_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public airfieldName: string|Uint8Array|null = null,
  public icao: string|Uint8Array|null = null,
  public idAirfield: string|Uint8Array|null = null,
  public altAirfieldId: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public type: AirfieldSlot_Abridged_type_Enum = AirfieldSlot_Abridged_type_Enum.WORKING,
  public acSlotCat: AirfieldSlot_Abridged_acSlotCat_Enum = AirfieldSlot_Abridged_acSlotCat_Enum.WIDE,
  public capacity: number = 0,
  public startTime: string|Uint8Array|null = null,
  public endTime: string|Uint8Array|null = null,
  public minSeparation: number = 0,
  public notes: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: AirfieldSlot_Abridged_dataMode_Enum = AirfieldSlot_Abridged_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const airfieldName = (this.airfieldName !== null ? builder.createString(this.airfieldName!) : 0);
  const icao = (this.icao !== null ? builder.createString(this.icao!) : 0);
  const idAirfield = (this.idAirfield !== null ? builder.createString(this.idAirfield!) : 0);
  const altAirfieldId = (this.altAirfieldId !== null ? builder.createString(this.altAirfieldId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const endTime = (this.endTime !== null ? builder.createString(this.endTime!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return AirfieldSlot_Abridged.createAirfieldSlot_Abridged(builder,
    id,
    classificationMarking,
    airfieldName,
    icao,
    idAirfield,
    altAirfieldId,
    name,
    this.type,
    this.acSlotCat,
    this.capacity,
    startTime,
    endTime,
    this.minSeparation,
    notes,
    createdAt,
    createdBy,
    sourceDl,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
