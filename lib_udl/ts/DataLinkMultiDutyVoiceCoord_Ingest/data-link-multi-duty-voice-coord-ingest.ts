// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
 */
export class DataLinkMultiDutyVoiceCoord_Ingest implements flatbuffers.IUnpackableObject<DataLinkMultiDutyVoiceCoord_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataLinkMultiDutyVoiceCoord_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataLinkMultiDutyVoiceCoord_Ingest(bb:flatbuffers.ByteBuffer, obj?:DataLinkMultiDutyVoiceCoord_Ingest):DataLinkMultiDutyVoiceCoord_Ingest {
  return (obj || new DataLinkMultiDutyVoiceCoord_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataLinkMultiDutyVoiceCoord_Ingest(bb:flatbuffers.ByteBuffer, obj?:DataLinkMultiDutyVoiceCoord_Ingest):DataLinkMultiDutyVoiceCoord_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataLinkMultiDutyVoiceCoord_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DATA');
}

/**
 * Designator assigned to a voice interface control and coordination net for multilink coordination (e.g. ADCCN, DCN, VPN, etc.).
 * Example: /// Example: VPN
 * Constraints: Minimum length = 0, Maximum length = 5
 */
multiVoiceNetDes():string|null
multiVoiceNetDes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
multiVoiceNetDes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Designator used in nonsecure communications to refer to a radio frequency for multilink coordination.
 * Example: /// Example: ST300A
 * Constraints: Minimum length = 0, Maximum length = 8
 */
multiFreqDes():string|null
multiFreqDes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
multiFreqDes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Priority of a communication circuit, channel or frequency for multilink coordination (e.g. P - Primary, M - Monitor).
 * Example: /// Example: P
 * Constraints: Minimum length = 0, Maximum length = 1
 */
multiCommPri():string|null
multiCommPri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
multiCommPri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of telephone numbers or contact frequencies used for interface control for multilink coordination.
 * Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
 * Constraints: No constraints specified.
 */
multiTeleFreqNums(index: number):string
multiTeleFreqNums(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
multiTeleFreqNums(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

multiTeleFreqNumsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDataLinkMultiDutyVoiceCoord_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addMultiVoiceNetDes(builder:flatbuffers.Builder, multiVoiceNetDesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, multiVoiceNetDesOffset, 0);
}

static addMultiFreqDes(builder:flatbuffers.Builder, multiFreqDesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, multiFreqDesOffset, 0);
}

static addMultiCommPri(builder:flatbuffers.Builder, multiCommPriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, multiCommPriOffset, 0);
}

static addMultiTeleFreqNums(builder:flatbuffers.Builder, multiTeleFreqNumsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, multiTeleFreqNumsOffset, 0);
}

static createMultiTeleFreqNumsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMultiTeleFreqNumsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDataLinkMultiDutyVoiceCoord_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDataLinkMultiDutyVoiceCoord_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA');
}

static finishSizePrefixedDataLinkMultiDutyVoiceCoord_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA', true);
}

static createDataLinkMultiDutyVoiceCoord_Ingest(builder:flatbuffers.Builder, multiVoiceNetDesOffset:flatbuffers.Offset, multiFreqDesOffset:flatbuffers.Offset, multiCommPriOffset:flatbuffers.Offset, multiTeleFreqNumsOffset:flatbuffers.Offset):flatbuffers.Offset {
  DataLinkMultiDutyVoiceCoord_Ingest.startDataLinkMultiDutyVoiceCoord_Ingest(builder);
  DataLinkMultiDutyVoiceCoord_Ingest.addMultiVoiceNetDes(builder, multiVoiceNetDesOffset);
  DataLinkMultiDutyVoiceCoord_Ingest.addMultiFreqDes(builder, multiFreqDesOffset);
  DataLinkMultiDutyVoiceCoord_Ingest.addMultiCommPri(builder, multiCommPriOffset);
  DataLinkMultiDutyVoiceCoord_Ingest.addMultiTeleFreqNums(builder, multiTeleFreqNumsOffset);
  return DataLinkMultiDutyVoiceCoord_Ingest.endDataLinkMultiDutyVoiceCoord_Ingest(builder);
}

unpack(): DataLinkMultiDutyVoiceCoord_IngestT {
  return new DataLinkMultiDutyVoiceCoord_IngestT(
    this.multiVoiceNetDes(),
    this.multiFreqDes(),
    this.multiCommPri(),
    this.bb!.createScalarList<string>(this.multiTeleFreqNums.bind(this), this.multiTeleFreqNums_Length())
  );
}


unpackTo(_o: DataLinkMultiDutyVoiceCoord_IngestT): void {
  _o.multiVoiceNetDes = this.multiVoiceNetDes();
  _o.multiFreqDes = this.multiFreqDes();
  _o.multiCommPri = this.multiCommPri();
  _o.multiTeleFreqNums = this.bb!.createScalarList<string>(this.multiTeleFreqNums.bind(this), this.multiTeleFreqNums_Length());
}
}

export class DataLinkMultiDutyVoiceCoord_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public multiVoiceNetDes: string|Uint8Array|null = null,
  public multiFreqDes: string|Uint8Array|null = null,
  public multiCommPri: string|Uint8Array|null = null,
  public multiTeleFreqNums: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const multiVoiceNetDes = (this.multiVoiceNetDes !== null ? builder.createString(this.multiVoiceNetDes!) : 0);
  const multiFreqDes = (this.multiFreqDes !== null ? builder.createString(this.multiFreqDes!) : 0);
  const multiCommPri = (this.multiCommPri !== null ? builder.createString(this.multiCommPri!) : 0);
  const multiTeleFreqNums = DataLinkMultiDutyVoiceCoord_Ingest.createMultiTeleFreqNumsVector(builder, builder.createObjectOffsetList(this.multiTeleFreqNums));

  return DataLinkMultiDutyVoiceCoord_Ingest.createDataLinkMultiDutyVoiceCoord_Ingest(builder,
    multiVoiceNetDes,
    multiFreqDes,
    multiCommPri,
    multiTeleFreqNums
  );
}
}
