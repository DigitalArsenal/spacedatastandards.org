// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Array of times in number of seconds passed since January 1st, 1970  with the same dimensions as power.
 */
export class IonoObservationTime_Ingest implements flatbuffers.IUnpackableObject<IonoObservationTime_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IonoObservationTime_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIonoObservationTime_Ingest(bb:flatbuffers.ByteBuffer, obj?:IonoObservationTime_Ingest):IonoObservationTime_Ingest {
  return (obj || new IonoObservationTime_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIonoObservationTime_Ingest(bb:flatbuffers.ByteBuffer, obj?:IonoObservationTime_Ingest):IonoObservationTime_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IonoObservationTime_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('IONO');
}

/**
 * Array of integers of the time array dimensions.
 * Example: /// Example: [1, 2]
 * Constraints: No constraints specified.
 */
dimensions(index: number):string
dimensions(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
dimensions(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dimensionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of names for dimensions.
 * Example: /// Example: ['NAME1', 'NAME2']
 * Constraints: No constraints specified.
 */
dimensionName(index: number):string
dimensionName(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
dimensionName(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dimensionNameLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The notes indicate the scheme and accuracy.
 * Example: /// Example: NOTES
 * Constraints: Minimum length = 0, Maximum length = 512
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of times in number of seconds passed since January 1st, 1970 with the same dimensions as power.
 * Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
 * Constraints: No constraints specified.
 */
data(index: number):string
data(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
data(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startIonoObservationTime_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addDimensions(builder:flatbuffers.Builder, dimensionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dimensionsOffset, 0);
}

static createDimensionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDimensionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDimensionName(builder:flatbuffers.Builder, dimensionNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dimensionNameOffset, 0);
}

static createDimensionNameVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDimensionNameVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, notesOffset, 0);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endIonoObservationTime_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishIonoObservationTime_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO');
}

static finishSizePrefixedIonoObservationTime_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO', true);
}

static createIonoObservationTime_Ingest(builder:flatbuffers.Builder, dimensionsOffset:flatbuffers.Offset, dimensionNameOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  IonoObservationTime_Ingest.startIonoObservationTime_Ingest(builder);
  IonoObservationTime_Ingest.addDimensions(builder, dimensionsOffset);
  IonoObservationTime_Ingest.addDimensionName(builder, dimensionNameOffset);
  IonoObservationTime_Ingest.addNotes(builder, notesOffset);
  IonoObservationTime_Ingest.addData(builder, dataOffset);
  return IonoObservationTime_Ingest.endIonoObservationTime_Ingest(builder);
}

unpack(): IonoObservationTime_IngestT {
  return new IonoObservationTime_IngestT(
    this.bb!.createScalarList<string>(this.dimensions.bind(this), this.dimensionsLength()),
    this.bb!.createScalarList<string>(this.dimensionName.bind(this), this.dimensionNameLength()),
    this.notes(),
    this.bb!.createScalarList<string>(this.data.bind(this), this.dataLength())
  );
}


unpackTo(_o: IonoObservationTime_IngestT): void {
  _o.dimensions = this.bb!.createScalarList<string>(this.dimensions.bind(this), this.dimensionsLength());
  _o.dimensionName = this.bb!.createScalarList<string>(this.dimensionName.bind(this), this.dimensionNameLength());
  _o.notes = this.notes();
  _o.data = this.bb!.createScalarList<string>(this.data.bind(this), this.dataLength());
}
}

export class IonoObservationTime_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public dimensions: (string)[] = [],
  public dimensionName: (string)[] = [],
  public notes: string|Uint8Array|null = null,
  public data: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const dimensions = IonoObservationTime_Ingest.createDimensionsVector(builder, builder.createObjectOffsetList(this.dimensions));
  const dimensionName = IonoObservationTime_Ingest.createDimensionNameVector(builder, builder.createObjectOffsetList(this.dimensionName));
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const data = IonoObservationTime_Ingest.createDataVector(builder, builder.createObjectOffsetList(this.data));

  return IonoObservationTime_Ingest.createIonoObservationTime_Ingest(builder,
    dimensions,
    dimensionName,
    notes,
    data
  );
}
}
