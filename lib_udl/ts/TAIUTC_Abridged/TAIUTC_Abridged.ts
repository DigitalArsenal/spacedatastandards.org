// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TAIUTC_Abridged_dataMode_Enum } from './TAIUTC_Abridged_dataMode_Enum.js';


/**
 * /// International Atomic Time (TAI) is a statistical atomic time scale based on a large number of clocks operating at standards laboratories around the world that is maintained by the Bureau International des Poids et Mesures; its unit interval is exactly one SI second at sea level. The origin of TAI is such that UT1-TAI is approximately 0 (zero) on January 1, 1958. TAI is not adjusted for leap seconds. 
 * Coordinated Universal Time (UTC) is defined by the CCIR Recommendation 460-4 (1986). It differs from TAI by the total number of leap seconds, so that UT1-UTC stays smaller than 0.9s in absolute value.   The decision to introduce a leap second in UTC is the responsibility of the International Earth Rotation Service (IERS). According to the CCIR Recommendation, first preference is given to the opportunities at the end of December and June, and second preference to those at the end of March and September. Since the system was introduced in 1972, only dates in June and December have been used.  TAI is expressed in terms of UTC by the relation TAI = UTC + dAT, where  dAT is the total algebraic sum of leap seconds.
 * The first leap second was introduced on June 30, 1972. The historical list of leap seconds can be found in this table.
 */
export class TAIUTC_Abridged implements flatbuffers.IUnpackableObject<TAIUTC_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TAIUTC_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTAIUTC_Abridged(bb:flatbuffers.ByteBuffer, obj?:TAIUTC_Abridged):TAIUTC_Abridged {
  return (obj || new TAIUTC_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTAIUTC_Abridged(bb:flatbuffers.ByteBuffer, obj?:TAIUTC_Abridged):TAIUTC_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TAIUTC_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('TAIU');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: TAIUTC-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Effective date/time for the leap second adjustment.
 * Example: /// Example: 2017-01-01T00:00:00.123Z
 * Constraints: No constraints specified.
 */
adjustmentDate():string|null
adjustmentDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
adjustmentDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Total/cumulative offset between TAI and UTC time as of adjustmentDate, in seconds.
 * Example: /// Example: 1.422818
 * Constraints: No constraints specified.
 */
taiUtc():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Multiplication factor of the leap second adjustment.
 * Example: /// Example: 0.001296
 * Constraints: No constraints specified.
 */
multiplicationFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: /TAI/2019/01/22/4318471007562436-tai-utc.dat
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():TAIUTC_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TAIUTC_Abridged_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startTAIUTC_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addAdjustmentDate(builder:flatbuffers.Builder, adjustmentDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, adjustmentDateOffset, 0);
}

static addTaiUtc(builder:flatbuffers.Builder, taiUtc:number) {
  builder.addFieldFloat64(3, taiUtc, 0.0);
}

static addMultiplicationFactor(builder:flatbuffers.Builder, multiplicationFactor:number) {
  builder.addFieldFloat64(4, multiplicationFactor, 0.0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, rawFileUriOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:TAIUTC_Abridged_dataMode_Enum) {
  builder.addFieldInt8(9, dataMode, TAIUTC_Abridged_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, createdByOffset, 0);
}

static endTAIUTC_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTAIUTC_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'TAIU');
}

static finishSizePrefixedTAIUTC_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'TAIU', true);
}

static createTAIUTC_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, adjustmentDateOffset:flatbuffers.Offset, taiUtc:number, multiplicationFactor:number, rawFileUriOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:TAIUTC_Abridged_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset):flatbuffers.Offset {
  TAIUTC_Abridged.startTAIUTC_Abridged(builder);
  TAIUTC_Abridged.addId(builder, idOffset);
  TAIUTC_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  TAIUTC_Abridged.addAdjustmentDate(builder, adjustmentDateOffset);
  TAIUTC_Abridged.addTaiUtc(builder, taiUtc);
  TAIUTC_Abridged.addMultiplicationFactor(builder, multiplicationFactor);
  TAIUTC_Abridged.addRawFileUri(builder, rawFileUriOffset);
  TAIUTC_Abridged.addSource(builder, sourceOffset);
  TAIUTC_Abridged.addOrigin(builder, originOffset);
  TAIUTC_Abridged.addOrigNetwork(builder, origNetworkOffset);
  TAIUTC_Abridged.addDataMode(builder, dataMode);
  TAIUTC_Abridged.addCreatedAt(builder, createdAtOffset);
  TAIUTC_Abridged.addCreatedBy(builder, createdByOffset);
  return TAIUTC_Abridged.endTAIUTC_Abridged(builder);
}

unpack(): TAIUTC_AbridgedT {
  return new TAIUTC_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.adjustmentDate(),
    this.taiUtc(),
    this.multiplicationFactor(),
    this.rawFileUri(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy()
  );
}


unpackTo(_o: TAIUTC_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.adjustmentDate = this.adjustmentDate();
  _o.taiUtc = this.taiUtc();
  _o.multiplicationFactor = this.multiplicationFactor();
  _o.rawFileUri = this.rawFileUri();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
}
}

export class TAIUTC_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public adjustmentDate: string|Uint8Array|null = null,
  public taiUtc: number = 0.0,
  public multiplicationFactor: number = 0.0,
  public rawFileUri: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: TAIUTC_Abridged_dataMode_Enum = TAIUTC_Abridged_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const adjustmentDate = (this.adjustmentDate !== null ? builder.createString(this.adjustmentDate!) : 0);
  const rawFileUri = (this.rawFileUri !== null ? builder.createString(this.rawFileUri!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);

  return TAIUTC_Abridged.createTAIUTC_Abridged(builder,
    id,
    classificationMarking,
    adjustmentDate,
    this.taiUtc,
    this.multiplicationFactor,
    rawFileUri,
    source,
    origin,
    origNetwork,
    this.dataMode,
    createdAt,
    createdBy
  );
}
}
