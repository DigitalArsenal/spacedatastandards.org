// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Support items associated with this LogisticsSupport record.
 */
export class LogisticsSupportItems_Ingest implements flatbuffers.IUnpackableObject<LogisticsSupportItems_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LogisticsSupportItems_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLogisticsSupportItems_Ingest(bb:flatbuffers.ByteBuffer, obj?:LogisticsSupportItems_Ingest):LogisticsSupportItems_Ingest {
  return (obj || new LogisticsSupportItems_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLogisticsSupportItems_Ingest(bb:flatbuffers.ByteBuffer, obj?:LogisticsSupportItems_Ingest):LogisticsSupportItems_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LogisticsSupportItems_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('LOGI');
}

/**
 * The type of recovery request needed. Contact the source provider for details.
 * Example: /// Example: E
 * Constraints: Minimum length = 1, Maximum length = 1
 */
recoveryRequestTypeCode():string|null
recoveryRequestTypeCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recoveryRequestTypeCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The request or record number for this item type (Equipent, Part, or MRT).
 * Example: /// Example: 89208
 * Constraints: Minimum length = 0, Maximum length = 5
 */
requestNumber():string|null
requestNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
requestNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Military aircraft discrepancy logistics requisition ordered quantity. The quantity of equipment ordered that is required to fix the aircraft.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
quantity():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The technical order name of the part ordered.
 * Example: /// Example: HOIST ADAPTER KIT
 * Constraints: Minimum length = 0, Maximum length = 150
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Shipment Unit Identifier is the Transportation Control Number (TCN) for shipping that piece of equipment being requested.
 * Example: /// Example: FB44273196X501XXX
 * Constraints: Minimum length = 0, Maximum length = 17
 */
shipmentUnitId():string|null
shipmentUnitId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shipmentUnitId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * This is the Redeploy (return) Transportation Control Number/Tracking Reference Number for the selected item.
 * Example: /// Example: X400LA31949108
 * Constraints: Minimum length = 0, Maximum length = 17
 */
redeployShipmentUnitId():string|null
redeployShipmentUnitId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
redeployShipmentUnitId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A number assigned by Job Control to monitor and record maintenance actions required to correct the associated aircraft maintenance discrepancy.  It is seven, nine or twelve characters, depending on the base-specific numbering scheme.  If seven characters: characters 1-3 are Julian date, 4-7 are sequence numbers.  If nine characters: characters 1-2 are last two digits of the year, characters 3-5 are Julian date, 6-9 are sequence numbers.  If twelve characters: characters 1-2 are last two digits of the year, 3-5 are Julian date, 6-9 are sequence numbers, and 10-12 are a three-digit supplemental number.
 * Example: /// Example: 231942400
 * Constraints: Minimum length = 0, Maximum length = 12
 */
jobControlNumber():string|null
jobControlNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
jobControlNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The code that represents the International Civil Aviation Organization (ICAO) designations of an airport.
 * Example: /// Example: PHIK
 * Constraints: Minimum length = 0, Maximum length = 4
 */
sourceIcao():string|null
sourceIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
 * Example: /// Example: T89003
 * Constraints: Minimum length = 0, Maximum length = 10
 */
deployPlanNumber():string|null
deployPlanNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
deployPlanNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
 * Example: /// Example: T89003
 * Constraints: Minimum length = 0, Maximum length = 10
 */
redeployPlanNumber():string|null
redeployPlanNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
redeployPlanNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * This element indicates whether or not the supplied item is contained within another item.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
cannibalized():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The point of contact is a free text field to add information about the individual(s) with knowledge of the referenced requested or supplied item(s). The default value for this field is the last name, first name, and middle initial of the operator who created the records and/or generated the transaction.
 * Example: /// Example: SMITH, JOHN J
 * Constraints: Minimum length = 0, Maximum length = 68
 */
siPoc():string|null
siPoc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
siPoc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time the item is ready, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-17T19:04:00.123Z
 * Constraints: No constraints specified.
 */
readyTime():string|null
readyTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
readyTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time the item is received, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-17T19:04:00.123Z
 * Constraints: No constraints specified.
 */
receivedTime():string|null
receivedTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receivedTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * This element indicates if the supplied item is characterized as additional support.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
resupportFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The last time this supported item was updated, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-17T19:04:00.123Z
 * Constraints: No constraints specified.
 */
itemLastChangedDate():string|null
itemLastChangedDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
itemLastChangedDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The parts associated with this support item.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
logisticsParts(index: number):string
logisticsParts(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
logisticsParts(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

logisticsPartsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The specialties required to implement this support item.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
logisticsSpecialties(index: number):string
logisticsSpecialties(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
logisticsSpecialties(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

logisticsSpecialtiesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Remarks associated with this support item.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
logisticsRemarks(index: number):string
logisticsRemarks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
logisticsRemarks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

logisticsRemarksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startLogisticsSupportItems_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addRecoveryRequestTypeCode(builder:flatbuffers.Builder, recoveryRequestTypeCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, recoveryRequestTypeCodeOffset, 0);
}

static addRequestNumber(builder:flatbuffers.Builder, requestNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, requestNumberOffset, 0);
}

static addQuantity(builder:flatbuffers.Builder, quantity:number) {
  builder.addFieldInt32(2, quantity, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, descriptionOffset, 0);
}

static addShipmentUnitId(builder:flatbuffers.Builder, shipmentUnitIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, shipmentUnitIdOffset, 0);
}

static addRedeployShipmentUnitId(builder:flatbuffers.Builder, redeployShipmentUnitIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, redeployShipmentUnitIdOffset, 0);
}

static addJobControlNumber(builder:flatbuffers.Builder, jobControlNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, jobControlNumberOffset, 0);
}

static addSourceIcao(builder:flatbuffers.Builder, sourceIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, sourceIcaoOffset, 0);
}

static addDeployPlanNumber(builder:flatbuffers.Builder, deployPlanNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, deployPlanNumberOffset, 0);
}

static addRedeployPlanNumber(builder:flatbuffers.Builder, redeployPlanNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, redeployPlanNumberOffset, 0);
}

static addCannibalized(builder:flatbuffers.Builder, cannibalized:boolean) {
  builder.addFieldInt8(10, +cannibalized, +false);
}

static addSiPoc(builder:flatbuffers.Builder, siPocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, siPocOffset, 0);
}

static addReadyTime(builder:flatbuffers.Builder, readyTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, readyTimeOffset, 0);
}

static addReceivedTime(builder:flatbuffers.Builder, receivedTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, receivedTimeOffset, 0);
}

static addResupportFlag(builder:flatbuffers.Builder, resupportFlag:boolean) {
  builder.addFieldInt8(14, +resupportFlag, +false);
}

static addItemLastChangedDate(builder:flatbuffers.Builder, itemLastChangedDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, itemLastChangedDateOffset, 0);
}

static addLogisticsParts(builder:flatbuffers.Builder, logisticsPartsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, logisticsPartsOffset, 0);
}

static createLogisticsPartsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLogisticsPartsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLogisticsSpecialties(builder:flatbuffers.Builder, logisticsSpecialtiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, logisticsSpecialtiesOffset, 0);
}

static createLogisticsSpecialtiesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLogisticsSpecialtiesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLogisticsRemarks(builder:flatbuffers.Builder, logisticsRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, logisticsRemarksOffset, 0);
}

static createLogisticsRemarksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLogisticsRemarksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endLogisticsSupportItems_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLogisticsSupportItems_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI');
}

static finishSizePrefixedLogisticsSupportItems_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI', true);
}

static createLogisticsSupportItems_Ingest(builder:flatbuffers.Builder, recoveryRequestTypeCodeOffset:flatbuffers.Offset, requestNumberOffset:flatbuffers.Offset, quantity:number, descriptionOffset:flatbuffers.Offset, shipmentUnitIdOffset:flatbuffers.Offset, redeployShipmentUnitIdOffset:flatbuffers.Offset, jobControlNumberOffset:flatbuffers.Offset, sourceIcaoOffset:flatbuffers.Offset, deployPlanNumberOffset:flatbuffers.Offset, redeployPlanNumberOffset:flatbuffers.Offset, cannibalized:boolean, siPocOffset:flatbuffers.Offset, readyTimeOffset:flatbuffers.Offset, receivedTimeOffset:flatbuffers.Offset, resupportFlag:boolean, itemLastChangedDateOffset:flatbuffers.Offset, logisticsPartsOffset:flatbuffers.Offset, logisticsSpecialtiesOffset:flatbuffers.Offset, logisticsRemarksOffset:flatbuffers.Offset):flatbuffers.Offset {
  LogisticsSupportItems_Ingest.startLogisticsSupportItems_Ingest(builder);
  LogisticsSupportItems_Ingest.addRecoveryRequestTypeCode(builder, recoveryRequestTypeCodeOffset);
  LogisticsSupportItems_Ingest.addRequestNumber(builder, requestNumberOffset);
  LogisticsSupportItems_Ingest.addQuantity(builder, quantity);
  LogisticsSupportItems_Ingest.addDescription(builder, descriptionOffset);
  LogisticsSupportItems_Ingest.addShipmentUnitId(builder, shipmentUnitIdOffset);
  LogisticsSupportItems_Ingest.addRedeployShipmentUnitId(builder, redeployShipmentUnitIdOffset);
  LogisticsSupportItems_Ingest.addJobControlNumber(builder, jobControlNumberOffset);
  LogisticsSupportItems_Ingest.addSourceIcao(builder, sourceIcaoOffset);
  LogisticsSupportItems_Ingest.addDeployPlanNumber(builder, deployPlanNumberOffset);
  LogisticsSupportItems_Ingest.addRedeployPlanNumber(builder, redeployPlanNumberOffset);
  LogisticsSupportItems_Ingest.addCannibalized(builder, cannibalized);
  LogisticsSupportItems_Ingest.addSiPoc(builder, siPocOffset);
  LogisticsSupportItems_Ingest.addReadyTime(builder, readyTimeOffset);
  LogisticsSupportItems_Ingest.addReceivedTime(builder, receivedTimeOffset);
  LogisticsSupportItems_Ingest.addResupportFlag(builder, resupportFlag);
  LogisticsSupportItems_Ingest.addItemLastChangedDate(builder, itemLastChangedDateOffset);
  LogisticsSupportItems_Ingest.addLogisticsParts(builder, logisticsPartsOffset);
  LogisticsSupportItems_Ingest.addLogisticsSpecialties(builder, logisticsSpecialtiesOffset);
  LogisticsSupportItems_Ingest.addLogisticsRemarks(builder, logisticsRemarksOffset);
  return LogisticsSupportItems_Ingest.endLogisticsSupportItems_Ingest(builder);
}

unpack(): LogisticsSupportItems_IngestT {
  return new LogisticsSupportItems_IngestT(
    this.recoveryRequestTypeCode(),
    this.requestNumber(),
    this.quantity(),
    this.description(),
    this.shipmentUnitId(),
    this.redeployShipmentUnitId(),
    this.jobControlNumber(),
    this.sourceIcao(),
    this.deployPlanNumber(),
    this.redeployPlanNumber(),
    this.cannibalized(),
    this.siPoc(),
    this.readyTime(),
    this.receivedTime(),
    this.resupportFlag(),
    this.itemLastChangedDate(),
    this.bb!.createScalarList<string>(this.logisticsParts.bind(this), this.logisticsParts_Length()),
    this.bb!.createScalarList<string>(this.logisticsSpecialties.bind(this), this.logisticsSpecialties_Length()),
    this.bb!.createScalarList<string>(this.logisticsRemarks.bind(this), this.logisticsRemarks_Length())
  );
}


unpackTo(_o: LogisticsSupportItems_IngestT): void {
  _o.recoveryRequestTypeCode = this.recoveryRequestTypeCode();
  _o.requestNumber = this.requestNumber();
  _o.quantity = this.quantity();
  _o.description = this.description();
  _o.shipmentUnitId = this.shipmentUnitId();
  _o.redeployShipmentUnitId = this.redeployShipmentUnitId();
  _o.jobControlNumber = this.jobControlNumber();
  _o.sourceICAO = this.sourceIcao();
  _o.deployPlanNumber = this.deployPlanNumber();
  _o.redeployPlanNumber = this.redeployPlanNumber();
  _o.cannibalized = this.cannibalized();
  _o.siPOC = this.siPoc();
  _o.readyTime = this.readyTime();
  _o.receivedTime = this.receivedTime();
  _o.resupportFlag = this.resupportFlag();
  _o.itemLastChangedDate = this.itemLastChangedDate();
  _o.logisticsParts = this.bb!.createScalarList<string>(this.logisticsParts.bind(this), this.logisticsParts_Length());
  _o.logisticsSpecialties = this.bb!.createScalarList<string>(this.logisticsSpecialties.bind(this), this.logisticsSpecialties_Length());
  _o.logisticsRemarks = this.bb!.createScalarList<string>(this.logisticsRemarks.bind(this), this.logisticsRemarks_Length());
}
}

export class LogisticsSupportItems_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public recoveryRequestTypeCode: string|Uint8Array|null = null,
  public requestNumber: string|Uint8Array|null = null,
  public quantity: number = 0,
  public description: string|Uint8Array|null = null,
  public shipmentUnitId: string|Uint8Array|null = null,
  public redeployShipmentUnitId: string|Uint8Array|null = null,
  public jobControlNumber: string|Uint8Array|null = null,
  public sourceICAO: string|Uint8Array|null = null,
  public deployPlanNumber: string|Uint8Array|null = null,
  public redeployPlanNumber: string|Uint8Array|null = null,
  public cannibalized: boolean = false,
  public siPOC: string|Uint8Array|null = null,
  public readyTime: string|Uint8Array|null = null,
  public receivedTime: string|Uint8Array|null = null,
  public resupportFlag: boolean = false,
  public itemLastChangedDate: string|Uint8Array|null = null,
  public logisticsParts: (string)[] = [],
  public logisticsSpecialties: (string)[] = [],
  public logisticsRemarks: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const recoveryRequestTypeCode = (this.recoveryRequestTypeCode !== null ? builder.createString(this.recoveryRequestTypeCode!) : 0);
  const requestNumber = (this.requestNumber !== null ? builder.createString(this.requestNumber!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const shipmentUnitId = (this.shipmentUnitId !== null ? builder.createString(this.shipmentUnitId!) : 0);
  const redeployShipmentUnitId = (this.redeployShipmentUnitId !== null ? builder.createString(this.redeployShipmentUnitId!) : 0);
  const jobControlNumber = (this.jobControlNumber !== null ? builder.createString(this.jobControlNumber!) : 0);
  const sourceICAO = (this.sourceICAO !== null ? builder.createString(this.sourceICAO!) : 0);
  const deployPlanNumber = (this.deployPlanNumber !== null ? builder.createString(this.deployPlanNumber!) : 0);
  const redeployPlanNumber = (this.redeployPlanNumber !== null ? builder.createString(this.redeployPlanNumber!) : 0);
  const siPOC = (this.siPOC !== null ? builder.createString(this.siPOC!) : 0);
  const readyTime = (this.readyTime !== null ? builder.createString(this.readyTime!) : 0);
  const receivedTime = (this.receivedTime !== null ? builder.createString(this.receivedTime!) : 0);
  const itemLastChangedDate = (this.itemLastChangedDate !== null ? builder.createString(this.itemLastChangedDate!) : 0);
  const logisticsParts = LogisticsSupportItems_Ingest.createLogisticsPartsVector(builder, builder.createObjectOffsetList(this.logisticsParts));
  const logisticsSpecialties = LogisticsSupportItems_Ingest.createLogisticsSpecialtiesVector(builder, builder.createObjectOffsetList(this.logisticsSpecialties));
  const logisticsRemarks = LogisticsSupportItems_Ingest.createLogisticsRemarksVector(builder, builder.createObjectOffsetList(this.logisticsRemarks));

  return LogisticsSupportItems_Ingest.createLogisticsSupportItems_Ingest(builder,
    recoveryRequestTypeCode,
    requestNumber,
    this.quantity,
    description,
    shipmentUnitId,
    redeployShipmentUnitId,
    jobControlNumber,
    sourceICAO,
    deployPlanNumber,
    redeployPlanNumber,
    this.cannibalized,
    siPOC,
    readyTime,
    receivedTime,
    this.resupportFlag,
    itemLastChangedDate,
    logisticsParts,
    logisticsSpecialties,
    logisticsRemarks
  );
}
}
