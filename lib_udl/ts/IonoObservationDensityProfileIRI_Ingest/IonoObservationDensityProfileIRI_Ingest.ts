// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Full set of the IRI formalism coefficients.
 */
export class IonoObservationDensityProfileIRI_Ingest implements flatbuffers.IUnpackableObject<IonoObservationDensityProfileIRI_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IonoObservationDensityProfileIRI_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIonoObservationDensityProfileIRI_Ingest(bb:flatbuffers.ByteBuffer, obj?:IonoObservationDensityProfileIRI_Ingest):IonoObservationDensityProfileIRI_Ingest {
  return (obj || new IonoObservationDensityProfileIRI_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIonoObservationDensityProfileIRI_Ingest(bb:flatbuffers.ByteBuffer, obj?:IonoObservationDensityProfileIRI_Ingest):IonoObservationDensityProfileIRI_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IonoObservationDensityProfileIRI_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('IONO');
}

/**
 * Description of IRI implementation.
 * Example: /// Example: Full altitude range of 1D vertical plasma density profile for D, E, and F regions of the ionosphere provided by IRI, in which model parameters are replaced with observed ionogram-derived data where available.
 * Constraints: No constraints specified.
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Peak density of F2 layer, in grams per cubic centimeter.
 * Example: /// Example: 313283.1
 * Constraints: No constraints specified.
 */
nmF2():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Peak height of F2 layer, in kilometers.
 * Example: /// Example: 265.42
 * Constraints: No constraints specified.
 */
hmF2():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * B0 parameter of the F2 layer shape.
 * Example: /// Example: 245.1
 * Constraints: No constraints specified.
 */
b0():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * B1 parameter of the F2 layer shape.
 * Example: /// Example: 3.45
 * Constraints: No constraints specified.
 */
b1():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Peak density of the F1 layer, in grams per cubic centimeter.
 * Example: /// Example: 210486
 * Constraints: No constraints specified.
 */
nmF1():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Peak height of the F1 layer, in kilometers.
 * Example: /// Example: 210.3
 * Constraints: No constraints specified.
 */
hmF1():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * D1 parameter of the F1 layer shape.
 * Example: /// Example: 0
 * Constraints: No constraints specified.
 */
d1():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Height HZ of the interim layer, in kilometers.
 * Example: /// Example: 142.7
 * Constraints: No constraints specified.
 */
hz():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The valley height, in kilometers.
 * Example: /// Example: 116.2
 * Constraints: No constraints specified.
 */
hValTop():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The valley depth, in grams per cubic centimeter.
 * Example: /// Example: 147025.1
 * Constraints: No constraints specified.
 */
nValB():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Peak density of the E layer, in per cubic centimeter.
 * Example: /// Example: 154164.1
 * Constraints: No constraints specified.
 */
nmE():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Peak height of the F2 layer, in kilometers.
 * Example: /// Example: 99.8
 * Constraints: No constraints specified.
 */
hmE():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Height of the intermediate region at the top of D region, in kilometers.
 * Example: /// Example: 85.6
 * Constraints: No constraints specified.
 */
hdx():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Peak density of the D layer, in per cubic centimeter.
 * Example: /// Example: 937543116.1
 * Constraints: No constraints specified.
 */
nmD():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Peak height of the D layer, in kilometers.
 * Example: /// Example: 81.1
 * Constraints: No constraints specified.
 */
hmD():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Starting height of the D layer, in kilometers.
 * Example: /// Example: 50.1
 * Constraints: No constraints specified.
 */
ha():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * TBD.
 * Example: /// Example: 0.0474732023322638
 * Constraints: No constraints specified.
 */
fp1():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * TBD.
 * Example: /// Example: -0.00112685246984002
 * Constraints: No constraints specified.
 */
fp2():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * TBD.
 * Example: /// Example: 0.00827559450035957
 * Constraints: No constraints specified.
 */
fp30():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * TBD.
 * Example: /// Example: 0.000201178475411428
 * Constraints: No constraints specified.
 */
fp3U():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.
 * Example: /// Example: 35.1
 * Constraints: No constraints specified.
 */
chi():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startIonoObservationDensityProfileIRI_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(22);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, descriptionOffset, 0);
}

static addNmF2(builder:flatbuffers.Builder, nmF2:number) {
  builder.addFieldFloat64(1, nmF2, 0.0);
}

static addHmF2(builder:flatbuffers.Builder, hmF2:number) {
  builder.addFieldFloat64(2, hmF2, 0.0);
}

static addB0(builder:flatbuffers.Builder, b0:number) {
  builder.addFieldFloat64(3, b0, 0.0);
}

static addB1(builder:flatbuffers.Builder, b1:number) {
  builder.addFieldFloat64(4, b1, 0.0);
}

static addNmF1(builder:flatbuffers.Builder, nmF1:number) {
  builder.addFieldFloat64(5, nmF1, 0.0);
}

static addHmF1(builder:flatbuffers.Builder, hmF1:number) {
  builder.addFieldFloat64(6, hmF1, 0.0);
}

static addD1(builder:flatbuffers.Builder, d1:number) {
  builder.addFieldFloat64(7, d1, 0.0);
}

static addHz(builder:flatbuffers.Builder, hz:number) {
  builder.addFieldFloat64(8, hz, 0.0);
}

static addHValTop(builder:flatbuffers.Builder, hValTop:number) {
  builder.addFieldFloat64(9, hValTop, 0.0);
}

static addNValB(builder:flatbuffers.Builder, nValB:number) {
  builder.addFieldFloat64(10, nValB, 0.0);
}

static addNmE(builder:flatbuffers.Builder, nmE:number) {
  builder.addFieldFloat64(11, nmE, 0.0);
}

static addHmE(builder:flatbuffers.Builder, hmE:number) {
  builder.addFieldFloat64(12, hmE, 0.0);
}

static addHdx(builder:flatbuffers.Builder, hdx:number) {
  builder.addFieldFloat64(13, hdx, 0.0);
}

static addNmD(builder:flatbuffers.Builder, nmD:number) {
  builder.addFieldFloat64(14, nmD, 0.0);
}

static addHmD(builder:flatbuffers.Builder, hmD:number) {
  builder.addFieldFloat64(15, hmD, 0.0);
}

static addHa(builder:flatbuffers.Builder, ha:number) {
  builder.addFieldFloat64(16, ha, 0.0);
}

static addFp1(builder:flatbuffers.Builder, fp1:number) {
  builder.addFieldFloat64(17, fp1, 0.0);
}

static addFp2(builder:flatbuffers.Builder, fp2:number) {
  builder.addFieldFloat64(18, fp2, 0.0);
}

static addFp30(builder:flatbuffers.Builder, fp30:number) {
  builder.addFieldFloat64(19, fp30, 0.0);
}

static addFp3U(builder:flatbuffers.Builder, fp3U:number) {
  builder.addFieldFloat64(20, fp3U, 0.0);
}

static addChi(builder:flatbuffers.Builder, chi:number) {
  builder.addFieldFloat64(21, chi, 0.0);
}

static endIonoObservationDensityProfileIRI_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishIonoObservationDensityProfileIRI_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO');
}

static finishSizePrefixedIonoObservationDensityProfileIRI_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO', true);
}

static createIonoObservationDensityProfileIRI_Ingest(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset, nmF2:number, hmF2:number, b0:number, b1:number, nmF1:number, hmF1:number, d1:number, hz:number, hValTop:number, nValB:number, nmE:number, hmE:number, hdx:number, nmD:number, hmD:number, ha:number, fp1:number, fp2:number, fp30:number, fp3U:number, chi:number):flatbuffers.Offset {
  IonoObservationDensityProfileIRI_Ingest.startIonoObservationDensityProfileIRI_Ingest(builder);
  IonoObservationDensityProfileIRI_Ingest.addDescription(builder, descriptionOffset);
  IonoObservationDensityProfileIRI_Ingest.addNmF2(builder, nmF2);
  IonoObservationDensityProfileIRI_Ingest.addHmF2(builder, hmF2);
  IonoObservationDensityProfileIRI_Ingest.addB0(builder, b0);
  IonoObservationDensityProfileIRI_Ingest.addB1(builder, b1);
  IonoObservationDensityProfileIRI_Ingest.addNmF1(builder, nmF1);
  IonoObservationDensityProfileIRI_Ingest.addHmF1(builder, hmF1);
  IonoObservationDensityProfileIRI_Ingest.addD1(builder, d1);
  IonoObservationDensityProfileIRI_Ingest.addHz(builder, hz);
  IonoObservationDensityProfileIRI_Ingest.addHValTop(builder, hValTop);
  IonoObservationDensityProfileIRI_Ingest.addNValB(builder, nValB);
  IonoObservationDensityProfileIRI_Ingest.addNmE(builder, nmE);
  IonoObservationDensityProfileIRI_Ingest.addHmE(builder, hmE);
  IonoObservationDensityProfileIRI_Ingest.addHdx(builder, hdx);
  IonoObservationDensityProfileIRI_Ingest.addNmD(builder, nmD);
  IonoObservationDensityProfileIRI_Ingest.addHmD(builder, hmD);
  IonoObservationDensityProfileIRI_Ingest.addHa(builder, ha);
  IonoObservationDensityProfileIRI_Ingest.addFp1(builder, fp1);
  IonoObservationDensityProfileIRI_Ingest.addFp2(builder, fp2);
  IonoObservationDensityProfileIRI_Ingest.addFp30(builder, fp30);
  IonoObservationDensityProfileIRI_Ingest.addFp3U(builder, fp3U);
  IonoObservationDensityProfileIRI_Ingest.addChi(builder, chi);
  return IonoObservationDensityProfileIRI_Ingest.endIonoObservationDensityProfileIRI_Ingest(builder);
}

unpack(): IonoObservationDensityProfileIRI_IngestT {
  return new IonoObservationDensityProfileIRI_IngestT(
    this.description(),
    this.nmF2(),
    this.hmF2(),
    this.b0(),
    this.b1(),
    this.nmF1(),
    this.hmF1(),
    this.d1(),
    this.hz(),
    this.hValTop(),
    this.nValB(),
    this.nmE(),
    this.hmE(),
    this.hdx(),
    this.nmD(),
    this.hmD(),
    this.ha(),
    this.fp1(),
    this.fp2(),
    this.fp30(),
    this.fp3U(),
    this.chi()
  );
}


unpackTo(_o: IonoObservationDensityProfileIRI_IngestT): void {
  _o.description = this.description();
  _o.nmF2 = this.nmF2();
  _o.hmF2 = this.hmF2();
  _o.b0 = this.b0();
  _o.b1 = this.b1();
  _o.nmF1 = this.nmF1();
  _o.hmF1 = this.hmF1();
  _o.d1 = this.d1();
  _o.hz = this.hz();
  _o.hValTop = this.hValTop();
  _o.nValB = this.nValB();
  _o.nmE = this.nmE();
  _o.hmE = this.hmE();
  _o.hdx = this.hdx();
  _o.nmD = this.nmD();
  _o.hmD = this.hmD();
  _o.ha = this.ha();
  _o.fp1 = this.fp1();
  _o.fp2 = this.fp2();
  _o.fp30 = this.fp30();
  _o.fp3U = this.fp3U();
  _o.chi = this.chi();
}
}

export class IonoObservationDensityProfileIRI_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public description: string|Uint8Array|null = null,
  public nmF2: number = 0.0,
  public hmF2: number = 0.0,
  public b0: number = 0.0,
  public b1: number = 0.0,
  public nmF1: number = 0.0,
  public hmF1: number = 0.0,
  public d1: number = 0.0,
  public hz: number = 0.0,
  public hValTop: number = 0.0,
  public nValB: number = 0.0,
  public nmE: number = 0.0,
  public hmE: number = 0.0,
  public hdx: number = 0.0,
  public nmD: number = 0.0,
  public hmD: number = 0.0,
  public ha: number = 0.0,
  public fp1: number = 0.0,
  public fp2: number = 0.0,
  public fp30: number = 0.0,
  public fp3U: number = 0.0,
  public chi: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const description = (this.description !== null ? builder.createString(this.description!) : 0);

  return IonoObservationDensityProfileIRI_Ingest.createIonoObservationDensityProfileIRI_Ingest(builder,
    description,
    this.nmF2,
    this.hmF2,
    this.b0,
    this.b1,
    this.nmF1,
    this.hmF1,
    this.d1,
    this.hz,
    this.hValTop,
    this.nValB,
    this.nmE,
    this.hmE,
    this.hdx,
    this.nmD,
    this.hmD,
    this.ha,
    this.fp1,
    this.fp2,
    this.fp30,
    this.fp3U,
    this.chi
  );
}
}
