// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Schema for the CotPositionData to post.
 */
export class CotPositionData_Ingest implements flatbuffers.IUnpackableObject<CotPositionData_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CotPositionData_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCotPositionData_Ingest(bb:flatbuffers.ByteBuffer, obj?:CotPositionData_Ingest):CotPositionData_Ingest {
  return (obj || new CotPositionData_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCotPositionData_Ingest(bb:flatbuffers.ByteBuffer, obj?:CotPositionData_Ingest):CotPositionData_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CotPositionData_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('COTP');
}

/**
 * Name of the POI target Object.
 * Example: /// Example: POI_NAME
 * Constraints: Minimum length = 1, Maximum length = 2147483647
 */
callSign():string|null
callSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Team role  (Team Member| Team Lead | HQ | Sniper | Medic | Forward Observer | RTO | K9).
 * Example: /// Example: Team Member
 * Constraints: Minimum length = 1, Maximum length = 2147483647
 */
teamRole():string|null
teamRole(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamRole(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the POI target Object.
 * Example: /// Example: Description of the object
 * Constraints: Minimum length = 1, Maximum length = 2147483647
 */
team():string|null
team(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
team(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startCotPositionData_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCallSign(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, callSignOffset, 0);
}

static addTeamRole(builder:flatbuffers.Builder, teamRoleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, teamRoleOffset, 0);
}

static addTeam(builder:flatbuffers.Builder, teamOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, teamOffset, 0);
}

static endCotPositionData_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCotPositionData_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'COTP');
}

static finishSizePrefixedCotPositionData_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'COTP', true);
}

static createCotPositionData_Ingest(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset, teamRoleOffset:flatbuffers.Offset, teamOffset:flatbuffers.Offset):flatbuffers.Offset {
  CotPositionData_Ingest.startCotPositionData_Ingest(builder);
  CotPositionData_Ingest.addCallSign(builder, callSignOffset);
  CotPositionData_Ingest.addTeamRole(builder, teamRoleOffset);
  CotPositionData_Ingest.addTeam(builder, teamOffset);
  return CotPositionData_Ingest.endCotPositionData_Ingest(builder);
}

unpack(): CotPositionData_IngestT {
  return new CotPositionData_IngestT(
    this.callSign(),
    this.teamRole(),
    this.team()
  );
}


unpackTo(_o: CotPositionData_IngestT): void {
  _o.callSign = this.callSign();
  _o.teamRole = this.teamRole();
  _o.team = this.team();
}
}

export class CotPositionData_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public callSign: string|Uint8Array|null = null,
  public teamRole: string|Uint8Array|null = null,
  public team: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const callSign = (this.callSign !== null ? builder.createString(this.callSign!) : 0);
  const teamRole = (this.teamRole !== null ? builder.createString(this.teamRole!) : 0);
  const team = (this.team !== null ? builder.createString(this.team!) : 0);

  return CotPositionData_Ingest.createCotPositionData_Ingest(builder,
    callSign,
    teamRole,
    team
  );
}
}
