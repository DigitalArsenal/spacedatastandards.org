// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LaunchSite_Ingest_dataMode_Enum } from './launch-site-ingest-data-mode-enum.js';


/**
 * /// Model representation of known launch sites.
 */
export class LaunchSite_Ingest implements flatbuffers.IUnpackableObject<LaunchSite_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LaunchSite_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLaunchSite_Ingest(bb:flatbuffers.ByteBuffer, obj?:LaunchSite_Ingest):LaunchSite_Ingest {
  return (obj || new LaunchSite_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLaunchSite_Ingest(bb:flatbuffers.ByteBuffer, obj?:LaunchSite_Ingest):LaunchSite_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LaunchSite_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('LAUN');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: LAUNCHSITE-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Launch site code.
 * Example: /// Example: SAN MARCO
 * Constraints: Minimum length = 1, Maximum length = 64
 */
code():string|null
code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Abbreviated short name for the launch site.
 * Example: /// Example: SNMLP
 * Constraints: Minimum length = 0, Maximum length = 16
 */
shortCode():string|null
shortCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shortCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate launch site code.
 * Example: /// Example: 35
 * Constraints: Minimum length = 0, Maximum length = 64
 */
altCode():string|null
altCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent site associated with this launch site.
 * Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSite():string|null
idSite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Launch site name.
 * Example: /// Example: Example launch site name
 * Constraints: Minimum length = 1, Maximum length = 64
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():LaunchSite_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : LaunchSite_Ingest_dataMode_Enum.REAL;
}

static startLaunchSite_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(13);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, codeOffset, 0);
}

static addShortCode(builder:flatbuffers.Builder, shortCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, shortCodeOffset, 0);
}

static addAltCode(builder:flatbuffers.Builder, altCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, altCodeOffset, 0);
}

static addIdSite(builder:flatbuffers.Builder, idSiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idSiteOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, nameOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:LaunchSite_Ingest_dataMode_Enum) {
  builder.addFieldInt8(12, dataMode, LaunchSite_Ingest_dataMode_Enum.REAL);
}

static endLaunchSite_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLaunchSite_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LAUN');
}

static finishSizePrefixedLaunchSite_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LAUN', true);
}

static createLaunchSite_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, codeOffset:flatbuffers.Offset, shortCodeOffset:flatbuffers.Offset, altCodeOffset:flatbuffers.Offset, idSiteOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:LaunchSite_Ingest_dataMode_Enum):flatbuffers.Offset {
  LaunchSite_Ingest.startLaunchSite_Ingest(builder);
  LaunchSite_Ingest.addId(builder, idOffset);
  LaunchSite_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  LaunchSite_Ingest.addCode(builder, codeOffset);
  LaunchSite_Ingest.addShortCode(builder, shortCodeOffset);
  LaunchSite_Ingest.addAltCode(builder, altCodeOffset);
  LaunchSite_Ingest.addIdSite(builder, idSiteOffset);
  LaunchSite_Ingest.addName(builder, nameOffset);
  LaunchSite_Ingest.addCreatedAt(builder, createdAtOffset);
  LaunchSite_Ingest.addCreatedBy(builder, createdByOffset);
  LaunchSite_Ingest.addSource(builder, sourceOffset);
  LaunchSite_Ingest.addOrigin(builder, originOffset);
  LaunchSite_Ingest.addOrigNetwork(builder, origNetworkOffset);
  LaunchSite_Ingest.addDataMode(builder, dataMode);
  return LaunchSite_Ingest.endLaunchSite_Ingest(builder);
}

unpack(): LaunchSite_IngestT {
  return new LaunchSite_IngestT(
    this.id(),
    this.classificationMarking(),
    this.code(),
    this.shortCode(),
    this.altCode(),
    this.idSite(),
    this.name(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: LaunchSite_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.code = this.code();
  _o.shortCode = this.shortCode();
  _o.altCode = this.altCode();
  _o.idSite = this.idSite();
  _o.name = this.name();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class LaunchSite_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public code: string|Uint8Array|null = null,
  public shortCode: string|Uint8Array|null = null,
  public altCode: string|Uint8Array|null = null,
  public idSite: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: LaunchSite_Ingest_dataMode_Enum = LaunchSite_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const code = (this.code !== null ? builder.createString(this.code!) : 0);
  const shortCode = (this.shortCode !== null ? builder.createString(this.shortCode!) : 0);
  const altCode = (this.altCode !== null ? builder.createString(this.altCode!) : 0);
  const idSite = (this.idSite !== null ? builder.createString(this.idSite!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return LaunchSite_Ingest.createLaunchSite_Ingest(builder,
    id,
    classificationMarking,
    code,
    shortCode,
    altCode,
    idSite,
    name,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
