// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SolarArrayDetails_Full_dataMode_Enum } from './SolarArrayDetails_Full_dataMode_Enum.js';


/**
 * /// Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.
 */
export class SolarArrayDetails_Full implements flatbuffers.IUnpackableObject<SolarArrayDetails_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SolarArrayDetails_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSolarArrayDetails_Full(bb:flatbuffers.ByteBuffer, obj?:SolarArrayDetails_Full):SolarArrayDetails_Full {
  return (obj || new SolarArrayDetails_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSolarArrayDetails_Full(bb:flatbuffers.ByteBuffer, obj?:SolarArrayDetails_Full):SolarArrayDetails_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SolarArrayDetails_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SOLA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SOLARARRAYDETAILS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent SolarArray.
 * Example: /// Example: SOLARARRAY-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idSolarArray():string|null
idSolarArray(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSolarArray(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of solar array (e.g. U Shaped).
 * Example: /// Example: U Shaped
 * Constraints: Minimum length = 0, Maximum length = 64
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Solar array technology (e.g. Ga-As).
 * Example: /// Example: Ga-As
 * Constraints: Minimum length = 0, Maximum length = 64
 */
technology():string|null
technology(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
technology(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Solar array junction technology (e.g. Triple).
 * Example: /// Example: Triple
 * Constraints: Minimum length = 0, Maximum length = 64
 */
junctionTechnology():string|null
junctionTechnology(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
junctionTechnology(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the organization that manufactures the solar array.
 * Example: /// Example: MANUFACTURERORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Solar Array span in meters.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
span():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Solar Array area in square meters.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
area():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Solar array description/notes.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was last updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SolarArrayDetails_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SolarArrayDetails_Full_dataMode_Enum.REAL;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['TAG1', 'TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
manufacturerOrg():string|null
manufacturerOrg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSolarArrayDetails_Full(builder:flatbuffers.Builder) {
  builder.startObject(20);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdSolarArray(builder:flatbuffers.Builder, idSolarArrayOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idSolarArrayOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, typeOffset, 0);
}

static addTechnology(builder:flatbuffers.Builder, technologyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, technologyOffset, 0);
}

static addJunctionTechnology(builder:flatbuffers.Builder, junctionTechnologyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, junctionTechnologyOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, manufacturerOrgIdOffset, 0);
}

static addSpan(builder:flatbuffers.Builder, span:number) {
  builder.addFieldFloat64(7, span, 0.0);
}

static addArea(builder:flatbuffers.Builder, area:number) {
  builder.addFieldFloat64(8, area, 0.0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, descriptionOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, updatedByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SolarArrayDetails_Full_dataMode_Enum) {
  builder.addFieldInt8(17, dataMode, SolarArrayDetails_Full_dataMode_Enum.REAL);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addManufacturerOrg(builder:flatbuffers.Builder, manufacturerOrgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, manufacturerOrgOffset, 0);
}

static endSolarArrayDetails_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSolarArrayDetails_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SOLA');
}

static finishSizePrefixedSolarArrayDetails_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SOLA', true);
}

static createSolarArrayDetails_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idSolarArrayOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, technologyOffset:flatbuffers.Offset, junctionTechnologyOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, span:number, area:number, descriptionOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:SolarArrayDetails_Full_dataMode_Enum, tagsOffset:flatbuffers.Offset, manufacturerOrgOffset:flatbuffers.Offset):flatbuffers.Offset {
  SolarArrayDetails_Full.startSolarArrayDetails_Full(builder);
  SolarArrayDetails_Full.addId(builder, idOffset);
  SolarArrayDetails_Full.addIdSolarArray(builder, idSolarArrayOffset);
  SolarArrayDetails_Full.addClassificationMarking(builder, classificationMarkingOffset);
  SolarArrayDetails_Full.addType(builder, typeOffset);
  SolarArrayDetails_Full.addTechnology(builder, technologyOffset);
  SolarArrayDetails_Full.addJunctionTechnology(builder, junctionTechnologyOffset);
  SolarArrayDetails_Full.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  SolarArrayDetails_Full.addSpan(builder, span);
  SolarArrayDetails_Full.addArea(builder, area);
  SolarArrayDetails_Full.addDescription(builder, descriptionOffset);
  SolarArrayDetails_Full.addCreatedAt(builder, createdAtOffset);
  SolarArrayDetails_Full.addCreatedBy(builder, createdByOffset);
  SolarArrayDetails_Full.addUpdatedAt(builder, updatedAtOffset);
  SolarArrayDetails_Full.addUpdatedBy(builder, updatedByOffset);
  SolarArrayDetails_Full.addSource(builder, sourceOffset);
  SolarArrayDetails_Full.addOrigin(builder, originOffset);
  SolarArrayDetails_Full.addOrigNetwork(builder, origNetworkOffset);
  SolarArrayDetails_Full.addDataMode(builder, dataMode);
  SolarArrayDetails_Full.addTags(builder, tagsOffset);
  SolarArrayDetails_Full.addManufacturerOrg(builder, manufacturerOrgOffset);
  return SolarArrayDetails_Full.endSolarArrayDetails_Full(builder);
}

unpack(): SolarArrayDetails_FullT {
  return new SolarArrayDetails_FullT(
    this.id(),
    this.idSolarArray(),
    this.classificationMarking(),
    this.type(),
    this.technology(),
    this.junctionTechnology(),
    this.manufacturerOrgId(),
    this.span(),
    this.area(),
    this.description(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength()),
    this.manufacturerOrg()
  );
}


unpackTo(_o: SolarArrayDetails_FullT): void {
  _o.id = this.id();
  _o.idSolarArray = this.idSolarArray();
  _o.classificationMarking = this.classificationMarking();
  _o.type = this.type();
  _o.technology = this.technology();
  _o.junctionTechnology = this.junctionTechnology();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.span = this.span();
  _o.area = this.area();
  _o.description = this.description();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength());
  _o.manufacturerOrg = this.manufacturerOrg();
}
}

export class SolarArrayDetails_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idSolarArray: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public technology: string|Uint8Array|null = null,
  public junctionTechnology: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public span: number = 0.0,
  public area: number = 0.0,
  public description: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: SolarArrayDetails_Full_dataMode_Enum = SolarArrayDetails_Full_dataMode_Enum.REAL,
  public tags: (string)[] = [],
  public manufacturerOrg: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idSolarArray = (this.idSolarArray !== null ? builder.createString(this.idSolarArray!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const technology = (this.technology !== null ? builder.createString(this.technology!) : 0);
  const junctionTechnology = (this.junctionTechnology !== null ? builder.createString(this.junctionTechnology!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const tags = SolarArrayDetails_Full.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const manufacturerOrg = (this.manufacturerOrg !== null ? builder.createString(this.manufacturerOrg!) : 0);

  return SolarArrayDetails_Full.createSolarArrayDetails_Full(builder,
    id,
    idSolarArray,
    classificationMarking,
    type,
    technology,
    junctionTechnology,
    manufacturerOrgId,
    this.span,
    this.area,
    description,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    source,
    origin,
    origNetwork,
    this.dataMode,
    tags,
    manufacturerOrg
  );
}
}
