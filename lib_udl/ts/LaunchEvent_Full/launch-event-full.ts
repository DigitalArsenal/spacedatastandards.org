// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LaunchEvent_Full_dataMode_Enum } from './launch-event-full-data-mode-enum.js';


/**
 * /// Information on known launch events.
 */
export class LaunchEvent_Full implements flatbuffers.IUnpackableObject<LaunchEvent_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LaunchEvent_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLaunchEvent_Full(bb:flatbuffers.ByteBuffer, obj?:LaunchEvent_Full):LaunchEvent_Full {
  return (obj || new LaunchEvent_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLaunchEvent_Full(bb:flatbuffers.ByteBuffer, obj?:LaunchEvent_Full):LaunchEvent_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LaunchEvent_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('LAUN');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: LAUNCHEVENT-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the target on-orbit object, if correlated.
 * Example: /// Example: REF-ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional target-id, if missing in UDL.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The sources or SCG references from which the classification of this data is derived.
 * Example: /// Example: Example source
 * Constraints: Minimum length = 0, Maximum length = 128
 */
derivedFrom():string|null
derivedFrom(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
derivedFrom(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The declassification date of this data, in ISO 8601 UTC format.
 * Example: /// Example: 2021-01-01T01:02:02.123Z
 * Constraints: No constraints specified.
 */
declassificationDate():string|null
declassificationDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
declassificationDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Declassification string of this data.
 * Example: /// Example: Example Declassification
 * Constraints: Minimum length = 0, Maximum length = 256
 */
declassificationString():string|null
declassificationString(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
declassificationString(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Timestamp of the originating message in ISO8601 UTC format.
 * Example: /// Example: 2020-01-01T00:00:00.123Z
 * Constraints: No constraints specified.
 */
msgCreateDate():string|null
msgCreateDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgCreateDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The DISOB launch Failure Code, if applicable.
 * Example: /// Example: Example failure code
 * Constraints: Minimum length = 0, Maximum length = 100
 */
launchFailureCode():string|null
launchFailureCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchFailureCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The launch date, in ISO8601 UTC format.
 * Example: /// Example: 2020-01-01T00:00:00.123Z
 * Constraints: No constraints specified.
 */
launchDate():string|null
launchDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Basic Encyclopedia Number, if applicable.
 * Example: /// Example: ENC-123
 * Constraints: Minimum length = 0, Maximum length = 10
 */
beNumber():string|null
beNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
beNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The OSuffix, if applicable.
 * Example: /// Example: oSuffix
 * Constraints: Minimum length = 0, Maximum length = 10
 */
oSuffix():string|null
oSuffix(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
oSuffix(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Launch facility name.
 * Example: /// Example: Example launch facility name
 * Constraints: Minimum length = 0, Maximum length = 100
 */
launchFacilityName():string|null
launchFacilityName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchFacilityName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():LaunchEvent_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : LaunchEvent_Full_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
onOrbit():string|null
onOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
onOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the target on-orbit object.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startLaunchEvent_Full(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idOnOrbitOffset, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, origObjectIdOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, classificationMarkingOffset, 0);
}

static addDerivedFrom(builder:flatbuffers.Builder, derivedFromOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, derivedFromOffset, 0);
}

static addDeclassificationDate(builder:flatbuffers.Builder, declassificationDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, declassificationDateOffset, 0);
}

static addDeclassificationString(builder:flatbuffers.Builder, declassificationStringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, declassificationStringOffset, 0);
}

static addMsgCreateDate(builder:flatbuffers.Builder, msgCreateDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, msgCreateDateOffset, 0);
}

static addLaunchFailureCode(builder:flatbuffers.Builder, launchFailureCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, launchFailureCodeOffset, 0);
}

static addLaunchDate(builder:flatbuffers.Builder, launchDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, launchDateOffset, 0);
}

static addBeNumber(builder:flatbuffers.Builder, beNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, beNumberOffset, 0);
}

static addOSuffix(builder:flatbuffers.Builder, oSuffixOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, oSuffixOffset, 0);
}

static addLaunchFacilityName(builder:flatbuffers.Builder, launchFacilityNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, launchFacilityNameOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, createdByOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, originOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, sourceOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:LaunchEvent_Full_dataMode_Enum) {
  builder.addFieldInt8(17, dataMode, LaunchEvent_Full_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, origNetworkOffset, 0);
}

static addOnOrbit(builder:flatbuffers.Builder, onOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, onOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(20, satNo, 0);
}

static endLaunchEvent_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLaunchEvent_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LAUN');
}

static finishSizePrefixedLaunchEvent_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LAUN', true);
}

static createLaunchEvent_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, origObjectIdOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, derivedFromOffset:flatbuffers.Offset, declassificationDateOffset:flatbuffers.Offset, declassificationStringOffset:flatbuffers.Offset, msgCreateDateOffset:flatbuffers.Offset, launchFailureCodeOffset:flatbuffers.Offset, launchDateOffset:flatbuffers.Offset, beNumberOffset:flatbuffers.Offset, oSuffixOffset:flatbuffers.Offset, launchFacilityNameOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, dataMode:LaunchEvent_Full_dataMode_Enum, origNetworkOffset:flatbuffers.Offset, onOrbitOffset:flatbuffers.Offset, satNo:number):flatbuffers.Offset {
  LaunchEvent_Full.startLaunchEvent_Full(builder);
  LaunchEvent_Full.addId(builder, idOffset);
  LaunchEvent_Full.addIdOnOrbit(builder, idOnOrbitOffset);
  LaunchEvent_Full.addOrigObjectId(builder, origObjectIdOffset);
  LaunchEvent_Full.addClassificationMarking(builder, classificationMarkingOffset);
  LaunchEvent_Full.addDerivedFrom(builder, derivedFromOffset);
  LaunchEvent_Full.addDeclassificationDate(builder, declassificationDateOffset);
  LaunchEvent_Full.addDeclassificationString(builder, declassificationStringOffset);
  LaunchEvent_Full.addMsgCreateDate(builder, msgCreateDateOffset);
  LaunchEvent_Full.addLaunchFailureCode(builder, launchFailureCodeOffset);
  LaunchEvent_Full.addLaunchDate(builder, launchDateOffset);
  LaunchEvent_Full.addBeNumber(builder, beNumberOffset);
  LaunchEvent_Full.addOSuffix(builder, oSuffixOffset);
  LaunchEvent_Full.addLaunchFacilityName(builder, launchFacilityNameOffset);
  LaunchEvent_Full.addCreatedAt(builder, createdAtOffset);
  LaunchEvent_Full.addCreatedBy(builder, createdByOffset);
  LaunchEvent_Full.addOrigin(builder, originOffset);
  LaunchEvent_Full.addSource(builder, sourceOffset);
  LaunchEvent_Full.addDataMode(builder, dataMode);
  LaunchEvent_Full.addOrigNetwork(builder, origNetworkOffset);
  LaunchEvent_Full.addOnOrbit(builder, onOrbitOffset);
  LaunchEvent_Full.addSatNo(builder, satNo);
  return LaunchEvent_Full.endLaunchEvent_Full(builder);
}

unpack(): LaunchEvent_FullT {
  return new LaunchEvent_FullT(
    this.id(),
    this.idOnOrbit(),
    this.origObjectId(),
    this.classificationMarking(),
    this.derivedFrom(),
    this.declassificationDate(),
    this.declassificationString(),
    this.msgCreateDate(),
    this.launchFailureCode(),
    this.launchDate(),
    this.beNumber(),
    this.oSuffix(),
    this.launchFacilityName(),
    this.createdAt(),
    this.createdBy(),
    this.origin(),
    this.source(),
    this.dataMode(),
    this.origNetwork(),
    this.onOrbit(),
    this.satNo()
  );
}


unpackTo(_o: LaunchEvent_FullT): void {
  _o.id = this.id();
  _o.idOnOrbit = this.idOnOrbit();
  _o.origObjectId = this.origObjectId();
  _o.classificationMarking = this.classificationMarking();
  _o.derivedFrom = this.derivedFrom();
  _o.declassificationDate = this.declassificationDate();
  _o.declassificationString = this.declassificationString();
  _o.msgCreateDate = this.msgCreateDate();
  _o.launchFailureCode = this.launchFailureCode();
  _o.launchDate = this.launchDate();
  _o.beNumber = this.beNumber();
  _o.oSuffix = this.oSuffix();
  _o.launchFacilityName = this.launchFacilityName();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.origin = this.origin();
  _o.source = this.source();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
  _o.onOrbit = this.onOrbit();
  _o.satNo = this.satNo();
}
}

export class LaunchEvent_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public origObjectId: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public derivedFrom: string|Uint8Array|null = null,
  public declassificationDate: string|Uint8Array|null = null,
  public declassificationString: string|Uint8Array|null = null,
  public msgCreateDate: string|Uint8Array|null = null,
  public launchFailureCode: string|Uint8Array|null = null,
  public launchDate: string|Uint8Array|null = null,
  public beNumber: string|Uint8Array|null = null,
  public oSuffix: string|Uint8Array|null = null,
  public launchFacilityName: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public dataMode: LaunchEvent_Full_dataMode_Enum = LaunchEvent_Full_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null,
  public onOrbit: string|Uint8Array|null = null,
  public satNo: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const derivedFrom = (this.derivedFrom !== null ? builder.createString(this.derivedFrom!) : 0);
  const declassificationDate = (this.declassificationDate !== null ? builder.createString(this.declassificationDate!) : 0);
  const declassificationString = (this.declassificationString !== null ? builder.createString(this.declassificationString!) : 0);
  const msgCreateDate = (this.msgCreateDate !== null ? builder.createString(this.msgCreateDate!) : 0);
  const launchFailureCode = (this.launchFailureCode !== null ? builder.createString(this.launchFailureCode!) : 0);
  const launchDate = (this.launchDate !== null ? builder.createString(this.launchDate!) : 0);
  const beNumber = (this.beNumber !== null ? builder.createString(this.beNumber!) : 0);
  const oSuffix = (this.oSuffix !== null ? builder.createString(this.oSuffix!) : 0);
  const launchFacilityName = (this.launchFacilityName !== null ? builder.createString(this.launchFacilityName!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const onOrbit = (this.onOrbit !== null ? builder.createString(this.onOrbit!) : 0);

  return LaunchEvent_Full.createLaunchEvent_Full(builder,
    id,
    idOnOrbit,
    origObjectId,
    classificationMarking,
    derivedFrom,
    declassificationDate,
    declassificationString,
    msgCreateDate,
    launchFailureCode,
    launchDate,
    beNumber,
    oSuffix,
    launchFacilityName,
    createdAt,
    createdBy,
    origin,
    source,
    this.dataMode,
    origNetwork,
    onOrbit,
    this.satNo
  );
}
}
