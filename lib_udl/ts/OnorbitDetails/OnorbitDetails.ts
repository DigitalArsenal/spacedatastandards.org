// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OnorbitDetails_dataMode_Enum } from './OnorbitDetails_dataMode_Enum.js';


/**
 * /// Contains details of the OnOrbit object.
 */
export class OnorbitDetails implements flatbuffers.IUnpackableObject<OnorbitDetailsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OnorbitDetails {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOnorbitDetails(bb:flatbuffers.ByteBuffer, obj?:OnorbitDetails):OnorbitDetails {
  return (obj || new OnorbitDetails()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOnorbitDetails(bb:flatbuffers.ByteBuffer, obj?:OnorbitDetails):OnorbitDetails {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OnorbitDetails()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ONOR');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: ONORBITDETAILS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID of the parent Onorbit record.
 * Example: /// Example: REF-ONORBIT-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
lastObTime():string|null
lastObTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastObTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Current/latest visual magnitude in M.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
vismag():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum visual magnitude in M.
 * Example: /// Example: 5.23
 * Constraints: No constraints specified.
 */
vismagMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum visual magnitude in M.
 * Example: /// Example: 15.23
 * Constraints: No constraints specified.
 */
vismagMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Mean visual magnitude in M.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
vismagMean():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Current/latest radar cross section in meters squared.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
rcs():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum radar cross section in meters squared.
 * Example: /// Example: 5.23
 * Constraints: No constraints specified.
 */
rcsMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum radar cross section in meters squared.
 * Example: /// Example: 15.23
 * Constraints: No constraints specified.
 */
rcsMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Mean radar cross section in meters squared.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
rcsMean():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The total beginning of life delta V of the spacecraft, in meters per second.
 * Example: /// Example: 1000.1
 * Constraints: No constraints specified.
 */
bolDeltaV():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum delta V available for this on-orbit spacecraft, in meters per second.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
maxDeltaV():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
 * Example: /// Example: 50.1
 * Constraints: No constraints specified.
 */
deltaVunc():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Estimated maximum burn duration for the object, in seconds.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
estDeltaVduration():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The number of distinct missions the spacecraft performs.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
numMission():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
 * Example: /// Example: ['Weather', 'Space Weather']
 * Constraints: No constraints specified.
 */
missionTypes(index: number):string
missionTypes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
missionTypes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

missionTypesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Type of the bus on the spacecraft.
 * Example: /// Example: A2100
 * Constraints: Minimum length = 0, Maximum length = 32
 */
busType():string|null
busType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
busType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
 * Example: /// Example: 90.23
 * Constraints: No constraints specified.
 */
geoSlot():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * GEO drift rate, if applicable in degrees per day.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
driftRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft dry mass (without fuel or disposables) in kilograms.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
dryMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Mass of fuel and disposables at launch time in kilograms.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
additionalMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
 * Example: /// Example: 5.23
 * Constraints: No constraints specified.
 */
launchMassMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Nominal mass of spacecraft and fuel at launch time, in kilograms.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
launchMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
 * Example: /// Example: 15.23
 * Constraints: No constraints specified.
 */
launchMassMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft beginning of life fuel mass, in orbit, in kilograms.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
bolFuelMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The estimated total current mass of the spacecraft, in kilograms.
 * Example: /// Example: 500
 * Constraints: No constraints specified.
 */
currentMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
 * Example: /// Example: 50.1
 * Constraints: No constraints specified.
 */
totalMassUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft deployed area of solar array in meters squared.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
solarArrayArea():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
maneuverable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Estimated remaining fuel for the object in kilograms.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
fuelRemaining():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average cross sectional area in meters squared.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
crossSection():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average cross sectional area of the bus in meters squared.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
busCrossSection():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
maxRadius():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
colaRadius():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
adeptRadius():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The number of sub-satellites or deployable objects on the spacecraft.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
numDeployable():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
 * Example: /// Example: ['GOES-18A', 'GOES-18B']
 * Constraints: No constraints specified.
 */
depNames(index: number):string
depNames(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
depNames(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

depNamesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
 * Example: /// Example: [20, 21]
 * Constraints: No constraints specified.
 */
depEstMasses(index: number):string
depEstMasses(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
depEstMasses(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

depEstMassesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
 * Example: /// Example: [10, 5]
 * Constraints: No constraints specified.
 */
depMassUncs(index: number):string
depMassUncs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
depMassUncs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

depMassUncsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the source who last provided an observation for this idOnOrbit.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
lastObSource():string|null
lastObSource(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastObSource(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():OnorbitDetails_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OnorbitDetails_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was last updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startOnorbitDetails(builder:flatbuffers.Builder) {
  builder.startObject(50);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idOnOrbitOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addLastObTime(builder:flatbuffers.Builder, lastObTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, lastObTimeOffset, 0);
}

static addVismag(builder:flatbuffers.Builder, vismag:number) {
  builder.addFieldFloat64(4, vismag, 0.0);
}

static addVismagMin(builder:flatbuffers.Builder, vismagMin:number) {
  builder.addFieldFloat64(5, vismagMin, 0.0);
}

static addVismagMax(builder:flatbuffers.Builder, vismagMax:number) {
  builder.addFieldFloat64(6, vismagMax, 0.0);
}

static addVismagMean(builder:flatbuffers.Builder, vismagMean:number) {
  builder.addFieldFloat64(7, vismagMean, 0.0);
}

static addRcs(builder:flatbuffers.Builder, rcs:number) {
  builder.addFieldFloat64(8, rcs, 0.0);
}

static addRcsMin(builder:flatbuffers.Builder, rcsMin:number) {
  builder.addFieldFloat64(9, rcsMin, 0.0);
}

static addRcsMax(builder:flatbuffers.Builder, rcsMax:number) {
  builder.addFieldFloat64(10, rcsMax, 0.0);
}

static addRcsMean(builder:flatbuffers.Builder, rcsMean:number) {
  builder.addFieldFloat64(11, rcsMean, 0.0);
}

static addBolDeltaV(builder:flatbuffers.Builder, bolDeltaV:number) {
  builder.addFieldFloat64(12, bolDeltaV, 0.0);
}

static addMaxDeltaV(builder:flatbuffers.Builder, maxDeltaV:number) {
  builder.addFieldFloat64(13, maxDeltaV, 0.0);
}

static addDeltaVunc(builder:flatbuffers.Builder, deltaVunc:number) {
  builder.addFieldFloat64(14, deltaVunc, 0.0);
}

static addEstDeltaVduration(builder:flatbuffers.Builder, estDeltaVduration:number) {
  builder.addFieldFloat64(15, estDeltaVduration, 0.0);
}

static addNumMission(builder:flatbuffers.Builder, numMission:number) {
  builder.addFieldInt32(16, numMission, 0);
}

static addMissionTypes(builder:flatbuffers.Builder, missionTypesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, missionTypesOffset, 0);
}

static createMissionTypesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMissionTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBusType(builder:flatbuffers.Builder, busTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, busTypeOffset, 0);
}

static addGeoSlot(builder:flatbuffers.Builder, geoSlot:number) {
  builder.addFieldFloat64(19, geoSlot, 0.0);
}

static addDriftRate(builder:flatbuffers.Builder, driftRate:number) {
  builder.addFieldFloat64(20, driftRate, 0.0);
}

static addDryMass(builder:flatbuffers.Builder, dryMass:number) {
  builder.addFieldFloat64(21, dryMass, 0.0);
}

static addAdditionalMass(builder:flatbuffers.Builder, additionalMass:number) {
  builder.addFieldFloat64(22, additionalMass, 0.0);
}

static addLaunchMassMin(builder:flatbuffers.Builder, launchMassMin:number) {
  builder.addFieldFloat64(23, launchMassMin, 0.0);
}

static addLaunchMass(builder:flatbuffers.Builder, launchMass:number) {
  builder.addFieldFloat64(24, launchMass, 0.0);
}

static addLaunchMassMax(builder:flatbuffers.Builder, launchMassMax:number) {
  builder.addFieldFloat64(25, launchMassMax, 0.0);
}

static addBolFuelMass(builder:flatbuffers.Builder, bolFuelMass:number) {
  builder.addFieldFloat64(26, bolFuelMass, 0.0);
}

static addCurrentMass(builder:flatbuffers.Builder, currentMass:number) {
  builder.addFieldFloat64(27, currentMass, 0.0);
}

static addTotalMassUnc(builder:flatbuffers.Builder, totalMassUnc:number) {
  builder.addFieldFloat64(28, totalMassUnc, 0.0);
}

static addSolarArrayArea(builder:flatbuffers.Builder, solarArrayArea:number) {
  builder.addFieldFloat64(29, solarArrayArea, 0.0);
}

static addManeuverable(builder:flatbuffers.Builder, maneuverable:boolean) {
  builder.addFieldInt8(30, +maneuverable, +false);
}

static addFuelRemaining(builder:flatbuffers.Builder, fuelRemaining:number) {
  builder.addFieldFloat64(31, fuelRemaining, 0.0);
}

static addCrossSection(builder:flatbuffers.Builder, crossSection:number) {
  builder.addFieldFloat64(32, crossSection, 0.0);
}

static addBusCrossSection(builder:flatbuffers.Builder, busCrossSection:number) {
  builder.addFieldFloat64(33, busCrossSection, 0.0);
}

static addMaxRadius(builder:flatbuffers.Builder, maxRadius:number) {
  builder.addFieldFloat64(34, maxRadius, 0.0);
}

static addColaRadius(builder:flatbuffers.Builder, colaRadius:number) {
  builder.addFieldFloat64(35, colaRadius, 0.0);
}

static addAdeptRadius(builder:flatbuffers.Builder, adeptRadius:number) {
  builder.addFieldFloat64(36, adeptRadius, 0.0);
}

static addNumDeployable(builder:flatbuffers.Builder, numDeployable:number) {
  builder.addFieldInt32(37, numDeployable, 0);
}

static addDepNames(builder:flatbuffers.Builder, depNamesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, depNamesOffset, 0);
}

static createDepNamesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDepNamesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDepEstMasses(builder:flatbuffers.Builder, depEstMassesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, depEstMassesOffset, 0);
}

static createDepEstMassesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDepEstMassesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDepMassUncs(builder:flatbuffers.Builder, depMassUncsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, depMassUncsOffset, 0);
}

static createDepMassUncsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDepMassUncsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, originOffset, 0);
}

static addLastObSource(builder:flatbuffers.Builder, lastObSourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, lastObSourceOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:OnorbitDetails_dataMode_Enum) {
  builder.addFieldInt8(44, dataMode, OnorbitDetails_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, updatedByOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, origNetworkOffset, 0);
}

static endOnorbitDetails(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOnorbitDetailsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ONOR');
}

static finishSizePrefixedOnorbitDetailsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ONOR', true);
}

static createOnorbitDetails(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, lastObTimeOffset:flatbuffers.Offset, vismag:number, vismagMin:number, vismagMax:number, vismagMean:number, rcs:number, rcsMin:number, rcsMax:number, rcsMean:number, bolDeltaV:number, maxDeltaV:number, deltaVunc:number, estDeltaVduration:number, numMission:number, missionTypesOffset:flatbuffers.Offset, busTypeOffset:flatbuffers.Offset, geoSlot:number, driftRate:number, dryMass:number, additionalMass:number, launchMassMin:number, launchMass:number, launchMassMax:number, bolFuelMass:number, currentMass:number, totalMassUnc:number, solarArrayArea:number, maneuverable:boolean, fuelRemaining:number, crossSection:number, busCrossSection:number, maxRadius:number, colaRadius:number, adeptRadius:number, numDeployable:number, depNamesOffset:flatbuffers.Offset, depEstMassesOffset:flatbuffers.Offset, depMassUncsOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, lastObSourceOffset:flatbuffers.Offset, dataMode:OnorbitDetails_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  OnorbitDetails.startOnorbitDetails(builder);
  OnorbitDetails.addId(builder, idOffset);
  OnorbitDetails.addIdOnOrbit(builder, idOnOrbitOffset);
  OnorbitDetails.addClassificationMarking(builder, classificationMarkingOffset);
  OnorbitDetails.addLastObTime(builder, lastObTimeOffset);
  OnorbitDetails.addVismag(builder, vismag);
  OnorbitDetails.addVismagMin(builder, vismagMin);
  OnorbitDetails.addVismagMax(builder, vismagMax);
  OnorbitDetails.addVismagMean(builder, vismagMean);
  OnorbitDetails.addRcs(builder, rcs);
  OnorbitDetails.addRcsMin(builder, rcsMin);
  OnorbitDetails.addRcsMax(builder, rcsMax);
  OnorbitDetails.addRcsMean(builder, rcsMean);
  OnorbitDetails.addBolDeltaV(builder, bolDeltaV);
  OnorbitDetails.addMaxDeltaV(builder, maxDeltaV);
  OnorbitDetails.addDeltaVunc(builder, deltaVunc);
  OnorbitDetails.addEstDeltaVduration(builder, estDeltaVduration);
  OnorbitDetails.addNumMission(builder, numMission);
  OnorbitDetails.addMissionTypes(builder, missionTypesOffset);
  OnorbitDetails.addBusType(builder, busTypeOffset);
  OnorbitDetails.addGeoSlot(builder, geoSlot);
  OnorbitDetails.addDriftRate(builder, driftRate);
  OnorbitDetails.addDryMass(builder, dryMass);
  OnorbitDetails.addAdditionalMass(builder, additionalMass);
  OnorbitDetails.addLaunchMassMin(builder, launchMassMin);
  OnorbitDetails.addLaunchMass(builder, launchMass);
  OnorbitDetails.addLaunchMassMax(builder, launchMassMax);
  OnorbitDetails.addBolFuelMass(builder, bolFuelMass);
  OnorbitDetails.addCurrentMass(builder, currentMass);
  OnorbitDetails.addTotalMassUnc(builder, totalMassUnc);
  OnorbitDetails.addSolarArrayArea(builder, solarArrayArea);
  OnorbitDetails.addManeuverable(builder, maneuverable);
  OnorbitDetails.addFuelRemaining(builder, fuelRemaining);
  OnorbitDetails.addCrossSection(builder, crossSection);
  OnorbitDetails.addBusCrossSection(builder, busCrossSection);
  OnorbitDetails.addMaxRadius(builder, maxRadius);
  OnorbitDetails.addColaRadius(builder, colaRadius);
  OnorbitDetails.addAdeptRadius(builder, adeptRadius);
  OnorbitDetails.addNumDeployable(builder, numDeployable);
  OnorbitDetails.addDepNames(builder, depNamesOffset);
  OnorbitDetails.addDepEstMasses(builder, depEstMassesOffset);
  OnorbitDetails.addDepMassUncs(builder, depMassUncsOffset);
  OnorbitDetails.addSource(builder, sourceOffset);
  OnorbitDetails.addOrigin(builder, originOffset);
  OnorbitDetails.addLastObSource(builder, lastObSourceOffset);
  OnorbitDetails.addDataMode(builder, dataMode);
  OnorbitDetails.addCreatedAt(builder, createdAtOffset);
  OnorbitDetails.addCreatedBy(builder, createdByOffset);
  OnorbitDetails.addUpdatedAt(builder, updatedAtOffset);
  OnorbitDetails.addUpdatedBy(builder, updatedByOffset);
  OnorbitDetails.addOrigNetwork(builder, origNetworkOffset);
  return OnorbitDetails.endOnorbitDetails(builder);
}

unpack(): OnorbitDetailsT {
  return new OnorbitDetailsT(
    this.id(),
    this.idOnOrbit(),
    this.classificationMarking(),
    this.lastObTime(),
    this.vismag(),
    this.vismagMin(),
    this.vismagMax(),
    this.vismagMean(),
    this.rcs(),
    this.rcsMin(),
    this.rcsMax(),
    this.rcsMean(),
    this.bolDeltaV(),
    this.maxDeltaV(),
    this.deltaVunc(),
    this.estDeltaVduration(),
    this.numMission(),
    this.bb!.createScalarList<string>(this.missionTypes.bind(this), this.missionTypesLength()),
    this.busType(),
    this.geoSlot(),
    this.driftRate(),
    this.dryMass(),
    this.additionalMass(),
    this.launchMassMin(),
    this.launchMass(),
    this.launchMassMax(),
    this.bolFuelMass(),
    this.currentMass(),
    this.totalMassUnc(),
    this.solarArrayArea(),
    this.maneuverable(),
    this.fuelRemaining(),
    this.crossSection(),
    this.busCrossSection(),
    this.maxRadius(),
    this.colaRadius(),
    this.adeptRadius(),
    this.numDeployable(),
    this.bb!.createScalarList<string>(this.depNames.bind(this), this.depNamesLength()),
    this.bb!.createScalarList<string>(this.depEstMasses.bind(this), this.depEstMassesLength()),
    this.bb!.createScalarList<string>(this.depMassUncs.bind(this), this.depMassUncsLength()),
    this.source(),
    this.origin(),
    this.lastObSource(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.origNetwork()
  );
}


unpackTo(_o: OnorbitDetailsT): void {
  _o.id = this.id();
  _o.idOnOrbit = this.idOnOrbit();
  _o.classificationMarking = this.classificationMarking();
  _o.lastObTime = this.lastObTime();
  _o.vismag = this.vismag();
  _o.vismagMin = this.vismagMin();
  _o.vismagMax = this.vismagMax();
  _o.vismagMean = this.vismagMean();
  _o.rcs = this.rcs();
  _o.rcsMin = this.rcsMin();
  _o.rcsMax = this.rcsMax();
  _o.rcsMean = this.rcsMean();
  _o.bolDeltaV = this.bolDeltaV();
  _o.maxDeltaV = this.maxDeltaV();
  _o.deltaVunc = this.deltaVunc();
  _o.estDeltaVduration = this.estDeltaVduration();
  _o.numMission = this.numMission();
  _o.missionTypes = this.bb!.createScalarList<string>(this.missionTypes.bind(this), this.missionTypesLength());
  _o.busType = this.busType();
  _o.geoSlot = this.geoSlot();
  _o.driftRate = this.driftRate();
  _o.dryMass = this.dryMass();
  _o.additionalMass = this.additionalMass();
  _o.launchMassMin = this.launchMassMin();
  _o.launchMass = this.launchMass();
  _o.launchMassMax = this.launchMassMax();
  _o.bolFuelMass = this.bolFuelMass();
  _o.currentMass = this.currentMass();
  _o.totalMassUnc = this.totalMassUnc();
  _o.solarArrayArea = this.solarArrayArea();
  _o.maneuverable = this.maneuverable();
  _o.fuelRemaining = this.fuelRemaining();
  _o.crossSection = this.crossSection();
  _o.busCrossSection = this.busCrossSection();
  _o.maxRadius = this.maxRadius();
  _o.colaRadius = this.colaRadius();
  _o.adeptRadius = this.adeptRadius();
  _o.numDeployable = this.numDeployable();
  _o.depNames = this.bb!.createScalarList<string>(this.depNames.bind(this), this.depNamesLength());
  _o.depEstMasses = this.bb!.createScalarList<string>(this.depEstMasses.bind(this), this.depEstMassesLength());
  _o.depMassUncs = this.bb!.createScalarList<string>(this.depMassUncs.bind(this), this.depMassUncsLength());
  _o.source = this.source();
  _o.origin = this.origin();
  _o.lastObSource = this.lastObSource();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.origNetwork = this.origNetwork();
}
}

export class OnorbitDetailsT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public lastObTime: string|Uint8Array|null = null,
  public vismag: number = 0.0,
  public vismagMin: number = 0.0,
  public vismagMax: number = 0.0,
  public vismagMean: number = 0.0,
  public rcs: number = 0.0,
  public rcsMin: number = 0.0,
  public rcsMax: number = 0.0,
  public rcsMean: number = 0.0,
  public bolDeltaV: number = 0.0,
  public maxDeltaV: number = 0.0,
  public deltaVunc: number = 0.0,
  public estDeltaVduration: number = 0.0,
  public numMission: number = 0,
  public missionTypes: (string)[] = [],
  public busType: string|Uint8Array|null = null,
  public geoSlot: number = 0.0,
  public driftRate: number = 0.0,
  public dryMass: number = 0.0,
  public additionalMass: number = 0.0,
  public launchMassMin: number = 0.0,
  public launchMass: number = 0.0,
  public launchMassMax: number = 0.0,
  public bolFuelMass: number = 0.0,
  public currentMass: number = 0.0,
  public totalMassUnc: number = 0.0,
  public solarArrayArea: number = 0.0,
  public maneuverable: boolean = false,
  public fuelRemaining: number = 0.0,
  public crossSection: number = 0.0,
  public busCrossSection: number = 0.0,
  public maxRadius: number = 0.0,
  public colaRadius: number = 0.0,
  public adeptRadius: number = 0.0,
  public numDeployable: number = 0,
  public depNames: (string)[] = [],
  public depEstMasses: (string)[] = [],
  public depMassUncs: (string)[] = [],
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public lastObSource: string|Uint8Array|null = null,
  public dataMode: OnorbitDetails_dataMode_Enum = OnorbitDetails_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const lastObTime = (this.lastObTime !== null ? builder.createString(this.lastObTime!) : 0);
  const missionTypes = OnorbitDetails.createMissionTypesVector(builder, builder.createObjectOffsetList(this.missionTypes));
  const busType = (this.busType !== null ? builder.createString(this.busType!) : 0);
  const depNames = OnorbitDetails.createDepNamesVector(builder, builder.createObjectOffsetList(this.depNames));
  const depEstMasses = OnorbitDetails.createDepEstMassesVector(builder, builder.createObjectOffsetList(this.depEstMasses));
  const depMassUncs = OnorbitDetails.createDepMassUncsVector(builder, builder.createObjectOffsetList(this.depMassUncs));
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const lastObSource = (this.lastObSource !== null ? builder.createString(this.lastObSource!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return OnorbitDetails.createOnorbitDetails(builder,
    id,
    idOnOrbit,
    classificationMarking,
    lastObTime,
    this.vismag,
    this.vismagMin,
    this.vismagMax,
    this.vismagMean,
    this.rcs,
    this.rcsMin,
    this.rcsMax,
    this.rcsMean,
    this.bolDeltaV,
    this.maxDeltaV,
    this.deltaVunc,
    this.estDeltaVduration,
    this.numMission,
    missionTypes,
    busType,
    this.geoSlot,
    this.driftRate,
    this.dryMass,
    this.additionalMass,
    this.launchMassMin,
    this.launchMass,
    this.launchMassMax,
    this.bolFuelMass,
    this.currentMass,
    this.totalMassUnc,
    this.solarArrayArea,
    this.maneuverable,
    this.fuelRemaining,
    this.crossSection,
    this.busCrossSection,
    this.maxRadius,
    this.colaRadius,
    this.adeptRadius,
    this.numDeployable,
    depNames,
    depEstMasses,
    depMassUncs,
    source,
    origin,
    lastObSource,
    this.dataMode,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    origNetwork
  );
}
}
