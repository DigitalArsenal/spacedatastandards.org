// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
 */
export class AirspaceControlOrderReference_Full implements flatbuffers.IUnpackableObject<AirspaceControlOrderReference_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirspaceControlOrderReference_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirspaceControlOrderReference_Full(bb:flatbuffers.ByteBuffer, obj?:AirspaceControlOrderReference_Full):AirspaceControlOrderReference_Full {
  return (obj || new AirspaceControlOrderReference_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirspaceControlOrderReference_Full(bb:flatbuffers.ByteBuffer, obj?:AirspaceControlOrderReference_Full):AirspaceControlOrderReference_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirspaceControlOrderReference_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRS');
}

/**
 * Specifies an alphabetic serial number identifying a reference pertaining to this message.
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 8
 */
refSid():string|null
refSid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
refSid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies the type for this reference.
 * Example: /// Example: NBC1
 * Constraints: Minimum length = 0, Maximum length = 64
 */
refType():string|null
refType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
refType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originator of this reference.
 * Example: /// Example: SHAPE
 * Constraints: Minimum length = 0, Maximum length = 36
 */
refOriginator():string|null
refOriginator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
refOriginator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-07T13:55:43.123Z
 * Constraints: No constraints specified.
 */
refTs():string|null
refTs(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
refTs(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reference serial number.
 * Example: /// Example: 100
 * Constraints: Minimum length = 0, Maximum length = 16
 */
refSerialNum():string|null
refSerialNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
refSerialNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates any special actions, restrictions, guidance, or information relating to this reference.
 * Example: /// Example: NOTAL
 * Constraints: Minimum length = 0, Maximum length = 8
 */
refSpecialNotation():string|null
refSpecialNotation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
refSpecialNotation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
 * Example: /// Example: ['RCA', 'FN:4503B']
 * Constraints: No constraints specified.
 */
refSics(index: number):string
refSics(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
refSics(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

refSicsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startAirspaceControlOrderReference_Full(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addRefSid(builder:flatbuffers.Builder, refSidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, refSidOffset, 0);
}

static addRefType(builder:flatbuffers.Builder, refTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, refTypeOffset, 0);
}

static addRefOriginator(builder:flatbuffers.Builder, refOriginatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, refOriginatorOffset, 0);
}

static addRefTs(builder:flatbuffers.Builder, refTsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, refTsOffset, 0);
}

static addRefSerialNum(builder:flatbuffers.Builder, refSerialNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, refSerialNumOffset, 0);
}

static addRefSpecialNotation(builder:flatbuffers.Builder, refSpecialNotationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, refSpecialNotationOffset, 0);
}

static addRefSics(builder:flatbuffers.Builder, refSicsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, refSicsOffset, 0);
}

static createRefSicsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRefSicsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endAirspaceControlOrderReference_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirspaceControlOrderReference_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRS');
}

static finishSizePrefixedAirspaceControlOrderReference_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRS', true);
}

static createAirspaceControlOrderReference_Full(builder:flatbuffers.Builder, refSidOffset:flatbuffers.Offset, refTypeOffset:flatbuffers.Offset, refOriginatorOffset:flatbuffers.Offset, refTsOffset:flatbuffers.Offset, refSerialNumOffset:flatbuffers.Offset, refSpecialNotationOffset:flatbuffers.Offset, refSicsOffset:flatbuffers.Offset):flatbuffers.Offset {
  AirspaceControlOrderReference_Full.startAirspaceControlOrderReference_Full(builder);
  AirspaceControlOrderReference_Full.addRefSid(builder, refSidOffset);
  AirspaceControlOrderReference_Full.addRefType(builder, refTypeOffset);
  AirspaceControlOrderReference_Full.addRefOriginator(builder, refOriginatorOffset);
  AirspaceControlOrderReference_Full.addRefTs(builder, refTsOffset);
  AirspaceControlOrderReference_Full.addRefSerialNum(builder, refSerialNumOffset);
  AirspaceControlOrderReference_Full.addRefSpecialNotation(builder, refSpecialNotationOffset);
  AirspaceControlOrderReference_Full.addRefSics(builder, refSicsOffset);
  return AirspaceControlOrderReference_Full.endAirspaceControlOrderReference_Full(builder);
}

unpack(): AirspaceControlOrderReference_FullT {
  return new AirspaceControlOrderReference_FullT(
    this.refSid(),
    this.refType(),
    this.refOriginator(),
    this.refTs(),
    this.refSerialNum(),
    this.refSpecialNotation(),
    this.bb!.createScalarList<string>(this.refSics.bind(this), this.refSICs_Length())
  );
}


unpackTo(_o: AirspaceControlOrderReference_FullT): void {
  _o.refSId = this.refSid();
  _o.refType = this.refType();
  _o.refOriginator = this.refOriginator();
  _o.refTs = this.refTs();
  _o.refSerialNum = this.refSerialNum();
  _o.refSpecialNotation = this.refSpecialNotation();
  _o.refSICs = this.bb!.createScalarList<string>(this.refSics.bind(this), this.refSICs_Length());
}
}

export class AirspaceControlOrderReference_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public refSId: string|Uint8Array|null = null,
  public refType: string|Uint8Array|null = null,
  public refOriginator: string|Uint8Array|null = null,
  public refTs: string|Uint8Array|null = null,
  public refSerialNum: string|Uint8Array|null = null,
  public refSpecialNotation: string|Uint8Array|null = null,
  public refSICs: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const refSId = (this.refSId !== null ? builder.createString(this.refSId!) : 0);
  const refType = (this.refType !== null ? builder.createString(this.refType!) : 0);
  const refOriginator = (this.refOriginator !== null ? builder.createString(this.refOriginator!) : 0);
  const refTs = (this.refTs !== null ? builder.createString(this.refTs!) : 0);
  const refSerialNum = (this.refSerialNum !== null ? builder.createString(this.refSerialNum!) : 0);
  const refSpecialNotation = (this.refSpecialNotation !== null ? builder.createString(this.refSpecialNotation!) : 0);
  const refSICs = AirspaceControlOrderReference_Full.createRefSicsVector(builder, builder.createObjectOffsetList(this.refSICs));

  return AirspaceControlOrderReference_Full.createAirspaceControlOrderReference_Full(builder,
    refSId,
    refType,
    refOriginator,
    refTs,
    refSerialNum,
    refSpecialNotation,
    refSICs
  );
}
}
