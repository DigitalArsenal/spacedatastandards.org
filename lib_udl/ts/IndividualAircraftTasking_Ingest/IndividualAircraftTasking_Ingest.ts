// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection that specifies the naval flight operations for this ATO.
 */
export class IndividualAircraftTasking_Ingest implements flatbuffers.IUnpackableObject<IndividualAircraftTasking_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IndividualAircraftTasking_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIndividualAircraftTasking_Ingest(bb:flatbuffers.ByteBuffer, obj?:IndividualAircraftTasking_Ingest):IndividualAircraftTasking_Ingest {
  return (obj || new IndividualAircraftTasking_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIndividualAircraftTasking_Ingest(bb:flatbuffers.ByteBuffer, obj?:IndividualAircraftTasking_Ingest):IndividualAircraftTasking_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IndividualAircraftTasking_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('INDI');
}

/**
 * The number of aircraft participating in this mission.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
numAcft():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The type and model number for the aircraft. The field may specify a value of an aircraft not yet assigned an aircraft code contained in the aircraft codes list.
 * Example: /// Example: F35A
 * Constraints: Minimum length = 1, Maximum length = 36
 */
acftType():string|null
acftType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
acftType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The call sign assigned to this mission aircraft.
 * Example: /// Example: EAGLE47
 * Constraints: Minimum length = 0, Maximum length = 24
 */
callSign():string|null
callSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The code that indicates the ordinance mix carried on this mission aircraft.
 * Example: /// Example: 6A2W3
 * Constraints: Minimum length = 0, Maximum length = 48
 */
priConfigCode():string|null
priConfigCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
priConfigCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The code for the secondary ordinance mix carried on this mission aircraft.
 * Example: /// Example: 2S2WG
 * Constraints: Minimum length = 0, Maximum length = 48
 */
secConfigCode():string|null
secConfigCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
secConfigCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Link 16 abbreviated call sign assigned to the ACA. This is normally the first and last letter and the last two numbers of the call sign.
 * Example: /// Example: EE47
 * Constraints: Minimum length = 0, Maximum length = 8
 */
link16CallSign():string|null
link16CallSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
link16CallSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The TACAN channel assigned to this mission aircraft.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
tacanChan():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * An optional array of link 16 octal track numbers assigned as the primary JTIDS Unit (JU) address for the mission aircraft.
 * Example: /// Example: 12345
 * Constraints: No constraints specified.
 */
juAddress(index: number):string
juAddress(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
juAddress(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

juAddressLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The mode 1 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
 * Example: /// Example: 111
 * Constraints: Minimum length = 0, Maximum length = 8
 */
iffSifMode1Code():string|null
iffSifMode1Code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
iffSifMode1Code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The mode 2 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
 * Example: /// Example: 20147
 * Constraints: Minimum length = 0, Maximum length = 8
 */
iffSifMode2Code():string|null
iffSifMode2Code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
iffSifMode2Code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The mode 3 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
 * Example: /// Example: 30147
 * Constraints: Minimum length = 0, Maximum length = 8
 */
iffSifMode3Code():string|null
iffSifMode3Code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
iffSifMode3Code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startIndividualAircraftTasking_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addNumAcft(builder:flatbuffers.Builder, numAcft:number) {
  builder.addFieldInt32(0, numAcft, 0);
}

static addAcftType(builder:flatbuffers.Builder, acftTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, acftTypeOffset, 0);
}

static addCallSign(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, callSignOffset, 0);
}

static addPriConfigCode(builder:flatbuffers.Builder, priConfigCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, priConfigCodeOffset, 0);
}

static addSecConfigCode(builder:flatbuffers.Builder, secConfigCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, secConfigCodeOffset, 0);
}

static addLink16CallSign(builder:flatbuffers.Builder, link16CallSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, link16CallSignOffset, 0);
}

static addTacanChan(builder:flatbuffers.Builder, tacanChan:number) {
  builder.addFieldInt32(6, tacanChan, 0);
}

static addJuAddress(builder:flatbuffers.Builder, juAddressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, juAddressOffset, 0);
}

static createJuAddressVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startJuAddressVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIffSifMode1Code(builder:flatbuffers.Builder, iffSifMode1CodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, iffSifMode1CodeOffset, 0);
}

static addIffSifMode2Code(builder:flatbuffers.Builder, iffSifMode2CodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, iffSifMode2CodeOffset, 0);
}

static addIffSifMode3Code(builder:flatbuffers.Builder, iffSifMode3CodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, iffSifMode3CodeOffset, 0);
}

static endIndividualAircraftTasking_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishIndividualAircraftTasking_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'INDI');
}

static finishSizePrefixedIndividualAircraftTasking_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'INDI', true);
}

static createIndividualAircraftTasking_Ingest(builder:flatbuffers.Builder, numAcft:number, acftTypeOffset:flatbuffers.Offset, callSignOffset:flatbuffers.Offset, priConfigCodeOffset:flatbuffers.Offset, secConfigCodeOffset:flatbuffers.Offset, link16CallSignOffset:flatbuffers.Offset, tacanChan:number, juAddressOffset:flatbuffers.Offset, iffSifMode1CodeOffset:flatbuffers.Offset, iffSifMode2CodeOffset:flatbuffers.Offset, iffSifMode3CodeOffset:flatbuffers.Offset):flatbuffers.Offset {
  IndividualAircraftTasking_Ingest.startIndividualAircraftTasking_Ingest(builder);
  IndividualAircraftTasking_Ingest.addNumAcft(builder, numAcft);
  IndividualAircraftTasking_Ingest.addAcftType(builder, acftTypeOffset);
  IndividualAircraftTasking_Ingest.addCallSign(builder, callSignOffset);
  IndividualAircraftTasking_Ingest.addPriConfigCode(builder, priConfigCodeOffset);
  IndividualAircraftTasking_Ingest.addSecConfigCode(builder, secConfigCodeOffset);
  IndividualAircraftTasking_Ingest.addLink16CallSign(builder, link16CallSignOffset);
  IndividualAircraftTasking_Ingest.addTacanChan(builder, tacanChan);
  IndividualAircraftTasking_Ingest.addJuAddress(builder, juAddressOffset);
  IndividualAircraftTasking_Ingest.addIffSifMode1Code(builder, iffSifMode1CodeOffset);
  IndividualAircraftTasking_Ingest.addIffSifMode2Code(builder, iffSifMode2CodeOffset);
  IndividualAircraftTasking_Ingest.addIffSifMode3Code(builder, iffSifMode3CodeOffset);
  return IndividualAircraftTasking_Ingest.endIndividualAircraftTasking_Ingest(builder);
}

unpack(): IndividualAircraftTasking_IngestT {
  return new IndividualAircraftTasking_IngestT(
    this.numAcft(),
    this.acftType(),
    this.callSign(),
    this.priConfigCode(),
    this.secConfigCode(),
    this.link16CallSign(),
    this.tacanChan(),
    this.bb!.createScalarList<string>(this.juAddress.bind(this), this.juAddressLength()),
    this.iffSifMode1Code(),
    this.iffSifMode2Code(),
    this.iffSifMode3Code()
  );
}


unpackTo(_o: IndividualAircraftTasking_IngestT): void {
  _o.numAcft = this.numAcft();
  _o.acftType = this.acftType();
  _o.callSign = this.callSign();
  _o.priConfigCode = this.priConfigCode();
  _o.secConfigCode = this.secConfigCode();
  _o.link16CallSign = this.link16CallSign();
  _o.tacanChan = this.tacanChan();
  _o.juAddress = this.bb!.createScalarList<string>(this.juAddress.bind(this), this.juAddressLength());
  _o.iffSifMode1Code = this.iffSifMode1Code();
  _o.iffSifMode2Code = this.iffSifMode2Code();
  _o.iffSifMode3Code = this.iffSifMode3Code();
}
}

export class IndividualAircraftTasking_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public numAcft: number = 0,
  public acftType: string|Uint8Array|null = null,
  public callSign: string|Uint8Array|null = null,
  public priConfigCode: string|Uint8Array|null = null,
  public secConfigCode: string|Uint8Array|null = null,
  public link16CallSign: string|Uint8Array|null = null,
  public tacanChan: number = 0,
  public juAddress: (string)[] = [],
  public iffSifMode1Code: string|Uint8Array|null = null,
  public iffSifMode2Code: string|Uint8Array|null = null,
  public iffSifMode3Code: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const acftType = (this.acftType !== null ? builder.createString(this.acftType!) : 0);
  const callSign = (this.callSign !== null ? builder.createString(this.callSign!) : 0);
  const priConfigCode = (this.priConfigCode !== null ? builder.createString(this.priConfigCode!) : 0);
  const secConfigCode = (this.secConfigCode !== null ? builder.createString(this.secConfigCode!) : 0);
  const link16CallSign = (this.link16CallSign !== null ? builder.createString(this.link16CallSign!) : 0);
  const juAddress = IndividualAircraftTasking_Ingest.createJuAddressVector(builder, builder.createObjectOffsetList(this.juAddress));
  const iffSifMode1Code = (this.iffSifMode1Code !== null ? builder.createString(this.iffSifMode1Code!) : 0);
  const iffSifMode2Code = (this.iffSifMode2Code !== null ? builder.createString(this.iffSifMode2Code!) : 0);
  const iffSifMode3Code = (this.iffSifMode3Code !== null ? builder.createString(this.iffSifMode3Code!) : 0);

  return IndividualAircraftTasking_Ingest.createIndividualAircraftTasking_Ingest(builder,
    this.numAcft,
    acftType,
    callSign,
    priConfigCode,
    secConfigCode,
    link16CallSign,
    this.tacanChan,
    juAddress,
    iffSifMode1Code,
    iffSifMode2Code,
    iffSifMode3Code
  );
}
}
