// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Schema for SOI Calibration data.
 */
export class SOICalibration_Abridged implements flatbuffers.IUnpackableObject<SOICalibration_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SOICalibration_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSOICalibration_Abridged(bb:flatbuffers.ByteBuffer, obj?:SOICalibration_Abridged):SOICalibration_Abridged {
  return (obj || new SOICalibration_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSOICalibration_Abridged(bb:flatbuffers.ByteBuffer, obj?:SOICalibration_Abridged):SOICalibration_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SOICalibration_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SOIC');
}

/**
 * Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.
 * Example: /// Example: 0.2
 * Constraints: No constraints specified.
 */
calExtinctionCoeff():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.
 * Example: /// Example: 30086.25
 * Constraints: No constraints specified.
 */
calSkyBg():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Background intensity, at calibration, specified in kilowatts per steradian per micrometer.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
calBgIntensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).
 * Example: /// Example: 19.23664587
 * Constraints: No constraints specified.
 */
calSpectralFilterSolarMag():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).
 * Example: /// Example: 25.15682157
 * Constraints: No constraints specified.
 */
calZeroPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
calNumDetectedStars():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
calNumCorrelatedStars():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
 * Example: /// Example: 0.06474939
 * Constraints: No constraints specified.
 */
calExtinctionCoeffUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).
 * Example: /// Example: 0.19708838
 * Constraints: No constraints specified.
 */
calExtinctionCoeffMaxUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Start time of calibration in ISO 8601 UTC time, with millisecond precision.
 * Example: /// Example: 2023-01-02T16:00:00.123Z
 * Constraints: No constraints specified.
 */
calTime():string|null
calTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
calTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of calibration (e.g. PRE, MID, POST).
 * Example: /// Example: PRE
 * Constraints: Minimum length = 0, Maximum length = 24
 */
calType():string|null
calType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
calType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSOICalibration_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addCalExtinctionCoeff(builder:flatbuffers.Builder, calExtinctionCoeff:number) {
  builder.addFieldFloat64(0, calExtinctionCoeff, 0.0);
}

static addCalSkyBg(builder:flatbuffers.Builder, calSkyBg:number) {
  builder.addFieldFloat64(1, calSkyBg, 0.0);
}

static addCalBgIntensity(builder:flatbuffers.Builder, calBgIntensity:number) {
  builder.addFieldFloat64(2, calBgIntensity, 0.0);
}

static addCalSpectralFilterSolarMag(builder:flatbuffers.Builder, calSpectralFilterSolarMag:number) {
  builder.addFieldFloat64(3, calSpectralFilterSolarMag, 0.0);
}

static addCalZeroPoint(builder:flatbuffers.Builder, calZeroPoint:number) {
  builder.addFieldFloat64(4, calZeroPoint, 0.0);
}

static addCalNumDetectedStars(builder:flatbuffers.Builder, calNumDetectedStars:number) {
  builder.addFieldInt32(5, calNumDetectedStars, 0);
}

static addCalNumCorrelatedStars(builder:flatbuffers.Builder, calNumCorrelatedStars:number) {
  builder.addFieldInt32(6, calNumCorrelatedStars, 0);
}

static addCalExtinctionCoeffUnc(builder:flatbuffers.Builder, calExtinctionCoeffUnc:number) {
  builder.addFieldFloat64(7, calExtinctionCoeffUnc, 0.0);
}

static addCalExtinctionCoeffMaxUnc(builder:flatbuffers.Builder, calExtinctionCoeffMaxUnc:number) {
  builder.addFieldFloat64(8, calExtinctionCoeffMaxUnc, 0.0);
}

static addCalTime(builder:flatbuffers.Builder, calTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, calTimeOffset, 0);
}

static addCalType(builder:flatbuffers.Builder, calTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, calTypeOffset, 0);
}

static endSOICalibration_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSOICalibration_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SOIC');
}

static finishSizePrefixedSOICalibration_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SOIC', true);
}

static createSOICalibration_Abridged(builder:flatbuffers.Builder, calExtinctionCoeff:number, calSkyBg:number, calBgIntensity:number, calSpectralFilterSolarMag:number, calZeroPoint:number, calNumDetectedStars:number, calNumCorrelatedStars:number, calExtinctionCoeffUnc:number, calExtinctionCoeffMaxUnc:number, calTimeOffset:flatbuffers.Offset, calTypeOffset:flatbuffers.Offset):flatbuffers.Offset {
  SOICalibration_Abridged.startSOICalibration_Abridged(builder);
  SOICalibration_Abridged.addCalExtinctionCoeff(builder, calExtinctionCoeff);
  SOICalibration_Abridged.addCalSkyBg(builder, calSkyBg);
  SOICalibration_Abridged.addCalBgIntensity(builder, calBgIntensity);
  SOICalibration_Abridged.addCalSpectralFilterSolarMag(builder, calSpectralFilterSolarMag);
  SOICalibration_Abridged.addCalZeroPoint(builder, calZeroPoint);
  SOICalibration_Abridged.addCalNumDetectedStars(builder, calNumDetectedStars);
  SOICalibration_Abridged.addCalNumCorrelatedStars(builder, calNumCorrelatedStars);
  SOICalibration_Abridged.addCalExtinctionCoeffUnc(builder, calExtinctionCoeffUnc);
  SOICalibration_Abridged.addCalExtinctionCoeffMaxUnc(builder, calExtinctionCoeffMaxUnc);
  SOICalibration_Abridged.addCalTime(builder, calTimeOffset);
  SOICalibration_Abridged.addCalType(builder, calTypeOffset);
  return SOICalibration_Abridged.endSOICalibration_Abridged(builder);
}

unpack(): SOICalibration_AbridgedT {
  return new SOICalibration_AbridgedT(
    this.calExtinctionCoeff(),
    this.calSkyBg(),
    this.calBgIntensity(),
    this.calSpectralFilterSolarMag(),
    this.calZeroPoint(),
    this.calNumDetectedStars(),
    this.calNumCorrelatedStars(),
    this.calExtinctionCoeffUnc(),
    this.calExtinctionCoeffMaxUnc(),
    this.calTime(),
    this.calType()
  );
}


unpackTo(_o: SOICalibration_AbridgedT): void {
  _o.calExtinctionCoeff = this.calExtinctionCoeff();
  _o.calSkyBg = this.calSkyBg();
  _o.calBgIntensity = this.calBgIntensity();
  _o.calSpectralFilterSolarMag = this.calSpectralFilterSolarMag();
  _o.calZeroPoint = this.calZeroPoint();
  _o.calNumDetectedStars = this.calNumDetectedStars();
  _o.calNumCorrelatedStars = this.calNumCorrelatedStars();
  _o.calExtinctionCoeffUnc = this.calExtinctionCoeffUnc();
  _o.calExtinctionCoeffMaxUnc = this.calExtinctionCoeffMaxUnc();
  _o.calTime = this.calTime();
  _o.calType = this.calType();
}
}

export class SOICalibration_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public calExtinctionCoeff: number = 0.0,
  public calSkyBg: number = 0.0,
  public calBgIntensity: number = 0.0,
  public calSpectralFilterSolarMag: number = 0.0,
  public calZeroPoint: number = 0.0,
  public calNumDetectedStars: number = 0,
  public calNumCorrelatedStars: number = 0,
  public calExtinctionCoeffUnc: number = 0.0,
  public calExtinctionCoeffMaxUnc: number = 0.0,
  public calTime: string|Uint8Array|null = null,
  public calType: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const calTime = (this.calTime !== null ? builder.createString(this.calTime!) : 0);
  const calType = (this.calType !== null ? builder.createString(this.calType!) : 0);

  return SOICalibration_Abridged.createSOICalibration_Abridged(builder,
    this.calExtinctionCoeff,
    this.calSkyBg,
    this.calBgIntensity,
    this.calSpectralFilterSolarMag,
    this.calZeroPoint,
    this.calNumDetectedStars,
    this.calNumCorrelatedStars,
    this.calExtinctionCoeffUnc,
    this.calExtinctionCoeffMaxUnc,
    calTime,
    calType
  );
}
}
