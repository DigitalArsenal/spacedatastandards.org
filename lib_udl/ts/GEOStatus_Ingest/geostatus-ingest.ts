// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GEOStatus_Ingest_dataMode_Enum } from './geostatus-ingest-data-mode-enum.js';


/**
 * /// Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.
 */
export class GEOStatus_Ingest implements flatbuffers.IUnpackableObject<GEOStatus_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GEOStatus_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGEOStatus_Ingest(bb:flatbuffers.ByteBuffer, obj?:GEOStatus_Ingest):GEOStatus_Ingest {
  return (obj || new GEOStatus_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGEOStatus_Ingest(bb:flatbuffers.ByteBuffer, obj?:GEOStatus_Ingest):GEOStatus_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GEOStatus_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('GEOS');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: GEOSTATUS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the object on-orbit object.
 * Example: /// Example: REF-ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sine of inclination times the sine of right ascension.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
ss():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sine of inclination times the cosine of right ascension.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
sc():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Objects displacement from geostationary orbit in deg^2/day^2.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
relativeEnergy():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Corrective or overriding long term trend for longitudinal change in degrees/day.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
longitudeRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
 * Example: /// Example: 180.1
 * Constraints: No constraints specified.
 */
longitudeMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
 * Example: /// Example: 1.01
 * Constraints: No constraints specified.
 */
longitudeMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Indicates the confidence level in the entry.  (Low, Medium, High).
 * Example: /// Example: Low
 * Constraints: Minimum length = 0, Maximum length = 8
 */
confidenceLevel():string|null
confidenceLevel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
confidenceLevel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geosynchronous plane changing status.  (Current, Never, Former, Future).
 * Example: /// Example: Current
 * Constraints: Minimum length = 0, Maximum length = 8
 */
planeChangeStatus():string|null
planeChangeStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
planeChangeStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the trough (gravity well) or drift direction of a space object:
 * 255 - Influenced by 255° longitude trough. 
 * 75 - Influenced by 75° longitude trough. 
 * Both - Oscillating between both 255 and 75 troughs. 
 * East - Drifting eastward; large relative energy and a period less than 1436.1 minutes. 
 * West - Drifting westward; large relative energy and a period greater than 1436.2 minutes.
 * Example: /// Example: West
 * Constraints: Minimum length = 0, Maximum length = 8
 */
troughType():string|null
troughType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
troughType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Lost space object indicator.  (True or False).
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
lostFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Semi-annual correction.  (True or False).
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
semiAnnualCorrFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Space object status.  (Active, Dead, Unknown).
 * Example: /// Example: Active
 * Constraints: Minimum length = 0, Maximum length = 32
 */
objectStatus():string|null
objectStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: Example URI
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():GEOStatus_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : GEOStatus_Ingest_dataMode_Enum.REAL;
}

/**
 * Satellite/catalog number of the target on-orbit object.
 * Example: /// Example: 21
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startGEOStatus_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(24);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOnOrbitOffset, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, origObjectIdOffset, 0);
}

static addSs(builder:flatbuffers.Builder, ss:number) {
  builder.addFieldFloat64(4, ss, 0.0);
}

static addSc(builder:flatbuffers.Builder, sc:number) {
  builder.addFieldFloat64(5, sc, 0.0);
}

static addRelativeEnergy(builder:flatbuffers.Builder, relativeEnergy:number) {
  builder.addFieldFloat64(6, relativeEnergy, 0.0);
}

static addLongitudeRate(builder:flatbuffers.Builder, longitudeRate:number) {
  builder.addFieldFloat64(7, longitudeRate, 0.0);
}

static addLongitudeMin(builder:flatbuffers.Builder, longitudeMin:number) {
  builder.addFieldFloat64(8, longitudeMin, 0.0);
}

static addLongitudeMax(builder:flatbuffers.Builder, longitudeMax:number) {
  builder.addFieldFloat64(9, longitudeMax, 0.0);
}

static addConfidenceLevel(builder:flatbuffers.Builder, confidenceLevelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, confidenceLevelOffset, 0);
}

static addPlaneChangeStatus(builder:flatbuffers.Builder, planeChangeStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, planeChangeStatusOffset, 0);
}

static addTroughType(builder:flatbuffers.Builder, troughTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, troughTypeOffset, 0);
}

static addLostFlag(builder:flatbuffers.Builder, lostFlag:boolean) {
  builder.addFieldInt8(13, +lostFlag, +false);
}

static addSemiAnnualCorrFlag(builder:flatbuffers.Builder, semiAnnualCorrFlag:boolean) {
  builder.addFieldInt8(14, +semiAnnualCorrFlag, +false);
}

static addObjectStatus(builder:flatbuffers.Builder, objectStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, objectStatusOffset, 0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, rawFileUriOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:GEOStatus_Ingest_dataMode_Enum) {
  builder.addFieldInt8(21, dataMode, GEOStatus_Ingest_dataMode_Enum.REAL);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(22, satNo, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, origNetworkOffset, 0);
}

static endGEOStatus_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishGEOStatus_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'GEOS');
}

static finishSizePrefixedGEOStatus_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'GEOS', true);
}

static createGEOStatus_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, origObjectIdOffset:flatbuffers.Offset, ss:number, sc:number, relativeEnergy:number, longitudeRate:number, longitudeMin:number, longitudeMax:number, confidenceLevelOffset:flatbuffers.Offset, planeChangeStatusOffset:flatbuffers.Offset, troughTypeOffset:flatbuffers.Offset, lostFlag:boolean, semiAnnualCorrFlag:boolean, objectStatusOffset:flatbuffers.Offset, rawFileUriOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:GEOStatus_Ingest_dataMode_Enum, satNo:number, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  GEOStatus_Ingest.startGEOStatus_Ingest(builder);
  GEOStatus_Ingest.addId(builder, idOffset);
  GEOStatus_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  GEOStatus_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
  GEOStatus_Ingest.addOrigObjectId(builder, origObjectIdOffset);
  GEOStatus_Ingest.addSs(builder, ss);
  GEOStatus_Ingest.addSc(builder, sc);
  GEOStatus_Ingest.addRelativeEnergy(builder, relativeEnergy);
  GEOStatus_Ingest.addLongitudeRate(builder, longitudeRate);
  GEOStatus_Ingest.addLongitudeMin(builder, longitudeMin);
  GEOStatus_Ingest.addLongitudeMax(builder, longitudeMax);
  GEOStatus_Ingest.addConfidenceLevel(builder, confidenceLevelOffset);
  GEOStatus_Ingest.addPlaneChangeStatus(builder, planeChangeStatusOffset);
  GEOStatus_Ingest.addTroughType(builder, troughTypeOffset);
  GEOStatus_Ingest.addLostFlag(builder, lostFlag);
  GEOStatus_Ingest.addSemiAnnualCorrFlag(builder, semiAnnualCorrFlag);
  GEOStatus_Ingest.addObjectStatus(builder, objectStatusOffset);
  GEOStatus_Ingest.addRawFileUri(builder, rawFileUriOffset);
  GEOStatus_Ingest.addCreatedAt(builder, createdAtOffset);
  GEOStatus_Ingest.addCreatedBy(builder, createdByOffset);
  GEOStatus_Ingest.addSource(builder, sourceOffset);
  GEOStatus_Ingest.addOrigin(builder, originOffset);
  GEOStatus_Ingest.addDataMode(builder, dataMode);
  GEOStatus_Ingest.addSatNo(builder, satNo);
  GEOStatus_Ingest.addOrigNetwork(builder, origNetworkOffset);
  return GEOStatus_Ingest.endGEOStatus_Ingest(builder);
}

unpack(): GEOStatus_IngestT {
  return new GEOStatus_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idOnOrbit(),
    this.origObjectId(),
    this.ss(),
    this.sc(),
    this.relativeEnergy(),
    this.longitudeRate(),
    this.longitudeMin(),
    this.longitudeMax(),
    this.confidenceLevel(),
    this.planeChangeStatus(),
    this.troughType(),
    this.lostFlag(),
    this.semiAnnualCorrFlag(),
    this.objectStatus(),
    this.rawFileUri(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.satNo(),
    this.origNetwork()
  );
}


unpackTo(_o: GEOStatus_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idOnOrbit = this.idOnOrbit();
  _o.origObjectId = this.origObjectId();
  _o.ss = this.ss();
  _o.sc = this.sc();
  _o.relativeEnergy = this.relativeEnergy();
  _o.longitudeRate = this.longitudeRate();
  _o.longitudeMin = this.longitudeMin();
  _o.longitudeMax = this.longitudeMax();
  _o.confidenceLevel = this.confidenceLevel();
  _o.planeChangeStatus = this.planeChangeStatus();
  _o.troughType = this.troughType();
  _o.lostFlag = this.lostFlag();
  _o.semiAnnualCorrFlag = this.semiAnnualCorrFlag();
  _o.objectStatus = this.objectStatus();
  _o.rawFileURI = this.rawFileUri();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.satNo = this.satNo();
  _o.origNetwork = this.origNetwork();
}
}

export class GEOStatus_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public origObjectId: string|Uint8Array|null = null,
  public ss: number = 0.0,
  public sc: number = 0.0,
  public relativeEnergy: number = 0.0,
  public longitudeRate: number = 0.0,
  public longitudeMin: number = 0.0,
  public longitudeMax: number = 0.0,
  public confidenceLevel: string|Uint8Array|null = null,
  public planeChangeStatus: string|Uint8Array|null = null,
  public troughType: string|Uint8Array|null = null,
  public lostFlag: boolean = false,
  public semiAnnualCorrFlag: boolean = false,
  public objectStatus: string|Uint8Array|null = null,
  public rawFileURI: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: GEOStatus_Ingest_dataMode_Enum = GEOStatus_Ingest_dataMode_Enum.REAL,
  public satNo: number = 0,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const confidenceLevel = (this.confidenceLevel !== null ? builder.createString(this.confidenceLevel!) : 0);
  const planeChangeStatus = (this.planeChangeStatus !== null ? builder.createString(this.planeChangeStatus!) : 0);
  const troughType = (this.troughType !== null ? builder.createString(this.troughType!) : 0);
  const objectStatus = (this.objectStatus !== null ? builder.createString(this.objectStatus!) : 0);
  const rawFileURI = (this.rawFileURI !== null ? builder.createString(this.rawFileURI!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return GEOStatus_Ingest.createGEOStatus_Ingest(builder,
    id,
    classificationMarking,
    idOnOrbit,
    origObjectId,
    this.ss,
    this.sc,
    this.relativeEnergy,
    this.longitudeRate,
    this.longitudeMin,
    this.longitudeMax,
    confidenceLevel,
    planeChangeStatus,
    troughType,
    this.lostFlag,
    this.semiAnnualCorrFlag,
    objectStatus,
    rawFileURI,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    this.satNo,
    origNetwork
  );
}
}
