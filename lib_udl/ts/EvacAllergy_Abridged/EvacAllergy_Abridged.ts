// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Allergy information.
 */
export class EvacAllergy_Abridged implements flatbuffers.IUnpackableObject<EvacAllergy_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EvacAllergy_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEvacAllergy_Abridged(bb:flatbuffers.ByteBuffer, obj?:EvacAllergy_Abridged):EvacAllergy_Abridged {
  return (obj || new EvacAllergy_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEvacAllergy_Abridged(bb:flatbuffers.ByteBuffer, obj?:EvacAllergy_Abridged):EvacAllergy_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EvacAllergy_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EVAC');
}

/**
 * Type of patient allergy (e.g.  PENICILLIN, SULFA, OTHER).
 * Example: /// Example: PENICILLIN
 * Constraints: Minimum length = 0, Maximum length = 64
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional comments on the  patient's allergy information.
 * Example: /// Example: Comments on the patient's allergies.
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
comments():string|null
comments(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
comments(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEvacAllergy_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addComments(builder:flatbuffers.Builder, commentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, commentsOffset, 0);
}

static endEvacAllergy_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEvacAllergy_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC');
}

static finishSizePrefixedEvacAllergy_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC', true);
}

static createEvacAllergy_Abridged(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, commentsOffset:flatbuffers.Offset):flatbuffers.Offset {
  EvacAllergy_Abridged.startEvacAllergy_Abridged(builder);
  EvacAllergy_Abridged.addType(builder, typeOffset);
  EvacAllergy_Abridged.addComments(builder, commentsOffset);
  return EvacAllergy_Abridged.endEvacAllergy_Abridged(builder);
}

unpack(): EvacAllergy_AbridgedT {
  return new EvacAllergy_AbridgedT(
    this.type(),
    this.comments()
  );
}


unpackTo(_o: EvacAllergy_AbridgedT): void {
  _o.type = this.type();
  _o.comments = this.comments();
}
}

export class EvacAllergy_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public type: string|Uint8Array|null = null,
  public comments: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const comments = (this.comments !== null ? builder.createString(this.comments!) : 0);

  return EvacAllergy_Abridged.createEvacAllergy_Abridged(builder,
    type,
    comments
  );
}
}
