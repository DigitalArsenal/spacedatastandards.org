// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
 */
export class AirspaceControlMeansStatus_Full implements flatbuffers.IUnpackableObject<AirspaceControlMeansStatus_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirspaceControlMeansStatus_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirspaceControlMeansStatus_Full(bb:flatbuffers.ByteBuffer, obj?:AirspaceControlMeansStatus_Full):AirspaceControlMeansStatus_Full {
  return (obj || new AirspaceControlMeansStatus_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirspaceControlMeansStatus_Full(bb:flatbuffers.ByteBuffer, obj?:AirspaceControlMeansStatus_Full):AirspaceControlMeansStatus_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirspaceControlMeansStatus_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRS');
}

/**
 * Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
 * Example: /// Example: ADD
 * Constraints: Minimum length = 0, Maximum length = 8
 */
cmStat():string|null
cmStat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cmStat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Airspace control means name or designator. Mandatory if acmStat equals "DELETE," otherwise this field is prohibited.
 * Example: /// Example: ['DESIGN:B35', 'NAME:ERMA', 'RANG:C21-C25']
 * Constraints: No constraints specified.
 */
cmStatId(index: number):string
cmStatId(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
cmStatId(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

cmStatIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
airspaceControlMeans(index: number):string
airspaceControlMeans(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
airspaceControlMeans(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

airspaceControlMeansLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startAirspaceControlMeansStatus_Full(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCmStat(builder:flatbuffers.Builder, cmStatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, cmStatOffset, 0);
}

static addCmStatId(builder:flatbuffers.Builder, cmStatIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, cmStatIdOffset, 0);
}

static createCmStatIdVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCmStatIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAirspaceControlMeans(builder:flatbuffers.Builder, airspaceControlMeansOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, airspaceControlMeansOffset, 0);
}

static createAirspaceControlMeansVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAirspaceControlMeansVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endAirspaceControlMeansStatus_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirspaceControlMeansStatus_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRS');
}

static finishSizePrefixedAirspaceControlMeansStatus_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRS', true);
}

static createAirspaceControlMeansStatus_Full(builder:flatbuffers.Builder, cmStatOffset:flatbuffers.Offset, cmStatIdOffset:flatbuffers.Offset, airspaceControlMeansOffset:flatbuffers.Offset):flatbuffers.Offset {
  AirspaceControlMeansStatus_Full.startAirspaceControlMeansStatus_Full(builder);
  AirspaceControlMeansStatus_Full.addCmStat(builder, cmStatOffset);
  AirspaceControlMeansStatus_Full.addCmStatId(builder, cmStatIdOffset);
  AirspaceControlMeansStatus_Full.addAirspaceControlMeans(builder, airspaceControlMeansOffset);
  return AirspaceControlMeansStatus_Full.endAirspaceControlMeansStatus_Full(builder);
}

unpack(): AirspaceControlMeansStatus_FullT {
  return new AirspaceControlMeansStatus_FullT(
    this.cmStat(),
    this.bb!.createScalarList<string>(this.cmStatId.bind(this), this.cmStatIdLength()),
    this.bb!.createScalarList<string>(this.airspaceControlMeans.bind(this), this.airspaceControlMeansLength())
  );
}


unpackTo(_o: AirspaceControlMeansStatus_FullT): void {
  _o.cmStat = this.cmStat();
  _o.cmStatId = this.bb!.createScalarList<string>(this.cmStatId.bind(this), this.cmStatIdLength());
  _o.airspaceControlMeans = this.bb!.createScalarList<string>(this.airspaceControlMeans.bind(this), this.airspaceControlMeansLength());
}
}

export class AirspaceControlMeansStatus_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public cmStat: string|Uint8Array|null = null,
  public cmStatId: (string)[] = [],
  public airspaceControlMeans: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const cmStat = (this.cmStat !== null ? builder.createString(this.cmStat!) : 0);
  const cmStatId = AirspaceControlMeansStatus_Full.createCmStatIdVector(builder, builder.createObjectOffsetList(this.cmStatId));
  const airspaceControlMeans = AirspaceControlMeansStatus_Full.createAirspaceControlMeansVector(builder, builder.createObjectOffsetList(this.airspaceControlMeans));

  return AirspaceControlMeansStatus_Full.createAirspaceControlMeansStatus_Full(builder,
    cmStat,
    cmStatId,
    airspaceControlMeans
  );
}
}
