// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Remarks associated with this LogisticsSupport record.
 */
export class LogisticsSegments_Ingest implements flatbuffers.IUnpackableObject<LogisticsSegments_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LogisticsSegments_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLogisticsSegments_Ingest(bb:flatbuffers.ByteBuffer, obj?:LogisticsSegments_Ingest):LogisticsSegments_Ingest {
  return (obj || new LogisticsSegments_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLogisticsSegments_Ingest(bb:flatbuffers.ByteBuffer, obj?:LogisticsSegments_Ingest):LogisticsSegments_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LogisticsSegments_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('LOGI');
}

/**
 * Used to sequence the segments in the transportation plan.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
segmentNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Transportation mode.  AMC airlift, Commercial airlift, Other, or surface transportation.
 * Example: /// Example: A
 * Constraints: Minimum length = 1, Maximum length = 1
 */
modeCode():string|null
modeCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of mission (e.g. SAAM, CHNL, etc.).
 * Example: /// Example: SAAM
 * Constraints: Minimum length = 0, Maximum length = 6
 */
missionType():string|null
missionType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The unique identifier of the mission to which this logistics record is assigned.
 * Example: /// Example: EXAMPLE-UUID
 * Constraints: Minimum length = 0, Maximum length = 32
 */
idMission():string|null
idMission(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idMission(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The GDSS mission ID for this segment.
 * Example: /// Example: 2001101RF01202307062205
 * Constraints: Minimum length = 0, Maximum length = 24
 */
extMissionId():string|null
extMissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
extMissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The user generated identifier for an air mission subgroup.
 * Example: /// Example: TAM308901196
 * Constraints: Minimum length = 0, Maximum length = 12
 */
missionNumber():string|null
missionNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start air mission itinerary point identifier.
 * Example: /// Example: 200
 * Constraints: No constraints specified.
 */
itin():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The identifier that represents a specific aircraft within an aircraft type.
 * Example: /// Example: N819AX
 * Constraints: Minimum length = 0, Maximum length = 7
 */
segTailNumber():string|null
segTailNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
segTailNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
 * Example: /// Example: B7772E
 * Constraints: Minimum length = 0, Maximum length = 30
 */
segAircraftMds():string|null
segAircraftMds(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
segAircraftMds(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Airport ICAO departure code.
 * Example: /// Example: PHIK
 * Constraints: Minimum length = 0, Maximum length = 4
 */
departureIcao():string|null
departureIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
departureIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Actual departure time to the segment destination, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-17T19:20:00.123Z
 * Constraints: No constraints specified.
 */
segActDepTime():string|null
segActDepTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
segActDepTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Airport ICAO arrival code.
 * Example: /// Example: YBCS
 * Constraints: Minimum length = 0, Maximum length = 4
 */
arrivalIcao():string|null
arrivalIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrivalIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Actual arrival time to segment destination, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-17T19:20:00.123Z
 * Constraints: No constraints specified.
 */
segActArrTime():string|null
segActArrTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
segActArrTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * GC. LGTPS_C_DT_EST_DEP.  GD2: Estimated departure time from the segment origin. Only supplied when the segment is not attached to a Mission, otherwise the ETD is derived from the Mission segment origin point. This datetime should be in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-17T19:20:00.123Z
 * Constraints: No constraints specified.
 */
segEstDepTime():string|null
segEstDepTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
segEstDepTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * GC. LGTPS_C_DT_EST_ARR.  GD2: Estimated arrival time to the segment destination. Only supplied when the segment is not attached to a Mission, otherwise the ETA is derived from the Mission segment destination point. This datetime should be in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-17T19:20:00.123Z
 * Constraints: No constraints specified.
 */
segEstArrTime():string|null
segEstArrTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
segEstArrTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startLogisticsSegments_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(15);
}

static addSegmentNumber(builder:flatbuffers.Builder, segmentNumber:number) {
  builder.addFieldInt32(0, segmentNumber, 0);
}

static addModeCode(builder:flatbuffers.Builder, modeCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, modeCodeOffset, 0);
}

static addMissionType(builder:flatbuffers.Builder, missionTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, missionTypeOffset, 0);
}

static addIdMission(builder:flatbuffers.Builder, idMissionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idMissionOffset, 0);
}

static addExtMissionId(builder:flatbuffers.Builder, extMissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, extMissionIdOffset, 0);
}

static addMissionNumber(builder:flatbuffers.Builder, missionNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, missionNumberOffset, 0);
}

static addItin(builder:flatbuffers.Builder, itin:number) {
  builder.addFieldInt32(6, itin, 0);
}

static addSegTailNumber(builder:flatbuffers.Builder, segTailNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, segTailNumberOffset, 0);
}

static addSegAircraftMds(builder:flatbuffers.Builder, segAircraftMdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, segAircraftMdsOffset, 0);
}

static addDepartureIcao(builder:flatbuffers.Builder, departureIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, departureIcaoOffset, 0);
}

static addSegActDepTime(builder:flatbuffers.Builder, segActDepTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, segActDepTimeOffset, 0);
}

static addArrivalIcao(builder:flatbuffers.Builder, arrivalIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, arrivalIcaoOffset, 0);
}

static addSegActArrTime(builder:flatbuffers.Builder, segActArrTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, segActArrTimeOffset, 0);
}

static addSegEstDepTime(builder:flatbuffers.Builder, segEstDepTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, segEstDepTimeOffset, 0);
}

static addSegEstArrTime(builder:flatbuffers.Builder, segEstArrTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, segEstArrTimeOffset, 0);
}

static endLogisticsSegments_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLogisticsSegments_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI');
}

static finishSizePrefixedLogisticsSegments_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI', true);
}

static createLogisticsSegments_Ingest(builder:flatbuffers.Builder, segmentNumber:number, modeCodeOffset:flatbuffers.Offset, missionTypeOffset:flatbuffers.Offset, idMissionOffset:flatbuffers.Offset, extMissionIdOffset:flatbuffers.Offset, missionNumberOffset:flatbuffers.Offset, itin:number, segTailNumberOffset:flatbuffers.Offset, segAircraftMdsOffset:flatbuffers.Offset, departureIcaoOffset:flatbuffers.Offset, segActDepTimeOffset:flatbuffers.Offset, arrivalIcaoOffset:flatbuffers.Offset, segActArrTimeOffset:flatbuffers.Offset, segEstDepTimeOffset:flatbuffers.Offset, segEstArrTimeOffset:flatbuffers.Offset):flatbuffers.Offset {
  LogisticsSegments_Ingest.startLogisticsSegments_Ingest(builder);
  LogisticsSegments_Ingest.addSegmentNumber(builder, segmentNumber);
  LogisticsSegments_Ingest.addModeCode(builder, modeCodeOffset);
  LogisticsSegments_Ingest.addMissionType(builder, missionTypeOffset);
  LogisticsSegments_Ingest.addIdMission(builder, idMissionOffset);
  LogisticsSegments_Ingest.addExtMissionId(builder, extMissionIdOffset);
  LogisticsSegments_Ingest.addMissionNumber(builder, missionNumberOffset);
  LogisticsSegments_Ingest.addItin(builder, itin);
  LogisticsSegments_Ingest.addSegTailNumber(builder, segTailNumberOffset);
  LogisticsSegments_Ingest.addSegAircraftMds(builder, segAircraftMdsOffset);
  LogisticsSegments_Ingest.addDepartureIcao(builder, departureIcaoOffset);
  LogisticsSegments_Ingest.addSegActDepTime(builder, segActDepTimeOffset);
  LogisticsSegments_Ingest.addArrivalIcao(builder, arrivalIcaoOffset);
  LogisticsSegments_Ingest.addSegActArrTime(builder, segActArrTimeOffset);
  LogisticsSegments_Ingest.addSegEstDepTime(builder, segEstDepTimeOffset);
  LogisticsSegments_Ingest.addSegEstArrTime(builder, segEstArrTimeOffset);
  return LogisticsSegments_Ingest.endLogisticsSegments_Ingest(builder);
}

unpack(): LogisticsSegments_IngestT {
  return new LogisticsSegments_IngestT(
    this.segmentNumber(),
    this.modeCode(),
    this.missionType(),
    this.idMission(),
    this.extMissionId(),
    this.missionNumber(),
    this.itin(),
    this.segTailNumber(),
    this.segAircraftMds(),
    this.departureIcao(),
    this.segActDepTime(),
    this.arrivalIcao(),
    this.segActArrTime(),
    this.segEstDepTime(),
    this.segEstArrTime()
  );
}


unpackTo(_o: LogisticsSegments_IngestT): void {
  _o.segmentNumber = this.segmentNumber();
  _o.modeCode = this.modeCode();
  _o.missionType = this.missionType();
  _o.idMission = this.idMission();
  _o.extMissionId = this.extMissionId();
  _o.missionNumber = this.missionNumber();
  _o.itin = this.itin();
  _o.segTailNumber = this.segTailNumber();
  _o.segAircraftMds = this.segAircraftMds();
  _o.departureIcao = this.departureIcao();
  _o.segActDepTime = this.segActDepTime();
  _o.arrivalIcao = this.arrivalIcao();
  _o.segActArrTime = this.segActArrTime();
  _o.segEstDepTime = this.segEstDepTime();
  _o.segEstArrTime = this.segEstArrTime();
}
}

export class LogisticsSegments_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public segmentNumber: number = 0,
  public modeCode: string|Uint8Array|null = null,
  public missionType: string|Uint8Array|null = null,
  public idMission: string|Uint8Array|null = null,
  public extMissionId: string|Uint8Array|null = null,
  public missionNumber: string|Uint8Array|null = null,
  public itin: number = 0,
  public segTailNumber: string|Uint8Array|null = null,
  public segAircraftMds: string|Uint8Array|null = null,
  public departureIcao: string|Uint8Array|null = null,
  public segActDepTime: string|Uint8Array|null = null,
  public arrivalIcao: string|Uint8Array|null = null,
  public segActArrTime: string|Uint8Array|null = null,
  public segEstDepTime: string|Uint8Array|null = null,
  public segEstArrTime: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const modeCode = (this.modeCode !== null ? builder.createString(this.modeCode!) : 0);
  const missionType = (this.missionType !== null ? builder.createString(this.missionType!) : 0);
  const idMission = (this.idMission !== null ? builder.createString(this.idMission!) : 0);
  const extMissionId = (this.extMissionId !== null ? builder.createString(this.extMissionId!) : 0);
  const missionNumber = (this.missionNumber !== null ? builder.createString(this.missionNumber!) : 0);
  const segTailNumber = (this.segTailNumber !== null ? builder.createString(this.segTailNumber!) : 0);
  const segAircraftMds = (this.segAircraftMds !== null ? builder.createString(this.segAircraftMds!) : 0);
  const departureIcao = (this.departureIcao !== null ? builder.createString(this.departureIcao!) : 0);
  const segActDepTime = (this.segActDepTime !== null ? builder.createString(this.segActDepTime!) : 0);
  const arrivalIcao = (this.arrivalIcao !== null ? builder.createString(this.arrivalIcao!) : 0);
  const segActArrTime = (this.segActArrTime !== null ? builder.createString(this.segActArrTime!) : 0);
  const segEstDepTime = (this.segEstDepTime !== null ? builder.createString(this.segEstDepTime!) : 0);
  const segEstArrTime = (this.segEstArrTime !== null ? builder.createString(this.segEstArrTime!) : 0);

  return LogisticsSegments_Ingest.createLogisticsSegments_Ingest(builder,
    this.segmentNumber,
    modeCode,
    missionType,
    idMission,
    extMissionId,
    missionNumber,
    this.itin,
    segTailNumber,
    segAircraftMds,
    departureIcao,
    segActDepTime,
    arrivalIcao,
    segActArrTime,
    segEstDepTime,
    segEstArrTime
  );
}
}
