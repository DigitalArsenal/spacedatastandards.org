// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { IonoObservationPolarization_Abridged_data_Enum } from './iono-observation-polarization-abridged-data-enum.js';


/**
 * /// Multidimensional array of enums that identifies either classic/basic polarization discrimination “O” or “X” corresponding to ordinary or extraordinary polarizations, respectively. Exclude this enumeration if no classic/basic polarization discrimination is implemented. May accommodate other modes in addition to “O” and “X” with proper documentation in notes field.
 */
export class IonoObservationPolarization_Abridged implements flatbuffers.IUnpackableObject<IonoObservationPolarization_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IonoObservationPolarization_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIonoObservationPolarization_Abridged(bb:flatbuffers.ByteBuffer, obj?:IonoObservationPolarization_Abridged):IonoObservationPolarization_Abridged {
  return (obj || new IonoObservationPolarization_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIonoObservationPolarization_Abridged(bb:flatbuffers.ByteBuffer, obj?:IonoObservationPolarization_Abridged):IonoObservationPolarization_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IonoObservationPolarization_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('IONO');
}

/**
 * Notes for the polarization data.
 * Example: /// Example: NOTES
 * Constraints: Minimum length = 0, Maximum length = 512
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of integers for polarization dimensions.
 * Example: /// Example: [1, 2]
 * Constraints: No constraints specified.
 */
dimensions(index: number):string
dimensions(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
dimensions(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dimensionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of names for dimensions.
 * Example: /// Example: ['NAME1', 'NAME2']
 * Constraints: No constraints specified.
 */
dimensionName(index: number):string
dimensionName(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
dimensionName(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dimensionNameLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of polarization data.
 * Example: /// Example: [[[[[[['X', 'O']]]]]]]
 * Constraints: No constraints specified.
 */
data():IonoObservationPolarization_Abridged_data_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : IonoObservationPolarization_Abridged_data_Enum.X;
}

static startIonoObservationPolarization_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, notesOffset, 0);
}

static addDimensions(builder:flatbuffers.Builder, dimensionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dimensionsOffset, 0);
}

static createDimensionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDimensionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDimensionName(builder:flatbuffers.Builder, dimensionNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dimensionNameOffset, 0);
}

static createDimensionNameVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDimensionNameVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addData(builder:flatbuffers.Builder, data:IonoObservationPolarization_Abridged_data_Enum) {
  builder.addFieldInt8(3, data, IonoObservationPolarization_Abridged_data_Enum.X);
}

static endIonoObservationPolarization_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishIonoObservationPolarization_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO');
}

static finishSizePrefixedIonoObservationPolarization_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO', true);
}

static createIonoObservationPolarization_Abridged(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset, dimensionsOffset:flatbuffers.Offset, dimensionNameOffset:flatbuffers.Offset, data:IonoObservationPolarization_Abridged_data_Enum):flatbuffers.Offset {
  IonoObservationPolarization_Abridged.startIonoObservationPolarization_Abridged(builder);
  IonoObservationPolarization_Abridged.addNotes(builder, notesOffset);
  IonoObservationPolarization_Abridged.addDimensions(builder, dimensionsOffset);
  IonoObservationPolarization_Abridged.addDimensionName(builder, dimensionNameOffset);
  IonoObservationPolarization_Abridged.addData(builder, data);
  return IonoObservationPolarization_Abridged.endIonoObservationPolarization_Abridged(builder);
}

unpack(): IonoObservationPolarization_AbridgedT {
  return new IonoObservationPolarization_AbridgedT(
    this.notes(),
    this.bb!.createScalarList<string>(this.dimensions.bind(this), this.dimensions_Length()),
    this.bb!.createScalarList<string>(this.dimensionName.bind(this), this.dimensionName_Length()),
    this.data()
  );
}


unpackTo(_o: IonoObservationPolarization_AbridgedT): void {
  _o.notes = this.notes();
  _o.dimensions = this.bb!.createScalarList<string>(this.dimensions.bind(this), this.dimensions_Length());
  _o.dimensionName = this.bb!.createScalarList<string>(this.dimensionName.bind(this), this.dimensionName_Length());
  _o.data = this.data();
}
}

export class IonoObservationPolarization_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public notes: string|Uint8Array|null = null,
  public dimensions: (string)[] = [],
  public dimensionName: (string)[] = [],
  public data: IonoObservationPolarization_Abridged_data_Enum = IonoObservationPolarization_Abridged_data_Enum.X
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const dimensions = IonoObservationPolarization_Abridged.createDimensionsVector(builder, builder.createObjectOffsetList(this.dimensions));
  const dimensionName = IonoObservationPolarization_Abridged.createDimensionNameVector(builder, builder.createObjectOffsetList(this.dimensionName));

  return IonoObservationPolarization_Abridged.createIonoObservationPolarization_Abridged(builder,
    notes,
    dimensions,
    dimensionName,
    this.data
  );
}
}
