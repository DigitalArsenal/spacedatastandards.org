// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// The supply stocks for this support item.
 */
export class LogisticsStocks_Full implements flatbuffers.IUnpackableObject<LogisticsStocks_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LogisticsStocks_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLogisticsStocks_Full(bb:flatbuffers.ByteBuffer, obj?:LogisticsStocks_Full):LogisticsStocks_Full {
  return (obj || new LogisticsStocks_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLogisticsStocks_Full(bb:flatbuffers.ByteBuffer, obj?:LogisticsStocks_Full):LogisticsStocks_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LogisticsStocks_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('LOGI');
}

/**
 * The ICAO code for the primary location with available parts.
 * Example: /// Example: PHIK
 * Constraints: Minimum length = 0, Maximum length = 4
 */
sourceIcao():string|null
sourceIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The quantity of available parts needed from sourceICAO.
 * Example: /// Example: 4
 * Constraints: No constraints specified.
 */
quantity():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The datetime when the parts were sourced, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-13T13:47:00.123Z
 * Constraints: No constraints specified.
 */
stockCheckTime():string|null
stockCheckTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stockCheckTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The point of contact at the sourced location.
 * Example: /// Example: SMITH, JOHN J
 * Constraints: Minimum length = 0, Maximum length = 68
 */
stockPoc():string|null
stockPoc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stockPoc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startLogisticsStocks_Full(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addSourceIcao(builder:flatbuffers.Builder, sourceIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, sourceIcaoOffset, 0);
}

static addQuantity(builder:flatbuffers.Builder, quantity:number) {
  builder.addFieldInt32(1, quantity, 0);
}

static addStockCheckTime(builder:flatbuffers.Builder, stockCheckTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, stockCheckTimeOffset, 0);
}

static addStockPoc(builder:flatbuffers.Builder, stockPocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, stockPocOffset, 0);
}

static endLogisticsStocks_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLogisticsStocks_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI');
}

static finishSizePrefixedLogisticsStocks_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI', true);
}

static createLogisticsStocks_Full(builder:flatbuffers.Builder, sourceIcaoOffset:flatbuffers.Offset, quantity:number, stockCheckTimeOffset:flatbuffers.Offset, stockPocOffset:flatbuffers.Offset):flatbuffers.Offset {
  LogisticsStocks_Full.startLogisticsStocks_Full(builder);
  LogisticsStocks_Full.addSourceIcao(builder, sourceIcaoOffset);
  LogisticsStocks_Full.addQuantity(builder, quantity);
  LogisticsStocks_Full.addStockCheckTime(builder, stockCheckTimeOffset);
  LogisticsStocks_Full.addStockPoc(builder, stockPocOffset);
  return LogisticsStocks_Full.endLogisticsStocks_Full(builder);
}

unpack(): LogisticsStocks_FullT {
  return new LogisticsStocks_FullT(
    this.sourceIcao(),
    this.quantity(),
    this.stockCheckTime(),
    this.stockPoc()
  );
}


unpackTo(_o: LogisticsStocks_FullT): void {
  _o.sourceIcao = this.sourceIcao();
  _o.quantity = this.quantity();
  _o.stockCheckTime = this.stockCheckTime();
  _o.stockPoc = this.stockPoc();
}
}

export class LogisticsStocks_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public sourceIcao: string|Uint8Array|null = null,
  public quantity: number = 0,
  public stockCheckTime: string|Uint8Array|null = null,
  public stockPoc: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const sourceIcao = (this.sourceIcao !== null ? builder.createString(this.sourceIcao!) : 0);
  const stockCheckTime = (this.stockCheckTime !== null ? builder.createString(this.stockCheckTime!) : 0);
  const stockPoc = (this.stockPoc !== null ? builder.createString(this.stockPoc!) : 0);

  return LogisticsStocks_Full.createLogisticsStocks_Full(builder,
    sourceIcao,
    this.quantity,
    stockCheckTime,
    stockPoc
  );
}
}
