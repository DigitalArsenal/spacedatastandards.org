// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Schema for Missile Track Vector data.
 */
export class MissileTrackVector_Ingest implements flatbuffers.IUnpackableObject<MissileTrackVector_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MissileTrackVector_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMissileTrackVector_Ingest(bb:flatbuffers.ByteBuffer, obj?:MissileTrackVector_Ingest):MissileTrackVector_Ingest {
  return (obj || new MissileTrackVector_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMissileTrackVector_Ingest(bb:flatbuffers.ByteBuffer, obj?:MissileTrackVector_Ingest):MissileTrackVector_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MissileTrackVector_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MISS');
}

/**
 * Type of vector represented (e.g. LOS, PREDICTED, STATE).
 * Example: /// Example: STATE
 * Constraints: Minimum length = 0, Maximum length = 16
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Object to which this vector applies.
 * Example: /// Example: TARGET
 * Constraints: Minimum length = 0, Maximum length = 16
 */
object():string|null
object(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
object(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Vector timestamp in ISO8601 UTC format, with microsecond precision.
 * Example: /// Example: 2024-03-30T15:02:39.346768Z
 * Constraints: No constraints specified.
 */
epoch():string|null
epoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
epoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the reporting sensor of the object.
 * Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by the source to indicate the reporting sensor of the object. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 46
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Three element array, expressing the cartesian position vector of the target object, in kilometers, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x, y, z].
 * Example: /// Example: [-1456.91592, -2883.54041, 6165.55186]
 * Constraints: No constraints specified.
 */
pos(index: number):string
pos(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
pos(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

posLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Three element array, expressing the cartesian velocity vector of the target object, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x', y', z'].
 * Example: /// Example: [-1.21981, -6.60208, -3.36515]
 * Constraints: No constraints specified.
 */
vel(index: number):string
vel(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
vel(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

velLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Three element array, expressing the cartesian acceleration vector of the target object, in kilometers/second^2, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x'', y'', z''].
 * Example: /// Example: [0.59236, -0.03537, 0.35675]
 * Constraints: No constraints specified.
 */
accel(index: number):string
accel(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
accel(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

accelLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Track object course, in degrees clockwise from true north.
 * Example: /// Example: 7.3580153
 * Constraints: No constraints specified.
 */
course():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Track object speed, in kilometers/sec.
 * Example: /// Example: 15.03443
 * Constraints: No constraints specified.
 */
spd():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The reference frame of the cartesian vector (ECEF, J2000). If the referenceFrame is null it is assumed to be ECEF.
 * Example: /// Example: ECEF
 * Constraints: Minimum length = 0, Maximum length = 24
 */
referenceFrame():string|null
referenceFrame(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
referenceFrame(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.
 * If the covReferenceFrame is null it is assumed to be UVW. The array values (1-45) represent the upper triangular half of the position-velocity-acceleration covariance matrix.
 * The covariance elements are position dependent within the array with values ordered as follows:
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x"&nbsp;&nbsp;&nbsp;&nbsp;y"&nbsp;&nbsp;&nbsp;&nbsp;z"
 * x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9
 * y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp;&nbsp;14&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;&nbsp;17
 * z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;18&nbsp;&nbsp;&nbsp;19&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;&nbsp;23&nbsp;&nbsp;&nbsp;24
 * x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;&nbsp;30
 * y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;31&nbsp;&nbsp;&nbsp;32&nbsp;&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;35
 * z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;&nbsp;38&nbsp;&nbsp;&nbsp;39
 * x"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;40&nbsp;&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42
 * y"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;44
 * z"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45
 * The cov array should contain only the upper right triangle values from top left down to bottom right, in order.
 * Example: /// Example: [1.1, 2.2, 3.3]
 * Constraints: No constraints specified.
 */
cov(index: number):string
cov(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
cov(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

covLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The reference frame of the covariance elements (ECEF, J2000, UVW). If the referenceFrame is null it is assumed to be UVW.
 * Example: /// Example: ECEF
 * Constraints: Minimum length = 0, Maximum length = 24
 */
covReferenceFrame():string|null
covReferenceFrame(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
covReferenceFrame(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 object latitude subpoint at epoch, represented as -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.0
 * Constraints: No constraints specified.
 */
vectorLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 object longitude subpoint at epoch, represented as -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 150.0
 * Constraints: No constraints specified.
 */
vectorLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Object altitude at epoch, expressed in kilometers above WGS-84 ellipsoid.
 * Example: /// Example: 25.0
 * Constraints: No constraints specified.
 */
vectorAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Confidence of the vector, 0-100.
 * Example: /// Example: 100
 * Constraints: No constraints specified.
 */
confidence():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Status of the vector (e.g. INITIAL, UPDATE).
 * Example: /// Example: INITIAL
 * Constraints: Minimum length = 0, Maximum length = 24
 */
status():string|null
status(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
status(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the time value.
 * Example: /// Example: Sensor 1
 * Constraints: Minimum length = 0, Maximum length = 24
 */
timeSource():string|null
timeSource(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
timeSource(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The quaternion describing the attitude of the spacecraft with respect to the reference frame listed in the 'referenceFrame' field. The array element order convention is the three vector components, followed by the scalar component.
 * Example: /// Example: [0.03, 0.02, 0.01, 0.012]
 * Constraints: No constraints specified.
 */
quat(index: number):string
quat(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
quat(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

quatLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The flight azimuth associated with the current state vector (0-360 degrees).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
flightAz():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startMissileTrackVector_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addObject(builder:flatbuffers.Builder, objectOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, objectOffset, 0);
}

static addEpoch(builder:flatbuffers.Builder, epochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, epochOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idSensorOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, origSensorIdOffset, 0);
}

static addPos(builder:flatbuffers.Builder, posOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, posOffset, 0);
}

static createPosVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPosVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addVel(builder:flatbuffers.Builder, velOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, velOffset, 0);
}

static createVelVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVelVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAccel(builder:flatbuffers.Builder, accelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, accelOffset, 0);
}

static createAccelVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAccelVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCourse(builder:flatbuffers.Builder, course:number) {
  builder.addFieldFloat64(8, course, 0.0);
}

static addSpd(builder:flatbuffers.Builder, spd:number) {
  builder.addFieldFloat64(9, spd, 0.0);
}

static addReferenceFrame(builder:flatbuffers.Builder, referenceFrameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, referenceFrameOffset, 0);
}

static addCov(builder:flatbuffers.Builder, covOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, covOffset, 0);
}

static createCovVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCovVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCovReferenceFrame(builder:flatbuffers.Builder, covReferenceFrameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, covReferenceFrameOffset, 0);
}

static addVectorLat(builder:flatbuffers.Builder, vectorLat:number) {
  builder.addFieldFloat64(13, vectorLat, 0.0);
}

static addVectorLon(builder:flatbuffers.Builder, vectorLon:number) {
  builder.addFieldFloat64(14, vectorLon, 0.0);
}

static addVectorAlt(builder:flatbuffers.Builder, vectorAlt:number) {
  builder.addFieldFloat64(15, vectorAlt, 0.0);
}

static addConfidence(builder:flatbuffers.Builder, confidence:number) {
  builder.addFieldInt32(16, confidence, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, statusOffset, 0);
}

static addTimeSource(builder:flatbuffers.Builder, timeSourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, timeSourceOffset, 0);
}

static addQuat(builder:flatbuffers.Builder, quatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, quatOffset, 0);
}

static createQuatVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startQuatVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFlightAz(builder:flatbuffers.Builder, flightAz:number) {
  builder.addFieldFloat64(20, flightAz, 0.0);
}

static endMissileTrackVector_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMissileTrackVector_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MISS');
}

static finishSizePrefixedMissileTrackVector_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MISS', true);
}

static createMissileTrackVector_Ingest(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, objectOffset:flatbuffers.Offset, epochOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, posOffset:flatbuffers.Offset, velOffset:flatbuffers.Offset, accelOffset:flatbuffers.Offset, course:number, spd:number, referenceFrameOffset:flatbuffers.Offset, covOffset:flatbuffers.Offset, covReferenceFrameOffset:flatbuffers.Offset, vectorLat:number, vectorLon:number, vectorAlt:number, confidence:number, statusOffset:flatbuffers.Offset, timeSourceOffset:flatbuffers.Offset, quatOffset:flatbuffers.Offset, flightAz:number):flatbuffers.Offset {
  MissileTrackVector_Ingest.startMissileTrackVector_Ingest(builder);
  MissileTrackVector_Ingest.addType(builder, typeOffset);
  MissileTrackVector_Ingest.addObject(builder, objectOffset);
  MissileTrackVector_Ingest.addEpoch(builder, epochOffset);
  MissileTrackVector_Ingest.addIdSensor(builder, idSensorOffset);
  MissileTrackVector_Ingest.addOrigSensorId(builder, origSensorIdOffset);
  MissileTrackVector_Ingest.addPos(builder, posOffset);
  MissileTrackVector_Ingest.addVel(builder, velOffset);
  MissileTrackVector_Ingest.addAccel(builder, accelOffset);
  MissileTrackVector_Ingest.addCourse(builder, course);
  MissileTrackVector_Ingest.addSpd(builder, spd);
  MissileTrackVector_Ingest.addReferenceFrame(builder, referenceFrameOffset);
  MissileTrackVector_Ingest.addCov(builder, covOffset);
  MissileTrackVector_Ingest.addCovReferenceFrame(builder, covReferenceFrameOffset);
  MissileTrackVector_Ingest.addVectorLat(builder, vectorLat);
  MissileTrackVector_Ingest.addVectorLon(builder, vectorLon);
  MissileTrackVector_Ingest.addVectorAlt(builder, vectorAlt);
  MissileTrackVector_Ingest.addConfidence(builder, confidence);
  MissileTrackVector_Ingest.addStatus(builder, statusOffset);
  MissileTrackVector_Ingest.addTimeSource(builder, timeSourceOffset);
  MissileTrackVector_Ingest.addQuat(builder, quatOffset);
  MissileTrackVector_Ingest.addFlightAz(builder, flightAz);
  return MissileTrackVector_Ingest.endMissileTrackVector_Ingest(builder);
}

unpack(): MissileTrackVector_IngestT {
  return new MissileTrackVector_IngestT(
    this.type(),
    this.object(),
    this.epoch(),
    this.idSensor(),
    this.origSensorId(),
    this.bb!.createScalarList<string>(this.pos.bind(this), this.posLength()),
    this.bb!.createScalarList<string>(this.vel.bind(this), this.velLength()),
    this.bb!.createScalarList<string>(this.accel.bind(this), this.accelLength()),
    this.course(),
    this.spd(),
    this.referenceFrame(),
    this.bb!.createScalarList<string>(this.cov.bind(this), this.covLength()),
    this.covReferenceFrame(),
    this.vectorLat(),
    this.vectorLon(),
    this.vectorAlt(),
    this.confidence(),
    this.status(),
    this.timeSource(),
    this.bb!.createScalarList<string>(this.quat.bind(this), this.quatLength()),
    this.flightAz()
  );
}


unpackTo(_o: MissileTrackVector_IngestT): void {
  _o.type = this.type();
  _o.object = this.object();
  _o.epoch = this.epoch();
  _o.idSensor = this.idSensor();
  _o.origSensorId = this.origSensorId();
  _o.pos = this.bb!.createScalarList<string>(this.pos.bind(this), this.posLength());
  _o.vel = this.bb!.createScalarList<string>(this.vel.bind(this), this.velLength());
  _o.accel = this.bb!.createScalarList<string>(this.accel.bind(this), this.accelLength());
  _o.course = this.course();
  _o.spd = this.spd();
  _o.referenceFrame = this.referenceFrame();
  _o.cov = this.bb!.createScalarList<string>(this.cov.bind(this), this.covLength());
  _o.covReferenceFrame = this.covReferenceFrame();
  _o.vectorLat = this.vectorLat();
  _o.vectorLon = this.vectorLon();
  _o.vectorAlt = this.vectorAlt();
  _o.confidence = this.confidence();
  _o.status = this.status();
  _o.timeSource = this.timeSource();
  _o.quat = this.bb!.createScalarList<string>(this.quat.bind(this), this.quatLength());
  _o.flightAz = this.flightAz();
}
}

export class MissileTrackVector_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public type: string|Uint8Array|null = null,
  public object: string|Uint8Array|null = null,
  public epoch: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public pos: (string)[] = [],
  public vel: (string)[] = [],
  public accel: (string)[] = [],
  public course: number = 0.0,
  public spd: number = 0.0,
  public referenceFrame: string|Uint8Array|null = null,
  public cov: (string)[] = [],
  public covReferenceFrame: string|Uint8Array|null = null,
  public vectorLat: number = 0.0,
  public vectorLon: number = 0.0,
  public vectorAlt: number = 0.0,
  public confidence: number = 0,
  public status: string|Uint8Array|null = null,
  public timeSource: string|Uint8Array|null = null,
  public quat: (string)[] = [],
  public flightAz: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const object = (this.object !== null ? builder.createString(this.object!) : 0);
  const epoch = (this.epoch !== null ? builder.createString(this.epoch!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const pos = MissileTrackVector_Ingest.createPosVector(builder, builder.createObjectOffsetList(this.pos));
  const vel = MissileTrackVector_Ingest.createVelVector(builder, builder.createObjectOffsetList(this.vel));
  const accel = MissileTrackVector_Ingest.createAccelVector(builder, builder.createObjectOffsetList(this.accel));
  const referenceFrame = (this.referenceFrame !== null ? builder.createString(this.referenceFrame!) : 0);
  const cov = MissileTrackVector_Ingest.createCovVector(builder, builder.createObjectOffsetList(this.cov));
  const covReferenceFrame = (this.covReferenceFrame !== null ? builder.createString(this.covReferenceFrame!) : 0);
  const status = (this.status !== null ? builder.createString(this.status!) : 0);
  const timeSource = (this.timeSource !== null ? builder.createString(this.timeSource!) : 0);
  const quat = MissileTrackVector_Ingest.createQuatVector(builder, builder.createObjectOffsetList(this.quat));

  return MissileTrackVector_Ingest.createMissileTrackVector_Ingest(builder,
    type,
    object,
    epoch,
    idSensor,
    origSensorId,
    pos,
    vel,
    accel,
    this.course,
    this.spd,
    referenceFrame,
    cov,
    covReferenceFrame,
    this.vectorLat,
    this.vectorLon,
    this.vectorAlt,
    this.confidence,
    status,
    timeSource,
    quat,
    this.flightAz
  );
}
}
