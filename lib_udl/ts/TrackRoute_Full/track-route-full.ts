// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TrackRoute_Full_dataMode_Enum } from './track-route-full-data-mode-enum.js';


/**
 * /// A track route is a prescribed route for performing training events or operations such as air refueling.
 */
export class TrackRoute_Full implements flatbuffers.IUnpackableObject<TrackRoute_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TrackRoute_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrackRoute_Full(bb:flatbuffers.ByteBuffer, obj?:TrackRoute_Full):TrackRoute_Full {
  return (obj || new TrackRoute_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrackRoute_Full(bb:flatbuffers.ByteBuffer, obj?:TrackRoute_Full):TrackRoute_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrackRoute_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('TRAC');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The track route type represented by this record (ex. AIR REFUELING).
 * Example: /// Example: AIR REFUELING
 * Constraints: Minimum length = 1, Maximum length = 36
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: GDSSMH121004232315303094
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalId():string|null
externalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The principal compass direction (cardinal or ordinal) of the track route.
 * Example: /// Example: NE
 * Constraints: Minimum length = 0, Maximum length = 2
 */
direction():string|null
direction(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
direction(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the creating organization of the track route.
 * Example: /// Example: HQPAC
 * Constraints: Minimum length = 0, Maximum length = 250
 */
creatingOrg():string|null
creatingOrg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
creatingOrg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Track location ID.
 * Example: /// Example: POACHR
 * Constraints: Minimum length = 0, Maximum length = 36
 */
locationTrackId():string|null
locationTrackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
locationTrackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the track.
 * Example: /// Example: CH61A
 * Constraints: Minimum length = 0, Maximum length = 36
 */
trackId():string|null
trackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the track.
 * Example: /// Example: CH61 POST
 * Constraints: Minimum length = 0, Maximum length = 50
 */
trackName():string|null
trackName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trackName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Abbreviated name of the track.
 * Example: /// Example: CH61
 * Constraints: Minimum length = 0, Maximum length = 16
 */
shortName():string|null
shortName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shortName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of process used by AMC to schedule an air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
 * Example: /// Example: V
 * Constraints: Minimum length = 0, Maximum length = 2
 */
typeCode():string|null
typeCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
typeCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Region code indicating where the track resides as determined by the data source.
 * Example: /// Example: 5
 * Constraints: Minimum length = 0, Maximum length = 36
 */
regionCode():string|null
regionCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
regionCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Region where the track resides.
 * Example: /// Example: North America
 * Constraints: Minimum length = 0, Maximum length = 32
 */
regionName():string|null
regionName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
regionName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The APX radar code sent and received by the aircraft for identification.
 * Example: /// Example: 5/1
 * Constraints: Minimum length = 0, Maximum length = 36
 */
apxBeaconCode():string|null
apxBeaconCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
apxBeaconCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The receiver tanker channel identifer for air refueling tracks.
 * Example: /// Example: 31/094
 * Constraints: Minimum length = 0, Maximum length = 36
 */
receiverTankerChcode():string|null
receiverTankerChcode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiverTankerChcode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The APN radar code sent and received by the aircraft for identification.
 * Example: /// Example: 1-3-1
 * Constraints: Minimum length = 0, Maximum length = 36
 */
apnSetting():string|null
apnSetting(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
apnSetting(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Standard Indicator Code of the air refueling track.
 * Example: /// Example: N
 * Constraints: Minimum length = 0, Maximum length = 36
 */
sic():string|null
sic(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sic(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Date the track needs to be reviewed for accuracy or deletion in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-09-16T16:00:00.123Z
 * Constraints: No constraints specified.
 */
reviewDate():string|null
reviewDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reviewDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Used to show last time the track route was added to an itinerary in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-09-17T16:00:00.123Z
 * Constraints: No constraints specified.
 */
lastUsedDate():string|null
lastUsedDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastUsedDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The last updated date of the track route in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-09-17T16:00:00.123Z
 * Constraints: No constraints specified.
 */
lastUpdateDate():string|null
lastUpdateDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastUpdateDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The primary UHF radio frequency used for the track route in megahertz.
 * Example: /// Example: 357.5
 * Constraints: No constraints specified.
 */
priFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The secondary UHF radio frequency used for the track route in megahertz.
 * Example: /// Example: 319.7
 * Constraints: No constraints specified.
 */
secFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Air Refueling Track Control Center message.
 * Example: /// Example: OAKLAND CTR/GUAM CERAP
 * Constraints: Minimum length = 0, Maximum length = 256
 */
artccMessage():string|null
artccMessage(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
artccMessage(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Point of contact for the air refueling track route scheduler.
 * Example: /// Example: 97 OSS/OSOS DSN 866-5555
 * Constraints: Minimum length = 0, Maximum length = 256
 */
schedulerOrgName():string|null
schedulerOrgName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
schedulerOrgName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The unit responsible for scheduling the track route.
 * Example: /// Example: 612 AOC
 * Constraints: Minimum length = 0, Maximum length = 32
 */
schedulerOrgUnit():string|null
schedulerOrgUnit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
schedulerOrgUnit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The date which the DAFIF track was last updated/validated in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-09-17T16:00:00.123Z
 * Constraints: No constraints specified.
 */
effectiveDate():string|null
effectiveDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectiveDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Points identified within the route.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
routePoints(index: number):string
routePoints(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
routePoints(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

routePointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Minimum and maximum altitude bounds for the track.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
altitudeBlocks(index: number):string
altitudeBlocks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
altitudeBlocks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

altitudeBlocksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Point of contacts for scheduling or modifying the route.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
poc(index: number):string
poc(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
poc(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

pocLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():TrackRoute_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TrackRoute_Full_dataMode_Enum.REAL;
}

static startTrackRoute_Full(builder:flatbuffers.Builder) {
  builder.startObject(38);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, typeOffset, 0);
}

static addExternalId(builder:flatbuffers.Builder, externalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, externalIdOffset, 0);
}

static addDirection(builder:flatbuffers.Builder, directionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, directionOffset, 0);
}

static addCreatingOrg(builder:flatbuffers.Builder, creatingOrgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, creatingOrgOffset, 0);
}

static addLocationTrackId(builder:flatbuffers.Builder, locationTrackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, locationTrackIdOffset, 0);
}

static addTrackId(builder:flatbuffers.Builder, trackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, trackIdOffset, 0);
}

static addTrackName(builder:flatbuffers.Builder, trackNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, trackNameOffset, 0);
}

static addShortName(builder:flatbuffers.Builder, shortNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, shortNameOffset, 0);
}

static addTypeCode(builder:flatbuffers.Builder, typeCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, typeCodeOffset, 0);
}

static addRegionCode(builder:flatbuffers.Builder, regionCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, regionCodeOffset, 0);
}

static addRegionName(builder:flatbuffers.Builder, regionNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, regionNameOffset, 0);
}

static addApxBeaconCode(builder:flatbuffers.Builder, apxBeaconCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, apxBeaconCodeOffset, 0);
}

static addReceiverTankerChcode(builder:flatbuffers.Builder, receiverTankerChcodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, receiverTankerChcodeOffset, 0);
}

static addApnSetting(builder:flatbuffers.Builder, apnSettingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, apnSettingOffset, 0);
}

static addSic(builder:flatbuffers.Builder, sicOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, sicOffset, 0);
}

static addReviewDate(builder:flatbuffers.Builder, reviewDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, reviewDateOffset, 0);
}

static addLastUsedDate(builder:flatbuffers.Builder, lastUsedDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, lastUsedDateOffset, 0);
}

static addLastUpdateDate(builder:flatbuffers.Builder, lastUpdateDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, lastUpdateDateOffset, 0);
}

static addPriFreq(builder:flatbuffers.Builder, priFreq:number) {
  builder.addFieldFloat64(20, priFreq, 0.0);
}

static addSecFreq(builder:flatbuffers.Builder, secFreq:number) {
  builder.addFieldFloat64(21, secFreq, 0.0);
}

static addArtccMessage(builder:flatbuffers.Builder, artccMessageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, artccMessageOffset, 0);
}

static addSchedulerOrgName(builder:flatbuffers.Builder, schedulerOrgNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, schedulerOrgNameOffset, 0);
}

static addSchedulerOrgUnit(builder:flatbuffers.Builder, schedulerOrgUnitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, schedulerOrgUnitOffset, 0);
}

static addEffectiveDate(builder:flatbuffers.Builder, effectiveDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, effectiveDateOffset, 0);
}

static addRoutePoints(builder:flatbuffers.Builder, routePointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, routePointsOffset, 0);
}

static createRoutePointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRoutePointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAltitudeBlocks(builder:flatbuffers.Builder, altitudeBlocksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, altitudeBlocksOffset, 0);
}

static createAltitudeBlocksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAltitudeBlocksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPoc(builder:flatbuffers.Builder, pocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, pocOffset, 0);
}

static createPocVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPocVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, updatedByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:TrackRoute_Full_dataMode_Enum) {
  builder.addFieldInt8(37, dataMode, TrackRoute_Full_dataMode_Enum.REAL);
}

static endTrackRoute_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTrackRoute_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'TRAC');
}

static finishSizePrefixedTrackRoute_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'TRAC', true);
}

static createTrackRoute_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, externalIdOffset:flatbuffers.Offset, directionOffset:flatbuffers.Offset, creatingOrgOffset:flatbuffers.Offset, locationTrackIdOffset:flatbuffers.Offset, trackIdOffset:flatbuffers.Offset, trackNameOffset:flatbuffers.Offset, shortNameOffset:flatbuffers.Offset, typeCodeOffset:flatbuffers.Offset, regionCodeOffset:flatbuffers.Offset, regionNameOffset:flatbuffers.Offset, apxBeaconCodeOffset:flatbuffers.Offset, receiverTankerChcodeOffset:flatbuffers.Offset, apnSettingOffset:flatbuffers.Offset, sicOffset:flatbuffers.Offset, reviewDateOffset:flatbuffers.Offset, lastUsedDateOffset:flatbuffers.Offset, lastUpdateDateOffset:flatbuffers.Offset, priFreq:number, secFreq:number, artccMessageOffset:flatbuffers.Offset, schedulerOrgNameOffset:flatbuffers.Offset, schedulerOrgUnitOffset:flatbuffers.Offset, effectiveDateOffset:flatbuffers.Offset, routePointsOffset:flatbuffers.Offset, altitudeBlocksOffset:flatbuffers.Offset, pocOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:TrackRoute_Full_dataMode_Enum):flatbuffers.Offset {
  TrackRoute_Full.startTrackRoute_Full(builder);
  TrackRoute_Full.addId(builder, idOffset);
  TrackRoute_Full.addClassificationMarking(builder, classificationMarkingOffset);
  TrackRoute_Full.addType(builder, typeOffset);
  TrackRoute_Full.addExternalId(builder, externalIdOffset);
  TrackRoute_Full.addDirection(builder, directionOffset);
  TrackRoute_Full.addCreatingOrg(builder, creatingOrgOffset);
  TrackRoute_Full.addLocationTrackId(builder, locationTrackIdOffset);
  TrackRoute_Full.addTrackId(builder, trackIdOffset);
  TrackRoute_Full.addTrackName(builder, trackNameOffset);
  TrackRoute_Full.addShortName(builder, shortNameOffset);
  TrackRoute_Full.addTypeCode(builder, typeCodeOffset);
  TrackRoute_Full.addRegionCode(builder, regionCodeOffset);
  TrackRoute_Full.addRegionName(builder, regionNameOffset);
  TrackRoute_Full.addApxBeaconCode(builder, apxBeaconCodeOffset);
  TrackRoute_Full.addReceiverTankerChcode(builder, receiverTankerChcodeOffset);
  TrackRoute_Full.addApnSetting(builder, apnSettingOffset);
  TrackRoute_Full.addSic(builder, sicOffset);
  TrackRoute_Full.addReviewDate(builder, reviewDateOffset);
  TrackRoute_Full.addLastUsedDate(builder, lastUsedDateOffset);
  TrackRoute_Full.addLastUpdateDate(builder, lastUpdateDateOffset);
  TrackRoute_Full.addPriFreq(builder, priFreq);
  TrackRoute_Full.addSecFreq(builder, secFreq);
  TrackRoute_Full.addArtccMessage(builder, artccMessageOffset);
  TrackRoute_Full.addSchedulerOrgName(builder, schedulerOrgNameOffset);
  TrackRoute_Full.addSchedulerOrgUnit(builder, schedulerOrgUnitOffset);
  TrackRoute_Full.addEffectiveDate(builder, effectiveDateOffset);
  TrackRoute_Full.addRoutePoints(builder, routePointsOffset);
  TrackRoute_Full.addAltitudeBlocks(builder, altitudeBlocksOffset);
  TrackRoute_Full.addPoc(builder, pocOffset);
  TrackRoute_Full.addCreatedAt(builder, createdAtOffset);
  TrackRoute_Full.addCreatedBy(builder, createdByOffset);
  TrackRoute_Full.addUpdatedAt(builder, updatedAtOffset);
  TrackRoute_Full.addUpdatedBy(builder, updatedByOffset);
  TrackRoute_Full.addSourceDl(builder, sourceDlOffset);
  TrackRoute_Full.addSource(builder, sourceOffset);
  TrackRoute_Full.addOrigin(builder, originOffset);
  TrackRoute_Full.addOrigNetwork(builder, origNetworkOffset);
  TrackRoute_Full.addDataMode(builder, dataMode);
  return TrackRoute_Full.endTrackRoute_Full(builder);
}

unpack(): TrackRoute_FullT {
  return new TrackRoute_FullT(
    this.id(),
    this.classificationMarking(),
    this.type(),
    this.externalId(),
    this.direction(),
    this.creatingOrg(),
    this.locationTrackId(),
    this.trackId(),
    this.trackName(),
    this.shortName(),
    this.typeCode(),
    this.regionCode(),
    this.regionName(),
    this.apxBeaconCode(),
    this.receiverTankerChcode(),
    this.apnSetting(),
    this.sic(),
    this.reviewDate(),
    this.lastUsedDate(),
    this.lastUpdateDate(),
    this.priFreq(),
    this.secFreq(),
    this.artccMessage(),
    this.schedulerOrgName(),
    this.schedulerOrgUnit(),
    this.effectiveDate(),
    this.bb!.createScalarList<string>(this.routePoints.bind(this), this.routePoints_Length()),
    this.bb!.createScalarList<string>(this.altitudeBlocks.bind(this), this.altitudeBlocks_Length()),
    this.bb!.createScalarList<string>(this.poc.bind(this), this.poc_Length()),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: TrackRoute_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.type = this.type();
  _o.externalId = this.externalId();
  _o.direction = this.direction();
  _o.creatingOrg = this.creatingOrg();
  _o.locationTrackId = this.locationTrackId();
  _o.trackId = this.trackId();
  _o.trackName = this.trackName();
  _o.shortName = this.shortName();
  _o.typeCode = this.typeCode();
  _o.regionCode = this.regionCode();
  _o.regionName = this.regionName();
  _o.apxBeaconCode = this.apxBeaconCode();
  _o.receiverTankerCHCode = this.receiverTankerChcode();
  _o.apnSetting = this.apnSetting();
  _o.sic = this.sic();
  _o.reviewDate = this.reviewDate();
  _o.lastUsedDate = this.lastUsedDate();
  _o.lastUpdateDate = this.lastUpdateDate();
  _o.priFreq = this.priFreq();
  _o.secFreq = this.secFreq();
  _o.artccMessage = this.artccMessage();
  _o.schedulerOrgName = this.schedulerOrgName();
  _o.schedulerOrgUnit = this.schedulerOrgUnit();
  _o.effectiveDate = this.effectiveDate();
  _o.routePoints = this.bb!.createScalarList<string>(this.routePoints.bind(this), this.routePoints_Length());
  _o.altitudeBlocks = this.bb!.createScalarList<string>(this.altitudeBlocks.bind(this), this.altitudeBlocks_Length());
  _o.poc = this.bb!.createScalarList<string>(this.poc.bind(this), this.poc_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class TrackRoute_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public externalId: string|Uint8Array|null = null,
  public direction: string|Uint8Array|null = null,
  public creatingOrg: string|Uint8Array|null = null,
  public locationTrackId: string|Uint8Array|null = null,
  public trackId: string|Uint8Array|null = null,
  public trackName: string|Uint8Array|null = null,
  public shortName: string|Uint8Array|null = null,
  public typeCode: string|Uint8Array|null = null,
  public regionCode: string|Uint8Array|null = null,
  public regionName: string|Uint8Array|null = null,
  public apxBeaconCode: string|Uint8Array|null = null,
  public receiverTankerCHCode: string|Uint8Array|null = null,
  public apnSetting: string|Uint8Array|null = null,
  public sic: string|Uint8Array|null = null,
  public reviewDate: string|Uint8Array|null = null,
  public lastUsedDate: string|Uint8Array|null = null,
  public lastUpdateDate: string|Uint8Array|null = null,
  public priFreq: number = 0.0,
  public secFreq: number = 0.0,
  public artccMessage: string|Uint8Array|null = null,
  public schedulerOrgName: string|Uint8Array|null = null,
  public schedulerOrgUnit: string|Uint8Array|null = null,
  public effectiveDate: string|Uint8Array|null = null,
  public routePoints: (string)[] = [],
  public altitudeBlocks: (string)[] = [],
  public poc: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: TrackRoute_Full_dataMode_Enum = TrackRoute_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const externalId = (this.externalId !== null ? builder.createString(this.externalId!) : 0);
  const direction = (this.direction !== null ? builder.createString(this.direction!) : 0);
  const creatingOrg = (this.creatingOrg !== null ? builder.createString(this.creatingOrg!) : 0);
  const locationTrackId = (this.locationTrackId !== null ? builder.createString(this.locationTrackId!) : 0);
  const trackId = (this.trackId !== null ? builder.createString(this.trackId!) : 0);
  const trackName = (this.trackName !== null ? builder.createString(this.trackName!) : 0);
  const shortName = (this.shortName !== null ? builder.createString(this.shortName!) : 0);
  const typeCode = (this.typeCode !== null ? builder.createString(this.typeCode!) : 0);
  const regionCode = (this.regionCode !== null ? builder.createString(this.regionCode!) : 0);
  const regionName = (this.regionName !== null ? builder.createString(this.regionName!) : 0);
  const apxBeaconCode = (this.apxBeaconCode !== null ? builder.createString(this.apxBeaconCode!) : 0);
  const receiverTankerCHCode = (this.receiverTankerCHCode !== null ? builder.createString(this.receiverTankerCHCode!) : 0);
  const apnSetting = (this.apnSetting !== null ? builder.createString(this.apnSetting!) : 0);
  const sic = (this.sic !== null ? builder.createString(this.sic!) : 0);
  const reviewDate = (this.reviewDate !== null ? builder.createString(this.reviewDate!) : 0);
  const lastUsedDate = (this.lastUsedDate !== null ? builder.createString(this.lastUsedDate!) : 0);
  const lastUpdateDate = (this.lastUpdateDate !== null ? builder.createString(this.lastUpdateDate!) : 0);
  const artccMessage = (this.artccMessage !== null ? builder.createString(this.artccMessage!) : 0);
  const schedulerOrgName = (this.schedulerOrgName !== null ? builder.createString(this.schedulerOrgName!) : 0);
  const schedulerOrgUnit = (this.schedulerOrgUnit !== null ? builder.createString(this.schedulerOrgUnit!) : 0);
  const effectiveDate = (this.effectiveDate !== null ? builder.createString(this.effectiveDate!) : 0);
  const routePoints = TrackRoute_Full.createRoutePointsVector(builder, builder.createObjectOffsetList(this.routePoints));
  const altitudeBlocks = TrackRoute_Full.createAltitudeBlocksVector(builder, builder.createObjectOffsetList(this.altitudeBlocks));
  const poc = TrackRoute_Full.createPocVector(builder, builder.createObjectOffsetList(this.poc));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return TrackRoute_Full.createTrackRoute_Full(builder,
    id,
    classificationMarking,
    type,
    externalId,
    direction,
    creatingOrg,
    locationTrackId,
    trackId,
    trackName,
    shortName,
    typeCode,
    regionCode,
    regionName,
    apxBeaconCode,
    receiverTankerCHCode,
    apnSetting,
    sic,
    reviewDate,
    lastUsedDate,
    lastUpdateDate,
    this.priFreq,
    this.secFreq,
    artccMessage,
    schedulerOrgName,
    schedulerOrgUnit,
    effectiveDate,
    routePoints,
    altitudeBlocks,
    poc,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    sourceDL,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
