// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// The controlPoint set describes any reference/controlling/rendevous point for a given airspace control means.
 */
export class AirspaceControlPoint_Full implements flatbuffers.IUnpackableObject<AirspaceControlPoint_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirspaceControlPoint_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirspaceControlPoint_Full(bb:flatbuffers.ByteBuffer, obj?:AirspaceControlPoint_Full):AirspaceControlPoint_Full {
  return (obj || new AirspaceControlPoint_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirspaceControlPoint_Full(bb:flatbuffers.ByteBuffer, obj?:AirspaceControlPoint_Full):AirspaceControlPoint_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirspaceControlPoint_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRS');
}

/**
 * One of possible control point type codes, such as CP, ER, OT, etc.
 * Example: /// Example: CP
 * Constraints: Minimum length = 0, Maximum length = 2
 */
ctrlPtType():string|null
ctrlPtType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ctrlPtType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name applied to the control point, used as a reference.
 * Example: /// Example: APPLE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
ctrlPtName():string|null
ctrlPtName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ctrlPtName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format that represents the location of the control point.
 * Example: /// Example: 203632N0594256E
 * Constraints: Minimum length = 0, Maximum length = 16
 */
ctrlPtLocation():string|null
ctrlPtLocation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ctrlPtLocation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The altitude of the control point.
 * Example: /// Example: BRFL:MSL-FL230
 * Constraints: Minimum length = 0, Maximum length = 32
 */
ctrlPtAltitude():string|null
ctrlPtAltitude(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ctrlPtAltitude(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAirspaceControlPoint_Full(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addCtrlPtType(builder:flatbuffers.Builder, ctrlPtTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ctrlPtTypeOffset, 0);
}

static addCtrlPtName(builder:flatbuffers.Builder, ctrlPtNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ctrlPtNameOffset, 0);
}

static addCtrlPtLocation(builder:flatbuffers.Builder, ctrlPtLocationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, ctrlPtLocationOffset, 0);
}

static addCtrlPtAltitude(builder:flatbuffers.Builder, ctrlPtAltitudeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, ctrlPtAltitudeOffset, 0);
}

static endAirspaceControlPoint_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirspaceControlPoint_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRS');
}

static finishSizePrefixedAirspaceControlPoint_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRS', true);
}

static createAirspaceControlPoint_Full(builder:flatbuffers.Builder, ctrlPtTypeOffset:flatbuffers.Offset, ctrlPtNameOffset:flatbuffers.Offset, ctrlPtLocationOffset:flatbuffers.Offset, ctrlPtAltitudeOffset:flatbuffers.Offset):flatbuffers.Offset {
  AirspaceControlPoint_Full.startAirspaceControlPoint_Full(builder);
  AirspaceControlPoint_Full.addCtrlPtType(builder, ctrlPtTypeOffset);
  AirspaceControlPoint_Full.addCtrlPtName(builder, ctrlPtNameOffset);
  AirspaceControlPoint_Full.addCtrlPtLocation(builder, ctrlPtLocationOffset);
  AirspaceControlPoint_Full.addCtrlPtAltitude(builder, ctrlPtAltitudeOffset);
  return AirspaceControlPoint_Full.endAirspaceControlPoint_Full(builder);
}

unpack(): AirspaceControlPoint_FullT {
  return new AirspaceControlPoint_FullT(
    this.ctrlPtType(),
    this.ctrlPtName(),
    this.ctrlPtLocation(),
    this.ctrlPtAltitude()
  );
}


unpackTo(_o: AirspaceControlPoint_FullT): void {
  _o.ctrlPtType = this.ctrlPtType();
  _o.ctrlPtName = this.ctrlPtName();
  _o.ctrlPtLocation = this.ctrlPtLocation();
  _o.ctrlPtAltitude = this.ctrlPtAltitude();
}
}

export class AirspaceControlPoint_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public ctrlPtType: string|Uint8Array|null = null,
  public ctrlPtName: string|Uint8Array|null = null,
  public ctrlPtLocation: string|Uint8Array|null = null,
  public ctrlPtAltitude: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ctrlPtType = (this.ctrlPtType !== null ? builder.createString(this.ctrlPtType!) : 0);
  const ctrlPtName = (this.ctrlPtName !== null ? builder.createString(this.ctrlPtName!) : 0);
  const ctrlPtLocation = (this.ctrlPtLocation !== null ? builder.createString(this.ctrlPtLocation!) : 0);
  const ctrlPtAltitude = (this.ctrlPtAltitude !== null ? builder.createString(this.ctrlPtAltitude!) : 0);

  return AirspaceControlPoint_Full.createAirspaceControlPoint_Full(builder,
    ctrlPtType,
    ctrlPtName,
    ctrlPtLocation,
    ctrlPtAltitude
  );
}
}
