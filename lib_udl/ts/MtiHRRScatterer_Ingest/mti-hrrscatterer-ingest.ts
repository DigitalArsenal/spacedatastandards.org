// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// HRR Scatterer record for a target pixel that exceeds the target detection threshold.
 */
export class MtiHRRScatterer_Ingest implements flatbuffers.IUnpackableObject<MtiHRRScatterer_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MtiHRRScatterer_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMtiHRRScatterer_Ingest(bb:flatbuffers.ByteBuffer, obj?:MtiHRRScatterer_Ingest):MtiHRRScatterer_Ingest {
  return (obj || new MtiHRRScatterer_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMtiHRRScatterer_Ingest(bb:flatbuffers.ByteBuffer, obj?:MtiHRRScatterer_Ingest):MtiHRRScatterer_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MtiHRRScatterer_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MTIH');
}

/**
 * Scatterer’s power magnitude.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
h321():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Scatterer’s complex phase, in degrees.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
h322():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Scatterer’s Range index relative to Range-Doppler chip, where increasing index equates to increasing range.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
h323():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Scatterer’s Doppler index relative to Range-Doppler chip, where increasing index equates to increasing Doppler.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
h324():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startMtiHRRScatterer_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addH321(builder:flatbuffers.Builder, h321:number) {
  builder.addFieldInt32(0, h321, 0);
}

static addH322(builder:flatbuffers.Builder, h322:number) {
  builder.addFieldInt32(1, h322, 0);
}

static addH323(builder:flatbuffers.Builder, h323:number) {
  builder.addFieldInt32(2, h323, 0);
}

static addH324(builder:flatbuffers.Builder, h324:number) {
  builder.addFieldInt32(3, h324, 0);
}

static endMtiHRRScatterer_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMtiHRRScatterer_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIH');
}

static finishSizePrefixedMtiHRRScatterer_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIH', true);
}

static createMtiHRRScatterer_Ingest(builder:flatbuffers.Builder, h321:number, h322:number, h323:number, h324:number):flatbuffers.Offset {
  MtiHRRScatterer_Ingest.startMtiHRRScatterer_Ingest(builder);
  MtiHRRScatterer_Ingest.addH321(builder, h321);
  MtiHRRScatterer_Ingest.addH322(builder, h322);
  MtiHRRScatterer_Ingest.addH323(builder, h323);
  MtiHRRScatterer_Ingest.addH324(builder, h324);
  return MtiHRRScatterer_Ingest.endMtiHRRScatterer_Ingest(builder);
}

unpack(): MtiHRRScatterer_IngestT {
  return new MtiHRRScatterer_IngestT(
    this.h321(),
    this.h322(),
    this.h323(),
    this.h324()
  );
}


unpackTo(_o: MtiHRRScatterer_IngestT): void {
  _o.h32_1 = this.h321();
  _o.h32_2 = this.h322();
  _o.h32_3 = this.h323();
  _o.h32_4 = this.h324();
}
}

export class MtiHRRScatterer_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public h32_1: number = 0,
  public h32_2: number = 0,
  public h32_3: number = 0,
  public h32_4: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return MtiHRRScatterer_Ingest.createMtiHRRScatterer_Ingest(builder,
    this.h32_1,
    this.h32_2,
    this.h32_3,
    this.h32_4
  );
}
}
