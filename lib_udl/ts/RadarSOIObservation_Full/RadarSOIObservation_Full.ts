// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// A Radar SOI record contains observation information taken from a sensor about a Space Object.
 */
export class RadarSOIObservation_Full implements flatbuffers.IUnpackableObject<RadarSOIObservation_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RadarSOIObservation_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRadarSOIObservation_Full(bb:flatbuffers.ByteBuffer, obj?:RadarSOIObservation_Full):RadarSOIObservation_Full {
  return (obj || new RadarSOIObservation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRadarSOIObservation_Full(bb:flatbuffers.ByteBuffer, obj?:RadarSOIObservation_Full):RadarSOIObservation_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RadarSOIObservation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('RADA');
}

/**
 * Observation detection start time in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.888456Z
 * Constraints: No constraints specified.
 */
obStartTime():string|null
obStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of the times of validity in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z']
 * Constraints: No constraints specified.
 */
tovs(index: number):string
tovs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tovs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tovsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of range sample spacing in meters. The 'tov' and 'rspace' arrays must match in size.
 * Example: /// Example: [0.006, 0.006, 0.006]
 * Constraints: No constraints specified.
 */
rspaces(index: number):string
rspaces(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rspaces(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rspacesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of cross-range sample spacing in meters. The 'tov' and 'xspace' arrays must match in size.
 * Example: /// Example: [0.006, 0.006, 0.006]
 * Constraints: No constraints specified.
 */
xspaces(index: number):string
xspaces(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
xspaces(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

xspacesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of conversion factors between Doppler in hertz and cross-range in meters. The 'tov' and 'doppler2XR' arrays must match in size.
 * Example: /// Example: [5644.27, 5644.27, 5644.27]
 * Constraints: No constraints specified.
 */
doppler2Xrs(index: number):string
doppler2Xrs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
doppler2Xrs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

doppler2XrsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of average Interpulse spacing in seconds. The 'tov' and 'deltaTime' arrays must match in size.
 * Example: /// Example: [0.005, 0.005, 0.005]
 * Constraints: No constraints specified.
 */
deltaTimes(index: number):string
deltaTimes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
deltaTimes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

deltaTimesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the aspect angle at the center of the image in degrees.  The 'tov' and 'aspectAngle' arrays must match in size.
 * Example: /// Example: [4.278, 4.278, 4.278]
 * Constraints: No constraints specified.
 */
aspectAngles(index: number):string
aspectAngles(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
aspectAngles(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

aspectAnglesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the component of target angular velocity observable by radar in radians per second.  The 'tov' and 'projAngVel' arrays must match in size.
 * Example: /// Example: [0.166, 0.166, 0.166]
 * Constraints: No constraints specified.
 */
projAngVels(index: number):string
projAngVels(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
projAngVels(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

projAngVelsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional id of assumed StateVector of object being observed.
 * Example: /// Example: 99a0de63-b38f-4d81-b057
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idStateVector():string|null
idStateVector(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idStateVector(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional id of assumed AttitudeSet of object being observed.
 * Example: /// Example: 99a0de63-b38f-4d81-b057
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idAttitudeSet():string|null
idAttitudeSet(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idAttitudeSet(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of the range to target at image center in kilometers. The 'tov' and 'range' arrays must match in size.
 * Example: /// Example: [877.938, 877.938, 877.938]
 * Constraints: No constraints specified.
 */
ranges(index: number):string
ranges(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ranges(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rangesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the azimuth angle to target at image center in degrees. The 'tov' and 'azimuth' arrays must match in size.
 * Example: /// Example: [278.27, 278.27, 278.27]
 * Constraints: No constraints specified.
 */
azimuths(index: number):string
azimuths(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
azimuths(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

azimuthsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the elevation angle to target at image center in degrees. The 'tov' and 'elevation' arrays must match in size.
 * Example: /// Example: [70.85, 70.85, 70.85]
 * Constraints: No constraints specified.
 */
elevations(index: number):string
elevations(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
elevations(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

elevationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the range rate of target at image center in kilometers per second. The 'tov' and 'rangeRate' arrays must match in size.
 * Example: /// Example: [0.317, 0.317, 0.317]
 * Constraints: No constraints specified.
 */
rangeRates(index: number):string
rangeRates(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rangeRates(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rangeRatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the azimuth rate of target at image center in degrees per second. The 'tov' and 'azimuthRate' arrays must match in size.
 * Example: /// Example: [-1.481, -1.481, -1.481]
 * Constraints: No constraints specified.
 */
azimuthRates(index: number):string
azimuthRates(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
azimuthRates(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

azimuthRatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the elevation rate of target at image center in degrees per second. The 'tov' and 'elevationRate' arrays must match in size.
 * Example: /// Example: [-0.074, -0.074, -0.074]
 * Constraints: No constraints specified.
 */
elevationRates(index: number):string
elevationRates(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
elevationRates(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

elevationRatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of  sensor azimuth angle biases in degrees. The 'tov' and 'azimuthBias' arrays must match in size.
 * Example: /// Example: [45.23, 45.23, 45.23]
 * Constraints: No constraints specified.
 */
azimuthBiases(index: number):string
azimuthBiases(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
azimuthBiases(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

azimuthBiasesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of sensor elevation biases in degrees. The 'tov' and 'elevationBias' arrays must match in size.
 * Example: /// Example: [1.23, 1.23, 1.23]
 * Constraints: No constraints specified.
 */
elevationBiases(index: number):string
elevationBiases(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
elevationBiases(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

elevationBiasesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of sensor range biases in kilometers. The 'tov' and 'rangeBias' arrays must match in size.
 * Example: /// Example: [1.23, 1.23, 1.23]
 * Constraints: No constraints specified.
 */
rangeBiases(index: number):string
rangeBiases(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rangeBiases(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rangeBiasesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of Integration angles in degrees. The 'tov' and 'integrationAngle' arrays must match in size.
 * Example: /// Example: [8.594, 8.594, 8.594]
 * Constraints: No constraints specified.
 */
integrationAngles(index: number):string
integrationAngles(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
integrationAngles(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

integrationAnglesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of cross-range resolutions (accounting for weighting function) in kilometers. The 'tov' and 'crossRangeRes' arrays must match in size.
 * Example: /// Example: [11.301, 11.301, 11.301]
 * Constraints: No constraints specified.
 */
crossRangeRes(index: number):string
crossRangeRes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
crossRangeRes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

crossRangeResLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Beta angle (between target and radar-image frame z axis) in degrees.
 * Example: /// Example: -89.97
 * Constraints: No constraints specified.
 */
beta():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Kappa angle (between radar-line-of-sight and target-frame x axis) in degrees.
 * Example: /// Example: 103.04
 * Constraints: No constraints specified.
 */
kappa():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Array of the peak pixel amplitude for each image in decibels. The 'tov' and 'peakAmplitude' arrays must match in size.
 * Example: /// Example: [33.1, 33.1, 33.1]
 * Constraints: No constraints specified.
 */
peakAmplitudes(index: number):string
peakAmplitudes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
peakAmplitudes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

peakAmplitudesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Radar center frequency of the radar in hertz.
 * Example: /// Example: 160047.0625
 * Constraints: No constraints specified.
 */
centerFrequency():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Bandwidth of radar pulse in hertz.
 * Example: /// Example: 24094.12
 * Constraints: No constraints specified.
 */
pulseBandwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Array of the cartesian X positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xpos' arrays must match in size.
 * Example: /// Example: [-1118.577381, -1118.577381, -1118.577381]
 * Constraints: No constraints specified.
 */
xpos(index: number):string
xpos(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
xpos(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

xposLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the cartesian Y positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'ypos' arrays must match in size.
 * Example: /// Example: [3026.231084, 3026.231084, 3026.231084]
 * Constraints: No constraints specified.
 */
ypos(index: number):string
ypos(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ypos(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

yposLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the cartesian Z positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'zpos' arrays must match in size.
 * Example: /// Example: [6167.831808, 6167.831808, 6167.831808]
 * Constraints: No constraints specified.
 */
zpos(index: number):string
zpos(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
zpos(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

zposLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the cartesian X velocities of target, in kilometers per second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xvel' arrays must match in size.
 * Example: /// Example: [-4.25242784, -4.25242784, -4.25242784]
 * Constraints: No constraints specified.
 */
xvel(index: number):string
xvel(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
xvel(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

xvelLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the cartesian Y velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'yvel' arrays must match in size.
 * Example: /// Example: [5.291107434, 5.291107434, 5.291107434]
 * Constraints: No constraints specified.
 */
yvel(index: number):string
yvel(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
yvel(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

yvelLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the cartesian Z velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'zvel' arrays must match in size.
 * Example: /// Example: [-3.356493869, -3.356493869, -3.356493869]
 * Constraints: No constraints specified.
 */
zvel(index: number):string
zvel(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
zvel(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

zvelLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRadarSOIObservation_Full(builder:flatbuffers.Builder) {
  builder.startObject(32);
}

static addObStartTime(builder:flatbuffers.Builder, obStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, obStartTimeOffset, 0);
}

static addTovs(builder:flatbuffers.Builder, tovsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, tovsOffset, 0);
}

static createTovsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTovsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRspaces(builder:flatbuffers.Builder, rspacesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rspacesOffset, 0);
}

static createRspacesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRspacesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addXspaces(builder:flatbuffers.Builder, xspacesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, xspacesOffset, 0);
}

static createXspacesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startXspacesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDoppler2Xrs(builder:flatbuffers.Builder, doppler2XrsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, doppler2XrsOffset, 0);
}

static createDoppler2XrsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDoppler2XrsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDeltaTimes(builder:flatbuffers.Builder, deltaTimesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, deltaTimesOffset, 0);
}

static createDeltaTimesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDeltaTimesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAspectAngles(builder:flatbuffers.Builder, aspectAnglesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, aspectAnglesOffset, 0);
}

static createAspectAnglesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAspectAnglesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addProjAngVels(builder:flatbuffers.Builder, projAngVelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, projAngVelsOffset, 0);
}

static createProjAngVelsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startProjAngVelsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIdStateVector(builder:flatbuffers.Builder, idStateVectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, idStateVectorOffset, 0);
}

static addIdAttitudeSet(builder:flatbuffers.Builder, idAttitudeSetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, idAttitudeSetOffset, 0);
}

static addRanges(builder:flatbuffers.Builder, rangesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, rangesOffset, 0);
}

static createRangesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRangesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAzimuths(builder:flatbuffers.Builder, azimuthsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, azimuthsOffset, 0);
}

static createAzimuthsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAzimuthsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addElevations(builder:flatbuffers.Builder, elevationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, elevationsOffset, 0);
}

static createElevationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startElevationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRangeRates(builder:flatbuffers.Builder, rangeRatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, rangeRatesOffset, 0);
}

static createRangeRatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRangeRatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAzimuthRates(builder:flatbuffers.Builder, azimuthRatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, azimuthRatesOffset, 0);
}

static createAzimuthRatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAzimuthRatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addElevationRates(builder:flatbuffers.Builder, elevationRatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, elevationRatesOffset, 0);
}

static createElevationRatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startElevationRatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAzimuthBiases(builder:flatbuffers.Builder, azimuthBiasesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, azimuthBiasesOffset, 0);
}

static createAzimuthBiasesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAzimuthBiasesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addElevationBiases(builder:flatbuffers.Builder, elevationBiasesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, elevationBiasesOffset, 0);
}

static createElevationBiasesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startElevationBiasesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRangeBiases(builder:flatbuffers.Builder, rangeBiasesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, rangeBiasesOffset, 0);
}

static createRangeBiasesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRangeBiasesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIntegrationAngles(builder:flatbuffers.Builder, integrationAnglesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, integrationAnglesOffset, 0);
}

static createIntegrationAnglesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startIntegrationAnglesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCrossRangeRes(builder:flatbuffers.Builder, crossRangeResOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, crossRangeResOffset, 0);
}

static createCrossRangeResVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCrossRangeResVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBeta(builder:flatbuffers.Builder, beta:number) {
  builder.addFieldFloat64(21, beta, 0.0);
}

static addKappa(builder:flatbuffers.Builder, kappa:number) {
  builder.addFieldFloat64(22, kappa, 0.0);
}

static addPeakAmplitudes(builder:flatbuffers.Builder, peakAmplitudesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, peakAmplitudesOffset, 0);
}

static createPeakAmplitudesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPeakAmplitudesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCenterFrequency(builder:flatbuffers.Builder, centerFrequency:number) {
  builder.addFieldFloat64(24, centerFrequency, 0.0);
}

static addPulseBandwidth(builder:flatbuffers.Builder, pulseBandwidth:number) {
  builder.addFieldFloat64(25, pulseBandwidth, 0.0);
}

static addXpos(builder:flatbuffers.Builder, xposOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, xposOffset, 0);
}

static createXposVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startXposVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addYpos(builder:flatbuffers.Builder, yposOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, yposOffset, 0);
}

static createYposVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startYposVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addZpos(builder:flatbuffers.Builder, zposOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, zposOffset, 0);
}

static createZposVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startZposVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addXvel(builder:flatbuffers.Builder, xvelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, xvelOffset, 0);
}

static createXvelVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startXvelVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addYvel(builder:flatbuffers.Builder, yvelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, yvelOffset, 0);
}

static createYvelVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startYvelVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addZvel(builder:flatbuffers.Builder, zvelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, zvelOffset, 0);
}

static createZvelVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startZvelVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRadarSOIObservation_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishRadarSOIObservation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RADA');
}

static finishSizePrefixedRadarSOIObservation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RADA', true);
}

static createRadarSOIObservation_Full(builder:flatbuffers.Builder, obStartTimeOffset:flatbuffers.Offset, tovsOffset:flatbuffers.Offset, rspacesOffset:flatbuffers.Offset, xspacesOffset:flatbuffers.Offset, doppler2XrsOffset:flatbuffers.Offset, deltaTimesOffset:flatbuffers.Offset, aspectAnglesOffset:flatbuffers.Offset, projAngVelsOffset:flatbuffers.Offset, idStateVectorOffset:flatbuffers.Offset, idAttitudeSetOffset:flatbuffers.Offset, rangesOffset:flatbuffers.Offset, azimuthsOffset:flatbuffers.Offset, elevationsOffset:flatbuffers.Offset, rangeRatesOffset:flatbuffers.Offset, azimuthRatesOffset:flatbuffers.Offset, elevationRatesOffset:flatbuffers.Offset, azimuthBiasesOffset:flatbuffers.Offset, elevationBiasesOffset:flatbuffers.Offset, rangeBiasesOffset:flatbuffers.Offset, integrationAnglesOffset:flatbuffers.Offset, crossRangeResOffset:flatbuffers.Offset, beta:number, kappa:number, peakAmplitudesOffset:flatbuffers.Offset, centerFrequency:number, pulseBandwidth:number, xposOffset:flatbuffers.Offset, yposOffset:flatbuffers.Offset, zposOffset:flatbuffers.Offset, xvelOffset:flatbuffers.Offset, yvelOffset:flatbuffers.Offset, zvelOffset:flatbuffers.Offset):flatbuffers.Offset {
  RadarSOIObservation_Full.startRadarSOIObservation_Full(builder);
  RadarSOIObservation_Full.addObStartTime(builder, obStartTimeOffset);
  RadarSOIObservation_Full.addTovs(builder, tovsOffset);
  RadarSOIObservation_Full.addRspaces(builder, rspacesOffset);
  RadarSOIObservation_Full.addXspaces(builder, xspacesOffset);
  RadarSOIObservation_Full.addDoppler2Xrs(builder, doppler2XrsOffset);
  RadarSOIObservation_Full.addDeltaTimes(builder, deltaTimesOffset);
  RadarSOIObservation_Full.addAspectAngles(builder, aspectAnglesOffset);
  RadarSOIObservation_Full.addProjAngVels(builder, projAngVelsOffset);
  RadarSOIObservation_Full.addIdStateVector(builder, idStateVectorOffset);
  RadarSOIObservation_Full.addIdAttitudeSet(builder, idAttitudeSetOffset);
  RadarSOIObservation_Full.addRanges(builder, rangesOffset);
  RadarSOIObservation_Full.addAzimuths(builder, azimuthsOffset);
  RadarSOIObservation_Full.addElevations(builder, elevationsOffset);
  RadarSOIObservation_Full.addRangeRates(builder, rangeRatesOffset);
  RadarSOIObservation_Full.addAzimuthRates(builder, azimuthRatesOffset);
  RadarSOIObservation_Full.addElevationRates(builder, elevationRatesOffset);
  RadarSOIObservation_Full.addAzimuthBiases(builder, azimuthBiasesOffset);
  RadarSOIObservation_Full.addElevationBiases(builder, elevationBiasesOffset);
  RadarSOIObservation_Full.addRangeBiases(builder, rangeBiasesOffset);
  RadarSOIObservation_Full.addIntegrationAngles(builder, integrationAnglesOffset);
  RadarSOIObservation_Full.addCrossRangeRes(builder, crossRangeResOffset);
  RadarSOIObservation_Full.addBeta(builder, beta);
  RadarSOIObservation_Full.addKappa(builder, kappa);
  RadarSOIObservation_Full.addPeakAmplitudes(builder, peakAmplitudesOffset);
  RadarSOIObservation_Full.addCenterFrequency(builder, centerFrequency);
  RadarSOIObservation_Full.addPulseBandwidth(builder, pulseBandwidth);
  RadarSOIObservation_Full.addXpos(builder, xposOffset);
  RadarSOIObservation_Full.addYpos(builder, yposOffset);
  RadarSOIObservation_Full.addZpos(builder, zposOffset);
  RadarSOIObservation_Full.addXvel(builder, xvelOffset);
  RadarSOIObservation_Full.addYvel(builder, yvelOffset);
  RadarSOIObservation_Full.addZvel(builder, zvelOffset);
  return RadarSOIObservation_Full.endRadarSOIObservation_Full(builder);
}

unpack(): RadarSOIObservation_FullT {
  return new RadarSOIObservation_FullT(
    this.obStartTime(),
    this.bb!.createScalarList<string>(this.tovs.bind(this), this.tovsLength()),
    this.bb!.createScalarList<string>(this.rspaces.bind(this), this.rspacesLength()),
    this.bb!.createScalarList<string>(this.xspaces.bind(this), this.xspacesLength()),
    this.bb!.createScalarList<string>(this.doppler2Xrs.bind(this), this.doppler2XrsLength()),
    this.bb!.createScalarList<string>(this.deltaTimes.bind(this), this.deltaTimesLength()),
    this.bb!.createScalarList<string>(this.aspectAngles.bind(this), this.aspectAnglesLength()),
    this.bb!.createScalarList<string>(this.projAngVels.bind(this), this.projAngVelsLength()),
    this.idStateVector(),
    this.idAttitudeSet(),
    this.bb!.createScalarList<string>(this.ranges.bind(this), this.rangesLength()),
    this.bb!.createScalarList<string>(this.azimuths.bind(this), this.azimuthsLength()),
    this.bb!.createScalarList<string>(this.elevations.bind(this), this.elevationsLength()),
    this.bb!.createScalarList<string>(this.rangeRates.bind(this), this.rangeRatesLength()),
    this.bb!.createScalarList<string>(this.azimuthRates.bind(this), this.azimuthRatesLength()),
    this.bb!.createScalarList<string>(this.elevationRates.bind(this), this.elevationRatesLength()),
    this.bb!.createScalarList<string>(this.azimuthBiases.bind(this), this.azimuthBiasesLength()),
    this.bb!.createScalarList<string>(this.elevationBiases.bind(this), this.elevationBiasesLength()),
    this.bb!.createScalarList<string>(this.rangeBiases.bind(this), this.rangeBiasesLength()),
    this.bb!.createScalarList<string>(this.integrationAngles.bind(this), this.integrationAnglesLength()),
    this.bb!.createScalarList<string>(this.crossRangeRes.bind(this), this.crossRangeResLength()),
    this.beta(),
    this.kappa(),
    this.bb!.createScalarList<string>(this.peakAmplitudes.bind(this), this.peakAmplitudesLength()),
    this.centerFrequency(),
    this.pulseBandwidth(),
    this.bb!.createScalarList<string>(this.xpos.bind(this), this.xposLength()),
    this.bb!.createScalarList<string>(this.ypos.bind(this), this.yposLength()),
    this.bb!.createScalarList<string>(this.zpos.bind(this), this.zposLength()),
    this.bb!.createScalarList<string>(this.xvel.bind(this), this.xvelLength()),
    this.bb!.createScalarList<string>(this.yvel.bind(this), this.yvelLength()),
    this.bb!.createScalarList<string>(this.zvel.bind(this), this.zvelLength())
  );
}


unpackTo(_o: RadarSOIObservation_FullT): void {
  _o.obStartTime = this.obStartTime();
  _o.tovs = this.bb!.createScalarList<string>(this.tovs.bind(this), this.tovsLength());
  _o.rspaces = this.bb!.createScalarList<string>(this.rspaces.bind(this), this.rspacesLength());
  _o.xspaces = this.bb!.createScalarList<string>(this.xspaces.bind(this), this.xspacesLength());
  _o.doppler2Xrs = this.bb!.createScalarList<string>(this.doppler2Xrs.bind(this), this.doppler2XrsLength());
  _o.deltaTimes = this.bb!.createScalarList<string>(this.deltaTimes.bind(this), this.deltaTimesLength());
  _o.aspectAngles = this.bb!.createScalarList<string>(this.aspectAngles.bind(this), this.aspectAnglesLength());
  _o.projAngVels = this.bb!.createScalarList<string>(this.projAngVels.bind(this), this.projAngVelsLength());
  _o.idStateVector = this.idStateVector();
  _o.idAttitudeSet = this.idAttitudeSet();
  _o.ranges = this.bb!.createScalarList<string>(this.ranges.bind(this), this.rangesLength());
  _o.azimuths = this.bb!.createScalarList<string>(this.azimuths.bind(this), this.azimuthsLength());
  _o.elevations = this.bb!.createScalarList<string>(this.elevations.bind(this), this.elevationsLength());
  _o.rangeRates = this.bb!.createScalarList<string>(this.rangeRates.bind(this), this.rangeRatesLength());
  _o.azimuthRates = this.bb!.createScalarList<string>(this.azimuthRates.bind(this), this.azimuthRatesLength());
  _o.elevationRates = this.bb!.createScalarList<string>(this.elevationRates.bind(this), this.elevationRatesLength());
  _o.azimuthBiases = this.bb!.createScalarList<string>(this.azimuthBiases.bind(this), this.azimuthBiasesLength());
  _o.elevationBiases = this.bb!.createScalarList<string>(this.elevationBiases.bind(this), this.elevationBiasesLength());
  _o.rangeBiases = this.bb!.createScalarList<string>(this.rangeBiases.bind(this), this.rangeBiasesLength());
  _o.integrationAngles = this.bb!.createScalarList<string>(this.integrationAngles.bind(this), this.integrationAnglesLength());
  _o.crossRangeRes = this.bb!.createScalarList<string>(this.crossRangeRes.bind(this), this.crossRangeResLength());
  _o.beta = this.beta();
  _o.kappa = this.kappa();
  _o.peakAmplitudes = this.bb!.createScalarList<string>(this.peakAmplitudes.bind(this), this.peakAmplitudesLength());
  _o.centerFrequency = this.centerFrequency();
  _o.pulseBandwidth = this.pulseBandwidth();
  _o.xpos = this.bb!.createScalarList<string>(this.xpos.bind(this), this.xposLength());
  _o.ypos = this.bb!.createScalarList<string>(this.ypos.bind(this), this.yposLength());
  _o.zpos = this.bb!.createScalarList<string>(this.zpos.bind(this), this.zposLength());
  _o.xvel = this.bb!.createScalarList<string>(this.xvel.bind(this), this.xvelLength());
  _o.yvel = this.bb!.createScalarList<string>(this.yvel.bind(this), this.yvelLength());
  _o.zvel = this.bb!.createScalarList<string>(this.zvel.bind(this), this.zvelLength());
}
}

export class RadarSOIObservation_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public obStartTime: string|Uint8Array|null = null,
  public tovs: (string)[] = [],
  public rspaces: (string)[] = [],
  public xspaces: (string)[] = [],
  public doppler2Xrs: (string)[] = [],
  public deltaTimes: (string)[] = [],
  public aspectAngles: (string)[] = [],
  public projAngVels: (string)[] = [],
  public idStateVector: string|Uint8Array|null = null,
  public idAttitudeSet: string|Uint8Array|null = null,
  public ranges: (string)[] = [],
  public azimuths: (string)[] = [],
  public elevations: (string)[] = [],
  public rangeRates: (string)[] = [],
  public azimuthRates: (string)[] = [],
  public elevationRates: (string)[] = [],
  public azimuthBiases: (string)[] = [],
  public elevationBiases: (string)[] = [],
  public rangeBiases: (string)[] = [],
  public integrationAngles: (string)[] = [],
  public crossRangeRes: (string)[] = [],
  public beta: number = 0.0,
  public kappa: number = 0.0,
  public peakAmplitudes: (string)[] = [],
  public centerFrequency: number = 0.0,
  public pulseBandwidth: number = 0.0,
  public xpos: (string)[] = [],
  public ypos: (string)[] = [],
  public zpos: (string)[] = [],
  public xvel: (string)[] = [],
  public yvel: (string)[] = [],
  public zvel: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const obStartTime = (this.obStartTime !== null ? builder.createString(this.obStartTime!) : 0);
  const tovs = RadarSOIObservation_Full.createTovsVector(builder, builder.createObjectOffsetList(this.tovs));
  const rspaces = RadarSOIObservation_Full.createRspacesVector(builder, builder.createObjectOffsetList(this.rspaces));
  const xspaces = RadarSOIObservation_Full.createXspacesVector(builder, builder.createObjectOffsetList(this.xspaces));
  const doppler2Xrs = RadarSOIObservation_Full.createDoppler2XrsVector(builder, builder.createObjectOffsetList(this.doppler2Xrs));
  const deltaTimes = RadarSOIObservation_Full.createDeltaTimesVector(builder, builder.createObjectOffsetList(this.deltaTimes));
  const aspectAngles = RadarSOIObservation_Full.createAspectAnglesVector(builder, builder.createObjectOffsetList(this.aspectAngles));
  const projAngVels = RadarSOIObservation_Full.createProjAngVelsVector(builder, builder.createObjectOffsetList(this.projAngVels));
  const idStateVector = (this.idStateVector !== null ? builder.createString(this.idStateVector!) : 0);
  const idAttitudeSet = (this.idAttitudeSet !== null ? builder.createString(this.idAttitudeSet!) : 0);
  const ranges = RadarSOIObservation_Full.createRangesVector(builder, builder.createObjectOffsetList(this.ranges));
  const azimuths = RadarSOIObservation_Full.createAzimuthsVector(builder, builder.createObjectOffsetList(this.azimuths));
  const elevations = RadarSOIObservation_Full.createElevationsVector(builder, builder.createObjectOffsetList(this.elevations));
  const rangeRates = RadarSOIObservation_Full.createRangeRatesVector(builder, builder.createObjectOffsetList(this.rangeRates));
  const azimuthRates = RadarSOIObservation_Full.createAzimuthRatesVector(builder, builder.createObjectOffsetList(this.azimuthRates));
  const elevationRates = RadarSOIObservation_Full.createElevationRatesVector(builder, builder.createObjectOffsetList(this.elevationRates));
  const azimuthBiases = RadarSOIObservation_Full.createAzimuthBiasesVector(builder, builder.createObjectOffsetList(this.azimuthBiases));
  const elevationBiases = RadarSOIObservation_Full.createElevationBiasesVector(builder, builder.createObjectOffsetList(this.elevationBiases));
  const rangeBiases = RadarSOIObservation_Full.createRangeBiasesVector(builder, builder.createObjectOffsetList(this.rangeBiases));
  const integrationAngles = RadarSOIObservation_Full.createIntegrationAnglesVector(builder, builder.createObjectOffsetList(this.integrationAngles));
  const crossRangeRes = RadarSOIObservation_Full.createCrossRangeResVector(builder, builder.createObjectOffsetList(this.crossRangeRes));
  const peakAmplitudes = RadarSOIObservation_Full.createPeakAmplitudesVector(builder, builder.createObjectOffsetList(this.peakAmplitudes));
  const xpos = RadarSOIObservation_Full.createXposVector(builder, builder.createObjectOffsetList(this.xpos));
  const ypos = RadarSOIObservation_Full.createYposVector(builder, builder.createObjectOffsetList(this.ypos));
  const zpos = RadarSOIObservation_Full.createZposVector(builder, builder.createObjectOffsetList(this.zpos));
  const xvel = RadarSOIObservation_Full.createXvelVector(builder, builder.createObjectOffsetList(this.xvel));
  const yvel = RadarSOIObservation_Full.createYvelVector(builder, builder.createObjectOffsetList(this.yvel));
  const zvel = RadarSOIObservation_Full.createZvelVector(builder, builder.createObjectOffsetList(this.zvel));

  return RadarSOIObservation_Full.createRadarSOIObservation_Full(builder,
    obStartTime,
    tovs,
    rspaces,
    xspaces,
    doppler2Xrs,
    deltaTimes,
    aspectAngles,
    projAngVels,
    idStateVector,
    idAttitudeSet,
    ranges,
    azimuths,
    elevations,
    rangeRates,
    azimuthRates,
    elevationRates,
    azimuthBiases,
    elevationBiases,
    rangeBiases,
    integrationAngles,
    crossRangeRes,
    this.beta,
    this.kappa,
    peakAmplitudes,
    this.centerFrequency,
    this.pulseBandwidth,
    xpos,
    ypos,
    zpos,
    xvel,
    yvel,
    zvel
  );
}
}
