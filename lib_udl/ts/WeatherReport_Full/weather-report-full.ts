// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { WeatherReport_Full_dataMode_Enum } from './weather-report-full-data-mode-enum.js';


/**
 * /// These services provide for posting and querying Weather Over Target information. The information contained within describes the current weather conditions over a target area or region to include navigational considerations such as altimeter settings, visibility, cloud heights etc.
 */
export class WeatherReport_Full implements flatbuffers.IUnpackableObject<WeatherReport_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WeatherReport_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWeatherReport_Full(bb:flatbuffers.ByteBuffer, obj?:WeatherReport_Full):WeatherReport_Full {
  return (obj || new WeatherReport_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWeatherReport_Full(bb:flatbuffers.ByteBuffer, obj?:WeatherReport_Full):WeatherReport_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WeatherReport_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('WEAT');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: WEATHER-REPORT-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the sensor making the weather measurement.
 * Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the weather over target, which should remain the same on subsequent Weather Over Target records.
 * Example: /// Example: WEATHER-ID
 * Constraints: Minimum length = 0, Maximum length = 128
 */
weatherId():string|null
weatherId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
weatherId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the ground imagery associated for this weather over target report.
 * Example: /// Example: GROUND-IMAGERY-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idGroundImagery():string|null
idGroundImagery(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idGroundImagery(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the Site that is associated with this weather report.
 * Example: /// Example: AIRFIELD-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSite():string|null
idSite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the Airfield associated with this weather report.
 * Example: /// Example: 8fb38d6d-a3de-45dd-8974-4e3ed73e9449
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idAirfield():string|null
idAirfield(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idAirfield(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The International Civil Aviation Organization (ICAO) code of the airfield associated with this weather report.
 * Example: /// Example: KAFF
 * Constraints: Minimum length = 0, Maximum length = 4
 */
icao():string|null
icao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
icao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional observation or forecast ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: GDSSMB022408301601304517
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalId():string|null
externalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional location ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: TMDS060AD4OG03CC
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalLocationId():string|null
externalLocationId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalLocationId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifies the type of weather report (e.g. OBSERVATION, FORECAST, etc.).
 * Example: /// Example: FORECAST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
reportType():string|null
reportType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reportType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
obTime():string|null
obTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Valid start time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
 * Example: /// Example: 2024-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
forecastStartTime():string|null
forecastStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
forecastStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Valid end time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
 * Example: /// Example: 2024-01-01T18:00:00.123Z
 * Constraints: No constraints specified.
 */
forecastEndTime():string|null
forecastEndTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
forecastEndTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The central WGS-84 latitude of the weather report, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 56.12
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The central WGS-84 longitude of the weather report, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: -156.6
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Point height above ellipsoid (WGS-84), in meters.
 * Example: /// Example: 123.12
 * Constraints: No constraints specified.
 */
alt():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Altitude of a pressure surface in the atmosphere above mean sea level, in meters.
 * Example: /// Example: 1000.0
 * Constraints: No constraints specified.
 */
geoPotentialAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Specific pressures or heights where measurements are taken, labeled as either MANDATORY or SIGNIFICANT levels. Mandatory levels are at particular pressures at geopotential heights. Significant levels are at particular geometric heights.
 * Example: /// Example: MANDATORY
 * Constraints: Minimum length = 0, Maximum length = 16
 */
dataLevel():string|null
dataLevel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataLevel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
 * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
 * Constraints: No constraints specified.
 */
area():string|null
area(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
area(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
 * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
 * Constraints: No constraints specified.
 */
atext():string|null
atext(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atext(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
 * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
 * Constraints: No constraints specified.
 */
agjson():string|null
agjson(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
agjson(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of region as projected on the ground.
 * Example: /// Example: ST_Polygon
 * Constraints: Minimum length = 0, Maximum length = 128
 */
atype():string|null
atype(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atype(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of dimensions of the geometry depicted by region.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
andims():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Geographical spatial_ref_sys for region.
 * Example: /// Example: 4326
 * Constraints: No constraints specified.
 */
asrid():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Expresses the speed of the wind in meters/second.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
windSpd():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average wind speed over a 1 minute period, in meters/second.
 * Example: /// Example: 12.1
 * Constraints: No constraints specified.
 */
windSpdAvg():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Expresses the max gust speed of the wind, in meters/second.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
windGust():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Expresses the max gust speed of the wind recorded in a 10 minute period, in meters/second.
 * Example: /// Example: 13.2
 * Constraints: No constraints specified.
 */
windGust10():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The change in wind speed between two different altitudes divided by the vertical distance between them, in units of 1/sec.
 * Example: /// Example: 3.8
 * Constraints: No constraints specified.
 */
vshear():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The change in wind speed between two different lateral positions at a given altitude divided by the horizontal distance between them, in units of 1/sec.
 * Example: /// Example: 3.8
 * Constraints: No constraints specified.
 */
hshear():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average radial velocity of wind as measured by radar with multi-beam configurations. Radial velocity is the component of wind velocity moving directly toward or away from a sensor's radar beam, in meters per second. Values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar).
 * Example: /// Example: -0.04
 * Constraints: No constraints specified.
 */
radVel():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Component of wind velocity moving directly toward or away from radar beam 1, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
 * Example: /// Example: 4.4
 * Constraints: No constraints specified.
 */
radVelBeam1():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Component of wind velocity moving directly toward or away from radar beam 2, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
 * Example: /// Example: -0.2
 * Constraints: No constraints specified.
 */
radVelBeam2():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Component of wind velocity moving directly toward or away from radar beam 3, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
 * Example: /// Example: -0.2
 * Constraints: No constraints specified.
 */
radVelBeam3():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Component of wind velocity moving directly toward or away from radar beam 4, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
 * Example: /// Example: 11.4
 * Constraints: No constraints specified.
 */
radVelBeam4():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Component of wind velocity moving directly toward or away from radar beam 5, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
 * Example: /// Example: 4.1
 * Constraints: No constraints specified.
 */
radVelBeam5():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Direction the wind is blowing, in degrees clockwise from true north.
 * Example: /// Example: 75.1234
 * Constraints: No constraints specified.
 */
windDir():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average wind direction over a 1 minute period, in degrees clockwise from true north.
 * Example: /// Example: 57.1
 * Constraints: No constraints specified.
 */
windDirAvg():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Wind direction corresponding to the peak wind speed during a 1 minute period, in degrees clockwise from true north.
 * Example: /// Example: 78.4
 * Constraints: No constraints specified.
 */
windDirPeak():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Wind direction corresponding to the peak wind speed during a 10 minute period, in degrees clockwise from true north.
 * Example: /// Example: 44.5
 * Constraints: No constraints specified.
 */
windDirPeak10():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The perceived temperature in degrees C.
 * Example: /// Example: 15.6
 * Constraints: No constraints specified.
 */
windChill():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The difference in wind direction recorded over a period of time, in degrees.
 * Example: /// Example: 9.1
 * Constraints: No constraints specified.
 */
dirDev():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Boolean describing whether or not the wind direction and/or speed is variable.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
windVar():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Covariance matrix, in knots and second based units.  The array values represent the lower triangular half of the covariance matrix. The size of the covariance matrix is 2x2.  The covariance elements are position dependent within the array with values ordered as follows:
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y
 * x&nbsp;&nbsp;&nbsp;&nbsp;1
 * y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
 * The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
 * Example: /// Example: [1.1, 2.2]
 * Constraints: No constraints specified.
 */
windCov(index: number):string
windCov(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
windCov(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

windCovLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of cloud cover descriptions - each element can be maximum of 16 characters long. Intended as, but not constrained to, MIL-STD-6016 cloud cover designations (e.g. SKY CLEAR, SCATTERED, BROKEN, OVERCAST, SKY OBSCURED). Each element of the array corresponds to the elements in the cloudHght array specified respectively.
 * Example: /// Example: ['OVERCAST', 'BROKEN']
 * Constraints: No constraints specified.
 */
cloudCover(index: number):string
cloudCover(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
cloudCover(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

cloudCoverLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of cloud base heights in meters described by the cloudHght array. Each element of the array corresponds to the elements in the cloudCover array specified respectively.
 * Example: /// Example: [1.2, 2.2]
 * Constraints: No constraints specified.
 */
cloudHght(index: number):string
cloudHght(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
cloudHght(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

cloudHghtLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Describes the actual weather at position. Intended as, but not constrained to, MIL-STD-6016 actual weather (e.g. NO STATEMENT, NO SIGNIFICANT WEATHER, DRIZZLE, RAIN, SNOW, SNOW GRAINS, DIAMOND DUST, ICE PELLETS, HAIL, SMALL HAIL, MIST, FOG, SMOKE, VOLCANIC ASH, WIDESPREAD DUST, SAND, HAZE, WELL DEVELOPED DUST, SQUALLS, FUNNEL CLOUDS, SANDSTORM, DUSTSTORM, LOW CLOUDS, CLOUDY, GROUND FOG, DUST, HEAVY RAIN, THUNDERSTORMS AWT, HEAVY THUNDERSTORMS, HURRICANE TYPHOON CYCLONE, TROPICAL STORM, TORNADO, HIGH WINDS, LIGHTNING, FREEZING DRIZZLE, FREEZING RAIN, HEAVY SNOW, ICING, SNOW OR RAIN AND SNOW MIXED, SHOWERS, CLEAR).
 * Example: /// Example: NO STATEMENT
 * Constraints: Minimum length = 0, Maximum length = 32
 */
actWeather():string|null
actWeather(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actWeather(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Used in conjunction with actWeather and weatherInt. Intended as, but not constrained to, MIL-STD-6016 actual weather descriptor (e.g. NO STATEMENT, SHALLOW, PATCHES, LOW DRIFTING, BLOWING, SHOWERS, THUNDERSTORMS, SUPERCOOLED).
 * Example: /// Example: NO STATEMENT
 * Constraints: Minimum length = 0, Maximum length = 32
 */
weatherDesc():string|null
weatherDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
weatherDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Weather Intensity. Used in conjunction with actWeather and weatherDesc. Intended as, but not constrained to, MIL-STD-6016 weather intensity (e.g. NO STATEMENT, LIGHT, MODERATE, HEAVY, IN VICINITY).
 * Example: /// Example: NO STATEMENT
 * Constraints: Minimum length = 0, Maximum length = 32
 */
weatherInt():string|null
weatherInt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
weatherInt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Raw Meteorological Aerodrome Report (METAR) string.
 * Example: /// Example: KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015
 * Constraints: Minimum length = 0, Maximum length = 512
 */
rawMetar():string|null
rawMetar(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawMetar(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Terminal Aerodrome Forecast (TAF) containing detailed weather predictions for a specific airport or aerodrome.
 * Example: /// Example: KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z=
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
rawTaf():string|null
rawTaf(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawTaf(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Altimeter set to read zero at mean sea level in kilopascals.
 * Example: /// Example: 1234.456
 * Constraints: No constraints specified.
 */
qnh():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Visual distance in meters.
 * Example: /// Example: 1234.456
 * Constraints: No constraints specified.
 */
visibility():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The measurement of air temperature in degrees C.
 * Example: /// Example: 23.45
 * Constraints: No constraints specified.
 */
temperature():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The measurement of soil temperature in degrees C.
 * Example: /// Example: 22.4
 * Constraints: No constraints specified.
 */
soilTemp():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The measurement of air pressure in the atmosphere in kilopascals.
 * Example: /// Example: 101.2
 * Constraints: No constraints specified.
 */
barPress():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The speed at which water is being applied to a specific area in millimeters per hour.
 * Example: /// Example: 3.4
 * Constraints: No constraints specified.
 */
precipRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The amount of rain that has fallen in the past hour, in centimeters.
 * Example: /// Example: 1.2
 * Constraints: No constraints specified.
 */
rainHour():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The power per unit area received from the Sun in the form of electromagnetic radiation as measured in the wavelength range of the measuring instrument. The solar irradiance is measured in watt per square meter (W/m2).
 * Example: /// Example: 1234.456
 * Constraints: No constraints specified.
 */
solarRad():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The amount of radiation that reaches earth's surface after being scattered by the atmosphere, in Watts per square meter.
 * Example: /// Example: 234.5
 * Constraints: No constraints specified.
 */
difRad():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The amount of radiation that changes direction as a function of atmospheric density, in Watts per square meter.
 * Example: /// Example: 56.7
 * Constraints: No constraints specified.
 */
refRad():number {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor WGS84 latitude at obTime in degrees. -90 to 90 degrees (negative values south of equator). This includes pilot reports or other means of weather observation.
 * Example: /// Example: 12.456
 * Constraints: No constraints specified.
 */
senlat():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor WGS84 longitude at obTime in degrees. -180 to 180 degrees (negative values west of Prime Meridian). This includes pilot reports or other means of weather observation.
 * Example: /// Example: 123.456
 * Constraints: No constraints specified.
 */
senlon():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor altitude at obTime in km. This includes pilot reports or other means of weather observation.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
senalt():number {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The temperature at which air is saturated with water vapor, in degrees C.
 * Example: /// Example: 15.6
 * Constraints: No constraints specified.
 */
dewPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The percentage of water vapor in the atmosphere.
 * Example: /// Example: 34.456
 * Constraints: No constraints specified.
 */
relHumidity():number {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * An indication of how much the atmosphere refracts light.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
indexRefraction():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The volumetric percentage of soil water contained in a given volume of soil.
 * Example: /// Example: 3.5
 * Constraints: No constraints specified.
 */
soilMoisture():number {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Describes in which direction (if any) that better weather conditions exist. Intended as, but not constrained to, MIL-STD-6016 surrounding weather designations (e.g. NO STATEMENT, BETTER TO NORTH, BETTER TO EAST, BETTER TO SOUTH, BETTER TO WEST).
 * Example: /// Example: NO STATEMENT
 * Constraints: Minimum length = 0, Maximum length = 32
 */
surroundingWeather():string|null
surroundingWeather(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
surroundingWeather(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Amplifies the actual weather being reported. Intended as, but not constrained to, MIL-STD-6016 weather amplification designations (e.g. NO STATEMENT, NO SCATTERED BROKEN MEDIUM CLOUD, SCATTERED BROKEN MEDIUM CLOUDS, GUSTY WINDS AT SERVICE, FOG IN VALLEYS, HIGHER TERRAIN OBSCURED, SURFACE CONDITIONS VARIABLE, SURFACE WIND NE, SURFACE WIND SE, SURFACE WIND SW, SURFACE WIND NW, PRESENCE OF CUMULONIMBUS).
 * Example: /// Example: NO STATEMENT
 * Constraints: Minimum length = 0, Maximum length = 32
 */
weatherAmp():string|null
weatherAmp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
weatherAmp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Reports the lowest altitude at which contrails are occurring, in meters.
 * Example: /// Example: 123.123
 * Constraints: No constraints specified.
 */
contrailHghtLower():number {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Reports the highest altitude at which contrails are occurring, in meters.
 * Example: /// Example: 123.123
 * Constraints: No constraints specified.
 */
contrailHghtUpper():number {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Reports the highest altitude at which icing or freezing rain is occurring, in meters.
 * Example: /// Example: 123.123
 * Constraints: No constraints specified.
 */
icingUpperLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Reports the lowest altitude at which icing or freezing rain is occurring, in meters.
 * Example: /// Example: 123.123
 * Constraints: No constraints specified.
 */
icingLowerLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Describes the flight conditions in route to the target  (NO STATEMENT, MAINLY IFR, MAINLY VFR, THUNDERSTORMS).
 * MAINLY IFR:&nbsp;&nbsp;Predominantly Instrument Flight Rules.
 * MAINLY VFR:&nbsp;&nbsp;Predominantly Visual Flight Rules.
 * THUNDERSTORMS:&nbsp;&nbsp;Thunderstorms expected in route.
 * Example: /// Example: THUNDERSTORMS
 * Constraints: Minimum length = 0, Maximum length = 32
 */
enRouteWeather():string|null
enRouteWeather(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enRouteWeather(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating detection of a cloud-to-cloud lightning event.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
ccEvent():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Array of UDL record types (SENSOR, WEATHERDATA) that are related to this WeatherReport record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
 * Example: /// Example: ['SENSOR', 'WEATHERDATA']
 * Constraints: No constraints specified.
 */
srcTyps(index: number):string
srcTyps(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcTyps(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcTypsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UUID(s) of the UDL data record(s) that are related to this WeatherReport record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
 * Example: /// Example: ['e609a90d-4059-4043-9f1a-fd7b49a3e1d0', 'c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52']
 * Constraints: No constraints specified.
 */
srcIds(index: number):string
srcIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():WeatherReport_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : WeatherReport_Full_dataMode_Enum.REAL;
}

static startWeatherReport_Full(builder:flatbuffers.Builder) {
  builder.startObject(86);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idSensorOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, origSensorIdOffset, 0);
}

static addWeatherId(builder:flatbuffers.Builder, weatherIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, weatherIdOffset, 0);
}

static addIdGroundImagery(builder:flatbuffers.Builder, idGroundImageryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idGroundImageryOffset, 0);
}

static addIdSite(builder:flatbuffers.Builder, idSiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, idSiteOffset, 0);
}

static addIdAirfield(builder:flatbuffers.Builder, idAirfieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, idAirfieldOffset, 0);
}

static addIcao(builder:flatbuffers.Builder, icaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, icaoOffset, 0);
}

static addExternalId(builder:flatbuffers.Builder, externalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, externalIdOffset, 0);
}

static addExternalLocationId(builder:flatbuffers.Builder, externalLocationIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, externalLocationIdOffset, 0);
}

static addReportType(builder:flatbuffers.Builder, reportTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, reportTypeOffset, 0);
}

static addObTime(builder:flatbuffers.Builder, obTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, obTimeOffset, 0);
}

static addForecastStartTime(builder:flatbuffers.Builder, forecastStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, forecastStartTimeOffset, 0);
}

static addForecastEndTime(builder:flatbuffers.Builder, forecastEndTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, forecastEndTimeOffset, 0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(15, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(16, lon, 0.0);
}

static addAlt(builder:flatbuffers.Builder, alt:number) {
  builder.addFieldFloat64(17, alt, 0.0);
}

static addGeoPotentialAlt(builder:flatbuffers.Builder, geoPotentialAlt:number) {
  builder.addFieldFloat64(18, geoPotentialAlt, 0.0);
}

static addDataLevel(builder:flatbuffers.Builder, dataLevelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, dataLevelOffset, 0);
}

static addArea(builder:flatbuffers.Builder, areaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, areaOffset, 0);
}

static addAtext(builder:flatbuffers.Builder, atextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, atextOffset, 0);
}

static addAgjson(builder:flatbuffers.Builder, agjsonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, agjsonOffset, 0);
}

static addAtype(builder:flatbuffers.Builder, atypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, atypeOffset, 0);
}

static addAndims(builder:flatbuffers.Builder, andims:number) {
  builder.addFieldInt32(24, andims, 0);
}

static addAsrid(builder:flatbuffers.Builder, asrid:number) {
  builder.addFieldInt32(25, asrid, 0);
}

static addWindSpd(builder:flatbuffers.Builder, windSpd:number) {
  builder.addFieldFloat64(26, windSpd, 0.0);
}

static addWindSpdAvg(builder:flatbuffers.Builder, windSpdAvg:number) {
  builder.addFieldFloat64(27, windSpdAvg, 0.0);
}

static addWindGust(builder:flatbuffers.Builder, windGust:number) {
  builder.addFieldFloat64(28, windGust, 0.0);
}

static addWindGust10(builder:flatbuffers.Builder, windGust10:number) {
  builder.addFieldFloat64(29, windGust10, 0.0);
}

static addVshear(builder:flatbuffers.Builder, vshear:number) {
  builder.addFieldFloat64(30, vshear, 0.0);
}

static addHshear(builder:flatbuffers.Builder, hshear:number) {
  builder.addFieldFloat64(31, hshear, 0.0);
}

static addRadVel(builder:flatbuffers.Builder, radVel:number) {
  builder.addFieldFloat64(32, radVel, 0.0);
}

static addRadVelBeam1(builder:flatbuffers.Builder, radVelBeam1:number) {
  builder.addFieldFloat64(33, radVelBeam1, 0.0);
}

static addRadVelBeam2(builder:flatbuffers.Builder, radVelBeam2:number) {
  builder.addFieldFloat64(34, radVelBeam2, 0.0);
}

static addRadVelBeam3(builder:flatbuffers.Builder, radVelBeam3:number) {
  builder.addFieldFloat64(35, radVelBeam3, 0.0);
}

static addRadVelBeam4(builder:flatbuffers.Builder, radVelBeam4:number) {
  builder.addFieldFloat64(36, radVelBeam4, 0.0);
}

static addRadVelBeam5(builder:flatbuffers.Builder, radVelBeam5:number) {
  builder.addFieldFloat64(37, radVelBeam5, 0.0);
}

static addWindDir(builder:flatbuffers.Builder, windDir:number) {
  builder.addFieldFloat64(38, windDir, 0.0);
}

static addWindDirAvg(builder:flatbuffers.Builder, windDirAvg:number) {
  builder.addFieldFloat64(39, windDirAvg, 0.0);
}

static addWindDirPeak(builder:flatbuffers.Builder, windDirPeak:number) {
  builder.addFieldFloat64(40, windDirPeak, 0.0);
}

static addWindDirPeak10(builder:flatbuffers.Builder, windDirPeak10:number) {
  builder.addFieldFloat64(41, windDirPeak10, 0.0);
}

static addWindChill(builder:flatbuffers.Builder, windChill:number) {
  builder.addFieldFloat64(42, windChill, 0.0);
}

static addDirDev(builder:flatbuffers.Builder, dirDev:number) {
  builder.addFieldFloat64(43, dirDev, 0.0);
}

static addWindVar(builder:flatbuffers.Builder, windVar:boolean) {
  builder.addFieldInt8(44, +windVar, +false);
}

static addWindCov(builder:flatbuffers.Builder, windCovOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, windCovOffset, 0);
}

static createWindCovVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWindCovVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCloudCover(builder:flatbuffers.Builder, cloudCoverOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, cloudCoverOffset, 0);
}

static createCloudCoverVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCloudCoverVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCloudHght(builder:flatbuffers.Builder, cloudHghtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, cloudHghtOffset, 0);
}

static createCloudHghtVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCloudHghtVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addActWeather(builder:flatbuffers.Builder, actWeatherOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, actWeatherOffset, 0);
}

static addWeatherDesc(builder:flatbuffers.Builder, weatherDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, weatherDescOffset, 0);
}

static addWeatherInt(builder:flatbuffers.Builder, weatherIntOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, weatherIntOffset, 0);
}

static addRawMetar(builder:flatbuffers.Builder, rawMetarOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, rawMetarOffset, 0);
}

static addRawTaf(builder:flatbuffers.Builder, rawTafOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, rawTafOffset, 0);
}

static addQnh(builder:flatbuffers.Builder, qnh:number) {
  builder.addFieldFloat64(53, qnh, 0.0);
}

static addVisibility(builder:flatbuffers.Builder, visibility:number) {
  builder.addFieldFloat64(54, visibility, 0.0);
}

static addTemperature(builder:flatbuffers.Builder, temperature:number) {
  builder.addFieldFloat64(55, temperature, 0.0);
}

static addSoilTemp(builder:flatbuffers.Builder, soilTemp:number) {
  builder.addFieldFloat64(56, soilTemp, 0.0);
}

static addBarPress(builder:flatbuffers.Builder, barPress:number) {
  builder.addFieldFloat64(57, barPress, 0.0);
}

static addPrecipRate(builder:flatbuffers.Builder, precipRate:number) {
  builder.addFieldFloat64(58, precipRate, 0.0);
}

static addRainHour(builder:flatbuffers.Builder, rainHour:number) {
  builder.addFieldFloat64(59, rainHour, 0.0);
}

static addSolarRad(builder:flatbuffers.Builder, solarRad:number) {
  builder.addFieldFloat64(60, solarRad, 0.0);
}

static addDifRad(builder:flatbuffers.Builder, difRad:number) {
  builder.addFieldFloat64(61, difRad, 0.0);
}

static addRefRad(builder:flatbuffers.Builder, refRad:number) {
  builder.addFieldFloat64(62, refRad, 0.0);
}

static addSenlat(builder:flatbuffers.Builder, senlat:number) {
  builder.addFieldFloat64(63, senlat, 0.0);
}

static addSenlon(builder:flatbuffers.Builder, senlon:number) {
  builder.addFieldFloat64(64, senlon, 0.0);
}

static addSenalt(builder:flatbuffers.Builder, senalt:number) {
  builder.addFieldFloat64(65, senalt, 0.0);
}

static addDewPoint(builder:flatbuffers.Builder, dewPoint:number) {
  builder.addFieldFloat64(66, dewPoint, 0.0);
}

static addRelHumidity(builder:flatbuffers.Builder, relHumidity:number) {
  builder.addFieldFloat64(67, relHumidity, 0.0);
}

static addIndexRefraction(builder:flatbuffers.Builder, indexRefraction:number) {
  builder.addFieldFloat64(68, indexRefraction, 0.0);
}

static addSoilMoisture(builder:flatbuffers.Builder, soilMoisture:number) {
  builder.addFieldFloat64(69, soilMoisture, 0.0);
}

static addSurroundingWeather(builder:flatbuffers.Builder, surroundingWeatherOffset:flatbuffers.Offset) {
  builder.addFieldOffset(70, surroundingWeatherOffset, 0);
}

static addWeatherAmp(builder:flatbuffers.Builder, weatherAmpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(71, weatherAmpOffset, 0);
}

static addContrailHghtLower(builder:flatbuffers.Builder, contrailHghtLower:number) {
  builder.addFieldFloat64(72, contrailHghtLower, 0.0);
}

static addContrailHghtUpper(builder:flatbuffers.Builder, contrailHghtUpper:number) {
  builder.addFieldFloat64(73, contrailHghtUpper, 0.0);
}

static addIcingUpperLimit(builder:flatbuffers.Builder, icingUpperLimit:number) {
  builder.addFieldFloat64(74, icingUpperLimit, 0.0);
}

static addIcingLowerLimit(builder:flatbuffers.Builder, icingLowerLimit:number) {
  builder.addFieldFloat64(75, icingLowerLimit, 0.0);
}

static addEnRouteWeather(builder:flatbuffers.Builder, enRouteWeatherOffset:flatbuffers.Offset) {
  builder.addFieldOffset(76, enRouteWeatherOffset, 0);
}

static addCcEvent(builder:flatbuffers.Builder, ccEvent:boolean) {
  builder.addFieldInt8(77, +ccEvent, +false);
}

static addSrcTyps(builder:flatbuffers.Builder, srcTypsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(78, srcTypsOffset, 0);
}

static createSrcTypsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcTypsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSrcIds(builder:flatbuffers.Builder, srcIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(79, srcIdsOffset, 0);
}

static createSrcIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(80, origNetworkOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(81, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(82, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(83, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(84, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:WeatherReport_Full_dataMode_Enum) {
  builder.addFieldInt8(85, dataMode, WeatherReport_Full_dataMode_Enum.REAL);
}

static endWeatherReport_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishWeatherReport_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'WEAT');
}

static finishSizePrefixedWeatherReport_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'WEAT', true);
}

static createWeatherReport_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, weatherIdOffset:flatbuffers.Offset, idGroundImageryOffset:flatbuffers.Offset, idSiteOffset:flatbuffers.Offset, idAirfieldOffset:flatbuffers.Offset, icaoOffset:flatbuffers.Offset, externalIdOffset:flatbuffers.Offset, externalLocationIdOffset:flatbuffers.Offset, reportTypeOffset:flatbuffers.Offset, obTimeOffset:flatbuffers.Offset, forecastStartTimeOffset:flatbuffers.Offset, forecastEndTimeOffset:flatbuffers.Offset, lat:number, lon:number, alt:number, geoPotentialAlt:number, dataLevelOffset:flatbuffers.Offset, areaOffset:flatbuffers.Offset, atextOffset:flatbuffers.Offset, agjsonOffset:flatbuffers.Offset, atypeOffset:flatbuffers.Offset, andims:number, asrid:number, windSpd:number, windSpdAvg:number, windGust:number, windGust10:number, vshear:number, hshear:number, radVel:number, radVelBeam1:number, radVelBeam2:number, radVelBeam3:number, radVelBeam4:number, radVelBeam5:number, windDir:number, windDirAvg:number, windDirPeak:number, windDirPeak10:number, windChill:number, dirDev:number, windVar:boolean, windCovOffset:flatbuffers.Offset, cloudCoverOffset:flatbuffers.Offset, cloudHghtOffset:flatbuffers.Offset, actWeatherOffset:flatbuffers.Offset, weatherDescOffset:flatbuffers.Offset, weatherIntOffset:flatbuffers.Offset, rawMetarOffset:flatbuffers.Offset, rawTafOffset:flatbuffers.Offset, qnh:number, visibility:number, temperature:number, soilTemp:number, barPress:number, precipRate:number, rainHour:number, solarRad:number, difRad:number, refRad:number, senlat:number, senlon:number, senalt:number, dewPoint:number, relHumidity:number, indexRefraction:number, soilMoisture:number, surroundingWeatherOffset:flatbuffers.Offset, weatherAmpOffset:flatbuffers.Offset, contrailHghtLower:number, contrailHghtUpper:number, icingUpperLimit:number, icingLowerLimit:number, enRouteWeatherOffset:flatbuffers.Offset, ccEvent:boolean, srcTypsOffset:flatbuffers.Offset, srcIdsOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:WeatherReport_Full_dataMode_Enum):flatbuffers.Offset {
  WeatherReport_Full.startWeatherReport_Full(builder);
  WeatherReport_Full.addId(builder, idOffset);
  WeatherReport_Full.addClassificationMarking(builder, classificationMarkingOffset);
  WeatherReport_Full.addIdSensor(builder, idSensorOffset);
  WeatherReport_Full.addOrigSensorId(builder, origSensorIdOffset);
  WeatherReport_Full.addWeatherId(builder, weatherIdOffset);
  WeatherReport_Full.addIdGroundImagery(builder, idGroundImageryOffset);
  WeatherReport_Full.addIdSite(builder, idSiteOffset);
  WeatherReport_Full.addIdAirfield(builder, idAirfieldOffset);
  WeatherReport_Full.addIcao(builder, icaoOffset);
  WeatherReport_Full.addExternalId(builder, externalIdOffset);
  WeatherReport_Full.addExternalLocationId(builder, externalLocationIdOffset);
  WeatherReport_Full.addReportType(builder, reportTypeOffset);
  WeatherReport_Full.addObTime(builder, obTimeOffset);
  WeatherReport_Full.addForecastStartTime(builder, forecastStartTimeOffset);
  WeatherReport_Full.addForecastEndTime(builder, forecastEndTimeOffset);
  WeatherReport_Full.addLat(builder, lat);
  WeatherReport_Full.addLon(builder, lon);
  WeatherReport_Full.addAlt(builder, alt);
  WeatherReport_Full.addGeoPotentialAlt(builder, geoPotentialAlt);
  WeatherReport_Full.addDataLevel(builder, dataLevelOffset);
  WeatherReport_Full.addArea(builder, areaOffset);
  WeatherReport_Full.addAtext(builder, atextOffset);
  WeatherReport_Full.addAgjson(builder, agjsonOffset);
  WeatherReport_Full.addAtype(builder, atypeOffset);
  WeatherReport_Full.addAndims(builder, andims);
  WeatherReport_Full.addAsrid(builder, asrid);
  WeatherReport_Full.addWindSpd(builder, windSpd);
  WeatherReport_Full.addWindSpdAvg(builder, windSpdAvg);
  WeatherReport_Full.addWindGust(builder, windGust);
  WeatherReport_Full.addWindGust10(builder, windGust10);
  WeatherReport_Full.addVshear(builder, vshear);
  WeatherReport_Full.addHshear(builder, hshear);
  WeatherReport_Full.addRadVel(builder, radVel);
  WeatherReport_Full.addRadVelBeam1(builder, radVelBeam1);
  WeatherReport_Full.addRadVelBeam2(builder, radVelBeam2);
  WeatherReport_Full.addRadVelBeam3(builder, radVelBeam3);
  WeatherReport_Full.addRadVelBeam4(builder, radVelBeam4);
  WeatherReport_Full.addRadVelBeam5(builder, radVelBeam5);
  WeatherReport_Full.addWindDir(builder, windDir);
  WeatherReport_Full.addWindDirAvg(builder, windDirAvg);
  WeatherReport_Full.addWindDirPeak(builder, windDirPeak);
  WeatherReport_Full.addWindDirPeak10(builder, windDirPeak10);
  WeatherReport_Full.addWindChill(builder, windChill);
  WeatherReport_Full.addDirDev(builder, dirDev);
  WeatherReport_Full.addWindVar(builder, windVar);
  WeatherReport_Full.addWindCov(builder, windCovOffset);
  WeatherReport_Full.addCloudCover(builder, cloudCoverOffset);
  WeatherReport_Full.addCloudHght(builder, cloudHghtOffset);
  WeatherReport_Full.addActWeather(builder, actWeatherOffset);
  WeatherReport_Full.addWeatherDesc(builder, weatherDescOffset);
  WeatherReport_Full.addWeatherInt(builder, weatherIntOffset);
  WeatherReport_Full.addRawMetar(builder, rawMetarOffset);
  WeatherReport_Full.addRawTaf(builder, rawTafOffset);
  WeatherReport_Full.addQnh(builder, qnh);
  WeatherReport_Full.addVisibility(builder, visibility);
  WeatherReport_Full.addTemperature(builder, temperature);
  WeatherReport_Full.addSoilTemp(builder, soilTemp);
  WeatherReport_Full.addBarPress(builder, barPress);
  WeatherReport_Full.addPrecipRate(builder, precipRate);
  WeatherReport_Full.addRainHour(builder, rainHour);
  WeatherReport_Full.addSolarRad(builder, solarRad);
  WeatherReport_Full.addDifRad(builder, difRad);
  WeatherReport_Full.addRefRad(builder, refRad);
  WeatherReport_Full.addSenlat(builder, senlat);
  WeatherReport_Full.addSenlon(builder, senlon);
  WeatherReport_Full.addSenalt(builder, senalt);
  WeatherReport_Full.addDewPoint(builder, dewPoint);
  WeatherReport_Full.addRelHumidity(builder, relHumidity);
  WeatherReport_Full.addIndexRefraction(builder, indexRefraction);
  WeatherReport_Full.addSoilMoisture(builder, soilMoisture);
  WeatherReport_Full.addSurroundingWeather(builder, surroundingWeatherOffset);
  WeatherReport_Full.addWeatherAmp(builder, weatherAmpOffset);
  WeatherReport_Full.addContrailHghtLower(builder, contrailHghtLower);
  WeatherReport_Full.addContrailHghtUpper(builder, contrailHghtUpper);
  WeatherReport_Full.addIcingUpperLimit(builder, icingUpperLimit);
  WeatherReport_Full.addIcingLowerLimit(builder, icingLowerLimit);
  WeatherReport_Full.addEnRouteWeather(builder, enRouteWeatherOffset);
  WeatherReport_Full.addCcEvent(builder, ccEvent);
  WeatherReport_Full.addSrcTyps(builder, srcTypsOffset);
  WeatherReport_Full.addSrcIds(builder, srcIdsOffset);
  WeatherReport_Full.addOrigNetwork(builder, origNetworkOffset);
  WeatherReport_Full.addCreatedAt(builder, createdAtOffset);
  WeatherReport_Full.addCreatedBy(builder, createdByOffset);
  WeatherReport_Full.addSource(builder, sourceOffset);
  WeatherReport_Full.addOrigin(builder, originOffset);
  WeatherReport_Full.addDataMode(builder, dataMode);
  return WeatherReport_Full.endWeatherReport_Full(builder);
}

unpack(): WeatherReport_FullT {
  return new WeatherReport_FullT(
    this.id(),
    this.classificationMarking(),
    this.idSensor(),
    this.origSensorId(),
    this.weatherId(),
    this.idGroundImagery(),
    this.idSite(),
    this.idAirfield(),
    this.icao(),
    this.externalId(),
    this.externalLocationId(),
    this.reportType(),
    this.obTime(),
    this.forecastStartTime(),
    this.forecastEndTime(),
    this.lat(),
    this.lon(),
    this.alt(),
    this.geoPotentialAlt(),
    this.dataLevel(),
    this.area(),
    this.atext(),
    this.agjson(),
    this.atype(),
    this.andims(),
    this.asrid(),
    this.windSpd(),
    this.windSpdAvg(),
    this.windGust(),
    this.windGust10(),
    this.vshear(),
    this.hshear(),
    this.radVel(),
    this.radVelBeam1(),
    this.radVelBeam2(),
    this.radVelBeam3(),
    this.radVelBeam4(),
    this.radVelBeam5(),
    this.windDir(),
    this.windDirAvg(),
    this.windDirPeak(),
    this.windDirPeak10(),
    this.windChill(),
    this.dirDev(),
    this.windVar(),
    this.bb!.createScalarList<string>(this.windCov.bind(this), this.windCov_Length()),
    this.bb!.createScalarList<string>(this.cloudCover.bind(this), this.cloudCover_Length()),
    this.bb!.createScalarList<string>(this.cloudHght.bind(this), this.cloudHght_Length()),
    this.actWeather(),
    this.weatherDesc(),
    this.weatherInt(),
    this.rawMetar(),
    this.rawTaf(),
    this.qnh(),
    this.visibility(),
    this.temperature(),
    this.soilTemp(),
    this.barPress(),
    this.precipRate(),
    this.rainHour(),
    this.solarRad(),
    this.difRad(),
    this.refRad(),
    this.senlat(),
    this.senlon(),
    this.senalt(),
    this.dewPoint(),
    this.relHumidity(),
    this.indexRefraction(),
    this.soilMoisture(),
    this.surroundingWeather(),
    this.weatherAmp(),
    this.contrailHghtLower(),
    this.contrailHghtUpper(),
    this.icingUpperLimit(),
    this.icingLowerLimit(),
    this.enRouteWeather(),
    this.ccEvent(),
    this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTyps_Length()),
    this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIds_Length()),
    this.origNetwork(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode()
  );
}


unpackTo(_o: WeatherReport_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idSensor = this.idSensor();
  _o.origSensorId = this.origSensorId();
  _o.weatherId = this.weatherId();
  _o.idGroundImagery = this.idGroundImagery();
  _o.idSite = this.idSite();
  _o.idAirfield = this.idAirfield();
  _o.icao = this.icao();
  _o.externalId = this.externalId();
  _o.externalLocationId = this.externalLocationId();
  _o.reportType = this.reportType();
  _o.obTime = this.obTime();
  _o.forecastStartTime = this.forecastStartTime();
  _o.forecastEndTime = this.forecastEndTime();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.alt = this.alt();
  _o.geoPotentialAlt = this.geoPotentialAlt();
  _o.dataLevel = this.dataLevel();
  _o.area = this.area();
  _o.atext = this.atext();
  _o.agjson = this.agjson();
  _o.atype = this.atype();
  _o.andims = this.andims();
  _o.asrid = this.asrid();
  _o.windSpd = this.windSpd();
  _o.windSpdAvg = this.windSpdAvg();
  _o.windGust = this.windGust();
  _o.windGust10 = this.windGust10();
  _o.vshear = this.vshear();
  _o.hshear = this.hshear();
  _o.radVel = this.radVel();
  _o.radVelBeam1 = this.radVelBeam1();
  _o.radVelBeam2 = this.radVelBeam2();
  _o.radVelBeam3 = this.radVelBeam3();
  _o.radVelBeam4 = this.radVelBeam4();
  _o.radVelBeam5 = this.radVelBeam5();
  _o.windDir = this.windDir();
  _o.windDirAvg = this.windDirAvg();
  _o.windDirPeak = this.windDirPeak();
  _o.windDirPeak10 = this.windDirPeak10();
  _o.windChill = this.windChill();
  _o.dirDev = this.dirDev();
  _o.windVar = this.windVar();
  _o.windCov = this.bb!.createScalarList<string>(this.windCov.bind(this), this.windCov_Length());
  _o.cloudCover = this.bb!.createScalarList<string>(this.cloudCover.bind(this), this.cloudCover_Length());
  _o.cloudHght = this.bb!.createScalarList<string>(this.cloudHght.bind(this), this.cloudHght_Length());
  _o.actWeather = this.actWeather();
  _o.weatherDesc = this.weatherDesc();
  _o.weatherInt = this.weatherInt();
  _o.rawMETAR = this.rawMetar();
  _o.rawTAF = this.rawTaf();
  _o.qnh = this.qnh();
  _o.visibility = this.visibility();
  _o.temperature = this.temperature();
  _o.soilTemp = this.soilTemp();
  _o.barPress = this.barPress();
  _o.precipRate = this.precipRate();
  _o.rainHour = this.rainHour();
  _o.solarRad = this.solarRad();
  _o.difRad = this.difRad();
  _o.refRad = this.refRad();
  _o.senlat = this.senlat();
  _o.senlon = this.senlon();
  _o.senalt = this.senalt();
  _o.dewPoint = this.dewPoint();
  _o.relHumidity = this.relHumidity();
  _o.indexRefraction = this.indexRefraction();
  _o.soilMoisture = this.soilMoisture();
  _o.surroundingWeather = this.surroundingWeather();
  _o.weatherAmp = this.weatherAmp();
  _o.contrailHghtLower = this.contrailHghtLower();
  _o.contrailHghtUpper = this.contrailHghtUpper();
  _o.icingUpperLimit = this.icingUpperLimit();
  _o.icingLowerLimit = this.icingLowerLimit();
  _o.enRouteWeather = this.enRouteWeather();
  _o.ccEvent = this.ccEvent();
  _o.srcTyps = this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTyps_Length());
  _o.srcIds = this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIds_Length());
  _o.origNetwork = this.origNetwork();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
}
}

export class WeatherReport_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public weatherId: string|Uint8Array|null = null,
  public idGroundImagery: string|Uint8Array|null = null,
  public idSite: string|Uint8Array|null = null,
  public idAirfield: string|Uint8Array|null = null,
  public icao: string|Uint8Array|null = null,
  public externalId: string|Uint8Array|null = null,
  public externalLocationId: string|Uint8Array|null = null,
  public reportType: string|Uint8Array|null = null,
  public obTime: string|Uint8Array|null = null,
  public forecastStartTime: string|Uint8Array|null = null,
  public forecastEndTime: string|Uint8Array|null = null,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public alt: number = 0.0,
  public geoPotentialAlt: number = 0.0,
  public dataLevel: string|Uint8Array|null = null,
  public area: string|Uint8Array|null = null,
  public atext: string|Uint8Array|null = null,
  public agjson: string|Uint8Array|null = null,
  public atype: string|Uint8Array|null = null,
  public andims: number = 0,
  public asrid: number = 0,
  public windSpd: number = 0.0,
  public windSpdAvg: number = 0.0,
  public windGust: number = 0.0,
  public windGust10: number = 0.0,
  public vshear: number = 0.0,
  public hshear: number = 0.0,
  public radVel: number = 0.0,
  public radVelBeam1: number = 0.0,
  public radVelBeam2: number = 0.0,
  public radVelBeam3: number = 0.0,
  public radVelBeam4: number = 0.0,
  public radVelBeam5: number = 0.0,
  public windDir: number = 0.0,
  public windDirAvg: number = 0.0,
  public windDirPeak: number = 0.0,
  public windDirPeak10: number = 0.0,
  public windChill: number = 0.0,
  public dirDev: number = 0.0,
  public windVar: boolean = false,
  public windCov: (string)[] = [],
  public cloudCover: (string)[] = [],
  public cloudHght: (string)[] = [],
  public actWeather: string|Uint8Array|null = null,
  public weatherDesc: string|Uint8Array|null = null,
  public weatherInt: string|Uint8Array|null = null,
  public rawMETAR: string|Uint8Array|null = null,
  public rawTAF: string|Uint8Array|null = null,
  public qnh: number = 0.0,
  public visibility: number = 0.0,
  public temperature: number = 0.0,
  public soilTemp: number = 0.0,
  public barPress: number = 0.0,
  public precipRate: number = 0.0,
  public rainHour: number = 0.0,
  public solarRad: number = 0.0,
  public difRad: number = 0.0,
  public refRad: number = 0.0,
  public senlat: number = 0.0,
  public senlon: number = 0.0,
  public senalt: number = 0.0,
  public dewPoint: number = 0.0,
  public relHumidity: number = 0.0,
  public indexRefraction: number = 0.0,
  public soilMoisture: number = 0.0,
  public surroundingWeather: string|Uint8Array|null = null,
  public weatherAmp: string|Uint8Array|null = null,
  public contrailHghtLower: number = 0.0,
  public contrailHghtUpper: number = 0.0,
  public icingUpperLimit: number = 0.0,
  public icingLowerLimit: number = 0.0,
  public enRouteWeather: string|Uint8Array|null = null,
  public ccEvent: boolean = false,
  public srcTyps: (string)[] = [],
  public srcIds: (string)[] = [],
  public origNetwork: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: WeatherReport_Full_dataMode_Enum = WeatherReport_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const weatherId = (this.weatherId !== null ? builder.createString(this.weatherId!) : 0);
  const idGroundImagery = (this.idGroundImagery !== null ? builder.createString(this.idGroundImagery!) : 0);
  const idSite = (this.idSite !== null ? builder.createString(this.idSite!) : 0);
  const idAirfield = (this.idAirfield !== null ? builder.createString(this.idAirfield!) : 0);
  const icao = (this.icao !== null ? builder.createString(this.icao!) : 0);
  const externalId = (this.externalId !== null ? builder.createString(this.externalId!) : 0);
  const externalLocationId = (this.externalLocationId !== null ? builder.createString(this.externalLocationId!) : 0);
  const reportType = (this.reportType !== null ? builder.createString(this.reportType!) : 0);
  const obTime = (this.obTime !== null ? builder.createString(this.obTime!) : 0);
  const forecastStartTime = (this.forecastStartTime !== null ? builder.createString(this.forecastStartTime!) : 0);
  const forecastEndTime = (this.forecastEndTime !== null ? builder.createString(this.forecastEndTime!) : 0);
  const dataLevel = (this.dataLevel !== null ? builder.createString(this.dataLevel!) : 0);
  const area = (this.area !== null ? builder.createString(this.area!) : 0);
  const atext = (this.atext !== null ? builder.createString(this.atext!) : 0);
  const agjson = (this.agjson !== null ? builder.createString(this.agjson!) : 0);
  const atype = (this.atype !== null ? builder.createString(this.atype!) : 0);
  const windCov = WeatherReport_Full.createWindCovVector(builder, builder.createObjectOffsetList(this.windCov));
  const cloudCover = WeatherReport_Full.createCloudCoverVector(builder, builder.createObjectOffsetList(this.cloudCover));
  const cloudHght = WeatherReport_Full.createCloudHghtVector(builder, builder.createObjectOffsetList(this.cloudHght));
  const actWeather = (this.actWeather !== null ? builder.createString(this.actWeather!) : 0);
  const weatherDesc = (this.weatherDesc !== null ? builder.createString(this.weatherDesc!) : 0);
  const weatherInt = (this.weatherInt !== null ? builder.createString(this.weatherInt!) : 0);
  const rawMETAR = (this.rawMETAR !== null ? builder.createString(this.rawMETAR!) : 0);
  const rawTAF = (this.rawTAF !== null ? builder.createString(this.rawTAF!) : 0);
  const surroundingWeather = (this.surroundingWeather !== null ? builder.createString(this.surroundingWeather!) : 0);
  const weatherAmp = (this.weatherAmp !== null ? builder.createString(this.weatherAmp!) : 0);
  const enRouteWeather = (this.enRouteWeather !== null ? builder.createString(this.enRouteWeather!) : 0);
  const srcTyps = WeatherReport_Full.createSrcTypsVector(builder, builder.createObjectOffsetList(this.srcTyps));
  const srcIds = WeatherReport_Full.createSrcIdsVector(builder, builder.createObjectOffsetList(this.srcIds));
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);

  return WeatherReport_Full.createWeatherReport_Full(builder,
    id,
    classificationMarking,
    idSensor,
    origSensorId,
    weatherId,
    idGroundImagery,
    idSite,
    idAirfield,
    icao,
    externalId,
    externalLocationId,
    reportType,
    obTime,
    forecastStartTime,
    forecastEndTime,
    this.lat,
    this.lon,
    this.alt,
    this.geoPotentialAlt,
    dataLevel,
    area,
    atext,
    agjson,
    atype,
    this.andims,
    this.asrid,
    this.windSpd,
    this.windSpdAvg,
    this.windGust,
    this.windGust10,
    this.vshear,
    this.hshear,
    this.radVel,
    this.radVelBeam1,
    this.radVelBeam2,
    this.radVelBeam3,
    this.radVelBeam4,
    this.radVelBeam5,
    this.windDir,
    this.windDirAvg,
    this.windDirPeak,
    this.windDirPeak10,
    this.windChill,
    this.dirDev,
    this.windVar,
    windCov,
    cloudCover,
    cloudHght,
    actWeather,
    weatherDesc,
    weatherInt,
    rawMETAR,
    rawTAF,
    this.qnh,
    this.visibility,
    this.temperature,
    this.soilTemp,
    this.barPress,
    this.precipRate,
    this.rainHour,
    this.solarRad,
    this.difRad,
    this.refRad,
    this.senlat,
    this.senlon,
    this.senalt,
    this.dewPoint,
    this.relHumidity,
    this.indexRefraction,
    this.soilMoisture,
    surroundingWeather,
    weatherAmp,
    this.contrailHghtLower,
    this.contrailHghtUpper,
    this.icingUpperLimit,
    this.icingLowerLimit,
    enRouteWeather,
    this.ccEvent,
    srcTyps,
    srcIds,
    origNetwork,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode
  );
}
}
