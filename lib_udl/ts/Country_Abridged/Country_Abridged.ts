// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Country_Abridged_dataMode_Enum } from './Country_Abridged_dataMode_Enum.js';


/**
 * /// A Country may represent countries, multi-national consortiums, and international organizations.
 */
export class Country_Abridged implements flatbuffers.IUnpackableObject<Country_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Country_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCountry_Abridged(bb:flatbuffers.ByteBuffer, obj?:Country_Abridged):Country_Abridged {
  return (obj || new Country_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCountry_Abridged(bb:flatbuffers.ByteBuffer, obj?:Country_Abridged):Country_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Country_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('COUN');
}

/**
 * The country code. Optimally, this value is the ISO 3166 Alpha-2-two-character country code, however it can represent various consortiums that do not appear in the ISO document.
 * Example: /// Example: US
 * Constraints: Minimum length = 1, Maximum length = 4
 */
code():string|null
code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Country name.
 * Example: /// Example: UNITED STATES
 * Constraints: Minimum length = 0, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Federal Information Processing Standard (FIPS) two-character country code. This field is used when the country code for FIPS differs from the country code for ISO-3166 value. For example, the ISO-3166 Alpha-2-country code for Vanuatu is VU, whereas Vanuatu's FIPS equivalent country code is NH.
 * Example: /// Example: US
 * Constraints: Minimum length = 0, Maximum length = 2
 */
fipsCode():string|null
fipsCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fipsCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ISO 3166 Alpha-3 country code. This is a three-character code that represents a country name, which may be more closely related to the country name than its corresponding Alpha-2 code.
 * Example: /// Example: USA
 * Constraints: Minimum length = 0, Maximum length = 3
 */
iso3Code():string|null
iso3Code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
iso3Code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * 3 Digit or other alternate country code.
 * Example: /// Example: US
 * Constraints: Minimum length = 0, Maximum length = 4
 */
codeAlt():string|null
codeAlt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
codeAlt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Country_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Country_Abridged_dataMode_Enum.REAL;
}

static startCountry_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, codeOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addFipsCode(builder:flatbuffers.Builder, fipsCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, fipsCodeOffset, 0);
}

static addIso3Code(builder:flatbuffers.Builder, iso3CodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, iso3CodeOffset, 0);
}

static addCodeAlt(builder:flatbuffers.Builder, codeAltOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, codeAltOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, sourceOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Country_Abridged_dataMode_Enum) {
  builder.addFieldInt8(9, dataMode, Country_Abridged_dataMode_Enum.REAL);
}

static endCountry_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCountry_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'COUN');
}

static finishSizePrefixedCountry_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'COUN', true);
}

static createCountry_Abridged(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, fipsCodeOffset:flatbuffers.Offset, iso3CodeOffset:flatbuffers.Offset, codeAltOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:Country_Abridged_dataMode_Enum):flatbuffers.Offset {
  Country_Abridged.startCountry_Abridged(builder);
  Country_Abridged.addCode(builder, codeOffset);
  Country_Abridged.addName(builder, nameOffset);
  Country_Abridged.addFipsCode(builder, fipsCodeOffset);
  Country_Abridged.addIso3Code(builder, iso3CodeOffset);
  Country_Abridged.addCodeAlt(builder, codeAltOffset);
  Country_Abridged.addCreatedAt(builder, createdAtOffset);
  Country_Abridged.addCreatedBy(builder, createdByOffset);
  Country_Abridged.addSource(builder, sourceOffset);
  Country_Abridged.addOrigNetwork(builder, origNetworkOffset);
  Country_Abridged.addDataMode(builder, dataMode);
  return Country_Abridged.endCountry_Abridged(builder);
}

unpack(): Country_AbridgedT {
  return new Country_AbridgedT(
    this.code(),
    this.name(),
    this.fipsCode(),
    this.iso3Code(),
    this.codeAlt(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: Country_AbridgedT): void {
  _o.code = this.code();
  _o.name = this.name();
  _o.fipsCode = this.fipsCode();
  _o.iso3Code = this.iso3Code();
  _o.codeAlt = this.codeAlt();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class Country_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public code: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public fipsCode: string|Uint8Array|null = null,
  public iso3Code: string|Uint8Array|null = null,
  public codeAlt: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: Country_Abridged_dataMode_Enum = Country_Abridged_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const code = (this.code !== null ? builder.createString(this.code!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const fipsCode = (this.fipsCode !== null ? builder.createString(this.fipsCode!) : 0);
  const iso3Code = (this.iso3Code !== null ? builder.createString(this.iso3Code!) : 0);
  const codeAlt = (this.codeAlt !== null ? builder.createString(this.codeAlt!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Country_Abridged.createCountry_Abridged(builder,
    code,
    name,
    fipsCode,
    iso3Code,
    codeAlt,
    createdAt,
    createdBy,
    source,
    origNetwork,
    this.dataMode
  );
}
}
