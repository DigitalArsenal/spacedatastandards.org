// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// The parts associated with this support item.
 */
export class LogisticsParts_Full implements flatbuffers.IUnpackableObject<LogisticsParts_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LogisticsParts_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLogisticsParts_Full(bb:flatbuffers.ByteBuffer, obj?:LogisticsParts_Full):LogisticsParts_Full {
  return (obj || new LogisticsParts_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLogisticsParts_Full(bb:flatbuffers.ByteBuffer, obj?:LogisticsParts_Full):LogisticsParts_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LogisticsParts_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('LOGI');
}

/**
 * Requested or supplied part number.
 * Example: /// Example: MS35338-42
 * Constraints: Minimum length = 0, Maximum length = 20
 */
partNumber():string|null
partNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
partNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The National Stock Number of the part being requested or supplied.
 * Example: /// Example: 5310-00-045-3299
 * Constraints: Minimum length = 0, Maximum length = 20
 */
nationalStockNumber():string|null
nationalStockNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nationalStockNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Code for a unit of measurement.
 * Example: /// Example: EA
 * Constraints: Minimum length = 0, Maximum length = 2
 */
measurementUnitCode():string|null
measurementUnitCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
measurementUnitCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Work Unit Code (WUC), or for some aircraft types, the Reference Designator.
 * Example: /// Example: 5611UU001
 * Constraints: Minimum length = 0, Maximum length = 10
 */
workUnitCode():string|null
workUnitCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
workUnitCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the specified Technical Order manual holding the aircraft information for use in diagnosing a problem or condition.
 * Example: /// Example: 1C-17A-4
 * Constraints: Minimum length = 0, Maximum length = 15
 */
technicalOrderText():string|null
technicalOrderText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
technicalOrderText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Technical order manual figure number for the requested / supplied part.
 * Example: /// Example: 3
 * Constraints: Minimum length = 0, Maximum length = 7
 */
figureNumber():string|null
figureNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
figureNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Technical order manual index number for the requested part.
 * Example: /// Example: 4
 * Constraints: Minimum length = 0, Maximum length = 4
 */
indexNumber():string|null
indexNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
indexNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The person who validated the request for parts.
 * Example: /// Example: JOHN SMITH
 * Constraints: Minimum length = 0, Maximum length = 25
 */
requestVerifier():string|null
requestVerifier(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
requestVerifier(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The person who validated that the sourced location has, and can supply, the requested parts.
 * Example: /// Example: JANE DOE
 * Constraints: Minimum length = 0, Maximum length = 25
 */
locationVerifier():string|null
locationVerifier(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
locationVerifier(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The supply document number.
 * Example: /// Example: J223FU31908300
 * Constraints: Minimum length = 0, Maximum length = 17
 */
supplyDocumentNumber():string|null
supplyDocumentNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
supplyDocumentNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The supply stocks for this support item.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
logisticsStocks(index: number):string
logisticsStocks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
logisticsStocks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

logisticsStocksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startLogisticsParts_Full(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addPartNumber(builder:flatbuffers.Builder, partNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, partNumberOffset, 0);
}

static addNationalStockNumber(builder:flatbuffers.Builder, nationalStockNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nationalStockNumberOffset, 0);
}

static addMeasurementUnitCode(builder:flatbuffers.Builder, measurementUnitCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, measurementUnitCodeOffset, 0);
}

static addWorkUnitCode(builder:flatbuffers.Builder, workUnitCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, workUnitCodeOffset, 0);
}

static addTechnicalOrderText(builder:flatbuffers.Builder, technicalOrderTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, technicalOrderTextOffset, 0);
}

static addFigureNumber(builder:flatbuffers.Builder, figureNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, figureNumberOffset, 0);
}

static addIndexNumber(builder:flatbuffers.Builder, indexNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, indexNumberOffset, 0);
}

static addRequestVerifier(builder:flatbuffers.Builder, requestVerifierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, requestVerifierOffset, 0);
}

static addLocationVerifier(builder:flatbuffers.Builder, locationVerifierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, locationVerifierOffset, 0);
}

static addSupplyDocumentNumber(builder:flatbuffers.Builder, supplyDocumentNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, supplyDocumentNumberOffset, 0);
}

static addLogisticsStocks(builder:flatbuffers.Builder, logisticsStocksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, logisticsStocksOffset, 0);
}

static createLogisticsStocksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLogisticsStocksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endLogisticsParts_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLogisticsParts_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI');
}

static finishSizePrefixedLogisticsParts_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI', true);
}

static createLogisticsParts_Full(builder:flatbuffers.Builder, partNumberOffset:flatbuffers.Offset, nationalStockNumberOffset:flatbuffers.Offset, measurementUnitCodeOffset:flatbuffers.Offset, workUnitCodeOffset:flatbuffers.Offset, technicalOrderTextOffset:flatbuffers.Offset, figureNumberOffset:flatbuffers.Offset, indexNumberOffset:flatbuffers.Offset, requestVerifierOffset:flatbuffers.Offset, locationVerifierOffset:flatbuffers.Offset, supplyDocumentNumberOffset:flatbuffers.Offset, logisticsStocksOffset:flatbuffers.Offset):flatbuffers.Offset {
  LogisticsParts_Full.startLogisticsParts_Full(builder);
  LogisticsParts_Full.addPartNumber(builder, partNumberOffset);
  LogisticsParts_Full.addNationalStockNumber(builder, nationalStockNumberOffset);
  LogisticsParts_Full.addMeasurementUnitCode(builder, measurementUnitCodeOffset);
  LogisticsParts_Full.addWorkUnitCode(builder, workUnitCodeOffset);
  LogisticsParts_Full.addTechnicalOrderText(builder, technicalOrderTextOffset);
  LogisticsParts_Full.addFigureNumber(builder, figureNumberOffset);
  LogisticsParts_Full.addIndexNumber(builder, indexNumberOffset);
  LogisticsParts_Full.addRequestVerifier(builder, requestVerifierOffset);
  LogisticsParts_Full.addLocationVerifier(builder, locationVerifierOffset);
  LogisticsParts_Full.addSupplyDocumentNumber(builder, supplyDocumentNumberOffset);
  LogisticsParts_Full.addLogisticsStocks(builder, logisticsStocksOffset);
  return LogisticsParts_Full.endLogisticsParts_Full(builder);
}

unpack(): LogisticsParts_FullT {
  return new LogisticsParts_FullT(
    this.partNumber(),
    this.nationalStockNumber(),
    this.measurementUnitCode(),
    this.workUnitCode(),
    this.technicalOrderText(),
    this.figureNumber(),
    this.indexNumber(),
    this.requestVerifier(),
    this.locationVerifier(),
    this.supplyDocumentNumber(),
    this.bb!.createScalarList<string>(this.logisticsStocks.bind(this), this.logisticsStocksLength())
  );
}


unpackTo(_o: LogisticsParts_FullT): void {
  _o.partNumber = this.partNumber();
  _o.nationalStockNumber = this.nationalStockNumber();
  _o.measurementUnitCode = this.measurementUnitCode();
  _o.workUnitCode = this.workUnitCode();
  _o.technicalOrderText = this.technicalOrderText();
  _o.figureNumber = this.figureNumber();
  _o.indexNumber = this.indexNumber();
  _o.requestVerifier = this.requestVerifier();
  _o.locationVerifier = this.locationVerifier();
  _o.supplyDocumentNumber = this.supplyDocumentNumber();
  _o.logisticsStocks = this.bb!.createScalarList<string>(this.logisticsStocks.bind(this), this.logisticsStocksLength());
}
}

export class LogisticsParts_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public partNumber: string|Uint8Array|null = null,
  public nationalStockNumber: string|Uint8Array|null = null,
  public measurementUnitCode: string|Uint8Array|null = null,
  public workUnitCode: string|Uint8Array|null = null,
  public technicalOrderText: string|Uint8Array|null = null,
  public figureNumber: string|Uint8Array|null = null,
  public indexNumber: string|Uint8Array|null = null,
  public requestVerifier: string|Uint8Array|null = null,
  public locationVerifier: string|Uint8Array|null = null,
  public supplyDocumentNumber: string|Uint8Array|null = null,
  public logisticsStocks: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const partNumber = (this.partNumber !== null ? builder.createString(this.partNumber!) : 0);
  const nationalStockNumber = (this.nationalStockNumber !== null ? builder.createString(this.nationalStockNumber!) : 0);
  const measurementUnitCode = (this.measurementUnitCode !== null ? builder.createString(this.measurementUnitCode!) : 0);
  const workUnitCode = (this.workUnitCode !== null ? builder.createString(this.workUnitCode!) : 0);
  const technicalOrderText = (this.technicalOrderText !== null ? builder.createString(this.technicalOrderText!) : 0);
  const figureNumber = (this.figureNumber !== null ? builder.createString(this.figureNumber!) : 0);
  const indexNumber = (this.indexNumber !== null ? builder.createString(this.indexNumber!) : 0);
  const requestVerifier = (this.requestVerifier !== null ? builder.createString(this.requestVerifier!) : 0);
  const locationVerifier = (this.locationVerifier !== null ? builder.createString(this.locationVerifier!) : 0);
  const supplyDocumentNumber = (this.supplyDocumentNumber !== null ? builder.createString(this.supplyDocumentNumber!) : 0);
  const logisticsStocks = LogisticsParts_Full.createLogisticsStocksVector(builder, builder.createObjectOffsetList(this.logisticsStocks));

  return LogisticsParts_Full.createLogisticsParts_Full(builder,
    partNumber,
    nationalStockNumber,
    measurementUnitCode,
    workUnitCode,
    technicalOrderText,
    figureNumber,
    indexNumber,
    requestVerifier,
    locationVerifier,
    supplyDocumentNumber,
    logisticsStocks
  );
}
}
