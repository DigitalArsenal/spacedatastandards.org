// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LogisticsSupport_Ingest_dataMode_Enum } from './logistics-support-ingest-data-mode-enum.js';


/**
 * /// Comprehensive logistical details concerning the planned support of maintenance operations required by an aircraft, including transportation information, supplies coordination, and service personnel.
 */
export class LogisticsSupport_Ingest implements flatbuffers.IUnpackableObject<LogisticsSupport_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LogisticsSupport_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLogisticsSupport_Ingest(bb:flatbuffers.ByteBuffer, obj?:LogisticsSupport_Ingest):LogisticsSupport_Ingest {
  return (obj || new LogisticsSupport_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLogisticsSupport_Ingest(bb:flatbuffers.ByteBuffer, obj?:LogisticsSupport_Ingest):LogisticsSupport_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LogisticsSupport_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('LOGI');
}

/**
 * Unique identifier of the record, auto-generated by the system if not provided on create operations.
 * Example: /// Example: LOGISTICS-SUPPORT-DETAILS UUID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional system identifier from external systs. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: GDSSBL012307131347070165
 * Constraints: Minimum length = 0, Maximum length = 24
 */
extSystemId():string|null
extSystemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
extSystemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The tail number of the aircraft that is the subject of this LogisticsSupportDetails record.
 * Example: /// Example: 99290
 * Constraints: Minimum length = 0, Maximum length = 7
 */
tailNumber():string|null
tailNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tailNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
 * Example: /// Example: CO17A
 * Constraints: Minimum length = 0, Maximum length = 8
 */
aircraftMds():string|null
aircraftMds(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aircraftMds(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The current ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
 * Example: /// Example: KCOS
 * Constraints: Minimum length = 0, Maximum length = 4
 */
currIcao():string|null
currIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The supplying ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
 * Example: /// Example: KCOS
 * Constraints: Minimum length = 0, Maximum length = 4
 */
suppIcao():string|null
suppIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
suppIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time this report was created, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-13T13:47:00.123Z
 * Constraints: No constraints specified.
 */
rptCreatedTime():string|null
rptCreatedTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rptCreatedTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time this report was closed, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-13T13:47:00.123Z
 * Constraints: No constraints specified.
 */
rptClosedTime():string|null
rptClosedTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rptClosedTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time indicating when a given aircraft breaks for a mission essential reason. This datetime should be in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-13T13:47:00.123Z
 * Constraints: No constraints specified.
 */
meTime():string|null
meTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
meTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time indicating when all mission essential problems with a given aircraft have been fixed and is mission capable. This datetime should be in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-13T13:47:00.123Z
 * Constraints: No constraints specified.
 */
mcTime():string|null
mcTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mcTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * This field identifies the pacing event for bringing the aircraft to Mission Capable status.  It is used in calculating the Estimated Time Mission Capable (ETMC) value.  Acceptable values are WA (Will Advise), INW (In Work), P+hhh.h (where P=parts and hhh.h is the number of hours up to 999 plus tenths of hours), EQ+hhh.h (EQ=equipment), MRT+hhh.h (MRT=maintenance recovery team).
 * Example: /// Example: WA
 * Constraints: Minimum length = 0, Maximum length = 9
 */
logisticAction():string|null
logisticAction(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
logisticAction(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The identifier that represents a Logistics Master Record.
 * Example: /// Example: L62017
 * Constraints: Minimum length = 0, Maximum length = 6
 */
logisticsRecordId():string|null
logisticsRecordId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
logisticsRecordId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The estimated time mission capable for the aircraft, in ISO 8601 UCT format with millisecond precision. This is the estimated time when the aircraft is mission ready.
 * Example: /// Example: 2023-07-13T13:47:00.123Z
 * Constraints: No constraints specified.
 */
etic():string|null
etic(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
etic(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Logistics estimated time mission capable.
 * Example: /// Example: 2023-07-13T13:47:00.123Z
 * Constraints: No constraints specified.
 */
etmc():string|null
etmc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
etmc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The maintenance status code of the aircraft which may be based on pilot descriptions or evaluation codes. Contact the source provider for details.
 * Example: /// Example: NMCMU
 * Constraints: Minimum length = 0, Maximum length = 6
 */
maintStatusCode():string|null
maintStatusCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
maintStatusCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * This is used to indicate whether a closed master record has been reopened.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
reopenFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The organization that owns this logistics record.
 * Example: /// Example: EXAMPLE_OWNER
 * Constraints: Minimum length = 0, Maximum length = 250
 */
owner():string|null
owner(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
owner(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Remarks associated with this LogisticsSupport record.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
logisticsRemarks(index: number):string
logisticsRemarks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
logisticsRemarks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

logisticsRemarksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Discrepancy information associated with this LogisticsSupport record.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
logisticsDiscrepancyInfos(index: number):string
logisticsDiscrepancyInfos(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
logisticsDiscrepancyInfos(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

logisticsDiscrepancyInfosLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
logisticsTransportationPlans(index: number):string
logisticsTransportationPlans(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
logisticsTransportationPlans(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

logisticsTransportationPlansLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Support items associated with this LogisticsSupport record.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
logisticsSupportItems(index: number):string
logisticsSupportItems(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
logisticsSupportItems(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

logisticsSupportItemsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():LogisticsSupport_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : LogisticsSupport_Ingest_dataMode_Enum.REAL;
}

static startLogisticsSupport_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(30);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addExtSystemId(builder:flatbuffers.Builder, extSystemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, extSystemIdOffset, 0);
}

static addTailNumber(builder:flatbuffers.Builder, tailNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, tailNumberOffset, 0);
}

static addAircraftMds(builder:flatbuffers.Builder, aircraftMdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, aircraftMdsOffset, 0);
}

static addCurrIcao(builder:flatbuffers.Builder, currIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, currIcaoOffset, 0);
}

static addSuppIcao(builder:flatbuffers.Builder, suppIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, suppIcaoOffset, 0);
}

static addRptCreatedTime(builder:flatbuffers.Builder, rptCreatedTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, rptCreatedTimeOffset, 0);
}

static addRptClosedTime(builder:flatbuffers.Builder, rptClosedTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, rptClosedTimeOffset, 0);
}

static addMeTime(builder:flatbuffers.Builder, meTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, meTimeOffset, 0);
}

static addMcTime(builder:flatbuffers.Builder, mcTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, mcTimeOffset, 0);
}

static addLogisticAction(builder:flatbuffers.Builder, logisticActionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, logisticActionOffset, 0);
}

static addLogisticsRecordId(builder:flatbuffers.Builder, logisticsRecordIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, logisticsRecordIdOffset, 0);
}

static addEtic(builder:flatbuffers.Builder, eticOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, eticOffset, 0);
}

static addEtmc(builder:flatbuffers.Builder, etmcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, etmcOffset, 0);
}

static addMaintStatusCode(builder:flatbuffers.Builder, maintStatusCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, maintStatusCodeOffset, 0);
}

static addReopenFlag(builder:flatbuffers.Builder, reopenFlag:boolean) {
  builder.addFieldInt8(16, +reopenFlag, +false);
}

static addOwner(builder:flatbuffers.Builder, ownerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, ownerOffset, 0);
}

static addLogisticsRemarks(builder:flatbuffers.Builder, logisticsRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, logisticsRemarksOffset, 0);
}

static createLogisticsRemarksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLogisticsRemarksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLogisticsDiscrepancyInfos(builder:flatbuffers.Builder, logisticsDiscrepancyInfosOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, logisticsDiscrepancyInfosOffset, 0);
}

static createLogisticsDiscrepancyInfosVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLogisticsDiscrepancyInfosVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLogisticsTransportationPlans(builder:flatbuffers.Builder, logisticsTransportationPlansOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, logisticsTransportationPlansOffset, 0);
}

static createLogisticsTransportationPlansVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLogisticsTransportationPlansVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLogisticsSupportItems(builder:flatbuffers.Builder, logisticsSupportItemsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, logisticsSupportItemsOffset, 0);
}

static createLogisticsSupportItemsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLogisticsSupportItemsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, origNetworkOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, updatedByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:LogisticsSupport_Ingest_dataMode_Enum) {
  builder.addFieldInt8(29, dataMode, LogisticsSupport_Ingest_dataMode_Enum.REAL);
}

static endLogisticsSupport_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLogisticsSupport_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI');
}

static finishSizePrefixedLogisticsSupport_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI', true);
}

static createLogisticsSupport_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, extSystemIdOffset:flatbuffers.Offset, tailNumberOffset:flatbuffers.Offset, aircraftMdsOffset:flatbuffers.Offset, currIcaoOffset:flatbuffers.Offset, suppIcaoOffset:flatbuffers.Offset, rptCreatedTimeOffset:flatbuffers.Offset, rptClosedTimeOffset:flatbuffers.Offset, meTimeOffset:flatbuffers.Offset, mcTimeOffset:flatbuffers.Offset, logisticActionOffset:flatbuffers.Offset, logisticsRecordIdOffset:flatbuffers.Offset, eticOffset:flatbuffers.Offset, etmcOffset:flatbuffers.Offset, maintStatusCodeOffset:flatbuffers.Offset, reopenFlag:boolean, ownerOffset:flatbuffers.Offset, logisticsRemarksOffset:flatbuffers.Offset, logisticsDiscrepancyInfosOffset:flatbuffers.Offset, logisticsTransportationPlansOffset:flatbuffers.Offset, logisticsSupportItemsOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:LogisticsSupport_Ingest_dataMode_Enum):flatbuffers.Offset {
  LogisticsSupport_Ingest.startLogisticsSupport_Ingest(builder);
  LogisticsSupport_Ingest.addId(builder, idOffset);
  LogisticsSupport_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  LogisticsSupport_Ingest.addExtSystemId(builder, extSystemIdOffset);
  LogisticsSupport_Ingest.addTailNumber(builder, tailNumberOffset);
  LogisticsSupport_Ingest.addAircraftMds(builder, aircraftMdsOffset);
  LogisticsSupport_Ingest.addCurrIcao(builder, currIcaoOffset);
  LogisticsSupport_Ingest.addSuppIcao(builder, suppIcaoOffset);
  LogisticsSupport_Ingest.addRptCreatedTime(builder, rptCreatedTimeOffset);
  LogisticsSupport_Ingest.addRptClosedTime(builder, rptClosedTimeOffset);
  LogisticsSupport_Ingest.addMeTime(builder, meTimeOffset);
  LogisticsSupport_Ingest.addMcTime(builder, mcTimeOffset);
  LogisticsSupport_Ingest.addLogisticAction(builder, logisticActionOffset);
  LogisticsSupport_Ingest.addLogisticsRecordId(builder, logisticsRecordIdOffset);
  LogisticsSupport_Ingest.addEtic(builder, eticOffset);
  LogisticsSupport_Ingest.addEtmc(builder, etmcOffset);
  LogisticsSupport_Ingest.addMaintStatusCode(builder, maintStatusCodeOffset);
  LogisticsSupport_Ingest.addReopenFlag(builder, reopenFlag);
  LogisticsSupport_Ingest.addOwner(builder, ownerOffset);
  LogisticsSupport_Ingest.addLogisticsRemarks(builder, logisticsRemarksOffset);
  LogisticsSupport_Ingest.addLogisticsDiscrepancyInfos(builder, logisticsDiscrepancyInfosOffset);
  LogisticsSupport_Ingest.addLogisticsTransportationPlans(builder, logisticsTransportationPlansOffset);
  LogisticsSupport_Ingest.addLogisticsSupportItems(builder, logisticsSupportItemsOffset);
  LogisticsSupport_Ingest.addOrigNetwork(builder, origNetworkOffset);
  LogisticsSupport_Ingest.addCreatedAt(builder, createdAtOffset);
  LogisticsSupport_Ingest.addCreatedBy(builder, createdByOffset);
  LogisticsSupport_Ingest.addUpdatedAt(builder, updatedAtOffset);
  LogisticsSupport_Ingest.addUpdatedBy(builder, updatedByOffset);
  LogisticsSupport_Ingest.addSource(builder, sourceOffset);
  LogisticsSupport_Ingest.addOrigin(builder, originOffset);
  LogisticsSupport_Ingest.addDataMode(builder, dataMode);
  return LogisticsSupport_Ingest.endLogisticsSupport_Ingest(builder);
}

unpack(): LogisticsSupport_IngestT {
  return new LogisticsSupport_IngestT(
    this.id(),
    this.classificationMarking(),
    this.extSystemId(),
    this.tailNumber(),
    this.aircraftMds(),
    this.currIcao(),
    this.suppIcao(),
    this.rptCreatedTime(),
    this.rptClosedTime(),
    this.meTime(),
    this.mcTime(),
    this.logisticAction(),
    this.logisticsRecordId(),
    this.etic(),
    this.etmc(),
    this.maintStatusCode(),
    this.reopenFlag(),
    this.owner(),
    this.bb!.createScalarList<string>(this.logisticsRemarks.bind(this), this.logisticsRemarks_Length()),
    this.bb!.createScalarList<string>(this.logisticsDiscrepancyInfos.bind(this), this.logisticsDiscrepancyInfos_Length()),
    this.bb!.createScalarList<string>(this.logisticsTransportationPlans.bind(this), this.logisticsTransportationPlans_Length()),
    this.bb!.createScalarList<string>(this.logisticsSupportItems.bind(this), this.logisticsSupportItems_Length()),
    this.origNetwork(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.source(),
    this.origin(),
    this.dataMode()
  );
}


unpackTo(_o: LogisticsSupport_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.extSystemId = this.extSystemId();
  _o.tailNumber = this.tailNumber();
  _o.aircraftMDS = this.aircraftMds();
  _o.currICAO = this.currIcao();
  _o.suppICAO = this.suppIcao();
  _o.rptCreatedTime = this.rptCreatedTime();
  _o.rptClosedTime = this.rptClosedTime();
  _o.meTime = this.meTime();
  _o.mcTime = this.mcTime();
  _o.logisticAction = this.logisticAction();
  _o.logisticsRecordId = this.logisticsRecordId();
  _o.etic = this.etic();
  _o.etmc = this.etmc();
  _o.maintStatusCode = this.maintStatusCode();
  _o.reopenFlag = this.reopenFlag();
  _o.owner = this.owner();
  _o.logisticsRemarks = this.bb!.createScalarList<string>(this.logisticsRemarks.bind(this), this.logisticsRemarks_Length());
  _o.logisticsDiscrepancyInfos = this.bb!.createScalarList<string>(this.logisticsDiscrepancyInfos.bind(this), this.logisticsDiscrepancyInfos_Length());
  _o.logisticsTransportationPlans = this.bb!.createScalarList<string>(this.logisticsTransportationPlans.bind(this), this.logisticsTransportationPlans_Length());
  _o.logisticsSupportItems = this.bb!.createScalarList<string>(this.logisticsSupportItems.bind(this), this.logisticsSupportItems_Length());
  _o.origNetwork = this.origNetwork();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
}
}

export class LogisticsSupport_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public extSystemId: string|Uint8Array|null = null,
  public tailNumber: string|Uint8Array|null = null,
  public aircraftMDS: string|Uint8Array|null = null,
  public currICAO: string|Uint8Array|null = null,
  public suppICAO: string|Uint8Array|null = null,
  public rptCreatedTime: string|Uint8Array|null = null,
  public rptClosedTime: string|Uint8Array|null = null,
  public meTime: string|Uint8Array|null = null,
  public mcTime: string|Uint8Array|null = null,
  public logisticAction: string|Uint8Array|null = null,
  public logisticsRecordId: string|Uint8Array|null = null,
  public etic: string|Uint8Array|null = null,
  public etmc: string|Uint8Array|null = null,
  public maintStatusCode: string|Uint8Array|null = null,
  public reopenFlag: boolean = false,
  public owner: string|Uint8Array|null = null,
  public logisticsRemarks: (string)[] = [],
  public logisticsDiscrepancyInfos: (string)[] = [],
  public logisticsTransportationPlans: (string)[] = [],
  public logisticsSupportItems: (string)[] = [],
  public origNetwork: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: LogisticsSupport_Ingest_dataMode_Enum = LogisticsSupport_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const extSystemId = (this.extSystemId !== null ? builder.createString(this.extSystemId!) : 0);
  const tailNumber = (this.tailNumber !== null ? builder.createString(this.tailNumber!) : 0);
  const aircraftMDS = (this.aircraftMDS !== null ? builder.createString(this.aircraftMDS!) : 0);
  const currICAO = (this.currICAO !== null ? builder.createString(this.currICAO!) : 0);
  const suppICAO = (this.suppICAO !== null ? builder.createString(this.suppICAO!) : 0);
  const rptCreatedTime = (this.rptCreatedTime !== null ? builder.createString(this.rptCreatedTime!) : 0);
  const rptClosedTime = (this.rptClosedTime !== null ? builder.createString(this.rptClosedTime!) : 0);
  const meTime = (this.meTime !== null ? builder.createString(this.meTime!) : 0);
  const mcTime = (this.mcTime !== null ? builder.createString(this.mcTime!) : 0);
  const logisticAction = (this.logisticAction !== null ? builder.createString(this.logisticAction!) : 0);
  const logisticsRecordId = (this.logisticsRecordId !== null ? builder.createString(this.logisticsRecordId!) : 0);
  const etic = (this.etic !== null ? builder.createString(this.etic!) : 0);
  const etmc = (this.etmc !== null ? builder.createString(this.etmc!) : 0);
  const maintStatusCode = (this.maintStatusCode !== null ? builder.createString(this.maintStatusCode!) : 0);
  const owner = (this.owner !== null ? builder.createString(this.owner!) : 0);
  const logisticsRemarks = LogisticsSupport_Ingest.createLogisticsRemarksVector(builder, builder.createObjectOffsetList(this.logisticsRemarks));
  const logisticsDiscrepancyInfos = LogisticsSupport_Ingest.createLogisticsDiscrepancyInfosVector(builder, builder.createObjectOffsetList(this.logisticsDiscrepancyInfos));
  const logisticsTransportationPlans = LogisticsSupport_Ingest.createLogisticsTransportationPlansVector(builder, builder.createObjectOffsetList(this.logisticsTransportationPlans));
  const logisticsSupportItems = LogisticsSupport_Ingest.createLogisticsSupportItemsVector(builder, builder.createObjectOffsetList(this.logisticsSupportItems));
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);

  return LogisticsSupport_Ingest.createLogisticsSupport_Ingest(builder,
    id,
    classificationMarking,
    extSystemId,
    tailNumber,
    aircraftMDS,
    currICAO,
    suppICAO,
    rptCreatedTime,
    rptClosedTime,
    meTime,
    mcTime,
    logisticAction,
    logisticsRecordId,
    etic,
    etmc,
    maintStatusCode,
    this.reopenFlag,
    owner,
    logisticsRemarks,
    logisticsDiscrepancyInfos,
    logisticsTransportationPlans,
    logisticsSupportItems,
    origNetwork,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    source,
    origin,
    this.dataMode
  );
}
}
