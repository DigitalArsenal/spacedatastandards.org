// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ECPSDR_Full_dataMode_Enum } from './ECPSDR_Full_dataMode_Enum.js';


/**
 * /// Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.
 */
export class ECPSDR_Full implements flatbuffers.IUnpackableObject<ECPSDR_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ECPSDR_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsECPSDR_Full(bb:flatbuffers.ByteBuffer, obj?:ECPSDR_Full):ECPSDR_Full {
  return (obj || new ECPSDR_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsECPSDR_Full(bb:flatbuffers.ByteBuffer, obj?:ECPSDR_Full):ECPSDR_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ECPSDR_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ECPS');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: ECPSDR-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the on-orbit satellite hosting the sensor.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the on-orbit satellite hosting the sensor.
 * Example: /// Example: 101
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the reporting sensor.
 * Example: /// Example: SENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of data associated with this record (STANDARD, TRANSIENT).
 * Example: /// Example: STANDARD
 * Constraints: Minimum length = 1, Maximum length = 12
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
msgTime():string|null
msgTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of the observation, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
obTime():string|null
obTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
retransmit():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The sensor mode associated with this measurements (NORMAL, TEST).
 * Example: /// Example: TEST
 * Constraints: Minimum length = 0, Maximum length = 12
 */
senMode():string|null
senMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
senMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
dosBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
asl5VcurrMon():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
dsl5VcurrMon():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Power supply temperature monitor.  This is sensor status telemetry.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
psTempMon():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
cdsPlateVmon():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * CDS reference voltage monitor.  See vRef for conversion factor to Volts.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
cdsRefVmon():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Unitless sensor mounting plate temperature.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
mpTemp():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
vRef():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Photodiode 1 signal level.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
pd1SigLev():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Photodiode 2 signal level.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
pd2SigLev():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of ESD triggers, low byte of 2-byte counter.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
esdTrigCountL():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of ESD triggers, high byte of 2-byte counter.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
esdTrigCountH():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
lowLetL():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
lowLetM():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
medLet1L():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
medLet1M():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
medLet2L():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
medLet2M():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
medLet3L():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
medLet3M():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
medLet4L():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
medLet4M():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
hiLetL():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
hiLetM():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
surfDosL():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
surfDosM():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
surfDosH():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
surfDosChargeL():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
surfDosChargeH():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Surface dosimeter status byte.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
surfDosStat():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * CDS throttle number of seconds between CDS transient capture readouts.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
cdsThrottle():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
cdsThreshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
checksum():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array of 144 digitized samples of ESD waveform for transient packets.
 * Example: /// Example: [1, 2, 3]
 * Constraints: No constraints specified.
 */
transientData(index: number):string
transientData(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
transientData(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

transientDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was last updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():ECPSDR_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ECPSDR_Full_dataMode_Enum.REAL;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
onOrbit():string|null
onOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
onOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startECPSDR_Full(builder:flatbuffers.Builder) {
  builder.startObject(55);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(3, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, origObjectIdOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idSensorOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, origSensorIdOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, typeOffset, 0);
}

static addMsgTime(builder:flatbuffers.Builder, msgTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, msgTimeOffset, 0);
}

static addObTime(builder:flatbuffers.Builder, obTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, obTimeOffset, 0);
}

static addRetransmit(builder:flatbuffers.Builder, retransmit:boolean) {
  builder.addFieldInt8(10, +retransmit, +false);
}

static addSenMode(builder:flatbuffers.Builder, senModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, senModeOffset, 0);
}

static addDosBias(builder:flatbuffers.Builder, dosBias:number) {
  builder.addFieldInt32(12, dosBias, 0);
}

static addAsl5VcurrMon(builder:flatbuffers.Builder, asl5VcurrMon:number) {
  builder.addFieldInt32(13, asl5VcurrMon, 0);
}

static addDsl5VcurrMon(builder:flatbuffers.Builder, dsl5VcurrMon:number) {
  builder.addFieldInt32(14, dsl5VcurrMon, 0);
}

static addPsTempMon(builder:flatbuffers.Builder, psTempMon:number) {
  builder.addFieldInt32(15, psTempMon, 0);
}

static addCdsPlateVmon(builder:flatbuffers.Builder, cdsPlateVmon:number) {
  builder.addFieldInt32(16, cdsPlateVmon, 0);
}

static addCdsRefVmon(builder:flatbuffers.Builder, cdsRefVmon:number) {
  builder.addFieldInt32(17, cdsRefVmon, 0);
}

static addMpTemp(builder:flatbuffers.Builder, mpTemp:number) {
  builder.addFieldInt32(18, mpTemp, 0);
}

static addVRef(builder:flatbuffers.Builder, vRef:number) {
  builder.addFieldInt32(19, vRef, 0);
}

static addPd1SigLev(builder:flatbuffers.Builder, pd1SigLev:number) {
  builder.addFieldInt32(20, pd1SigLev, 0);
}

static addPd2SigLev(builder:flatbuffers.Builder, pd2SigLev:number) {
  builder.addFieldInt32(21, pd2SigLev, 0);
}

static addEsdTrigCountL(builder:flatbuffers.Builder, esdTrigCountL:number) {
  builder.addFieldInt32(22, esdTrigCountL, 0);
}

static addEsdTrigCountH(builder:flatbuffers.Builder, esdTrigCountH:number) {
  builder.addFieldInt32(23, esdTrigCountH, 0);
}

static addLowLetL(builder:flatbuffers.Builder, lowLetL:number) {
  builder.addFieldInt32(24, lowLetL, 0);
}

static addLowLetM(builder:flatbuffers.Builder, lowLetM:number) {
  builder.addFieldInt32(25, lowLetM, 0);
}

static addMedLet1L(builder:flatbuffers.Builder, medLet1L:number) {
  builder.addFieldInt32(26, medLet1L, 0);
}

static addMedLet1M(builder:flatbuffers.Builder, medLet1M:number) {
  builder.addFieldInt32(27, medLet1M, 0);
}

static addMedLet2L(builder:flatbuffers.Builder, medLet2L:number) {
  builder.addFieldInt32(28, medLet2L, 0);
}

static addMedLet2M(builder:flatbuffers.Builder, medLet2M:number) {
  builder.addFieldInt32(29, medLet2M, 0);
}

static addMedLet3L(builder:flatbuffers.Builder, medLet3L:number) {
  builder.addFieldInt32(30, medLet3L, 0);
}

static addMedLet3M(builder:flatbuffers.Builder, medLet3M:number) {
  builder.addFieldInt32(31, medLet3M, 0);
}

static addMedLet4L(builder:flatbuffers.Builder, medLet4L:number) {
  builder.addFieldInt32(32, medLet4L, 0);
}

static addMedLet4M(builder:flatbuffers.Builder, medLet4M:number) {
  builder.addFieldInt32(33, medLet4M, 0);
}

static addHiLetL(builder:flatbuffers.Builder, hiLetL:number) {
  builder.addFieldInt32(34, hiLetL, 0);
}

static addHiLetM(builder:flatbuffers.Builder, hiLetM:number) {
  builder.addFieldInt32(35, hiLetM, 0);
}

static addSurfDosL(builder:flatbuffers.Builder, surfDosL:number) {
  builder.addFieldInt32(36, surfDosL, 0);
}

static addSurfDosM(builder:flatbuffers.Builder, surfDosM:number) {
  builder.addFieldInt32(37, surfDosM, 0);
}

static addSurfDosH(builder:flatbuffers.Builder, surfDosH:number) {
  builder.addFieldInt32(38, surfDosH, 0);
}

static addSurfDosChargeL(builder:flatbuffers.Builder, surfDosChargeL:number) {
  builder.addFieldInt32(39, surfDosChargeL, 0);
}

static addSurfDosChargeH(builder:flatbuffers.Builder, surfDosChargeH:number) {
  builder.addFieldInt32(40, surfDosChargeH, 0);
}

static addSurfDosStat(builder:flatbuffers.Builder, surfDosStat:number) {
  builder.addFieldInt32(41, surfDosStat, 0);
}

static addCdsThrottle(builder:flatbuffers.Builder, cdsThrottle:number) {
  builder.addFieldInt32(42, cdsThrottle, 0);
}

static addCdsThreshold(builder:flatbuffers.Builder, cdsThreshold:number) {
  builder.addFieldInt32(43, cdsThreshold, 0);
}

static addChecksum(builder:flatbuffers.Builder, checksum:number) {
  builder.addFieldInt32(44, checksum, 0);
}

static addTransientData(builder:flatbuffers.Builder, transientDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, transientDataOffset, 0);
}

static createTransientDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTransientDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, updatedByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:ECPSDR_Full_dataMode_Enum) {
  builder.addFieldInt8(53, dataMode, ECPSDR_Full_dataMode_Enum.REAL);
}

static addOnOrbit(builder:flatbuffers.Builder, onOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, onOrbitOffset, 0);
}

static endECPSDR_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishECPSDR_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ECPS');
}

static finishSizePrefixedECPSDR_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ECPS', true);
}

static createECPSDR_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, msgTimeOffset:flatbuffers.Offset, obTimeOffset:flatbuffers.Offset, retransmit:boolean, senModeOffset:flatbuffers.Offset, dosBias:number, asl5VcurrMon:number, dsl5VcurrMon:number, psTempMon:number, cdsPlateVmon:number, cdsRefVmon:number, mpTemp:number, vRef:number, pd1SigLev:number, pd2SigLev:number, esdTrigCountL:number, esdTrigCountH:number, lowLetL:number, lowLetM:number, medLet1L:number, medLet1M:number, medLet2L:number, medLet2M:number, medLet3L:number, medLet3M:number, medLet4L:number, medLet4M:number, hiLetL:number, hiLetM:number, surfDosL:number, surfDosM:number, surfDosH:number, surfDosChargeL:number, surfDosChargeH:number, surfDosStat:number, cdsThrottle:number, cdsThreshold:number, checksum:number, transientDataOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:ECPSDR_Full_dataMode_Enum, onOrbitOffset:flatbuffers.Offset):flatbuffers.Offset {
  ECPSDR_Full.startECPSDR_Full(builder);
  ECPSDR_Full.addId(builder, idOffset);
  ECPSDR_Full.addClassificationMarking(builder, classificationMarkingOffset);
  ECPSDR_Full.addIdOnOrbit(builder, idOnOrbitOffset);
  ECPSDR_Full.addSatNo(builder, satNo);
  ECPSDR_Full.addOrigObjectId(builder, origObjectIdOffset);
  ECPSDR_Full.addIdSensor(builder, idSensorOffset);
  ECPSDR_Full.addOrigSensorId(builder, origSensorIdOffset);
  ECPSDR_Full.addType(builder, typeOffset);
  ECPSDR_Full.addMsgTime(builder, msgTimeOffset);
  ECPSDR_Full.addObTime(builder, obTimeOffset);
  ECPSDR_Full.addRetransmit(builder, retransmit);
  ECPSDR_Full.addSenMode(builder, senModeOffset);
  ECPSDR_Full.addDosBias(builder, dosBias);
  ECPSDR_Full.addAsl5VcurrMon(builder, asl5VcurrMon);
  ECPSDR_Full.addDsl5VcurrMon(builder, dsl5VcurrMon);
  ECPSDR_Full.addPsTempMon(builder, psTempMon);
  ECPSDR_Full.addCdsPlateVmon(builder, cdsPlateVmon);
  ECPSDR_Full.addCdsRefVmon(builder, cdsRefVmon);
  ECPSDR_Full.addMpTemp(builder, mpTemp);
  ECPSDR_Full.addVRef(builder, vRef);
  ECPSDR_Full.addPd1SigLev(builder, pd1SigLev);
  ECPSDR_Full.addPd2SigLev(builder, pd2SigLev);
  ECPSDR_Full.addEsdTrigCountL(builder, esdTrigCountL);
  ECPSDR_Full.addEsdTrigCountH(builder, esdTrigCountH);
  ECPSDR_Full.addLowLetL(builder, lowLetL);
  ECPSDR_Full.addLowLetM(builder, lowLetM);
  ECPSDR_Full.addMedLet1L(builder, medLet1L);
  ECPSDR_Full.addMedLet1M(builder, medLet1M);
  ECPSDR_Full.addMedLet2L(builder, medLet2L);
  ECPSDR_Full.addMedLet2M(builder, medLet2M);
  ECPSDR_Full.addMedLet3L(builder, medLet3L);
  ECPSDR_Full.addMedLet3M(builder, medLet3M);
  ECPSDR_Full.addMedLet4L(builder, medLet4L);
  ECPSDR_Full.addMedLet4M(builder, medLet4M);
  ECPSDR_Full.addHiLetL(builder, hiLetL);
  ECPSDR_Full.addHiLetM(builder, hiLetM);
  ECPSDR_Full.addSurfDosL(builder, surfDosL);
  ECPSDR_Full.addSurfDosM(builder, surfDosM);
  ECPSDR_Full.addSurfDosH(builder, surfDosH);
  ECPSDR_Full.addSurfDosChargeL(builder, surfDosChargeL);
  ECPSDR_Full.addSurfDosChargeH(builder, surfDosChargeH);
  ECPSDR_Full.addSurfDosStat(builder, surfDosStat);
  ECPSDR_Full.addCdsThrottle(builder, cdsThrottle);
  ECPSDR_Full.addCdsThreshold(builder, cdsThreshold);
  ECPSDR_Full.addChecksum(builder, checksum);
  ECPSDR_Full.addTransientData(builder, transientDataOffset);
  ECPSDR_Full.addCreatedAt(builder, createdAtOffset);
  ECPSDR_Full.addCreatedBy(builder, createdByOffset);
  ECPSDR_Full.addUpdatedAt(builder, updatedAtOffset);
  ECPSDR_Full.addUpdatedBy(builder, updatedByOffset);
  ECPSDR_Full.addSource(builder, sourceOffset);
  ECPSDR_Full.addOrigin(builder, originOffset);
  ECPSDR_Full.addOrigNetwork(builder, origNetworkOffset);
  ECPSDR_Full.addDataMode(builder, dataMode);
  ECPSDR_Full.addOnOrbit(builder, onOrbitOffset);
  return ECPSDR_Full.endECPSDR_Full(builder);
}

unpack(): ECPSDR_FullT {
  return new ECPSDR_FullT(
    this.id(),
    this.classificationMarking(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.idSensor(),
    this.origSensorId(),
    this.type(),
    this.msgTime(),
    this.obTime(),
    this.retransmit(),
    this.senMode(),
    this.dosBias(),
    this.asl5VcurrMon(),
    this.dsl5VcurrMon(),
    this.psTempMon(),
    this.cdsPlateVmon(),
    this.cdsRefVmon(),
    this.mpTemp(),
    this.vRef(),
    this.pd1SigLev(),
    this.pd2SigLev(),
    this.esdTrigCountL(),
    this.esdTrigCountH(),
    this.lowLetL(),
    this.lowLetM(),
    this.medLet1L(),
    this.medLet1M(),
    this.medLet2L(),
    this.medLet2M(),
    this.medLet3L(),
    this.medLet3M(),
    this.medLet4L(),
    this.medLet4M(),
    this.hiLetL(),
    this.hiLetM(),
    this.surfDosL(),
    this.surfDosM(),
    this.surfDosH(),
    this.surfDosChargeL(),
    this.surfDosChargeH(),
    this.surfDosStat(),
    this.cdsThrottle(),
    this.cdsThreshold(),
    this.checksum(),
    this.bb!.createScalarList<string>(this.transientData.bind(this), this.transientDataLength()),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.onOrbit()
  );
}


unpackTo(_o: ECPSDR_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.idSensor = this.idSensor();
  _o.origSensorId = this.origSensorId();
  _o.type = this.type();
  _o.msgTime = this.msgTime();
  _o.obTime = this.obTime();
  _o.retransmit = this.retransmit();
  _o.senMode = this.senMode();
  _o.dosBias = this.dosBias();
  _o.asl5VcurrMon = this.asl5VcurrMon();
  _o.dsl5VcurrMon = this.dsl5VcurrMon();
  _o.psTempMon = this.psTempMon();
  _o.cdsPlateVmon = this.cdsPlateVmon();
  _o.cdsRefVmon = this.cdsRefVmon();
  _o.mpTemp = this.mpTemp();
  _o.vRef = this.vRef();
  _o.pd1SigLev = this.pd1SigLev();
  _o.pd2SigLev = this.pd2SigLev();
  _o.esdTrigCountL = this.esdTrigCountL();
  _o.esdTrigCountH = this.esdTrigCountH();
  _o.lowLetL = this.lowLetL();
  _o.lowLetM = this.lowLetM();
  _o.medLet1L = this.medLet1L();
  _o.medLet1M = this.medLet1M();
  _o.medLet2L = this.medLet2L();
  _o.medLet2M = this.medLet2M();
  _o.medLet3L = this.medLet3L();
  _o.medLet3M = this.medLet3M();
  _o.medLet4L = this.medLet4L();
  _o.medLet4M = this.medLet4M();
  _o.hiLetL = this.hiLetL();
  _o.hiLetM = this.hiLetM();
  _o.surfDosL = this.surfDosL();
  _o.surfDosM = this.surfDosM();
  _o.surfDosH = this.surfDosH();
  _o.surfDosChargeL = this.surfDosChargeL();
  _o.surfDosChargeH = this.surfDosChargeH();
  _o.surfDosStat = this.surfDosStat();
  _o.cdsThrottle = this.cdsThrottle();
  _o.cdsThreshold = this.cdsThreshold();
  _o.checksum = this.checksum();
  _o.transientData = this.bb!.createScalarList<string>(this.transientData.bind(this), this.transientDataLength());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.onOrbit = this.onOrbit();
}
}

export class ECPSDR_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public msgTime: string|Uint8Array|null = null,
  public obTime: string|Uint8Array|null = null,
  public retransmit: boolean = false,
  public senMode: string|Uint8Array|null = null,
  public dosBias: number = 0,
  public asl5VcurrMon: number = 0,
  public dsl5VcurrMon: number = 0,
  public psTempMon: number = 0,
  public cdsPlateVmon: number = 0,
  public cdsRefVmon: number = 0,
  public mpTemp: number = 0,
  public vRef: number = 0,
  public pd1SigLev: number = 0,
  public pd2SigLev: number = 0,
  public esdTrigCountL: number = 0,
  public esdTrigCountH: number = 0,
  public lowLetL: number = 0,
  public lowLetM: number = 0,
  public medLet1L: number = 0,
  public medLet1M: number = 0,
  public medLet2L: number = 0,
  public medLet2M: number = 0,
  public medLet3L: number = 0,
  public medLet3M: number = 0,
  public medLet4L: number = 0,
  public medLet4M: number = 0,
  public hiLetL: number = 0,
  public hiLetM: number = 0,
  public surfDosL: number = 0,
  public surfDosM: number = 0,
  public surfDosH: number = 0,
  public surfDosChargeL: number = 0,
  public surfDosChargeH: number = 0,
  public surfDosStat: number = 0,
  public cdsThrottle: number = 0,
  public cdsThreshold: number = 0,
  public checksum: number = 0,
  public transientData: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: ECPSDR_Full_dataMode_Enum = ECPSDR_Full_dataMode_Enum.REAL,
  public onOrbit: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const msgTime = (this.msgTime !== null ? builder.createString(this.msgTime!) : 0);
  const obTime = (this.obTime !== null ? builder.createString(this.obTime!) : 0);
  const senMode = (this.senMode !== null ? builder.createString(this.senMode!) : 0);
  const transientData = ECPSDR_Full.createTransientDataVector(builder, builder.createObjectOffsetList(this.transientData));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const onOrbit = (this.onOrbit !== null ? builder.createString(this.onOrbit!) : 0);

  return ECPSDR_Full.createECPSDR_Full(builder,
    id,
    classificationMarking,
    idOnOrbit,
    this.satNo,
    origObjectId,
    idSensor,
    origSensorId,
    type,
    msgTime,
    obTime,
    this.retransmit,
    senMode,
    this.dosBias,
    this.asl5VcurrMon,
    this.dsl5VcurrMon,
    this.psTempMon,
    this.cdsPlateVmon,
    this.cdsRefVmon,
    this.mpTemp,
    this.vRef,
    this.pd1SigLev,
    this.pd2SigLev,
    this.esdTrigCountL,
    this.esdTrigCountH,
    this.lowLetL,
    this.lowLetM,
    this.medLet1L,
    this.medLet1M,
    this.medLet2L,
    this.medLet2M,
    this.medLet3L,
    this.medLet3M,
    this.medLet4L,
    this.medLet4M,
    this.hiLetL,
    this.hiLetM,
    this.surfDosL,
    this.surfDosM,
    this.surfDosH,
    this.surfDosChargeL,
    this.surfDosChargeH,
    this.surfDosStat,
    this.cdsThrottle,
    this.cdsThreshold,
    this.checksum,
    transientData,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    source,
    origin,
    origNetwork,
    this.dataMode,
    onOrbit
  );
}
}
