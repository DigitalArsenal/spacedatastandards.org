// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.
 */
export class GNSSObservation_Abridged implements flatbuffers.IUnpackableObject<GNSSObservation_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GNSSObservation_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGNSSObservation_Abridged(bb:flatbuffers.ByteBuffer, obj?:GNSSObservation_Abridged):GNSSObservation_Abridged {
  return (obj || new GNSSObservation_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGNSSObservation_Abridged(bb:flatbuffers.ByteBuffer, obj?:GNSSObservation_Abridged):GNSSObservation_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GNSSObservation_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('GNSS');
}

/**
 * RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:
 * G - GPS (NN = PRN)
 * R - GLONASS (NN = Slot Number)
 * S - SBAS Payload (NN = PRN-100)
 * E - Galileo (NN = PRN)
 * C - BeiDou (NN = PRN)
 * J - QZSS (NN = PRN - 1923)
 * I - IRNSS (NN = PRN)
 * Example: /// Example: GEJ
 * Constraints: Minimum length = 0, Maximum length = 6
 */
gnssSatId():string|null
gnssSatId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gnssSatId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
 * Example: /// Example: 0
 * Constraints: No constraints specified.
 */
trackingStatus():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * GNSS Automatic Gain Control State.
 * Example: /// Example: 20
 * Constraints: No constraints specified.
 */
agcState():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.
 * Example: /// Example: ['S1C', 'C1C', 'C1D']
 * Constraints: No constraints specified.
 */
obsCodeSet(index: number):string
obsCodeSet(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
obsCodeSet(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

obsCodeSetLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.
 * Example: /// Example: [42.1, 1000.0, 0.9]
 * Constraints: No constraints specified.
 */
ob(index: number):string
ob(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ob(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

obLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGNSSObservation_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addGnssSatId(builder:flatbuffers.Builder, gnssSatIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, gnssSatIdOffset, 0);
}

static addTrackingStatus(builder:flatbuffers.Builder, trackingStatus:number) {
  builder.addFieldInt32(1, trackingStatus, 0);
}

static addAgcState(builder:flatbuffers.Builder, agcState:number) {
  builder.addFieldInt32(2, agcState, 0);
}

static addObsCodeSet(builder:flatbuffers.Builder, obsCodeSetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, obsCodeSetOffset, 0);
}

static createObsCodeSetVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startObsCodeSetVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOb(builder:flatbuffers.Builder, obOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, obOffset, 0);
}

static createObVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startObVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGNSSObservation_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishGNSSObservation_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'GNSS');
}

static finishSizePrefixedGNSSObservation_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'GNSS', true);
}

static createGNSSObservation_Abridged(builder:flatbuffers.Builder, gnssSatIdOffset:flatbuffers.Offset, trackingStatus:number, agcState:number, obsCodeSetOffset:flatbuffers.Offset, obOffset:flatbuffers.Offset):flatbuffers.Offset {
  GNSSObservation_Abridged.startGNSSObservation_Abridged(builder);
  GNSSObservation_Abridged.addGnssSatId(builder, gnssSatIdOffset);
  GNSSObservation_Abridged.addTrackingStatus(builder, trackingStatus);
  GNSSObservation_Abridged.addAgcState(builder, agcState);
  GNSSObservation_Abridged.addObsCodeSet(builder, obsCodeSetOffset);
  GNSSObservation_Abridged.addOb(builder, obOffset);
  return GNSSObservation_Abridged.endGNSSObservation_Abridged(builder);
}

unpack(): GNSSObservation_AbridgedT {
  return new GNSSObservation_AbridgedT(
    this.gnssSatId(),
    this.trackingStatus(),
    this.agcState(),
    this.bb!.createScalarList<string>(this.obsCodeSet.bind(this), this.obsCodeSetLength()),
    this.bb!.createScalarList<string>(this.ob.bind(this), this.obLength())
  );
}


unpackTo(_o: GNSSObservation_AbridgedT): void {
  _o.gnssSatId = this.gnssSatId();
  _o.trackingStatus = this.trackingStatus();
  _o.agcState = this.agcState();
  _o.obsCodeSet = this.bb!.createScalarList<string>(this.obsCodeSet.bind(this), this.obsCodeSetLength());
  _o.ob = this.bb!.createScalarList<string>(this.ob.bind(this), this.obLength());
}
}

export class GNSSObservation_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public gnssSatId: string|Uint8Array|null = null,
  public trackingStatus: number = 0,
  public agcState: number = 0,
  public obsCodeSet: (string)[] = [],
  public ob: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const gnssSatId = (this.gnssSatId !== null ? builder.createString(this.gnssSatId!) : 0);
  const obsCodeSet = GNSSObservation_Abridged.createObsCodeSetVector(builder, builder.createObjectOffsetList(this.obsCodeSet));
  const ob = GNSSObservation_Abridged.createObVector(builder, builder.createObjectOffsetList(this.ob));

  return GNSSObservation_Abridged.createGNSSObservation_Abridged(builder,
    gnssSatId,
    this.trackingStatus,
    this.agcState,
    obsCodeSet,
    ob
  );
}
}
