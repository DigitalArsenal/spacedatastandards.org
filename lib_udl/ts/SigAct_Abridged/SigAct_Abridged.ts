// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SigAct_Abridged_dataMode_Enum } from './SigAct_Abridged_dataMode_Enum.js';


/**
 * /// Provides information on the dates, actors, locations, fatalities, and types of all reported political violence and protest events across the world.
 */
export class SigAct_Abridged implements flatbuffers.IUnpackableObject<SigAct_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SigAct_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSigAct_Abridged(bb:flatbuffers.ByteBuffer, obj?:SigAct_Abridged):SigAct_Abridged {
  return (obj || new SigAct_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSigAct_Abridged(bb:flatbuffers.ByteBuffer, obj?:SigAct_Abridged):SigAct_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SigAct_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SIGA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SIGACT-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source language of the significant event using the ISO 639-3, 3 character code definition.
 * Example: /// Example: eng
 * Constraints: Minimum length = 0, Maximum length = 4
 */
sourceLanguage():string|null
sourceLanguage(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceLanguage(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
 * Example: /// Example: US
 * Constraints: Minimum length = 0, Maximum length = 4
 */
countryCode():string|null
countryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The city in or near which this event occurred.
 * Example: /// Example: Austin
 * Constraints: Minimum length = 0, Maximum length = 128
 */
city():string|null
city(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
city(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The district in which this event occurred.
 * Example: /// Example: district 12
 * Constraints: Minimum length = 0, Maximum length = 128
 */
district():string|null
district(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
district(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The province in which this event occurred.
 * Example: /// Example: Province_Example
 * Constraints: Minimum length = 0, Maximum length = 128
 */
province():string|null
province(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
province(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.31
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 90.23
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
 * &nbsp;&nbsp;4Q (grid zone designator, GZD)
 * &nbsp;&nbsp;FJ (the 100,000-meter square identifier)
 * &nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
 * Example: /// Example: 4QFJ12345678
 * Constraints: Minimum length = 0, Maximum length = 128
 */
milgrid():string|null
milgrid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milgrid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Area in which important military events occur or are progressing.  A theater can include the entirety of the airspace, land and sea area that is or that may potentially become involved in war operations.
 * Example: /// Example: Kabul
 * Constraints: Minimum length = 0, Maximum length = 128
 */
theater():string|null
theater(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
theater(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
 * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
 * Constraints: Minimum length = 0, Maximum length = 512
 */
atext():string|null
atext(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atext(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
 * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
 * Constraints: Minimum length = 0, Maximum length = 512
 */
agjson():string|null
agjson(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
agjson(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of region as projected on the ground.
 * Example: /// Example: Type1
 * Constraints: Minimum length = 0, Maximum length = 128
 */
atype():string|null
atype(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atype(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of dimensions of the geometry depicted by region.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
andims():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Geographical spatial_ref_sys for region.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
asrid():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The approximate start time of the event, in ISO 8601 UTC format.
 * Example: /// Example: 2021-01-01T01:02:03.123Z
 * Constraints: No constraints specified.
 */
eventStart():string|null
eventStart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventStart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The approximate end time of the event, in ISO 8601 UTC format.
 * Example: /// Example: 2021-01-01T01:02:03.123Z
 * Constraints: No constraints specified.
 */
eventEnd():string|null
eventEnd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventEnd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Date of the report or filing.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
reportDate():string|null
reportDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reportDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A list of one or more actors involved in the event.
 * Example: /// Example: ['US', 'CAN']
 * Constraints: No constraints specified.
 */
actors(index: number):string
actors(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
actors(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

actorsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Number of civilians abducted in the activity.
 * Example: /// Example: 423
 * Constraints: No constraints specified.
 */
civAbd():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of civilians detained in the activity.
 * Example: /// Example: 234
 * Constraints: No constraints specified.
 */
civDet():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of civilians killed in the activity.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
civKia():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of civilians wounded in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
civWound():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of coalition members abducted in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
coalAbd():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of coalition members detained in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
coalDet():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of coalition members killed in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
coalKia():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of coalition members wounded in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
coalWound():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of enemy combatants abducted in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
enemyAbd():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of enemy combatants detained in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
enemyDet():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of enemy combatants killed in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
enemyKia():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of friendlies abducted in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
friendlyAbd():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of friendlies in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
friendlyDet():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of friendlies killed in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
friendlyKia():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of friendlies wounded in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
friendlyWound():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of Host Nation members abducted in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
hostNatAbd():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of Host Nation members detained in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
hostNatDet():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of Host Nation members killed in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
hostNatKia():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of Host Nation members wounded in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
hostNatWound():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of side A members abducted in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
sideAabd():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of side A members detained in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
sideAdet():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of side A members killed in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
sideAkia():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of side A members wounded in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
sideAwound():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of side B members abducted in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
sideBabd():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of side B members detained in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
sideBdet():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of side B members killed in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
sideBkia():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of side B members wounded in the activity.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
sideBwound():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The name of the target.  The target may be an individual, an entity, or a country/region.
 * Example: /// Example: US
 * Constraints: Minimum length = 0, Maximum length = 64
 */
target():string|null
target(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
target(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A description of the event.
 * Example: /// Example: Example_Description
 * Constraints: Minimum length = 0, Maximum length = 4096
 */
eventDescription():string|null
eventDescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventDescription(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of event (e.g.  Military, Natural, Political, Social, etc.).
 * Example: /// Example: Military
 * Constraints: Minimum length = 0, Maximum length = 32
 */
eventType():string|null
eventType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).
 * Example: /// Example: IED Explosion
 * Constraints: Minimum length = 0, Maximum length = 32
 */
typeOfAttack():string|null
typeOfAttack(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
typeOfAttack(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating that this attack was of a complex or coordinated nature.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
complexAttack():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Unique identifier assigned to each event record that uniquely identifies it in the master dataset.  This ID is provided for convenience of mapping to external systems.
 * Example: /// Example: NUMBER-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
idNumber():string|null
idNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Estimate of the confidence that this event occurred.
 * Example: /// Example: 13
 * Constraints: No constraints specified.
 */
confidence():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Estimate of the accuracy that this event occurred as described/reported.
 * Example: /// Example: 13
 * Constraints: No constraints specified.
 */
accuracy():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * 1 (high) for events where the reporting allows the coder to identify the event in full. That is, events where the individual happening is described by the original source in a sufficiently detailed way as to identify individual incidents, i.e. separate activities of fighting in a single location:
 * 2 (lower) for events where an aggregation of information was already made by the source material that is impossible to undo in the coding process. Such events are described by the original source only as aggregates (totals) of multiple separate activities of fighting spanning over a longer period than a single, clearly defined day.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
clarity():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * This is the raw CAMEO action code describing the action that Actor1 performed upon Actor2.  Additional information about Cameo Codes can be obtained from the GDELT project documentation here: https://www.gdeltproject.org/data.html#documentation.
 * Example: /// Example: CAMEO_CODE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
cameoCode():string|null
cameoCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cameoCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * CAMEO event codes are defined in a three-level taxonomy. For events at level three in the taxonomy, this yields its level two leaf root node. For example, code 0251 (Appeal for easing of administrative sanctions) would yield an EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
 * Example: /// Example: Example_cameoBaseCode
 * Constraints: Minimum length = 0, Maximum length = 32
 */
cameoBaseCode():string|null
cameoBaseCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cameoBaseCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Similar to EventBaseCode, this defines the root-level category the event code falls under. For example, code 0251 (Appeal for easing of administrative sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
 * Example: /// Example: Example_cameoRootCode
 * Constraints: Minimum length = 0, Maximum length = 32
 */
cameoRootCode():string|null
cameoRootCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cameoRootCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the theoretical potential impact that type of event will have on the stability of a country. This is known as the Goldstein Scale. NOTE: this score is based on the type of event, not the specifics of the actual event record being recorded  thus two riots, one with 10 people and one with 10,000, will both receive the same Goldstein score. This can be aggregated to various levels of time resolution to yield an approximation of the stability of a location over time.
 * Example: /// Example: 9.32
 * Constraints: No constraints specified.
 */
goldstein():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The source of the document or report.
 * Example: /// Example: Example_documentSource
 * Constraints: Minimum length = 0, Maximum length = 128
 */
documentSource():string|null
documentSource(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
documentSource(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The filename of the document or report.
 * Example: /// Example: Example_documentFilename
 * Constraints: Minimum length = 0, Maximum length = 128
 */
documentFilename():string|null
documentFilename(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
documentFilename(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating this SigAct record has an associated txt file stored in the UDL. Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the same as the SigAct record id. The maximum file size for this service is 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
hasAttachment():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Size of the associated text file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
 * Example: /// Example: 0
 * Constraints: No constraints specified.
 */
filesize():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

/**
 * MD5 value of the file. The ingest/create operation will automatically generate the value.
 * Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
 * Constraints: Minimum length = 0, Maximum length = 256
 */
checksumValue():string|null
checksumValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
checksumValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reporting unit.
 * Example: /// Example: Unit_1
 * Constraints: Minimum length = 0, Maximum length = 128
 */
repUnit():string|null
repUnit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
repUnit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reporting unit type.
 * Example: /// Example: Example_repUnitType
 * Constraints: Minimum length = 0, Maximum length = 128
 */
repUnitType():string|null
repUnitType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
repUnitType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The activity the unit was engaged in.
 * Example: /// Example: Example_Activity
 * Constraints: Minimum length = 0, Maximum length = 128
 */
repUnitActivity():string|null
repUnitActivity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
repUnitActivity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * This is the total number of mentions of this event across all source documents during the 15 minute update in which it was first seen. Multiple references to an event within a single document also contribute to this count. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
 * Example: /// Example: 8
 * Constraints: No constraints specified.
 */
numMentions():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * This is the total number of information sources containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
 * Example: /// Example: 8
 * Constraints: No constraints specified.
 */
numSources():number {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * This is the total number of source documents containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
 * Example: /// Example: 8
 * Constraints: No constraints specified.
 */
numArticles():number {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * This is the average tone of all documents containing one or more mentions of this event during the 15 minute update in which it was first seen. The score ranges from -100 (extremely negative) to +100 (extremely positive). Common values range between -10 and +10, with 0 indicating neutral.
 * Example: /// Example: 8.23
 * Constraints: No constraints specified.
 */
avgTone():number {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * This field records the URL or citation of the first news report it found this event in. In most cases this is the first report it saw the article in, but due to the timing and flow of news reports through the processing pipeline, this may not always be the very first report, but is at least in the first few reports.
 * Example: /// Example: Example_URL
 * Constraints: Minimum length = 0, Maximum length = 256
 */
sourceUrl():string|null
sourceUrl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceUrl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Related document ids.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
relatedDocs(index: number):string
relatedDocs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
relatedDocs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

relatedDocsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A summary of the event.
 * Example: /// Example: Example_Summary
 * Constraints: Minimum length = 0, Maximum length = 4096
 */
summary():string|null
summary(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
summary(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Notes related to the documents or event.
 * Example: /// Example: Example_Notes
 * Constraints: Minimum length = 0, Maximum length = 4096
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: No constraints specified.
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SigAct_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SigAct_Abridged_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSigAct_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(82);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addSourceLanguage(builder:flatbuffers.Builder, sourceLanguageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, sourceLanguageOffset, 0);
}

static addCountryCode(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, countryCodeOffset, 0);
}

static addCity(builder:flatbuffers.Builder, cityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, cityOffset, 0);
}

static addDistrict(builder:flatbuffers.Builder, districtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, districtOffset, 0);
}

static addProvince(builder:flatbuffers.Builder, provinceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, provinceOffset, 0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(7, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(8, lon, 0.0);
}

static addMilgrid(builder:flatbuffers.Builder, milgridOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, milgridOffset, 0);
}

static addTheater(builder:flatbuffers.Builder, theaterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, theaterOffset, 0);
}

static addAtext(builder:flatbuffers.Builder, atextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, atextOffset, 0);
}

static addAgjson(builder:flatbuffers.Builder, agjsonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, agjsonOffset, 0);
}

static addAtype(builder:flatbuffers.Builder, atypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, atypeOffset, 0);
}

static addAndims(builder:flatbuffers.Builder, andims:number) {
  builder.addFieldInt32(14, andims, 0);
}

static addAsrid(builder:flatbuffers.Builder, asrid:number) {
  builder.addFieldInt32(15, asrid, 0);
}

static addEventStart(builder:flatbuffers.Builder, eventStartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, eventStartOffset, 0);
}

static addEventEnd(builder:flatbuffers.Builder, eventEndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, eventEndOffset, 0);
}

static addReportDate(builder:flatbuffers.Builder, reportDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, reportDateOffset, 0);
}

static addActors(builder:flatbuffers.Builder, actorsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, actorsOffset, 0);
}

static createActorsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startActorsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCivAbd(builder:flatbuffers.Builder, civAbd:number) {
  builder.addFieldInt32(20, civAbd, 0);
}

static addCivDet(builder:flatbuffers.Builder, civDet:number) {
  builder.addFieldInt32(21, civDet, 0);
}

static addCivKia(builder:flatbuffers.Builder, civKia:number) {
  builder.addFieldInt32(22, civKia, 0);
}

static addCivWound(builder:flatbuffers.Builder, civWound:number) {
  builder.addFieldInt32(23, civWound, 0);
}

static addCoalAbd(builder:flatbuffers.Builder, coalAbd:number) {
  builder.addFieldInt32(24, coalAbd, 0);
}

static addCoalDet(builder:flatbuffers.Builder, coalDet:number) {
  builder.addFieldInt32(25, coalDet, 0);
}

static addCoalKia(builder:flatbuffers.Builder, coalKia:number) {
  builder.addFieldInt32(26, coalKia, 0);
}

static addCoalWound(builder:flatbuffers.Builder, coalWound:number) {
  builder.addFieldInt32(27, coalWound, 0);
}

static addEnemyAbd(builder:flatbuffers.Builder, enemyAbd:number) {
  builder.addFieldInt32(28, enemyAbd, 0);
}

static addEnemyDet(builder:flatbuffers.Builder, enemyDet:number) {
  builder.addFieldInt32(29, enemyDet, 0);
}

static addEnemyKia(builder:flatbuffers.Builder, enemyKia:number) {
  builder.addFieldInt32(30, enemyKia, 0);
}

static addFriendlyAbd(builder:flatbuffers.Builder, friendlyAbd:number) {
  builder.addFieldInt32(31, friendlyAbd, 0);
}

static addFriendlyDet(builder:flatbuffers.Builder, friendlyDet:number) {
  builder.addFieldInt32(32, friendlyDet, 0);
}

static addFriendlyKia(builder:flatbuffers.Builder, friendlyKia:number) {
  builder.addFieldInt32(33, friendlyKia, 0);
}

static addFriendlyWound(builder:flatbuffers.Builder, friendlyWound:number) {
  builder.addFieldInt32(34, friendlyWound, 0);
}

static addHostNatAbd(builder:flatbuffers.Builder, hostNatAbd:number) {
  builder.addFieldInt32(35, hostNatAbd, 0);
}

static addHostNatDet(builder:flatbuffers.Builder, hostNatDet:number) {
  builder.addFieldInt32(36, hostNatDet, 0);
}

static addHostNatKia(builder:flatbuffers.Builder, hostNatKia:number) {
  builder.addFieldInt32(37, hostNatKia, 0);
}

static addHostNatWound(builder:flatbuffers.Builder, hostNatWound:number) {
  builder.addFieldInt32(38, hostNatWound, 0);
}

static addSideAabd(builder:flatbuffers.Builder, sideAabd:number) {
  builder.addFieldInt32(39, sideAabd, 0);
}

static addSideAdet(builder:flatbuffers.Builder, sideAdet:number) {
  builder.addFieldInt32(40, sideAdet, 0);
}

static addSideAkia(builder:flatbuffers.Builder, sideAkia:number) {
  builder.addFieldInt32(41, sideAkia, 0);
}

static addSideAwound(builder:flatbuffers.Builder, sideAwound:number) {
  builder.addFieldInt32(42, sideAwound, 0);
}

static addSideBabd(builder:flatbuffers.Builder, sideBabd:number) {
  builder.addFieldInt32(43, sideBabd, 0);
}

static addSideBdet(builder:flatbuffers.Builder, sideBdet:number) {
  builder.addFieldInt32(44, sideBdet, 0);
}

static addSideBkia(builder:flatbuffers.Builder, sideBkia:number) {
  builder.addFieldInt32(45, sideBkia, 0);
}

static addSideBwound(builder:flatbuffers.Builder, sideBwound:number) {
  builder.addFieldInt32(46, sideBwound, 0);
}

static addTarget(builder:flatbuffers.Builder, targetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, targetOffset, 0);
}

static addEventDescription(builder:flatbuffers.Builder, eventDescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, eventDescriptionOffset, 0);
}

static addEventType(builder:flatbuffers.Builder, eventTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, eventTypeOffset, 0);
}

static addTypeOfAttack(builder:flatbuffers.Builder, typeOfAttackOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, typeOfAttackOffset, 0);
}

static addComplexAttack(builder:flatbuffers.Builder, complexAttack:boolean) {
  builder.addFieldInt8(51, +complexAttack, +false);
}

static addIdNumber(builder:flatbuffers.Builder, idNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, idNumberOffset, 0);
}

static addConfidence(builder:flatbuffers.Builder, confidence:number) {
  builder.addFieldInt32(53, confidence, 0);
}

static addAccuracy(builder:flatbuffers.Builder, accuracy:number) {
  builder.addFieldInt32(54, accuracy, 0);
}

static addClarity(builder:flatbuffers.Builder, clarity:number) {
  builder.addFieldInt32(55, clarity, 0);
}

static addCameoCode(builder:flatbuffers.Builder, cameoCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, cameoCodeOffset, 0);
}

static addCameoBaseCode(builder:flatbuffers.Builder, cameoBaseCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, cameoBaseCodeOffset, 0);
}

static addCameoRootCode(builder:flatbuffers.Builder, cameoRootCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, cameoRootCodeOffset, 0);
}

static addGoldstein(builder:flatbuffers.Builder, goldstein:number) {
  builder.addFieldFloat64(59, goldstein, 0.0);
}

static addDocumentSource(builder:flatbuffers.Builder, documentSourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, documentSourceOffset, 0);
}

static addDocumentFilename(builder:flatbuffers.Builder, documentFilenameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, documentFilenameOffset, 0);
}

static addHasAttachment(builder:flatbuffers.Builder, hasAttachment:boolean) {
  builder.addFieldInt8(62, +hasAttachment, +false);
}

static addFilesize(builder:flatbuffers.Builder, filesize:bigint) {
  builder.addFieldInt64(63, filesize, BigInt('0'));
}

static addChecksumValue(builder:flatbuffers.Builder, checksumValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, checksumValueOffset, 0);
}

static addRepUnit(builder:flatbuffers.Builder, repUnitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, repUnitOffset, 0);
}

static addRepUnitType(builder:flatbuffers.Builder, repUnitTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, repUnitTypeOffset, 0);
}

static addRepUnitActivity(builder:flatbuffers.Builder, repUnitActivityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, repUnitActivityOffset, 0);
}

static addNumMentions(builder:flatbuffers.Builder, numMentions:number) {
  builder.addFieldInt32(68, numMentions, 0);
}

static addNumSources(builder:flatbuffers.Builder, numSources:number) {
  builder.addFieldInt32(69, numSources, 0);
}

static addNumArticles(builder:flatbuffers.Builder, numArticles:number) {
  builder.addFieldInt32(70, numArticles, 0);
}

static addAvgTone(builder:flatbuffers.Builder, avgTone:number) {
  builder.addFieldFloat64(71, avgTone, 0.0);
}

static addSourceUrl(builder:flatbuffers.Builder, sourceUrlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(72, sourceUrlOffset, 0);
}

static addRelatedDocs(builder:flatbuffers.Builder, relatedDocsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(73, relatedDocsOffset, 0);
}

static createRelatedDocsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRelatedDocsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSummary(builder:flatbuffers.Builder, summaryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(74, summaryOffset, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(75, notesOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(76, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(77, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(78, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(79, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SigAct_Abridged_dataMode_Enum) {
  builder.addFieldInt8(80, dataMode, SigAct_Abridged_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(81, origNetworkOffset, 0);
}

static endSigAct_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSigAct_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SIGA');
}

static finishSizePrefixedSigAct_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SIGA', true);
}

static createSigAct_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, sourceLanguageOffset:flatbuffers.Offset, countryCodeOffset:flatbuffers.Offset, cityOffset:flatbuffers.Offset, districtOffset:flatbuffers.Offset, provinceOffset:flatbuffers.Offset, lat:number, lon:number, milgridOffset:flatbuffers.Offset, theaterOffset:flatbuffers.Offset, atextOffset:flatbuffers.Offset, agjsonOffset:flatbuffers.Offset, atypeOffset:flatbuffers.Offset, andims:number, asrid:number, eventStartOffset:flatbuffers.Offset, eventEndOffset:flatbuffers.Offset, reportDateOffset:flatbuffers.Offset, actorsOffset:flatbuffers.Offset, civAbd:number, civDet:number, civKia:number, civWound:number, coalAbd:number, coalDet:number, coalKia:number, coalWound:number, enemyAbd:number, enemyDet:number, enemyKia:number, friendlyAbd:number, friendlyDet:number, friendlyKia:number, friendlyWound:number, hostNatAbd:number, hostNatDet:number, hostNatKia:number, hostNatWound:number, sideAabd:number, sideAdet:number, sideAkia:number, sideAwound:number, sideBabd:number, sideBdet:number, sideBkia:number, sideBwound:number, targetOffset:flatbuffers.Offset, eventDescriptionOffset:flatbuffers.Offset, eventTypeOffset:flatbuffers.Offset, typeOfAttackOffset:flatbuffers.Offset, complexAttack:boolean, idNumberOffset:flatbuffers.Offset, confidence:number, accuracy:number, clarity:number, cameoCodeOffset:flatbuffers.Offset, cameoBaseCodeOffset:flatbuffers.Offset, cameoRootCodeOffset:flatbuffers.Offset, goldstein:number, documentSourceOffset:flatbuffers.Offset, documentFilenameOffset:flatbuffers.Offset, hasAttachment:boolean, filesize:bigint, checksumValueOffset:flatbuffers.Offset, repUnitOffset:flatbuffers.Offset, repUnitTypeOffset:flatbuffers.Offset, repUnitActivityOffset:flatbuffers.Offset, numMentions:number, numSources:number, numArticles:number, avgTone:number, sourceUrlOffset:flatbuffers.Offset, relatedDocsOffset:flatbuffers.Offset, summaryOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:SigAct_Abridged_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  SigAct_Abridged.startSigAct_Abridged(builder);
  SigAct_Abridged.addId(builder, idOffset);
  SigAct_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  SigAct_Abridged.addSourceLanguage(builder, sourceLanguageOffset);
  SigAct_Abridged.addCountryCode(builder, countryCodeOffset);
  SigAct_Abridged.addCity(builder, cityOffset);
  SigAct_Abridged.addDistrict(builder, districtOffset);
  SigAct_Abridged.addProvince(builder, provinceOffset);
  SigAct_Abridged.addLat(builder, lat);
  SigAct_Abridged.addLon(builder, lon);
  SigAct_Abridged.addMilgrid(builder, milgridOffset);
  SigAct_Abridged.addTheater(builder, theaterOffset);
  SigAct_Abridged.addAtext(builder, atextOffset);
  SigAct_Abridged.addAgjson(builder, agjsonOffset);
  SigAct_Abridged.addAtype(builder, atypeOffset);
  SigAct_Abridged.addAndims(builder, andims);
  SigAct_Abridged.addAsrid(builder, asrid);
  SigAct_Abridged.addEventStart(builder, eventStartOffset);
  SigAct_Abridged.addEventEnd(builder, eventEndOffset);
  SigAct_Abridged.addReportDate(builder, reportDateOffset);
  SigAct_Abridged.addActors(builder, actorsOffset);
  SigAct_Abridged.addCivAbd(builder, civAbd);
  SigAct_Abridged.addCivDet(builder, civDet);
  SigAct_Abridged.addCivKia(builder, civKia);
  SigAct_Abridged.addCivWound(builder, civWound);
  SigAct_Abridged.addCoalAbd(builder, coalAbd);
  SigAct_Abridged.addCoalDet(builder, coalDet);
  SigAct_Abridged.addCoalKia(builder, coalKia);
  SigAct_Abridged.addCoalWound(builder, coalWound);
  SigAct_Abridged.addEnemyAbd(builder, enemyAbd);
  SigAct_Abridged.addEnemyDet(builder, enemyDet);
  SigAct_Abridged.addEnemyKia(builder, enemyKia);
  SigAct_Abridged.addFriendlyAbd(builder, friendlyAbd);
  SigAct_Abridged.addFriendlyDet(builder, friendlyDet);
  SigAct_Abridged.addFriendlyKia(builder, friendlyKia);
  SigAct_Abridged.addFriendlyWound(builder, friendlyWound);
  SigAct_Abridged.addHostNatAbd(builder, hostNatAbd);
  SigAct_Abridged.addHostNatDet(builder, hostNatDet);
  SigAct_Abridged.addHostNatKia(builder, hostNatKia);
  SigAct_Abridged.addHostNatWound(builder, hostNatWound);
  SigAct_Abridged.addSideAabd(builder, sideAabd);
  SigAct_Abridged.addSideAdet(builder, sideAdet);
  SigAct_Abridged.addSideAkia(builder, sideAkia);
  SigAct_Abridged.addSideAwound(builder, sideAwound);
  SigAct_Abridged.addSideBabd(builder, sideBabd);
  SigAct_Abridged.addSideBdet(builder, sideBdet);
  SigAct_Abridged.addSideBkia(builder, sideBkia);
  SigAct_Abridged.addSideBwound(builder, sideBwound);
  SigAct_Abridged.addTarget(builder, targetOffset);
  SigAct_Abridged.addEventDescription(builder, eventDescriptionOffset);
  SigAct_Abridged.addEventType(builder, eventTypeOffset);
  SigAct_Abridged.addTypeOfAttack(builder, typeOfAttackOffset);
  SigAct_Abridged.addComplexAttack(builder, complexAttack);
  SigAct_Abridged.addIdNumber(builder, idNumberOffset);
  SigAct_Abridged.addConfidence(builder, confidence);
  SigAct_Abridged.addAccuracy(builder, accuracy);
  SigAct_Abridged.addClarity(builder, clarity);
  SigAct_Abridged.addCameoCode(builder, cameoCodeOffset);
  SigAct_Abridged.addCameoBaseCode(builder, cameoBaseCodeOffset);
  SigAct_Abridged.addCameoRootCode(builder, cameoRootCodeOffset);
  SigAct_Abridged.addGoldstein(builder, goldstein);
  SigAct_Abridged.addDocumentSource(builder, documentSourceOffset);
  SigAct_Abridged.addDocumentFilename(builder, documentFilenameOffset);
  SigAct_Abridged.addHasAttachment(builder, hasAttachment);
  SigAct_Abridged.addFilesize(builder, filesize);
  SigAct_Abridged.addChecksumValue(builder, checksumValueOffset);
  SigAct_Abridged.addRepUnit(builder, repUnitOffset);
  SigAct_Abridged.addRepUnitType(builder, repUnitTypeOffset);
  SigAct_Abridged.addRepUnitActivity(builder, repUnitActivityOffset);
  SigAct_Abridged.addNumMentions(builder, numMentions);
  SigAct_Abridged.addNumSources(builder, numSources);
  SigAct_Abridged.addNumArticles(builder, numArticles);
  SigAct_Abridged.addAvgTone(builder, avgTone);
  SigAct_Abridged.addSourceUrl(builder, sourceUrlOffset);
  SigAct_Abridged.addRelatedDocs(builder, relatedDocsOffset);
  SigAct_Abridged.addSummary(builder, summaryOffset);
  SigAct_Abridged.addNotes(builder, notesOffset);
  SigAct_Abridged.addCreatedAt(builder, createdAtOffset);
  SigAct_Abridged.addCreatedBy(builder, createdByOffset);
  SigAct_Abridged.addSource(builder, sourceOffset);
  SigAct_Abridged.addOrigin(builder, originOffset);
  SigAct_Abridged.addDataMode(builder, dataMode);
  SigAct_Abridged.addOrigNetwork(builder, origNetworkOffset);
  return SigAct_Abridged.endSigAct_Abridged(builder);
}

unpack(): SigAct_AbridgedT {
  return new SigAct_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.sourceLanguage(),
    this.countryCode(),
    this.city(),
    this.district(),
    this.province(),
    this.lat(),
    this.lon(),
    this.milgrid(),
    this.theater(),
    this.atext(),
    this.agjson(),
    this.atype(),
    this.andims(),
    this.asrid(),
    this.eventStart(),
    this.eventEnd(),
    this.reportDate(),
    this.bb!.createScalarList<string>(this.actors.bind(this), this.actorsLength()),
    this.civAbd(),
    this.civDet(),
    this.civKia(),
    this.civWound(),
    this.coalAbd(),
    this.coalDet(),
    this.coalKia(),
    this.coalWound(),
    this.enemyAbd(),
    this.enemyDet(),
    this.enemyKia(),
    this.friendlyAbd(),
    this.friendlyDet(),
    this.friendlyKia(),
    this.friendlyWound(),
    this.hostNatAbd(),
    this.hostNatDet(),
    this.hostNatKia(),
    this.hostNatWound(),
    this.sideAabd(),
    this.sideAdet(),
    this.sideAkia(),
    this.sideAwound(),
    this.sideBabd(),
    this.sideBdet(),
    this.sideBkia(),
    this.sideBwound(),
    this.target(),
    this.eventDescription(),
    this.eventType(),
    this.typeOfAttack(),
    this.complexAttack(),
    this.idNumber(),
    this.confidence(),
    this.accuracy(),
    this.clarity(),
    this.cameoCode(),
    this.cameoBaseCode(),
    this.cameoRootCode(),
    this.goldstein(),
    this.documentSource(),
    this.documentFilename(),
    this.hasAttachment(),
    this.filesize(),
    this.checksumValue(),
    this.repUnit(),
    this.repUnitType(),
    this.repUnitActivity(),
    this.numMentions(),
    this.numSources(),
    this.numArticles(),
    this.avgTone(),
    this.sourceUrl(),
    this.bb!.createScalarList<string>(this.relatedDocs.bind(this), this.relatedDocsLength()),
    this.summary(),
    this.notes(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: SigAct_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.sourceLanguage = this.sourceLanguage();
  _o.countryCode = this.countryCode();
  _o.city = this.city();
  _o.district = this.district();
  _o.province = this.province();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.milgrid = this.milgrid();
  _o.theater = this.theater();
  _o.atext = this.atext();
  _o.agjson = this.agjson();
  _o.atype = this.atype();
  _o.andims = this.andims();
  _o.asrid = this.asrid();
  _o.eventStart = this.eventStart();
  _o.eventEnd = this.eventEnd();
  _o.reportDate = this.reportDate();
  _o.actors = this.bb!.createScalarList<string>(this.actors.bind(this), this.actorsLength());
  _o.civAbd = this.civAbd();
  _o.civDet = this.civDet();
  _o.civKia = this.civKia();
  _o.civWound = this.civWound();
  _o.coalAbd = this.coalAbd();
  _o.coalDet = this.coalDet();
  _o.coalKia = this.coalKia();
  _o.coalWound = this.coalWound();
  _o.enemyAbd = this.enemyAbd();
  _o.enemyDet = this.enemyDet();
  _o.enemyKia = this.enemyKia();
  _o.friendlyAbd = this.friendlyAbd();
  _o.friendlyDet = this.friendlyDet();
  _o.friendlyKia = this.friendlyKia();
  _o.friendlyWound = this.friendlyWound();
  _o.hostNatAbd = this.hostNatAbd();
  _o.hostNatDet = this.hostNatDet();
  _o.hostNatKia = this.hostNatKia();
  _o.hostNatWound = this.hostNatWound();
  _o.sideAabd = this.sideAabd();
  _o.sideAdet = this.sideAdet();
  _o.sideAkia = this.sideAkia();
  _o.sideAwound = this.sideAwound();
  _o.sideBabd = this.sideBabd();
  _o.sideBdet = this.sideBdet();
  _o.sideBkia = this.sideBkia();
  _o.sideBwound = this.sideBwound();
  _o.target = this.target();
  _o.eventDescription = this.eventDescription();
  _o.eventType = this.eventType();
  _o.typeOfAttack = this.typeOfAttack();
  _o.complexAttack = this.complexAttack();
  _o.idNumber = this.idNumber();
  _o.confidence = this.confidence();
  _o.accuracy = this.accuracy();
  _o.clarity = this.clarity();
  _o.cameoCode = this.cameoCode();
  _o.cameoBaseCode = this.cameoBaseCode();
  _o.cameoRootCode = this.cameoRootCode();
  _o.goldstein = this.goldstein();
  _o.documentSource = this.documentSource();
  _o.documentFilename = this.documentFilename();
  _o.hasAttachment = this.hasAttachment();
  _o.filesize = this.filesize();
  _o.checksumValue = this.checksumValue();
  _o.repUnit = this.repUnit();
  _o.repUnitType = this.repUnitType();
  _o.repUnitActivity = this.repUnitActivity();
  _o.numMentions = this.numMentions();
  _o.numSources = this.numSources();
  _o.numArticles = this.numArticles();
  _o.avgTone = this.avgTone();
  _o.sourceUrl = this.sourceUrl();
  _o.relatedDocs = this.bb!.createScalarList<string>(this.relatedDocs.bind(this), this.relatedDocsLength());
  _o.summary = this.summary();
  _o.notes = this.notes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class SigAct_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public sourceLanguage: string|Uint8Array|null = null,
  public countryCode: string|Uint8Array|null = null,
  public city: string|Uint8Array|null = null,
  public district: string|Uint8Array|null = null,
  public province: string|Uint8Array|null = null,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public milgrid: string|Uint8Array|null = null,
  public theater: string|Uint8Array|null = null,
  public atext: string|Uint8Array|null = null,
  public agjson: string|Uint8Array|null = null,
  public atype: string|Uint8Array|null = null,
  public andims: number = 0,
  public asrid: number = 0,
  public eventStart: string|Uint8Array|null = null,
  public eventEnd: string|Uint8Array|null = null,
  public reportDate: string|Uint8Array|null = null,
  public actors: (string)[] = [],
  public civAbd: number = 0,
  public civDet: number = 0,
  public civKia: number = 0,
  public civWound: number = 0,
  public coalAbd: number = 0,
  public coalDet: number = 0,
  public coalKia: number = 0,
  public coalWound: number = 0,
  public enemyAbd: number = 0,
  public enemyDet: number = 0,
  public enemyKia: number = 0,
  public friendlyAbd: number = 0,
  public friendlyDet: number = 0,
  public friendlyKia: number = 0,
  public friendlyWound: number = 0,
  public hostNatAbd: number = 0,
  public hostNatDet: number = 0,
  public hostNatKia: number = 0,
  public hostNatWound: number = 0,
  public sideAabd: number = 0,
  public sideAdet: number = 0,
  public sideAkia: number = 0,
  public sideAwound: number = 0,
  public sideBabd: number = 0,
  public sideBdet: number = 0,
  public sideBkia: number = 0,
  public sideBwound: number = 0,
  public target: string|Uint8Array|null = null,
  public eventDescription: string|Uint8Array|null = null,
  public eventType: string|Uint8Array|null = null,
  public typeOfAttack: string|Uint8Array|null = null,
  public complexAttack: boolean = false,
  public idNumber: string|Uint8Array|null = null,
  public confidence: number = 0,
  public accuracy: number = 0,
  public clarity: number = 0,
  public cameoCode: string|Uint8Array|null = null,
  public cameoBaseCode: string|Uint8Array|null = null,
  public cameoRootCode: string|Uint8Array|null = null,
  public goldstein: number = 0.0,
  public documentSource: string|Uint8Array|null = null,
  public documentFilename: string|Uint8Array|null = null,
  public hasAttachment: boolean = false,
  public filesize: bigint = BigInt('0'),
  public checksumValue: string|Uint8Array|null = null,
  public repUnit: string|Uint8Array|null = null,
  public repUnitType: string|Uint8Array|null = null,
  public repUnitActivity: string|Uint8Array|null = null,
  public numMentions: number = 0,
  public numSources: number = 0,
  public numArticles: number = 0,
  public avgTone: number = 0.0,
  public sourceUrl: string|Uint8Array|null = null,
  public relatedDocs: (string)[] = [],
  public summary: string|Uint8Array|null = null,
  public notes: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: SigAct_Abridged_dataMode_Enum = SigAct_Abridged_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const sourceLanguage = (this.sourceLanguage !== null ? builder.createString(this.sourceLanguage!) : 0);
  const countryCode = (this.countryCode !== null ? builder.createString(this.countryCode!) : 0);
  const city = (this.city !== null ? builder.createString(this.city!) : 0);
  const district = (this.district !== null ? builder.createString(this.district!) : 0);
  const province = (this.province !== null ? builder.createString(this.province!) : 0);
  const milgrid = (this.milgrid !== null ? builder.createString(this.milgrid!) : 0);
  const theater = (this.theater !== null ? builder.createString(this.theater!) : 0);
  const atext = (this.atext !== null ? builder.createString(this.atext!) : 0);
  const agjson = (this.agjson !== null ? builder.createString(this.agjson!) : 0);
  const atype = (this.atype !== null ? builder.createString(this.atype!) : 0);
  const eventStart = (this.eventStart !== null ? builder.createString(this.eventStart!) : 0);
  const eventEnd = (this.eventEnd !== null ? builder.createString(this.eventEnd!) : 0);
  const reportDate = (this.reportDate !== null ? builder.createString(this.reportDate!) : 0);
  const actors = SigAct_Abridged.createActorsVector(builder, builder.createObjectOffsetList(this.actors));
  const target = (this.target !== null ? builder.createString(this.target!) : 0);
  const eventDescription = (this.eventDescription !== null ? builder.createString(this.eventDescription!) : 0);
  const eventType = (this.eventType !== null ? builder.createString(this.eventType!) : 0);
  const typeOfAttack = (this.typeOfAttack !== null ? builder.createString(this.typeOfAttack!) : 0);
  const idNumber = (this.idNumber !== null ? builder.createString(this.idNumber!) : 0);
  const cameoCode = (this.cameoCode !== null ? builder.createString(this.cameoCode!) : 0);
  const cameoBaseCode = (this.cameoBaseCode !== null ? builder.createString(this.cameoBaseCode!) : 0);
  const cameoRootCode = (this.cameoRootCode !== null ? builder.createString(this.cameoRootCode!) : 0);
  const documentSource = (this.documentSource !== null ? builder.createString(this.documentSource!) : 0);
  const documentFilename = (this.documentFilename !== null ? builder.createString(this.documentFilename!) : 0);
  const checksumValue = (this.checksumValue !== null ? builder.createString(this.checksumValue!) : 0);
  const repUnit = (this.repUnit !== null ? builder.createString(this.repUnit!) : 0);
  const repUnitType = (this.repUnitType !== null ? builder.createString(this.repUnitType!) : 0);
  const repUnitActivity = (this.repUnitActivity !== null ? builder.createString(this.repUnitActivity!) : 0);
  const sourceUrl = (this.sourceUrl !== null ? builder.createString(this.sourceUrl!) : 0);
  const relatedDocs = SigAct_Abridged.createRelatedDocsVector(builder, builder.createObjectOffsetList(this.relatedDocs));
  const summary = (this.summary !== null ? builder.createString(this.summary!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return SigAct_Abridged.createSigAct_Abridged(builder,
    id,
    classificationMarking,
    sourceLanguage,
    countryCode,
    city,
    district,
    province,
    this.lat,
    this.lon,
    milgrid,
    theater,
    atext,
    agjson,
    atype,
    this.andims,
    this.asrid,
    eventStart,
    eventEnd,
    reportDate,
    actors,
    this.civAbd,
    this.civDet,
    this.civKia,
    this.civWound,
    this.coalAbd,
    this.coalDet,
    this.coalKia,
    this.coalWound,
    this.enemyAbd,
    this.enemyDet,
    this.enemyKia,
    this.friendlyAbd,
    this.friendlyDet,
    this.friendlyKia,
    this.friendlyWound,
    this.hostNatAbd,
    this.hostNatDet,
    this.hostNatKia,
    this.hostNatWound,
    this.sideAabd,
    this.sideAdet,
    this.sideAkia,
    this.sideAwound,
    this.sideBabd,
    this.sideBdet,
    this.sideBkia,
    this.sideBwound,
    target,
    eventDescription,
    eventType,
    typeOfAttack,
    this.complexAttack,
    idNumber,
    this.confidence,
    this.accuracy,
    this.clarity,
    cameoCode,
    cameoBaseCode,
    cameoRootCode,
    this.goldstein,
    documentSource,
    documentFilename,
    this.hasAttachment,
    this.filesize,
    checksumValue,
    repUnit,
    repUnitType,
    repUnitActivity,
    this.numMentions,
    this.numSources,
    this.numArticles,
    this.avgTone,
    sourceUrl,
    relatedDocs,
    summary,
    notes,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
