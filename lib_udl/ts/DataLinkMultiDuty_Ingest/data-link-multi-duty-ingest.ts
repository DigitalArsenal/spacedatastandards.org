// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
 */
export class DataLinkMultiDuty_Ingest implements flatbuffers.IUnpackableObject<DataLinkMultiDuty_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataLinkMultiDuty_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataLinkMultiDuty_Ingest(bb:flatbuffers.ByteBuffer, obj?:DataLinkMultiDuty_Ingest):DataLinkMultiDuty_Ingest {
  return (obj || new DataLinkMultiDuty_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataLinkMultiDuty_Ingest(bb:flatbuffers.ByteBuffer, obj?:DataLinkMultiDuty_Ingest):DataLinkMultiDuty_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataLinkMultiDuty_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DATA');
}

/**
 * Designated force of unit specified by ship name, unit call sign, or unit designator.
 * Example: /// Example: SHIP:STENNIS
 * Constraints: Minimum length = 0, Maximum length = 38
 */
unitDes():string|null
unitDes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unitDes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the person to be contacted for multilink coordination.
 * Example: /// Example: POPOVICH
 * Constraints: Minimum length = 0, Maximum length = 20
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The rank or position of the person to be contacted for multilink coordination.
 * Example: /// Example: LCDR
 * Constraints: Minimum length = 0, Maximum length = 16
 */
rank():string|null
rank(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rank(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specific duties assigned for multilink coordination (e.g. ICO, RICO, SICO).
 * Example: /// Example: SICO
 * Constraints: Minimum length = 0, Maximum length = 4
 */
duty():string|null
duty(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
duty(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of telephone numbers or the frequency values for radio transmission of the person to be contacted for multilink coordination.
 * Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
 * Constraints: No constraints specified.
 */
dutyTeleFreqNums(index: number):string
dutyTeleFreqNums(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
dutyTeleFreqNums(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dutyTeleFreqNumsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
multiDutyVoiceCoord(index: number):string
multiDutyVoiceCoord(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
multiDutyVoiceCoord(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

multiDutyVoiceCoordLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDataLinkMultiDuty_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addUnitDes(builder:flatbuffers.Builder, unitDesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, unitDesOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addRank(builder:flatbuffers.Builder, rankOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rankOffset, 0);
}

static addDuty(builder:flatbuffers.Builder, dutyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dutyOffset, 0);
}

static addDutyTeleFreqNums(builder:flatbuffers.Builder, dutyTeleFreqNumsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, dutyTeleFreqNumsOffset, 0);
}

static createDutyTeleFreqNumsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDutyTeleFreqNumsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMultiDutyVoiceCoord(builder:flatbuffers.Builder, multiDutyVoiceCoordOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, multiDutyVoiceCoordOffset, 0);
}

static createMultiDutyVoiceCoordVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMultiDutyVoiceCoordVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDataLinkMultiDuty_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDataLinkMultiDuty_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA');
}

static finishSizePrefixedDataLinkMultiDuty_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA', true);
}

static createDataLinkMultiDuty_Ingest(builder:flatbuffers.Builder, unitDesOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, rankOffset:flatbuffers.Offset, dutyOffset:flatbuffers.Offset, dutyTeleFreqNumsOffset:flatbuffers.Offset, multiDutyVoiceCoordOffset:flatbuffers.Offset):flatbuffers.Offset {
  DataLinkMultiDuty_Ingest.startDataLinkMultiDuty_Ingest(builder);
  DataLinkMultiDuty_Ingest.addUnitDes(builder, unitDesOffset);
  DataLinkMultiDuty_Ingest.addName(builder, nameOffset);
  DataLinkMultiDuty_Ingest.addRank(builder, rankOffset);
  DataLinkMultiDuty_Ingest.addDuty(builder, dutyOffset);
  DataLinkMultiDuty_Ingest.addDutyTeleFreqNums(builder, dutyTeleFreqNumsOffset);
  DataLinkMultiDuty_Ingest.addMultiDutyVoiceCoord(builder, multiDutyVoiceCoordOffset);
  return DataLinkMultiDuty_Ingest.endDataLinkMultiDuty_Ingest(builder);
}

unpack(): DataLinkMultiDuty_IngestT {
  return new DataLinkMultiDuty_IngestT(
    this.unitDes(),
    this.name(),
    this.rank(),
    this.duty(),
    this.bb!.createScalarList<string>(this.dutyTeleFreqNums.bind(this), this.dutyTeleFreqNums_Length()),
    this.bb!.createScalarList<string>(this.multiDutyVoiceCoord.bind(this), this.multiDutyVoiceCoord_Length())
  );
}


unpackTo(_o: DataLinkMultiDuty_IngestT): void {
  _o.unitDes = this.unitDes();
  _o.name = this.name();
  _o.rank = this.rank();
  _o.duty = this.duty();
  _o.dutyTeleFreqNums = this.bb!.createScalarList<string>(this.dutyTeleFreqNums.bind(this), this.dutyTeleFreqNums_Length());
  _o.multiDutyVoiceCoord = this.bb!.createScalarList<string>(this.multiDutyVoiceCoord.bind(this), this.multiDutyVoiceCoord_Length());
}
}

export class DataLinkMultiDuty_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public unitDes: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public rank: string|Uint8Array|null = null,
  public duty: string|Uint8Array|null = null,
  public dutyTeleFreqNums: (string)[] = [],
  public multiDutyVoiceCoord: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const unitDes = (this.unitDes !== null ? builder.createString(this.unitDes!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const rank = (this.rank !== null ? builder.createString(this.rank!) : 0);
  const duty = (this.duty !== null ? builder.createString(this.duty!) : 0);
  const dutyTeleFreqNums = DataLinkMultiDuty_Ingest.createDutyTeleFreqNumsVector(builder, builder.createObjectOffsetList(this.dutyTeleFreqNums));
  const multiDutyVoiceCoord = DataLinkMultiDuty_Ingest.createMultiDutyVoiceCoordVector(builder, builder.createObjectOffsetList(this.multiDutyVoiceCoord));

  return DataLinkMultiDuty_Ingest.createDataLinkMultiDuty_Ingest(builder,
    unitDes,
    name,
    rank,
    duty,
    dutyTeleFreqNums,
    multiDutyVoiceCoord
  );
}
}
