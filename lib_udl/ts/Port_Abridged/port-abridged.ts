// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Port_Abridged_dataMode_Enum } from './port-abridged-data-mode-enum.js';


/**
 * /// Properties and characteristics of a maritime port, which includes location, port identifiers, and remarks.
 */
export class Port_Abridged implements flatbuffers.IUnpackableObject<Port_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Port_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPort_Abridged(bb:flatbuffers.ByteBuffer, obj?:Port_Abridged):Port_Abridged {
  return (obj || new Port_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPort_Abridged(bb:flatbuffers.ByteBuffer, obj?:Port_Abridged):Port_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Port_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('PORT');
}

/**
 * Unique identifier of the record, auto-generated by the system if not provided on create operations.
 * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Site Entity associated with the Port record.
 * Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSite():string|null
idSite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalId():string|null
externalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The five-character United Nations Code for Trade and Transport Locations (UN/LOCODE) of this port.  The first two letters of the code contains the ISO 3166-1 alpha-2 country designation of the port country. The three remaining characters identify a location within that country.  Letters are preferred, but if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid confusion with the letters "O" and "I" respectively.
 * Example: /// Example: CAVAN
 * Constraints: Minimum length = 0, Maximum length = 5
 */
locode():string|null
locode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
locode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of this port.
 * Example: /// Example: Vancouver
 * Constraints: Minimum length = 0, Maximum length = 64
 */
portName():string|null
portName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
portName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of harbor for this port. The harbor type refers to how a port is physically positioned.
 * COASTAL BREAKWATER (CB)
 * COASTAL NATURAL (CN)
 * COASTAL TIDE GATE  (CT)
 * LAKE OR CANAL (LC)
 * OPEN ROADSTEAD (OR)
 * RIVER BASIN (RB)
 * RIVER NATURAL (RN)
 * RIVER TIDE GATE (RT)
 * TYPHOON HARBOR  (TH).
 * Example: /// Example: COASTAL NATURAL
 * Constraints: Minimum length = 0, Maximum length = 64
 */
harborType():string|null
harborType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
harborType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The size of the harbor for this port measured in square kilometers.
 * Example: /// Example: 160.1
 * Constraints: No constraints specified.
 */
harborSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum allowed vessel draught. Draught is the principal dimensions of any waterborne vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel measured in meters.
 * Example: /// Example: 18.1
 * Constraints: No constraints specified.
 */
maxDraught():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average time for a vessel at this port in hours.
 * Example: /// Example: 41.1
 * Constraints: No constraints specified.
 */
avgDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The tide range of this port in meters.
 * Example: /// Example: 4.1
 * Constraints: No constraints specified.
 */
tideRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The shelter afforded from wind, sea, and swell refers to the area where normal port operations are conducted, usually the wharf area. Shelter afforded by the anchorage area may be given for ports where cargo is handled by lighters. Values given are EXCELLENT, FAIR, GOOD, POOR, or NONE.
 * Example: /// Example: EXCELLENT
 * Constraints: Minimum length = 0, Maximum length = 36
 */
shelter():string|null
shelter(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shelter(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating whether a pilot is required at this port.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
pilotReqd():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 179.1
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The country where this port is located.
 * Example: /// Example: US
 * Constraints: Minimum length = 0, Maximum length = 4
 */
countryCode():string|null
countryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 64
 */
dataMode():Port_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Port_Abridged_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPort_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(22);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdSite(builder:flatbuffers.Builder, idSiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idSiteOffset, 0);
}

static addExternalId(builder:flatbuffers.Builder, externalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, externalIdOffset, 0);
}

static addLocode(builder:flatbuffers.Builder, locodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, locodeOffset, 0);
}

static addPortName(builder:flatbuffers.Builder, portNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, portNameOffset, 0);
}

static addHarborType(builder:flatbuffers.Builder, harborTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, harborTypeOffset, 0);
}

static addHarborSize(builder:flatbuffers.Builder, harborSize:number) {
  builder.addFieldFloat64(7, harborSize, 0.0);
}

static addMaxDraught(builder:flatbuffers.Builder, maxDraught:number) {
  builder.addFieldFloat64(8, maxDraught, 0.0);
}

static addAvgDuration(builder:flatbuffers.Builder, avgDuration:number) {
  builder.addFieldFloat64(9, avgDuration, 0.0);
}

static addTideRange(builder:flatbuffers.Builder, tideRange:number) {
  builder.addFieldFloat64(10, tideRange, 0.0);
}

static addShelter(builder:flatbuffers.Builder, shelterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, shelterOffset, 0);
}

static addPilotReqd(builder:flatbuffers.Builder, pilotReqd:boolean) {
  builder.addFieldInt8(12, +pilotReqd, +false);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(13, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(14, lon, 0.0);
}

static addCountryCode(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, countryCodeOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Port_Abridged_dataMode_Enum) {
  builder.addFieldInt8(20, dataMode, Port_Abridged_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, origNetworkOffset, 0);
}

static endPort_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPort_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'PORT');
}

static finishSizePrefixedPort_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'PORT', true);
}

static createPort_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idSiteOffset:flatbuffers.Offset, externalIdOffset:flatbuffers.Offset, locodeOffset:flatbuffers.Offset, portNameOffset:flatbuffers.Offset, harborTypeOffset:flatbuffers.Offset, harborSize:number, maxDraught:number, avgDuration:number, tideRange:number, shelterOffset:flatbuffers.Offset, pilotReqd:boolean, lat:number, lon:number, countryCodeOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:Port_Abridged_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  Port_Abridged.startPort_Abridged(builder);
  Port_Abridged.addId(builder, idOffset);
  Port_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  Port_Abridged.addIdSite(builder, idSiteOffset);
  Port_Abridged.addExternalId(builder, externalIdOffset);
  Port_Abridged.addLocode(builder, locodeOffset);
  Port_Abridged.addPortName(builder, portNameOffset);
  Port_Abridged.addHarborType(builder, harborTypeOffset);
  Port_Abridged.addHarborSize(builder, harborSize);
  Port_Abridged.addMaxDraught(builder, maxDraught);
  Port_Abridged.addAvgDuration(builder, avgDuration);
  Port_Abridged.addTideRange(builder, tideRange);
  Port_Abridged.addShelter(builder, shelterOffset);
  Port_Abridged.addPilotReqd(builder, pilotReqd);
  Port_Abridged.addLat(builder, lat);
  Port_Abridged.addLon(builder, lon);
  Port_Abridged.addCountryCode(builder, countryCodeOffset);
  Port_Abridged.addCreatedAt(builder, createdAtOffset);
  Port_Abridged.addCreatedBy(builder, createdByOffset);
  Port_Abridged.addSource(builder, sourceOffset);
  Port_Abridged.addOrigin(builder, originOffset);
  Port_Abridged.addDataMode(builder, dataMode);
  Port_Abridged.addOrigNetwork(builder, origNetworkOffset);
  return Port_Abridged.endPort_Abridged(builder);
}

unpack(): Port_AbridgedT {
  return new Port_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.idSite(),
    this.externalId(),
    this.locode(),
    this.portName(),
    this.harborType(),
    this.harborSize(),
    this.maxDraught(),
    this.avgDuration(),
    this.tideRange(),
    this.shelter(),
    this.pilotReqd(),
    this.lat(),
    this.lon(),
    this.countryCode(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: Port_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idSite = this.idSite();
  _o.externalId = this.externalId();
  _o.locode = this.locode();
  _o.portName = this.portName();
  _o.harborType = this.harborType();
  _o.harborSize = this.harborSize();
  _o.maxDraught = this.maxDraught();
  _o.avgDuration = this.avgDuration();
  _o.tideRange = this.tideRange();
  _o.shelter = this.shelter();
  _o.pilotReqd = this.pilotReqd();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.countryCode = this.countryCode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class Port_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idSite: string|Uint8Array|null = null,
  public externalId: string|Uint8Array|null = null,
  public locode: string|Uint8Array|null = null,
  public portName: string|Uint8Array|null = null,
  public harborType: string|Uint8Array|null = null,
  public harborSize: number = 0.0,
  public maxDraught: number = 0.0,
  public avgDuration: number = 0.0,
  public tideRange: number = 0.0,
  public shelter: string|Uint8Array|null = null,
  public pilotReqd: boolean = false,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public countryCode: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: Port_Abridged_dataMode_Enum = Port_Abridged_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idSite = (this.idSite !== null ? builder.createString(this.idSite!) : 0);
  const externalId = (this.externalId !== null ? builder.createString(this.externalId!) : 0);
  const locode = (this.locode !== null ? builder.createString(this.locode!) : 0);
  const portName = (this.portName !== null ? builder.createString(this.portName!) : 0);
  const harborType = (this.harborType !== null ? builder.createString(this.harborType!) : 0);
  const shelter = (this.shelter !== null ? builder.createString(this.shelter!) : 0);
  const countryCode = (this.countryCode !== null ? builder.createString(this.countryCode!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Port_Abridged.createPort_Abridged(builder,
    id,
    classificationMarking,
    idSite,
    externalId,
    locode,
    portName,
    harborType,
    this.harborSize,
    this.maxDraught,
    this.avgDuration,
    this.tideRange,
    shelter,
    this.pilotReqd,
    this.lat,
    this.lon,
    countryCode,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
