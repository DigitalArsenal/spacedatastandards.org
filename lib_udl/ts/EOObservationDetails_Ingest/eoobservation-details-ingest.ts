// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { EOObservationDetails_Ingest_dataMode_Enum } from './eoobservation-details-ingest-data-mode-enum.js';


/**
 * /// Model representation of additional detailed observation data for electro-optical based sensor phenomenologies.
 */
export class EOObservationDetails_Ingest implements flatbuffers.IUnpackableObject<EOObservationDetails_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EOObservationDetails_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEOObservationDetails_Ingest(bb:flatbuffers.ByteBuffer, obj?:EOObservationDetails_Ingest):EOObservationDetails_Ingest {
  return (obj || new EOObservationDetails_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEOObservationDetails_Ingest(bb:flatbuffers.ByteBuffer, obj?:EOObservationDetails_Ingest):EOObservationDetails_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EOObservationDetails_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EOOB');
}

/**
 * Unique identifier of the parent EOObservation.
 * Example: /// Example: EOOBSERVATION-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idEoobservation():string|null
idEoobservation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idEoobservation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
obTime():string|null
obTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
predictedRa():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
predictedDeclination():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
predictedAzimuth():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
predictedElevation():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
sunAzimuth():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
sunElevation():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The value is the number of spectral filters used.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
numSpectralFilters():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
 * Example: /// Example: ['Keyword1', 'Keyword2']
 * Constraints: No constraints specified.
 */
spectralFilters(index: number):string
spectralFilters(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
spectralFilters(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

spectralFiltersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
spectralZmfl(index: number):string
spectralZmfl(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
spectralZmfl(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

spectralZmflLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
spectralFilterSolarMag(index: number):string
spectralFilterSolarMag(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
spectralFilterSolarMag(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

spectralFilterSolarMagLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
zeroPoints(index: number):string
zeroPoints(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
zeroPoints(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

zeroPointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
zeroPointsUnc(index: number):string
zeroPointsUnc(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
zeroPointsUnc(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

zeroPointsUncLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
extinctionCoeffs(index: number):string
extinctionCoeffs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
extinctionCoeffs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

extinctionCoeffsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
extinctionCoeffsUnc(index: number):string
extinctionCoeffsUnc(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
extinctionCoeffsUnc(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

extinctionCoeffsUncLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
colorCoeffs(index: number):string
colorCoeffs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
colorCoeffs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

colorCoeffsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The value is the number of neutral density filters used.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
numNeutralDensityFilters():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
 * Example: /// Example: ['numNeutralDensityFilters1', 'numNeutralDensityFilters2']
 * Constraints: No constraints specified.
 */
neutralDensityFilterNames(index: number):string
neutralDensityFilterNames(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
neutralDensityFilterNames(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

neutralDensityFilterNamesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
neutralDensityFilterTransmissions(index: number):string
neutralDensityFilterTransmissions(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
neutralDensityFilterTransmissions(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

neutralDensityFilterTransmissionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
neutralDensityFilterTransmissionsUnc(index: number):string
neutralDensityFilterTransmissionsUnc(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
neutralDensityFilterTransmissionsUnc(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

neutralDensityFilterTransmissionsUncLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.
 * Example: /// Example: 234.2
 * Constraints: No constraints specified.
 */
gain():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor instantaneous field of view (ratio of pixel pitch to focal length).
 * Example: /// Example: 0.2
 * Constraints: No constraints specified.
 */
ifov():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pixel array size (width) in pixels.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
pixelArrayWidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Pixel array size (height) in pixels.
 * Example: /// Example: 23
 * Constraints: No constraints specified.
 */
pixelArrayHeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Minimum valid pixel value, this is typically 0.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
pixelMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.
 * Example: /// Example: 256
 * Constraints: No constraints specified.
 */
pixelMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).
 * Example: /// Example: 0.1
 * Constraints: No constraints specified.
 */
centroidRow():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
centroidColumn():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spatial variance of image distribution in vertical direction measured in pixels squared.
 * Example: /// Example: 0.1
 * Constraints: No constraints specified.
 */
rowVariance():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spatial variance of image distribution in horizontal direction measured in pixels squared.
 * Example: /// Example: 0.1
 * Constraints: No constraints specified.
 */
columnVariance():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.
 * Example: /// Example: 0.01
 * Constraints: No constraints specified.
 */
rowColCov():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
 * Example: /// Example: [-127.153, -126.153, -125.153]
 * Constraints: No constraints specified.
 */
distFromStreakCenter(index: number):string
distFromStreakCenter(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
distFromStreakCenter(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

distFromStreakCenterLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
 * Example: /// Example: [21.01, 21.382, 21.725]
 * Constraints: No constraints specified.
 */
surfBrightness(index: number):string
surfBrightness(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
surfBrightness(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

surfBrightnessLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
 * Example: /// Example: [0.165, 0.165, 0.165]
 * Constraints: No constraints specified.
 */
surfBrightnessUnc(index: number):string
surfBrightnessUnc(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
surfBrightnessUnc(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

surfBrightnessUncLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Uncertainty in the times reported in UTC in seconds.
 * Example: /// Example: 13.1
 * Constraints: No constraints specified.
 */
timesUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Operating temperature of CCD recorded during exposure or measured during calibrations in K.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
ccdTemp():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.
 * Example: /// Example: 23
 * Constraints: No constraints specified.
 */
currentSpectralFilterNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The reference number n, in neutralDensityFilters for the currently used neutral density filter.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
currentNeutralDensityFilterNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The number of pixels binned horizontally.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
binningHoriz():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The number of pixels binned vertically.
 * Example: /// Example: 14
 * Constraints: No constraints specified.
 */
binningVert():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of stars used in photometric fit count.
 * Example: /// Example: 23
 * Constraints: No constraints specified.
 */
pcalNumStars():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The x centroid position on the CCD of the target object in pixels.
 * Example: /// Example: 123.3
 * Constraints: No constraints specified.
 */
ccdObjPosX():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The y centroid position on the CCD of the target object in pixels.
 * Example: /// Example: 321.4
 * Constraints: No constraints specified.
 */
ccdObjPosY():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.
 * Example: /// Example: 133.2
 * Constraints: No constraints specified.
 */
ccdObjWidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.
 * Example: /// Example: 4134.1
 * Constraints: No constraints specified.
 */
backgroundSignal():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
backgroundSignalUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
peakApertureCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Peak Background Raw Counts is the largest pixel value used in background signal.
 * Example: /// Example: 321
 * Constraints: No constraints specified.
 */
peakBackgroundCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).
 * Example: /// Example: 13.4
 * Constraints: No constraints specified.
 */
snrEst():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.
 * Example: /// Example: 123.3
 * Constraints: No constraints specified.
 */
magInstrumental():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in the instrumental magnitude.
 * Example: /// Example: 123.3
 * Constraints: No constraints specified.
 */
magInstrumentalUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optical Cross Section computed in units m(2)/ster.
 * Example: /// Example: 123.3
 * Constraints: No constraints specified.
 */
opticalCrossSection():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in Optical Cross Section computed in units m(2)/ster.
 * Example: /// Example: 123.3
 * Constraints: No constraints specified.
 */
opticalCrossSectionUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sun state vector in ECI J2000 coordinate frame in km.
 * Example: /// Example: 123.3
 * Constraints: No constraints specified.
 */
sunStatePosX():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sun state vector in ECI J2000 coordinate frame in km.
 * Example: /// Example: 123.3
 * Constraints: No constraints specified.
 */
sunStatePosY():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sun state vector in ECI J2000 coordinate frame in km.
 * Example: /// Example: 123.3
 * Constraints: No constraints specified.
 */
sunStatePosZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sun state vector in ECI J2000 coordinate frame in km/sec.
 * Example: /// Example: 123.3
 * Constraints: No constraints specified.
 */
sunStateVelX():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sun state vector in ECI J2000 coordinate frame in km/sec.
 * Example: /// Example: 123.3
 * Constraints: No constraints specified.
 */
sunStateVelY():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sun state vector in ECI J2000 coordinate frame in km/sec.
 * Example: /// Example: 123.3
 * Constraints: No constraints specified.
 */
sunStateVelZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
numCatalogStars():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of detected stars in the FOV with the target object. Helps identify frames with clouds.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
numDetectedStars():number {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
numCorrelatedStars():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
predictedRaUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
predictedDeclinationUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance (x^2) in measured Right Ascension (X) in deg^2.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
raCov():number {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance (Y^2) in measured declination (Y) in deg^2.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
declinationCov():number {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance (XY) in measured ra/declination (XY) in deg^2.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
raDeclinationCov():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * World Coordinate System (WCS) X pixel origin in astrometric fit.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
acalCrPixX():number {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * World Coordinate System (WCS) Y pixel origin in astrometric fit.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
acalCrPixY():number {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
acalCrValX():number {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
acalCrValY():number {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of stars used in astrometric fit.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
acalNumStars():number {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Distance from the target object to the sun during the observation in meters.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
objSunRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
phaseAngBisect():number {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
solarDiskFrac():number {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time off element set.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
toes():number {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Degrees Off Element Set.
 * Example: /// Example: 123.2
 * Constraints: No constraints specified.
 */
does():number {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Source of the data, will be set to EOObservation source if blank.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * , will be set to EOObservation dataMode if blank.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():EOObservationDetails_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : EOObservationDetails_Ingest_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEOObservationDetails_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(83);
}

static addIdEoobservation(builder:flatbuffers.Builder, idEoobservationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idEoobservationOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addObTime(builder:flatbuffers.Builder, obTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, obTimeOffset, 0);
}

static addPredictedRa(builder:flatbuffers.Builder, predictedRa:number) {
  builder.addFieldFloat64(3, predictedRa, 0.0);
}

static addPredictedDeclination(builder:flatbuffers.Builder, predictedDeclination:number) {
  builder.addFieldFloat64(4, predictedDeclination, 0.0);
}

static addPredictedAzimuth(builder:flatbuffers.Builder, predictedAzimuth:number) {
  builder.addFieldFloat64(5, predictedAzimuth, 0.0);
}

static addPredictedElevation(builder:flatbuffers.Builder, predictedElevation:number) {
  builder.addFieldFloat64(6, predictedElevation, 0.0);
}

static addSunAzimuth(builder:flatbuffers.Builder, sunAzimuth:number) {
  builder.addFieldFloat64(7, sunAzimuth, 0.0);
}

static addSunElevation(builder:flatbuffers.Builder, sunElevation:number) {
  builder.addFieldFloat64(8, sunElevation, 0.0);
}

static addNumSpectralFilters(builder:flatbuffers.Builder, numSpectralFilters:number) {
  builder.addFieldInt32(9, numSpectralFilters, 0);
}

static addSpectralFilters(builder:flatbuffers.Builder, spectralFiltersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, spectralFiltersOffset, 0);
}

static createSpectralFiltersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSpectralFiltersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSpectralZmfl(builder:flatbuffers.Builder, spectralZmflOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, spectralZmflOffset, 0);
}

static createSpectralZmflVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSpectralZmflVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSpectralFilterSolarMag(builder:flatbuffers.Builder, spectralFilterSolarMagOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, spectralFilterSolarMagOffset, 0);
}

static createSpectralFilterSolarMagVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSpectralFilterSolarMagVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addZeroPoints(builder:flatbuffers.Builder, zeroPointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, zeroPointsOffset, 0);
}

static createZeroPointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startZeroPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addZeroPointsUnc(builder:flatbuffers.Builder, zeroPointsUncOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, zeroPointsUncOffset, 0);
}

static createZeroPointsUncVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startZeroPointsUncVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addExtinctionCoeffs(builder:flatbuffers.Builder, extinctionCoeffsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, extinctionCoeffsOffset, 0);
}

static createExtinctionCoeffsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExtinctionCoeffsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addExtinctionCoeffsUnc(builder:flatbuffers.Builder, extinctionCoeffsUncOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, extinctionCoeffsUncOffset, 0);
}

static createExtinctionCoeffsUncVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExtinctionCoeffsUncVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addColorCoeffs(builder:flatbuffers.Builder, colorCoeffsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, colorCoeffsOffset, 0);
}

static createColorCoeffsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startColorCoeffsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNumNeutralDensityFilters(builder:flatbuffers.Builder, numNeutralDensityFilters:number) {
  builder.addFieldInt32(18, numNeutralDensityFilters, 0);
}

static addNeutralDensityFilterNames(builder:flatbuffers.Builder, neutralDensityFilterNamesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, neutralDensityFilterNamesOffset, 0);
}

static createNeutralDensityFilterNamesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNeutralDensityFilterNamesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNeutralDensityFilterTransmissions(builder:flatbuffers.Builder, neutralDensityFilterTransmissionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, neutralDensityFilterTransmissionsOffset, 0);
}

static createNeutralDensityFilterTransmissionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNeutralDensityFilterTransmissionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNeutralDensityFilterTransmissionsUnc(builder:flatbuffers.Builder, neutralDensityFilterTransmissionsUncOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, neutralDensityFilterTransmissionsUncOffset, 0);
}

static createNeutralDensityFilterTransmissionsUncVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNeutralDensityFilterTransmissionsUncVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGain(builder:flatbuffers.Builder, gain:number) {
  builder.addFieldFloat64(22, gain, 0.0);
}

static addIfov(builder:flatbuffers.Builder, ifov:number) {
  builder.addFieldFloat64(23, ifov, 0.0);
}

static addPixelArrayWidth(builder:flatbuffers.Builder, pixelArrayWidth:number) {
  builder.addFieldInt32(24, pixelArrayWidth, 0);
}

static addPixelArrayHeight(builder:flatbuffers.Builder, pixelArrayHeight:number) {
  builder.addFieldInt32(25, pixelArrayHeight, 0);
}

static addPixelMin(builder:flatbuffers.Builder, pixelMin:number) {
  builder.addFieldInt32(26, pixelMin, 0);
}

static addPixelMax(builder:flatbuffers.Builder, pixelMax:number) {
  builder.addFieldInt32(27, pixelMax, 0);
}

static addCentroidRow(builder:flatbuffers.Builder, centroidRow:number) {
  builder.addFieldFloat64(28, centroidRow, 0.0);
}

static addCentroidColumn(builder:flatbuffers.Builder, centroidColumn:number) {
  builder.addFieldFloat64(29, centroidColumn, 0.0);
}

static addRowVariance(builder:flatbuffers.Builder, rowVariance:number) {
  builder.addFieldFloat64(30, rowVariance, 0.0);
}

static addColumnVariance(builder:flatbuffers.Builder, columnVariance:number) {
  builder.addFieldFloat64(31, columnVariance, 0.0);
}

static addRowColCov(builder:flatbuffers.Builder, rowColCov:number) {
  builder.addFieldFloat64(32, rowColCov, 0.0);
}

static addDistFromStreakCenter(builder:flatbuffers.Builder, distFromStreakCenterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, distFromStreakCenterOffset, 0);
}

static createDistFromStreakCenterVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDistFromStreakCenterVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSurfBrightness(builder:flatbuffers.Builder, surfBrightnessOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, surfBrightnessOffset, 0);
}

static createSurfBrightnessVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSurfBrightnessVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSurfBrightnessUnc(builder:flatbuffers.Builder, surfBrightnessUncOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, surfBrightnessUncOffset, 0);
}

static createSurfBrightnessUncVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSurfBrightnessUncVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTimesUnc(builder:flatbuffers.Builder, timesUnc:number) {
  builder.addFieldFloat64(36, timesUnc, 0.0);
}

static addCcdTemp(builder:flatbuffers.Builder, ccdTemp:number) {
  builder.addFieldFloat64(37, ccdTemp, 0.0);
}

static addCurrentSpectralFilterNum(builder:flatbuffers.Builder, currentSpectralFilterNum:number) {
  builder.addFieldInt32(38, currentSpectralFilterNum, 0);
}

static addCurrentNeutralDensityFilterNum(builder:flatbuffers.Builder, currentNeutralDensityFilterNum:number) {
  builder.addFieldInt32(39, currentNeutralDensityFilterNum, 0);
}

static addBinningHoriz(builder:flatbuffers.Builder, binningHoriz:number) {
  builder.addFieldInt32(40, binningHoriz, 0);
}

static addBinningVert(builder:flatbuffers.Builder, binningVert:number) {
  builder.addFieldInt32(41, binningVert, 0);
}

static addPcalNumStars(builder:flatbuffers.Builder, pcalNumStars:number) {
  builder.addFieldInt32(42, pcalNumStars, 0);
}

static addCcdObjPosX(builder:flatbuffers.Builder, ccdObjPosX:number) {
  builder.addFieldFloat64(43, ccdObjPosX, 0.0);
}

static addCcdObjPosY(builder:flatbuffers.Builder, ccdObjPosY:number) {
  builder.addFieldFloat64(44, ccdObjPosY, 0.0);
}

static addCcdObjWidth(builder:flatbuffers.Builder, ccdObjWidth:number) {
  builder.addFieldFloat64(45, ccdObjWidth, 0.0);
}

static addBackgroundSignal(builder:flatbuffers.Builder, backgroundSignal:number) {
  builder.addFieldFloat64(46, backgroundSignal, 0.0);
}

static addBackgroundSignalUnc(builder:flatbuffers.Builder, backgroundSignalUnc:number) {
  builder.addFieldFloat64(47, backgroundSignalUnc, 0.0);
}

static addPeakApertureCount(builder:flatbuffers.Builder, peakApertureCount:number) {
  builder.addFieldFloat64(48, peakApertureCount, 0.0);
}

static addPeakBackgroundCount(builder:flatbuffers.Builder, peakBackgroundCount:number) {
  builder.addFieldInt32(49, peakBackgroundCount, 0);
}

static addSnrEst(builder:flatbuffers.Builder, snrEst:number) {
  builder.addFieldFloat64(50, snrEst, 0.0);
}

static addMagInstrumental(builder:flatbuffers.Builder, magInstrumental:number) {
  builder.addFieldFloat64(51, magInstrumental, 0.0);
}

static addMagInstrumentalUnc(builder:flatbuffers.Builder, magInstrumentalUnc:number) {
  builder.addFieldFloat64(52, magInstrumentalUnc, 0.0);
}

static addOpticalCrossSection(builder:flatbuffers.Builder, opticalCrossSection:number) {
  builder.addFieldFloat64(53, opticalCrossSection, 0.0);
}

static addOpticalCrossSectionUnc(builder:flatbuffers.Builder, opticalCrossSectionUnc:number) {
  builder.addFieldFloat64(54, opticalCrossSectionUnc, 0.0);
}

static addSunStatePosX(builder:flatbuffers.Builder, sunStatePosX:number) {
  builder.addFieldFloat64(55, sunStatePosX, 0.0);
}

static addSunStatePosY(builder:flatbuffers.Builder, sunStatePosY:number) {
  builder.addFieldFloat64(56, sunStatePosY, 0.0);
}

static addSunStatePosZ(builder:flatbuffers.Builder, sunStatePosZ:number) {
  builder.addFieldFloat64(57, sunStatePosZ, 0.0);
}

static addSunStateVelX(builder:flatbuffers.Builder, sunStateVelX:number) {
  builder.addFieldFloat64(58, sunStateVelX, 0.0);
}

static addSunStateVelY(builder:flatbuffers.Builder, sunStateVelY:number) {
  builder.addFieldFloat64(59, sunStateVelY, 0.0);
}

static addSunStateVelZ(builder:flatbuffers.Builder, sunStateVelZ:number) {
  builder.addFieldFloat64(60, sunStateVelZ, 0.0);
}

static addNumCatalogStars(builder:flatbuffers.Builder, numCatalogStars:number) {
  builder.addFieldInt32(61, numCatalogStars, 0);
}

static addNumDetectedStars(builder:flatbuffers.Builder, numDetectedStars:number) {
  builder.addFieldInt32(62, numDetectedStars, 0);
}

static addNumCorrelatedStars(builder:flatbuffers.Builder, numCorrelatedStars:number) {
  builder.addFieldInt32(63, numCorrelatedStars, 0);
}

static addPredictedRaUnc(builder:flatbuffers.Builder, predictedRaUnc:number) {
  builder.addFieldFloat64(64, predictedRaUnc, 0.0);
}

static addPredictedDeclinationUnc(builder:flatbuffers.Builder, predictedDeclinationUnc:number) {
  builder.addFieldFloat64(65, predictedDeclinationUnc, 0.0);
}

static addRaCov(builder:flatbuffers.Builder, raCov:number) {
  builder.addFieldFloat64(66, raCov, 0.0);
}

static addDeclinationCov(builder:flatbuffers.Builder, declinationCov:number) {
  builder.addFieldFloat64(67, declinationCov, 0.0);
}

static addRaDeclinationCov(builder:flatbuffers.Builder, raDeclinationCov:number) {
  builder.addFieldFloat64(68, raDeclinationCov, 0.0);
}

static addAcalCrPixX(builder:flatbuffers.Builder, acalCrPixX:number) {
  builder.addFieldFloat64(69, acalCrPixX, 0.0);
}

static addAcalCrPixY(builder:flatbuffers.Builder, acalCrPixY:number) {
  builder.addFieldFloat64(70, acalCrPixY, 0.0);
}

static addAcalCrValX(builder:flatbuffers.Builder, acalCrValX:number) {
  builder.addFieldFloat64(71, acalCrValX, 0.0);
}

static addAcalCrValY(builder:flatbuffers.Builder, acalCrValY:number) {
  builder.addFieldFloat64(72, acalCrValY, 0.0);
}

static addAcalNumStars(builder:flatbuffers.Builder, acalNumStars:number) {
  builder.addFieldInt32(73, acalNumStars, 0);
}

static addObjSunRange(builder:flatbuffers.Builder, objSunRange:number) {
  builder.addFieldFloat64(74, objSunRange, 0.0);
}

static addPhaseAngBisect(builder:flatbuffers.Builder, phaseAngBisect:number) {
  builder.addFieldFloat64(75, phaseAngBisect, 0.0);
}

static addSolarDiskFrac(builder:flatbuffers.Builder, solarDiskFrac:number) {
  builder.addFieldFloat64(76, solarDiskFrac, 0.0);
}

static addToes(builder:flatbuffers.Builder, toes:number) {
  builder.addFieldFloat64(77, toes, 0.0);
}

static addDoes(builder:flatbuffers.Builder, does:number) {
  builder.addFieldFloat64(78, does, 0.0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(79, sourceOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:EOObservationDetails_Ingest_dataMode_Enum) {
  builder.addFieldInt8(80, dataMode, EOObservationDetails_Ingest_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(81, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(82, createdByOffset, 0);
}

static endEOObservationDetails_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEOObservationDetails_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EOOB');
}

static finishSizePrefixedEOObservationDetails_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EOOB', true);
}

static createEOObservationDetails_Ingest(builder:flatbuffers.Builder, idEoobservationOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, obTimeOffset:flatbuffers.Offset, predictedRa:number, predictedDeclination:number, predictedAzimuth:number, predictedElevation:number, sunAzimuth:number, sunElevation:number, numSpectralFilters:number, spectralFiltersOffset:flatbuffers.Offset, spectralZmflOffset:flatbuffers.Offset, spectralFilterSolarMagOffset:flatbuffers.Offset, zeroPointsOffset:flatbuffers.Offset, zeroPointsUncOffset:flatbuffers.Offset, extinctionCoeffsOffset:flatbuffers.Offset, extinctionCoeffsUncOffset:flatbuffers.Offset, colorCoeffsOffset:flatbuffers.Offset, numNeutralDensityFilters:number, neutralDensityFilterNamesOffset:flatbuffers.Offset, neutralDensityFilterTransmissionsOffset:flatbuffers.Offset, neutralDensityFilterTransmissionsUncOffset:flatbuffers.Offset, gain:number, ifov:number, pixelArrayWidth:number, pixelArrayHeight:number, pixelMin:number, pixelMax:number, centroidRow:number, centroidColumn:number, rowVariance:number, columnVariance:number, rowColCov:number, distFromStreakCenterOffset:flatbuffers.Offset, surfBrightnessOffset:flatbuffers.Offset, surfBrightnessUncOffset:flatbuffers.Offset, timesUnc:number, ccdTemp:number, currentSpectralFilterNum:number, currentNeutralDensityFilterNum:number, binningHoriz:number, binningVert:number, pcalNumStars:number, ccdObjPosX:number, ccdObjPosY:number, ccdObjWidth:number, backgroundSignal:number, backgroundSignalUnc:number, peakApertureCount:number, peakBackgroundCount:number, snrEst:number, magInstrumental:number, magInstrumentalUnc:number, opticalCrossSection:number, opticalCrossSectionUnc:number, sunStatePosX:number, sunStatePosY:number, sunStatePosZ:number, sunStateVelX:number, sunStateVelY:number, sunStateVelZ:number, numCatalogStars:number, numDetectedStars:number, numCorrelatedStars:number, predictedRaUnc:number, predictedDeclinationUnc:number, raCov:number, declinationCov:number, raDeclinationCov:number, acalCrPixX:number, acalCrPixY:number, acalCrValX:number, acalCrValY:number, acalNumStars:number, objSunRange:number, phaseAngBisect:number, solarDiskFrac:number, toes:number, does:number, sourceOffset:flatbuffers.Offset, dataMode:EOObservationDetails_Ingest_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset):flatbuffers.Offset {
  EOObservationDetails_Ingest.startEOObservationDetails_Ingest(builder);
  EOObservationDetails_Ingest.addIdEoobservation(builder, idEoobservationOffset);
  EOObservationDetails_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  EOObservationDetails_Ingest.addObTime(builder, obTimeOffset);
  EOObservationDetails_Ingest.addPredictedRa(builder, predictedRa);
  EOObservationDetails_Ingest.addPredictedDeclination(builder, predictedDeclination);
  EOObservationDetails_Ingest.addPredictedAzimuth(builder, predictedAzimuth);
  EOObservationDetails_Ingest.addPredictedElevation(builder, predictedElevation);
  EOObservationDetails_Ingest.addSunAzimuth(builder, sunAzimuth);
  EOObservationDetails_Ingest.addSunElevation(builder, sunElevation);
  EOObservationDetails_Ingest.addNumSpectralFilters(builder, numSpectralFilters);
  EOObservationDetails_Ingest.addSpectralFilters(builder, spectralFiltersOffset);
  EOObservationDetails_Ingest.addSpectralZmfl(builder, spectralZmflOffset);
  EOObservationDetails_Ingest.addSpectralFilterSolarMag(builder, spectralFilterSolarMagOffset);
  EOObservationDetails_Ingest.addZeroPoints(builder, zeroPointsOffset);
  EOObservationDetails_Ingest.addZeroPointsUnc(builder, zeroPointsUncOffset);
  EOObservationDetails_Ingest.addExtinctionCoeffs(builder, extinctionCoeffsOffset);
  EOObservationDetails_Ingest.addExtinctionCoeffsUnc(builder, extinctionCoeffsUncOffset);
  EOObservationDetails_Ingest.addColorCoeffs(builder, colorCoeffsOffset);
  EOObservationDetails_Ingest.addNumNeutralDensityFilters(builder, numNeutralDensityFilters);
  EOObservationDetails_Ingest.addNeutralDensityFilterNames(builder, neutralDensityFilterNamesOffset);
  EOObservationDetails_Ingest.addNeutralDensityFilterTransmissions(builder, neutralDensityFilterTransmissionsOffset);
  EOObservationDetails_Ingest.addNeutralDensityFilterTransmissionsUnc(builder, neutralDensityFilterTransmissionsUncOffset);
  EOObservationDetails_Ingest.addGain(builder, gain);
  EOObservationDetails_Ingest.addIfov(builder, ifov);
  EOObservationDetails_Ingest.addPixelArrayWidth(builder, pixelArrayWidth);
  EOObservationDetails_Ingest.addPixelArrayHeight(builder, pixelArrayHeight);
  EOObservationDetails_Ingest.addPixelMin(builder, pixelMin);
  EOObservationDetails_Ingest.addPixelMax(builder, pixelMax);
  EOObservationDetails_Ingest.addCentroidRow(builder, centroidRow);
  EOObservationDetails_Ingest.addCentroidColumn(builder, centroidColumn);
  EOObservationDetails_Ingest.addRowVariance(builder, rowVariance);
  EOObservationDetails_Ingest.addColumnVariance(builder, columnVariance);
  EOObservationDetails_Ingest.addRowColCov(builder, rowColCov);
  EOObservationDetails_Ingest.addDistFromStreakCenter(builder, distFromStreakCenterOffset);
  EOObservationDetails_Ingest.addSurfBrightness(builder, surfBrightnessOffset);
  EOObservationDetails_Ingest.addSurfBrightnessUnc(builder, surfBrightnessUncOffset);
  EOObservationDetails_Ingest.addTimesUnc(builder, timesUnc);
  EOObservationDetails_Ingest.addCcdTemp(builder, ccdTemp);
  EOObservationDetails_Ingest.addCurrentSpectralFilterNum(builder, currentSpectralFilterNum);
  EOObservationDetails_Ingest.addCurrentNeutralDensityFilterNum(builder, currentNeutralDensityFilterNum);
  EOObservationDetails_Ingest.addBinningHoriz(builder, binningHoriz);
  EOObservationDetails_Ingest.addBinningVert(builder, binningVert);
  EOObservationDetails_Ingest.addPcalNumStars(builder, pcalNumStars);
  EOObservationDetails_Ingest.addCcdObjPosX(builder, ccdObjPosX);
  EOObservationDetails_Ingest.addCcdObjPosY(builder, ccdObjPosY);
  EOObservationDetails_Ingest.addCcdObjWidth(builder, ccdObjWidth);
  EOObservationDetails_Ingest.addBackgroundSignal(builder, backgroundSignal);
  EOObservationDetails_Ingest.addBackgroundSignalUnc(builder, backgroundSignalUnc);
  EOObservationDetails_Ingest.addPeakApertureCount(builder, peakApertureCount);
  EOObservationDetails_Ingest.addPeakBackgroundCount(builder, peakBackgroundCount);
  EOObservationDetails_Ingest.addSnrEst(builder, snrEst);
  EOObservationDetails_Ingest.addMagInstrumental(builder, magInstrumental);
  EOObservationDetails_Ingest.addMagInstrumentalUnc(builder, magInstrumentalUnc);
  EOObservationDetails_Ingest.addOpticalCrossSection(builder, opticalCrossSection);
  EOObservationDetails_Ingest.addOpticalCrossSectionUnc(builder, opticalCrossSectionUnc);
  EOObservationDetails_Ingest.addSunStatePosX(builder, sunStatePosX);
  EOObservationDetails_Ingest.addSunStatePosY(builder, sunStatePosY);
  EOObservationDetails_Ingest.addSunStatePosZ(builder, sunStatePosZ);
  EOObservationDetails_Ingest.addSunStateVelX(builder, sunStateVelX);
  EOObservationDetails_Ingest.addSunStateVelY(builder, sunStateVelY);
  EOObservationDetails_Ingest.addSunStateVelZ(builder, sunStateVelZ);
  EOObservationDetails_Ingest.addNumCatalogStars(builder, numCatalogStars);
  EOObservationDetails_Ingest.addNumDetectedStars(builder, numDetectedStars);
  EOObservationDetails_Ingest.addNumCorrelatedStars(builder, numCorrelatedStars);
  EOObservationDetails_Ingest.addPredictedRaUnc(builder, predictedRaUnc);
  EOObservationDetails_Ingest.addPredictedDeclinationUnc(builder, predictedDeclinationUnc);
  EOObservationDetails_Ingest.addRaCov(builder, raCov);
  EOObservationDetails_Ingest.addDeclinationCov(builder, declinationCov);
  EOObservationDetails_Ingest.addRaDeclinationCov(builder, raDeclinationCov);
  EOObservationDetails_Ingest.addAcalCrPixX(builder, acalCrPixX);
  EOObservationDetails_Ingest.addAcalCrPixY(builder, acalCrPixY);
  EOObservationDetails_Ingest.addAcalCrValX(builder, acalCrValX);
  EOObservationDetails_Ingest.addAcalCrValY(builder, acalCrValY);
  EOObservationDetails_Ingest.addAcalNumStars(builder, acalNumStars);
  EOObservationDetails_Ingest.addObjSunRange(builder, objSunRange);
  EOObservationDetails_Ingest.addPhaseAngBisect(builder, phaseAngBisect);
  EOObservationDetails_Ingest.addSolarDiskFrac(builder, solarDiskFrac);
  EOObservationDetails_Ingest.addToes(builder, toes);
  EOObservationDetails_Ingest.addDoes(builder, does);
  EOObservationDetails_Ingest.addSource(builder, sourceOffset);
  EOObservationDetails_Ingest.addDataMode(builder, dataMode);
  EOObservationDetails_Ingest.addCreatedAt(builder, createdAtOffset);
  EOObservationDetails_Ingest.addCreatedBy(builder, createdByOffset);
  return EOObservationDetails_Ingest.endEOObservationDetails_Ingest(builder);
}

unpack(): EOObservationDetails_IngestT {
  return new EOObservationDetails_IngestT(
    this.idEoobservation(),
    this.classificationMarking(),
    this.obTime(),
    this.predictedRa(),
    this.predictedDeclination(),
    this.predictedAzimuth(),
    this.predictedElevation(),
    this.sunAzimuth(),
    this.sunElevation(),
    this.numSpectralFilters(),
    this.bb!.createScalarList<string>(this.spectralFilters.bind(this), this.spectralFilters_Length()),
    this.bb!.createScalarList<string>(this.spectralZmfl.bind(this), this.spectralZMFL_Length()),
    this.bb!.createScalarList<string>(this.spectralFilterSolarMag.bind(this), this.spectralFilterSolarMag_Length()),
    this.bb!.createScalarList<string>(this.zeroPoints.bind(this), this.zeroPoints_Length()),
    this.bb!.createScalarList<string>(this.zeroPointsUnc.bind(this), this.zeroPointsUnc_Length()),
    this.bb!.createScalarList<string>(this.extinctionCoeffs.bind(this), this.extinctionCoeffs_Length()),
    this.bb!.createScalarList<string>(this.extinctionCoeffsUnc.bind(this), this.extinctionCoeffsUnc_Length()),
    this.bb!.createScalarList<string>(this.colorCoeffs.bind(this), this.colorCoeffs_Length()),
    this.numNeutralDensityFilters(),
    this.bb!.createScalarList<string>(this.neutralDensityFilterNames.bind(this), this.neutralDensityFilterNames_Length()),
    this.bb!.createScalarList<string>(this.neutralDensityFilterTransmissions.bind(this), this.neutralDensityFilterTransmissions_Length()),
    this.bb!.createScalarList<string>(this.neutralDensityFilterTransmissionsUnc.bind(this), this.neutralDensityFilterTransmissionsUnc_Length()),
    this.gain(),
    this.ifov(),
    this.pixelArrayWidth(),
    this.pixelArrayHeight(),
    this.pixelMin(),
    this.pixelMax(),
    this.centroidRow(),
    this.centroidColumn(),
    this.rowVariance(),
    this.columnVariance(),
    this.rowColCov(),
    this.bb!.createScalarList<string>(this.distFromStreakCenter.bind(this), this.distFromStreakCenter_Length()),
    this.bb!.createScalarList<string>(this.surfBrightness.bind(this), this.surfBrightness_Length()),
    this.bb!.createScalarList<string>(this.surfBrightnessUnc.bind(this), this.surfBrightnessUnc_Length()),
    this.timesUnc(),
    this.ccdTemp(),
    this.currentSpectralFilterNum(),
    this.currentNeutralDensityFilterNum(),
    this.binningHoriz(),
    this.binningVert(),
    this.pcalNumStars(),
    this.ccdObjPosX(),
    this.ccdObjPosY(),
    this.ccdObjWidth(),
    this.backgroundSignal(),
    this.backgroundSignalUnc(),
    this.peakApertureCount(),
    this.peakBackgroundCount(),
    this.snrEst(),
    this.magInstrumental(),
    this.magInstrumentalUnc(),
    this.opticalCrossSection(),
    this.opticalCrossSectionUnc(),
    this.sunStatePosX(),
    this.sunStatePosY(),
    this.sunStatePosZ(),
    this.sunStateVelX(),
    this.sunStateVelY(),
    this.sunStateVelZ(),
    this.numCatalogStars(),
    this.numDetectedStars(),
    this.numCorrelatedStars(),
    this.predictedRaUnc(),
    this.predictedDeclinationUnc(),
    this.raCov(),
    this.declinationCov(),
    this.raDeclinationCov(),
    this.acalCrPixX(),
    this.acalCrPixY(),
    this.acalCrValX(),
    this.acalCrValY(),
    this.acalNumStars(),
    this.objSunRange(),
    this.phaseAngBisect(),
    this.solarDiskFrac(),
    this.toes(),
    this.does(),
    this.source(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy()
  );
}


unpackTo(_o: EOObservationDetails_IngestT): void {
  _o.idEOObservation = this.idEoobservation();
  _o.classificationMarking = this.classificationMarking();
  _o.obTime = this.obTime();
  _o.predictedRa = this.predictedRa();
  _o.predictedDeclination = this.predictedDeclination();
  _o.predictedAzimuth = this.predictedAzimuth();
  _o.predictedElevation = this.predictedElevation();
  _o.sunAzimuth = this.sunAzimuth();
  _o.sunElevation = this.sunElevation();
  _o.numSpectralFilters = this.numSpectralFilters();
  _o.spectralFilters = this.bb!.createScalarList<string>(this.spectralFilters.bind(this), this.spectralFilters_Length());
  _o.spectralZMFL = this.bb!.createScalarList<string>(this.spectralZmfl.bind(this), this.spectralZMFL_Length());
  _o.spectralFilterSolarMag = this.bb!.createScalarList<string>(this.spectralFilterSolarMag.bind(this), this.spectralFilterSolarMag_Length());
  _o.zeroPoints = this.bb!.createScalarList<string>(this.zeroPoints.bind(this), this.zeroPoints_Length());
  _o.zeroPointsUnc = this.bb!.createScalarList<string>(this.zeroPointsUnc.bind(this), this.zeroPointsUnc_Length());
  _o.extinctionCoeffs = this.bb!.createScalarList<string>(this.extinctionCoeffs.bind(this), this.extinctionCoeffs_Length());
  _o.extinctionCoeffsUnc = this.bb!.createScalarList<string>(this.extinctionCoeffsUnc.bind(this), this.extinctionCoeffsUnc_Length());
  _o.colorCoeffs = this.bb!.createScalarList<string>(this.colorCoeffs.bind(this), this.colorCoeffs_Length());
  _o.numNeutralDensityFilters = this.numNeutralDensityFilters();
  _o.neutralDensityFilterNames = this.bb!.createScalarList<string>(this.neutralDensityFilterNames.bind(this), this.neutralDensityFilterNames_Length());
  _o.neutralDensityFilterTransmissions = this.bb!.createScalarList<string>(this.neutralDensityFilterTransmissions.bind(this), this.neutralDensityFilterTransmissions_Length());
  _o.neutralDensityFilterTransmissionsUnc = this.bb!.createScalarList<string>(this.neutralDensityFilterTransmissionsUnc.bind(this), this.neutralDensityFilterTransmissionsUnc_Length());
  _o.gain = this.gain();
  _o.ifov = this.ifov();
  _o.pixelArrayWidth = this.pixelArrayWidth();
  _o.pixelArrayHeight = this.pixelArrayHeight();
  _o.pixelMin = this.pixelMin();
  _o.pixelMax = this.pixelMax();
  _o.centroidRow = this.centroidRow();
  _o.centroidColumn = this.centroidColumn();
  _o.rowVariance = this.rowVariance();
  _o.columnVariance = this.columnVariance();
  _o.rowColCov = this.rowColCov();
  _o.distFromStreakCenter = this.bb!.createScalarList<string>(this.distFromStreakCenter.bind(this), this.distFromStreakCenter_Length());
  _o.surfBrightness = this.bb!.createScalarList<string>(this.surfBrightness.bind(this), this.surfBrightness_Length());
  _o.surfBrightnessUnc = this.bb!.createScalarList<string>(this.surfBrightnessUnc.bind(this), this.surfBrightnessUnc_Length());
  _o.timesUnc = this.timesUnc();
  _o.ccdTemp = this.ccdTemp();
  _o.currentSpectralFilterNum = this.currentSpectralFilterNum();
  _o.currentNeutralDensityFilterNum = this.currentNeutralDensityFilterNum();
  _o.binningHoriz = this.binningHoriz();
  _o.binningVert = this.binningVert();
  _o.pcalNumStars = this.pcalNumStars();
  _o.ccdObjPosX = this.ccdObjPosX();
  _o.ccdObjPosY = this.ccdObjPosY();
  _o.ccdObjWidth = this.ccdObjWidth();
  _o.backgroundSignal = this.backgroundSignal();
  _o.backgroundSignalUnc = this.backgroundSignalUnc();
  _o.peakApertureCount = this.peakApertureCount();
  _o.peakBackgroundCount = this.peakBackgroundCount();
  _o.snrEst = this.snrEst();
  _o.magInstrumental = this.magInstrumental();
  _o.magInstrumentalUnc = this.magInstrumentalUnc();
  _o.opticalCrossSection = this.opticalCrossSection();
  _o.opticalCrossSectionUnc = this.opticalCrossSectionUnc();
  _o.sunStatePosX = this.sunStatePosX();
  _o.sunStatePosY = this.sunStatePosY();
  _o.sunStatePosZ = this.sunStatePosZ();
  _o.sunStateVelX = this.sunStateVelX();
  _o.sunStateVelY = this.sunStateVelY();
  _o.sunStateVelZ = this.sunStateVelZ();
  _o.numCatalogStars = this.numCatalogStars();
  _o.numDetectedStars = this.numDetectedStars();
  _o.numCorrelatedStars = this.numCorrelatedStars();
  _o.predictedRaUnc = this.predictedRaUnc();
  _o.predictedDeclinationUnc = this.predictedDeclinationUnc();
  _o.raCov = this.raCov();
  _o.declinationCov = this.declinationCov();
  _o.raDeclinationCov = this.raDeclinationCov();
  _o.acalCrPixX = this.acalCrPixX();
  _o.acalCrPixY = this.acalCrPixY();
  _o.acalCrValX = this.acalCrValX();
  _o.acalCrValY = this.acalCrValY();
  _o.acalNumStars = this.acalNumStars();
  _o.objSunRange = this.objSunRange();
  _o.phaseAngBisect = this.phaseAngBisect();
  _o.solarDiskFrac = this.solarDiskFrac();
  _o.toes = this.toes();
  _o.does = this.does();
  _o.source = this.source();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
}
}

export class EOObservationDetails_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public idEOObservation: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public obTime: string|Uint8Array|null = null,
  public predictedRa: number = 0.0,
  public predictedDeclination: number = 0.0,
  public predictedAzimuth: number = 0.0,
  public predictedElevation: number = 0.0,
  public sunAzimuth: number = 0.0,
  public sunElevation: number = 0.0,
  public numSpectralFilters: number = 0,
  public spectralFilters: (string)[] = [],
  public spectralZMFL: (string)[] = [],
  public spectralFilterSolarMag: (string)[] = [],
  public zeroPoints: (string)[] = [],
  public zeroPointsUnc: (string)[] = [],
  public extinctionCoeffs: (string)[] = [],
  public extinctionCoeffsUnc: (string)[] = [],
  public colorCoeffs: (string)[] = [],
  public numNeutralDensityFilters: number = 0,
  public neutralDensityFilterNames: (string)[] = [],
  public neutralDensityFilterTransmissions: (string)[] = [],
  public neutralDensityFilterTransmissionsUnc: (string)[] = [],
  public gain: number = 0.0,
  public ifov: number = 0.0,
  public pixelArrayWidth: number = 0,
  public pixelArrayHeight: number = 0,
  public pixelMin: number = 0,
  public pixelMax: number = 0,
  public centroidRow: number = 0.0,
  public centroidColumn: number = 0.0,
  public rowVariance: number = 0.0,
  public columnVariance: number = 0.0,
  public rowColCov: number = 0.0,
  public distFromStreakCenter: (string)[] = [],
  public surfBrightness: (string)[] = [],
  public surfBrightnessUnc: (string)[] = [],
  public timesUnc: number = 0.0,
  public ccdTemp: number = 0.0,
  public currentSpectralFilterNum: number = 0,
  public currentNeutralDensityFilterNum: number = 0,
  public binningHoriz: number = 0,
  public binningVert: number = 0,
  public pcalNumStars: number = 0,
  public ccdObjPosX: number = 0.0,
  public ccdObjPosY: number = 0.0,
  public ccdObjWidth: number = 0.0,
  public backgroundSignal: number = 0.0,
  public backgroundSignalUnc: number = 0.0,
  public peakApertureCount: number = 0.0,
  public peakBackgroundCount: number = 0,
  public snrEst: number = 0.0,
  public magInstrumental: number = 0.0,
  public magInstrumentalUnc: number = 0.0,
  public opticalCrossSection: number = 0.0,
  public opticalCrossSectionUnc: number = 0.0,
  public sunStatePosX: number = 0.0,
  public sunStatePosY: number = 0.0,
  public sunStatePosZ: number = 0.0,
  public sunStateVelX: number = 0.0,
  public sunStateVelY: number = 0.0,
  public sunStateVelZ: number = 0.0,
  public numCatalogStars: number = 0,
  public numDetectedStars: number = 0,
  public numCorrelatedStars: number = 0,
  public predictedRaUnc: number = 0.0,
  public predictedDeclinationUnc: number = 0.0,
  public raCov: number = 0.0,
  public declinationCov: number = 0.0,
  public raDeclinationCov: number = 0.0,
  public acalCrPixX: number = 0.0,
  public acalCrPixY: number = 0.0,
  public acalCrValX: number = 0.0,
  public acalCrValY: number = 0.0,
  public acalNumStars: number = 0,
  public objSunRange: number = 0.0,
  public phaseAngBisect: number = 0.0,
  public solarDiskFrac: number = 0.0,
  public toes: number = 0.0,
  public does: number = 0.0,
  public source: string|Uint8Array|null = null,
  public dataMode: EOObservationDetails_Ingest_dataMode_Enum = EOObservationDetails_Ingest_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const idEOObservation = (this.idEOObservation !== null ? builder.createString(this.idEOObservation!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const obTime = (this.obTime !== null ? builder.createString(this.obTime!) : 0);
  const spectralFilters = EOObservationDetails_Ingest.createSpectralFiltersVector(builder, builder.createObjectOffsetList(this.spectralFilters));
  const spectralZMFL = EOObservationDetails_Ingest.createSpectralZmflVector(builder, builder.createObjectOffsetList(this.spectralZMFL));
  const spectralFilterSolarMag = EOObservationDetails_Ingest.createSpectralFilterSolarMagVector(builder, builder.createObjectOffsetList(this.spectralFilterSolarMag));
  const zeroPoints = EOObservationDetails_Ingest.createZeroPointsVector(builder, builder.createObjectOffsetList(this.zeroPoints));
  const zeroPointsUnc = EOObservationDetails_Ingest.createZeroPointsUncVector(builder, builder.createObjectOffsetList(this.zeroPointsUnc));
  const extinctionCoeffs = EOObservationDetails_Ingest.createExtinctionCoeffsVector(builder, builder.createObjectOffsetList(this.extinctionCoeffs));
  const extinctionCoeffsUnc = EOObservationDetails_Ingest.createExtinctionCoeffsUncVector(builder, builder.createObjectOffsetList(this.extinctionCoeffsUnc));
  const colorCoeffs = EOObservationDetails_Ingest.createColorCoeffsVector(builder, builder.createObjectOffsetList(this.colorCoeffs));
  const neutralDensityFilterNames = EOObservationDetails_Ingest.createNeutralDensityFilterNamesVector(builder, builder.createObjectOffsetList(this.neutralDensityFilterNames));
  const neutralDensityFilterTransmissions = EOObservationDetails_Ingest.createNeutralDensityFilterTransmissionsVector(builder, builder.createObjectOffsetList(this.neutralDensityFilterTransmissions));
  const neutralDensityFilterTransmissionsUnc = EOObservationDetails_Ingest.createNeutralDensityFilterTransmissionsUncVector(builder, builder.createObjectOffsetList(this.neutralDensityFilterTransmissionsUnc));
  const distFromStreakCenter = EOObservationDetails_Ingest.createDistFromStreakCenterVector(builder, builder.createObjectOffsetList(this.distFromStreakCenter));
  const surfBrightness = EOObservationDetails_Ingest.createSurfBrightnessVector(builder, builder.createObjectOffsetList(this.surfBrightness));
  const surfBrightnessUnc = EOObservationDetails_Ingest.createSurfBrightnessUncVector(builder, builder.createObjectOffsetList(this.surfBrightnessUnc));
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);

  return EOObservationDetails_Ingest.createEOObservationDetails_Ingest(builder,
    idEOObservation,
    classificationMarking,
    obTime,
    this.predictedRa,
    this.predictedDeclination,
    this.predictedAzimuth,
    this.predictedElevation,
    this.sunAzimuth,
    this.sunElevation,
    this.numSpectralFilters,
    spectralFilters,
    spectralZMFL,
    spectralFilterSolarMag,
    zeroPoints,
    zeroPointsUnc,
    extinctionCoeffs,
    extinctionCoeffsUnc,
    colorCoeffs,
    this.numNeutralDensityFilters,
    neutralDensityFilterNames,
    neutralDensityFilterTransmissions,
    neutralDensityFilterTransmissionsUnc,
    this.gain,
    this.ifov,
    this.pixelArrayWidth,
    this.pixelArrayHeight,
    this.pixelMin,
    this.pixelMax,
    this.centroidRow,
    this.centroidColumn,
    this.rowVariance,
    this.columnVariance,
    this.rowColCov,
    distFromStreakCenter,
    surfBrightness,
    surfBrightnessUnc,
    this.timesUnc,
    this.ccdTemp,
    this.currentSpectralFilterNum,
    this.currentNeutralDensityFilterNum,
    this.binningHoriz,
    this.binningVert,
    this.pcalNumStars,
    this.ccdObjPosX,
    this.ccdObjPosY,
    this.ccdObjWidth,
    this.backgroundSignal,
    this.backgroundSignalUnc,
    this.peakApertureCount,
    this.peakBackgroundCount,
    this.snrEst,
    this.magInstrumental,
    this.magInstrumentalUnc,
    this.opticalCrossSection,
    this.opticalCrossSectionUnc,
    this.sunStatePosX,
    this.sunStatePosY,
    this.sunStatePosZ,
    this.sunStateVelX,
    this.sunStateVelY,
    this.sunStateVelZ,
    this.numCatalogStars,
    this.numDetectedStars,
    this.numCorrelatedStars,
    this.predictedRaUnc,
    this.predictedDeclinationUnc,
    this.raCov,
    this.declinationCov,
    this.raDeclinationCov,
    this.acalCrPixX,
    this.acalCrPixY,
    this.acalCrValX,
    this.acalCrValY,
    this.acalNumStars,
    this.objSunRange,
    this.phaseAngBisect,
    this.solarDiskFrac,
    this.toes,
    this.does,
    source,
    this.dataMode,
    createdAt,
    createdBy
  );
}
}
