// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vessel_Ingest_dataMode_Enum } from './vessel-ingest-data-mode-enum.js';


/**
 * /// This service provides operations for manipulation and querying of maritime Vessel data. Vessel contains the static data of the specific vessel: mmsi, cruise speed, max speed, etc.
 */
export class Vessel_Ingest implements flatbuffers.IUnpackableObject<Vessel_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Vessel_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVessel_Ingest(bb:flatbuffers.ByteBuffer, obj?:Vessel_Ingest):Vessel_Ingest {
  return (obj || new Vessel_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVessel_Ingest(bb:flatbuffers.ByteBuffer, obj?:Vessel_Ingest):Vessel_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Vessel_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('VESS');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
entity():string|null
entity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent entity. idEntity is required for Put.
 * Example: /// Example: ENTITY-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idEntity():string|null
idEntity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idEntity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The original source Id for this vessel.
 * Example: /// Example: 590b5194fc32e75dd00682ba
 * Constraints: Minimum length = 0, Maximum length = 36
 */
altVesselId():string|null
altVesselId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altVesselId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL ID of the organization that owns the vessel.
 * Example: /// Example: 0147f777-w09a-835f-85aa-0a07a730fgg0
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOrganization():string|null
idOrganization(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOrganization(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of this vessel. Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
 * Example: /// Example: DORNUM
 * Constraints: Minimum length = 0, Maximum length = 24
 */
vesselName():string|null
vesselName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vesselName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).
 * Example: /// Example: Passenger
 * Constraints: Minimum length = 0, Maximum length = 48
 */
vesselType():string|null
vesselType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vesselType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The common name for a group of ships with similar design, usually named for the first vessel of the class.
 * Example: /// Example: Nimitz
 * Constraints: Minimum length = 0, Maximum length = 64
 */
vesselClass():string|null
vesselClass(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vesselClass(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Further description or explanation of the vessel or type.
 * Example: /// Example: Search and Rescue Vessel
 * Constraints: Minimum length = 0, Maximum length = 100
 */
vesselDescription():string|null
vesselDescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vesselDescription(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
 * Example: /// Example: B45524
 * Constraints: Minimum length = 0, Maximum length = 36
 */
sconum():string|null
sconum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sconum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
 * Example: /// Example: 9566356
 * Constraints: No constraints specified.
 */
imon():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
 * Example: /// Example: 416450000
 * Constraints: Minimum length = 0, Maximum length = 9
 */
mmsi():string|null
mmsi(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mmsi(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A uniquely designated identifier for the vessel's transmitter station. All radio transmissions must be individually identified by the call sign. Merchant and naval vessels are assigned call signs by their national licensing authorities.
 * Example: /// Example: V2OZ
 * Constraints: Minimum length = 0, Maximum length = 24
 */
callsign():string|null
callsign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callsign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The flag of the subject vessel.
 * Example: /// Example: United States
 * Constraints: Minimum length = 0, Maximum length = 36
 */
vesselFlag():string|null
vesselFlag(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vesselFlag(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Year the vessel went into service.
 * Example: /// Example: 2014
 * Constraints: Minimum length = 0, Maximum length = 4
 */
yearBuilt():string|null
yearBuilt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
yearBuilt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The shipbuilder who built this vessel.
 * Example: /// Example: Samsung Heavy Inds - Geoje
 * Constraints: Minimum length = 0, Maximum length = 64
 */
vesselBuilder():string|null
vesselBuilder(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vesselBuilder(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The status of this vessel.
 * Example: /// Example: In Service/Commission
 * Constraints: Minimum length = 0, Maximum length = 64
 */
status():string|null
status(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
status(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The date this vessel was first seen.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
firstSeen():string|null
firstSeen(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
firstSeen(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
 * Example: /// Example: 511.1
 * Constraints: No constraints specified.
 */
length():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
 * Example: /// Example: 24.1
 * Constraints: No constraints specified.
 */
width():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The maximum static draught, in meters, of the vessel defined as the distance between the ship’s keel and the waterline of the vessel.
 * Example: /// Example: 21.1
 * Constraints: No constraints specified.
 */
maxDraught():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The weight in tons, of this vessel.
 * Example: /// Example: 3423.76
 * Constraints: No constraints specified.
 */
vslWt():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The maximum possible speed of this vessel in meters per second.
 * Example: /// Example: 32.5
 * Constraints: No constraints specified.
 */
maxSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The stern type code (Counter, Cruiser) associated with this vessel.
 * Example: /// Example: Cruiser
 * Constraints: Minimum length = 0, Maximum length = 16
 */
sternType():string|null
sternType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sternType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of blades per shaft for this vessel.
 * Example: /// Example: 4
 * Constraints: No constraints specified.
 */
numBlades():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The number of shafts on this vessel.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
numShafts():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The type of propulsion employed by this vessel.
 * Example: /// Example: Diesel
 * Constraints: Minimum length = 0, Maximum length = 6
 */
propType():string|null
propType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
propType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The vessel hull number designation of this maritime vessel. The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
 * Example: /// Example: A30081
 * Constraints: Minimum length = 0, Maximum length = 7
 */
hullNum():string|null
hullNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hullNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 64
 */
dataMode():Vessel_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Vessel_Ingest_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startVessel_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(35);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addEntity(builder:flatbuffers.Builder, entityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, entityOffset, 0);
}

static addIdEntity(builder:flatbuffers.Builder, idEntityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idEntityOffset, 0);
}

static addAltVesselId(builder:flatbuffers.Builder, altVesselIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, altVesselIdOffset, 0);
}

static addIdOrganization(builder:flatbuffers.Builder, idOrganizationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idOrganizationOffset, 0);
}

static addVesselName(builder:flatbuffers.Builder, vesselNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, vesselNameOffset, 0);
}

static addVesselType(builder:flatbuffers.Builder, vesselTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, vesselTypeOffset, 0);
}

static addVesselClass(builder:flatbuffers.Builder, vesselClassOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, vesselClassOffset, 0);
}

static addVesselDescription(builder:flatbuffers.Builder, vesselDescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, vesselDescriptionOffset, 0);
}

static addSconum(builder:flatbuffers.Builder, sconumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, sconumOffset, 0);
}

static addImon(builder:flatbuffers.Builder, imon:number) {
  builder.addFieldInt32(11, imon, 0);
}

static addMmsi(builder:flatbuffers.Builder, mmsiOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, mmsiOffset, 0);
}

static addCallsign(builder:flatbuffers.Builder, callsignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, callsignOffset, 0);
}

static addVesselFlag(builder:flatbuffers.Builder, vesselFlagOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, vesselFlagOffset, 0);
}

static addYearBuilt(builder:flatbuffers.Builder, yearBuiltOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, yearBuiltOffset, 0);
}

static addVesselBuilder(builder:flatbuffers.Builder, vesselBuilderOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, vesselBuilderOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, statusOffset, 0);
}

static addFirstSeen(builder:flatbuffers.Builder, firstSeenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, firstSeenOffset, 0);
}

static addLength(builder:flatbuffers.Builder, length:number) {
  builder.addFieldFloat64(19, length, 0.0);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldFloat64(20, width, 0.0);
}

static addMaxDraught(builder:flatbuffers.Builder, maxDraught:number) {
  builder.addFieldFloat64(21, maxDraught, 0.0);
}

static addVslWt(builder:flatbuffers.Builder, vslWt:number) {
  builder.addFieldFloat64(22, vslWt, 0.0);
}

static addMaxSpeed(builder:flatbuffers.Builder, maxSpeed:number) {
  builder.addFieldFloat64(23, maxSpeed, 0.0);
}

static addSternType(builder:flatbuffers.Builder, sternTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, sternTypeOffset, 0);
}

static addNumBlades(builder:flatbuffers.Builder, numBlades:number) {
  builder.addFieldInt32(25, numBlades, 0);
}

static addNumShafts(builder:flatbuffers.Builder, numShafts:number) {
  builder.addFieldInt32(26, numShafts, 0);
}

static addPropType(builder:flatbuffers.Builder, propTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, propTypeOffset, 0);
}

static addHullNum(builder:flatbuffers.Builder, hullNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, hullNumOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Vessel_Ingest_dataMode_Enum) {
  builder.addFieldInt8(33, dataMode, Vessel_Ingest_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, origNetworkOffset, 0);
}

static endVessel_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishVessel_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'VESS');
}

static finishSizePrefixedVessel_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'VESS', true);
}

static createVessel_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, entityOffset:flatbuffers.Offset, idEntityOffset:flatbuffers.Offset, altVesselIdOffset:flatbuffers.Offset, idOrganizationOffset:flatbuffers.Offset, vesselNameOffset:flatbuffers.Offset, vesselTypeOffset:flatbuffers.Offset, vesselClassOffset:flatbuffers.Offset, vesselDescriptionOffset:flatbuffers.Offset, sconumOffset:flatbuffers.Offset, imon:number, mmsiOffset:flatbuffers.Offset, callsignOffset:flatbuffers.Offset, vesselFlagOffset:flatbuffers.Offset, yearBuiltOffset:flatbuffers.Offset, vesselBuilderOffset:flatbuffers.Offset, statusOffset:flatbuffers.Offset, firstSeenOffset:flatbuffers.Offset, length:number, width:number, maxDraught:number, vslWt:number, maxSpeed:number, sternTypeOffset:flatbuffers.Offset, numBlades:number, numShafts:number, propTypeOffset:flatbuffers.Offset, hullNumOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:Vessel_Ingest_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  Vessel_Ingest.startVessel_Ingest(builder);
  Vessel_Ingest.addId(builder, idOffset);
  Vessel_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  Vessel_Ingest.addEntity(builder, entityOffset);
  Vessel_Ingest.addIdEntity(builder, idEntityOffset);
  Vessel_Ingest.addAltVesselId(builder, altVesselIdOffset);
  Vessel_Ingest.addIdOrganization(builder, idOrganizationOffset);
  Vessel_Ingest.addVesselName(builder, vesselNameOffset);
  Vessel_Ingest.addVesselType(builder, vesselTypeOffset);
  Vessel_Ingest.addVesselClass(builder, vesselClassOffset);
  Vessel_Ingest.addVesselDescription(builder, vesselDescriptionOffset);
  Vessel_Ingest.addSconum(builder, sconumOffset);
  Vessel_Ingest.addImon(builder, imon);
  Vessel_Ingest.addMmsi(builder, mmsiOffset);
  Vessel_Ingest.addCallsign(builder, callsignOffset);
  Vessel_Ingest.addVesselFlag(builder, vesselFlagOffset);
  Vessel_Ingest.addYearBuilt(builder, yearBuiltOffset);
  Vessel_Ingest.addVesselBuilder(builder, vesselBuilderOffset);
  Vessel_Ingest.addStatus(builder, statusOffset);
  Vessel_Ingest.addFirstSeen(builder, firstSeenOffset);
  Vessel_Ingest.addLength(builder, length);
  Vessel_Ingest.addWidth(builder, width);
  Vessel_Ingest.addMaxDraught(builder, maxDraught);
  Vessel_Ingest.addVslWt(builder, vslWt);
  Vessel_Ingest.addMaxSpeed(builder, maxSpeed);
  Vessel_Ingest.addSternType(builder, sternTypeOffset);
  Vessel_Ingest.addNumBlades(builder, numBlades);
  Vessel_Ingest.addNumShafts(builder, numShafts);
  Vessel_Ingest.addPropType(builder, propTypeOffset);
  Vessel_Ingest.addHullNum(builder, hullNumOffset);
  Vessel_Ingest.addCreatedAt(builder, createdAtOffset);
  Vessel_Ingest.addCreatedBy(builder, createdByOffset);
  Vessel_Ingest.addSource(builder, sourceOffset);
  Vessel_Ingest.addOrigin(builder, originOffset);
  Vessel_Ingest.addDataMode(builder, dataMode);
  Vessel_Ingest.addOrigNetwork(builder, origNetworkOffset);
  return Vessel_Ingest.endVessel_Ingest(builder);
}

unpack(): Vessel_IngestT {
  return new Vessel_IngestT(
    this.id(),
    this.classificationMarking(),
    this.entity(),
    this.idEntity(),
    this.altVesselId(),
    this.idOrganization(),
    this.vesselName(),
    this.vesselType(),
    this.vesselClass(),
    this.vesselDescription(),
    this.sconum(),
    this.imon(),
    this.mmsi(),
    this.callsign(),
    this.vesselFlag(),
    this.yearBuilt(),
    this.vesselBuilder(),
    this.status(),
    this.firstSeen(),
    this.length(),
    this.width(),
    this.maxDraught(),
    this.vslWt(),
    this.maxSpeed(),
    this.sternType(),
    this.numBlades(),
    this.numShafts(),
    this.propType(),
    this.hullNum(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: Vessel_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.entity = this.entity();
  _o.idEntity = this.idEntity();
  _o.altVesselId = this.altVesselId();
  _o.idOrganization = this.idOrganization();
  _o.vesselName = this.vesselName();
  _o.vesselType = this.vesselType();
  _o.vesselClass = this.vesselClass();
  _o.vesselDescription = this.vesselDescription();
  _o.sconum = this.sconum();
  _o.imon = this.imon();
  _o.mmsi = this.mmsi();
  _o.callsign = this.callsign();
  _o.vesselFlag = this.vesselFlag();
  _o.yearBuilt = this.yearBuilt();
  _o.vesselBuilder = this.vesselBuilder();
  _o.status = this.status();
  _o.firstSeen = this.firstSeen();
  _o.length = this.length();
  _o.width = this.width();
  _o.maxDraught = this.maxDraught();
  _o.vslWt = this.vslWt();
  _o.maxSpeed = this.maxSpeed();
  _o.sternType = this.sternType();
  _o.numBlades = this.numBlades();
  _o.numShafts = this.numShafts();
  _o.propType = this.propType();
  _o.hullNum = this.hullNum();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class Vessel_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public entity: string|Uint8Array|null = null,
  public idEntity: string|Uint8Array|null = null,
  public altVesselId: string|Uint8Array|null = null,
  public idOrganization: string|Uint8Array|null = null,
  public vesselName: string|Uint8Array|null = null,
  public vesselType: string|Uint8Array|null = null,
  public vesselClass: string|Uint8Array|null = null,
  public vesselDescription: string|Uint8Array|null = null,
  public sconum: string|Uint8Array|null = null,
  public imon: number = 0,
  public mmsi: string|Uint8Array|null = null,
  public callsign: string|Uint8Array|null = null,
  public vesselFlag: string|Uint8Array|null = null,
  public yearBuilt: string|Uint8Array|null = null,
  public vesselBuilder: string|Uint8Array|null = null,
  public status: string|Uint8Array|null = null,
  public firstSeen: string|Uint8Array|null = null,
  public length: number = 0.0,
  public width: number = 0.0,
  public maxDraught: number = 0.0,
  public vslWt: number = 0.0,
  public maxSpeed: number = 0.0,
  public sternType: string|Uint8Array|null = null,
  public numBlades: number = 0,
  public numShafts: number = 0,
  public propType: string|Uint8Array|null = null,
  public hullNum: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: Vessel_Ingest_dataMode_Enum = Vessel_Ingest_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const entity = (this.entity !== null ? builder.createString(this.entity!) : 0);
  const idEntity = (this.idEntity !== null ? builder.createString(this.idEntity!) : 0);
  const altVesselId = (this.altVesselId !== null ? builder.createString(this.altVesselId!) : 0);
  const idOrganization = (this.idOrganization !== null ? builder.createString(this.idOrganization!) : 0);
  const vesselName = (this.vesselName !== null ? builder.createString(this.vesselName!) : 0);
  const vesselType = (this.vesselType !== null ? builder.createString(this.vesselType!) : 0);
  const vesselClass = (this.vesselClass !== null ? builder.createString(this.vesselClass!) : 0);
  const vesselDescription = (this.vesselDescription !== null ? builder.createString(this.vesselDescription!) : 0);
  const sconum = (this.sconum !== null ? builder.createString(this.sconum!) : 0);
  const mmsi = (this.mmsi !== null ? builder.createString(this.mmsi!) : 0);
  const callsign = (this.callsign !== null ? builder.createString(this.callsign!) : 0);
  const vesselFlag = (this.vesselFlag !== null ? builder.createString(this.vesselFlag!) : 0);
  const yearBuilt = (this.yearBuilt !== null ? builder.createString(this.yearBuilt!) : 0);
  const vesselBuilder = (this.vesselBuilder !== null ? builder.createString(this.vesselBuilder!) : 0);
  const status = (this.status !== null ? builder.createString(this.status!) : 0);
  const firstSeen = (this.firstSeen !== null ? builder.createString(this.firstSeen!) : 0);
  const sternType = (this.sternType !== null ? builder.createString(this.sternType!) : 0);
  const propType = (this.propType !== null ? builder.createString(this.propType!) : 0);
  const hullNum = (this.hullNum !== null ? builder.createString(this.hullNum!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Vessel_Ingest.createVessel_Ingest(builder,
    id,
    classificationMarking,
    entity,
    idEntity,
    altVesselId,
    idOrganization,
    vesselName,
    vesselType,
    vesselClass,
    vesselDescription,
    sconum,
    this.imon,
    mmsi,
    callsign,
    vesselFlag,
    yearBuilt,
    vesselBuilder,
    status,
    firstSeen,
    this.length,
    this.width,
    this.maxDraught,
    this.vslWt,
    this.maxSpeed,
    sternType,
    this.numBlades,
    this.numShafts,
    propType,
    hullNum,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
