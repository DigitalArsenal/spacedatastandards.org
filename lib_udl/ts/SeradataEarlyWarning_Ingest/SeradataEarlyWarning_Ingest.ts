// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SeradataEarlyWarning_Ingest_dataMode_Enum } from './SeradataEarlyWarning_Ingest_dataMode_Enum.js';


/**
 * /// Details for an early warning payload from  Seradata.
 */
export class SeradataEarlyWarning_Ingest implements flatbuffers.IUnpackableObject<SeradataEarlyWarning_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SeradataEarlyWarning_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSeradataEarlyWarning_Ingest(bb:flatbuffers.ByteBuffer, obj?:SeradataEarlyWarning_Ingest):SeradataEarlyWarning_Ingest {
  return (obj || new SeradataEarlyWarning_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSeradataEarlyWarning_Ingest(bb:flatbuffers.ByteBuffer, obj?:SeradataEarlyWarning_Ingest):SeradataEarlyWarning_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SeradataEarlyWarning_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SERA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SERADATAEARLYWARNING-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID of the parent IR record.
 * Example: /// Example: idIR
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idIr():string|null
idIr(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idIr(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
 * Example: /// Example: spacecraftId
 * Constraints: Minimum length = 1, Maximum length = 36
 */
spacecraftId():string|null
spacecraftId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spacecraftId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Hosted for company/Organization Id.
 * Example: /// Example: hostedForCompanyOrgId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
hostedForCompanyOrgId():string|null
hostedForCompanyOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hostedForCompanyOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Manufacturer Organization Id.
 * Example: /// Example: manufacturerOrgId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.
 * Example: /// Example: Infra red telescope
 * Constraints: Minimum length = 0, Maximum length = 50
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spectral Bands, e.g. Infra-Red.
 * Example: /// Example: Infra-Red
 * Constraints: Minimum length = 0, Maximum length = 50
 */
spectralBands():string|null
spectralBands(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spectralBands(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Frequency Limits for this IR.
 * Example: /// Example: frequencyLimits
 * Constraints: Minimum length = 0, Maximum length = 50
 */
frequencyLimits():string|null
frequencyLimits(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
frequencyLimits(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Best resolution for this IR in meters.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
bestResolution():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Ground Station info for this IR.
 * Example: /// Example: groundStations
 * Constraints: Minimum length = 0, Maximum length = 128
 */
groundStations():string|null
groundStations(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groundStations(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ground Station Locations for this IR.
 * Example: /// Example: groundStationLocations
 * Constraints: Minimum length = 0, Maximum length = 64
 */
groundStationLocations():string|null
groundStationLocations(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groundStationLocations(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Missile Launch Phase Detection Ability.
 * Example: /// Example: missileLaunchPhaseDetectionAbility
 * Constraints: Minimum length = 0, Maximum length = 64
 */
missileLaunchPhaseDetectionAbility():string|null
missileLaunchPhaseDetectionAbility(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missileLaunchPhaseDetectionAbility(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Is the sensor Earth Pointing.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
earthPointing():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
 * Example: /// Example: partnerSpacecraftId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
partnerSpacecraftId():string|null
partnerSpacecraftId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
partnerSpacecraftId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Payload notes.
 * Example: /// Example: Sample Notes
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
payloadNotes():string|null
payloadNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
payloadNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SeradataEarlyWarning_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SeradataEarlyWarning_Ingest_dataMode_Enum.REAL;
}

static startSeradataEarlyWarning_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(22);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdIr(builder:flatbuffers.Builder, idIrOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idIrOffset, 0);
}

static addSpacecraftId(builder:flatbuffers.Builder, spacecraftIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, spacecraftIdOffset, 0);
}

static addHostedForCompanyOrgId(builder:flatbuffers.Builder, hostedForCompanyOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, hostedForCompanyOrgIdOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, manufacturerOrgIdOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, nameOffset, 0);
}

static addSpectralBands(builder:flatbuffers.Builder, spectralBandsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, spectralBandsOffset, 0);
}

static addFrequencyLimits(builder:flatbuffers.Builder, frequencyLimitsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, frequencyLimitsOffset, 0);
}

static addBestResolution(builder:flatbuffers.Builder, bestResolution:number) {
  builder.addFieldFloat64(9, bestResolution, 0.0);
}

static addGroundStations(builder:flatbuffers.Builder, groundStationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, groundStationsOffset, 0);
}

static addGroundStationLocations(builder:flatbuffers.Builder, groundStationLocationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, groundStationLocationsOffset, 0);
}

static addMissileLaunchPhaseDetectionAbility(builder:flatbuffers.Builder, missileLaunchPhaseDetectionAbilityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, missileLaunchPhaseDetectionAbilityOffset, 0);
}

static addEarthPointing(builder:flatbuffers.Builder, earthPointing:boolean) {
  builder.addFieldInt8(13, +earthPointing, +false);
}

static addPartnerSpacecraftId(builder:flatbuffers.Builder, partnerSpacecraftIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, partnerSpacecraftIdOffset, 0);
}

static addPayloadNotes(builder:flatbuffers.Builder, payloadNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, payloadNotesOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SeradataEarlyWarning_Ingest_dataMode_Enum) {
  builder.addFieldInt8(21, dataMode, SeradataEarlyWarning_Ingest_dataMode_Enum.REAL);
}

static endSeradataEarlyWarning_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSeradataEarlyWarning_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SERA');
}

static finishSizePrefixedSeradataEarlyWarning_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SERA', true);
}

static createSeradataEarlyWarning_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idIrOffset:flatbuffers.Offset, spacecraftIdOffset:flatbuffers.Offset, hostedForCompanyOrgIdOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, spectralBandsOffset:flatbuffers.Offset, frequencyLimitsOffset:flatbuffers.Offset, bestResolution:number, groundStationsOffset:flatbuffers.Offset, groundStationLocationsOffset:flatbuffers.Offset, missileLaunchPhaseDetectionAbilityOffset:flatbuffers.Offset, earthPointing:boolean, partnerSpacecraftIdOffset:flatbuffers.Offset, payloadNotesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:SeradataEarlyWarning_Ingest_dataMode_Enum):flatbuffers.Offset {
  SeradataEarlyWarning_Ingest.startSeradataEarlyWarning_Ingest(builder);
  SeradataEarlyWarning_Ingest.addId(builder, idOffset);
  SeradataEarlyWarning_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  SeradataEarlyWarning_Ingest.addIdIr(builder, idIrOffset);
  SeradataEarlyWarning_Ingest.addSpacecraftId(builder, spacecraftIdOffset);
  SeradataEarlyWarning_Ingest.addHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset);
  SeradataEarlyWarning_Ingest.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  SeradataEarlyWarning_Ingest.addName(builder, nameOffset);
  SeradataEarlyWarning_Ingest.addSpectralBands(builder, spectralBandsOffset);
  SeradataEarlyWarning_Ingest.addFrequencyLimits(builder, frequencyLimitsOffset);
  SeradataEarlyWarning_Ingest.addBestResolution(builder, bestResolution);
  SeradataEarlyWarning_Ingest.addGroundStations(builder, groundStationsOffset);
  SeradataEarlyWarning_Ingest.addGroundStationLocations(builder, groundStationLocationsOffset);
  SeradataEarlyWarning_Ingest.addMissileLaunchPhaseDetectionAbility(builder, missileLaunchPhaseDetectionAbilityOffset);
  SeradataEarlyWarning_Ingest.addEarthPointing(builder, earthPointing);
  SeradataEarlyWarning_Ingest.addPartnerSpacecraftId(builder, partnerSpacecraftIdOffset);
  SeradataEarlyWarning_Ingest.addPayloadNotes(builder, payloadNotesOffset);
  SeradataEarlyWarning_Ingest.addCreatedAt(builder, createdAtOffset);
  SeradataEarlyWarning_Ingest.addCreatedBy(builder, createdByOffset);
  SeradataEarlyWarning_Ingest.addSource(builder, sourceOffset);
  SeradataEarlyWarning_Ingest.addOrigin(builder, originOffset);
  SeradataEarlyWarning_Ingest.addOrigNetwork(builder, origNetworkOffset);
  SeradataEarlyWarning_Ingest.addDataMode(builder, dataMode);
  return SeradataEarlyWarning_Ingest.endSeradataEarlyWarning_Ingest(builder);
}

unpack(): SeradataEarlyWarning_IngestT {
  return new SeradataEarlyWarning_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idIr(),
    this.spacecraftId(),
    this.hostedForCompanyOrgId(),
    this.manufacturerOrgId(),
    this.name(),
    this.spectralBands(),
    this.frequencyLimits(),
    this.bestResolution(),
    this.groundStations(),
    this.groundStationLocations(),
    this.missileLaunchPhaseDetectionAbility(),
    this.earthPointing(),
    this.partnerSpacecraftId(),
    this.payloadNotes(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: SeradataEarlyWarning_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idIr = this.idIr();
  _o.spacecraftId = this.spacecraftId();
  _o.hostedForCompanyOrgId = this.hostedForCompanyOrgId();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.name = this.name();
  _o.spectralBands = this.spectralBands();
  _o.frequencyLimits = this.frequencyLimits();
  _o.bestResolution = this.bestResolution();
  _o.groundStations = this.groundStations();
  _o.groundStationLocations = this.groundStationLocations();
  _o.missileLaunchPhaseDetectionAbility = this.missileLaunchPhaseDetectionAbility();
  _o.earthPointing = this.earthPointing();
  _o.partnerSpacecraftId = this.partnerSpacecraftId();
  _o.payloadNotes = this.payloadNotes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class SeradataEarlyWarning_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idIr: string|Uint8Array|null = null,
  public spacecraftId: string|Uint8Array|null = null,
  public hostedForCompanyOrgId: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public spectralBands: string|Uint8Array|null = null,
  public frequencyLimits: string|Uint8Array|null = null,
  public bestResolution: number = 0.0,
  public groundStations: string|Uint8Array|null = null,
  public groundStationLocations: string|Uint8Array|null = null,
  public missileLaunchPhaseDetectionAbility: string|Uint8Array|null = null,
  public earthPointing: boolean = false,
  public partnerSpacecraftId: string|Uint8Array|null = null,
  public payloadNotes: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: SeradataEarlyWarning_Ingest_dataMode_Enum = SeradataEarlyWarning_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idIr = (this.idIr !== null ? builder.createString(this.idIr!) : 0);
  const spacecraftId = (this.spacecraftId !== null ? builder.createString(this.spacecraftId!) : 0);
  const hostedForCompanyOrgId = (this.hostedForCompanyOrgId !== null ? builder.createString(this.hostedForCompanyOrgId!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const spectralBands = (this.spectralBands !== null ? builder.createString(this.spectralBands!) : 0);
  const frequencyLimits = (this.frequencyLimits !== null ? builder.createString(this.frequencyLimits!) : 0);
  const groundStations = (this.groundStations !== null ? builder.createString(this.groundStations!) : 0);
  const groundStationLocations = (this.groundStationLocations !== null ? builder.createString(this.groundStationLocations!) : 0);
  const missileLaunchPhaseDetectionAbility = (this.missileLaunchPhaseDetectionAbility !== null ? builder.createString(this.missileLaunchPhaseDetectionAbility!) : 0);
  const partnerSpacecraftId = (this.partnerSpacecraftId !== null ? builder.createString(this.partnerSpacecraftId!) : 0);
  const payloadNotes = (this.payloadNotes !== null ? builder.createString(this.payloadNotes!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return SeradataEarlyWarning_Ingest.createSeradataEarlyWarning_Ingest(builder,
    id,
    classificationMarking,
    idIr,
    spacecraftId,
    hostedForCompanyOrgId,
    manufacturerOrgId,
    name,
    spectralBands,
    frequencyLimits,
    this.bestResolution,
    groundStations,
    groundStationLocations,
    missileLaunchPhaseDetectionAbility,
    this.earthPointing,
    partnerSpacecraftId,
    payloadNotes,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
