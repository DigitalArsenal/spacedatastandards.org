// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { VideoStreams_Abridged_dataMode_Enum } from './VideoStreams_Abridged_dataMode_Enum.js';


/**
 * /// The table captures metadata associated with the published videos in UDL.
 */
export class VideoStreams_Abridged implements flatbuffers.IUnpackableObject<VideoStreams_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VideoStreams_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVideoStreams_Abridged(bb:flatbuffers.ByteBuffer, obj?:VideoStreams_Abridged):VideoStreams_Abridged {
  return (obj || new VideoStreams_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVideoStreams_Abridged(bb:flatbuffers.ByteBuffer, obj?:VideoStreams_Abridged):VideoStreams_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VideoStreams_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('VIDE');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: VIDEOSTREAMS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the video stream.
 * Example: /// Example: name
 * Constraints: Minimum length = 1, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description/notes associated with the video stream.
 * Example: /// Example: description
 * Constraints: Minimum length = 1, Maximum length = 1024
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The timestamp when the stream is available from. The unit is ISO 8601 format.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The timestamp when the stream is available until. The unit is ISO 8601 format.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
stopTime():string|null
stopTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stopTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Video Publisher Token.
 * Example: /// Example: tokenValue
 * Constraints: Minimum length = 1, Maximum length = 1024
 */
tokenValue():string|null
tokenValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tokenValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Video Streaming Support URLs.
 * Example: /// Example: ['videoUrls', 'videoUrls2']
 * Constraints: No constraints specified.
 */
videoUrls(index: number):string
videoUrls(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
videoUrls(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

videoUrlsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():VideoStreams_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : VideoStreams_Abridged_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startVideoStreams_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, descriptionOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, startTimeOffset, 0);
}

static addStopTime(builder:flatbuffers.Builder, stopTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, stopTimeOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, sourceOffset, 0);
}

static addTokenValue(builder:flatbuffers.Builder, tokenValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, tokenValueOffset, 0);
}

static addVideoUrls(builder:flatbuffers.Builder, videoUrlsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, videoUrlsOffset, 0);
}

static createVideoUrlsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVideoUrlsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:VideoStreams_Abridged_dataMode_Enum) {
  builder.addFieldInt8(9, dataMode, VideoStreams_Abridged_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, createdByOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, origNetworkOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, originOffset, 0);
}

static endVideoStreams_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishVideoStreams_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'VIDE');
}

static finishSizePrefixedVideoStreams_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'VIDE', true);
}

static createVideoStreams_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, stopTimeOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, tokenValueOffset:flatbuffers.Offset, videoUrlsOffset:flatbuffers.Offset, dataMode:VideoStreams_Abridged_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset):flatbuffers.Offset {
  VideoStreams_Abridged.startVideoStreams_Abridged(builder);
  VideoStreams_Abridged.addId(builder, idOffset);
  VideoStreams_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  VideoStreams_Abridged.addName(builder, nameOffset);
  VideoStreams_Abridged.addDescription(builder, descriptionOffset);
  VideoStreams_Abridged.addStartTime(builder, startTimeOffset);
  VideoStreams_Abridged.addStopTime(builder, stopTimeOffset);
  VideoStreams_Abridged.addSource(builder, sourceOffset);
  VideoStreams_Abridged.addTokenValue(builder, tokenValueOffset);
  VideoStreams_Abridged.addVideoUrls(builder, videoUrlsOffset);
  VideoStreams_Abridged.addDataMode(builder, dataMode);
  VideoStreams_Abridged.addCreatedAt(builder, createdAtOffset);
  VideoStreams_Abridged.addCreatedBy(builder, createdByOffset);
  VideoStreams_Abridged.addOrigNetwork(builder, origNetworkOffset);
  VideoStreams_Abridged.addOrigin(builder, originOffset);
  return VideoStreams_Abridged.endVideoStreams_Abridged(builder);
}

unpack(): VideoStreams_AbridgedT {
  return new VideoStreams_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.name(),
    this.description(),
    this.startTime(),
    this.stopTime(),
    this.source(),
    this.tokenValue(),
    this.bb!.createScalarList<string>(this.videoUrls.bind(this), this.videoUrlsLength()),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.origNetwork(),
    this.origin()
  );
}


unpackTo(_o: VideoStreams_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.name = this.name();
  _o.description = this.description();
  _o.startTime = this.startTime();
  _o.stopTime = this.stopTime();
  _o.source = this.source();
  _o.tokenValue = this.tokenValue();
  _o.videoUrls = this.bb!.createScalarList<string>(this.videoUrls.bind(this), this.videoUrlsLength());
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.origNetwork = this.origNetwork();
  _o.origin = this.origin();
}
}

export class VideoStreams_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public stopTime: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public tokenValue: string|Uint8Array|null = null,
  public videoUrls: (string)[] = [],
  public dataMode: VideoStreams_Abridged_dataMode_Enum = VideoStreams_Abridged_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const stopTime = (this.stopTime !== null ? builder.createString(this.stopTime!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const tokenValue = (this.tokenValue !== null ? builder.createString(this.tokenValue!) : 0);
  const videoUrls = VideoStreams_Abridged.createVideoUrlsVector(builder, builder.createObjectOffsetList(this.videoUrls));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);

  return VideoStreams_Abridged.createVideoStreams_Abridged(builder,
    id,
    classificationMarking,
    name,
    description,
    startTime,
    stopTime,
    source,
    tokenValue,
    videoUrls,
    this.dataMode,
    createdAt,
    createdBy,
    origNetwork,
    origin
  );
}
}
