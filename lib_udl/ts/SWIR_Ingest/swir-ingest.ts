// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SWIR_Ingest_dataMode_Enum } from './swir-ingest-data-mode-enum.js';


/**
 * /// Data representing observed short wave infrared (SWIR) measurements.
 */
export class SWIR_Ingest implements flatbuffers.IUnpackableObject<SWIR_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SWIR_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSWIR_Ingest(bb:flatbuffers.ByteBuffer, obj?:SWIR_Ingest):SWIR_Ingest {
  return (obj || new SWIR_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSWIR_Ingest(bb:flatbuffers.ByteBuffer, obj?:SWIR_Ingest):SWIR_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SWIR_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SWIR');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SWIR-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the target on-orbit object.
 * Example: /// Example: 45234
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Data timestamp in ISO8601 UTC format.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
ts():string|null
ts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
solarPhaseAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 70.55208
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 81.18191
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Location/name of the observing sensor.
 * Example: /// Example: AeroTel
 * Constraints: Minimum length = 0, Maximum length = 64
 */
locationName():string|null
locationName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
locationName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * User comments concerning sensor or data limitations.
 * Example: /// Example: Example Comments
 * Constraints: Minimum length = 0, Maximum length = 64
 */
badWave():string|null
badWave(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
badWave(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of wavelengths, in microns. This array should correspond with the same-sized array of absFluxes.
 * Example: /// Example: [1.23, 4.56]
 * Constraints: No constraints specified.
 */
wavelengths(index: number):string
wavelengths(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
wavelengths(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

wavelengthsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of absolute flux measurement data, in Watts per square centimeter per micron. This array should correspond with the same-sized array of wavelengths.
 * Example: /// Example: [1.23, 4.56]
 * Constraints: No constraints specified.
 */
absFluxes(index: number):string
absFluxes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
absFluxes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

absFluxesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of ratio wavelength data. This array should correspond with the same-sized array of fluxRatios.
 * Example: /// Example: [1.23, 4.56]
 * Constraints: No constraints specified.
 */
ratioWavelengths(index: number):string
ratioWavelengths(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ratioWavelengths(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

ratioWavelengthsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of flux ratio data. This array should correspond with the same-sized array of ratioWavelengths.
 * Example: /// Example: [1.23, 4.56]
 * Constraints: No constraints specified.
 */
fluxRatios(index: number):string
fluxRatios(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
fluxRatios(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

fluxRatiosLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Original object ID or Catalog Number provided by source.
 * Example: /// Example: WildBlue-1
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the target on-orbit object.
 * Example: /// Example: 25544
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SWIR_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SWIR_Ingest_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSWIR_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOnOrbitOffset, 0);
}

static addTs(builder:flatbuffers.Builder, tsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, tsOffset, 0);
}

static addSolarPhaseAngle(builder:flatbuffers.Builder, solarPhaseAngle:number) {
  builder.addFieldFloat64(4, solarPhaseAngle, 0.0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(5, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(6, lon, 0.0);
}

static addLocationName(builder:flatbuffers.Builder, locationNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, locationNameOffset, 0);
}

static addBadWave(builder:flatbuffers.Builder, badWaveOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, badWaveOffset, 0);
}

static addWavelengths(builder:flatbuffers.Builder, wavelengthsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, wavelengthsOffset, 0);
}

static createWavelengthsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWavelengthsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAbsFluxes(builder:flatbuffers.Builder, absFluxesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, absFluxesOffset, 0);
}

static createAbsFluxesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAbsFluxesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRatioWavelengths(builder:flatbuffers.Builder, ratioWavelengthsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, ratioWavelengthsOffset, 0);
}

static createRatioWavelengthsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRatioWavelengthsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFluxRatios(builder:flatbuffers.Builder, fluxRatiosOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, fluxRatiosOffset, 0);
}

static createFluxRatiosVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFluxRatiosVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, origObjectIdOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, originOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(16, satNo, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SWIR_Ingest_dataMode_Enum) {
  builder.addFieldInt8(17, dataMode, SWIR_Ingest_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, createdByOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, origNetworkOffset, 0);
}

static endSWIR_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSWIR_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SWIR');
}

static finishSizePrefixedSWIR_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SWIR', true);
}

static createSWIR_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, tsOffset:flatbuffers.Offset, solarPhaseAngle:number, lat:number, lon:number, locationNameOffset:flatbuffers.Offset, badWaveOffset:flatbuffers.Offset, wavelengthsOffset:flatbuffers.Offset, absFluxesOffset:flatbuffers.Offset, ratioWavelengthsOffset:flatbuffers.Offset, fluxRatiosOffset:flatbuffers.Offset, origObjectIdOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, satNo:number, dataMode:SWIR_Ingest_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  SWIR_Ingest.startSWIR_Ingest(builder);
  SWIR_Ingest.addId(builder, idOffset);
  SWIR_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  SWIR_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
  SWIR_Ingest.addTs(builder, tsOffset);
  SWIR_Ingest.addSolarPhaseAngle(builder, solarPhaseAngle);
  SWIR_Ingest.addLat(builder, lat);
  SWIR_Ingest.addLon(builder, lon);
  SWIR_Ingest.addLocationName(builder, locationNameOffset);
  SWIR_Ingest.addBadWave(builder, badWaveOffset);
  SWIR_Ingest.addWavelengths(builder, wavelengthsOffset);
  SWIR_Ingest.addAbsFluxes(builder, absFluxesOffset);
  SWIR_Ingest.addRatioWavelengths(builder, ratioWavelengthsOffset);
  SWIR_Ingest.addFluxRatios(builder, fluxRatiosOffset);
  SWIR_Ingest.addOrigObjectId(builder, origObjectIdOffset);
  SWIR_Ingest.addSource(builder, sourceOffset);
  SWIR_Ingest.addOrigin(builder, originOffset);
  SWIR_Ingest.addSatNo(builder, satNo);
  SWIR_Ingest.addDataMode(builder, dataMode);
  SWIR_Ingest.addCreatedAt(builder, createdAtOffset);
  SWIR_Ingest.addCreatedBy(builder, createdByOffset);
  SWIR_Ingest.addOrigNetwork(builder, origNetworkOffset);
  return SWIR_Ingest.endSWIR_Ingest(builder);
}

unpack(): SWIR_IngestT {
  return new SWIR_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idOnOrbit(),
    this.ts(),
    this.solarPhaseAngle(),
    this.lat(),
    this.lon(),
    this.locationName(),
    this.badWave(),
    this.bb!.createScalarList<string>(this.wavelengths.bind(this), this.wavelengths_Length()),
    this.bb!.createScalarList<string>(this.absFluxes.bind(this), this.absFluxes_Length()),
    this.bb!.createScalarList<string>(this.ratioWavelengths.bind(this), this.ratioWavelengths_Length()),
    this.bb!.createScalarList<string>(this.fluxRatios.bind(this), this.fluxRatios_Length()),
    this.origObjectId(),
    this.source(),
    this.origin(),
    this.satNo(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.origNetwork()
  );
}


unpackTo(_o: SWIR_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idOnOrbit = this.idOnOrbit();
  _o.ts = this.ts();
  _o.solarPhaseAngle = this.solarPhaseAngle();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.locationName = this.locationName();
  _o.badWave = this.badWave();
  _o.wavelengths = this.bb!.createScalarList<string>(this.wavelengths.bind(this), this.wavelengths_Length());
  _o.absFluxes = this.bb!.createScalarList<string>(this.absFluxes.bind(this), this.absFluxes_Length());
  _o.ratioWavelengths = this.bb!.createScalarList<string>(this.ratioWavelengths.bind(this), this.ratioWavelengths_Length());
  _o.fluxRatios = this.bb!.createScalarList<string>(this.fluxRatios.bind(this), this.fluxRatios_Length());
  _o.origObjectId = this.origObjectId();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.satNo = this.satNo();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.origNetwork = this.origNetwork();
}
}

export class SWIR_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public ts: string|Uint8Array|null = null,
  public solarPhaseAngle: number = 0.0,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public locationName: string|Uint8Array|null = null,
  public badWave: string|Uint8Array|null = null,
  public wavelengths: (string)[] = [],
  public absFluxes: (string)[] = [],
  public ratioWavelengths: (string)[] = [],
  public fluxRatios: (string)[] = [],
  public origObjectId: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public satNo: number = 0,
  public dataMode: SWIR_Ingest_dataMode_Enum = SWIR_Ingest_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const ts = (this.ts !== null ? builder.createString(this.ts!) : 0);
  const locationName = (this.locationName !== null ? builder.createString(this.locationName!) : 0);
  const badWave = (this.badWave !== null ? builder.createString(this.badWave!) : 0);
  const wavelengths = SWIR_Ingest.createWavelengthsVector(builder, builder.createObjectOffsetList(this.wavelengths));
  const absFluxes = SWIR_Ingest.createAbsFluxesVector(builder, builder.createObjectOffsetList(this.absFluxes));
  const ratioWavelengths = SWIR_Ingest.createRatioWavelengthsVector(builder, builder.createObjectOffsetList(this.ratioWavelengths));
  const fluxRatios = SWIR_Ingest.createFluxRatiosVector(builder, builder.createObjectOffsetList(this.fluxRatios));
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return SWIR_Ingest.createSWIR_Ingest(builder,
    id,
    classificationMarking,
    idOnOrbit,
    ts,
    this.solarPhaseAngle,
    this.lat,
    this.lon,
    locationName,
    badWave,
    wavelengths,
    absFluxes,
    ratioWavelengths,
    fluxRatios,
    origObjectId,
    source,
    origin,
    this.satNo,
    this.dataMode,
    createdAt,
    createdBy,
    origNetwork
  );
}
}
