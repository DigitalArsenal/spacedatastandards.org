// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Coefficients to describe profile shape as quasi-parabolic segments.
 */
export class IonoObservationDensityProfileQuasiParabolic_Ingest implements flatbuffers.IUnpackableObject<IonoObservationDensityProfileQuasiParabolic_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IonoObservationDensityProfileQuasiParabolic_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIonoObservationDensityProfileQuasiParabolic_Ingest(bb:flatbuffers.ByteBuffer, obj?:IonoObservationDensityProfileQuasiParabolic_Ingest):IonoObservationDensityProfileQuasiParabolic_Ingest {
  return (obj || new IonoObservationDensityProfileQuasiParabolic_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIonoObservationDensityProfileQuasiParabolic_Ingest(bb:flatbuffers.ByteBuffer, obj?:IonoObservationDensityProfileQuasiParabolic_Ingest):IonoObservationDensityProfileQuasiParabolic_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IonoObservationDensityProfileQuasiParabolic_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('IONO');
}

/**
 * General description of the quasi-parabolic computation algorithm.
 * Example: /// Example: Array of the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C
 * Constraints: No constraints specified.
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Value of the Earth's radius, in kilometers, used for computations.
 * Example: /// Example: 6370.1
 * Constraints: No constraints specified.
 */
earthRadius():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Array of quasi-parabolic segments. Each segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C”. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
quasiParabolicSegments(index: number):string
quasiParabolicSegments(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
quasiParabolicSegments(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

quasiParabolicSegmentsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startIonoObservationDensityProfileQuasiParabolic_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, descriptionOffset, 0);
}

static addEarthRadius(builder:flatbuffers.Builder, earthRadius:number) {
  builder.addFieldFloat64(1, earthRadius, 0.0);
}

static addQuasiParabolicSegments(builder:flatbuffers.Builder, quasiParabolicSegmentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, quasiParabolicSegmentsOffset, 0);
}

static createQuasiParabolicSegmentsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startQuasiParabolicSegmentsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endIonoObservationDensityProfileQuasiParabolic_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishIonoObservationDensityProfileQuasiParabolic_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO');
}

static finishSizePrefixedIonoObservationDensityProfileQuasiParabolic_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO', true);
}

static createIonoObservationDensityProfileQuasiParabolic_Ingest(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset, earthRadius:number, quasiParabolicSegmentsOffset:flatbuffers.Offset):flatbuffers.Offset {
  IonoObservationDensityProfileQuasiParabolic_Ingest.startIonoObservationDensityProfileQuasiParabolic_Ingest(builder);
  IonoObservationDensityProfileQuasiParabolic_Ingest.addDescription(builder, descriptionOffset);
  IonoObservationDensityProfileQuasiParabolic_Ingest.addEarthRadius(builder, earthRadius);
  IonoObservationDensityProfileQuasiParabolic_Ingest.addQuasiParabolicSegments(builder, quasiParabolicSegmentsOffset);
  return IonoObservationDensityProfileQuasiParabolic_Ingest.endIonoObservationDensityProfileQuasiParabolic_Ingest(builder);
}

unpack(): IonoObservationDensityProfileQuasiParabolic_IngestT {
  return new IonoObservationDensityProfileQuasiParabolic_IngestT(
    this.description(),
    this.earthRadius(),
    this.bb!.createScalarList<string>(this.quasiParabolicSegments.bind(this), this.quasiParabolicSegmentsLength())
  );
}


unpackTo(_o: IonoObservationDensityProfileQuasiParabolic_IngestT): void {
  _o.description = this.description();
  _o.earthRadius = this.earthRadius();
  _o.quasiParabolicSegments = this.bb!.createScalarList<string>(this.quasiParabolicSegments.bind(this), this.quasiParabolicSegmentsLength());
}
}

export class IonoObservationDensityProfileQuasiParabolic_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public description: string|Uint8Array|null = null,
  public earthRadius: number = 0.0,
  public quasiParabolicSegments: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const quasiParabolicSegments = IonoObservationDensityProfileQuasiParabolic_Ingest.createQuasiParabolicSegmentsVector(builder, builder.createObjectOffsetList(this.quasiParabolicSegments));

  return IonoObservationDensityProfileQuasiParabolic_Ingest.createIonoObservationDensityProfileQuasiParabolic_Ingest(builder,
    description,
    this.earthRadius,
    quasiParabolicSegments
  );
}
}
