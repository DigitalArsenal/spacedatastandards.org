// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Airfield_Ingest_dataMode_Enum } from './airfield-ingest-data-mode-enum.js';


/**
 * /// Properties and characteristics of an airfield, which includes location, airfield codes, suitability codes, and remarks.
 */
export class Airfield_Ingest implements flatbuffers.IUnpackableObject<Airfield_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Airfield_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirfield_Ingest(bb:flatbuffers.ByteBuffer, obj?:Airfield_Ingest):Airfield_Ingest {
  return (obj || new Airfield_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirfield_Ingest(bb:flatbuffers.ByteBuffer, obj?:Airfield_Ingest):Airfield_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Airfield_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRF');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: 3f28f60b-3a50-2aef-ac88-8e9d0e39912b
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The ID of the parent site.
 * Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSite():string|null
idSite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate Airfield identifier provided by source.
 * Example: /// Example: 45301
 * Constraints: Minimum length = 0, Maximum length = 36
 */
altAirfieldId():string|null
altAirfieldId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altAirfieldId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The airfield's World Area Code installation number (WAC-INNR).
 * Example: /// Example: 0409-00039
 * Constraints: Minimum length = 0, Maximum length = 32
 */
wacInnr():string|null
wacInnr(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
wacInnr(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Air Mobility Command (AMC) Zone availability Report identifier.
 * Example: /// Example: 231
 * Constraints: Minimum length = 0, Maximum length = 32
 */
zarId():string|null
zarId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
zarId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The International Civil Aviation Organization (ICAO) code of the airfield.
 * Example: /// Example: KCOS
 * Constraints: Minimum length = 0, Maximum length = 4
 */
icao():string|null
icao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
icao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The International Aviation Transport Association (IATA) code of the airfield.
 * Example: /// Example: AAA
 * Constraints: Minimum length = 0, Maximum length = 3
 */
iata():string|null
iata(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
iata(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Federal Aviation Administration (FAA) location identifier of this airfield.
 * Example: /// Example: FAA1
 * Constraints: Minimum length = 0, Maximum length = 5
 */
faa():string|null
faa(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
faa(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The host nation code of this airfield, used for non-DoD/FAA locations.
 * Example: /// Example: ZPU
 * Constraints: Minimum length = 0, Maximum length = 16
 */
hostNatCode():string|null
hostNatCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hostNatCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the airfield.
 * Example: /// Example: USAF Academy AFLD
 * Constraints: Minimum length = 1, Maximum length = 64
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport, etc.).
 * Example: /// Example: Commercial
 * Constraints: Minimum length = 1, Maximum length = 32
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 179.1
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Elevation of the airfield above mean sea level, in feet.
 * Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 33.562
 * Constraints: No constraints specified.
 */
elevFt():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Elevation of the airfield above mean sea level, in meters.
 * Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 10.29
 * Constraints: No constraints specified.
 */
elevM():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The magnetic declination/variation of the airfield's location from true north, in degrees.  Positive values east of true north and negative values west of true north.
 * Example: /// Example: 7.35
 * Constraints: No constraints specified.
 */
magDec():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Region where the airfield resides.
 * Example: /// Example: North America
 * Constraints: Minimum length = 0, Maximum length = 32
 */
regionName():string|null
regionName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
regionName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
 * Example: /// Example: US
 * Constraints: Minimum length = 0, Maximum length = 4
 */
countryCode():string|null
countryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Closest city to the airfield's location.
 * Example: /// Example: Colorado Springs
 * Constraints: Minimum length = 0, Maximum length = 64
 */
city():string|null
city(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
city(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * State or province of the airfield's location.
 * Example: /// Example: Colorado
 * Constraints: Minimum length = 0, Maximum length = 32
 */
state():string|null
state(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
state(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Air Force geographic location code of the airfield.
 * Example: /// Example: XLSX
 * Constraints: Minimum length = 0, Maximum length = 16
 */
geoloc():string|null
geoloc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geoloc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time difference between the location of the airfield and the Greenwich Mean Time (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets and time zones west of Greenwich are negative.
 * Example: /// Example: -4:30
 * Constraints: Minimum length = 0, Maximum length = 6
 */
gmtOffset():string|null
gmtOffset(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gmtOffset(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Associated suitability codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
 * Example: /// Example: ABCDEF
 * Constraints: Minimum length = 0, Maximum length = 36
 */
suitabilityCodes():string|null
suitabilityCodes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
suitabilityCodes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Applicable miscellaneous codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
 * Example: /// Example: AMZ
 * Constraints: Minimum length = 0, Maximum length = 36
 */
miscCodes():string|null
miscCodes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
miscCodes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of runways at the site.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
runways():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The length of the longest runway at this airfield in feet.
 * Example: /// Example: 1000
 * Constraints: No constraints specified.
 */
maxRunwayLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The URL link to information about airfield.
 * Example: /// Example: URL Link to the Airfield
 * Constraints: Minimum length = 0, Maximum length = 256
 */
infoUrl():string|null
infoUrl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
infoUrl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Airfield_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Airfield_Ingest_dataMode_Enum.REAL;
}

static startAirfield_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(35);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdSite(builder:flatbuffers.Builder, idSiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idSiteOffset, 0);
}

static addAltAirfieldId(builder:flatbuffers.Builder, altAirfieldIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, altAirfieldIdOffset, 0);
}

static addWacInnr(builder:flatbuffers.Builder, wacInnrOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, wacInnrOffset, 0);
}

static addZarId(builder:flatbuffers.Builder, zarIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, zarIdOffset, 0);
}

static addIcao(builder:flatbuffers.Builder, icaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, icaoOffset, 0);
}

static addIata(builder:flatbuffers.Builder, iataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, iataOffset, 0);
}

static addFaa(builder:flatbuffers.Builder, faaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, faaOffset, 0);
}

static addHostNatCode(builder:flatbuffers.Builder, hostNatCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, hostNatCodeOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, nameOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, typeOffset, 0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(12, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(13, lon, 0.0);
}

static addElevFt(builder:flatbuffers.Builder, elevFt:number) {
  builder.addFieldFloat64(14, elevFt, 0.0);
}

static addElevM(builder:flatbuffers.Builder, elevM:number) {
  builder.addFieldFloat64(15, elevM, 0.0);
}

static addMagDec(builder:flatbuffers.Builder, magDec:number) {
  builder.addFieldFloat64(16, magDec, 0.0);
}

static addRegionName(builder:flatbuffers.Builder, regionNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, regionNameOffset, 0);
}

static addCountryCode(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, countryCodeOffset, 0);
}

static addCity(builder:flatbuffers.Builder, cityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, cityOffset, 0);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, stateOffset, 0);
}

static addGeoloc(builder:flatbuffers.Builder, geolocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, geolocOffset, 0);
}

static addGmtOffset(builder:flatbuffers.Builder, gmtOffsetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, gmtOffsetOffset, 0);
}

static addSuitabilityCodes(builder:flatbuffers.Builder, suitabilityCodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, suitabilityCodesOffset, 0);
}

static addMiscCodes(builder:flatbuffers.Builder, miscCodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, miscCodesOffset, 0);
}

static addRunways(builder:flatbuffers.Builder, runways:number) {
  builder.addFieldInt32(25, runways, 0);
}

static addMaxRunwayLength(builder:flatbuffers.Builder, maxRunwayLength:number) {
  builder.addFieldInt32(26, maxRunwayLength, 0);
}

static addInfoUrl(builder:flatbuffers.Builder, infoUrlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, infoUrlOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, createdByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Airfield_Ingest_dataMode_Enum) {
  builder.addFieldInt8(34, dataMode, Airfield_Ingest_dataMode_Enum.REAL);
}

static endAirfield_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirfield_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRF');
}

static finishSizePrefixedAirfield_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRF', true);
}

static createAirfield_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idSiteOffset:flatbuffers.Offset, altAirfieldIdOffset:flatbuffers.Offset, wacInnrOffset:flatbuffers.Offset, zarIdOffset:flatbuffers.Offset, icaoOffset:flatbuffers.Offset, iataOffset:flatbuffers.Offset, faaOffset:flatbuffers.Offset, hostNatCodeOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, lat:number, lon:number, elevFt:number, elevM:number, magDec:number, regionNameOffset:flatbuffers.Offset, countryCodeOffset:flatbuffers.Offset, cityOffset:flatbuffers.Offset, stateOffset:flatbuffers.Offset, geolocOffset:flatbuffers.Offset, gmtOffsetOffset:flatbuffers.Offset, suitabilityCodesOffset:flatbuffers.Offset, miscCodesOffset:flatbuffers.Offset, runways:number, maxRunwayLength:number, infoUrlOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:Airfield_Ingest_dataMode_Enum):flatbuffers.Offset {
  Airfield_Ingest.startAirfield_Ingest(builder);
  Airfield_Ingest.addId(builder, idOffset);
  Airfield_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  Airfield_Ingest.addIdSite(builder, idSiteOffset);
  Airfield_Ingest.addAltAirfieldId(builder, altAirfieldIdOffset);
  Airfield_Ingest.addWacInnr(builder, wacInnrOffset);
  Airfield_Ingest.addZarId(builder, zarIdOffset);
  Airfield_Ingest.addIcao(builder, icaoOffset);
  Airfield_Ingest.addIata(builder, iataOffset);
  Airfield_Ingest.addFaa(builder, faaOffset);
  Airfield_Ingest.addHostNatCode(builder, hostNatCodeOffset);
  Airfield_Ingest.addName(builder, nameOffset);
  Airfield_Ingest.addType(builder, typeOffset);
  Airfield_Ingest.addLat(builder, lat);
  Airfield_Ingest.addLon(builder, lon);
  Airfield_Ingest.addElevFt(builder, elevFt);
  Airfield_Ingest.addElevM(builder, elevM);
  Airfield_Ingest.addMagDec(builder, magDec);
  Airfield_Ingest.addRegionName(builder, regionNameOffset);
  Airfield_Ingest.addCountryCode(builder, countryCodeOffset);
  Airfield_Ingest.addCity(builder, cityOffset);
  Airfield_Ingest.addState(builder, stateOffset);
  Airfield_Ingest.addGeoloc(builder, geolocOffset);
  Airfield_Ingest.addGmtOffset(builder, gmtOffsetOffset);
  Airfield_Ingest.addSuitabilityCodes(builder, suitabilityCodesOffset);
  Airfield_Ingest.addMiscCodes(builder, miscCodesOffset);
  Airfield_Ingest.addRunways(builder, runways);
  Airfield_Ingest.addMaxRunwayLength(builder, maxRunwayLength);
  Airfield_Ingest.addInfoUrl(builder, infoUrlOffset);
  Airfield_Ingest.addCreatedAt(builder, createdAtOffset);
  Airfield_Ingest.addCreatedBy(builder, createdByOffset);
  Airfield_Ingest.addSourceDl(builder, sourceDlOffset);
  Airfield_Ingest.addSource(builder, sourceOffset);
  Airfield_Ingest.addOrigin(builder, originOffset);
  Airfield_Ingest.addOrigNetwork(builder, origNetworkOffset);
  Airfield_Ingest.addDataMode(builder, dataMode);
  return Airfield_Ingest.endAirfield_Ingest(builder);
}

unpack(): Airfield_IngestT {
  return new Airfield_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idSite(),
    this.altAirfieldId(),
    this.wacInnr(),
    this.zarId(),
    this.icao(),
    this.iata(),
    this.faa(),
    this.hostNatCode(),
    this.name(),
    this.type(),
    this.lat(),
    this.lon(),
    this.elevFt(),
    this.elevM(),
    this.magDec(),
    this.regionName(),
    this.countryCode(),
    this.city(),
    this.state(),
    this.geoloc(),
    this.gmtOffset(),
    this.suitabilityCodes(),
    this.miscCodes(),
    this.runways(),
    this.maxRunwayLength(),
    this.infoUrl(),
    this.createdAt(),
    this.createdBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: Airfield_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idSite = this.idSite();
  _o.altAirfieldId = this.altAirfieldId();
  _o.wacINNR = this.wacInnr();
  _o.zarId = this.zarId();
  _o.icao = this.icao();
  _o.iata = this.iata();
  _o.faa = this.faa();
  _o.hostNatCode = this.hostNatCode();
  _o.name = this.name();
  _o.type = this.type();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.elevFt = this.elevFt();
  _o.elevM = this.elevM();
  _o.magDec = this.magDec();
  _o.regionName = this.regionName();
  _o.countryCode = this.countryCode();
  _o.city = this.city();
  _o.state = this.state();
  _o.geoloc = this.geoloc();
  _o.gmtOffset = this.gmtOffset();
  _o.suitabilityCodes = this.suitabilityCodes();
  _o.miscCodes = this.miscCodes();
  _o.runways = this.runways();
  _o.maxRunwayLength = this.maxRunwayLength();
  _o.infoURL = this.infoUrl();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class Airfield_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idSite: string|Uint8Array|null = null,
  public altAirfieldId: string|Uint8Array|null = null,
  public wacINNR: string|Uint8Array|null = null,
  public zarId: string|Uint8Array|null = null,
  public icao: string|Uint8Array|null = null,
  public iata: string|Uint8Array|null = null,
  public faa: string|Uint8Array|null = null,
  public hostNatCode: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public elevFt: number = 0.0,
  public elevM: number = 0.0,
  public magDec: number = 0.0,
  public regionName: string|Uint8Array|null = null,
  public countryCode: string|Uint8Array|null = null,
  public city: string|Uint8Array|null = null,
  public state: string|Uint8Array|null = null,
  public geoloc: string|Uint8Array|null = null,
  public gmtOffset: string|Uint8Array|null = null,
  public suitabilityCodes: string|Uint8Array|null = null,
  public miscCodes: string|Uint8Array|null = null,
  public runways: number = 0,
  public maxRunwayLength: number = 0,
  public infoURL: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: Airfield_Ingest_dataMode_Enum = Airfield_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idSite = (this.idSite !== null ? builder.createString(this.idSite!) : 0);
  const altAirfieldId = (this.altAirfieldId !== null ? builder.createString(this.altAirfieldId!) : 0);
  const wacINNR = (this.wacINNR !== null ? builder.createString(this.wacINNR!) : 0);
  const zarId = (this.zarId !== null ? builder.createString(this.zarId!) : 0);
  const icao = (this.icao !== null ? builder.createString(this.icao!) : 0);
  const iata = (this.iata !== null ? builder.createString(this.iata!) : 0);
  const faa = (this.faa !== null ? builder.createString(this.faa!) : 0);
  const hostNatCode = (this.hostNatCode !== null ? builder.createString(this.hostNatCode!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const regionName = (this.regionName !== null ? builder.createString(this.regionName!) : 0);
  const countryCode = (this.countryCode !== null ? builder.createString(this.countryCode!) : 0);
  const city = (this.city !== null ? builder.createString(this.city!) : 0);
  const state = (this.state !== null ? builder.createString(this.state!) : 0);
  const geoloc = (this.geoloc !== null ? builder.createString(this.geoloc!) : 0);
  const gmtOffset = (this.gmtOffset !== null ? builder.createString(this.gmtOffset!) : 0);
  const suitabilityCodes = (this.suitabilityCodes !== null ? builder.createString(this.suitabilityCodes!) : 0);
  const miscCodes = (this.miscCodes !== null ? builder.createString(this.miscCodes!) : 0);
  const infoURL = (this.infoURL !== null ? builder.createString(this.infoURL!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Airfield_Ingest.createAirfield_Ingest(builder,
    id,
    classificationMarking,
    idSite,
    altAirfieldId,
    wacINNR,
    zarId,
    icao,
    iata,
    faa,
    hostNatCode,
    name,
    type,
    this.lat,
    this.lon,
    this.elevFt,
    this.elevM,
    this.magDec,
    regionName,
    countryCode,
    city,
    state,
    geoloc,
    gmtOffset,
    suitabilityCodes,
    miscCodes,
    this.runways,
    this.maxRunwayLength,
    infoURL,
    createdAt,
    createdBy,
    sourceDL,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
