// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { NavigationalObstruction_Ingest_dataMode_Enum } from './navigational-obstruction-ingest-data-mode-enum.js';


/**
 * /// Beta Version Navigational Obstruction: Information describing navigational obstructions, such as applicable boundaries, locations, heights, data ownership, and currency.
 */
export class NavigationalObstruction_Ingest implements flatbuffers.IUnpackableObject<NavigationalObstruction_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NavigationalObstruction_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNavigationalObstruction_Ingest(bb:flatbuffers.ByteBuffer, obj?:NavigationalObstruction_Ingest):NavigationalObstruction_Ingest {
  return (obj || new NavigationalObstruction_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNavigationalObstruction_Ingest(bb:flatbuffers.ByteBuffer, obj?:NavigationalObstruction_Ingest):NavigationalObstruction_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NavigationalObstruction_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('NAVI');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start date of this obstruction data set's currency, in ISO 8601 date-only format.
 * Example: /// Example: 2024-06-13
 * Constraints: No constraints specified.
 */
cycleDate():string|null
cycleDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cycleDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of obstacle (e.g. P for point, V for vector, L for line).
 * Example: /// Example: V
 * Constraints: Minimum length = 1, Maximum length = 1
 */
obstacleType():string|null
obstacleType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obstacleType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The ID of this obstacle.
 * Example: /// Example: 359655
 * Constraints: Minimum length = 1, Maximum length = 32
 */
obstacleId():string|null
obstacleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obstacleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional obstacle ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: OU812
 * Constraints: Minimum length = 0, Maximum length = 32
 */
externalId():string|null
externalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The original ID for this obstacle.
 * Example: /// Example: L0000002289
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origId():string|null
origId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
 * Example: /// Example: US
 * Constraints: Minimum length = 0, Maximum length = 4
 */
countryCode():string|null
countryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Federal Information Processing Standards (FIPS) state/province numeric code of this obstacle's location.
 * Example: /// Example: 23
 * Constraints: Minimum length = 0, Maximum length = 4
 */
provinceCode():string|null
provinceCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
provinceCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 latitude of this point obstacle, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 46.757211
 * Constraints: No constraints specified.
 */
pointLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of this point obstacle, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: -67.759494
 * Constraints: No constraints specified.
 */
pointLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the northeastern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: -122.197891
 * Constraints: No constraints specified.
 */
lineNelon():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 latitude of the northeastern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 49.000584
 * Constraints: No constraints specified.
 */
lineNelat():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the southwestern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: -122.722946
 * Constraints: No constraints specified.
 */
lineSwlon():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 latitude of the southwestern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 48.507027
 * Constraints: No constraints specified.
 */
lineSwlat():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * ID of the starting point of a line segment.
 * Example: /// Example: 359655
 * Constraints: No constraints specified.
 */
segStartPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * ID of the end point of a line segment.
 * Example: /// Example: 359655
 * Constraints: No constraints specified.
 */
segEndPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Identifies the sequence number of a line segment.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
segNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * FACC (Feature and Attribute Coding Catalog) is a five-character code for encoding real-world entities and objects. The first letter of the code is an alphabetic value from "A" to "Z" which will map to a feature category. The second character will map to a subcategory. Characters three to five are numeric and range from 000 to 999. This value will provide a unit feature type identification within the categories.
 * Example: /// Example: AT040
 * Constraints: Minimum length = 0, Maximum length = 5
 */
facc():string|null
facc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
facc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifying code for the type of this point obstacle.
 * Example: /// Example: 540
 * Constraints: Minimum length = 0, Maximum length = 4
 */
featureCode():string|null
featureCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
featureCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifying code for the type of this point obstacle.
 * Example: /// Example: 540
 * Constraints: Minimum length = 0, Maximum length = 4
 */
featureType():string|null
featureType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
featureType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type name of point obstacle.
 * Example: /// Example: PYLON
 * Constraints: Minimum length = 0, Maximum length = 64
 */
featureName():string|null
featureName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
featureName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of this obstacle, corresponding to the FACC (Feature and Attribute Coding Catalog) value.
 * Example: /// Example: Powerline Pylon, General
 * Constraints: Minimum length = 0, Maximum length = 64
 */
featureDescription():string|null
featureDescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
featureDescription(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The World Aeronautical Chart (WAC) identifier for the area in which this obstacle is located.
 * Example: /// Example: 262
 * Constraints: Minimum length = 0, Maximum length = 4
 */
wac():string|null
wac(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
wac(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * This obstacle's World Area Code installation number (WAC-INNR).
 * Example: /// Example: 0409-00039
 * Constraints: Minimum length = 0, Maximum length = 32
 */
wacInnr():string|null
wacInnr(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
wacInnr(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates if the feature has multiple obstructions (e.g. S = Single, M = Multiple, U = Undetermined).
 * Example: /// Example: S
 * Constraints: Minimum length = 0, Maximum length = 1
 */
multObs():string|null
multObs(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
multObs(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the number of obstructions associated with a feature.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numObs():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Code representing the mathematical model of Earth used to calculate coordinates for this obstacle (e.g. WGS-84, U for undetermined, etc.).  US Forces use the World Geodetic System 1984 (WGS-84), but also use maps by allied countries with local datums.
 * Example: /// Example: WGS-84
 * Constraints: Minimum length = 0, Maximum length = 8
 */
horizDatumCode():string|null
horizDatumCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
horizDatumCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The height Above Ground Level (AGL) of the point obstacle in feet.
 * Example: /// Example: 314.1
 * Constraints: No constraints specified.
 */
heightAgl():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The accuracy of the height Above Ground Level (AGL) AGL value for this point obstacle in feet.
 * Example: /// Example: 30.1
 * Constraints: No constraints specified.
 */
heightAglacc():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The height Above Mean Sea Level (AMSL) of the point obstacle in feet.
 * Example: /// Example: 1154.1
 * Constraints: No constraints specified.
 */
heightMsl():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The accuracy of the height Above Mean Sea Level (AMSL) value for this point obstacle in feet.
 * Example: /// Example: 34.1
 * Constraints: No constraints specified.
 */
heightMslacc():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The elevation at the point obstacle's location in feet.
 * Example: /// Example: 840.1
 * Constraints: No constraints specified.
 */
elevation():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The difference between the assigned elevation of this point and its true elevation, in feet.
 * Example: /// Example: 17.1
 * Constraints: No constraints specified.
 */
elevationAcc():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The difference between the recorded horizontal coordinates of this point obstacle and its true position, in feet.
 * Example: /// Example: 8.1
 * Constraints: No constraints specified.
 */
horizAcc():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * When horizontal and/or vertical accuracy requirements cannot be met because of inadequate source material, this code indicates the quality of the data.
 * Example: /// Example: 0
 * Constraints: Minimum length = 0, Maximum length = 1
 */
quality():string|null
quality(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
quality(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Code specifying if this obstacle is lit (e.g. Y = Yes, N = No, U = Unknown).
 * Example: /// Example: U
 * Constraints: Minimum length = 0, Maximum length = 1
 */
lightingCode():string|null
lightingCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lightingCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The surface material composition code of this point obstacle.
 * Example: /// Example: U
 * Constraints: Minimum length = 0, Maximum length = 1
 */
surfaceMatCode():string|null
surfaceMatCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
surfaceMatCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The side or sides of this obstruction feature which produces the greatest reflectivity potential.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
directivityCode():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Method used to confirm the existence of this obstacle.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
validationCode():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The transaction type/code for this obstacle (e.g. "D", "N", "R", "S", "V", "X").
 * Example: /// Example: V
 * Constraints: Minimum length = 0, Maximum length = 1
 */
transactionCode():string|null
transactionCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Code denoting the action, review, or process that updated this obstacle.
 * Example: /// Example: OT
 * Constraints: Minimum length = 0, Maximum length = 4
 */
processCode():string|null
processCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
processCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates if this obstacle record is Active (A) or Deleted (D).
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 1
 */
actDelCode():string|null
actDelCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actDelCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the agency that produced this obstruction data set.
 * Example: /// Example: ACME
 * Constraints: Minimum length = 0, Maximum length = 128
 */
producer():string|null
producer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
producer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The organization that entered obstacle data other than the producer.
 * Example: /// Example: ACME
 * Constraints: Minimum length = 0, Maximum length = 64
 */
derivingOrg():string|null
derivingOrg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
derivingOrg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The organization that deleted this obstacle record.
 * Example: /// Example: ACME
 * Constraints: Minimum length = 0, Maximum length = 64
 */
deletingOrg():string|null
deletingOrg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
deletingOrg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source date of this obstacle data, in ISO 8601 date-only format (ex. YYYY-MM-DD).
 * Example: /// Example: 2016-04-01
 * Constraints: No constraints specified.
 */
sourceDate():string|null
sourceDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Date this obstacle data was revised, in ISO 8601 date-only format (ex. YYYY-MM-DD).
 * Example: /// Example: 2020-02-26
 * Constraints: No constraints specified.
 */
revDate():string|null
revDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
revDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Date this obstacle was initially added to the data set, in ISO 8601 date-only format (ex. YYYY-MM-DD).
 * Example: /// Example: 1991-03-28
 * Constraints: No constraints specified.
 */
initRecordDate():string|null
initRecordDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
initRecordDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * This field provides an array of keys that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the values array. This array must be the same length as values.
 * Example: /// Example: ['key1', 'key2']
 * Constraints: No constraints specified.
 */
keys(index: number):string
keys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
keys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

keysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * This field provides an array of values that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
 * Example: /// Example: ['value1', 'value2']
 * Constraints: No constraints specified.
 */
values(index: number):string
values(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
values(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Remarks regarding this obstacle.
 * Example: /// Example: Obstacle remarks
 * Constraints: Minimum length = 0, Maximum length = 512
 */
obstacleRemarks():string|null
obstacleRemarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obstacleRemarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The date after which this obstruction data set’s currency is stale and should be refreshed, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
 * Example: /// Example: 2024-07-11
 * Constraints: No constraints specified.
 */
nextCycleDate():string|null
nextCycleDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nextCycleDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Earliest record date possible in this obstruction data set (not the earliest data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD). If null, this data set is assumed to be a full data pull of holdings until the cutoffDate.  If this field is populated, this data set only contains updates since the last baseline data set.
 * Example: /// Example: 2024-04-23
 * Constraints: No constraints specified.
 */
baselineCutoffDate():string|null
baselineCutoffDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
baselineCutoffDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Latest record date possible in this obstruction data set (not the most recent data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD).
 * Example: /// Example: 2024-05-21
 * Constraints: No constraints specified.
 */
cutoffDate():string|null
cutoffDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cutoffDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Aeronautical Information Regulation and Control (AIRAC) cycle of this obstruction data set. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
 * Example: /// Example: 2406
 * Constraints: No constraints specified.
 */
airacCycle():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The baseline Aeronautical Information Regulation and Control (AIRAC) cycle for change sets only. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
 * Example: /// Example: 2405
 * Constraints: No constraints specified.
 */
baseAiracCycle():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The DoD Standard Country Code designator for the country or political entity that owns the data set associated with this obstruction. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
 * Example: /// Example: US
 * Constraints: Minimum length = 0, Maximum length = 4
 */
ownerCountryCode():string|null
ownerCountryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ownerCountryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 longitude of the northeastern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 99.1
 * Constraints: No constraints specified.
 */
boundNelon():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 latitude of the northeastern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 29.1
 * Constraints: No constraints specified.
 */
boundNelat():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the southwestern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: -144.1
 * Constraints: No constraints specified.
 */
boundSwlon():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 latitude of the southwestern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: -44.1
 * Constraints: No constraints specified.
 */
boundSwlat():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The minimum height Above Ground Level (AGL) of the shortest obstruction contained in this data set, in feet.
 * Example: /// Example: 20.1
 * Constraints: No constraints specified.
 */
minHeightAgl():number {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The number of point features associated with this obstruction data set.
 * Example: /// Example: 21830590
 * Constraints: No constraints specified.
 */
numPoints():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The number of line features associated with this obstruction data set.
 * Example: /// Example: 45993
 * Constraints: No constraints specified.
 */
numLines():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Remarks concerning this obstruction's data set.
 * Example: /// Example: Data set remarks
 * Constraints: Minimum length = 0, Maximum length = 512
 */
dataSetRemarks():string|null
dataSetRemarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataSetRemarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the point file associated with this obstruction data set.
 * Example: /// Example: points.txt
 * Constraints: Minimum length = 0, Maximum length = 256
 */
pointsFilename():string|null
pointsFilename(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pointsFilename(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the line file associated with this obstruction data set.
 * Example: /// Example: lines.txt
 * Constraints: Minimum length = 0, Maximum length = 256
 */
linesFilename():string|null
linesFilename(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linesFilename(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the vector file associated with this obstruction data set.
 * Example: /// Example: vectors.txt
 * Constraints: Minimum length = 0, Maximum length = 256
 */
vectorsFilename():string|null
vectorsFilename(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vectorsFilename(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: Example URI
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():NavigationalObstruction_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : NavigationalObstruction_Ingest_dataMode_Enum.REAL;
}

static startNavigationalObstruction_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(77);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addCycleDate(builder:flatbuffers.Builder, cycleDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, cycleDateOffset, 0);
}

static addObstacleType(builder:flatbuffers.Builder, obstacleTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, obstacleTypeOffset, 0);
}

static addObstacleId(builder:flatbuffers.Builder, obstacleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, obstacleIdOffset, 0);
}

static addExternalId(builder:flatbuffers.Builder, externalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, externalIdOffset, 0);
}

static addOrigId(builder:flatbuffers.Builder, origIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, origIdOffset, 0);
}

static addCountryCode(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, countryCodeOffset, 0);
}

static addProvinceCode(builder:flatbuffers.Builder, provinceCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, provinceCodeOffset, 0);
}

static addPointLat(builder:flatbuffers.Builder, pointLat:number) {
  builder.addFieldFloat64(9, pointLat, 0.0);
}

static addPointLon(builder:flatbuffers.Builder, pointLon:number) {
  builder.addFieldFloat64(10, pointLon, 0.0);
}

static addLineNelon(builder:flatbuffers.Builder, lineNelon:number) {
  builder.addFieldFloat64(11, lineNelon, 0.0);
}

static addLineNelat(builder:flatbuffers.Builder, lineNelat:number) {
  builder.addFieldFloat64(12, lineNelat, 0.0);
}

static addLineSwlon(builder:flatbuffers.Builder, lineSwlon:number) {
  builder.addFieldFloat64(13, lineSwlon, 0.0);
}

static addLineSwlat(builder:flatbuffers.Builder, lineSwlat:number) {
  builder.addFieldFloat64(14, lineSwlat, 0.0);
}

static addSegStartPoint(builder:flatbuffers.Builder, segStartPoint:number) {
  builder.addFieldInt32(15, segStartPoint, 0);
}

static addSegEndPoint(builder:flatbuffers.Builder, segEndPoint:number) {
  builder.addFieldInt32(16, segEndPoint, 0);
}

static addSegNum(builder:flatbuffers.Builder, segNum:number) {
  builder.addFieldInt32(17, segNum, 0);
}

static addFacc(builder:flatbuffers.Builder, faccOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, faccOffset, 0);
}

static addFeatureCode(builder:flatbuffers.Builder, featureCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, featureCodeOffset, 0);
}

static addFeatureType(builder:flatbuffers.Builder, featureTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, featureTypeOffset, 0);
}

static addFeatureName(builder:flatbuffers.Builder, featureNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, featureNameOffset, 0);
}

static addFeatureDescription(builder:flatbuffers.Builder, featureDescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, featureDescriptionOffset, 0);
}

static addWac(builder:flatbuffers.Builder, wacOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, wacOffset, 0);
}

static addWacInnr(builder:flatbuffers.Builder, wacInnrOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, wacInnrOffset, 0);
}

static addMultObs(builder:flatbuffers.Builder, multObsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, multObsOffset, 0);
}

static addNumObs(builder:flatbuffers.Builder, numObs:number) {
  builder.addFieldInt32(26, numObs, 0);
}

static addHorizDatumCode(builder:flatbuffers.Builder, horizDatumCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, horizDatumCodeOffset, 0);
}

static addHeightAgl(builder:flatbuffers.Builder, heightAgl:number) {
  builder.addFieldFloat64(28, heightAgl, 0.0);
}

static addHeightAglacc(builder:flatbuffers.Builder, heightAglacc:number) {
  builder.addFieldFloat64(29, heightAglacc, 0.0);
}

static addHeightMsl(builder:flatbuffers.Builder, heightMsl:number) {
  builder.addFieldFloat64(30, heightMsl, 0.0);
}

static addHeightMslacc(builder:flatbuffers.Builder, heightMslacc:number) {
  builder.addFieldFloat64(31, heightMslacc, 0.0);
}

static addElevation(builder:flatbuffers.Builder, elevation:number) {
  builder.addFieldFloat64(32, elevation, 0.0);
}

static addElevationAcc(builder:flatbuffers.Builder, elevationAcc:number) {
  builder.addFieldFloat64(33, elevationAcc, 0.0);
}

static addHorizAcc(builder:flatbuffers.Builder, horizAcc:number) {
  builder.addFieldFloat64(34, horizAcc, 0.0);
}

static addQuality(builder:flatbuffers.Builder, qualityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, qualityOffset, 0);
}

static addLightingCode(builder:flatbuffers.Builder, lightingCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, lightingCodeOffset, 0);
}

static addSurfaceMatCode(builder:flatbuffers.Builder, surfaceMatCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, surfaceMatCodeOffset, 0);
}

static addDirectivityCode(builder:flatbuffers.Builder, directivityCode:number) {
  builder.addFieldInt32(38, directivityCode, 0);
}

static addValidationCode(builder:flatbuffers.Builder, validationCode:number) {
  builder.addFieldInt32(39, validationCode, 0);
}

static addTransactionCode(builder:flatbuffers.Builder, transactionCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, transactionCodeOffset, 0);
}

static addProcessCode(builder:flatbuffers.Builder, processCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, processCodeOffset, 0);
}

static addActDelCode(builder:flatbuffers.Builder, actDelCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, actDelCodeOffset, 0);
}

static addProducer(builder:flatbuffers.Builder, producerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, producerOffset, 0);
}

static addDerivingOrg(builder:flatbuffers.Builder, derivingOrgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, derivingOrgOffset, 0);
}

static addDeletingOrg(builder:flatbuffers.Builder, deletingOrgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, deletingOrgOffset, 0);
}

static addSourceDate(builder:flatbuffers.Builder, sourceDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, sourceDateOffset, 0);
}

static addRevDate(builder:flatbuffers.Builder, revDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, revDateOffset, 0);
}

static addInitRecordDate(builder:flatbuffers.Builder, initRecordDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, initRecordDateOffset, 0);
}

static addKeys(builder:flatbuffers.Builder, keysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, keysOffset, 0);
}

static createKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addObstacleRemarks(builder:flatbuffers.Builder, obstacleRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, obstacleRemarksOffset, 0);
}

static addNextCycleDate(builder:flatbuffers.Builder, nextCycleDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, nextCycleDateOffset, 0);
}

static addBaselineCutoffDate(builder:flatbuffers.Builder, baselineCutoffDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, baselineCutoffDateOffset, 0);
}

static addCutoffDate(builder:flatbuffers.Builder, cutoffDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, cutoffDateOffset, 0);
}

static addAiracCycle(builder:flatbuffers.Builder, airacCycle:number) {
  builder.addFieldInt32(55, airacCycle, 0);
}

static addBaseAiracCycle(builder:flatbuffers.Builder, baseAiracCycle:number) {
  builder.addFieldInt32(56, baseAiracCycle, 0);
}

static addOwnerCountryCode(builder:flatbuffers.Builder, ownerCountryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, ownerCountryCodeOffset, 0);
}

static addBoundNelon(builder:flatbuffers.Builder, boundNelon:number) {
  builder.addFieldFloat64(58, boundNelon, 0.0);
}

static addBoundNelat(builder:flatbuffers.Builder, boundNelat:number) {
  builder.addFieldFloat64(59, boundNelat, 0.0);
}

static addBoundSwlon(builder:flatbuffers.Builder, boundSwlon:number) {
  builder.addFieldFloat64(60, boundSwlon, 0.0);
}

static addBoundSwlat(builder:flatbuffers.Builder, boundSwlat:number) {
  builder.addFieldFloat64(61, boundSwlat, 0.0);
}

static addMinHeightAgl(builder:flatbuffers.Builder, minHeightAgl:number) {
  builder.addFieldFloat64(62, minHeightAgl, 0.0);
}

static addNumPoints(builder:flatbuffers.Builder, numPoints:number) {
  builder.addFieldInt32(63, numPoints, 0);
}

static addNumLines(builder:flatbuffers.Builder, numLines:number) {
  builder.addFieldInt32(64, numLines, 0);
}

static addDataSetRemarks(builder:flatbuffers.Builder, dataSetRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, dataSetRemarksOffset, 0);
}

static addPointsFilename(builder:flatbuffers.Builder, pointsFilenameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, pointsFilenameOffset, 0);
}

static addLinesFilename(builder:flatbuffers.Builder, linesFilenameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, linesFilenameOffset, 0);
}

static addVectorsFilename(builder:flatbuffers.Builder, vectorsFilenameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(68, vectorsFilenameOffset, 0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(69, rawFileUriOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(70, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(71, createdByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(72, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(73, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(74, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(75, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:NavigationalObstruction_Ingest_dataMode_Enum) {
  builder.addFieldInt8(76, dataMode, NavigationalObstruction_Ingest_dataMode_Enum.REAL);
}

static endNavigationalObstruction_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishNavigationalObstruction_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'NAVI');
}

static finishSizePrefixedNavigationalObstruction_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'NAVI', true);
}

static createNavigationalObstruction_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, cycleDateOffset:flatbuffers.Offset, obstacleTypeOffset:flatbuffers.Offset, obstacleIdOffset:flatbuffers.Offset, externalIdOffset:flatbuffers.Offset, origIdOffset:flatbuffers.Offset, countryCodeOffset:flatbuffers.Offset, provinceCodeOffset:flatbuffers.Offset, pointLat:number, pointLon:number, lineNelon:number, lineNelat:number, lineSwlon:number, lineSwlat:number, segStartPoint:number, segEndPoint:number, segNum:number, faccOffset:flatbuffers.Offset, featureCodeOffset:flatbuffers.Offset, featureTypeOffset:flatbuffers.Offset, featureNameOffset:flatbuffers.Offset, featureDescriptionOffset:flatbuffers.Offset, wacOffset:flatbuffers.Offset, wacInnrOffset:flatbuffers.Offset, multObsOffset:flatbuffers.Offset, numObs:number, horizDatumCodeOffset:flatbuffers.Offset, heightAgl:number, heightAglacc:number, heightMsl:number, heightMslacc:number, elevation:number, elevationAcc:number, horizAcc:number, qualityOffset:flatbuffers.Offset, lightingCodeOffset:flatbuffers.Offset, surfaceMatCodeOffset:flatbuffers.Offset, directivityCode:number, validationCode:number, transactionCodeOffset:flatbuffers.Offset, processCodeOffset:flatbuffers.Offset, actDelCodeOffset:flatbuffers.Offset, producerOffset:flatbuffers.Offset, derivingOrgOffset:flatbuffers.Offset, deletingOrgOffset:flatbuffers.Offset, sourceDateOffset:flatbuffers.Offset, revDateOffset:flatbuffers.Offset, initRecordDateOffset:flatbuffers.Offset, keysOffset:flatbuffers.Offset, valuesOffset:flatbuffers.Offset, obstacleRemarksOffset:flatbuffers.Offset, nextCycleDateOffset:flatbuffers.Offset, baselineCutoffDateOffset:flatbuffers.Offset, cutoffDateOffset:flatbuffers.Offset, airacCycle:number, baseAiracCycle:number, ownerCountryCodeOffset:flatbuffers.Offset, boundNelon:number, boundNelat:number, boundSwlon:number, boundSwlat:number, minHeightAgl:number, numPoints:number, numLines:number, dataSetRemarksOffset:flatbuffers.Offset, pointsFilenameOffset:flatbuffers.Offset, linesFilenameOffset:flatbuffers.Offset, vectorsFilenameOffset:flatbuffers.Offset, rawFileUriOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:NavigationalObstruction_Ingest_dataMode_Enum):flatbuffers.Offset {
  NavigationalObstruction_Ingest.startNavigationalObstruction_Ingest(builder);
  NavigationalObstruction_Ingest.addId(builder, idOffset);
  NavigationalObstruction_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  NavigationalObstruction_Ingest.addCycleDate(builder, cycleDateOffset);
  NavigationalObstruction_Ingest.addObstacleType(builder, obstacleTypeOffset);
  NavigationalObstruction_Ingest.addObstacleId(builder, obstacleIdOffset);
  NavigationalObstruction_Ingest.addExternalId(builder, externalIdOffset);
  NavigationalObstruction_Ingest.addOrigId(builder, origIdOffset);
  NavigationalObstruction_Ingest.addCountryCode(builder, countryCodeOffset);
  NavigationalObstruction_Ingest.addProvinceCode(builder, provinceCodeOffset);
  NavigationalObstruction_Ingest.addPointLat(builder, pointLat);
  NavigationalObstruction_Ingest.addPointLon(builder, pointLon);
  NavigationalObstruction_Ingest.addLineNelon(builder, lineNelon);
  NavigationalObstruction_Ingest.addLineNelat(builder, lineNelat);
  NavigationalObstruction_Ingest.addLineSwlon(builder, lineSwlon);
  NavigationalObstruction_Ingest.addLineSwlat(builder, lineSwlat);
  NavigationalObstruction_Ingest.addSegStartPoint(builder, segStartPoint);
  NavigationalObstruction_Ingest.addSegEndPoint(builder, segEndPoint);
  NavigationalObstruction_Ingest.addSegNum(builder, segNum);
  NavigationalObstruction_Ingest.addFacc(builder, faccOffset);
  NavigationalObstruction_Ingest.addFeatureCode(builder, featureCodeOffset);
  NavigationalObstruction_Ingest.addFeatureType(builder, featureTypeOffset);
  NavigationalObstruction_Ingest.addFeatureName(builder, featureNameOffset);
  NavigationalObstruction_Ingest.addFeatureDescription(builder, featureDescriptionOffset);
  NavigationalObstruction_Ingest.addWac(builder, wacOffset);
  NavigationalObstruction_Ingest.addWacInnr(builder, wacInnrOffset);
  NavigationalObstruction_Ingest.addMultObs(builder, multObsOffset);
  NavigationalObstruction_Ingest.addNumObs(builder, numObs);
  NavigationalObstruction_Ingest.addHorizDatumCode(builder, horizDatumCodeOffset);
  NavigationalObstruction_Ingest.addHeightAgl(builder, heightAgl);
  NavigationalObstruction_Ingest.addHeightAglacc(builder, heightAglacc);
  NavigationalObstruction_Ingest.addHeightMsl(builder, heightMsl);
  NavigationalObstruction_Ingest.addHeightMslacc(builder, heightMslacc);
  NavigationalObstruction_Ingest.addElevation(builder, elevation);
  NavigationalObstruction_Ingest.addElevationAcc(builder, elevationAcc);
  NavigationalObstruction_Ingest.addHorizAcc(builder, horizAcc);
  NavigationalObstruction_Ingest.addQuality(builder, qualityOffset);
  NavigationalObstruction_Ingest.addLightingCode(builder, lightingCodeOffset);
  NavigationalObstruction_Ingest.addSurfaceMatCode(builder, surfaceMatCodeOffset);
  NavigationalObstruction_Ingest.addDirectivityCode(builder, directivityCode);
  NavigationalObstruction_Ingest.addValidationCode(builder, validationCode);
  NavigationalObstruction_Ingest.addTransactionCode(builder, transactionCodeOffset);
  NavigationalObstruction_Ingest.addProcessCode(builder, processCodeOffset);
  NavigationalObstruction_Ingest.addActDelCode(builder, actDelCodeOffset);
  NavigationalObstruction_Ingest.addProducer(builder, producerOffset);
  NavigationalObstruction_Ingest.addDerivingOrg(builder, derivingOrgOffset);
  NavigationalObstruction_Ingest.addDeletingOrg(builder, deletingOrgOffset);
  NavigationalObstruction_Ingest.addSourceDate(builder, sourceDateOffset);
  NavigationalObstruction_Ingest.addRevDate(builder, revDateOffset);
  NavigationalObstruction_Ingest.addInitRecordDate(builder, initRecordDateOffset);
  NavigationalObstruction_Ingest.addKeys(builder, keysOffset);
  NavigationalObstruction_Ingest.addValues(builder, valuesOffset);
  NavigationalObstruction_Ingest.addObstacleRemarks(builder, obstacleRemarksOffset);
  NavigationalObstruction_Ingest.addNextCycleDate(builder, nextCycleDateOffset);
  NavigationalObstruction_Ingest.addBaselineCutoffDate(builder, baselineCutoffDateOffset);
  NavigationalObstruction_Ingest.addCutoffDate(builder, cutoffDateOffset);
  NavigationalObstruction_Ingest.addAiracCycle(builder, airacCycle);
  NavigationalObstruction_Ingest.addBaseAiracCycle(builder, baseAiracCycle);
  NavigationalObstruction_Ingest.addOwnerCountryCode(builder, ownerCountryCodeOffset);
  NavigationalObstruction_Ingest.addBoundNelon(builder, boundNelon);
  NavigationalObstruction_Ingest.addBoundNelat(builder, boundNelat);
  NavigationalObstruction_Ingest.addBoundSwlon(builder, boundSwlon);
  NavigationalObstruction_Ingest.addBoundSwlat(builder, boundSwlat);
  NavigationalObstruction_Ingest.addMinHeightAgl(builder, minHeightAgl);
  NavigationalObstruction_Ingest.addNumPoints(builder, numPoints);
  NavigationalObstruction_Ingest.addNumLines(builder, numLines);
  NavigationalObstruction_Ingest.addDataSetRemarks(builder, dataSetRemarksOffset);
  NavigationalObstruction_Ingest.addPointsFilename(builder, pointsFilenameOffset);
  NavigationalObstruction_Ingest.addLinesFilename(builder, linesFilenameOffset);
  NavigationalObstruction_Ingest.addVectorsFilename(builder, vectorsFilenameOffset);
  NavigationalObstruction_Ingest.addRawFileUri(builder, rawFileUriOffset);
  NavigationalObstruction_Ingest.addCreatedAt(builder, createdAtOffset);
  NavigationalObstruction_Ingest.addCreatedBy(builder, createdByOffset);
  NavigationalObstruction_Ingest.addSourceDl(builder, sourceDlOffset);
  NavigationalObstruction_Ingest.addSource(builder, sourceOffset);
  NavigationalObstruction_Ingest.addOrigin(builder, originOffset);
  NavigationalObstruction_Ingest.addOrigNetwork(builder, origNetworkOffset);
  NavigationalObstruction_Ingest.addDataMode(builder, dataMode);
  return NavigationalObstruction_Ingest.endNavigationalObstruction_Ingest(builder);
}

unpack(): NavigationalObstruction_IngestT {
  return new NavigationalObstruction_IngestT(
    this.id(),
    this.classificationMarking(),
    this.cycleDate(),
    this.obstacleType(),
    this.obstacleId(),
    this.externalId(),
    this.origId(),
    this.countryCode(),
    this.provinceCode(),
    this.pointLat(),
    this.pointLon(),
    this.lineNelon(),
    this.lineNelat(),
    this.lineSwlon(),
    this.lineSwlat(),
    this.segStartPoint(),
    this.segEndPoint(),
    this.segNum(),
    this.facc(),
    this.featureCode(),
    this.featureType(),
    this.featureName(),
    this.featureDescription(),
    this.wac(),
    this.wacInnr(),
    this.multObs(),
    this.numObs(),
    this.horizDatumCode(),
    this.heightAgl(),
    this.heightAglacc(),
    this.heightMsl(),
    this.heightMslacc(),
    this.elevation(),
    this.elevationAcc(),
    this.horizAcc(),
    this.quality(),
    this.lightingCode(),
    this.surfaceMatCode(),
    this.directivityCode(),
    this.validationCode(),
    this.transactionCode(),
    this.processCode(),
    this.actDelCode(),
    this.producer(),
    this.derivingOrg(),
    this.deletingOrg(),
    this.sourceDate(),
    this.revDate(),
    this.initRecordDate(),
    this.bb!.createScalarList<string>(this.keys.bind(this), this.keys_Length()),
    this.bb!.createScalarList<string>(this.values.bind(this), this.values_Length()),
    this.obstacleRemarks(),
    this.nextCycleDate(),
    this.baselineCutoffDate(),
    this.cutoffDate(),
    this.airacCycle(),
    this.baseAiracCycle(),
    this.ownerCountryCode(),
    this.boundNelon(),
    this.boundNelat(),
    this.boundSwlon(),
    this.boundSwlat(),
    this.minHeightAgl(),
    this.numPoints(),
    this.numLines(),
    this.dataSetRemarks(),
    this.pointsFilename(),
    this.linesFilename(),
    this.vectorsFilename(),
    this.rawFileUri(),
    this.createdAt(),
    this.createdBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: NavigationalObstruction_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.cycleDate = this.cycleDate();
  _o.obstacleType = this.obstacleType();
  _o.obstacleId = this.obstacleId();
  _o.externalId = this.externalId();
  _o.origId = this.origId();
  _o.countryCode = this.countryCode();
  _o.provinceCode = this.provinceCode();
  _o.pointLat = this.pointLat();
  _o.pointLon = this.pointLon();
  _o.lineNELon = this.lineNelon();
  _o.lineNELat = this.lineNelat();
  _o.lineSWLon = this.lineSwlon();
  _o.lineSWLat = this.lineSwlat();
  _o.segStartPoint = this.segStartPoint();
  _o.segEndPoint = this.segEndPoint();
  _o.segNum = this.segNum();
  _o.facc = this.facc();
  _o.featureCode = this.featureCode();
  _o.featureType = this.featureType();
  _o.featureName = this.featureName();
  _o.featureDescription = this.featureDescription();
  _o.wac = this.wac();
  _o.wacINNR = this.wacInnr();
  _o.multObs = this.multObs();
  _o.numObs = this.numObs();
  _o.horizDatumCode = this.horizDatumCode();
  _o.heightAGL = this.heightAgl();
  _o.heightAGLAcc = this.heightAglacc();
  _o.heightMSL = this.heightMsl();
  _o.heightMSLAcc = this.heightMslacc();
  _o.elevation = this.elevation();
  _o.elevationAcc = this.elevationAcc();
  _o.horizAcc = this.horizAcc();
  _o.quality = this.quality();
  _o.lightingCode = this.lightingCode();
  _o.surfaceMatCode = this.surfaceMatCode();
  _o.directivityCode = this.directivityCode();
  _o.validationCode = this.validationCode();
  _o.transactionCode = this.transactionCode();
  _o.processCode = this.processCode();
  _o.actDelCode = this.actDelCode();
  _o.producer = this.producer();
  _o.derivingOrg = this.derivingOrg();
  _o.deletingOrg = this.deletingOrg();
  _o.sourceDate = this.sourceDate();
  _o.revDate = this.revDate();
  _o.initRecordDate = this.initRecordDate();
  _o.keys = this.bb!.createScalarList<string>(this.keys.bind(this), this.keys_Length());
  _o.values = this.bb!.createScalarList<string>(this.values.bind(this), this.values_Length());
  _o.obstacleRemarks = this.obstacleRemarks();
  _o.nextCycleDate = this.nextCycleDate();
  _o.baselineCutoffDate = this.baselineCutoffDate();
  _o.cutoffDate = this.cutoffDate();
  _o.airacCycle = this.airacCycle();
  _o.baseAiracCycle = this.baseAiracCycle();
  _o.ownerCountryCode = this.ownerCountryCode();
  _o.boundNELon = this.boundNelon();
  _o.boundNELat = this.boundNelat();
  _o.boundSWLon = this.boundSwlon();
  _o.boundSWLat = this.boundSwlat();
  _o.minHeightAGL = this.minHeightAgl();
  _o.numPoints = this.numPoints();
  _o.numLines = this.numLines();
  _o.dataSetRemarks = this.dataSetRemarks();
  _o.pointsFilename = this.pointsFilename();
  _o.linesFilename = this.linesFilename();
  _o.vectorsFilename = this.vectorsFilename();
  _o.rawFileURI = this.rawFileUri();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class NavigationalObstruction_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public cycleDate: string|Uint8Array|null = null,
  public obstacleType: string|Uint8Array|null = null,
  public obstacleId: string|Uint8Array|null = null,
  public externalId: string|Uint8Array|null = null,
  public origId: string|Uint8Array|null = null,
  public countryCode: string|Uint8Array|null = null,
  public provinceCode: string|Uint8Array|null = null,
  public pointLat: number = 0.0,
  public pointLon: number = 0.0,
  public lineNELon: number = 0.0,
  public lineNELat: number = 0.0,
  public lineSWLon: number = 0.0,
  public lineSWLat: number = 0.0,
  public segStartPoint: number = 0,
  public segEndPoint: number = 0,
  public segNum: number = 0,
  public facc: string|Uint8Array|null = null,
  public featureCode: string|Uint8Array|null = null,
  public featureType: string|Uint8Array|null = null,
  public featureName: string|Uint8Array|null = null,
  public featureDescription: string|Uint8Array|null = null,
  public wac: string|Uint8Array|null = null,
  public wacINNR: string|Uint8Array|null = null,
  public multObs: string|Uint8Array|null = null,
  public numObs: number = 0,
  public horizDatumCode: string|Uint8Array|null = null,
  public heightAGL: number = 0.0,
  public heightAGLAcc: number = 0.0,
  public heightMSL: number = 0.0,
  public heightMSLAcc: number = 0.0,
  public elevation: number = 0.0,
  public elevationAcc: number = 0.0,
  public horizAcc: number = 0.0,
  public quality: string|Uint8Array|null = null,
  public lightingCode: string|Uint8Array|null = null,
  public surfaceMatCode: string|Uint8Array|null = null,
  public directivityCode: number = 0,
  public validationCode: number = 0,
  public transactionCode: string|Uint8Array|null = null,
  public processCode: string|Uint8Array|null = null,
  public actDelCode: string|Uint8Array|null = null,
  public producer: string|Uint8Array|null = null,
  public derivingOrg: string|Uint8Array|null = null,
  public deletingOrg: string|Uint8Array|null = null,
  public sourceDate: string|Uint8Array|null = null,
  public revDate: string|Uint8Array|null = null,
  public initRecordDate: string|Uint8Array|null = null,
  public keys: (string)[] = [],
  public values: (string)[] = [],
  public obstacleRemarks: string|Uint8Array|null = null,
  public nextCycleDate: string|Uint8Array|null = null,
  public baselineCutoffDate: string|Uint8Array|null = null,
  public cutoffDate: string|Uint8Array|null = null,
  public airacCycle: number = 0,
  public baseAiracCycle: number = 0,
  public ownerCountryCode: string|Uint8Array|null = null,
  public boundNELon: number = 0.0,
  public boundNELat: number = 0.0,
  public boundSWLon: number = 0.0,
  public boundSWLat: number = 0.0,
  public minHeightAGL: number = 0.0,
  public numPoints: number = 0,
  public numLines: number = 0,
  public dataSetRemarks: string|Uint8Array|null = null,
  public pointsFilename: string|Uint8Array|null = null,
  public linesFilename: string|Uint8Array|null = null,
  public vectorsFilename: string|Uint8Array|null = null,
  public rawFileURI: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: NavigationalObstruction_Ingest_dataMode_Enum = NavigationalObstruction_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const cycleDate = (this.cycleDate !== null ? builder.createString(this.cycleDate!) : 0);
  const obstacleType = (this.obstacleType !== null ? builder.createString(this.obstacleType!) : 0);
  const obstacleId = (this.obstacleId !== null ? builder.createString(this.obstacleId!) : 0);
  const externalId = (this.externalId !== null ? builder.createString(this.externalId!) : 0);
  const origId = (this.origId !== null ? builder.createString(this.origId!) : 0);
  const countryCode = (this.countryCode !== null ? builder.createString(this.countryCode!) : 0);
  const provinceCode = (this.provinceCode !== null ? builder.createString(this.provinceCode!) : 0);
  const facc = (this.facc !== null ? builder.createString(this.facc!) : 0);
  const featureCode = (this.featureCode !== null ? builder.createString(this.featureCode!) : 0);
  const featureType = (this.featureType !== null ? builder.createString(this.featureType!) : 0);
  const featureName = (this.featureName !== null ? builder.createString(this.featureName!) : 0);
  const featureDescription = (this.featureDescription !== null ? builder.createString(this.featureDescription!) : 0);
  const wac = (this.wac !== null ? builder.createString(this.wac!) : 0);
  const wacINNR = (this.wacINNR !== null ? builder.createString(this.wacINNR!) : 0);
  const multObs = (this.multObs !== null ? builder.createString(this.multObs!) : 0);
  const horizDatumCode = (this.horizDatumCode !== null ? builder.createString(this.horizDatumCode!) : 0);
  const quality = (this.quality !== null ? builder.createString(this.quality!) : 0);
  const lightingCode = (this.lightingCode !== null ? builder.createString(this.lightingCode!) : 0);
  const surfaceMatCode = (this.surfaceMatCode !== null ? builder.createString(this.surfaceMatCode!) : 0);
  const transactionCode = (this.transactionCode !== null ? builder.createString(this.transactionCode!) : 0);
  const processCode = (this.processCode !== null ? builder.createString(this.processCode!) : 0);
  const actDelCode = (this.actDelCode !== null ? builder.createString(this.actDelCode!) : 0);
  const producer = (this.producer !== null ? builder.createString(this.producer!) : 0);
  const derivingOrg = (this.derivingOrg !== null ? builder.createString(this.derivingOrg!) : 0);
  const deletingOrg = (this.deletingOrg !== null ? builder.createString(this.deletingOrg!) : 0);
  const sourceDate = (this.sourceDate !== null ? builder.createString(this.sourceDate!) : 0);
  const revDate = (this.revDate !== null ? builder.createString(this.revDate!) : 0);
  const initRecordDate = (this.initRecordDate !== null ? builder.createString(this.initRecordDate!) : 0);
  const keys = NavigationalObstruction_Ingest.createKeysVector(builder, builder.createObjectOffsetList(this.keys));
  const values = NavigationalObstruction_Ingest.createValuesVector(builder, builder.createObjectOffsetList(this.values));
  const obstacleRemarks = (this.obstacleRemarks !== null ? builder.createString(this.obstacleRemarks!) : 0);
  const nextCycleDate = (this.nextCycleDate !== null ? builder.createString(this.nextCycleDate!) : 0);
  const baselineCutoffDate = (this.baselineCutoffDate !== null ? builder.createString(this.baselineCutoffDate!) : 0);
  const cutoffDate = (this.cutoffDate !== null ? builder.createString(this.cutoffDate!) : 0);
  const ownerCountryCode = (this.ownerCountryCode !== null ? builder.createString(this.ownerCountryCode!) : 0);
  const dataSetRemarks = (this.dataSetRemarks !== null ? builder.createString(this.dataSetRemarks!) : 0);
  const pointsFilename = (this.pointsFilename !== null ? builder.createString(this.pointsFilename!) : 0);
  const linesFilename = (this.linesFilename !== null ? builder.createString(this.linesFilename!) : 0);
  const vectorsFilename = (this.vectorsFilename !== null ? builder.createString(this.vectorsFilename!) : 0);
  const rawFileURI = (this.rawFileURI !== null ? builder.createString(this.rawFileURI!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return NavigationalObstruction_Ingest.createNavigationalObstruction_Ingest(builder,
    id,
    classificationMarking,
    cycleDate,
    obstacleType,
    obstacleId,
    externalId,
    origId,
    countryCode,
    provinceCode,
    this.pointLat,
    this.pointLon,
    this.lineNELon,
    this.lineNELat,
    this.lineSWLon,
    this.lineSWLat,
    this.segStartPoint,
    this.segEndPoint,
    this.segNum,
    facc,
    featureCode,
    featureType,
    featureName,
    featureDescription,
    wac,
    wacINNR,
    multObs,
    this.numObs,
    horizDatumCode,
    this.heightAGL,
    this.heightAGLAcc,
    this.heightMSL,
    this.heightMSLAcc,
    this.elevation,
    this.elevationAcc,
    this.horizAcc,
    quality,
    lightingCode,
    surfaceMatCode,
    this.directivityCode,
    this.validationCode,
    transactionCode,
    processCode,
    actDelCode,
    producer,
    derivingOrg,
    deletingOrg,
    sourceDate,
    revDate,
    initRecordDate,
    keys,
    values,
    obstacleRemarks,
    nextCycleDate,
    baselineCutoffDate,
    cutoffDate,
    this.airacCycle,
    this.baseAiracCycle,
    ownerCountryCode,
    this.boundNELon,
    this.boundNELat,
    this.boundSWLon,
    this.boundSWLat,
    this.minHeightAGL,
    this.numPoints,
    this.numLines,
    dataSetRemarks,
    pointsFilename,
    linesFilename,
    vectorsFilename,
    rawFileURI,
    createdAt,
    createdBy,
    sourceDL,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
