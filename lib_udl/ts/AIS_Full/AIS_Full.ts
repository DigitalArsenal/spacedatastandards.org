// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AIS_Full_dataMode_Enum } from './AIS_Full_dataMode_Enum.js';


/**
 * /// Self-reported information obtained from Automatic Identification System (AIS) equipment. This contains information such as unique identification, status, position, course, and speed. The AIS is an automatic tracking system that uses transceivers on ships and is used by vessel traffic services. Although technically and operationally distinct, the AIS system is analogous to ADS-B that performs a similar function for aircraft. AIS is intended to assist a vessel's watchstanding officers and allow maritime authorities to track and monitor vessel movements. AIS integrates a standardized VHF transceiver with a positioning system such as Global Positioning System receiver, with other electronic navigation sensors, such as gyrocompass or rate of turn indicator. Vessels fitted with AIS transceivers can be tracked by AIS base stations located along coast lines or, when out of range of terrestrial networks, through a growing number of satellites that are fitted with special AIS receivers which are capable of deconflicting a large number of signatures.
 */
export class AIS_Full implements flatbuffers.IUnpackableObject<AIS_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AIS_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAIS_Full(bb:flatbuffers.ByteBuffer, obj?:AIS_Full):AIS_Full {
  return (obj || new AIS_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAIS_Full(bb:flatbuffers.ByteBuffer, obj?:AIS_Full):AIS_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AIS_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AISF');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: AIS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Track.
 * Example: /// Example: TRACK-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idTrack():string|null
idTrack(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idTrack(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the vessel.
 * Example: /// Example: VESSEL-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idVessel():string|null
idVessel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idVessel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Maritime Mobile Service Identity of the vessel.  MMSI is a nine-digit number that identifies the transmitter station of the vessel.
 * Example: /// Example: 304010417
 * Constraints: No constraints specified.
 */
mmsi():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

/**
 * The International Maritime Organization Number of the vessel.  IMON is a seven-digit number that uniquely identifies the vessel.
 * Example: /// Example: 9015462
 * Constraints: No constraints specified.
 */
imon():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

/**
 * The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
ts():string|null
ts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the vessel.  Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
 * Example: /// Example: DORNUM
 * Constraints: Minimum length = 0, Maximum length = 24
 */
shipName():string|null
shipName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shipName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).  See the engagedIn and specialCraft entries for additional information on certain types of vessels.
 * Example: /// Example: Passenger
 * Constraints: Minimum length = 0, Maximum length = 48
 */
shipType():string|null
shipType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shipType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The activity that the vessel is engaged in.  This entry applies only when the shipType = Other.
 * Example: /// Example: Cargo
 * Constraints: Minimum length = 0, Maximum length = 48
 */
engagedIn():string|null
engagedIn(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
engagedIn(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of special craft designation of the vessel.  This entry applies only when the shipType = Special Craft.
 * Example: /// Example: Tug
 * Constraints: Minimum length = 0, Maximum length = 48
 */
specialCraft():string|null
specialCraft(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
specialCraft(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
 * Example: /// Example: Freight
 * Constraints: Minimum length = 0, Maximum length = 48
 */
cargoType():string|null
cargoType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cargoType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A uniquely designated identifier for the vessel's transmitter station.
 * Example: /// Example: V2OZ
 * Constraints: Minimum length = 0, Maximum length = 24
 */
callSign():string|null
callSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The flag of the subject vessel according to AIS transmission.
 * Example: /// Example: United States
 * Constraints: Minimum length = 0, Maximum length = 36
 */
vesselFlag():string|null
vesselFlag(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vesselFlag(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 latitude of the vessel position, in degrees.  -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 47.758499
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the vessel position, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: -5.154223
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating high reported position accuracy (less than or equal to 10 meters).  A value of 0/false indicates low accuracy (greater than 10 meters).
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
posHiAccuracy():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating high reported position latency (greater than 5 seconds).  A value of 0/false indicates low latency (less than 5 seconds).
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
posHiLatency():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The speed-over-ground reported by the vessel, in kilometers/hour.
 * Example: /// Example: 10.5
 * Constraints: No constraints specified.
 */
speed():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The true heading reported by the vessel, in degrees.
 * Example: /// Example: 329.1
 * Constraints: No constraints specified.
 */
trueHeading():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The course-over-ground reported by the vessel, in degrees.
 * Example: /// Example: 157.1
 * Constraints: No constraints specified.
 */
course():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Rate-of-Turn for the vessel, in degrees/minute.  Positive value indicates that the vessel is turning right.
 * Example: /// Example: 22.1
 * Constraints: No constraints specified.
 */
rateOfTurn():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway Navigation).
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
specialManeuver():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
 * Example: /// Example: Underway Using Engine
 * Constraints: Minimum length = 0, Maximum length = 64
 */
navStatus():string|null
navStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
navStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
 * Example: /// Example: GPS
 * Constraints: Minimum length = 0, Maximum length = 24
 */
posDeviceType():string|null
posDeviceType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
posDeviceType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reference dimensions of the vessel, reported as [A, B, C, D], in meters.  Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna.  Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
 * Example: /// Example: [50.1, 50.1, 20.1, 20.1]
 * Constraints: No constraints specified.
 */
antennaRefDimensions(index: number):string
antennaRefDimensions(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
antennaRefDimensions(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

antennaRefDimensionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The overall length of the vessel, in meters.  A value of 511 indicates a vessel length of 511 meters or greater.
 * Example: /// Example: 511.1
 * Constraints: No constraints specified.
 */
length():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The breadth of the vessel, in meters.  A value of 63 indicates a vessel breadth of 63 meters or greater.
 * Example: /// Example: 24.1
 * Constraints: No constraints specified.
 */
width():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The maximum static draught, in meters, of the vessel according to the AIS transmission.
 * Example: /// Example: 21.1
 * Constraints: No constraints specified.
 */
draught():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Further description or explanation of the vessel or type.
 * Example: /// Example: Search and rescue vessels
 * Constraints: Minimum length = 0, Maximum length = 100
 */
shipDescription():string|null
shipDescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shipDescription(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The destination of the vessel according to the AIS transmission.
 * Example: /// Example: USCLE
 * Constraints: Minimum length = 0, Maximum length = 20
 */
destination():string|null
destination(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
destination(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC format.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
destinationEta():string|null
destinationEta(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
destinationEta(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The US Geographic Unique Identifier of the current port hosting the vessel.
 * Example: /// Example: 0ABC
 * Constraints: Minimum length = 0, Maximum length = 4
 */
currentPortGuid():string|null
currentPortGuid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentPortGuid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UN Location Code of the current port hosting the vessel.
 * Example: /// Example: XF013
 * Constraints: Minimum length = 0, Maximum length = 5
 */
currentPortLocode():string|null
currentPortLocode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentPortLocode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The US Geographic Unique Identifier of the last port visited by the vessel.
 * Example: /// Example: 0VAX
 * Constraints: Minimum length = 0, Maximum length = 4
 */
lastPortGuid():string|null
lastPortGuid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastPortGuid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UN Location Code of the last port visited by the vessel.
 * Example: /// Example: USSKY
 * Constraints: Minimum length = 0, Maximum length = 5
 */
lastPortLocode():string|null
lastPortLocode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastPortLocode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The US Geographic Unique Identifier of the next destination port of the vessel.
 * Example: /// Example: 0Z8Q
 * Constraints: Minimum length = 0, Maximum length = 4
 */
nextPortGuid():string|null
nextPortGuid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nextPortGuid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UN  Location Code of the next destination port of the vessel.
 * Example: /// Example: USCLE
 * Constraints: Minimum length = 0, Maximum length = 5
 */
nextPortLocode():string|null
nextPortLocode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nextPortLocode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Estimated Time of Arrival of the vessel at the destination port, according to MarineTraffic calculations, in ISO 8601 UTC format.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
etaCalculated():string|null
etaCalculated(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
etaCalculated(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC format.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
etaUpdated():string|null
etaUpdated(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
etaUpdated(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The remaining distance, in kilometers, for the vessel to reach the reported destination.
 * Example: /// Example: 150.5
 * Constraints: No constraints specified.
 */
distanceToGo():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The distance, in kilometers, that the vessel has travelled since departing the last port.
 * Example: /// Example: 200.3
 * Constraints: No constraints specified.
 */
distanceTravelled():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The average speed, in kilometers/hour, calculated for the subject vessel during the latest voyage (port to port).
 * Example: /// Example: 12.1
 * Constraints: No constraints specified.
 */
avgSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The maximum speed, in kilometers/hour, reported by the subject vessel during the latest voyage (port to port).
 * Example: /// Example: 13.3
 * Constraints: No constraints specified.
 */
maxSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AIS_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AIS_Full_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAIS_Full(builder:flatbuffers.Builder) {
  builder.startObject(51);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdTrack(builder:flatbuffers.Builder, idTrackOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idTrackOffset, 0);
}

static addIdVessel(builder:flatbuffers.Builder, idVesselOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idVesselOffset, 0);
}

static addMmsi(builder:flatbuffers.Builder, mmsi:bigint) {
  builder.addFieldInt64(4, mmsi, BigInt('0'));
}

static addImon(builder:flatbuffers.Builder, imon:bigint) {
  builder.addFieldInt64(5, imon, BigInt('0'));
}

static addTs(builder:flatbuffers.Builder, tsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, tsOffset, 0);
}

static addShipName(builder:flatbuffers.Builder, shipNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, shipNameOffset, 0);
}

static addShipType(builder:flatbuffers.Builder, shipTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, shipTypeOffset, 0);
}

static addEngagedIn(builder:flatbuffers.Builder, engagedInOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, engagedInOffset, 0);
}

static addSpecialCraft(builder:flatbuffers.Builder, specialCraftOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, specialCraftOffset, 0);
}

static addCargoType(builder:flatbuffers.Builder, cargoTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, cargoTypeOffset, 0);
}

static addCallSign(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, callSignOffset, 0);
}

static addVesselFlag(builder:flatbuffers.Builder, vesselFlagOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, vesselFlagOffset, 0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(14, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(15, lon, 0.0);
}

static addPosHiAccuracy(builder:flatbuffers.Builder, posHiAccuracy:boolean) {
  builder.addFieldInt8(16, +posHiAccuracy, +false);
}

static addPosHiLatency(builder:flatbuffers.Builder, posHiLatency:boolean) {
  builder.addFieldInt8(17, +posHiLatency, +false);
}

static addSpeed(builder:flatbuffers.Builder, speed:number) {
  builder.addFieldFloat64(18, speed, 0.0);
}

static addTrueHeading(builder:flatbuffers.Builder, trueHeading:number) {
  builder.addFieldFloat64(19, trueHeading, 0.0);
}

static addCourse(builder:flatbuffers.Builder, course:number) {
  builder.addFieldFloat64(20, course, 0.0);
}

static addRateOfTurn(builder:flatbuffers.Builder, rateOfTurn:number) {
  builder.addFieldFloat64(21, rateOfTurn, 0.0);
}

static addSpecialManeuver(builder:flatbuffers.Builder, specialManeuver:boolean) {
  builder.addFieldInt8(22, +specialManeuver, +false);
}

static addNavStatus(builder:flatbuffers.Builder, navStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, navStatusOffset, 0);
}

static addPosDeviceType(builder:flatbuffers.Builder, posDeviceTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, posDeviceTypeOffset, 0);
}

static addAntennaRefDimensions(builder:flatbuffers.Builder, antennaRefDimensionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, antennaRefDimensionsOffset, 0);
}

static createAntennaRefDimensionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAntennaRefDimensionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLength(builder:flatbuffers.Builder, length:number) {
  builder.addFieldFloat64(26, length, 0.0);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldFloat64(27, width, 0.0);
}

static addDraught(builder:flatbuffers.Builder, draught:number) {
  builder.addFieldFloat64(28, draught, 0.0);
}

static addShipDescription(builder:flatbuffers.Builder, shipDescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, shipDescriptionOffset, 0);
}

static addDestination(builder:flatbuffers.Builder, destinationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, destinationOffset, 0);
}

static addDestinationEta(builder:flatbuffers.Builder, destinationEtaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, destinationEtaOffset, 0);
}

static addCurrentPortGuid(builder:flatbuffers.Builder, currentPortGuidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, currentPortGuidOffset, 0);
}

static addCurrentPortLocode(builder:flatbuffers.Builder, currentPortLocodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, currentPortLocodeOffset, 0);
}

static addLastPortGuid(builder:flatbuffers.Builder, lastPortGuidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, lastPortGuidOffset, 0);
}

static addLastPortLocode(builder:flatbuffers.Builder, lastPortLocodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, lastPortLocodeOffset, 0);
}

static addNextPortGuid(builder:flatbuffers.Builder, nextPortGuidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, nextPortGuidOffset, 0);
}

static addNextPortLocode(builder:flatbuffers.Builder, nextPortLocodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, nextPortLocodeOffset, 0);
}

static addEtaCalculated(builder:flatbuffers.Builder, etaCalculatedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, etaCalculatedOffset, 0);
}

static addEtaUpdated(builder:flatbuffers.Builder, etaUpdatedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, etaUpdatedOffset, 0);
}

static addDistanceToGo(builder:flatbuffers.Builder, distanceToGo:number) {
  builder.addFieldFloat64(40, distanceToGo, 0.0);
}

static addDistanceTravelled(builder:flatbuffers.Builder, distanceTravelled:number) {
  builder.addFieldFloat64(41, distanceTravelled, 0.0);
}

static addAvgSpeed(builder:flatbuffers.Builder, avgSpeed:number) {
  builder.addFieldFloat64(42, avgSpeed, 0.0);
}

static addMaxSpeed(builder:flatbuffers.Builder, maxSpeed:number) {
  builder.addFieldFloat64(43, maxSpeed, 0.0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, sourceOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, sourceDlOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AIS_Full_dataMode_Enum) {
  builder.addFieldInt8(49, dataMode, AIS_Full_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, origNetworkOffset, 0);
}

static endAIS_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAIS_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AISF');
}

static finishSizePrefixedAIS_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AISF', true);
}

static createAIS_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idTrackOffset:flatbuffers.Offset, idVesselOffset:flatbuffers.Offset, mmsi:bigint, imon:bigint, tsOffset:flatbuffers.Offset, shipNameOffset:flatbuffers.Offset, shipTypeOffset:flatbuffers.Offset, engagedInOffset:flatbuffers.Offset, specialCraftOffset:flatbuffers.Offset, cargoTypeOffset:flatbuffers.Offset, callSignOffset:flatbuffers.Offset, vesselFlagOffset:flatbuffers.Offset, lat:number, lon:number, posHiAccuracy:boolean, posHiLatency:boolean, speed:number, trueHeading:number, course:number, rateOfTurn:number, specialManeuver:boolean, navStatusOffset:flatbuffers.Offset, posDeviceTypeOffset:flatbuffers.Offset, antennaRefDimensionsOffset:flatbuffers.Offset, length:number, width:number, draught:number, shipDescriptionOffset:flatbuffers.Offset, destinationOffset:flatbuffers.Offset, destinationEtaOffset:flatbuffers.Offset, currentPortGuidOffset:flatbuffers.Offset, currentPortLocodeOffset:flatbuffers.Offset, lastPortGuidOffset:flatbuffers.Offset, lastPortLocodeOffset:flatbuffers.Offset, nextPortGuidOffset:flatbuffers.Offset, nextPortLocodeOffset:flatbuffers.Offset, etaCalculatedOffset:flatbuffers.Offset, etaUpdatedOffset:flatbuffers.Offset, distanceToGo:number, distanceTravelled:number, avgSpeed:number, maxSpeed:number, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:AIS_Full_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  AIS_Full.startAIS_Full(builder);
  AIS_Full.addId(builder, idOffset);
  AIS_Full.addClassificationMarking(builder, classificationMarkingOffset);
  AIS_Full.addIdTrack(builder, idTrackOffset);
  AIS_Full.addIdVessel(builder, idVesselOffset);
  AIS_Full.addMmsi(builder, mmsi);
  AIS_Full.addImon(builder, imon);
  AIS_Full.addTs(builder, tsOffset);
  AIS_Full.addShipName(builder, shipNameOffset);
  AIS_Full.addShipType(builder, shipTypeOffset);
  AIS_Full.addEngagedIn(builder, engagedInOffset);
  AIS_Full.addSpecialCraft(builder, specialCraftOffset);
  AIS_Full.addCargoType(builder, cargoTypeOffset);
  AIS_Full.addCallSign(builder, callSignOffset);
  AIS_Full.addVesselFlag(builder, vesselFlagOffset);
  AIS_Full.addLat(builder, lat);
  AIS_Full.addLon(builder, lon);
  AIS_Full.addPosHiAccuracy(builder, posHiAccuracy);
  AIS_Full.addPosHiLatency(builder, posHiLatency);
  AIS_Full.addSpeed(builder, speed);
  AIS_Full.addTrueHeading(builder, trueHeading);
  AIS_Full.addCourse(builder, course);
  AIS_Full.addRateOfTurn(builder, rateOfTurn);
  AIS_Full.addSpecialManeuver(builder, specialManeuver);
  AIS_Full.addNavStatus(builder, navStatusOffset);
  AIS_Full.addPosDeviceType(builder, posDeviceTypeOffset);
  AIS_Full.addAntennaRefDimensions(builder, antennaRefDimensionsOffset);
  AIS_Full.addLength(builder, length);
  AIS_Full.addWidth(builder, width);
  AIS_Full.addDraught(builder, draught);
  AIS_Full.addShipDescription(builder, shipDescriptionOffset);
  AIS_Full.addDestination(builder, destinationOffset);
  AIS_Full.addDestinationEta(builder, destinationEtaOffset);
  AIS_Full.addCurrentPortGuid(builder, currentPortGuidOffset);
  AIS_Full.addCurrentPortLocode(builder, currentPortLocodeOffset);
  AIS_Full.addLastPortGuid(builder, lastPortGuidOffset);
  AIS_Full.addLastPortLocode(builder, lastPortLocodeOffset);
  AIS_Full.addNextPortGuid(builder, nextPortGuidOffset);
  AIS_Full.addNextPortLocode(builder, nextPortLocodeOffset);
  AIS_Full.addEtaCalculated(builder, etaCalculatedOffset);
  AIS_Full.addEtaUpdated(builder, etaUpdatedOffset);
  AIS_Full.addDistanceToGo(builder, distanceToGo);
  AIS_Full.addDistanceTravelled(builder, distanceTravelled);
  AIS_Full.addAvgSpeed(builder, avgSpeed);
  AIS_Full.addMaxSpeed(builder, maxSpeed);
  AIS_Full.addCreatedAt(builder, createdAtOffset);
  AIS_Full.addCreatedBy(builder, createdByOffset);
  AIS_Full.addSource(builder, sourceOffset);
  AIS_Full.addSourceDl(builder, sourceDlOffset);
  AIS_Full.addOrigin(builder, originOffset);
  AIS_Full.addDataMode(builder, dataMode);
  AIS_Full.addOrigNetwork(builder, origNetworkOffset);
  return AIS_Full.endAIS_Full(builder);
}

unpack(): AIS_FullT {
  return new AIS_FullT(
    this.id(),
    this.classificationMarking(),
    this.idTrack(),
    this.idVessel(),
    this.mmsi(),
    this.imon(),
    this.ts(),
    this.shipName(),
    this.shipType(),
    this.engagedIn(),
    this.specialCraft(),
    this.cargoType(),
    this.callSign(),
    this.vesselFlag(),
    this.lat(),
    this.lon(),
    this.posHiAccuracy(),
    this.posHiLatency(),
    this.speed(),
    this.trueHeading(),
    this.course(),
    this.rateOfTurn(),
    this.specialManeuver(),
    this.navStatus(),
    this.posDeviceType(),
    this.bb!.createScalarList<string>(this.antennaRefDimensions.bind(this), this.antennaRefDimensionsLength()),
    this.length(),
    this.width(),
    this.draught(),
    this.shipDescription(),
    this.destination(),
    this.destinationEta(),
    this.currentPortGuid(),
    this.currentPortLocode(),
    this.lastPortGuid(),
    this.lastPortLocode(),
    this.nextPortGuid(),
    this.nextPortLocode(),
    this.etaCalculated(),
    this.etaUpdated(),
    this.distanceToGo(),
    this.distanceTravelled(),
    this.avgSpeed(),
    this.maxSpeed(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.sourceDl(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: AIS_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idTrack = this.idTrack();
  _o.idVessel = this.idVessel();
  _o.mmsi = this.mmsi();
  _o.imon = this.imon();
  _o.ts = this.ts();
  _o.shipName = this.shipName();
  _o.shipType = this.shipType();
  _o.engagedIn = this.engagedIn();
  _o.specialCraft = this.specialCraft();
  _o.cargoType = this.cargoType();
  _o.callSign = this.callSign();
  _o.vesselFlag = this.vesselFlag();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.posHiAccuracy = this.posHiAccuracy();
  _o.posHiLatency = this.posHiLatency();
  _o.speed = this.speed();
  _o.trueHeading = this.trueHeading();
  _o.course = this.course();
  _o.rateOfTurn = this.rateOfTurn();
  _o.specialManeuver = this.specialManeuver();
  _o.navStatus = this.navStatus();
  _o.posDeviceType = this.posDeviceType();
  _o.antennaRefDimensions = this.bb!.createScalarList<string>(this.antennaRefDimensions.bind(this), this.antennaRefDimensionsLength());
  _o.length = this.length();
  _o.width = this.width();
  _o.draught = this.draught();
  _o.shipDescription = this.shipDescription();
  _o.destination = this.destination();
  _o.destinationEta = this.destinationEta();
  _o.currentPortGuid = this.currentPortGuid();
  _o.currentPortLocode = this.currentPortLocode();
  _o.lastPortGuid = this.lastPortGuid();
  _o.lastPortLocode = this.lastPortLocode();
  _o.nextPortGuid = this.nextPortGuid();
  _o.nextPortLocode = this.nextPortLocode();
  _o.etaCalculated = this.etaCalculated();
  _o.etaUpdated = this.etaUpdated();
  _o.distanceToGo = this.distanceToGo();
  _o.distanceTravelled = this.distanceTravelled();
  _o.avgSpeed = this.avgSpeed();
  _o.maxSpeed = this.maxSpeed();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.sourceDl = this.sourceDl();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class AIS_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idTrack: string|Uint8Array|null = null,
  public idVessel: string|Uint8Array|null = null,
  public mmsi: bigint = BigInt('0'),
  public imon: bigint = BigInt('0'),
  public ts: string|Uint8Array|null = null,
  public shipName: string|Uint8Array|null = null,
  public shipType: string|Uint8Array|null = null,
  public engagedIn: string|Uint8Array|null = null,
  public specialCraft: string|Uint8Array|null = null,
  public cargoType: string|Uint8Array|null = null,
  public callSign: string|Uint8Array|null = null,
  public vesselFlag: string|Uint8Array|null = null,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public posHiAccuracy: boolean = false,
  public posHiLatency: boolean = false,
  public speed: number = 0.0,
  public trueHeading: number = 0.0,
  public course: number = 0.0,
  public rateOfTurn: number = 0.0,
  public specialManeuver: boolean = false,
  public navStatus: string|Uint8Array|null = null,
  public posDeviceType: string|Uint8Array|null = null,
  public antennaRefDimensions: (string)[] = [],
  public length: number = 0.0,
  public width: number = 0.0,
  public draught: number = 0.0,
  public shipDescription: string|Uint8Array|null = null,
  public destination: string|Uint8Array|null = null,
  public destinationEta: string|Uint8Array|null = null,
  public currentPortGuid: string|Uint8Array|null = null,
  public currentPortLocode: string|Uint8Array|null = null,
  public lastPortGuid: string|Uint8Array|null = null,
  public lastPortLocode: string|Uint8Array|null = null,
  public nextPortGuid: string|Uint8Array|null = null,
  public nextPortLocode: string|Uint8Array|null = null,
  public etaCalculated: string|Uint8Array|null = null,
  public etaUpdated: string|Uint8Array|null = null,
  public distanceToGo: number = 0.0,
  public distanceTravelled: number = 0.0,
  public avgSpeed: number = 0.0,
  public maxSpeed: number = 0.0,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: AIS_Full_dataMode_Enum = AIS_Full_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idTrack = (this.idTrack !== null ? builder.createString(this.idTrack!) : 0);
  const idVessel = (this.idVessel !== null ? builder.createString(this.idVessel!) : 0);
  const ts = (this.ts !== null ? builder.createString(this.ts!) : 0);
  const shipName = (this.shipName !== null ? builder.createString(this.shipName!) : 0);
  const shipType = (this.shipType !== null ? builder.createString(this.shipType!) : 0);
  const engagedIn = (this.engagedIn !== null ? builder.createString(this.engagedIn!) : 0);
  const specialCraft = (this.specialCraft !== null ? builder.createString(this.specialCraft!) : 0);
  const cargoType = (this.cargoType !== null ? builder.createString(this.cargoType!) : 0);
  const callSign = (this.callSign !== null ? builder.createString(this.callSign!) : 0);
  const vesselFlag = (this.vesselFlag !== null ? builder.createString(this.vesselFlag!) : 0);
  const navStatus = (this.navStatus !== null ? builder.createString(this.navStatus!) : 0);
  const posDeviceType = (this.posDeviceType !== null ? builder.createString(this.posDeviceType!) : 0);
  const antennaRefDimensions = AIS_Full.createAntennaRefDimensionsVector(builder, builder.createObjectOffsetList(this.antennaRefDimensions));
  const shipDescription = (this.shipDescription !== null ? builder.createString(this.shipDescription!) : 0);
  const destination = (this.destination !== null ? builder.createString(this.destination!) : 0);
  const destinationEta = (this.destinationEta !== null ? builder.createString(this.destinationEta!) : 0);
  const currentPortGuid = (this.currentPortGuid !== null ? builder.createString(this.currentPortGuid!) : 0);
  const currentPortLocode = (this.currentPortLocode !== null ? builder.createString(this.currentPortLocode!) : 0);
  const lastPortGuid = (this.lastPortGuid !== null ? builder.createString(this.lastPortGuid!) : 0);
  const lastPortLocode = (this.lastPortLocode !== null ? builder.createString(this.lastPortLocode!) : 0);
  const nextPortGuid = (this.nextPortGuid !== null ? builder.createString(this.nextPortGuid!) : 0);
  const nextPortLocode = (this.nextPortLocode !== null ? builder.createString(this.nextPortLocode!) : 0);
  const etaCalculated = (this.etaCalculated !== null ? builder.createString(this.etaCalculated!) : 0);
  const etaUpdated = (this.etaUpdated !== null ? builder.createString(this.etaUpdated!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return AIS_Full.createAIS_Full(builder,
    id,
    classificationMarking,
    idTrack,
    idVessel,
    this.mmsi,
    this.imon,
    ts,
    shipName,
    shipType,
    engagedIn,
    specialCraft,
    cargoType,
    callSign,
    vesselFlag,
    this.lat,
    this.lon,
    this.posHiAccuracy,
    this.posHiLatency,
    this.speed,
    this.trueHeading,
    this.course,
    this.rateOfTurn,
    this.specialManeuver,
    navStatus,
    posDeviceType,
    antennaRefDimensions,
    this.length,
    this.width,
    this.draught,
    shipDescription,
    destination,
    destinationEta,
    currentPortGuid,
    currentPortLocode,
    lastPortGuid,
    lastPortLocode,
    nextPortGuid,
    nextPortLocode,
    etaCalculated,
    etaUpdated,
    this.distanceToGo,
    this.distanceTravelled,
    this.avgSpeed,
    this.maxSpeed,
    createdAt,
    createdBy,
    source,
    sourceDl,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
