// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SensorMaintenance_Abridged_dataMode_Enum } from './sensor-maintenance-abridged-data-mode-enum.js';


/**
 * /// Maintenance schedule and operational status of Sensor.
 */
export class SensorMaintenance_Abridged implements flatbuffers.IUnpackableObject<SensorMaintenance_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SensorMaintenance_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSensorMaintenance_Abridged(bb:flatbuffers.ByteBuffer, obj?:SensorMaintenance_Abridged):SensorMaintenance_Abridged {
  return (obj || new SensorMaintenance_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSensorMaintenance_Abridged(bb:flatbuffers.ByteBuffer, obj?:SensorMaintenance_Abridged):SensorMaintenance_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SensorMaintenance_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SENS');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SENSORMAINTENANCE-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The site to which this item applies.  NOTE - this site code is COLT specific and may not identically correspond to other UDL site IDs.
 * Example: /// Example: site01
 * Constraints: Minimum length = 1, Maximum length = 6
 */
siteCode():string|null
siteCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
siteCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID of the sensor.
 * Example: /// Example: idSensor
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The planned outage start time in ISO8601 UTC format.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The planned outage end time in ISO8601 UTC format.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
endTime():string|null
endTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The minimum time required to recall this activity, expressed as ddd:hh:mm.
 * Example: /// Example: 128:16:52
 * Constraints: Minimum length = 0, Maximum length = 20
 */
recall():string|null
recall(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recall(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The duration of the planned outage, expressed as ddd:hh:mm.
 * Example: /// Example: 128:16:52
 * Constraints: Minimum length = 0, Maximum length = 20
 */
duration():string|null
duration(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
duration(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Missile Warning operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
 * Example: /// Example: G
 * Constraints: Minimum length = 0, Maximum length = 3
 */
mwOpsCap():string|null
mwOpsCap(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mwOpsCap(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Space Surveillance operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
 * Example: /// Example: Y
 * Constraints: Minimum length = 0, Maximum length = 3
 */
ssOpsCap():string|null
ssOpsCap(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ssOpsCap(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Missile Defense operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
 * Example: /// Example: R
 * Constraints: Minimum length = 0, Maximum length = 3
 */
mdOpsCap():string|null
mdOpsCap(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mdOpsCap(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The sensor face(s) to which this COLT maintenance item applies, if applicable.
 * Example: /// Example: impactedFaces
 * Constraints: Minimum length = 0, Maximum length = 50
 */
impactedFaces():string|null
impactedFaces(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
impactedFaces(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The mission capability status of the equipment (e.g. FMC, NMC, PMC, UNK, etc.).
 * Example: /// Example: FMC
 * Constraints: Minimum length = 0, Maximum length = 20
 */
equipStatus():string|null
equipStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
equipStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the activity taking place during this outage.
 * Example: /// Example: Activity Description
 * Constraints: No constraints specified.
 */
activity():string|null
activity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
activity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Remarks concerning this outage.
 * Example: /// Example: Remarks
 * Constraints: No constraints specified.
 */
remark():string|null
remark(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
remark(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the requestor.
 * Example: /// Example: requestor
 * Constraints: Minimum length = 0, Maximum length = 50
 */
requestor():string|null
requestor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
requestor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the changer, if applicable.
 * Example: /// Example: changer
 * Constraints: Minimum length = 0, Maximum length = 50
 */
changer():string|null
changer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
changer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the approver.
 * Example: /// Example: approver
 * Constraints: Minimum length = 0, Maximum length = 50
 */
approver():string|null
approver(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
approver(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * COLT EOWID.
 * Example: /// Example: eowId
 * Constraints: Minimum length = 0, Maximum length = 20
 */
eowId():string|null
eowId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eowId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The revision number for this maintenance item.
 * Example: /// Example: rev
 * Constraints: Minimum length = 0, Maximum length = 5
 */
rev():string|null
rev(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rev(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The priority of this maintenance item.
 * Example: /// Example: low
 * Constraints: Minimum length = 0, Maximum length = 5
 */
priority():string|null
priority(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
priority(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Release.
 * Example: /// Example: rel
 * Constraints: Minimum length = 0, Maximum length = 5
 */
rel():string|null
rel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The internal COLT line number assigned to this item.
 * Example: /// Example: lineNumber
 * Constraints: Minimum length = 0, Maximum length = 20
 */
lineNumber():string|null
lineNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lineNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the resource(s) affected by this maintenance item.
 * Example: /// Example: resource
 * Constraints: Minimum length = 0, Maximum length = 255
 */
resource():string|null
resource(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
resource(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The date that this item became inactive in ISO8601 UTC format.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
inactiveDate():string|null
inactiveDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
inactiveDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SensorMaintenance_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SensorMaintenance_Abridged_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSensorMaintenance_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(31);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addSiteCode(builder:flatbuffers.Builder, siteCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, siteCodeOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idSensorOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, startTimeOffset, 0);
}

static addEndTime(builder:flatbuffers.Builder, endTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, endTimeOffset, 0);
}

static addRecall(builder:flatbuffers.Builder, recallOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, recallOffset, 0);
}

static addDuration(builder:flatbuffers.Builder, durationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, durationOffset, 0);
}

static addMwOpsCap(builder:flatbuffers.Builder, mwOpsCapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, mwOpsCapOffset, 0);
}

static addSsOpsCap(builder:flatbuffers.Builder, ssOpsCapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, ssOpsCapOffset, 0);
}

static addMdOpsCap(builder:flatbuffers.Builder, mdOpsCapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, mdOpsCapOffset, 0);
}

static addImpactedFaces(builder:flatbuffers.Builder, impactedFacesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, impactedFacesOffset, 0);
}

static addEquipStatus(builder:flatbuffers.Builder, equipStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, equipStatusOffset, 0);
}

static addActivity(builder:flatbuffers.Builder, activityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, activityOffset, 0);
}

static addRemark(builder:flatbuffers.Builder, remarkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, remarkOffset, 0);
}

static addRequestor(builder:flatbuffers.Builder, requestorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, requestorOffset, 0);
}

static addChanger(builder:flatbuffers.Builder, changerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, changerOffset, 0);
}

static addApprover(builder:flatbuffers.Builder, approverOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, approverOffset, 0);
}

static addEowId(builder:flatbuffers.Builder, eowIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, eowIdOffset, 0);
}

static addRev(builder:flatbuffers.Builder, revOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, revOffset, 0);
}

static addPriority(builder:flatbuffers.Builder, priorityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, priorityOffset, 0);
}

static addRel(builder:flatbuffers.Builder, relOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, relOffset, 0);
}

static addLineNumber(builder:flatbuffers.Builder, lineNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, lineNumberOffset, 0);
}

static addResource(builder:flatbuffers.Builder, resourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, resourceOffset, 0);
}

static addInactiveDate(builder:flatbuffers.Builder, inactiveDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, inactiveDateOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SensorMaintenance_Abridged_dataMode_Enum) {
  builder.addFieldInt8(29, dataMode, SensorMaintenance_Abridged_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, origNetworkOffset, 0);
}

static endSensorMaintenance_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSensorMaintenance_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SENS');
}

static finishSizePrefixedSensorMaintenance_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SENS', true);
}

static createSensorMaintenance_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, siteCodeOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, endTimeOffset:flatbuffers.Offset, recallOffset:flatbuffers.Offset, durationOffset:flatbuffers.Offset, mwOpsCapOffset:flatbuffers.Offset, ssOpsCapOffset:flatbuffers.Offset, mdOpsCapOffset:flatbuffers.Offset, impactedFacesOffset:flatbuffers.Offset, equipStatusOffset:flatbuffers.Offset, activityOffset:flatbuffers.Offset, remarkOffset:flatbuffers.Offset, requestorOffset:flatbuffers.Offset, changerOffset:flatbuffers.Offset, approverOffset:flatbuffers.Offset, eowIdOffset:flatbuffers.Offset, revOffset:flatbuffers.Offset, priorityOffset:flatbuffers.Offset, relOffset:flatbuffers.Offset, lineNumberOffset:flatbuffers.Offset, resourceOffset:flatbuffers.Offset, inactiveDateOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:SensorMaintenance_Abridged_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  SensorMaintenance_Abridged.startSensorMaintenance_Abridged(builder);
  SensorMaintenance_Abridged.addId(builder, idOffset);
  SensorMaintenance_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  SensorMaintenance_Abridged.addSiteCode(builder, siteCodeOffset);
  SensorMaintenance_Abridged.addIdSensor(builder, idSensorOffset);
  SensorMaintenance_Abridged.addStartTime(builder, startTimeOffset);
  SensorMaintenance_Abridged.addEndTime(builder, endTimeOffset);
  SensorMaintenance_Abridged.addRecall(builder, recallOffset);
  SensorMaintenance_Abridged.addDuration(builder, durationOffset);
  SensorMaintenance_Abridged.addMwOpsCap(builder, mwOpsCapOffset);
  SensorMaintenance_Abridged.addSsOpsCap(builder, ssOpsCapOffset);
  SensorMaintenance_Abridged.addMdOpsCap(builder, mdOpsCapOffset);
  SensorMaintenance_Abridged.addImpactedFaces(builder, impactedFacesOffset);
  SensorMaintenance_Abridged.addEquipStatus(builder, equipStatusOffset);
  SensorMaintenance_Abridged.addActivity(builder, activityOffset);
  SensorMaintenance_Abridged.addRemark(builder, remarkOffset);
  SensorMaintenance_Abridged.addRequestor(builder, requestorOffset);
  SensorMaintenance_Abridged.addChanger(builder, changerOffset);
  SensorMaintenance_Abridged.addApprover(builder, approverOffset);
  SensorMaintenance_Abridged.addEowId(builder, eowIdOffset);
  SensorMaintenance_Abridged.addRev(builder, revOffset);
  SensorMaintenance_Abridged.addPriority(builder, priorityOffset);
  SensorMaintenance_Abridged.addRel(builder, relOffset);
  SensorMaintenance_Abridged.addLineNumber(builder, lineNumberOffset);
  SensorMaintenance_Abridged.addResource(builder, resourceOffset);
  SensorMaintenance_Abridged.addInactiveDate(builder, inactiveDateOffset);
  SensorMaintenance_Abridged.addCreatedAt(builder, createdAtOffset);
  SensorMaintenance_Abridged.addCreatedBy(builder, createdByOffset);
  SensorMaintenance_Abridged.addSource(builder, sourceOffset);
  SensorMaintenance_Abridged.addOrigin(builder, originOffset);
  SensorMaintenance_Abridged.addDataMode(builder, dataMode);
  SensorMaintenance_Abridged.addOrigNetwork(builder, origNetworkOffset);
  return SensorMaintenance_Abridged.endSensorMaintenance_Abridged(builder);
}

unpack(): SensorMaintenance_AbridgedT {
  return new SensorMaintenance_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.siteCode(),
    this.idSensor(),
    this.startTime(),
    this.endTime(),
    this.recall(),
    this.duration(),
    this.mwOpsCap(),
    this.ssOpsCap(),
    this.mdOpsCap(),
    this.impactedFaces(),
    this.equipStatus(),
    this.activity(),
    this.remark(),
    this.requestor(),
    this.changer(),
    this.approver(),
    this.eowId(),
    this.rev(),
    this.priority(),
    this.rel(),
    this.lineNumber(),
    this.resource(),
    this.inactiveDate(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: SensorMaintenance_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.siteCode = this.siteCode();
  _o.idSensor = this.idSensor();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.recall = this.recall();
  _o.duration = this.duration();
  _o.mwOpsCap = this.mwOpsCap();
  _o.ssOpsCap = this.ssOpsCap();
  _o.mdOpsCap = this.mdOpsCap();
  _o.impactedFaces = this.impactedFaces();
  _o.equipStatus = this.equipStatus();
  _o.activity = this.activity();
  _o.remark = this.remark();
  _o.requestor = this.requestor();
  _o.changer = this.changer();
  _o.approver = this.approver();
  _o.eowId = this.eowId();
  _o.rev = this.rev();
  _o.priority = this.priority();
  _o.rel = this.rel();
  _o.lineNumber = this.lineNumber();
  _o.resource = this.resource();
  _o.inactiveDate = this.inactiveDate();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class SensorMaintenance_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public siteCode: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public endTime: string|Uint8Array|null = null,
  public recall: string|Uint8Array|null = null,
  public duration: string|Uint8Array|null = null,
  public mwOpsCap: string|Uint8Array|null = null,
  public ssOpsCap: string|Uint8Array|null = null,
  public mdOpsCap: string|Uint8Array|null = null,
  public impactedFaces: string|Uint8Array|null = null,
  public equipStatus: string|Uint8Array|null = null,
  public activity: string|Uint8Array|null = null,
  public remark: string|Uint8Array|null = null,
  public requestor: string|Uint8Array|null = null,
  public changer: string|Uint8Array|null = null,
  public approver: string|Uint8Array|null = null,
  public eowId: string|Uint8Array|null = null,
  public rev: string|Uint8Array|null = null,
  public priority: string|Uint8Array|null = null,
  public rel: string|Uint8Array|null = null,
  public lineNumber: string|Uint8Array|null = null,
  public resource: string|Uint8Array|null = null,
  public inactiveDate: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: SensorMaintenance_Abridged_dataMode_Enum = SensorMaintenance_Abridged_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const siteCode = (this.siteCode !== null ? builder.createString(this.siteCode!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const endTime = (this.endTime !== null ? builder.createString(this.endTime!) : 0);
  const recall = (this.recall !== null ? builder.createString(this.recall!) : 0);
  const duration = (this.duration !== null ? builder.createString(this.duration!) : 0);
  const mwOpsCap = (this.mwOpsCap !== null ? builder.createString(this.mwOpsCap!) : 0);
  const ssOpsCap = (this.ssOpsCap !== null ? builder.createString(this.ssOpsCap!) : 0);
  const mdOpsCap = (this.mdOpsCap !== null ? builder.createString(this.mdOpsCap!) : 0);
  const impactedFaces = (this.impactedFaces !== null ? builder.createString(this.impactedFaces!) : 0);
  const equipStatus = (this.equipStatus !== null ? builder.createString(this.equipStatus!) : 0);
  const activity = (this.activity !== null ? builder.createString(this.activity!) : 0);
  const remark = (this.remark !== null ? builder.createString(this.remark!) : 0);
  const requestor = (this.requestor !== null ? builder.createString(this.requestor!) : 0);
  const changer = (this.changer !== null ? builder.createString(this.changer!) : 0);
  const approver = (this.approver !== null ? builder.createString(this.approver!) : 0);
  const eowId = (this.eowId !== null ? builder.createString(this.eowId!) : 0);
  const rev = (this.rev !== null ? builder.createString(this.rev!) : 0);
  const priority = (this.priority !== null ? builder.createString(this.priority!) : 0);
  const rel = (this.rel !== null ? builder.createString(this.rel!) : 0);
  const lineNumber = (this.lineNumber !== null ? builder.createString(this.lineNumber!) : 0);
  const resource = (this.resource !== null ? builder.createString(this.resource!) : 0);
  const inactiveDate = (this.inactiveDate !== null ? builder.createString(this.inactiveDate!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return SensorMaintenance_Abridged.createSensorMaintenance_Abridged(builder,
    id,
    classificationMarking,
    siteCode,
    idSensor,
    startTime,
    endTime,
    recall,
    duration,
    mwOpsCap,
    ssOpsCap,
    mdOpsCap,
    impactedFaces,
    equipStatus,
    activity,
    remark,
    requestor,
    changer,
    approver,
    eowId,
    rev,
    priority,
    rel,
    lineNumber,
    resource,
    inactiveDate,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
