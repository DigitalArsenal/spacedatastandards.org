// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Schema for Crew Member data.
 */
export class CrewMembers_Abridged implements flatbuffers.IUnpackableObject<CrewMembers_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CrewMembers_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCrewMembers_Abridged(bb:flatbuffers.ByteBuffer, obj?:CrewMembers_Abridged):CrewMembers_Abridged {
  return (obj || new CrewMembers_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCrewMembers_Abridged(bb:flatbuffers.ByteBuffer, obj?:CrewMembers_Abridged):CrewMembers_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CrewMembers_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('CREW');
}

/**
 * The last name of the crew member.
 * Example: /// Example: Smith
 * Constraints: Minimum length = 0, Maximum length = 64
 */
lastName():string|null
lastName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The first name of the crew member.
 * Example: /// Example: Freddie
 * Constraints: Minimum length = 0, Maximum length = 64
 */
firstName():string|null
firstName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
firstName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The middle initial of the crew member.
 * Example: /// Example: G
 * Constraints: Minimum length = 0, Maximum length = 1
 */
middleInitial():string|null
middleInitial(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
middleInitial(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the crew member assigned by the originating source.
 * Example: /// Example: 12345678abc
 * Constraints: Minimum length = 0, Maximum length = 32
 */
memberId():string|null
memberId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
memberId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating this crew member is a civilian or non-military person.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
civilian():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating this person is the aircraft commander.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
commander():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Last four digits of the crew member's social security number.
 * Example: /// Example: 1234
 * Constraints: Minimum length = 0, Maximum length = 4
 */
last4Ssn():string|null
last4Ssn(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
last4Ssn(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The crew member's 10-digit DoD ID number.
 * Example: /// Example: 0123456789
 * Constraints: Minimum length = 0, Maximum length = 10
 */
dodId():string|null
dodId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dodId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The duty position of the crew member.
 * Example: /// Example: IP
 * Constraints: Minimum length = 0, Maximum length = 32
 */
dutyPosition():string|null
dutyPosition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dutyPosition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The crew position of the crew member.
 * Example: /// Example: EP A
 * Constraints: Minimum length = 0, Maximum length = 32
 */
crewPosition():string|null
crewPosition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
crewPosition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Amplifying details about the crew member type (e.g. RAVEN, FCC, COMCAM, AIRCREW, MEP, OTHER, etc.).
 * Example: /// Example: AIRCREW
 * Constraints: Minimum length = 0, Maximum length = 32
 */
memberType():string|null
memberType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
memberType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The military branch assignment of the crew member.
 * Example: /// Example: Air Force
 * Constraints: Minimum length = 0, Maximum length = 32
 */
branch():string|null
branch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
branch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The rank of the crew member.
 * Example: /// Example: Capt
 * Constraints: Minimum length = 0, Maximum length = 32
 */
rank():string|null
rank(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rank(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The wing the crew member serves.
 * Example: /// Example: 60AMW
 * Constraints: Minimum length = 0, Maximum length = 32
 */
wing():string|null
wing(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
wing(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The squadron the crew member serves.
 * Example: /// Example: 21AS
 * Constraints: Minimum length = 0, Maximum length = 32
 */
squadron():string|null
squadron(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
squadron(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Remarks concerning the crew member.
 * Example: /// Example: Crew member remark
 * Constraints: Minimum length = 0, Maximum length = 512
 */
memberRemarks():string|null
memberRemarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
memberRemarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Mattermost username of this crew member.
 * Example: /// Example: fgsmith
 * Constraints: Minimum length = 0, Maximum length = 64
 */
username():string|null
username(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
username(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startCrewMembers_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(17);
}

static addLastName(builder:flatbuffers.Builder, lastNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, lastNameOffset, 0);
}

static addFirstName(builder:flatbuffers.Builder, firstNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, firstNameOffset, 0);
}

static addMiddleInitial(builder:flatbuffers.Builder, middleInitialOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, middleInitialOffset, 0);
}

static addMemberId(builder:flatbuffers.Builder, memberIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, memberIdOffset, 0);
}

static addCivilian(builder:flatbuffers.Builder, civilian:boolean) {
  builder.addFieldInt8(4, +civilian, +false);
}

static addCommander(builder:flatbuffers.Builder, commander:boolean) {
  builder.addFieldInt8(5, +commander, +false);
}

static addLast4Ssn(builder:flatbuffers.Builder, last4SsnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, last4SsnOffset, 0);
}

static addDodId(builder:flatbuffers.Builder, dodIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, dodIdOffset, 0);
}

static addDutyPosition(builder:flatbuffers.Builder, dutyPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, dutyPositionOffset, 0);
}

static addCrewPosition(builder:flatbuffers.Builder, crewPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, crewPositionOffset, 0);
}

static addMemberType(builder:flatbuffers.Builder, memberTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, memberTypeOffset, 0);
}

static addBranch(builder:flatbuffers.Builder, branchOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, branchOffset, 0);
}

static addRank(builder:flatbuffers.Builder, rankOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, rankOffset, 0);
}

static addWing(builder:flatbuffers.Builder, wingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, wingOffset, 0);
}

static addSquadron(builder:flatbuffers.Builder, squadronOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, squadronOffset, 0);
}

static addMemberRemarks(builder:flatbuffers.Builder, memberRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, memberRemarksOffset, 0);
}

static addUsername(builder:flatbuffers.Builder, usernameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, usernameOffset, 0);
}

static endCrewMembers_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCrewMembers_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CREW');
}

static finishSizePrefixedCrewMembers_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CREW', true);
}

static createCrewMembers_Abridged(builder:flatbuffers.Builder, lastNameOffset:flatbuffers.Offset, firstNameOffset:flatbuffers.Offset, middleInitialOffset:flatbuffers.Offset, memberIdOffset:flatbuffers.Offset, civilian:boolean, commander:boolean, last4SsnOffset:flatbuffers.Offset, dodIdOffset:flatbuffers.Offset, dutyPositionOffset:flatbuffers.Offset, crewPositionOffset:flatbuffers.Offset, memberTypeOffset:flatbuffers.Offset, branchOffset:flatbuffers.Offset, rankOffset:flatbuffers.Offset, wingOffset:flatbuffers.Offset, squadronOffset:flatbuffers.Offset, memberRemarksOffset:flatbuffers.Offset, usernameOffset:flatbuffers.Offset):flatbuffers.Offset {
  CrewMembers_Abridged.startCrewMembers_Abridged(builder);
  CrewMembers_Abridged.addLastName(builder, lastNameOffset);
  CrewMembers_Abridged.addFirstName(builder, firstNameOffset);
  CrewMembers_Abridged.addMiddleInitial(builder, middleInitialOffset);
  CrewMembers_Abridged.addMemberId(builder, memberIdOffset);
  CrewMembers_Abridged.addCivilian(builder, civilian);
  CrewMembers_Abridged.addCommander(builder, commander);
  CrewMembers_Abridged.addLast4Ssn(builder, last4SsnOffset);
  CrewMembers_Abridged.addDodId(builder, dodIdOffset);
  CrewMembers_Abridged.addDutyPosition(builder, dutyPositionOffset);
  CrewMembers_Abridged.addCrewPosition(builder, crewPositionOffset);
  CrewMembers_Abridged.addMemberType(builder, memberTypeOffset);
  CrewMembers_Abridged.addBranch(builder, branchOffset);
  CrewMembers_Abridged.addRank(builder, rankOffset);
  CrewMembers_Abridged.addWing(builder, wingOffset);
  CrewMembers_Abridged.addSquadron(builder, squadronOffset);
  CrewMembers_Abridged.addMemberRemarks(builder, memberRemarksOffset);
  CrewMembers_Abridged.addUsername(builder, usernameOffset);
  return CrewMembers_Abridged.endCrewMembers_Abridged(builder);
}

unpack(): CrewMembers_AbridgedT {
  return new CrewMembers_AbridgedT(
    this.lastName(),
    this.firstName(),
    this.middleInitial(),
    this.memberId(),
    this.civilian(),
    this.commander(),
    this.last4Ssn(),
    this.dodId(),
    this.dutyPosition(),
    this.crewPosition(),
    this.memberType(),
    this.branch(),
    this.rank(),
    this.wing(),
    this.squadron(),
    this.memberRemarks(),
    this.username()
  );
}


unpackTo(_o: CrewMembers_AbridgedT): void {
  _o.lastName = this.lastName();
  _o.firstName = this.firstName();
  _o.middleInitial = this.middleInitial();
  _o.memberId = this.memberId();
  _o.civilian = this.civilian();
  _o.commander = this.commander();
  _o.last4SSN = this.last4Ssn();
  _o.dodID = this.dodId();
  _o.dutyPosition = this.dutyPosition();
  _o.crewPosition = this.crewPosition();
  _o.memberType = this.memberType();
  _o.branch = this.branch();
  _o.rank = this.rank();
  _o.wing = this.wing();
  _o.squadron = this.squadron();
  _o.memberRemarks = this.memberRemarks();
  _o.username = this.username();
}
}

export class CrewMembers_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public lastName: string|Uint8Array|null = null,
  public firstName: string|Uint8Array|null = null,
  public middleInitial: string|Uint8Array|null = null,
  public memberId: string|Uint8Array|null = null,
  public civilian: boolean = false,
  public commander: boolean = false,
  public last4SSN: string|Uint8Array|null = null,
  public dodID: string|Uint8Array|null = null,
  public dutyPosition: string|Uint8Array|null = null,
  public crewPosition: string|Uint8Array|null = null,
  public memberType: string|Uint8Array|null = null,
  public branch: string|Uint8Array|null = null,
  public rank: string|Uint8Array|null = null,
  public wing: string|Uint8Array|null = null,
  public squadron: string|Uint8Array|null = null,
  public memberRemarks: string|Uint8Array|null = null,
  public username: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const lastName = (this.lastName !== null ? builder.createString(this.lastName!) : 0);
  const firstName = (this.firstName !== null ? builder.createString(this.firstName!) : 0);
  const middleInitial = (this.middleInitial !== null ? builder.createString(this.middleInitial!) : 0);
  const memberId = (this.memberId !== null ? builder.createString(this.memberId!) : 0);
  const last4SSN = (this.last4SSN !== null ? builder.createString(this.last4SSN!) : 0);
  const dodID = (this.dodID !== null ? builder.createString(this.dodID!) : 0);
  const dutyPosition = (this.dutyPosition !== null ? builder.createString(this.dutyPosition!) : 0);
  const crewPosition = (this.crewPosition !== null ? builder.createString(this.crewPosition!) : 0);
  const memberType = (this.memberType !== null ? builder.createString(this.memberType!) : 0);
  const branch = (this.branch !== null ? builder.createString(this.branch!) : 0);
  const rank = (this.rank !== null ? builder.createString(this.rank!) : 0);
  const wing = (this.wing !== null ? builder.createString(this.wing!) : 0);
  const squadron = (this.squadron !== null ? builder.createString(this.squadron!) : 0);
  const memberRemarks = (this.memberRemarks !== null ? builder.createString(this.memberRemarks!) : 0);
  const username = (this.username !== null ? builder.createString(this.username!) : 0);

  return CrewMembers_Abridged.createCrewMembers_Abridged(builder,
    lastName,
    firstName,
    middleInitial,
    memberId,
    this.civilian,
    this.commander,
    last4SSN,
    dodID,
    dutyPosition,
    crewPosition,
    memberType,
    branch,
    rank,
    wing,
    squadron,
    memberRemarks,
    username
  );
}
}
