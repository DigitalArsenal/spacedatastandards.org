// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OrbitTrack_Abridged_dataMode_Enum } from './OrbitTrack_Abridged_dataMode_Enum.js';
import { OrbitTrack_Abridged_objIdent_Enum } from './OrbitTrack_Abridged_objIdent_Enum.js';
import { OrbitTrack_Abridged_objectType_Enum } from './OrbitTrack_Abridged_objectType_Enum.js';


/**
 * /// Keplerian orbital elements describing an orbit for a particular on-orbit satellite and applicable sensor data aiding in the orbit prediction.
 */
export class OrbitTrack_Abridged implements flatbuffers.IUnpackableObject<OrbitTrack_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OrbitTrack_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOrbitTrack_Abridged(bb:flatbuffers.ByteBuffer, obj?:OrbitTrack_Abridged):OrbitTrack_Abridged {
  return (obj || new OrbitTrack_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOrbitTrack_Abridged(bb:flatbuffers.ByteBuffer, obj?:OrbitTrack_Abridged):OrbitTrack_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OrbitTrack_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ORBI');
}

/**
 * Unique identifier of the record, auto-generated by the system if not provided on create operations.
 * Example: /// Example: ORBIT_TRACK_ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the target on-orbit object, if correlated.
 * Example: /// Example: 32375
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the target on-orbit object.
 * Example: /// Example: 37375
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by observation source to indicate the target on-orbit object of this track. This may be an internal identifier and not necessarily a valid satellite number.
 * Example: /// Example: L2045
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Elset associated with this object.
 * Example: /// Example: c715a619-8695-44d2-9e7d-effd257b4843
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idElset():string|null
idElset(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idElset(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Track timestamp in ISO8601 UTC format, with microsecond precision.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
ts():string|null
ts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 latitude of the track object subpoint, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 19.88550102
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the track object subpoint, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 46.74596844
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Track point altitude relative to WGS-84 ellipsoid, in meters.
 * Example: /// Example: 585.71
 * Constraints: No constraints specified.
 */
alt():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Radio frequency of the track, measured in megahertz (MHz).
 * Example: /// Example: 1.5273
 * Constraints: No constraints specified.
 */
rdfRf():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * International radio call sign assigned to the track. This is an 8-character alphanumeric code.
 * Example: /// Example: Charlie
 * Constraints: Minimum length = 0, Maximum length = 8
 */
callSign():string|null
callSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Report number received from the reporting source for this track.
 * Example: /// Example: 123
 * Constraints: Minimum length = 0, Maximum length = 32
 */
rptNum():string|null
rptNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rptNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
 *  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
 *  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
 *  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
 *  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
 *  PENDING: Track object which has not been evaluated.
 *  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
 *  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
 * Example: /// Example: FRIEND
 * Constraints: Minimum length = 0, Maximum length = 32
 */
objIdent():OrbitTrack_Abridged_objIdent_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OrbitTrack_Abridged_objIdent_Enum.ASSUMED_FRIEND;
}

/**
 * Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
 *  FAKER: Friendly track, object, or entity acting as an exercise hostile.
 *  JOKER: Friendly track, object, or entity acting as an exercise suspect.
 *  KILO: Friendly high-value object.
 *  TRAVELLER: Suspect land or surface track following a recognized traffic route.
 *  ZOMBIE: Suspect track, object, or entity of special interest.
 * Example: /// Example: JOKER
 * Constraints: Minimum length = 0, Maximum length = 32
 */
identAmp():string|null
identAmp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
identAmp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Status of the satellite.
 * Example: /// Example: INACTIVE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
satStatus():string|null
satStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
satStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The on-orbit category assigned to this track object (DEBRIS, MANNED, PAYLOAD, PLATFORM, ROCKET BODY, UNKNOWN).
 * Example: /// Example: PAYLOAD
 * Constraints: Minimum length = 0, Maximum length = 32
 */
objectType():OrbitTrack_Abridged_objectType_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OrbitTrack_Abridged_objectType_Enum.DEBRIS;
}

/**
 * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
 * Example: /// Example: US
 * Constraints: Minimum length = 0, Maximum length = 8
 */
countryCode():string|null
countryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Predicted change in Mean Motion (velocity) in radians/herg^2.  herg is a unit of time measure equal to 806.8120769 seconds, and is the orbital period of an imaginary satellite rotating about the Earth at zero altitude.
 * Example: /// Example: 0.5868
 * Constraints: No constraints specified.
 */
decay():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One-line Charlie elements set.
 * Example: /// Example: 323751332255940400010000003635829600010200072500098205001150
 * Constraints: Minimum length = 0, Maximum length = 100
 */
charlieLine():string|null
charlieLine(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charlieLine(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouData array and is required if aouData is not null. See the aouData field definition for specific information.
 * Example: /// Example: ELLIPSE
 * Constraints: Minimum length = 0, Maximum length = 16
 */
aouType():string|null
aouType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aouType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Three element array representing an Area of Uncertainty (AoU).  The array element definitions and units are type specific depending on the aouType specified in this record:
 * ELLIPSE:
 *    brg - orientation in degrees of the ellipse
 *    a1 - semi-major axis in meters
 *    a2 - semi-minor axis in meters
 * BEARING (BEARING BOX or MTST BEARING BOX):
 *    brg - orientation in degrees of the bearing box 
 *    a1 - length of bearing box in meters 
 *    a2 - half-width of bearing box in meters 
 * OTHER (All other type values):
 *    brg - line of bearing in degrees true 
 *    a1 - bearing error in degrees 
 *    a2 - estimated range in meters.
 * Example: /// Example: [34.3, 26.5, 1.2]
 * Constraints: No constraints specified.
 */
aouData(index: number):string
aouData(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
aouData(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

aouDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Track object speed, in km/sec.
 * Example: /// Example: 15.03443
 * Constraints: No constraints specified.
 */
spd():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The angle formed between the line of sight of the observer and the horizon at track timestamp, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
 * Example: /// Example: 15.2
 * Constraints: No constraints specified.
 */
angElev():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
 * Example: /// Example: 90
 * Constraints: No constraints specified.
 */
cntnmnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Source cross-reference code for the command that originated the track report.
 * Example: /// Example: XE
 * Constraints: Minimum length = 0, Maximum length = 8
 */
xref():string|null
xref(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
xref(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The cross-reference code of the channel on which this track report was received, if the report came over a comms channel.
 * Example: /// Example: FHKX
 * Constraints: Minimum length = 0, Maximum length = 32
 */
chXref():string|null
chXref(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chXref(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Free-form remarks entered for the satellite.
 * Example: /// Example: A note regarding this spacecraft
 * Constraints: Minimum length = 0, Maximum length = 256
 */
amplification():string|null
amplification(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
amplification(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A text aplifier displaying IFF/SIF/AIS Identification modes and codes.
 * Example: /// Example: ID Mode
 * Constraints: Minimum length = 0, Maximum length = 64
 */
iff():string|null
iff(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
iff(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
reinforced():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this track represents a reduced object or group.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
reduced():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
hq():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
dummy():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
taskForce():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
feint():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
installation():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The type of vehicle with which the device is associated.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: SPACE
 * Constraints: Minimum length = 0, Maximum length = 10
 */
vehType():string|null
vehType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vehType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID identifying the track, which should remain the same on subsequent tracks of the same object.
 * Example: /// Example: 3668f135-fcba-4630-a43d-e7782e11d988
 * Constraints: Minimum length = 0, Maximum length = 36
 */
trkId():string|null
trkId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trkId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TrackSensor Collection.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
trackSensors(index: number):string
trackSensors(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
trackSensors(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

trackSensorsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database.
 * Example: /// Example: 2021-02-25T12:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():OrbitTrack_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OrbitTrack_Abridged_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startOrbitTrack_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(45);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(3, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, origObjectIdOffset, 0);
}

static addIdElset(builder:flatbuffers.Builder, idElsetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idElsetOffset, 0);
}

static addTs(builder:flatbuffers.Builder, tsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, tsOffset, 0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(7, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(8, lon, 0.0);
}

static addAlt(builder:flatbuffers.Builder, alt:number) {
  builder.addFieldFloat64(9, alt, 0.0);
}

static addRdfRf(builder:flatbuffers.Builder, rdfRf:number) {
  builder.addFieldFloat64(10, rdfRf, 0.0);
}

static addCallSign(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, callSignOffset, 0);
}

static addRptNum(builder:flatbuffers.Builder, rptNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, rptNumOffset, 0);
}

static addObjIdent(builder:flatbuffers.Builder, objIdent:OrbitTrack_Abridged_objIdent_Enum) {
  builder.addFieldInt8(13, objIdent, OrbitTrack_Abridged_objIdent_Enum.ASSUMED_FRIEND);
}

static addIdentAmp(builder:flatbuffers.Builder, identAmpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, identAmpOffset, 0);
}

static addSatStatus(builder:flatbuffers.Builder, satStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, satStatusOffset, 0);
}

static addObjectType(builder:flatbuffers.Builder, objectType:OrbitTrack_Abridged_objectType_Enum) {
  builder.addFieldInt8(16, objectType, OrbitTrack_Abridged_objectType_Enum.DEBRIS);
}

static addCountryCode(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, countryCodeOffset, 0);
}

static addDecay(builder:flatbuffers.Builder, decay:number) {
  builder.addFieldFloat64(18, decay, 0.0);
}

static addCharlieLine(builder:flatbuffers.Builder, charlieLineOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, charlieLineOffset, 0);
}

static addAouType(builder:flatbuffers.Builder, aouTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, aouTypeOffset, 0);
}

static addAouData(builder:flatbuffers.Builder, aouDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, aouDataOffset, 0);
}

static createAouDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAouDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSpd(builder:flatbuffers.Builder, spd:number) {
  builder.addFieldFloat64(22, spd, 0.0);
}

static addAngElev(builder:flatbuffers.Builder, angElev:number) {
  builder.addFieldFloat64(23, angElev, 0.0);
}

static addCntnmnt(builder:flatbuffers.Builder, cntnmnt:number) {
  builder.addFieldFloat64(24, cntnmnt, 0.0);
}

static addXref(builder:flatbuffers.Builder, xrefOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, xrefOffset, 0);
}

static addChXref(builder:flatbuffers.Builder, chXrefOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, chXrefOffset, 0);
}

static addAmplification(builder:flatbuffers.Builder, amplificationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, amplificationOffset, 0);
}

static addIff(builder:flatbuffers.Builder, iffOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, iffOffset, 0);
}

static addReinforced(builder:flatbuffers.Builder, reinforced:boolean) {
  builder.addFieldInt8(29, +reinforced, +false);
}

static addReduced(builder:flatbuffers.Builder, reduced:boolean) {
  builder.addFieldInt8(30, +reduced, +false);
}

static addHq(builder:flatbuffers.Builder, hq:boolean) {
  builder.addFieldInt8(31, +hq, +false);
}

static addDummy(builder:flatbuffers.Builder, dummy:boolean) {
  builder.addFieldInt8(32, +dummy, +false);
}

static addTaskForce(builder:flatbuffers.Builder, taskForce:boolean) {
  builder.addFieldInt8(33, +taskForce, +false);
}

static addFeint(builder:flatbuffers.Builder, feint:boolean) {
  builder.addFieldInt8(34, +feint, +false);
}

static addInstallation(builder:flatbuffers.Builder, installation:boolean) {
  builder.addFieldInt8(35, +installation, +false);
}

static addVehType(builder:flatbuffers.Builder, vehTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, vehTypeOffset, 0);
}

static addTrkId(builder:flatbuffers.Builder, trkIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, trkIdOffset, 0);
}

static addTrackSensors(builder:flatbuffers.Builder, trackSensorsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, trackSensorsOffset, 0);
}

static createTrackSensorsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrackSensorsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:OrbitTrack_Abridged_dataMode_Enum) {
  builder.addFieldInt8(43, dataMode, OrbitTrack_Abridged_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, origNetworkOffset, 0);
}

static endOrbitTrack_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOrbitTrack_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ORBI');
}

static finishSizePrefixedOrbitTrack_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ORBI', true);
}

static createOrbitTrack_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, idElsetOffset:flatbuffers.Offset, tsOffset:flatbuffers.Offset, lat:number, lon:number, alt:number, rdfRf:number, callSignOffset:flatbuffers.Offset, rptNumOffset:flatbuffers.Offset, objIdent:OrbitTrack_Abridged_objIdent_Enum, identAmpOffset:flatbuffers.Offset, satStatusOffset:flatbuffers.Offset, objectType:OrbitTrack_Abridged_objectType_Enum, countryCodeOffset:flatbuffers.Offset, decay:number, charlieLineOffset:flatbuffers.Offset, aouTypeOffset:flatbuffers.Offset, aouDataOffset:flatbuffers.Offset, spd:number, angElev:number, cntnmnt:number, xrefOffset:flatbuffers.Offset, chXrefOffset:flatbuffers.Offset, amplificationOffset:flatbuffers.Offset, iffOffset:flatbuffers.Offset, reinforced:boolean, reduced:boolean, hq:boolean, dummy:boolean, taskForce:boolean, feint:boolean, installation:boolean, vehTypeOffset:flatbuffers.Offset, trkIdOffset:flatbuffers.Offset, trackSensorsOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:OrbitTrack_Abridged_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  OrbitTrack_Abridged.startOrbitTrack_Abridged(builder);
  OrbitTrack_Abridged.addId(builder, idOffset);
  OrbitTrack_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  OrbitTrack_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
  OrbitTrack_Abridged.addSatNo(builder, satNo);
  OrbitTrack_Abridged.addOrigObjectId(builder, origObjectIdOffset);
  OrbitTrack_Abridged.addIdElset(builder, idElsetOffset);
  OrbitTrack_Abridged.addTs(builder, tsOffset);
  OrbitTrack_Abridged.addLat(builder, lat);
  OrbitTrack_Abridged.addLon(builder, lon);
  OrbitTrack_Abridged.addAlt(builder, alt);
  OrbitTrack_Abridged.addRdfRf(builder, rdfRf);
  OrbitTrack_Abridged.addCallSign(builder, callSignOffset);
  OrbitTrack_Abridged.addRptNum(builder, rptNumOffset);
  OrbitTrack_Abridged.addObjIdent(builder, objIdent);
  OrbitTrack_Abridged.addIdentAmp(builder, identAmpOffset);
  OrbitTrack_Abridged.addSatStatus(builder, satStatusOffset);
  OrbitTrack_Abridged.addObjectType(builder, objectType);
  OrbitTrack_Abridged.addCountryCode(builder, countryCodeOffset);
  OrbitTrack_Abridged.addDecay(builder, decay);
  OrbitTrack_Abridged.addCharlieLine(builder, charlieLineOffset);
  OrbitTrack_Abridged.addAouType(builder, aouTypeOffset);
  OrbitTrack_Abridged.addAouData(builder, aouDataOffset);
  OrbitTrack_Abridged.addSpd(builder, spd);
  OrbitTrack_Abridged.addAngElev(builder, angElev);
  OrbitTrack_Abridged.addCntnmnt(builder, cntnmnt);
  OrbitTrack_Abridged.addXref(builder, xrefOffset);
  OrbitTrack_Abridged.addChXref(builder, chXrefOffset);
  OrbitTrack_Abridged.addAmplification(builder, amplificationOffset);
  OrbitTrack_Abridged.addIff(builder, iffOffset);
  OrbitTrack_Abridged.addReinforced(builder, reinforced);
  OrbitTrack_Abridged.addReduced(builder, reduced);
  OrbitTrack_Abridged.addHq(builder, hq);
  OrbitTrack_Abridged.addDummy(builder, dummy);
  OrbitTrack_Abridged.addTaskForce(builder, taskForce);
  OrbitTrack_Abridged.addFeint(builder, feint);
  OrbitTrack_Abridged.addInstallation(builder, installation);
  OrbitTrack_Abridged.addVehType(builder, vehTypeOffset);
  OrbitTrack_Abridged.addTrkId(builder, trkIdOffset);
  OrbitTrack_Abridged.addTrackSensors(builder, trackSensorsOffset);
  OrbitTrack_Abridged.addCreatedAt(builder, createdAtOffset);
  OrbitTrack_Abridged.addCreatedBy(builder, createdByOffset);
  OrbitTrack_Abridged.addSource(builder, sourceOffset);
  OrbitTrack_Abridged.addOrigin(builder, originOffset);
  OrbitTrack_Abridged.addDataMode(builder, dataMode);
  OrbitTrack_Abridged.addOrigNetwork(builder, origNetworkOffset);
  return OrbitTrack_Abridged.endOrbitTrack_Abridged(builder);
}

unpack(): OrbitTrack_AbridgedT {
  return new OrbitTrack_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.idElset(),
    this.ts(),
    this.lat(),
    this.lon(),
    this.alt(),
    this.rdfRf(),
    this.callSign(),
    this.rptNum(),
    this.objIdent(),
    this.identAmp(),
    this.satStatus(),
    this.objectType(),
    this.countryCode(),
    this.decay(),
    this.charlieLine(),
    this.aouType(),
    this.bb!.createScalarList<string>(this.aouData.bind(this), this.aouDataLength()),
    this.spd(),
    this.angElev(),
    this.cntnmnt(),
    this.xref(),
    this.chXref(),
    this.amplification(),
    this.iff(),
    this.reinforced(),
    this.reduced(),
    this.hq(),
    this.dummy(),
    this.taskForce(),
    this.feint(),
    this.installation(),
    this.vehType(),
    this.trkId(),
    this.bb!.createScalarList<string>(this.trackSensors.bind(this), this.trackSensorsLength()),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: OrbitTrack_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.idElset = this.idElset();
  _o.ts = this.ts();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.alt = this.alt();
  _o.rdfRf = this.rdfRf();
  _o.callSign = this.callSign();
  _o.rptNum = this.rptNum();
  _o.objIdent = this.objIdent();
  _o.identAmp = this.identAmp();
  _o.satStatus = this.satStatus();
  _o.objectType = this.objectType();
  _o.countryCode = this.countryCode();
  _o.decay = this.decay();
  _o.charlieLine = this.charlieLine();
  _o.aouType = this.aouType();
  _o.aouData = this.bb!.createScalarList<string>(this.aouData.bind(this), this.aouDataLength());
  _o.spd = this.spd();
  _o.angElev = this.angElev();
  _o.cntnmnt = this.cntnmnt();
  _o.xref = this.xref();
  _o.chXref = this.chXref();
  _o.amplification = this.amplification();
  _o.iff = this.iff();
  _o.reinforced = this.reinforced();
  _o.reduced = this.reduced();
  _o.hq = this.hq();
  _o.dummy = this.dummy();
  _o.taskForce = this.taskForce();
  _o.feint = this.feint();
  _o.installation = this.installation();
  _o.vehType = this.vehType();
  _o.trkId = this.trkId();
  _o.trackSensors = this.bb!.createScalarList<string>(this.trackSensors.bind(this), this.trackSensorsLength());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class OrbitTrack_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public idElset: string|Uint8Array|null = null,
  public ts: string|Uint8Array|null = null,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public alt: number = 0.0,
  public rdfRf: number = 0.0,
  public callSign: string|Uint8Array|null = null,
  public rptNum: string|Uint8Array|null = null,
  public objIdent: OrbitTrack_Abridged_objIdent_Enum = OrbitTrack_Abridged_objIdent_Enum.ASSUMED_FRIEND,
  public identAmp: string|Uint8Array|null = null,
  public satStatus: string|Uint8Array|null = null,
  public objectType: OrbitTrack_Abridged_objectType_Enum = OrbitTrack_Abridged_objectType_Enum.DEBRIS,
  public countryCode: string|Uint8Array|null = null,
  public decay: number = 0.0,
  public charlieLine: string|Uint8Array|null = null,
  public aouType: string|Uint8Array|null = null,
  public aouData: (string)[] = [],
  public spd: number = 0.0,
  public angElev: number = 0.0,
  public cntnmnt: number = 0.0,
  public xref: string|Uint8Array|null = null,
  public chXref: string|Uint8Array|null = null,
  public amplification: string|Uint8Array|null = null,
  public iff: string|Uint8Array|null = null,
  public reinforced: boolean = false,
  public reduced: boolean = false,
  public hq: boolean = false,
  public dummy: boolean = false,
  public taskForce: boolean = false,
  public feint: boolean = false,
  public installation: boolean = false,
  public vehType: string|Uint8Array|null = null,
  public trkId: string|Uint8Array|null = null,
  public trackSensors: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: OrbitTrack_Abridged_dataMode_Enum = OrbitTrack_Abridged_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const idElset = (this.idElset !== null ? builder.createString(this.idElset!) : 0);
  const ts = (this.ts !== null ? builder.createString(this.ts!) : 0);
  const callSign = (this.callSign !== null ? builder.createString(this.callSign!) : 0);
  const rptNum = (this.rptNum !== null ? builder.createString(this.rptNum!) : 0);
  const identAmp = (this.identAmp !== null ? builder.createString(this.identAmp!) : 0);
  const satStatus = (this.satStatus !== null ? builder.createString(this.satStatus!) : 0);
  const countryCode = (this.countryCode !== null ? builder.createString(this.countryCode!) : 0);
  const charlieLine = (this.charlieLine !== null ? builder.createString(this.charlieLine!) : 0);
  const aouType = (this.aouType !== null ? builder.createString(this.aouType!) : 0);
  const aouData = OrbitTrack_Abridged.createAouDataVector(builder, builder.createObjectOffsetList(this.aouData));
  const xref = (this.xref !== null ? builder.createString(this.xref!) : 0);
  const chXref = (this.chXref !== null ? builder.createString(this.chXref!) : 0);
  const amplification = (this.amplification !== null ? builder.createString(this.amplification!) : 0);
  const iff = (this.iff !== null ? builder.createString(this.iff!) : 0);
  const vehType = (this.vehType !== null ? builder.createString(this.vehType!) : 0);
  const trkId = (this.trkId !== null ? builder.createString(this.trkId!) : 0);
  const trackSensors = OrbitTrack_Abridged.createTrackSensorsVector(builder, builder.createObjectOffsetList(this.trackSensors));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return OrbitTrack_Abridged.createOrbitTrack_Abridged(builder,
    id,
    classificationMarking,
    idOnOrbit,
    this.satNo,
    origObjectId,
    idElset,
    ts,
    this.lat,
    this.lon,
    this.alt,
    this.rdfRf,
    callSign,
    rptNum,
    this.objIdent,
    identAmp,
    satStatus,
    this.objectType,
    countryCode,
    this.decay,
    charlieLine,
    aouType,
    aouData,
    this.spd,
    this.angElev,
    this.cntnmnt,
    xref,
    chXref,
    amplification,
    iff,
    this.reinforced,
    this.reduced,
    this.hq,
    this.dummy,
    this.taskForce,
    this.feint,
    this.installation,
    vehType,
    trkId,
    trackSensors,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
