// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AttitudeData_Ingest_dataMode_Enum } from './attitude-data-ingest-data-mode-enum.js';


/**
 * /// These services provide operations for posting and querying attitude of on-orbit objects.  Attitude describes the orientation of an object, which can be represented by quaternions or euler angles.  The AttitudeSet ID (asId) identifies the 'AttitudeSet' record which contains details of the underlying data as well as a collection of attitude points. Points must be retrieved by first identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID 'asId'.
 */
export class AttitudeData_Ingest implements flatbuffers.IUnpackableObject<AttitudeData_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AttitudeData_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAttitudeData_Ingest(bb:flatbuffers.ByteBuffer, obj?:AttitudeData_Ingest):AttitudeData_Ingest {
  return (obj || new AttitudeData_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAttitudeData_Ingest(bb:flatbuffers.ByteBuffer, obj?:AttitudeData_Ingest):AttitudeData_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AttitudeData_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ATTI');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: ATTITUDEDATA-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent AttitudeSet associated with this record.
 * Example: /// Example: 773c9887-e931-42eb-8155-f0fbd227b235
 * Constraints: Minimum length = 1, Maximum length = 36
 */
asId():string|null
asId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
asId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the on-orbit satellite to which this attitude record applies.
 * Example: /// Example: 41947
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the on-orbit object to which this attitude record applies.
 * Example: /// Example: 41947
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.
 * Example: /// Example: D6593
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.
 * Example: /// Example: 2022-03-07T14:51:39.653043Z
 * Constraints: No constraints specified.
 */
ts():string|null
ts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Label specifying type of rotational motion of target.
 * Example: /// Example: PROSOL_MOTION
 * Constraints: Minimum length = 0, Maximum length = 36
 */
motionType():string|null
motionType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
motionType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Quaternion vector component 1.
 * Example: /// Example: 0.0312
 * Constraints: No constraints specified.
 */
q1():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Quaternion vector component 2.
 * Example: /// Example: 0.7854
 * Constraints: No constraints specified.
 */
q2():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Quaternion vector component 3.
 * Example: /// Example: 0.3916
 * Constraints: No constraints specified.
 */
q3():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Quaternion scalar component.
 * Example: /// Example: 0.4783
 * Constraints: No constraints specified.
 */
qc():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Derivative of quaternion vector component 1.
 * Example: /// Example: 0.0043
 * Constraints: No constraints specified.
 */
q1Dot():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Derivative of quaternion vector component 2.
 * Example: /// Example: 0.06
 * Constraints: No constraints specified.
 */
q2Dot():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Derivative of quaternion vector component 3.
 * Example: /// Example: 0.499
 * Constraints: No constraints specified.
 */
q3Dot():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Derivative of quaternion scalar component.
 * Example: /// Example: 0.011
 * Constraints: No constraints specified.
 */
qcDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
 * Example: /// Example: [139.753]
 * Constraints: No constraints specified.
 */
xAngle(index: number):string
xAngle(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
xAngle(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

xAngleLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
 * Example: /// Example: [25.066]
 * Constraints: No constraints specified.
 */
yAngle(index: number):string
yAngle(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
yAngle(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

yAngleLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
 * Example: /// Example: [-53.368]
 * Constraints: No constraints specified.
 */
zAngle(index: number):string
zAngle(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
zAngle(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

zAngleLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
 * Example: /// Example: [0.105]
 * Constraints: No constraints specified.
 */
xRate(index: number):string
xRate(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
xRate(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

xRateLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
 * Example: /// Example: [0.032]
 * Constraints: No constraints specified.
 */
yRate(index: number):string
yRate(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
yRate(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

yRateLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.
 * Example: /// Example: [0.022]
 * Constraints: No constraints specified.
 */
zRate(index: number):string
zRate(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
zRate(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

zRateLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Precession axis right ascension (ECI J2000 frame) in degrees.
 * Example: /// Example: -173.75
 * Constraints: No constraints specified.
 */
ra():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Precession axis declination (ECI J2000 frame) in degrees.
 * Example: /// Example: 0.799
 * Constraints: No constraints specified.
 */
declination():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Coning angle in degrees.
 * Example: /// Example: 0.1
 * Constraints: No constraints specified.
 */
coningAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Precession period in seconds.
 * Example: /// Example: 36.1
 * Constraints: No constraints specified.
 */
precPeriod():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spin period in seconds.
 * Example: /// Example: 0.1
 * Constraints: No constraints specified.
 */
spinPeriod():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-07-05T12:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AttitudeData_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AttitudeData_Ingest_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAttitudeData_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(33);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addAsId(builder:flatbuffers.Builder, asIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, asIdOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(4, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, origObjectIdOffset, 0);
}

static addTs(builder:flatbuffers.Builder, tsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, tsOffset, 0);
}

static addMotionType(builder:flatbuffers.Builder, motionTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, motionTypeOffset, 0);
}

static addQ1(builder:flatbuffers.Builder, q1:number) {
  builder.addFieldFloat64(8, q1, 0.0);
}

static addQ2(builder:flatbuffers.Builder, q2:number) {
  builder.addFieldFloat64(9, q2, 0.0);
}

static addQ3(builder:flatbuffers.Builder, q3:number) {
  builder.addFieldFloat64(10, q3, 0.0);
}

static addQc(builder:flatbuffers.Builder, qc:number) {
  builder.addFieldFloat64(11, qc, 0.0);
}

static addQ1Dot(builder:flatbuffers.Builder, q1Dot:number) {
  builder.addFieldFloat64(12, q1Dot, 0.0);
}

static addQ2Dot(builder:flatbuffers.Builder, q2Dot:number) {
  builder.addFieldFloat64(13, q2Dot, 0.0);
}

static addQ3Dot(builder:flatbuffers.Builder, q3Dot:number) {
  builder.addFieldFloat64(14, q3Dot, 0.0);
}

static addQcDot(builder:flatbuffers.Builder, qcDot:number) {
  builder.addFieldFloat64(15, qcDot, 0.0);
}

static addXAngle(builder:flatbuffers.Builder, xAngleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, xAngleOffset, 0);
}

static createXAngleVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startXAngleVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addYAngle(builder:flatbuffers.Builder, yAngleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, yAngleOffset, 0);
}

static createYAngleVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startYAngleVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addZAngle(builder:flatbuffers.Builder, zAngleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, zAngleOffset, 0);
}

static createZAngleVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startZAngleVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addXRate(builder:flatbuffers.Builder, xRateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, xRateOffset, 0);
}

static createXRateVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startXRateVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addYRate(builder:flatbuffers.Builder, yRateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, yRateOffset, 0);
}

static createYRateVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startYRateVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addZRate(builder:flatbuffers.Builder, zRateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, zRateOffset, 0);
}

static createZRateVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startZRateVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRa(builder:flatbuffers.Builder, ra:number) {
  builder.addFieldFloat64(22, ra, 0.0);
}

static addDeclination(builder:flatbuffers.Builder, declination:number) {
  builder.addFieldFloat64(23, declination, 0.0);
}

static addConingAngle(builder:flatbuffers.Builder, coningAngle:number) {
  builder.addFieldFloat64(24, coningAngle, 0.0);
}

static addPrecPeriod(builder:flatbuffers.Builder, precPeriod:number) {
  builder.addFieldFloat64(25, precPeriod, 0.0);
}

static addSpinPeriod(builder:flatbuffers.Builder, spinPeriod:number) {
  builder.addFieldFloat64(26, spinPeriod, 0.0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AttitudeData_Ingest_dataMode_Enum) {
  builder.addFieldInt8(31, dataMode, AttitudeData_Ingest_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, origNetworkOffset, 0);
}

static endAttitudeData_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAttitudeData_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ATTI');
}

static finishSizePrefixedAttitudeData_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ATTI', true);
}

static createAttitudeData_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, asIdOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, tsOffset:flatbuffers.Offset, motionTypeOffset:flatbuffers.Offset, q1:number, q2:number, q3:number, qc:number, q1Dot:number, q2Dot:number, q3Dot:number, qcDot:number, xAngleOffset:flatbuffers.Offset, yAngleOffset:flatbuffers.Offset, zAngleOffset:flatbuffers.Offset, xRateOffset:flatbuffers.Offset, yRateOffset:flatbuffers.Offset, zRateOffset:flatbuffers.Offset, ra:number, declination:number, coningAngle:number, precPeriod:number, spinPeriod:number, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:AttitudeData_Ingest_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  AttitudeData_Ingest.startAttitudeData_Ingest(builder);
  AttitudeData_Ingest.addId(builder, idOffset);
  AttitudeData_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  AttitudeData_Ingest.addAsId(builder, asIdOffset);
  AttitudeData_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
  AttitudeData_Ingest.addSatNo(builder, satNo);
  AttitudeData_Ingest.addOrigObjectId(builder, origObjectIdOffset);
  AttitudeData_Ingest.addTs(builder, tsOffset);
  AttitudeData_Ingest.addMotionType(builder, motionTypeOffset);
  AttitudeData_Ingest.addQ1(builder, q1);
  AttitudeData_Ingest.addQ2(builder, q2);
  AttitudeData_Ingest.addQ3(builder, q3);
  AttitudeData_Ingest.addQc(builder, qc);
  AttitudeData_Ingest.addQ1Dot(builder, q1Dot);
  AttitudeData_Ingest.addQ2Dot(builder, q2Dot);
  AttitudeData_Ingest.addQ3Dot(builder, q3Dot);
  AttitudeData_Ingest.addQcDot(builder, qcDot);
  AttitudeData_Ingest.addXAngle(builder, xAngleOffset);
  AttitudeData_Ingest.addYAngle(builder, yAngleOffset);
  AttitudeData_Ingest.addZAngle(builder, zAngleOffset);
  AttitudeData_Ingest.addXRate(builder, xRateOffset);
  AttitudeData_Ingest.addYRate(builder, yRateOffset);
  AttitudeData_Ingest.addZRate(builder, zRateOffset);
  AttitudeData_Ingest.addRa(builder, ra);
  AttitudeData_Ingest.addDeclination(builder, declination);
  AttitudeData_Ingest.addConingAngle(builder, coningAngle);
  AttitudeData_Ingest.addPrecPeriod(builder, precPeriod);
  AttitudeData_Ingest.addSpinPeriod(builder, spinPeriod);
  AttitudeData_Ingest.addCreatedAt(builder, createdAtOffset);
  AttitudeData_Ingest.addCreatedBy(builder, createdByOffset);
  AttitudeData_Ingest.addSource(builder, sourceOffset);
  AttitudeData_Ingest.addOrigin(builder, originOffset);
  AttitudeData_Ingest.addDataMode(builder, dataMode);
  AttitudeData_Ingest.addOrigNetwork(builder, origNetworkOffset);
  return AttitudeData_Ingest.endAttitudeData_Ingest(builder);
}

unpack(): AttitudeData_IngestT {
  return new AttitudeData_IngestT(
    this.id(),
    this.classificationMarking(),
    this.asId(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.ts(),
    this.motionType(),
    this.q1(),
    this.q2(),
    this.q3(),
    this.qc(),
    this.q1Dot(),
    this.q2Dot(),
    this.q3Dot(),
    this.qcDot(),
    this.bb!.createScalarList<string>(this.xAngle.bind(this), this.xAngle_Length()),
    this.bb!.createScalarList<string>(this.yAngle.bind(this), this.yAngle_Length()),
    this.bb!.createScalarList<string>(this.zAngle.bind(this), this.zAngle_Length()),
    this.bb!.createScalarList<string>(this.xRate.bind(this), this.xRate_Length()),
    this.bb!.createScalarList<string>(this.yRate.bind(this), this.yRate_Length()),
    this.bb!.createScalarList<string>(this.zRate.bind(this), this.zRate_Length()),
    this.ra(),
    this.declination(),
    this.coningAngle(),
    this.precPeriod(),
    this.spinPeriod(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: AttitudeData_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.asId = this.asId();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.ts = this.ts();
  _o.motionType = this.motionType();
  _o.q1 = this.q1();
  _o.q2 = this.q2();
  _o.q3 = this.q3();
  _o.qc = this.qc();
  _o.q1Dot = this.q1Dot();
  _o.q2Dot = this.q2Dot();
  _o.q3Dot = this.q3Dot();
  _o.qcDot = this.qcDot();
  _o.xAngle = this.bb!.createScalarList<string>(this.xAngle.bind(this), this.xAngle_Length());
  _o.yAngle = this.bb!.createScalarList<string>(this.yAngle.bind(this), this.yAngle_Length());
  _o.zAngle = this.bb!.createScalarList<string>(this.zAngle.bind(this), this.zAngle_Length());
  _o.xRate = this.bb!.createScalarList<string>(this.xRate.bind(this), this.xRate_Length());
  _o.yRate = this.bb!.createScalarList<string>(this.yRate.bind(this), this.yRate_Length());
  _o.zRate = this.bb!.createScalarList<string>(this.zRate.bind(this), this.zRate_Length());
  _o.ra = this.ra();
  _o.declination = this.declination();
  _o.coningAngle = this.coningAngle();
  _o.precPeriod = this.precPeriod();
  _o.spinPeriod = this.spinPeriod();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class AttitudeData_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public asId: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public ts: string|Uint8Array|null = null,
  public motionType: string|Uint8Array|null = null,
  public q1: number = 0.0,
  public q2: number = 0.0,
  public q3: number = 0.0,
  public qc: number = 0.0,
  public q1Dot: number = 0.0,
  public q2Dot: number = 0.0,
  public q3Dot: number = 0.0,
  public qcDot: number = 0.0,
  public xAngle: (string)[] = [],
  public yAngle: (string)[] = [],
  public zAngle: (string)[] = [],
  public xRate: (string)[] = [],
  public yRate: (string)[] = [],
  public zRate: (string)[] = [],
  public ra: number = 0.0,
  public declination: number = 0.0,
  public coningAngle: number = 0.0,
  public precPeriod: number = 0.0,
  public spinPeriod: number = 0.0,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: AttitudeData_Ingest_dataMode_Enum = AttitudeData_Ingest_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const asId = (this.asId !== null ? builder.createString(this.asId!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const ts = (this.ts !== null ? builder.createString(this.ts!) : 0);
  const motionType = (this.motionType !== null ? builder.createString(this.motionType!) : 0);
  const xAngle = AttitudeData_Ingest.createXAngleVector(builder, builder.createObjectOffsetList(this.xAngle));
  const yAngle = AttitudeData_Ingest.createYAngleVector(builder, builder.createObjectOffsetList(this.yAngle));
  const zAngle = AttitudeData_Ingest.createZAngleVector(builder, builder.createObjectOffsetList(this.zAngle));
  const xRate = AttitudeData_Ingest.createXRateVector(builder, builder.createObjectOffsetList(this.xRate));
  const yRate = AttitudeData_Ingest.createYRateVector(builder, builder.createObjectOffsetList(this.yRate));
  const zRate = AttitudeData_Ingest.createZRateVector(builder, builder.createObjectOffsetList(this.zRate));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return AttitudeData_Ingest.createAttitudeData_Ingest(builder,
    id,
    classificationMarking,
    asId,
    idOnOrbit,
    this.satNo,
    origObjectId,
    ts,
    motionType,
    this.q1,
    this.q2,
    this.q3,
    this.qc,
    this.q1Dot,
    this.q2Dot,
    this.q3Dot,
    this.qcDot,
    xAngle,
    yAngle,
    zAngle,
    xRate,
    yRate,
    zRate,
    this.ra,
    this.declination,
    this.coningAngle,
    this.precPeriod,
    this.spinPeriod,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
