// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LaunchDetection_Full_dataMode_Enum } from './LaunchDetection_Full_dataMode_Enum.js';


/**
 * /// Data to analyze launch detections.
 */
export class LaunchDetection_Full implements flatbuffers.IUnpackableObject<LaunchDetection_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LaunchDetection_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLaunchDetection_Full(bb:flatbuffers.ByteBuffer, obj?:LaunchDetection_Full):LaunchDetection_Full {
  return (obj || new LaunchDetection_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLaunchDetection_Full(bb:flatbuffers.ByteBuffer, obj?:LaunchDetection_Full):LaunchDetection_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LaunchDetection_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('LAUN');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: LAUNCHDETECTION-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of Launch.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
launchTime():string|null
launchTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of message for the data.
 * Example: /// Example: Example-Msg-Type
 * Constraints: Minimum length = 1, Maximum length = 16
 */
messageType():string|null
messageType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
messageType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
launchLatitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
launchLongitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Angle measured clockwise from North for the launch heading (in Degrees).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
launchAzimuth():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Orbit Right Ascension of Ascending Node (in Degrees).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
raan():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Orbit Inclination (in Degrees).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
inclination():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time of observation.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
observationTime():string|null
observationTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
observationTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
observationLatitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Longitude of launch vehicle at observation time (in Degrees).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
observationLongitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Altitude of launch vehicle at observation time (in KM).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
observationAltitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating multiple observers were used.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
stereoFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
highZenithAzimuth():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Integer indicating how messages should be sequenced for a specific event.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
sequenceNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Id to be able to correlate different messages to a specific event.
 * Example: /// Example: EVENT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
eventId():string|null
eventId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional source-provided and searchable metadata or descriptor of the data.
 * Example: /// Example: Example descriptor
 * Constraints: Minimum length = 0, Maximum length = 64
 */
descriptor():string|null
descriptor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
descriptor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():LaunchDetection_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : LaunchDetection_Full_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Read-only time the row was updated in the database, set automatically by the system on update.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startLaunchDetection_Full(builder:flatbuffers.Builder) {
  builder.startObject(27);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addLaunchTime(builder:flatbuffers.Builder, launchTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, launchTimeOffset, 0);
}

static addMessageType(builder:flatbuffers.Builder, messageTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, messageTypeOffset, 0);
}

static addLaunchLatitude(builder:flatbuffers.Builder, launchLatitude:number) {
  builder.addFieldFloat64(4, launchLatitude, 0.0);
}

static addLaunchLongitude(builder:flatbuffers.Builder, launchLongitude:number) {
  builder.addFieldFloat64(5, launchLongitude, 0.0);
}

static addLaunchAzimuth(builder:flatbuffers.Builder, launchAzimuth:number) {
  builder.addFieldFloat64(6, launchAzimuth, 0.0);
}

static addRaan(builder:flatbuffers.Builder, raan:number) {
  builder.addFieldFloat64(7, raan, 0.0);
}

static addInclination(builder:flatbuffers.Builder, inclination:number) {
  builder.addFieldFloat64(8, inclination, 0.0);
}

static addObservationTime(builder:flatbuffers.Builder, observationTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, observationTimeOffset, 0);
}

static addObservationLatitude(builder:flatbuffers.Builder, observationLatitude:number) {
  builder.addFieldFloat64(10, observationLatitude, 0.0);
}

static addObservationLongitude(builder:flatbuffers.Builder, observationLongitude:number) {
  builder.addFieldFloat64(11, observationLongitude, 0.0);
}

static addObservationAltitude(builder:flatbuffers.Builder, observationAltitude:number) {
  builder.addFieldFloat64(12, observationAltitude, 0.0);
}

static addStereoFlag(builder:flatbuffers.Builder, stereoFlag:boolean) {
  builder.addFieldInt8(13, +stereoFlag, +false);
}

static addHighZenithAzimuth(builder:flatbuffers.Builder, highZenithAzimuth:boolean) {
  builder.addFieldInt8(14, +highZenithAzimuth, +false);
}

static addSequenceNumber(builder:flatbuffers.Builder, sequenceNumber:number) {
  builder.addFieldInt32(15, sequenceNumber, 0);
}

static addEventId(builder:flatbuffers.Builder, eventIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, eventIdOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, originOffset, 0);
}

static addDescriptor(builder:flatbuffers.Builder, descriptorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, descriptorOffset, 0);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:LaunchDetection_Full_dataMode_Enum) {
  builder.addFieldInt8(22, dataMode, LaunchDetection_Full_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, updatedByOffset, 0);
}

static endLaunchDetection_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLaunchDetection_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LAUN');
}

static finishSizePrefixedLaunchDetection_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LAUN', true);
}

static createLaunchDetection_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, launchTimeOffset:flatbuffers.Offset, messageTypeOffset:flatbuffers.Offset, launchLatitude:number, launchLongitude:number, launchAzimuth:number, raan:number, inclination:number, observationTimeOffset:flatbuffers.Offset, observationLatitude:number, observationLongitude:number, observationAltitude:number, stereoFlag:boolean, highZenithAzimuth:boolean, sequenceNumber:number, eventIdOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, descriptorOffset:flatbuffers.Offset, tagsOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:LaunchDetection_Full_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset):flatbuffers.Offset {
  LaunchDetection_Full.startLaunchDetection_Full(builder);
  LaunchDetection_Full.addId(builder, idOffset);
  LaunchDetection_Full.addClassificationMarking(builder, classificationMarkingOffset);
  LaunchDetection_Full.addLaunchTime(builder, launchTimeOffset);
  LaunchDetection_Full.addMessageType(builder, messageTypeOffset);
  LaunchDetection_Full.addLaunchLatitude(builder, launchLatitude);
  LaunchDetection_Full.addLaunchLongitude(builder, launchLongitude);
  LaunchDetection_Full.addLaunchAzimuth(builder, launchAzimuth);
  LaunchDetection_Full.addRaan(builder, raan);
  LaunchDetection_Full.addInclination(builder, inclination);
  LaunchDetection_Full.addObservationTime(builder, observationTimeOffset);
  LaunchDetection_Full.addObservationLatitude(builder, observationLatitude);
  LaunchDetection_Full.addObservationLongitude(builder, observationLongitude);
  LaunchDetection_Full.addObservationAltitude(builder, observationAltitude);
  LaunchDetection_Full.addStereoFlag(builder, stereoFlag);
  LaunchDetection_Full.addHighZenithAzimuth(builder, highZenithAzimuth);
  LaunchDetection_Full.addSequenceNumber(builder, sequenceNumber);
  LaunchDetection_Full.addEventId(builder, eventIdOffset);
  LaunchDetection_Full.addSource(builder, sourceOffset);
  LaunchDetection_Full.addOrigin(builder, originOffset);
  LaunchDetection_Full.addDescriptor(builder, descriptorOffset);
  LaunchDetection_Full.addTags(builder, tagsOffset);
  LaunchDetection_Full.addOrigNetwork(builder, origNetworkOffset);
  LaunchDetection_Full.addDataMode(builder, dataMode);
  LaunchDetection_Full.addCreatedAt(builder, createdAtOffset);
  LaunchDetection_Full.addCreatedBy(builder, createdByOffset);
  LaunchDetection_Full.addUpdatedAt(builder, updatedAtOffset);
  LaunchDetection_Full.addUpdatedBy(builder, updatedByOffset);
  return LaunchDetection_Full.endLaunchDetection_Full(builder);
}

unpack(): LaunchDetection_FullT {
  return new LaunchDetection_FullT(
    this.id(),
    this.classificationMarking(),
    this.launchTime(),
    this.messageType(),
    this.launchLatitude(),
    this.launchLongitude(),
    this.launchAzimuth(),
    this.raan(),
    this.inclination(),
    this.observationTime(),
    this.observationLatitude(),
    this.observationLongitude(),
    this.observationAltitude(),
    this.stereoFlag(),
    this.highZenithAzimuth(),
    this.sequenceNumber(),
    this.eventId(),
    this.source(),
    this.origin(),
    this.descriptor(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength()),
    this.origNetwork(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy()
  );
}


unpackTo(_o: LaunchDetection_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.launchTime = this.launchTime();
  _o.messageType = this.messageType();
  _o.launchLatitude = this.launchLatitude();
  _o.launchLongitude = this.launchLongitude();
  _o.launchAzimuth = this.launchAzimuth();
  _o.raan = this.raan();
  _o.inclination = this.inclination();
  _o.observationTime = this.observationTime();
  _o.observationLatitude = this.observationLatitude();
  _o.observationLongitude = this.observationLongitude();
  _o.observationAltitude = this.observationAltitude();
  _o.stereoFlag = this.stereoFlag();
  _o.highZenithAzimuth = this.highZenithAzimuth();
  _o.sequenceNumber = this.sequenceNumber();
  _o.eventId = this.eventId();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.descriptor = this.descriptor();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength());
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
}
}

export class LaunchDetection_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public launchTime: string|Uint8Array|null = null,
  public messageType: string|Uint8Array|null = null,
  public launchLatitude: number = 0.0,
  public launchLongitude: number = 0.0,
  public launchAzimuth: number = 0.0,
  public raan: number = 0.0,
  public inclination: number = 0.0,
  public observationTime: string|Uint8Array|null = null,
  public observationLatitude: number = 0.0,
  public observationLongitude: number = 0.0,
  public observationAltitude: number = 0.0,
  public stereoFlag: boolean = false,
  public highZenithAzimuth: boolean = false,
  public sequenceNumber: number = 0,
  public eventId: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public descriptor: string|Uint8Array|null = null,
  public tags: (string)[] = [],
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: LaunchDetection_Full_dataMode_Enum = LaunchDetection_Full_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const launchTime = (this.launchTime !== null ? builder.createString(this.launchTime!) : 0);
  const messageType = (this.messageType !== null ? builder.createString(this.messageType!) : 0);
  const observationTime = (this.observationTime !== null ? builder.createString(this.observationTime!) : 0);
  const eventId = (this.eventId !== null ? builder.createString(this.eventId!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const descriptor = (this.descriptor !== null ? builder.createString(this.descriptor!) : 0);
  const tags = LaunchDetection_Full.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);

  return LaunchDetection_Full.createLaunchDetection_Full(builder,
    id,
    classificationMarking,
    launchTime,
    messageType,
    this.launchLatitude,
    this.launchLongitude,
    this.launchAzimuth,
    this.raan,
    this.inclination,
    observationTime,
    this.observationLatitude,
    this.observationLongitude,
    this.observationAltitude,
    this.stereoFlag,
    this.highZenithAzimuth,
    this.sequenceNumber,
    eventId,
    source,
    origin,
    descriptor,
    tags,
    origNetwork,
    this.dataMode,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy
  );
}
}
