// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RFObservation_Abridged_dataMode_Enum } from './RFObservation_Abridged_dataMode_Enum.js';
import { RFObservation_Abridged_polarityType_Enum } from './RFObservation_Abridged_polarityType_Enum.js';


/**
 * /// Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).
 */
export class RFObservation_Abridged implements flatbuffers.IUnpackableObject<RFObservation_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RFObservation_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRFObservation_Abridged(bb:flatbuffers.ByteBuffer, obj?:RFObservation_Abridged):RFObservation_Abridged {
  return (obj || new RFObservation_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRFObservation_Abridged(bb:flatbuffers.ByteBuffer, obj?:RFObservation_Abridged):RFObservation_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RFObservation_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('RFOB');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: RFOBSERVATION-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ob detection time in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
obTime():string|null
obTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the target on-orbit object, if correlated.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the reporting sensor.
 * Example: /// Example: SENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
 * Example: /// Example: RF
 * Constraints: Minimum length = 1, Maximum length = 32
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/Catalog number of the target on-orbit object.
 * Example: /// Example: 32258
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier to indicate the specific tasking which produced this observation.
 * Example: /// Example: TASK-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
taskId():string|null
taskId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: TRANSACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier of the track to which this observation belongs.
 * Example: /// Example: TRACK-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
trackId():string|null
trackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
 * Example: /// Example: ORIG-OBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIG-SENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
uct():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Optional identifier provided by observation source to indicate the transponder used for this measurement.
 * Example: /// Example: TRANSPONDER-A
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transponder():string|null
transponder(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transponder(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * azimuth angle in degrees and J2000 coordinate frame.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
azimuth():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the azimuth angle measurement, in degrees.
 * Example: /// Example: 2.1
 * Constraints: No constraints specified.
 */
azimuthUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of the azimuth in degrees per second.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
azimuthRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * elevation in degrees and J2000 coordinate frame.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
elevation():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the elevation angle measurement, in degrees.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
elevationUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of the elevation in degrees per second.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
elevationRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Target range in km.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
range():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the range measurement, in kilometers.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
rangeUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of the range in km/sec.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
rangeRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the range rate measurement, in kilometers/second.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
rangeRateUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Target track or apparent range in km.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
trackRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.2
 * Constraints: No constraints specified.
 */
senlat():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 80.3
 * Constraints: No constraints specified.
 */
senlon():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
senalt():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * ELINT notation.
 * Example: /// Example: Ex. ELINT
 * Constraints: Minimum length = 0, Maximum length = 10
 */
elnot():string|null
elnot(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
elnot(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Center carrier frequency in Hz.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
frequency():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Nominal or expected center carrier frequency in Hz.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
nominalFrequency():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Start carrier frequency in Hz.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
startFrequency():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * End carrier frequency in Hz.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
endFrequency():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Measured power of the center carrier frequency in dBW.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
relativeCarrierPower():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Measured spectrum analyzer power of the center carrier frequency in dBW.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
spectrumAnalyzerPower():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
relativeNoiseFloor():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Reference signal level, in dBW.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
referenceLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
pgri():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Confidence in the signal and its measurements and characterization.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
confidence():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * True if the signal is incoming, false if outgoing.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
incoming():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Switch Point of the RFObservation record.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
switchPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
baudRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Signal to noise ratio, in dB.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
snr():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Nominal or expected signal to noise ratio, in dB.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
nominalSnr():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The antenna pointing dependent polarizer angle, in degrees.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
polarity():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
 * Example: /// Example: H
 * Constraints: Minimum length = 0, Maximum length = 16
 */
polarityType():RFObservation_Abridged_polarityType_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : RFObservation_Abridged_polarityType_Enum.H;
}

/**
 * Channel of the RFObservation record.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
channel():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Measured carrier power over noise (dBW/Hz).
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
powerOverNoise():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Expected carrier power over noise (dBW/Hz).
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
nominalPowerOverNoise():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Measured bandwidth in Hz.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
bandwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Expected bandwidth in Hz.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
nominalBandwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Resolution bandwidth in Hz.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
resolutionBandwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Video bandwidth in Hz.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
videoBandwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Measured Equivalent Isotopically Radiated Power in dBW.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
eirp():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Expected Equivalent Isotopically Radiated Power in dBW.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
nominalEirp():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum measured PSD value of the trace in dBW.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
minPsd():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum measured PSD value of the trace in dBW.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
maxPsd():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Frequency Shift of the RFObservation record.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
frequencyShift():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Peak of the RFObservation record.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
peak():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Antenna name of the RFObservation record.
 * Example: /// Example: Antenna1
 * Constraints: Minimum length = 0, Maximum length = 64
 */
antennaName():string|null
antennaName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
antennaName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
 * Example: /// Example: DETECTED
 * Constraints: Minimum length = 0, Maximum length = 32
 */
detectionStatus():string|null
detectionStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
detectionStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
 * Example: /// Example: SURVEY
 * Constraints: Minimum length = 0, Maximum length = 32
 */
collectionMode():string|null
collectionMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collectionMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: Example URI
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():RFObservation_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : RFObservation_Abridged_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Noise power density, in dBW-Hz.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
noisePwrDensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Carrier standard (e.g. DVB-S2, 802.11g, etc.).
 * Example: /// Example: DVB-S2
 * Constraints: Minimum length = 0, Maximum length = 10
 */
carrierStandard():string|null
carrierStandard(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
carrierStandard(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
 * Example: /// Example: Auto
 * Constraints: Minimum length = 0, Maximum length = 10
 */
modulation():string|null
modulation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modulation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
 * Example: /// Example: 7
 * Constraints: No constraints specified.
 */
innerCodingRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
 * Example: /// Example: 4
 * Constraints: No constraints specified.
 */
outerCodingRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Transmit pulse shaping filter typ (e.g. RRC).
 * Example: /// Example: RRC
 * Constraints: Minimum length = 0, Maximum length = 10
 */
transmitFilterType():string|null
transmitFilterType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transmitFilterType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Transmit pulse shaping filter roll-off value.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
transmitFilterRollOff():number {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Symbol to noise ratio, in dB.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
symbolToNoiseRatio():number {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The ratio of bit errors per number of received bits.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
bitErrorRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional source-provided and searchable metadata or descriptor of the data.
 * Example: /// Example: descriptor
 * Constraints: Minimum length = 0, Maximum length = 64
 */
descriptor():string|null
descriptor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
descriptor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional URL containing additional information on this observation.
 * Example: /// Example: https://some-url
 * Constraints: Minimum length = 0, Maximum length = 2048
 */
url():string|null
url(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
url(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRFObservation_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(81);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addObTime(builder:flatbuffers.Builder, obTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, obTimeOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idOnOrbitOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idSensorOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, typeOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(6, satNo, 0);
}

static addTaskId(builder:flatbuffers.Builder, taskIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, taskIdOffset, 0);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, transactionIdOffset, 0);
}

static addTrackId(builder:flatbuffers.Builder, trackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, trackIdOffset, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, origObjectIdOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, origSensorIdOffset, 0);
}

static addUct(builder:flatbuffers.Builder, uct:boolean) {
  builder.addFieldInt8(12, +uct, +false);
}

static addTransponder(builder:flatbuffers.Builder, transponderOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, transponderOffset, 0);
}

static addAzimuth(builder:flatbuffers.Builder, azimuth:number) {
  builder.addFieldFloat64(14, azimuth, 0.0);
}

static addAzimuthUnc(builder:flatbuffers.Builder, azimuthUnc:number) {
  builder.addFieldFloat64(15, azimuthUnc, 0.0);
}

static addAzimuthRate(builder:flatbuffers.Builder, azimuthRate:number) {
  builder.addFieldFloat64(16, azimuthRate, 0.0);
}

static addElevation(builder:flatbuffers.Builder, elevation:number) {
  builder.addFieldFloat64(17, elevation, 0.0);
}

static addElevationUnc(builder:flatbuffers.Builder, elevationUnc:number) {
  builder.addFieldFloat64(18, elevationUnc, 0.0);
}

static addElevationRate(builder:flatbuffers.Builder, elevationRate:number) {
  builder.addFieldFloat64(19, elevationRate, 0.0);
}

static addRange(builder:flatbuffers.Builder, range:number) {
  builder.addFieldFloat64(20, range, 0.0);
}

static addRangeUnc(builder:flatbuffers.Builder, rangeUnc:number) {
  builder.addFieldFloat64(21, rangeUnc, 0.0);
}

static addRangeRate(builder:flatbuffers.Builder, rangeRate:number) {
  builder.addFieldFloat64(22, rangeRate, 0.0);
}

static addRangeRateUnc(builder:flatbuffers.Builder, rangeRateUnc:number) {
  builder.addFieldFloat64(23, rangeRateUnc, 0.0);
}

static addTrackRange(builder:flatbuffers.Builder, trackRange:number) {
  builder.addFieldFloat64(24, trackRange, 0.0);
}

static addSenlat(builder:flatbuffers.Builder, senlat:number) {
  builder.addFieldFloat64(25, senlat, 0.0);
}

static addSenlon(builder:flatbuffers.Builder, senlon:number) {
  builder.addFieldFloat64(26, senlon, 0.0);
}

static addSenalt(builder:flatbuffers.Builder, senalt:number) {
  builder.addFieldFloat64(27, senalt, 0.0);
}

static addElnot(builder:flatbuffers.Builder, elnotOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, elnotOffset, 0);
}

static addFrequency(builder:flatbuffers.Builder, frequency:number) {
  builder.addFieldFloat64(29, frequency, 0.0);
}

static addNominalFrequency(builder:flatbuffers.Builder, nominalFrequency:number) {
  builder.addFieldFloat64(30, nominalFrequency, 0.0);
}

static addStartFrequency(builder:flatbuffers.Builder, startFrequency:number) {
  builder.addFieldFloat64(31, startFrequency, 0.0);
}

static addEndFrequency(builder:flatbuffers.Builder, endFrequency:number) {
  builder.addFieldFloat64(32, endFrequency, 0.0);
}

static addRelativeCarrierPower(builder:flatbuffers.Builder, relativeCarrierPower:number) {
  builder.addFieldFloat64(33, relativeCarrierPower, 0.0);
}

static addSpectrumAnalyzerPower(builder:flatbuffers.Builder, spectrumAnalyzerPower:number) {
  builder.addFieldFloat64(34, spectrumAnalyzerPower, 0.0);
}

static addRelativeNoiseFloor(builder:flatbuffers.Builder, relativeNoiseFloor:number) {
  builder.addFieldFloat64(35, relativeNoiseFloor, 0.0);
}

static addReferenceLevel(builder:flatbuffers.Builder, referenceLevel:number) {
  builder.addFieldFloat64(36, referenceLevel, 0.0);
}

static addPgri(builder:flatbuffers.Builder, pgri:number) {
  builder.addFieldFloat64(37, pgri, 0.0);
}

static addConfidence(builder:flatbuffers.Builder, confidence:number) {
  builder.addFieldFloat64(38, confidence, 0.0);
}

static addIncoming(builder:flatbuffers.Builder, incoming:boolean) {
  builder.addFieldInt8(39, +incoming, +false);
}

static addSwitchPoint(builder:flatbuffers.Builder, switchPoint:number) {
  builder.addFieldInt32(40, switchPoint, 0);
}

static addBaudRate(builder:flatbuffers.Builder, baudRate:number) {
  builder.addFieldFloat64(41, baudRate, 0.0);
}

static addSnr(builder:flatbuffers.Builder, snr:number) {
  builder.addFieldFloat64(42, snr, 0.0);
}

static addNominalSnr(builder:flatbuffers.Builder, nominalSnr:number) {
  builder.addFieldFloat64(43, nominalSnr, 0.0);
}

static addPolarity(builder:flatbuffers.Builder, polarity:number) {
  builder.addFieldFloat64(44, polarity, 0.0);
}

static addPolarityType(builder:flatbuffers.Builder, polarityType:RFObservation_Abridged_polarityType_Enum) {
  builder.addFieldInt8(45, polarityType, RFObservation_Abridged_polarityType_Enum.H);
}

static addChannel(builder:flatbuffers.Builder, channel:number) {
  builder.addFieldInt32(46, channel, 0);
}

static addPowerOverNoise(builder:flatbuffers.Builder, powerOverNoise:number) {
  builder.addFieldFloat64(47, powerOverNoise, 0.0);
}

static addNominalPowerOverNoise(builder:flatbuffers.Builder, nominalPowerOverNoise:number) {
  builder.addFieldFloat64(48, nominalPowerOverNoise, 0.0);
}

static addBandwidth(builder:flatbuffers.Builder, bandwidth:number) {
  builder.addFieldFloat64(49, bandwidth, 0.0);
}

static addNominalBandwidth(builder:flatbuffers.Builder, nominalBandwidth:number) {
  builder.addFieldFloat64(50, nominalBandwidth, 0.0);
}

static addResolutionBandwidth(builder:flatbuffers.Builder, resolutionBandwidth:number) {
  builder.addFieldFloat64(51, resolutionBandwidth, 0.0);
}

static addVideoBandwidth(builder:flatbuffers.Builder, videoBandwidth:number) {
  builder.addFieldFloat64(52, videoBandwidth, 0.0);
}

static addEirp(builder:flatbuffers.Builder, eirp:number) {
  builder.addFieldFloat64(53, eirp, 0.0);
}

static addNominalEirp(builder:flatbuffers.Builder, nominalEirp:number) {
  builder.addFieldFloat64(54, nominalEirp, 0.0);
}

static addMinPsd(builder:flatbuffers.Builder, minPsd:number) {
  builder.addFieldFloat64(55, minPsd, 0.0);
}

static addMaxPsd(builder:flatbuffers.Builder, maxPsd:number) {
  builder.addFieldFloat64(56, maxPsd, 0.0);
}

static addFrequencyShift(builder:flatbuffers.Builder, frequencyShift:number) {
  builder.addFieldFloat64(57, frequencyShift, 0.0);
}

static addPeak(builder:flatbuffers.Builder, peak:boolean) {
  builder.addFieldInt8(58, +peak, +false);
}

static addAntennaName(builder:flatbuffers.Builder, antennaNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, antennaNameOffset, 0);
}

static addDetectionStatus(builder:flatbuffers.Builder, detectionStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, detectionStatusOffset, 0);
}

static addCollectionMode(builder:flatbuffers.Builder, collectionModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, collectionModeOffset, 0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, rawFileUriOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:RFObservation_Abridged_dataMode_Enum) {
  builder.addFieldInt8(65, dataMode, RFObservation_Abridged_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, createdByOffset, 0);
}

static addNoisePwrDensity(builder:flatbuffers.Builder, noisePwrDensity:number) {
  builder.addFieldFloat64(68, noisePwrDensity, 0.0);
}

static addCarrierStandard(builder:flatbuffers.Builder, carrierStandardOffset:flatbuffers.Offset) {
  builder.addFieldOffset(69, carrierStandardOffset, 0);
}

static addModulation(builder:flatbuffers.Builder, modulationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(70, modulationOffset, 0);
}

static addInnerCodingRate(builder:flatbuffers.Builder, innerCodingRate:number) {
  builder.addFieldInt32(71, innerCodingRate, 0);
}

static addOuterCodingRate(builder:flatbuffers.Builder, outerCodingRate:number) {
  builder.addFieldInt32(72, outerCodingRate, 0);
}

static addTransmitFilterType(builder:flatbuffers.Builder, transmitFilterTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(73, transmitFilterTypeOffset, 0);
}

static addTransmitFilterRollOff(builder:flatbuffers.Builder, transmitFilterRollOff:number) {
  builder.addFieldFloat64(74, transmitFilterRollOff, 0.0);
}

static addSymbolToNoiseRatio(builder:flatbuffers.Builder, symbolToNoiseRatio:number) {
  builder.addFieldFloat64(75, symbolToNoiseRatio, 0.0);
}

static addBitErrorRate(builder:flatbuffers.Builder, bitErrorRate:number) {
  builder.addFieldFloat64(76, bitErrorRate, 0.0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(77, origNetworkOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(78, sourceDlOffset, 0);
}

static addDescriptor(builder:flatbuffers.Builder, descriptorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(79, descriptorOffset, 0);
}

static addUrl(builder:flatbuffers.Builder, urlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(80, urlOffset, 0);
}

static endRFObservation_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishRFObservation_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RFOB');
}

static finishSizePrefixedRFObservation_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RFOB', true);
}

static createRFObservation_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, obTimeOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, satNo:number, taskIdOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, trackIdOffset:flatbuffers.Offset, origObjectIdOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, uct:boolean, transponderOffset:flatbuffers.Offset, azimuth:number, azimuthUnc:number, azimuthRate:number, elevation:number, elevationUnc:number, elevationRate:number, range:number, rangeUnc:number, rangeRate:number, rangeRateUnc:number, trackRange:number, senlat:number, senlon:number, senalt:number, elnotOffset:flatbuffers.Offset, frequency:number, nominalFrequency:number, startFrequency:number, endFrequency:number, relativeCarrierPower:number, spectrumAnalyzerPower:number, relativeNoiseFloor:number, referenceLevel:number, pgri:number, confidence:number, incoming:boolean, switchPoint:number, baudRate:number, snr:number, nominalSnr:number, polarity:number, polarityType:RFObservation_Abridged_polarityType_Enum, channel:number, powerOverNoise:number, nominalPowerOverNoise:number, bandwidth:number, nominalBandwidth:number, resolutionBandwidth:number, videoBandwidth:number, eirp:number, nominalEirp:number, minPsd:number, maxPsd:number, frequencyShift:number, peak:boolean, antennaNameOffset:flatbuffers.Offset, detectionStatusOffset:flatbuffers.Offset, collectionModeOffset:flatbuffers.Offset, rawFileUriOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:RFObservation_Abridged_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, noisePwrDensity:number, carrierStandardOffset:flatbuffers.Offset, modulationOffset:flatbuffers.Offset, innerCodingRate:number, outerCodingRate:number, transmitFilterTypeOffset:flatbuffers.Offset, transmitFilterRollOff:number, symbolToNoiseRatio:number, bitErrorRate:number, origNetworkOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, descriptorOffset:flatbuffers.Offset, urlOffset:flatbuffers.Offset):flatbuffers.Offset {
  RFObservation_Abridged.startRFObservation_Abridged(builder);
  RFObservation_Abridged.addId(builder, idOffset);
  RFObservation_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  RFObservation_Abridged.addObTime(builder, obTimeOffset);
  RFObservation_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
  RFObservation_Abridged.addIdSensor(builder, idSensorOffset);
  RFObservation_Abridged.addType(builder, typeOffset);
  RFObservation_Abridged.addSatNo(builder, satNo);
  RFObservation_Abridged.addTaskId(builder, taskIdOffset);
  RFObservation_Abridged.addTransactionId(builder, transactionIdOffset);
  RFObservation_Abridged.addTrackId(builder, trackIdOffset);
  RFObservation_Abridged.addOrigObjectId(builder, origObjectIdOffset);
  RFObservation_Abridged.addOrigSensorId(builder, origSensorIdOffset);
  RFObservation_Abridged.addUct(builder, uct);
  RFObservation_Abridged.addTransponder(builder, transponderOffset);
  RFObservation_Abridged.addAzimuth(builder, azimuth);
  RFObservation_Abridged.addAzimuthUnc(builder, azimuthUnc);
  RFObservation_Abridged.addAzimuthRate(builder, azimuthRate);
  RFObservation_Abridged.addElevation(builder, elevation);
  RFObservation_Abridged.addElevationUnc(builder, elevationUnc);
  RFObservation_Abridged.addElevationRate(builder, elevationRate);
  RFObservation_Abridged.addRange(builder, range);
  RFObservation_Abridged.addRangeUnc(builder, rangeUnc);
  RFObservation_Abridged.addRangeRate(builder, rangeRate);
  RFObservation_Abridged.addRangeRateUnc(builder, rangeRateUnc);
  RFObservation_Abridged.addTrackRange(builder, trackRange);
  RFObservation_Abridged.addSenlat(builder, senlat);
  RFObservation_Abridged.addSenlon(builder, senlon);
  RFObservation_Abridged.addSenalt(builder, senalt);
  RFObservation_Abridged.addElnot(builder, elnotOffset);
  RFObservation_Abridged.addFrequency(builder, frequency);
  RFObservation_Abridged.addNominalFrequency(builder, nominalFrequency);
  RFObservation_Abridged.addStartFrequency(builder, startFrequency);
  RFObservation_Abridged.addEndFrequency(builder, endFrequency);
  RFObservation_Abridged.addRelativeCarrierPower(builder, relativeCarrierPower);
  RFObservation_Abridged.addSpectrumAnalyzerPower(builder, spectrumAnalyzerPower);
  RFObservation_Abridged.addRelativeNoiseFloor(builder, relativeNoiseFloor);
  RFObservation_Abridged.addReferenceLevel(builder, referenceLevel);
  RFObservation_Abridged.addPgri(builder, pgri);
  RFObservation_Abridged.addConfidence(builder, confidence);
  RFObservation_Abridged.addIncoming(builder, incoming);
  RFObservation_Abridged.addSwitchPoint(builder, switchPoint);
  RFObservation_Abridged.addBaudRate(builder, baudRate);
  RFObservation_Abridged.addSnr(builder, snr);
  RFObservation_Abridged.addNominalSnr(builder, nominalSnr);
  RFObservation_Abridged.addPolarity(builder, polarity);
  RFObservation_Abridged.addPolarityType(builder, polarityType);
  RFObservation_Abridged.addChannel(builder, channel);
  RFObservation_Abridged.addPowerOverNoise(builder, powerOverNoise);
  RFObservation_Abridged.addNominalPowerOverNoise(builder, nominalPowerOverNoise);
  RFObservation_Abridged.addBandwidth(builder, bandwidth);
  RFObservation_Abridged.addNominalBandwidth(builder, nominalBandwidth);
  RFObservation_Abridged.addResolutionBandwidth(builder, resolutionBandwidth);
  RFObservation_Abridged.addVideoBandwidth(builder, videoBandwidth);
  RFObservation_Abridged.addEirp(builder, eirp);
  RFObservation_Abridged.addNominalEirp(builder, nominalEirp);
  RFObservation_Abridged.addMinPsd(builder, minPsd);
  RFObservation_Abridged.addMaxPsd(builder, maxPsd);
  RFObservation_Abridged.addFrequencyShift(builder, frequencyShift);
  RFObservation_Abridged.addPeak(builder, peak);
  RFObservation_Abridged.addAntennaName(builder, antennaNameOffset);
  RFObservation_Abridged.addDetectionStatus(builder, detectionStatusOffset);
  RFObservation_Abridged.addCollectionMode(builder, collectionModeOffset);
  RFObservation_Abridged.addRawFileUri(builder, rawFileUriOffset);
  RFObservation_Abridged.addSource(builder, sourceOffset);
  RFObservation_Abridged.addOrigin(builder, originOffset);
  RFObservation_Abridged.addDataMode(builder, dataMode);
  RFObservation_Abridged.addCreatedAt(builder, createdAtOffset);
  RFObservation_Abridged.addCreatedBy(builder, createdByOffset);
  RFObservation_Abridged.addNoisePwrDensity(builder, noisePwrDensity);
  RFObservation_Abridged.addCarrierStandard(builder, carrierStandardOffset);
  RFObservation_Abridged.addModulation(builder, modulationOffset);
  RFObservation_Abridged.addInnerCodingRate(builder, innerCodingRate);
  RFObservation_Abridged.addOuterCodingRate(builder, outerCodingRate);
  RFObservation_Abridged.addTransmitFilterType(builder, transmitFilterTypeOffset);
  RFObservation_Abridged.addTransmitFilterRollOff(builder, transmitFilterRollOff);
  RFObservation_Abridged.addSymbolToNoiseRatio(builder, symbolToNoiseRatio);
  RFObservation_Abridged.addBitErrorRate(builder, bitErrorRate);
  RFObservation_Abridged.addOrigNetwork(builder, origNetworkOffset);
  RFObservation_Abridged.addSourceDl(builder, sourceDlOffset);
  RFObservation_Abridged.addDescriptor(builder, descriptorOffset);
  RFObservation_Abridged.addUrl(builder, urlOffset);
  return RFObservation_Abridged.endRFObservation_Abridged(builder);
}

unpack(): RFObservation_AbridgedT {
  return new RFObservation_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.obTime(),
    this.idOnOrbit(),
    this.idSensor(),
    this.type(),
    this.satNo(),
    this.taskId(),
    this.transactionId(),
    this.trackId(),
    this.origObjectId(),
    this.origSensorId(),
    this.uct(),
    this.transponder(),
    this.azimuth(),
    this.azimuthUnc(),
    this.azimuthRate(),
    this.elevation(),
    this.elevationUnc(),
    this.elevationRate(),
    this.range(),
    this.rangeUnc(),
    this.rangeRate(),
    this.rangeRateUnc(),
    this.trackRange(),
    this.senlat(),
    this.senlon(),
    this.senalt(),
    this.elnot(),
    this.frequency(),
    this.nominalFrequency(),
    this.startFrequency(),
    this.endFrequency(),
    this.relativeCarrierPower(),
    this.spectrumAnalyzerPower(),
    this.relativeNoiseFloor(),
    this.referenceLevel(),
    this.pgri(),
    this.confidence(),
    this.incoming(),
    this.switchPoint(),
    this.baudRate(),
    this.snr(),
    this.nominalSnr(),
    this.polarity(),
    this.polarityType(),
    this.channel(),
    this.powerOverNoise(),
    this.nominalPowerOverNoise(),
    this.bandwidth(),
    this.nominalBandwidth(),
    this.resolutionBandwidth(),
    this.videoBandwidth(),
    this.eirp(),
    this.nominalEirp(),
    this.minPsd(),
    this.maxPsd(),
    this.frequencyShift(),
    this.peak(),
    this.antennaName(),
    this.detectionStatus(),
    this.collectionMode(),
    this.rawFileUri(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.noisePwrDensity(),
    this.carrierStandard(),
    this.modulation(),
    this.innerCodingRate(),
    this.outerCodingRate(),
    this.transmitFilterType(),
    this.transmitFilterRollOff(),
    this.symbolToNoiseRatio(),
    this.bitErrorRate(),
    this.origNetwork(),
    this.sourceDl(),
    this.descriptor(),
    this.url()
  );
}


unpackTo(_o: RFObservation_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.obTime = this.obTime();
  _o.idOnOrbit = this.idOnOrbit();
  _o.idSensor = this.idSensor();
  _o.type = this.type();
  _o.satNo = this.satNo();
  _o.taskId = this.taskId();
  _o.transactionId = this.transactionId();
  _o.trackId = this.trackId();
  _o.origObjectId = this.origObjectId();
  _o.origSensorId = this.origSensorId();
  _o.uct = this.uct();
  _o.transponder = this.transponder();
  _o.azimuth = this.azimuth();
  _o.azimuthUnc = this.azimuthUnc();
  _o.azimuthRate = this.azimuthRate();
  _o.elevation = this.elevation();
  _o.elevationUnc = this.elevationUnc();
  _o.elevationRate = this.elevationRate();
  _o.range = this.range();
  _o.rangeUnc = this.rangeUnc();
  _o.rangeRate = this.rangeRate();
  _o.rangeRateUnc = this.rangeRateUnc();
  _o.trackRange = this.trackRange();
  _o.senlat = this.senlat();
  _o.senlon = this.senlon();
  _o.senalt = this.senalt();
  _o.elnot = this.elnot();
  _o.frequency = this.frequency();
  _o.nominalFrequency = this.nominalFrequency();
  _o.startFrequency = this.startFrequency();
  _o.endFrequency = this.endFrequency();
  _o.relativeCarrierPower = this.relativeCarrierPower();
  _o.spectrumAnalyzerPower = this.spectrumAnalyzerPower();
  _o.relativeNoiseFloor = this.relativeNoiseFloor();
  _o.referenceLevel = this.referenceLevel();
  _o.pgri = this.pgri();
  _o.confidence = this.confidence();
  _o.incoming = this.incoming();
  _o.switchPoint = this.switchPoint();
  _o.baudRate = this.baudRate();
  _o.snr = this.snr();
  _o.nominalSnr = this.nominalSnr();
  _o.polarity = this.polarity();
  _o.polarityType = this.polarityType();
  _o.channel = this.channel();
  _o.powerOverNoise = this.powerOverNoise();
  _o.nominalPowerOverNoise = this.nominalPowerOverNoise();
  _o.bandwidth = this.bandwidth();
  _o.nominalBandwidth = this.nominalBandwidth();
  _o.resolutionBandwidth = this.resolutionBandwidth();
  _o.videoBandwidth = this.videoBandwidth();
  _o.eirp = this.eirp();
  _o.nominalEirp = this.nominalEirp();
  _o.minPsd = this.minPsd();
  _o.maxPsd = this.maxPsd();
  _o.frequencyShift = this.frequencyShift();
  _o.peak = this.peak();
  _o.antennaName = this.antennaName();
  _o.detectionStatus = this.detectionStatus();
  _o.collectionMode = this.collectionMode();
  _o.rawFileUri = this.rawFileUri();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.noisePwrDensity = this.noisePwrDensity();
  _o.carrierStandard = this.carrierStandard();
  _o.modulation = this.modulation();
  _o.innerCodingRate = this.innerCodingRate();
  _o.outerCodingRate = this.outerCodingRate();
  _o.transmitFilterType = this.transmitFilterType();
  _o.transmitFilterRollOff = this.transmitFilterRollOff();
  _o.symbolToNoiseRatio = this.symbolToNoiseRatio();
  _o.bitErrorRate = this.bitErrorRate();
  _o.origNetwork = this.origNetwork();
  _o.sourceDl = this.sourceDl();
  _o.descriptor = this.descriptor();
  _o.url = this.url();
}
}

export class RFObservation_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public obTime: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public satNo: number = 0,
  public taskId: string|Uint8Array|null = null,
  public transactionId: string|Uint8Array|null = null,
  public trackId: string|Uint8Array|null = null,
  public origObjectId: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public uct: boolean = false,
  public transponder: string|Uint8Array|null = null,
  public azimuth: number = 0.0,
  public azimuthUnc: number = 0.0,
  public azimuthRate: number = 0.0,
  public elevation: number = 0.0,
  public elevationUnc: number = 0.0,
  public elevationRate: number = 0.0,
  public range: number = 0.0,
  public rangeUnc: number = 0.0,
  public rangeRate: number = 0.0,
  public rangeRateUnc: number = 0.0,
  public trackRange: number = 0.0,
  public senlat: number = 0.0,
  public senlon: number = 0.0,
  public senalt: number = 0.0,
  public elnot: string|Uint8Array|null = null,
  public frequency: number = 0.0,
  public nominalFrequency: number = 0.0,
  public startFrequency: number = 0.0,
  public endFrequency: number = 0.0,
  public relativeCarrierPower: number = 0.0,
  public spectrumAnalyzerPower: number = 0.0,
  public relativeNoiseFloor: number = 0.0,
  public referenceLevel: number = 0.0,
  public pgri: number = 0.0,
  public confidence: number = 0.0,
  public incoming: boolean = false,
  public switchPoint: number = 0,
  public baudRate: number = 0.0,
  public snr: number = 0.0,
  public nominalSnr: number = 0.0,
  public polarity: number = 0.0,
  public polarityType: RFObservation_Abridged_polarityType_Enum = RFObservation_Abridged_polarityType_Enum.H,
  public channel: number = 0,
  public powerOverNoise: number = 0.0,
  public nominalPowerOverNoise: number = 0.0,
  public bandwidth: number = 0.0,
  public nominalBandwidth: number = 0.0,
  public resolutionBandwidth: number = 0.0,
  public videoBandwidth: number = 0.0,
  public eirp: number = 0.0,
  public nominalEirp: number = 0.0,
  public minPsd: number = 0.0,
  public maxPsd: number = 0.0,
  public frequencyShift: number = 0.0,
  public peak: boolean = false,
  public antennaName: string|Uint8Array|null = null,
  public detectionStatus: string|Uint8Array|null = null,
  public collectionMode: string|Uint8Array|null = null,
  public rawFileUri: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: RFObservation_Abridged_dataMode_Enum = RFObservation_Abridged_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public noisePwrDensity: number = 0.0,
  public carrierStandard: string|Uint8Array|null = null,
  public modulation: string|Uint8Array|null = null,
  public innerCodingRate: number = 0,
  public outerCodingRate: number = 0,
  public transmitFilterType: string|Uint8Array|null = null,
  public transmitFilterRollOff: number = 0.0,
  public symbolToNoiseRatio: number = 0.0,
  public bitErrorRate: number = 0.0,
  public origNetwork: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public descriptor: string|Uint8Array|null = null,
  public url: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const obTime = (this.obTime !== null ? builder.createString(this.obTime!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const taskId = (this.taskId !== null ? builder.createString(this.taskId!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const trackId = (this.trackId !== null ? builder.createString(this.trackId!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const transponder = (this.transponder !== null ? builder.createString(this.transponder!) : 0);
  const elnot = (this.elnot !== null ? builder.createString(this.elnot!) : 0);
  const antennaName = (this.antennaName !== null ? builder.createString(this.antennaName!) : 0);
  const detectionStatus = (this.detectionStatus !== null ? builder.createString(this.detectionStatus!) : 0);
  const collectionMode = (this.collectionMode !== null ? builder.createString(this.collectionMode!) : 0);
  const rawFileUri = (this.rawFileUri !== null ? builder.createString(this.rawFileUri!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const carrierStandard = (this.carrierStandard !== null ? builder.createString(this.carrierStandard!) : 0);
  const modulation = (this.modulation !== null ? builder.createString(this.modulation!) : 0);
  const transmitFilterType = (this.transmitFilterType !== null ? builder.createString(this.transmitFilterType!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const descriptor = (this.descriptor !== null ? builder.createString(this.descriptor!) : 0);
  const url = (this.url !== null ? builder.createString(this.url!) : 0);

  return RFObservation_Abridged.createRFObservation_Abridged(builder,
    id,
    classificationMarking,
    obTime,
    idOnOrbit,
    idSensor,
    type,
    this.satNo,
    taskId,
    transactionId,
    trackId,
    origObjectId,
    origSensorId,
    this.uct,
    transponder,
    this.azimuth,
    this.azimuthUnc,
    this.azimuthRate,
    this.elevation,
    this.elevationUnc,
    this.elevationRate,
    this.range,
    this.rangeUnc,
    this.rangeRate,
    this.rangeRateUnc,
    this.trackRange,
    this.senlat,
    this.senlon,
    this.senalt,
    elnot,
    this.frequency,
    this.nominalFrequency,
    this.startFrequency,
    this.endFrequency,
    this.relativeCarrierPower,
    this.spectrumAnalyzerPower,
    this.relativeNoiseFloor,
    this.referenceLevel,
    this.pgri,
    this.confidence,
    this.incoming,
    this.switchPoint,
    this.baudRate,
    this.snr,
    this.nominalSnr,
    this.polarity,
    this.polarityType,
    this.channel,
    this.powerOverNoise,
    this.nominalPowerOverNoise,
    this.bandwidth,
    this.nominalBandwidth,
    this.resolutionBandwidth,
    this.videoBandwidth,
    this.eirp,
    this.nominalEirp,
    this.minPsd,
    this.maxPsd,
    this.frequencyShift,
    this.peak,
    antennaName,
    detectionStatus,
    collectionMode,
    rawFileUri,
    source,
    origin,
    this.dataMode,
    createdAt,
    createdBy,
    this.noisePwrDensity,
    carrierStandard,
    modulation,
    this.innerCodingRate,
    this.outerCodingRate,
    transmitFilterType,
    this.transmitFilterRollOff,
    this.symbolToNoiseRatio,
    this.bitErrorRate,
    origNetwork,
    sourceDl,
    descriptor,
    url
  );
}
}
