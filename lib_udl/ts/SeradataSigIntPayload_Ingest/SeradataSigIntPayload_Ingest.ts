// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SeradataSigIntPayload_Ingest_dataMode_Enum } from './SeradataSigIntPayload_Ingest_dataMode_Enum.js';


/**
 * /// Details for an sigint payload from  Seradata.
 */
export class SeradataSigIntPayload_Ingest implements flatbuffers.IUnpackableObject<SeradataSigIntPayload_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SeradataSigIntPayload_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSeradataSigIntPayload_Ingest(bb:flatbuffers.ByteBuffer, obj?:SeradataSigIntPayload_Ingest):SeradataSigIntPayload_Ingest {
  return (obj || new SeradataSigIntPayload_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSeradataSigIntPayload_Ingest(bb:flatbuffers.ByteBuffer, obj?:SeradataSigIntPayload_Ingest):SeradataSigIntPayload_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SeradataSigIntPayload_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SERA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SERADATASIGINTPAYLOAD-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
 * Example: /// Example: spacecraftId
 * Constraints: Minimum length = 1, Maximum length = 36
 */
spacecraftId():string|null
spacecraftId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spacecraftId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID of the Sensor record.
 * Example: /// Example: 0c5ec9c0-10cd-1d35-c46b-3764c4d76e13
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Hosted for company/Organization Id.
 * Example: /// Example: hostedForCompanyOrgId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
hostedForCompanyOrgId():string|null
hostedForCompanyOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hostedForCompanyOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Manufacturer Organization Id.
 * Example: /// Example: manufacturerOrgId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SIGINT Payload type, e.g. Comint, Elint, etc.
 * Example: /// Example: Comint
 * Constraints: Minimum length = 0, Maximum length = 50
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Swath Width in kilometers.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
swathWidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Ground Station info for this payload.
 * Example: /// Example: groundStations
 * Constraints: Minimum length = 0, Maximum length = 128
 */
groundStations():string|null
groundStations(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groundStations(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ground Station Locations for this payload.
 * Example: /// Example: groundStationLocations
 * Constraints: Minimum length = 0, Maximum length = 64
 */
groundStationLocations():string|null
groundStationLocations(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groundStationLocations(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Frequency coverage for this payload.
 * Example: /// Example: 1.1 to 3.3
 * Constraints: Minimum length = 0, Maximum length = 50
 */
frequencyCoverage():string|null
frequencyCoverage(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
frequencyCoverage(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Positional Accuracy for this payload.
 * Example: /// Example: positionalAccuracy
 * Constraints: Minimum length = 0, Maximum length = 50
 */
positionalAccuracy():string|null
positionalAccuracy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
positionalAccuracy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Intercept parameters.
 * Example: /// Example: interceptParameters
 * Constraints: Minimum length = 0, Maximum length = 50
 */
interceptParameters():string|null
interceptParameters(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
interceptParameters(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sensor name from Seradata.
 * Example: /// Example: Sensor Name
 * Constraints: Minimum length = 0, Maximum length = 50
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Payload notes.
 * Example: /// Example: Sample Notes
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SeradataSigIntPayload_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SeradataSigIntPayload_Ingest_dataMode_Enum.REAL;
}

static startSeradataSigIntPayload_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addSpacecraftId(builder:flatbuffers.Builder, spacecraftIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, spacecraftIdOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idSensorOffset, 0);
}

static addHostedForCompanyOrgId(builder:flatbuffers.Builder, hostedForCompanyOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, hostedForCompanyOrgIdOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, manufacturerOrgIdOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, typeOffset, 0);
}

static addSwathWidth(builder:flatbuffers.Builder, swathWidth:number) {
  builder.addFieldFloat64(7, swathWidth, 0.0);
}

static addGroundStations(builder:flatbuffers.Builder, groundStationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, groundStationsOffset, 0);
}

static addGroundStationLocations(builder:flatbuffers.Builder, groundStationLocationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, groundStationLocationsOffset, 0);
}

static addFrequencyCoverage(builder:flatbuffers.Builder, frequencyCoverageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, frequencyCoverageOffset, 0);
}

static addPositionalAccuracy(builder:flatbuffers.Builder, positionalAccuracyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, positionalAccuracyOffset, 0);
}

static addInterceptParameters(builder:flatbuffers.Builder, interceptParametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, interceptParametersOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, nameOffset, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, notesOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SeradataSigIntPayload_Ingest_dataMode_Enum) {
  builder.addFieldInt8(20, dataMode, SeradataSigIntPayload_Ingest_dataMode_Enum.REAL);
}

static endSeradataSigIntPayload_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSeradataSigIntPayload_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SERA');
}

static finishSizePrefixedSeradataSigIntPayload_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SERA', true);
}

static createSeradataSigIntPayload_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, spacecraftIdOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, hostedForCompanyOrgIdOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, swathWidth:number, groundStationsOffset:flatbuffers.Offset, groundStationLocationsOffset:flatbuffers.Offset, frequencyCoverageOffset:flatbuffers.Offset, positionalAccuracyOffset:flatbuffers.Offset, interceptParametersOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:SeradataSigIntPayload_Ingest_dataMode_Enum):flatbuffers.Offset {
  SeradataSigIntPayload_Ingest.startSeradataSigIntPayload_Ingest(builder);
  SeradataSigIntPayload_Ingest.addId(builder, idOffset);
  SeradataSigIntPayload_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  SeradataSigIntPayload_Ingest.addSpacecraftId(builder, spacecraftIdOffset);
  SeradataSigIntPayload_Ingest.addIdSensor(builder, idSensorOffset);
  SeradataSigIntPayload_Ingest.addHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset);
  SeradataSigIntPayload_Ingest.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  SeradataSigIntPayload_Ingest.addType(builder, typeOffset);
  SeradataSigIntPayload_Ingest.addSwathWidth(builder, swathWidth);
  SeradataSigIntPayload_Ingest.addGroundStations(builder, groundStationsOffset);
  SeradataSigIntPayload_Ingest.addGroundStationLocations(builder, groundStationLocationsOffset);
  SeradataSigIntPayload_Ingest.addFrequencyCoverage(builder, frequencyCoverageOffset);
  SeradataSigIntPayload_Ingest.addPositionalAccuracy(builder, positionalAccuracyOffset);
  SeradataSigIntPayload_Ingest.addInterceptParameters(builder, interceptParametersOffset);
  SeradataSigIntPayload_Ingest.addName(builder, nameOffset);
  SeradataSigIntPayload_Ingest.addNotes(builder, notesOffset);
  SeradataSigIntPayload_Ingest.addCreatedAt(builder, createdAtOffset);
  SeradataSigIntPayload_Ingest.addCreatedBy(builder, createdByOffset);
  SeradataSigIntPayload_Ingest.addSource(builder, sourceOffset);
  SeradataSigIntPayload_Ingest.addOrigin(builder, originOffset);
  SeradataSigIntPayload_Ingest.addOrigNetwork(builder, origNetworkOffset);
  SeradataSigIntPayload_Ingest.addDataMode(builder, dataMode);
  return SeradataSigIntPayload_Ingest.endSeradataSigIntPayload_Ingest(builder);
}

unpack(): SeradataSigIntPayload_IngestT {
  return new SeradataSigIntPayload_IngestT(
    this.id(),
    this.classificationMarking(),
    this.spacecraftId(),
    this.idSensor(),
    this.hostedForCompanyOrgId(),
    this.manufacturerOrgId(),
    this.type(),
    this.swathWidth(),
    this.groundStations(),
    this.groundStationLocations(),
    this.frequencyCoverage(),
    this.positionalAccuracy(),
    this.interceptParameters(),
    this.name(),
    this.notes(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: SeradataSigIntPayload_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.spacecraftId = this.spacecraftId();
  _o.idSensor = this.idSensor();
  _o.hostedForCompanyOrgId = this.hostedForCompanyOrgId();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.type = this.type();
  _o.swathWidth = this.swathWidth();
  _o.groundStations = this.groundStations();
  _o.groundStationLocations = this.groundStationLocations();
  _o.frequencyCoverage = this.frequencyCoverage();
  _o.positionalAccuracy = this.positionalAccuracy();
  _o.interceptParameters = this.interceptParameters();
  _o.name = this.name();
  _o.notes = this.notes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class SeradataSigIntPayload_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public spacecraftId: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public hostedForCompanyOrgId: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public swathWidth: number = 0.0,
  public groundStations: string|Uint8Array|null = null,
  public groundStationLocations: string|Uint8Array|null = null,
  public frequencyCoverage: string|Uint8Array|null = null,
  public positionalAccuracy: string|Uint8Array|null = null,
  public interceptParameters: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public notes: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: SeradataSigIntPayload_Ingest_dataMode_Enum = SeradataSigIntPayload_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const spacecraftId = (this.spacecraftId !== null ? builder.createString(this.spacecraftId!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const hostedForCompanyOrgId = (this.hostedForCompanyOrgId !== null ? builder.createString(this.hostedForCompanyOrgId!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const groundStations = (this.groundStations !== null ? builder.createString(this.groundStations!) : 0);
  const groundStationLocations = (this.groundStationLocations !== null ? builder.createString(this.groundStationLocations!) : 0);
  const frequencyCoverage = (this.frequencyCoverage !== null ? builder.createString(this.frequencyCoverage!) : 0);
  const positionalAccuracy = (this.positionalAccuracy !== null ? builder.createString(this.positionalAccuracy!) : 0);
  const interceptParameters = (this.interceptParameters !== null ? builder.createString(this.interceptParameters!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return SeradataSigIntPayload_Ingest.createSeradataSigIntPayload_Ingest(builder,
    id,
    classificationMarking,
    spacecraftId,
    idSensor,
    hostedForCompanyOrgId,
    manufacturerOrgId,
    type,
    this.swathWidth,
    groundStations,
    groundStationLocations,
    frequencyCoverage,
    positionalAccuracy,
    interceptParameters,
    name,
    notes,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
