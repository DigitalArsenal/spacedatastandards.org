// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GNSSRawIF_Full_dataMode_Enum } from './GNSSRawIF_Full_dataMode_Enum.js';


/**
 * /// Global Navigation Satellite System (GNSS) Raw Intermediate Frequency (IF) data are the recorded streams of raw signal samples after down-conversion of the received signal to IF and prior to any processing onboard the receiving spacecraft.  These data sets are processed in various geophysical applications and used to characterize Electromagnetic Interference (EMI) in the operating environment.
 */
export class GNSSRawIF_Full implements flatbuffers.IUnpackableObject<GNSSRawIF_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GNSSRawIF_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGNSSRawIF_Full(bb:flatbuffers.ByteBuffer, obj?:GNSSRawIF_Full):GNSSRawIF_Full {
  return (obj || new GNSSRawIF_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGNSSRawIF_Full(bb:flatbuffers.ByteBuffer, obj?:GNSSRawIF_Full):GNSSRawIF_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GNSSRawIF_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('GNSS');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: GNSSRawIF-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the primary satellite on-orbit object.
 * Example: /// Example: 32375
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the target on-orbit object.
 * Example: /// Example: 32375
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
 * Example: /// Example: L2045
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.
 * Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
 * Constraints: Minimum length = 0, Maximum length = 36
 */
esId():string|null
esId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
esId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.
 * Example: /// Example: GPS1
 * Constraints: Minimum length = 0, Maximum length = 36
 */
receiver():string|null
receiver(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiver(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
 * Example: /// Example: [0, 1, 0]
 * Constraints: No constraints specified.
 */
boresight(index: number):string
boresight(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
boresight(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

boresightLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.
 * Example: /// Example: [0, -0.2734104, 0.1562345, 0.9491246]
 * Constraints: No constraints specified.
 */
quat(index: number):string
quat(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
quat(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

quatLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
startIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2022-04-09T18:11:28.919768Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2022-04-09T18:12:28.919768Z
 * Constraints: No constraints specified.
 */
endTime():string|null
endTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 38.834
 * Constraints: No constraints specified.
 */
startLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: -104.821
 * Constraints: No constraints specified.
 */
startLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.
 * Example: /// Example: 525.664
 * Constraints: No constraints specified.
 */
startAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 38.922
 * Constraints: No constraints specified.
 */
endLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: -104.67
 * Constraints: No constraints specified.
 */
endLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.
 * Example: /// Example: 525.626
 * Constraints: No constraints specified.
 */
endAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).
 * Example: /// Example: [1227.6, 1575.4]
 * Constraints: No constraints specified.
 */
centerFreq(index: number):string
centerFreq(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
centerFreq(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

centerFreqLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.
 * Example: /// Example: [4.09, 5.87]
 * Constraints: No constraints specified.
 */
ifFreq(index: number):string
ifFreq(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ifFreq(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

ifFreqLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The number of samples taken per second.
 * Example: /// Example: [8000, 9000]
 * Constraints: No constraints specified.
 */
sampleRate(index: number):string
sampleRate(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
sampleRate(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

sampleRateLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.
 * Example: /// Example: ['NONE', 'NONE']
 * Constraints: No constraints specified.
 */
postFourier(index: number):string
postFourier(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
postFourier(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

postFourierLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.
 * Example: /// Example: COMPLEX
 * Constraints: Minimum length = 0, Maximum length = 10
 */
sampleType():string|null
sampleType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sampleType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.
 * Example: /// Example: 8
 * Constraints: No constraints specified.
 */
bitDepth():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).
 * Example: /// Example: [0.0271, 0.0016]
 * Constraints: No constraints specified.
 */
diffCodeBias(index: number):string
diffCodeBias(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
diffCodeBias(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

diffCodeBiasLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The amount of data generated per unit time, expressed in Megabytes/minute.
 * Example: /// Example: 0.205
 * Constraints: No constraints specified.
 */
dataRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.
 * Example: /// Example: 2b0b1b1a-a3c0-4267-894a-0c40cb84a5af
 * Constraints: No constraints specified.
 */
setId():string|null
setId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
setId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of raw IF records/files in a set.
 * Example: /// Example: 7
 * Constraints: No constraints specified.
 */
setLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
sequenceId():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).
 * Example: /// Example: somefile.hdf5
 * Constraints: Minimum length = 0, Maximum length = 128
 */
fileName():string|null
fileName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fileName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
 * Example: /// Example: ['GNSSSET']
 * Constraints: No constraints specified.
 */
srcTyps(index: number):string
srcTyps(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcTyps(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcTypsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).
 * Example: /// Example: ['GNSSSET_ID']
 * Constraints: No constraints specified.
 */
srcIds(index: number):string
srcIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.
 * Example: /// Example: 3168895
 * Constraints: No constraints specified.
 */
fileSize():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['TAG1', 'TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():GNSSRawIF_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : GNSSRawIF_Full_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startGNSSRawIF_Full(builder:flatbuffers.Builder) {
  builder.startObject(40);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(3, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, origObjectIdOffset, 0);
}

static addEsId(builder:flatbuffers.Builder, esIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, esIdOffset, 0);
}

static addReceiver(builder:flatbuffers.Builder, receiverOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, receiverOffset, 0);
}

static addBoresight(builder:flatbuffers.Builder, boresightOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, boresightOffset, 0);
}

static createBoresightVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBoresightVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addQuat(builder:flatbuffers.Builder, quatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, quatOffset, 0);
}

static createQuatVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startQuatVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStartIndex(builder:flatbuffers.Builder, startIndex:number) {
  builder.addFieldInt32(9, startIndex, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, startTimeOffset, 0);
}

static addEndTime(builder:flatbuffers.Builder, endTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, endTimeOffset, 0);
}

static addStartLat(builder:flatbuffers.Builder, startLat:number) {
  builder.addFieldFloat64(12, startLat, 0.0);
}

static addStartLon(builder:flatbuffers.Builder, startLon:number) {
  builder.addFieldFloat64(13, startLon, 0.0);
}

static addStartAlt(builder:flatbuffers.Builder, startAlt:number) {
  builder.addFieldFloat64(14, startAlt, 0.0);
}

static addEndLat(builder:flatbuffers.Builder, endLat:number) {
  builder.addFieldFloat64(15, endLat, 0.0);
}

static addEndLon(builder:flatbuffers.Builder, endLon:number) {
  builder.addFieldFloat64(16, endLon, 0.0);
}

static addEndAlt(builder:flatbuffers.Builder, endAlt:number) {
  builder.addFieldFloat64(17, endAlt, 0.0);
}

static addCenterFreq(builder:flatbuffers.Builder, centerFreqOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, centerFreqOffset, 0);
}

static createCenterFreqVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCenterFreqVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIfFreq(builder:flatbuffers.Builder, ifFreqOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, ifFreqOffset, 0);
}

static createIfFreqVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startIfFreqVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSampleRate(builder:flatbuffers.Builder, sampleRateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, sampleRateOffset, 0);
}

static createSampleRateVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSampleRateVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPostFourier(builder:flatbuffers.Builder, postFourierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, postFourierOffset, 0);
}

static createPostFourierVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPostFourierVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSampleType(builder:flatbuffers.Builder, sampleTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, sampleTypeOffset, 0);
}

static addBitDepth(builder:flatbuffers.Builder, bitDepth:number) {
  builder.addFieldInt32(23, bitDepth, 0);
}

static addDiffCodeBias(builder:flatbuffers.Builder, diffCodeBiasOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, diffCodeBiasOffset, 0);
}

static createDiffCodeBiasVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDiffCodeBiasVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDataRate(builder:flatbuffers.Builder, dataRate:number) {
  builder.addFieldFloat64(25, dataRate, 0.0);
}

static addSetId(builder:flatbuffers.Builder, setIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, setIdOffset, 0);
}

static addSetLength(builder:flatbuffers.Builder, setLength:number) {
  builder.addFieldInt32(27, setLength, 0);
}

static addSequenceId(builder:flatbuffers.Builder, sequenceId:number) {
  builder.addFieldInt32(28, sequenceId, 0);
}

static addFileName(builder:flatbuffers.Builder, fileNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, fileNameOffset, 0);
}

static addSrcTyps(builder:flatbuffers.Builder, srcTypsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, srcTypsOffset, 0);
}

static createSrcTypsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcTypsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSrcIds(builder:flatbuffers.Builder, srcIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, srcIdsOffset, 0);
}

static createSrcIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFileSize(builder:flatbuffers.Builder, fileSize:bigint) {
  builder.addFieldInt64(32, fileSize, BigInt('0'));
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:GNSSRawIF_Full_dataMode_Enum) {
  builder.addFieldInt8(38, dataMode, GNSSRawIF_Full_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, origNetworkOffset, 0);
}

static endGNSSRawIF_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishGNSSRawIF_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'GNSS');
}

static finishSizePrefixedGNSSRawIF_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'GNSS', true);
}

static createGNSSRawIF_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, esIdOffset:flatbuffers.Offset, receiverOffset:flatbuffers.Offset, boresightOffset:flatbuffers.Offset, quatOffset:flatbuffers.Offset, startIndex:number, startTimeOffset:flatbuffers.Offset, endTimeOffset:flatbuffers.Offset, startLat:number, startLon:number, startAlt:number, endLat:number, endLon:number, endAlt:number, centerFreqOffset:flatbuffers.Offset, ifFreqOffset:flatbuffers.Offset, sampleRateOffset:flatbuffers.Offset, postFourierOffset:flatbuffers.Offset, sampleTypeOffset:flatbuffers.Offset, bitDepth:number, diffCodeBiasOffset:flatbuffers.Offset, dataRate:number, setIdOffset:flatbuffers.Offset, setLength:number, sequenceId:number, fileNameOffset:flatbuffers.Offset, srcTypsOffset:flatbuffers.Offset, srcIdsOffset:flatbuffers.Offset, fileSize:bigint, tagsOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:GNSSRawIF_Full_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  GNSSRawIF_Full.startGNSSRawIF_Full(builder);
  GNSSRawIF_Full.addId(builder, idOffset);
  GNSSRawIF_Full.addClassificationMarking(builder, classificationMarkingOffset);
  GNSSRawIF_Full.addIdOnOrbit(builder, idOnOrbitOffset);
  GNSSRawIF_Full.addSatNo(builder, satNo);
  GNSSRawIF_Full.addOrigObjectId(builder, origObjectIdOffset);
  GNSSRawIF_Full.addEsId(builder, esIdOffset);
  GNSSRawIF_Full.addReceiver(builder, receiverOffset);
  GNSSRawIF_Full.addBoresight(builder, boresightOffset);
  GNSSRawIF_Full.addQuat(builder, quatOffset);
  GNSSRawIF_Full.addStartIndex(builder, startIndex);
  GNSSRawIF_Full.addStartTime(builder, startTimeOffset);
  GNSSRawIF_Full.addEndTime(builder, endTimeOffset);
  GNSSRawIF_Full.addStartLat(builder, startLat);
  GNSSRawIF_Full.addStartLon(builder, startLon);
  GNSSRawIF_Full.addStartAlt(builder, startAlt);
  GNSSRawIF_Full.addEndLat(builder, endLat);
  GNSSRawIF_Full.addEndLon(builder, endLon);
  GNSSRawIF_Full.addEndAlt(builder, endAlt);
  GNSSRawIF_Full.addCenterFreq(builder, centerFreqOffset);
  GNSSRawIF_Full.addIfFreq(builder, ifFreqOffset);
  GNSSRawIF_Full.addSampleRate(builder, sampleRateOffset);
  GNSSRawIF_Full.addPostFourier(builder, postFourierOffset);
  GNSSRawIF_Full.addSampleType(builder, sampleTypeOffset);
  GNSSRawIF_Full.addBitDepth(builder, bitDepth);
  GNSSRawIF_Full.addDiffCodeBias(builder, diffCodeBiasOffset);
  GNSSRawIF_Full.addDataRate(builder, dataRate);
  GNSSRawIF_Full.addSetId(builder, setIdOffset);
  GNSSRawIF_Full.addSetLength(builder, setLength);
  GNSSRawIF_Full.addSequenceId(builder, sequenceId);
  GNSSRawIF_Full.addFileName(builder, fileNameOffset);
  GNSSRawIF_Full.addSrcTyps(builder, srcTypsOffset);
  GNSSRawIF_Full.addSrcIds(builder, srcIdsOffset);
  GNSSRawIF_Full.addFileSize(builder, fileSize);
  GNSSRawIF_Full.addTags(builder, tagsOffset);
  GNSSRawIF_Full.addCreatedAt(builder, createdAtOffset);
  GNSSRawIF_Full.addCreatedBy(builder, createdByOffset);
  GNSSRawIF_Full.addSource(builder, sourceOffset);
  GNSSRawIF_Full.addOrigin(builder, originOffset);
  GNSSRawIF_Full.addDataMode(builder, dataMode);
  GNSSRawIF_Full.addOrigNetwork(builder, origNetworkOffset);
  return GNSSRawIF_Full.endGNSSRawIF_Full(builder);
}

unpack(): GNSSRawIF_FullT {
  return new GNSSRawIF_FullT(
    this.id(),
    this.classificationMarking(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.esId(),
    this.receiver(),
    this.bb!.createScalarList<string>(this.boresight.bind(this), this.boresightLength()),
    this.bb!.createScalarList<string>(this.quat.bind(this), this.quatLength()),
    this.startIndex(),
    this.startTime(),
    this.endTime(),
    this.startLat(),
    this.startLon(),
    this.startAlt(),
    this.endLat(),
    this.endLon(),
    this.endAlt(),
    this.bb!.createScalarList<string>(this.centerFreq.bind(this), this.centerFreqLength()),
    this.bb!.createScalarList<string>(this.ifFreq.bind(this), this.ifFreqLength()),
    this.bb!.createScalarList<string>(this.sampleRate.bind(this), this.sampleRateLength()),
    this.bb!.createScalarList<string>(this.postFourier.bind(this), this.postFourierLength()),
    this.sampleType(),
    this.bitDepth(),
    this.bb!.createScalarList<string>(this.diffCodeBias.bind(this), this.diffCodeBiasLength()),
    this.dataRate(),
    this.setId(),
    this.setLength(),
    this.sequenceId(),
    this.fileName(),
    this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTypsLength()),
    this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIdsLength()),
    this.fileSize(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength()),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: GNSSRawIF_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.esId = this.esId();
  _o.receiver = this.receiver();
  _o.boresight = this.bb!.createScalarList<string>(this.boresight.bind(this), this.boresightLength());
  _o.quat = this.bb!.createScalarList<string>(this.quat.bind(this), this.quatLength());
  _o.startIndex = this.startIndex();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.startLat = this.startLat();
  _o.startLon = this.startLon();
  _o.startAlt = this.startAlt();
  _o.endLat = this.endLat();
  _o.endLon = this.endLon();
  _o.endAlt = this.endAlt();
  _o.centerFreq = this.bb!.createScalarList<string>(this.centerFreq.bind(this), this.centerFreqLength());
  _o.ifFreq = this.bb!.createScalarList<string>(this.ifFreq.bind(this), this.ifFreqLength());
  _o.sampleRate = this.bb!.createScalarList<string>(this.sampleRate.bind(this), this.sampleRateLength());
  _o.postFourier = this.bb!.createScalarList<string>(this.postFourier.bind(this), this.postFourierLength());
  _o.sampleType = this.sampleType();
  _o.bitDepth = this.bitDepth();
  _o.diffCodeBias = this.bb!.createScalarList<string>(this.diffCodeBias.bind(this), this.diffCodeBiasLength());
  _o.dataRate = this.dataRate();
  _o.setId = this.setId();
  _o.setLength = this.setLength();
  _o.sequenceId = this.sequenceId();
  _o.fileName = this.fileName();
  _o.srcTyps = this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTypsLength());
  _o.srcIds = this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIdsLength());
  _o.fileSize = this.fileSize();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class GNSSRawIF_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public esId: string|Uint8Array|null = null,
  public receiver: string|Uint8Array|null = null,
  public boresight: (string)[] = [],
  public quat: (string)[] = [],
  public startIndex: number = 0,
  public startTime: string|Uint8Array|null = null,
  public endTime: string|Uint8Array|null = null,
  public startLat: number = 0.0,
  public startLon: number = 0.0,
  public startAlt: number = 0.0,
  public endLat: number = 0.0,
  public endLon: number = 0.0,
  public endAlt: number = 0.0,
  public centerFreq: (string)[] = [],
  public ifFreq: (string)[] = [],
  public sampleRate: (string)[] = [],
  public postFourier: (string)[] = [],
  public sampleType: string|Uint8Array|null = null,
  public bitDepth: number = 0,
  public diffCodeBias: (string)[] = [],
  public dataRate: number = 0.0,
  public setId: string|Uint8Array|null = null,
  public setLength: number = 0,
  public sequenceId: number = 0,
  public fileName: string|Uint8Array|null = null,
  public srcTyps: (string)[] = [],
  public srcIds: (string)[] = [],
  public fileSize: bigint = BigInt('0'),
  public tags: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: GNSSRawIF_Full_dataMode_Enum = GNSSRawIF_Full_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const esId = (this.esId !== null ? builder.createString(this.esId!) : 0);
  const receiver = (this.receiver !== null ? builder.createString(this.receiver!) : 0);
  const boresight = GNSSRawIF_Full.createBoresightVector(builder, builder.createObjectOffsetList(this.boresight));
  const quat = GNSSRawIF_Full.createQuatVector(builder, builder.createObjectOffsetList(this.quat));
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const endTime = (this.endTime !== null ? builder.createString(this.endTime!) : 0);
  const centerFreq = GNSSRawIF_Full.createCenterFreqVector(builder, builder.createObjectOffsetList(this.centerFreq));
  const ifFreq = GNSSRawIF_Full.createIfFreqVector(builder, builder.createObjectOffsetList(this.ifFreq));
  const sampleRate = GNSSRawIF_Full.createSampleRateVector(builder, builder.createObjectOffsetList(this.sampleRate));
  const postFourier = GNSSRawIF_Full.createPostFourierVector(builder, builder.createObjectOffsetList(this.postFourier));
  const sampleType = (this.sampleType !== null ? builder.createString(this.sampleType!) : 0);
  const diffCodeBias = GNSSRawIF_Full.createDiffCodeBiasVector(builder, builder.createObjectOffsetList(this.diffCodeBias));
  const setId = (this.setId !== null ? builder.createString(this.setId!) : 0);
  const fileName = (this.fileName !== null ? builder.createString(this.fileName!) : 0);
  const srcTyps = GNSSRawIF_Full.createSrcTypsVector(builder, builder.createObjectOffsetList(this.srcTyps));
  const srcIds = GNSSRawIF_Full.createSrcIdsVector(builder, builder.createObjectOffsetList(this.srcIds));
  const tags = GNSSRawIF_Full.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return GNSSRawIF_Full.createGNSSRawIF_Full(builder,
    id,
    classificationMarking,
    idOnOrbit,
    this.satNo,
    origObjectId,
    esId,
    receiver,
    boresight,
    quat,
    this.startIndex,
    startTime,
    endTime,
    this.startLat,
    this.startLon,
    this.startAlt,
    this.endLat,
    this.endLon,
    this.endAlt,
    centerFreq,
    ifFreq,
    sampleRate,
    postFourier,
    sampleType,
    this.bitDepth,
    diffCodeBias,
    this.dataRate,
    setId,
    this.setLength,
    this.sequenceId,
    fileName,
    srcTyps,
    srcIds,
    this.fileSize,
    tags,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
