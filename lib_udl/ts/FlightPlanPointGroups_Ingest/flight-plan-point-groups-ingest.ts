// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
 */
export class FlightPlanPointGroups_Ingest implements flatbuffers.IUnpackableObject<FlightPlanPointGroups_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlightPlanPointGroups_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlightPlanPointGroups_Ingest(bb:flatbuffers.ByteBuffer, obj?:FlightPlanPointGroups_Ingest):FlightPlanPointGroups_Ingest {
  return (obj || new FlightPlanPointGroups_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlightPlanPointGroups_Ingest(bb:flatbuffers.ByteBuffer, obj?:FlightPlanPointGroups_Ingest):FlightPlanPointGroups_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlightPlanPointGroups_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('FLIG');
}

/**
 * Name of the point group, usually Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP) sections.
 * Example: /// Example: ETOPS_CF_POINT_1
 * Constraints: Minimum length = 0, Maximum length = 36
 */
pointGroupName():string|null
pointGroupName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pointGroupName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies which Point Group case requires the most fuel.
 * Example: /// Example: DEPRESSURIZED ENGINE OUT ETP
 * Constraints: Minimum length = 0, Maximum length = 48
 */
worstFuelCase():string|null
worstFuelCase(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
worstFuelCase(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the last suitable airfield, International Civil Aviation Organization (ICAO) code preferred.
 * Example: /// Example: LPPD
 * Constraints: Minimum length = 0, Maximum length = 5
 */
lsafName():string|null
lsafName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lsafName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Distance from the Equal Time Point (ETP) to the last suitable airfield in nautical miles.
 * Example: /// Example: 684.1
 * Constraints: No constraints specified.
 */
lsafDistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Distance from the Equal Time Point (ETP) to the first suitable airfield in nautical miles.
 * Example: /// Example: 684.1
 * Constraints: No constraints specified.
 */
fsafDistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Distance from the Extended Operations (ETOPS) point to the recovery airfield in nautical miles.
 * Example: /// Example: 684.1
 * Constraints: No constraints specified.
 */
etopsDistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time to fly from the Equal Time Point (ETP) to the last suitable airfield expressed in HH:MM format.
 * Example: /// Example: 01:23
 * Constraints: Minimum length = 0, Maximum length = 6
 */
lsafTime():string|null
lsafTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lsafTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time to fly from the Equal Time Point (ETP) to the first suitable airfield expressed in HH:MM format.
 * Example: /// Example: 01:23
 * Constraints: Minimum length = 0, Maximum length = 6
 */
fsafTime():string|null
fsafTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fsafTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time to fly from the Extended Operations (ETOPS) point to the recovery airfield expressed in HH:MM format.
 * Example: /// Example: 01:23
 * Constraints: Minimum length = 0, Maximum length = 6
 */
etopsTime():string|null
etopsTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
etopsTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Average wind factor from the Equal Time Point (ETP) to the last suitable airfield in knots.
 * Example: /// Example: 13.1
 * Constraints: No constraints specified.
 */
lsafAvgWindFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average wind factor from the Equal Time Point (ETP) to the first suitable airfield in knots.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
fsafAvgWindFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average wind factor from the Extended Operations (ETOPS) point to the recovery airfield in knots.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
etopsAvgWindFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Temperature deviation from the Equal Time Point (ETP) to the last suitable airfield in degrees Celsius.
 * Example: /// Example: 9.1
 * Constraints: No constraints specified.
 */
lsafTempDev():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Temperature deviation from the Equal Time Point (ETP) to the first suitable airfield in degrees Celsius.
 * Example: /// Example: 9.1
 * Constraints: No constraints specified.
 */
fsafTempDev():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Temperature deviation from the Extended Operations (ETOPS) point to the recovery airfield in degrees Celsius.
 * Example: /// Example: 9.1
 * Constraints: No constraints specified.
 */
etopsTempDev():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel required to fly from the Equal Time Point (ETP) to the last suitable airfield in pounds.
 * Example: /// Example: 50787.1
 * Constraints: No constraints specified.
 */
lsafReqFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel required to fly from the Equal Time Point (ETP) to the first suitable airfield in pounds.
 * Example: /// Example: 50380.1
 * Constraints: No constraints specified.
 */
fsafReqFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel required to fly from the Extended Operations (ETOPS) point to the recovery airfield in pounds.
 * Example: /// Example: 4412.1
 * Constraints: No constraints specified.
 */
etopsReqFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total time from takeoff when the point is reached expressed in HH:MM format.
 * Example: /// Example: 07:29
 * Constraints: Minimum length = 0, Maximum length = 6
 */
fromTakeoffTime():string|null
fromTakeoffTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fromTakeoffTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Amount of planned fuel on board when the point is reached in pounds.
 * Example: /// Example: 190319.1
 * Constraints: No constraints specified.
 */
plannedFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flight level of the point at which the fuel was calculated in feet.
 * Example: /// Example: 100.1
 * Constraints: No constraints specified.
 */
fuelCalcAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * True airspeed at which the fuel was calculated in knots.
 * Example: /// Example: 365.1
 * Constraints: No constraints specified.
 */
fuelCalcSpd():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average fuel flow at which the fuel was calculated in pounds per hour.
 * Example: /// Example: 19693.1
 * Constraints: No constraints specified.
 */
avgFuelFlow():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Array of point data for this Point Group.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
flightPlanPoints(index: number):string
flightPlanPoints(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
flightPlanPoints(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

flightPlanPointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFlightPlanPointGroups_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(24);
}

static addPointGroupName(builder:flatbuffers.Builder, pointGroupNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pointGroupNameOffset, 0);
}

static addWorstFuelCase(builder:flatbuffers.Builder, worstFuelCaseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, worstFuelCaseOffset, 0);
}

static addLsafName(builder:flatbuffers.Builder, lsafNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, lsafNameOffset, 0);
}

static addLsafDistance(builder:flatbuffers.Builder, lsafDistance:number) {
  builder.addFieldFloat64(3, lsafDistance, 0.0);
}

static addFsafDistance(builder:flatbuffers.Builder, fsafDistance:number) {
  builder.addFieldFloat64(4, fsafDistance, 0.0);
}

static addEtopsDistance(builder:flatbuffers.Builder, etopsDistance:number) {
  builder.addFieldFloat64(5, etopsDistance, 0.0);
}

static addLsafTime(builder:flatbuffers.Builder, lsafTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, lsafTimeOffset, 0);
}

static addFsafTime(builder:flatbuffers.Builder, fsafTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, fsafTimeOffset, 0);
}

static addEtopsTime(builder:flatbuffers.Builder, etopsTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, etopsTimeOffset, 0);
}

static addLsafAvgWindFactor(builder:flatbuffers.Builder, lsafAvgWindFactor:number) {
  builder.addFieldFloat64(9, lsafAvgWindFactor, 0.0);
}

static addFsafAvgWindFactor(builder:flatbuffers.Builder, fsafAvgWindFactor:number) {
  builder.addFieldFloat64(10, fsafAvgWindFactor, 0.0);
}

static addEtopsAvgWindFactor(builder:flatbuffers.Builder, etopsAvgWindFactor:number) {
  builder.addFieldFloat64(11, etopsAvgWindFactor, 0.0);
}

static addLsafTempDev(builder:flatbuffers.Builder, lsafTempDev:number) {
  builder.addFieldFloat64(12, lsafTempDev, 0.0);
}

static addFsafTempDev(builder:flatbuffers.Builder, fsafTempDev:number) {
  builder.addFieldFloat64(13, fsafTempDev, 0.0);
}

static addEtopsTempDev(builder:flatbuffers.Builder, etopsTempDev:number) {
  builder.addFieldFloat64(14, etopsTempDev, 0.0);
}

static addLsafReqFuel(builder:flatbuffers.Builder, lsafReqFuel:number) {
  builder.addFieldFloat64(15, lsafReqFuel, 0.0);
}

static addFsafReqFuel(builder:flatbuffers.Builder, fsafReqFuel:number) {
  builder.addFieldFloat64(16, fsafReqFuel, 0.0);
}

static addEtopsReqFuel(builder:flatbuffers.Builder, etopsReqFuel:number) {
  builder.addFieldFloat64(17, etopsReqFuel, 0.0);
}

static addFromTakeoffTime(builder:flatbuffers.Builder, fromTakeoffTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, fromTakeoffTimeOffset, 0);
}

static addPlannedFuel(builder:flatbuffers.Builder, plannedFuel:number) {
  builder.addFieldFloat64(19, plannedFuel, 0.0);
}

static addFuelCalcAlt(builder:flatbuffers.Builder, fuelCalcAlt:number) {
  builder.addFieldFloat64(20, fuelCalcAlt, 0.0);
}

static addFuelCalcSpd(builder:flatbuffers.Builder, fuelCalcSpd:number) {
  builder.addFieldFloat64(21, fuelCalcSpd, 0.0);
}

static addAvgFuelFlow(builder:flatbuffers.Builder, avgFuelFlow:number) {
  builder.addFieldFloat64(22, avgFuelFlow, 0.0);
}

static addFlightPlanPoints(builder:flatbuffers.Builder, flightPlanPointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, flightPlanPointsOffset, 0);
}

static createFlightPlanPointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFlightPlanPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFlightPlanPointGroups_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFlightPlanPointGroups_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'FLIG');
}

static finishSizePrefixedFlightPlanPointGroups_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'FLIG', true);
}

static createFlightPlanPointGroups_Ingest(builder:flatbuffers.Builder, pointGroupNameOffset:flatbuffers.Offset, worstFuelCaseOffset:flatbuffers.Offset, lsafNameOffset:flatbuffers.Offset, lsafDistance:number, fsafDistance:number, etopsDistance:number, lsafTimeOffset:flatbuffers.Offset, fsafTimeOffset:flatbuffers.Offset, etopsTimeOffset:flatbuffers.Offset, lsafAvgWindFactor:number, fsafAvgWindFactor:number, etopsAvgWindFactor:number, lsafTempDev:number, fsafTempDev:number, etopsTempDev:number, lsafReqFuel:number, fsafReqFuel:number, etopsReqFuel:number, fromTakeoffTimeOffset:flatbuffers.Offset, plannedFuel:number, fuelCalcAlt:number, fuelCalcSpd:number, avgFuelFlow:number, flightPlanPointsOffset:flatbuffers.Offset):flatbuffers.Offset {
  FlightPlanPointGroups_Ingest.startFlightPlanPointGroups_Ingest(builder);
  FlightPlanPointGroups_Ingest.addPointGroupName(builder, pointGroupNameOffset);
  FlightPlanPointGroups_Ingest.addWorstFuelCase(builder, worstFuelCaseOffset);
  FlightPlanPointGroups_Ingest.addLsafName(builder, lsafNameOffset);
  FlightPlanPointGroups_Ingest.addLsafDistance(builder, lsafDistance);
  FlightPlanPointGroups_Ingest.addFsafDistance(builder, fsafDistance);
  FlightPlanPointGroups_Ingest.addEtopsDistance(builder, etopsDistance);
  FlightPlanPointGroups_Ingest.addLsafTime(builder, lsafTimeOffset);
  FlightPlanPointGroups_Ingest.addFsafTime(builder, fsafTimeOffset);
  FlightPlanPointGroups_Ingest.addEtopsTime(builder, etopsTimeOffset);
  FlightPlanPointGroups_Ingest.addLsafAvgWindFactor(builder, lsafAvgWindFactor);
  FlightPlanPointGroups_Ingest.addFsafAvgWindFactor(builder, fsafAvgWindFactor);
  FlightPlanPointGroups_Ingest.addEtopsAvgWindFactor(builder, etopsAvgWindFactor);
  FlightPlanPointGroups_Ingest.addLsafTempDev(builder, lsafTempDev);
  FlightPlanPointGroups_Ingest.addFsafTempDev(builder, fsafTempDev);
  FlightPlanPointGroups_Ingest.addEtopsTempDev(builder, etopsTempDev);
  FlightPlanPointGroups_Ingest.addLsafReqFuel(builder, lsafReqFuel);
  FlightPlanPointGroups_Ingest.addFsafReqFuel(builder, fsafReqFuel);
  FlightPlanPointGroups_Ingest.addEtopsReqFuel(builder, etopsReqFuel);
  FlightPlanPointGroups_Ingest.addFromTakeoffTime(builder, fromTakeoffTimeOffset);
  FlightPlanPointGroups_Ingest.addPlannedFuel(builder, plannedFuel);
  FlightPlanPointGroups_Ingest.addFuelCalcAlt(builder, fuelCalcAlt);
  FlightPlanPointGroups_Ingest.addFuelCalcSpd(builder, fuelCalcSpd);
  FlightPlanPointGroups_Ingest.addAvgFuelFlow(builder, avgFuelFlow);
  FlightPlanPointGroups_Ingest.addFlightPlanPoints(builder, flightPlanPointsOffset);
  return FlightPlanPointGroups_Ingest.endFlightPlanPointGroups_Ingest(builder);
}

unpack(): FlightPlanPointGroups_IngestT {
  return new FlightPlanPointGroups_IngestT(
    this.pointGroupName(),
    this.worstFuelCase(),
    this.lsafName(),
    this.lsafDistance(),
    this.fsafDistance(),
    this.etopsDistance(),
    this.lsafTime(),
    this.fsafTime(),
    this.etopsTime(),
    this.lsafAvgWindFactor(),
    this.fsafAvgWindFactor(),
    this.etopsAvgWindFactor(),
    this.lsafTempDev(),
    this.fsafTempDev(),
    this.etopsTempDev(),
    this.lsafReqFuel(),
    this.fsafReqFuel(),
    this.etopsReqFuel(),
    this.fromTakeoffTime(),
    this.plannedFuel(),
    this.fuelCalcAlt(),
    this.fuelCalcSpd(),
    this.avgFuelFlow(),
    this.bb!.createScalarList<string>(this.flightPlanPoints.bind(this), this.flightPlanPoints_Length())
  );
}


unpackTo(_o: FlightPlanPointGroups_IngestT): void {
  _o.pointGroupName = this.pointGroupName();
  _o.worstFuelCase = this.worstFuelCase();
  _o.lsafName = this.lsafName();
  _o.lsafDistance = this.lsafDistance();
  _o.fsafDistance = this.fsafDistance();
  _o.etopsDistance = this.etopsDistance();
  _o.lsafTime = this.lsafTime();
  _o.fsafTime = this.fsafTime();
  _o.etopsTime = this.etopsTime();
  _o.lsafAvgWindFactor = this.lsafAvgWindFactor();
  _o.fsafAvgWindFactor = this.fsafAvgWindFactor();
  _o.etopsAvgWindFactor = this.etopsAvgWindFactor();
  _o.lsafTempDev = this.lsafTempDev();
  _o.fsafTempDev = this.fsafTempDev();
  _o.etopsTempDev = this.etopsTempDev();
  _o.lsafReqFuel = this.lsafReqFuel();
  _o.fsafReqFuel = this.fsafReqFuel();
  _o.etopsReqFuel = this.etopsReqFuel();
  _o.fromTakeoffTime = this.fromTakeoffTime();
  _o.plannedFuel = this.plannedFuel();
  _o.fuelCalcAlt = this.fuelCalcAlt();
  _o.fuelCalcSpd = this.fuelCalcSpd();
  _o.avgFuelFlow = this.avgFuelFlow();
  _o.flightPlanPoints = this.bb!.createScalarList<string>(this.flightPlanPoints.bind(this), this.flightPlanPoints_Length());
}
}

export class FlightPlanPointGroups_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public pointGroupName: string|Uint8Array|null = null,
  public worstFuelCase: string|Uint8Array|null = null,
  public lsafName: string|Uint8Array|null = null,
  public lsafDistance: number = 0.0,
  public fsafDistance: number = 0.0,
  public etopsDistance: number = 0.0,
  public lsafTime: string|Uint8Array|null = null,
  public fsafTime: string|Uint8Array|null = null,
  public etopsTime: string|Uint8Array|null = null,
  public lsafAvgWindFactor: number = 0.0,
  public fsafAvgWindFactor: number = 0.0,
  public etopsAvgWindFactor: number = 0.0,
  public lsafTempDev: number = 0.0,
  public fsafTempDev: number = 0.0,
  public etopsTempDev: number = 0.0,
  public lsafReqFuel: number = 0.0,
  public fsafReqFuel: number = 0.0,
  public etopsReqFuel: number = 0.0,
  public fromTakeoffTime: string|Uint8Array|null = null,
  public plannedFuel: number = 0.0,
  public fuelCalcAlt: number = 0.0,
  public fuelCalcSpd: number = 0.0,
  public avgFuelFlow: number = 0.0,
  public flightPlanPoints: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const pointGroupName = (this.pointGroupName !== null ? builder.createString(this.pointGroupName!) : 0);
  const worstFuelCase = (this.worstFuelCase !== null ? builder.createString(this.worstFuelCase!) : 0);
  const lsafName = (this.lsafName !== null ? builder.createString(this.lsafName!) : 0);
  const lsafTime = (this.lsafTime !== null ? builder.createString(this.lsafTime!) : 0);
  const fsafTime = (this.fsafTime !== null ? builder.createString(this.fsafTime!) : 0);
  const etopsTime = (this.etopsTime !== null ? builder.createString(this.etopsTime!) : 0);
  const fromTakeoffTime = (this.fromTakeoffTime !== null ? builder.createString(this.fromTakeoffTime!) : 0);
  const flightPlanPoints = FlightPlanPointGroups_Ingest.createFlightPlanPointsVector(builder, builder.createObjectOffsetList(this.flightPlanPoints));

  return FlightPlanPointGroups_Ingest.createFlightPlanPointGroups_Ingest(builder,
    pointGroupName,
    worstFuelCase,
    lsafName,
    this.lsafDistance,
    this.fsafDistance,
    this.etopsDistance,
    lsafTime,
    fsafTime,
    etopsTime,
    this.lsafAvgWindFactor,
    this.fsafAvgWindFactor,
    this.etopsAvgWindFactor,
    this.lsafTempDev,
    this.fsafTempDev,
    this.etopsTempDev,
    this.lsafReqFuel,
    this.fsafReqFuel,
    this.etopsReqFuel,
    fromTakeoffTime,
    this.plannedFuel,
    this.fuelCalcAlt,
    this.fuelCalcSpd,
    this.avgFuelFlow,
    flightPlanPoints
  );
}
}
