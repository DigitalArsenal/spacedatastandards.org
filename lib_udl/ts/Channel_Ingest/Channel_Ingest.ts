// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Channel_Ingest_dataMode_Enum } from './Channel_Ingest_dataMode_Enum.js';


/**
 * /// Channel information on a particular transponder.
 */
export class Channel_Ingest implements flatbuffers.IUnpackableObject<Channel_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Channel_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChannel_Ingest(bb:flatbuffers.ByteBuffer, obj?:Channel_Ingest):Channel_Ingest {
  return (obj || new Channel_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChannel_Ingest(bb:flatbuffers.ByteBuffer, obj?:Channel_Ingest):Channel_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Channel_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('CHAN');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: CHANNEL-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the parent transponder object for this Channel.
 * Example: /// Example: REF-TRANSPONDER-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idTransponder():string|null
idTransponder(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idTransponder(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Channel name.
 * Example: /// Example: Example name
 * Constraints: Minimum length = 1, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Channel type.
 * Example: /// Example: Example type
 * Constraints: Minimum length = 0, Maximum length = 45
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the particular beam for this channel.
 * Example: /// Example: REF-BEAM-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idBeam():string|null
idBeam(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idBeam(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.
 * Example: /// Example: B8VD
 * Constraints: Minimum length = 0, Maximum length = 36
 */
beamName():string|null
beamName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
beamName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the RF Band object for this channel.
 * Example: /// Example: REF-RFBAND-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idRfband():string|null
idRfband(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idRfband(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Channel encryption.
 * Example: /// Example: Example encryption
 * Constraints: Minimum length = 0, Maximum length = 45
 */
encryption():string|null
encryption(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
encryption(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Pkg.
 * Example: /// Example: Example pkg
 * Constraints: Minimum length = 0, Maximum length = 45
 */
pkg():string|null
pkg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pkg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Res.
 * Example: /// Example: Example res
 * Constraints: Minimum length = 0, Maximum length = 45
 */
res():string|null
res(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
res(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Channel compression.
 * Example: /// Example: Example compression
 * Constraints: Minimum length = 0, Maximum length = 45
 */
compression():string|null
compression(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
compression(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Channel vPid.
 * Example: /// Example: VP-ID
 * Constraints: Minimum length = 0, Maximum length = 45
 */
vpid():string|null
vpid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vpid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Channel aPid.
 * Example: /// Example: AP-ID
 * Constraints: Minimum length = 0, Maximum length = 45
 */
apid():string|null
apid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
apid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SID.
 * Example: /// Example: S-ID
 * Constraints: Minimum length = 0, Maximum length = 45
 */
sid():string|null
sid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Owner.
 * Example: /// Example: example_owner
 * Constraints: Minimum length = 0, Maximum length = 128
 */
owner():string|null
owner(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
owner(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: system.source
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: example_origin
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Channel_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Channel_Ingest_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startChannel_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(22);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdTransponder(builder:flatbuffers.Builder, idTransponderOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idTransponderOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, classificationMarkingOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, typeOffset, 0);
}

static addIdBeam(builder:flatbuffers.Builder, idBeamOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idBeamOffset, 0);
}

static addBeamName(builder:flatbuffers.Builder, beamNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, beamNameOffset, 0);
}

static addIdRfband(builder:flatbuffers.Builder, idRfbandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, idRfbandOffset, 0);
}

static addEncryption(builder:flatbuffers.Builder, encryptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, encryptionOffset, 0);
}

static addPkg(builder:flatbuffers.Builder, pkgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, pkgOffset, 0);
}

static addRes(builder:flatbuffers.Builder, resOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, resOffset, 0);
}

static addCompression(builder:flatbuffers.Builder, compressionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, compressionOffset, 0);
}

static addVpid(builder:flatbuffers.Builder, vpidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, vpidOffset, 0);
}

static addApid(builder:flatbuffers.Builder, apidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, apidOffset, 0);
}

static addSid(builder:flatbuffers.Builder, sidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, sidOffset, 0);
}

static addOwner(builder:flatbuffers.Builder, ownerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, ownerOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Channel_Ingest_dataMode_Enum) {
  builder.addFieldInt8(19, dataMode, Channel_Ingest_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, createdByOffset, 0);
}

static endChannel_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishChannel_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CHAN');
}

static finishSizePrefixedChannel_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CHAN', true);
}

static createChannel_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idTransponderOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, idBeamOffset:flatbuffers.Offset, beamNameOffset:flatbuffers.Offset, idRfbandOffset:flatbuffers.Offset, encryptionOffset:flatbuffers.Offset, pkgOffset:flatbuffers.Offset, resOffset:flatbuffers.Offset, compressionOffset:flatbuffers.Offset, vpidOffset:flatbuffers.Offset, apidOffset:flatbuffers.Offset, sidOffset:flatbuffers.Offset, ownerOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:Channel_Ingest_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset):flatbuffers.Offset {
  Channel_Ingest.startChannel_Ingest(builder);
  Channel_Ingest.addId(builder, idOffset);
  Channel_Ingest.addIdTransponder(builder, idTransponderOffset);
  Channel_Ingest.addName(builder, nameOffset);
  Channel_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  Channel_Ingest.addType(builder, typeOffset);
  Channel_Ingest.addIdBeam(builder, idBeamOffset);
  Channel_Ingest.addBeamName(builder, beamNameOffset);
  Channel_Ingest.addIdRfband(builder, idRfbandOffset);
  Channel_Ingest.addEncryption(builder, encryptionOffset);
  Channel_Ingest.addPkg(builder, pkgOffset);
  Channel_Ingest.addRes(builder, resOffset);
  Channel_Ingest.addCompression(builder, compressionOffset);
  Channel_Ingest.addVpid(builder, vpidOffset);
  Channel_Ingest.addApid(builder, apidOffset);
  Channel_Ingest.addSid(builder, sidOffset);
  Channel_Ingest.addOwner(builder, ownerOffset);
  Channel_Ingest.addSource(builder, sourceOffset);
  Channel_Ingest.addOrigin(builder, originOffset);
  Channel_Ingest.addOrigNetwork(builder, origNetworkOffset);
  Channel_Ingest.addDataMode(builder, dataMode);
  Channel_Ingest.addCreatedAt(builder, createdAtOffset);
  Channel_Ingest.addCreatedBy(builder, createdByOffset);
  return Channel_Ingest.endChannel_Ingest(builder);
}

unpack(): Channel_IngestT {
  return new Channel_IngestT(
    this.id(),
    this.idTransponder(),
    this.name(),
    this.classificationMarking(),
    this.type(),
    this.idBeam(),
    this.beamName(),
    this.idRfband(),
    this.encryption(),
    this.pkg(),
    this.res(),
    this.compression(),
    this.vpid(),
    this.apid(),
    this.sid(),
    this.owner(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy()
  );
}


unpackTo(_o: Channel_IngestT): void {
  _o.id = this.id();
  _o.idTransponder = this.idTransponder();
  _o.name = this.name();
  _o.classificationMarking = this.classificationMarking();
  _o.type = this.type();
  _o.idBeam = this.idBeam();
  _o.beamName = this.beamName();
  _o.idRfband = this.idRfband();
  _o.encryption = this.encryption();
  _o.pkg = this.pkg();
  _o.res = this.res();
  _o.compression = this.compression();
  _o.vpid = this.vpid();
  _o.apid = this.apid();
  _o.sid = this.sid();
  _o.owner = this.owner();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
}
}

export class Channel_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idTransponder: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public idBeam: string|Uint8Array|null = null,
  public beamName: string|Uint8Array|null = null,
  public idRfband: string|Uint8Array|null = null,
  public encryption: string|Uint8Array|null = null,
  public pkg: string|Uint8Array|null = null,
  public res: string|Uint8Array|null = null,
  public compression: string|Uint8Array|null = null,
  public vpid: string|Uint8Array|null = null,
  public apid: string|Uint8Array|null = null,
  public sid: string|Uint8Array|null = null,
  public owner: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: Channel_Ingest_dataMode_Enum = Channel_Ingest_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idTransponder = (this.idTransponder !== null ? builder.createString(this.idTransponder!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const idBeam = (this.idBeam !== null ? builder.createString(this.idBeam!) : 0);
  const beamName = (this.beamName !== null ? builder.createString(this.beamName!) : 0);
  const idRfband = (this.idRfband !== null ? builder.createString(this.idRfband!) : 0);
  const encryption = (this.encryption !== null ? builder.createString(this.encryption!) : 0);
  const pkg = (this.pkg !== null ? builder.createString(this.pkg!) : 0);
  const res = (this.res !== null ? builder.createString(this.res!) : 0);
  const compression = (this.compression !== null ? builder.createString(this.compression!) : 0);
  const vpid = (this.vpid !== null ? builder.createString(this.vpid!) : 0);
  const apid = (this.apid !== null ? builder.createString(this.apid!) : 0);
  const sid = (this.sid !== null ? builder.createString(this.sid!) : 0);
  const owner = (this.owner !== null ? builder.createString(this.owner!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);

  return Channel_Ingest.createChannel_Ingest(builder,
    id,
    idTransponder,
    name,
    classificationMarking,
    type,
    idBeam,
    beamName,
    idRfband,
    encryption,
    pkg,
    res,
    compression,
    vpid,
    apid,
    sid,
    owner,
    source,
    origin,
    origNetwork,
    this.dataMode,
    createdAt,
    createdBy
  );
}
}
