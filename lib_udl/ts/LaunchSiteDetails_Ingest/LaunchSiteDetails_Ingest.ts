// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LaunchSiteDetails_Ingest_dataMode_Enum } from './LaunchSiteDetails_Ingest_dataMode_Enum.js';


/**
 * /// Model representation of details compiled/collected on a launch site by a particular source. A launch site may have several details records.
 */
export class LaunchSiteDetails_Ingest implements flatbuffers.IUnpackableObject<LaunchSiteDetails_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LaunchSiteDetails_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLaunchSiteDetails_Ingest(bb:flatbuffers.ByteBuffer, obj?:LaunchSiteDetails_Ingest):LaunchSiteDetails_Ingest {
  return (obj || new LaunchSiteDetails_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLaunchSiteDetails_Ingest(bb:flatbuffers.ByteBuffer, obj?:LaunchSiteDetails_Ingest):LaunchSiteDetails_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LaunchSiteDetails_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('LAUN');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: LAUNCHSITEDETAILS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the parent launch site record.
 * Example: /// Example: LAUNCHSITE-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idLaunchSite():string|null
idLaunchSite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idLaunchSite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the location data for the launch site, or null if mobile (e.g. sea launch platform in international waters).
 * Example: /// Example: LOCATION-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idLocation():string|null
idLocation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idLocation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Launch site group name. Multiple launch sites may be colocated within a launch ''group''.
 * Example: /// Example: Example-group-name
 * Constraints: Minimum length = 0, Maximum length = 64
 */
launchGroup():string|null
launchGroup(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchGroup(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of supported launch inclinations known for this site. The array is always sized as a multiple of two and includes start/end values to support ranges.  For example, if a site support inclinations of 10 and 12-14, the array would have the following values: [10,10, 12,14].
 * Example: /// Example: [10.23, 10.23, 12.23, 14.23]
 * Constraints: No constraints specified.
 */
availableInclinations(index: number):string
availableInclinations(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
availableInclinations(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

availableInclinationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Notes/description of the launch site.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 256
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():LaunchSiteDetails_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : LaunchSiteDetails_Ingest_dataMode_Enum.REAL;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
location():string|null
location(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
location(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startLaunchSiteDetails_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdLaunchSite(builder:flatbuffers.Builder, idLaunchSiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idLaunchSiteOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addIdLocation(builder:flatbuffers.Builder, idLocationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idLocationOffset, 0);
}

static addLaunchGroup(builder:flatbuffers.Builder, launchGroupOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, launchGroupOffset, 0);
}

static addAvailableInclinations(builder:flatbuffers.Builder, availableInclinationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, availableInclinationsOffset, 0);
}

static createAvailableInclinationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAvailableInclinationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, descriptionOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:LaunchSiteDetails_Ingest_dataMode_Enum) {
  builder.addFieldInt8(12, dataMode, LaunchSiteDetails_Ingest_dataMode_Enum.REAL);
}

static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, locationOffset, 0);
}

static endLaunchSiteDetails_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLaunchSiteDetails_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LAUN');
}

static finishSizePrefixedLaunchSiteDetails_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LAUN', true);
}

static createLaunchSiteDetails_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idLaunchSiteOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idLocationOffset:flatbuffers.Offset, launchGroupOffset:flatbuffers.Offset, availableInclinationsOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:LaunchSiteDetails_Ingest_dataMode_Enum, locationOffset:flatbuffers.Offset):flatbuffers.Offset {
  LaunchSiteDetails_Ingest.startLaunchSiteDetails_Ingest(builder);
  LaunchSiteDetails_Ingest.addId(builder, idOffset);
  LaunchSiteDetails_Ingest.addIdLaunchSite(builder, idLaunchSiteOffset);
  LaunchSiteDetails_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  LaunchSiteDetails_Ingest.addIdLocation(builder, idLocationOffset);
  LaunchSiteDetails_Ingest.addLaunchGroup(builder, launchGroupOffset);
  LaunchSiteDetails_Ingest.addAvailableInclinations(builder, availableInclinationsOffset);
  LaunchSiteDetails_Ingest.addDescription(builder, descriptionOffset);
  LaunchSiteDetails_Ingest.addCreatedAt(builder, createdAtOffset);
  LaunchSiteDetails_Ingest.addCreatedBy(builder, createdByOffset);
  LaunchSiteDetails_Ingest.addSource(builder, sourceOffset);
  LaunchSiteDetails_Ingest.addOrigin(builder, originOffset);
  LaunchSiteDetails_Ingest.addOrigNetwork(builder, origNetworkOffset);
  LaunchSiteDetails_Ingest.addDataMode(builder, dataMode);
  LaunchSiteDetails_Ingest.addLocation(builder, locationOffset);
  return LaunchSiteDetails_Ingest.endLaunchSiteDetails_Ingest(builder);
}

unpack(): LaunchSiteDetails_IngestT {
  return new LaunchSiteDetails_IngestT(
    this.id(),
    this.idLaunchSite(),
    this.classificationMarking(),
    this.idLocation(),
    this.launchGroup(),
    this.bb!.createScalarList<string>(this.availableInclinations.bind(this), this.availableInclinationsLength()),
    this.description(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.location()
  );
}


unpackTo(_o: LaunchSiteDetails_IngestT): void {
  _o.id = this.id();
  _o.idLaunchSite = this.idLaunchSite();
  _o.classificationMarking = this.classificationMarking();
  _o.idLocation = this.idLocation();
  _o.launchGroup = this.launchGroup();
  _o.availableInclinations = this.bb!.createScalarList<string>(this.availableInclinations.bind(this), this.availableInclinationsLength());
  _o.description = this.description();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.location = this.location();
}
}

export class LaunchSiteDetails_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idLaunchSite: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idLocation: string|Uint8Array|null = null,
  public launchGroup: string|Uint8Array|null = null,
  public availableInclinations: (string)[] = [],
  public description: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: LaunchSiteDetails_Ingest_dataMode_Enum = LaunchSiteDetails_Ingest_dataMode_Enum.REAL,
  public location: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idLaunchSite = (this.idLaunchSite !== null ? builder.createString(this.idLaunchSite!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idLocation = (this.idLocation !== null ? builder.createString(this.idLocation!) : 0);
  const launchGroup = (this.launchGroup !== null ? builder.createString(this.launchGroup!) : 0);
  const availableInclinations = LaunchSiteDetails_Ingest.createAvailableInclinationsVector(builder, builder.createObjectOffsetList(this.availableInclinations));
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const location = (this.location !== null ? builder.createString(this.location!) : 0);

  return LaunchSiteDetails_Ingest.createLaunchSiteDetails_Ingest(builder,
    id,
    idLaunchSite,
    classificationMarking,
    idLocation,
    launchGroup,
    availableInclinations,
    description,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode,
    location
  );
}
}
