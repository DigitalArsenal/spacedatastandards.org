// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LinkStatus_Ingest_dataMode_Enum } from './LinkStatus_Ingest_dataMode_Enum.js';


/**
 * /// Captures link status.
 */
export class LinkStatus_Ingest implements flatbuffers.IUnpackableObject<LinkStatus_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LinkStatus_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLinkStatus_Ingest(bb:flatbuffers.ByteBuffer, obj?:LinkStatus_Ingest):LinkStatus_Ingest {
  return (obj || new LinkStatus_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLinkStatus_Ingest(bb:flatbuffers.ByteBuffer, obj?:LinkStatus_Ingest):LinkStatus_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LinkStatus_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('LINK');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: LINKSTATUS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique ID of the on-orbit satellite (Sat-1) forming the link.  A null value for idOnOrbit1 indicates that the link is formed over a LEO/MEO constellation.
 * Example: /// Example: REF-ONORBIT1-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit1():string|null
idOnOrbit1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique ID of the on-orbit satellite (Sat-2) forming the link.  A null value for idOnOrbit2 indicates either a link employing only Sat-1 or a link formed over a LEO/MEO constellation.
 * Example: /// Example: REF-ONORBIT2-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit2():string|null
idOnOrbit2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The link establishment time, or the time that the link becomes available for use, in ISO8601 UTC format.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
linkStartTime():string|null
linkStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linkStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The link termination time, or the time that the link becomes unavailable for use, in ISO8601 UTC format.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
linkStopTime():string|null
linkStopTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linkStopTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The constellation name if the link is established over a LEO/MEO constellation.  In this case, idOnOrbit1 and idOnOrbit2 will be null.
 * Example: /// Example: Fornax
 * Constraints: Minimum length = 0, Maximum length = 128
 */
constellation():string|null
constellation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
constellation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name or description of the link.
 * Example: /// Example: Example description
 * Constraints: Minimum length = 1, Maximum length = 64
 */
linkName():string|null
linkName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linkName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of the link.
 * Example: /// Example: Example link
 * Constraints: Minimum length = 0, Maximum length = 64
 */
linkType():string|null
linkType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linkType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).
 * Example: /// Example: MIL-KA
 * Constraints: Minimum length = 0, Maximum length = 24
 */
band():string|null
band(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
band(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The ID of beam-1 forming the link.  In the case of two sat link, beam-1 corresponds to Sat-1.
 * Example: /// Example: REF-BEAM1-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idBeam1():string|null
idBeam1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idBeam1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name or description of link endpoint-1, corresponding to beam-1.
 * Example: /// Example: Example endpoint
 * Constraints: Minimum length = 1, Maximum length = 64
 */
endPoint1Name():string|null
endPoint1Name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endPoint1Name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
endPoint1Lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 80.23
 * Constraints: No constraints specified.
 */
endPoint1Lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The ID of beam-2 forming the link.  In the case of two sat link, beam-2 corresponds to Sat-2.
 * Example: /// Example: REF-BEAM2-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idBeam2():string|null
idBeam2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idBeam2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name or description of link endpoint-2, corresponding to beam-2.
 * Example: /// Example: Example description
 * Constraints: Minimum length = 1, Maximum length = 64
 */
endPoint2Name():string|null
endPoint2Name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endPoint2Name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
endPoint2Lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 80.23
 * Constraints: No constraints specified.
 */
endPoint2Lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The endpoint-1 to endpoint-2 data rate, in kbps.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
dataRate1To2():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The endpoint-2 to endpoint-1 data rate, in kbps.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
dataRate2To1():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).
 * Example: /// Example: DEGRADED-WEATHER
 * Constraints: Minimum length = 0, Maximum length = 24
 */
linkState():string|null
linkState(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linkState(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The SYSCAP mission status of the system(s) forming the link.
 * Example: /// Example: Example status
 * Constraints: Minimum length = 0, Maximum length = 24
 */
sysCap():string|null
sysCap(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sysCap(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The OPSCAP mission status of the system(s) forming the link.
 * Example: /// Example: Example status
 * Constraints: Minimum length = 0, Maximum length = 24
 */
opsCap():string|null
opsCap(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
opsCap(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():LinkStatus_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : LinkStatus_Ingest_dataMode_Enum.REAL;
}

/**
 * Satellite/catalog number of the target on-orbit primary object.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
satNo1():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Satellite/catalog number of the target on-orbit secondary object.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
satNo2():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startLinkStatus_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(31);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdOnOrbit1(builder:flatbuffers.Builder, idOnOrbit1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOnOrbit1Offset, 0);
}

static addIdOnOrbit2(builder:flatbuffers.Builder, idOnOrbit2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idOnOrbit2Offset, 0);
}

static addLinkStartTime(builder:flatbuffers.Builder, linkStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, linkStartTimeOffset, 0);
}

static addLinkStopTime(builder:flatbuffers.Builder, linkStopTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, linkStopTimeOffset, 0);
}

static addConstellation(builder:flatbuffers.Builder, constellationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, constellationOffset, 0);
}

static addLinkName(builder:flatbuffers.Builder, linkNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, linkNameOffset, 0);
}

static addLinkType(builder:flatbuffers.Builder, linkTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, linkTypeOffset, 0);
}

static addBand(builder:flatbuffers.Builder, bandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, bandOffset, 0);
}

static addIdBeam1(builder:flatbuffers.Builder, idBeam1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(10, idBeam1Offset, 0);
}

static addEndPoint1Name(builder:flatbuffers.Builder, endPoint1NameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, endPoint1NameOffset, 0);
}

static addEndPoint1Lat(builder:flatbuffers.Builder, endPoint1Lat:number) {
  builder.addFieldFloat64(12, endPoint1Lat, 0.0);
}

static addEndPoint1Lon(builder:flatbuffers.Builder, endPoint1Lon:number) {
  builder.addFieldFloat64(13, endPoint1Lon, 0.0);
}

static addIdBeam2(builder:flatbuffers.Builder, idBeam2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(14, idBeam2Offset, 0);
}

static addEndPoint2Name(builder:flatbuffers.Builder, endPoint2NameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, endPoint2NameOffset, 0);
}

static addEndPoint2Lat(builder:flatbuffers.Builder, endPoint2Lat:number) {
  builder.addFieldFloat64(16, endPoint2Lat, 0.0);
}

static addEndPoint2Lon(builder:flatbuffers.Builder, endPoint2Lon:number) {
  builder.addFieldFloat64(17, endPoint2Lon, 0.0);
}

static addDataRate1To2(builder:flatbuffers.Builder, dataRate1To2:number) {
  builder.addFieldFloat64(18, dataRate1To2, 0.0);
}

static addDataRate2To1(builder:flatbuffers.Builder, dataRate2To1:number) {
  builder.addFieldFloat64(19, dataRate2To1, 0.0);
}

static addLinkState(builder:flatbuffers.Builder, linkStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, linkStateOffset, 0);
}

static addSysCap(builder:flatbuffers.Builder, sysCapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, sysCapOffset, 0);
}

static addOpsCap(builder:flatbuffers.Builder, opsCapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, opsCapOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:LinkStatus_Ingest_dataMode_Enum) {
  builder.addFieldInt8(28, dataMode, LinkStatus_Ingest_dataMode_Enum.REAL);
}

static addSatNo1(builder:flatbuffers.Builder, satNo1:number) {
  builder.addFieldInt32(29, satNo1, 0);
}

static addSatNo2(builder:flatbuffers.Builder, satNo2:number) {
  builder.addFieldInt32(30, satNo2, 0);
}

static endLinkStatus_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLinkStatus_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LINK');
}

static finishSizePrefixedLinkStatus_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LINK', true);
}

static createLinkStatus_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idOnOrbit1Offset:flatbuffers.Offset, idOnOrbit2Offset:flatbuffers.Offset, linkStartTimeOffset:flatbuffers.Offset, linkStopTimeOffset:flatbuffers.Offset, constellationOffset:flatbuffers.Offset, linkNameOffset:flatbuffers.Offset, linkTypeOffset:flatbuffers.Offset, bandOffset:flatbuffers.Offset, idBeam1Offset:flatbuffers.Offset, endPoint1NameOffset:flatbuffers.Offset, endPoint1Lat:number, endPoint1Lon:number, idBeam2Offset:flatbuffers.Offset, endPoint2NameOffset:flatbuffers.Offset, endPoint2Lat:number, endPoint2Lon:number, dataRate1To2:number, dataRate2To1:number, linkStateOffset:flatbuffers.Offset, sysCapOffset:flatbuffers.Offset, opsCapOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:LinkStatus_Ingest_dataMode_Enum, satNo1:number, satNo2:number):flatbuffers.Offset {
  LinkStatus_Ingest.startLinkStatus_Ingest(builder);
  LinkStatus_Ingest.addId(builder, idOffset);
  LinkStatus_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  LinkStatus_Ingest.addIdOnOrbit1(builder, idOnOrbit1Offset);
  LinkStatus_Ingest.addIdOnOrbit2(builder, idOnOrbit2Offset);
  LinkStatus_Ingest.addLinkStartTime(builder, linkStartTimeOffset);
  LinkStatus_Ingest.addLinkStopTime(builder, linkStopTimeOffset);
  LinkStatus_Ingest.addConstellation(builder, constellationOffset);
  LinkStatus_Ingest.addLinkName(builder, linkNameOffset);
  LinkStatus_Ingest.addLinkType(builder, linkTypeOffset);
  LinkStatus_Ingest.addBand(builder, bandOffset);
  LinkStatus_Ingest.addIdBeam1(builder, idBeam1Offset);
  LinkStatus_Ingest.addEndPoint1Name(builder, endPoint1NameOffset);
  LinkStatus_Ingest.addEndPoint1Lat(builder, endPoint1Lat);
  LinkStatus_Ingest.addEndPoint1Lon(builder, endPoint1Lon);
  LinkStatus_Ingest.addIdBeam2(builder, idBeam2Offset);
  LinkStatus_Ingest.addEndPoint2Name(builder, endPoint2NameOffset);
  LinkStatus_Ingest.addEndPoint2Lat(builder, endPoint2Lat);
  LinkStatus_Ingest.addEndPoint2Lon(builder, endPoint2Lon);
  LinkStatus_Ingest.addDataRate1To2(builder, dataRate1To2);
  LinkStatus_Ingest.addDataRate2To1(builder, dataRate2To1);
  LinkStatus_Ingest.addLinkState(builder, linkStateOffset);
  LinkStatus_Ingest.addSysCap(builder, sysCapOffset);
  LinkStatus_Ingest.addOpsCap(builder, opsCapOffset);
  LinkStatus_Ingest.addCreatedAt(builder, createdAtOffset);
  LinkStatus_Ingest.addCreatedBy(builder, createdByOffset);
  LinkStatus_Ingest.addSource(builder, sourceOffset);
  LinkStatus_Ingest.addOrigin(builder, originOffset);
  LinkStatus_Ingest.addOrigNetwork(builder, origNetworkOffset);
  LinkStatus_Ingest.addDataMode(builder, dataMode);
  LinkStatus_Ingest.addSatNo1(builder, satNo1);
  LinkStatus_Ingest.addSatNo2(builder, satNo2);
  return LinkStatus_Ingest.endLinkStatus_Ingest(builder);
}

unpack(): LinkStatus_IngestT {
  return new LinkStatus_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idOnOrbit1(),
    this.idOnOrbit2(),
    this.linkStartTime(),
    this.linkStopTime(),
    this.constellation(),
    this.linkName(),
    this.linkType(),
    this.band(),
    this.idBeam1(),
    this.endPoint1Name(),
    this.endPoint1Lat(),
    this.endPoint1Lon(),
    this.idBeam2(),
    this.endPoint2Name(),
    this.endPoint2Lat(),
    this.endPoint2Lon(),
    this.dataRate1To2(),
    this.dataRate2To1(),
    this.linkState(),
    this.sysCap(),
    this.opsCap(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.satNo1(),
    this.satNo2()
  );
}


unpackTo(_o: LinkStatus_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idOnOrbit1 = this.idOnOrbit1();
  _o.idOnOrbit2 = this.idOnOrbit2();
  _o.linkStartTime = this.linkStartTime();
  _o.linkStopTime = this.linkStopTime();
  _o.constellation = this.constellation();
  _o.linkName = this.linkName();
  _o.linkType = this.linkType();
  _o.band = this.band();
  _o.idBeam1 = this.idBeam1();
  _o.endPoint1Name = this.endPoint1Name();
  _o.endPoint1Lat = this.endPoint1Lat();
  _o.endPoint1Lon = this.endPoint1Lon();
  _o.idBeam2 = this.idBeam2();
  _o.endPoint2Name = this.endPoint2Name();
  _o.endPoint2Lat = this.endPoint2Lat();
  _o.endPoint2Lon = this.endPoint2Lon();
  _o.dataRate1To2 = this.dataRate1To2();
  _o.dataRate2To1 = this.dataRate2To1();
  _o.linkState = this.linkState();
  _o.sysCap = this.sysCap();
  _o.opsCap = this.opsCap();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.satNo1 = this.satNo1();
  _o.satNo2 = this.satNo2();
}
}

export class LinkStatus_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idOnOrbit1: string|Uint8Array|null = null,
  public idOnOrbit2: string|Uint8Array|null = null,
  public linkStartTime: string|Uint8Array|null = null,
  public linkStopTime: string|Uint8Array|null = null,
  public constellation: string|Uint8Array|null = null,
  public linkName: string|Uint8Array|null = null,
  public linkType: string|Uint8Array|null = null,
  public band: string|Uint8Array|null = null,
  public idBeam1: string|Uint8Array|null = null,
  public endPoint1Name: string|Uint8Array|null = null,
  public endPoint1Lat: number = 0.0,
  public endPoint1Lon: number = 0.0,
  public idBeam2: string|Uint8Array|null = null,
  public endPoint2Name: string|Uint8Array|null = null,
  public endPoint2Lat: number = 0.0,
  public endPoint2Lon: number = 0.0,
  public dataRate1To2: number = 0.0,
  public dataRate2To1: number = 0.0,
  public linkState: string|Uint8Array|null = null,
  public sysCap: string|Uint8Array|null = null,
  public opsCap: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: LinkStatus_Ingest_dataMode_Enum = LinkStatus_Ingest_dataMode_Enum.REAL,
  public satNo1: number = 0,
  public satNo2: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idOnOrbit1 = (this.idOnOrbit1 !== null ? builder.createString(this.idOnOrbit1!) : 0);
  const idOnOrbit2 = (this.idOnOrbit2 !== null ? builder.createString(this.idOnOrbit2!) : 0);
  const linkStartTime = (this.linkStartTime !== null ? builder.createString(this.linkStartTime!) : 0);
  const linkStopTime = (this.linkStopTime !== null ? builder.createString(this.linkStopTime!) : 0);
  const constellation = (this.constellation !== null ? builder.createString(this.constellation!) : 0);
  const linkName = (this.linkName !== null ? builder.createString(this.linkName!) : 0);
  const linkType = (this.linkType !== null ? builder.createString(this.linkType!) : 0);
  const band = (this.band !== null ? builder.createString(this.band!) : 0);
  const idBeam1 = (this.idBeam1 !== null ? builder.createString(this.idBeam1!) : 0);
  const endPoint1Name = (this.endPoint1Name !== null ? builder.createString(this.endPoint1Name!) : 0);
  const idBeam2 = (this.idBeam2 !== null ? builder.createString(this.idBeam2!) : 0);
  const endPoint2Name = (this.endPoint2Name !== null ? builder.createString(this.endPoint2Name!) : 0);
  const linkState = (this.linkState !== null ? builder.createString(this.linkState!) : 0);
  const sysCap = (this.sysCap !== null ? builder.createString(this.sysCap!) : 0);
  const opsCap = (this.opsCap !== null ? builder.createString(this.opsCap!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return LinkStatus_Ingest.createLinkStatus_Ingest(builder,
    id,
    classificationMarking,
    idOnOrbit1,
    idOnOrbit2,
    linkStartTime,
    linkStopTime,
    constellation,
    linkName,
    linkType,
    band,
    idBeam1,
    endPoint1Name,
    this.endPoint1Lat,
    this.endPoint1Lon,
    idBeam2,
    endPoint2Name,
    this.endPoint2Lat,
    this.endPoint2Lon,
    this.dataRate1To2,
    this.dataRate2To1,
    linkState,
    sysCap,
    opsCap,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode,
    this.satNo1,
    this.satNo2
  );
}
}
