// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AirspaceControlOrder_Full_dataMode_Enum } from './AirspaceControlOrder_Full_dataMode_Enum.js';


/**
 * /// Beta Version Airspace Control Order: Contains airspace coordination information and instructions that have been issued by an airspace control authority.
 */
export class AirspaceControlOrder_Full implements flatbuffers.IUnpackableObject<AirspaceControlOrder_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirspaceControlOrder_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirspaceControlOrder_Full(bb:flatbuffers.ByteBuffer, obj?:AirspaceControlOrder_Full):AirspaceControlOrder_Full {
  return (obj || new AirspaceControlOrder_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirspaceControlOrder_Full(bb:flatbuffers.ByteBuffer, obj?:AirspaceControlOrder_Full):AirspaceControlOrder_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirspaceControlOrder_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRS');
}

/**
 * Unique identifier of the record, auto-generated by the system if not provided on create operations.
 * Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: EXAMPLE URI
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies the code name or nickname assigned to a joint exercise or plan to designate message traffic.
 * Example: /// Example: DESERT WIND
 * Constraints: Minimum length = 1, Maximum length = 64
 */
opExName():string|null
opExName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
opExName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originator of this reference.
 * Example: /// Example: USCENTCOM
 * Constraints: Minimum length = 1, Maximum length = 36
 */
originator():string|null
originator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The start of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-07T13:55:43.123Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The end of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-08T13:55:43.123Z
 * Constraints: No constraints specified.
 */
stopTime():string|null
stopTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stopTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A qualifier for the end of the effective time period of this airspace control order, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
 * Example: /// Example: AFTER
 * Constraints: Minimum length = 0, Maximum length = 8
 */
stopQualifier():string|null
stopQualifier(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stopQualifier(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Supplementary name that can be used to further identify exercise nicknames, or to provide the primary nickname of the option or the alternative of an operational plan.
 * Example: /// Example: CONTROL
 * Constraints: Minimum length = 0, Maximum length = 32
 */
opExInfo():string|null
opExInfo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
opExInfo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The secondary supplementary nickname of the option or the alternative of the operational plan or order.
 * Example: /// Example: ORANGE
 * Constraints: Minimum length = 0, Maximum length = 24
 */
opExInfoAlt():string|null
opExInfoAlt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
opExInfoAlt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
 * Example: /// Example: SACEUR 106
 * Constraints: Minimum length = 0, Maximum length = 36
 */
planOrigNum():string|null
planOrigNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
planOrigNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The unique message identifier sequentially assigned by the originator.
 * Example: /// Example: 1201003
 * Constraints: Minimum length = 0, Maximum length = 16
 */
serialNum():string|null
serialNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
serialNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The month in which the message originated.
 * Example: /// Example: OCT
 * Constraints: Minimum length = 0, Maximum length = 12
 */
month():string|null
month(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
month(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The qualifier which caveats the message status.
 * Example: /// Example: CHG
 * Constraints: Minimum length = 0, Maximum length = 8
 */
qualifier():string|null
qualifier(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
qualifier(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The serial number associated with the message qualifier.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
qualSn():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Name of the area of the command for which the ACO is valid.
 * Example: /// Example: FORT BRAGG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
areaOfValidity():string|null
areaOfValidity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
areaOfValidity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The serial number of this airspace control order.
 * Example: /// Example: 27B
 * Constraints: Minimum length = 0, Maximum length = 8
 */
acoSerialNum():string|null
acoSerialNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
acoSerialNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies the geodetic datum by which the spatial coordinates of the controlled airspace are calculated.
 * Example: /// Example: EUR-T
 * Constraints: Minimum length = 0, Maximum length = 8
 */
geoDatum():string|null
geoDatum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geoDatum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Free text information expressed in natural language.
 * Example: /// Example: CHOKE POINTS
 * Constraints: Minimum length = 0, Maximum length = 128
 */
acoComments():string|null
acoComments(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
acoComments(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
airspaceControlOrderReferences(index: number):string
airspaceControlOrderReferences(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
airspaceControlOrderReferences(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

airspaceControlOrderReferencesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
airspaceControlMeansStatus(index: number):string
airspaceControlMeansStatus(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
airspaceControlMeansStatus(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

airspaceControlMeansStatusLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Collection of unique link 16 identifier that will be assigned to a future airspace control means.
 * Example: /// Example: ['A2467', 'A3466', 'AA232']
 * Constraints: No constraints specified.
 */
undLnkTrk(index: number):string
undLnkTrk(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
undLnkTrk(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

undLnkTrkLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Markings defining the source material or the original classification authority for the ACO message.
 * Example: /// Example: ORIG:USJFCOM
 * Constraints: Minimum length = 0, Maximum length = 64
 */
classSource():string|null
classSource(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classSource(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mandatory if classSource uses the "IORIG" designator. Must be a REASON FOR CLASSIFICATION code.
 * Example: /// Example: ['15C', '10C']
 * Constraints: No constraints specified.
 */
classReason(index: number):string
classReason(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
classReason(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

classReasonLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Markings providing the literal guidance or date for downgrading or declassifying the airspace control order. Manditory if declassExemptionCode is nul.
 * Example: /// Example: ['NST:AT EXERCISE ENDEX', 'DATE:25NOV1997']
 * Constraints: No constraints specified.
 */
downgradeInsDate(index: number):string
downgradeInsDate(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
downgradeInsDate(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

downgradeInsDateLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Coded entries that provide justification for exemption from automatic downgrading or declassification of the airspace control order.
 * Example: /// Example: ['X1', 'X2']
 * Constraints: No constraints specified.
 */
declassExemptionCode(index: number):string
declassExemptionCode(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
declassExemptionCode(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

declassExemptionCodeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AirspaceControlOrder_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AirspaceControlOrder_Full_dataMode_Enum.REAL;
}

static startAirspaceControlOrder_Full(builder:flatbuffers.Builder) {
  builder.startObject(33);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rawFileUriOffset, 0);
}

static addOpExName(builder:flatbuffers.Builder, opExNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, opExNameOffset, 0);
}

static addOriginator(builder:flatbuffers.Builder, originatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, originatorOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, startTimeOffset, 0);
}

static addStopTime(builder:flatbuffers.Builder, stopTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, stopTimeOffset, 0);
}

static addStopQualifier(builder:flatbuffers.Builder, stopQualifierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, stopQualifierOffset, 0);
}

static addOpExInfo(builder:flatbuffers.Builder, opExInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, opExInfoOffset, 0);
}

static addOpExInfoAlt(builder:flatbuffers.Builder, opExInfoAltOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, opExInfoAltOffset, 0);
}

static addPlanOrigNum(builder:flatbuffers.Builder, planOrigNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, planOrigNumOffset, 0);
}

static addSerialNum(builder:flatbuffers.Builder, serialNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, serialNumOffset, 0);
}

static addMonth(builder:flatbuffers.Builder, monthOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, monthOffset, 0);
}

static addQualifier(builder:flatbuffers.Builder, qualifierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, qualifierOffset, 0);
}

static addQualSn(builder:flatbuffers.Builder, qualSn:number) {
  builder.addFieldInt32(14, qualSn, 0);
}

static addAreaOfValidity(builder:flatbuffers.Builder, areaOfValidityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, areaOfValidityOffset, 0);
}

static addAcoSerialNum(builder:flatbuffers.Builder, acoSerialNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, acoSerialNumOffset, 0);
}

static addGeoDatum(builder:flatbuffers.Builder, geoDatumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, geoDatumOffset, 0);
}

static addAcoComments(builder:flatbuffers.Builder, acoCommentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, acoCommentsOffset, 0);
}

static addAirspaceControlOrderReferences(builder:flatbuffers.Builder, airspaceControlOrderReferencesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, airspaceControlOrderReferencesOffset, 0);
}

static createAirspaceControlOrderReferencesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAirspaceControlOrderReferencesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAirspaceControlMeansStatus(builder:flatbuffers.Builder, airspaceControlMeansStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, airspaceControlMeansStatusOffset, 0);
}

static createAirspaceControlMeansStatusVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAirspaceControlMeansStatusVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUndLnkTrk(builder:flatbuffers.Builder, undLnkTrkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, undLnkTrkOffset, 0);
}

static createUndLnkTrkVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUndLnkTrkVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addClassSource(builder:flatbuffers.Builder, classSourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, classSourceOffset, 0);
}

static addClassReason(builder:flatbuffers.Builder, classReasonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, classReasonOffset, 0);
}

static createClassReasonVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startClassReasonVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDowngradeInsDate(builder:flatbuffers.Builder, downgradeInsDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, downgradeInsDateOffset, 0);
}

static createDowngradeInsDateVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDowngradeInsDateVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDeclassExemptionCode(builder:flatbuffers.Builder, declassExemptionCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, declassExemptionCodeOffset, 0);
}

static createDeclassExemptionCodeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDeclassExemptionCodeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, createdByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AirspaceControlOrder_Full_dataMode_Enum) {
  builder.addFieldInt8(32, dataMode, AirspaceControlOrder_Full_dataMode_Enum.REAL);
}

static endAirspaceControlOrder_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirspaceControlOrder_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRS');
}

static finishSizePrefixedAirspaceControlOrder_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRS', true);
}

static createAirspaceControlOrder_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, rawFileUriOffset:flatbuffers.Offset, opExNameOffset:flatbuffers.Offset, originatorOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, stopTimeOffset:flatbuffers.Offset, stopQualifierOffset:flatbuffers.Offset, opExInfoOffset:flatbuffers.Offset, opExInfoAltOffset:flatbuffers.Offset, planOrigNumOffset:flatbuffers.Offset, serialNumOffset:flatbuffers.Offset, monthOffset:flatbuffers.Offset, qualifierOffset:flatbuffers.Offset, qualSn:number, areaOfValidityOffset:flatbuffers.Offset, acoSerialNumOffset:flatbuffers.Offset, geoDatumOffset:flatbuffers.Offset, acoCommentsOffset:flatbuffers.Offset, airspaceControlOrderReferencesOffset:flatbuffers.Offset, airspaceControlMeansStatusOffset:flatbuffers.Offset, undLnkTrkOffset:flatbuffers.Offset, classSourceOffset:flatbuffers.Offset, classReasonOffset:flatbuffers.Offset, downgradeInsDateOffset:flatbuffers.Offset, declassExemptionCodeOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:AirspaceControlOrder_Full_dataMode_Enum):flatbuffers.Offset {
  AirspaceControlOrder_Full.startAirspaceControlOrder_Full(builder);
  AirspaceControlOrder_Full.addId(builder, idOffset);
  AirspaceControlOrder_Full.addClassificationMarking(builder, classificationMarkingOffset);
  AirspaceControlOrder_Full.addRawFileUri(builder, rawFileUriOffset);
  AirspaceControlOrder_Full.addOpExName(builder, opExNameOffset);
  AirspaceControlOrder_Full.addOriginator(builder, originatorOffset);
  AirspaceControlOrder_Full.addStartTime(builder, startTimeOffset);
  AirspaceControlOrder_Full.addStopTime(builder, stopTimeOffset);
  AirspaceControlOrder_Full.addStopQualifier(builder, stopQualifierOffset);
  AirspaceControlOrder_Full.addOpExInfo(builder, opExInfoOffset);
  AirspaceControlOrder_Full.addOpExInfoAlt(builder, opExInfoAltOffset);
  AirspaceControlOrder_Full.addPlanOrigNum(builder, planOrigNumOffset);
  AirspaceControlOrder_Full.addSerialNum(builder, serialNumOffset);
  AirspaceControlOrder_Full.addMonth(builder, monthOffset);
  AirspaceControlOrder_Full.addQualifier(builder, qualifierOffset);
  AirspaceControlOrder_Full.addQualSn(builder, qualSn);
  AirspaceControlOrder_Full.addAreaOfValidity(builder, areaOfValidityOffset);
  AirspaceControlOrder_Full.addAcoSerialNum(builder, acoSerialNumOffset);
  AirspaceControlOrder_Full.addGeoDatum(builder, geoDatumOffset);
  AirspaceControlOrder_Full.addAcoComments(builder, acoCommentsOffset);
  AirspaceControlOrder_Full.addAirspaceControlOrderReferences(builder, airspaceControlOrderReferencesOffset);
  AirspaceControlOrder_Full.addAirspaceControlMeansStatus(builder, airspaceControlMeansStatusOffset);
  AirspaceControlOrder_Full.addUndLnkTrk(builder, undLnkTrkOffset);
  AirspaceControlOrder_Full.addClassSource(builder, classSourceOffset);
  AirspaceControlOrder_Full.addClassReason(builder, classReasonOffset);
  AirspaceControlOrder_Full.addDowngradeInsDate(builder, downgradeInsDateOffset);
  AirspaceControlOrder_Full.addDeclassExemptionCode(builder, declassExemptionCodeOffset);
  AirspaceControlOrder_Full.addCreatedAt(builder, createdAtOffset);
  AirspaceControlOrder_Full.addCreatedBy(builder, createdByOffset);
  AirspaceControlOrder_Full.addSourceDl(builder, sourceDlOffset);
  AirspaceControlOrder_Full.addSource(builder, sourceOffset);
  AirspaceControlOrder_Full.addOrigin(builder, originOffset);
  AirspaceControlOrder_Full.addOrigNetwork(builder, origNetworkOffset);
  AirspaceControlOrder_Full.addDataMode(builder, dataMode);
  return AirspaceControlOrder_Full.endAirspaceControlOrder_Full(builder);
}

unpack(): AirspaceControlOrder_FullT {
  return new AirspaceControlOrder_FullT(
    this.id(),
    this.classificationMarking(),
    this.rawFileUri(),
    this.opExName(),
    this.originator(),
    this.startTime(),
    this.stopTime(),
    this.stopQualifier(),
    this.opExInfo(),
    this.opExInfoAlt(),
    this.planOrigNum(),
    this.serialNum(),
    this.month(),
    this.qualifier(),
    this.qualSn(),
    this.areaOfValidity(),
    this.acoSerialNum(),
    this.geoDatum(),
    this.acoComments(),
    this.bb!.createScalarList<string>(this.airspaceControlOrderReferences.bind(this), this.airspaceControlOrderReferencesLength()),
    this.bb!.createScalarList<string>(this.airspaceControlMeansStatus.bind(this), this.airspaceControlMeansStatusLength()),
    this.bb!.createScalarList<string>(this.undLnkTrk.bind(this), this.undLnkTrkLength()),
    this.classSource(),
    this.bb!.createScalarList<string>(this.classReason.bind(this), this.classReasonLength()),
    this.bb!.createScalarList<string>(this.downgradeInsDate.bind(this), this.downgradeInsDateLength()),
    this.bb!.createScalarList<string>(this.declassExemptionCode.bind(this), this.declassExemptionCodeLength()),
    this.createdAt(),
    this.createdBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: AirspaceControlOrder_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.rawFileUri = this.rawFileUri();
  _o.opExName = this.opExName();
  _o.originator = this.originator();
  _o.startTime = this.startTime();
  _o.stopTime = this.stopTime();
  _o.stopQualifier = this.stopQualifier();
  _o.opExInfo = this.opExInfo();
  _o.opExInfoAlt = this.opExInfoAlt();
  _o.planOrigNum = this.planOrigNum();
  _o.serialNum = this.serialNum();
  _o.month = this.month();
  _o.qualifier = this.qualifier();
  _o.qualSn = this.qualSn();
  _o.areaOfValidity = this.areaOfValidity();
  _o.acoSerialNum = this.acoSerialNum();
  _o.geoDatum = this.geoDatum();
  _o.acoComments = this.acoComments();
  _o.airspaceControlOrderReferences = this.bb!.createScalarList<string>(this.airspaceControlOrderReferences.bind(this), this.airspaceControlOrderReferencesLength());
  _o.airspaceControlMeansStatus = this.bb!.createScalarList<string>(this.airspaceControlMeansStatus.bind(this), this.airspaceControlMeansStatusLength());
  _o.undLnkTrk = this.bb!.createScalarList<string>(this.undLnkTrk.bind(this), this.undLnkTrkLength());
  _o.classSource = this.classSource();
  _o.classReason = this.bb!.createScalarList<string>(this.classReason.bind(this), this.classReasonLength());
  _o.downgradeInsDate = this.bb!.createScalarList<string>(this.downgradeInsDate.bind(this), this.downgradeInsDateLength());
  _o.declassExemptionCode = this.bb!.createScalarList<string>(this.declassExemptionCode.bind(this), this.declassExemptionCodeLength());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.sourceDl = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class AirspaceControlOrder_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public rawFileUri: string|Uint8Array|null = null,
  public opExName: string|Uint8Array|null = null,
  public originator: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public stopTime: string|Uint8Array|null = null,
  public stopQualifier: string|Uint8Array|null = null,
  public opExInfo: string|Uint8Array|null = null,
  public opExInfoAlt: string|Uint8Array|null = null,
  public planOrigNum: string|Uint8Array|null = null,
  public serialNum: string|Uint8Array|null = null,
  public month: string|Uint8Array|null = null,
  public qualifier: string|Uint8Array|null = null,
  public qualSn: number = 0,
  public areaOfValidity: string|Uint8Array|null = null,
  public acoSerialNum: string|Uint8Array|null = null,
  public geoDatum: string|Uint8Array|null = null,
  public acoComments: string|Uint8Array|null = null,
  public airspaceControlOrderReferences: (string)[] = [],
  public airspaceControlMeansStatus: (string)[] = [],
  public undLnkTrk: (string)[] = [],
  public classSource: string|Uint8Array|null = null,
  public classReason: (string)[] = [],
  public downgradeInsDate: (string)[] = [],
  public declassExemptionCode: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: AirspaceControlOrder_Full_dataMode_Enum = AirspaceControlOrder_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const rawFileUri = (this.rawFileUri !== null ? builder.createString(this.rawFileUri!) : 0);
  const opExName = (this.opExName !== null ? builder.createString(this.opExName!) : 0);
  const originator = (this.originator !== null ? builder.createString(this.originator!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const stopTime = (this.stopTime !== null ? builder.createString(this.stopTime!) : 0);
  const stopQualifier = (this.stopQualifier !== null ? builder.createString(this.stopQualifier!) : 0);
  const opExInfo = (this.opExInfo !== null ? builder.createString(this.opExInfo!) : 0);
  const opExInfoAlt = (this.opExInfoAlt !== null ? builder.createString(this.opExInfoAlt!) : 0);
  const planOrigNum = (this.planOrigNum !== null ? builder.createString(this.planOrigNum!) : 0);
  const serialNum = (this.serialNum !== null ? builder.createString(this.serialNum!) : 0);
  const month = (this.month !== null ? builder.createString(this.month!) : 0);
  const qualifier = (this.qualifier !== null ? builder.createString(this.qualifier!) : 0);
  const areaOfValidity = (this.areaOfValidity !== null ? builder.createString(this.areaOfValidity!) : 0);
  const acoSerialNum = (this.acoSerialNum !== null ? builder.createString(this.acoSerialNum!) : 0);
  const geoDatum = (this.geoDatum !== null ? builder.createString(this.geoDatum!) : 0);
  const acoComments = (this.acoComments !== null ? builder.createString(this.acoComments!) : 0);
  const airspaceControlOrderReferences = AirspaceControlOrder_Full.createAirspaceControlOrderReferencesVector(builder, builder.createObjectOffsetList(this.airspaceControlOrderReferences));
  const airspaceControlMeansStatus = AirspaceControlOrder_Full.createAirspaceControlMeansStatusVector(builder, builder.createObjectOffsetList(this.airspaceControlMeansStatus));
  const undLnkTrk = AirspaceControlOrder_Full.createUndLnkTrkVector(builder, builder.createObjectOffsetList(this.undLnkTrk));
  const classSource = (this.classSource !== null ? builder.createString(this.classSource!) : 0);
  const classReason = AirspaceControlOrder_Full.createClassReasonVector(builder, builder.createObjectOffsetList(this.classReason));
  const downgradeInsDate = AirspaceControlOrder_Full.createDowngradeInsDateVector(builder, builder.createObjectOffsetList(this.downgradeInsDate));
  const declassExemptionCode = AirspaceControlOrder_Full.createDeclassExemptionCodeVector(builder, builder.createObjectOffsetList(this.declassExemptionCode));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return AirspaceControlOrder_Full.createAirspaceControlOrder_Full(builder,
    id,
    classificationMarking,
    rawFileUri,
    opExName,
    originator,
    startTime,
    stopTime,
    stopQualifier,
    opExInfo,
    opExInfoAlt,
    planOrigNum,
    serialNum,
    month,
    qualifier,
    this.qualSn,
    areaOfValidity,
    acoSerialNum,
    geoDatum,
    acoComments,
    airspaceControlOrderReferences,
    airspaceControlMeansStatus,
    undLnkTrk,
    classSource,
    classReason,
    downgradeInsDate,
    declassExemptionCode,
    createdAt,
    createdBy,
    sourceDl,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
