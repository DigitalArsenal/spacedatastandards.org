// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AirTaskingOrder_Ingest_dataMode_Enum } from './AirTaskingOrder_Ingest_dataMode_Enum.js';


/**
 * /// Beta Version Air Tasking Order: The ATO is used to task air missions, assign cross force tasking as well as intraservice tasking.
 */
export class AirTaskingOrder_Ingest implements flatbuffers.IUnpackableObject<AirTaskingOrder_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirTaskingOrder_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirTaskingOrder_Ingest(bb:flatbuffers.ByteBuffer, obj?:AirTaskingOrder_Ingest):AirTaskingOrder_Ingest {
  return (obj || new AirTaskingOrder_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirTaskingOrder_Ingest(bb:flatbuffers.ByteBuffer, obj?:AirTaskingOrder_Ingest):AirTaskingOrder_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirTaskingOrder_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRT');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: POI-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: Example URI
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
 * Example: /// Example: DESERT WIND
 * Constraints: Minimum length = 1, Maximum length = 64
 */
opExerName():string|null
opExerName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
opExerName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The identifier of the originator of the message.
 * Example: /// Example: USCENTCOM
 * Constraints: Minimum length = 0, Maximum length = 36
 */
msgOriginator():string|null
msgOriginator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgOriginator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The unique message identifier sequentially assigned by the originator.
 * Example: /// Example: ATO A
 * Constraints: Minimum length = 0, Maximum length = 16
 */
msgSn():string|null
msgSn(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgSn(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The month in which the message originated.
 * Example: /// Example: OCT
 * Constraints: Minimum length = 0, Maximum length = 16
 */
msgMonth():string|null
msgMonth(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgMonth(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The qualifier which caveats the message status.
 * Example: /// Example: CHG
 * Constraints: Minimum length = 0, Maximum length = 8
 */
msgQualifier():string|null
msgQualifier(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgQualifier(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The indicator specifying an affirmative or a negatice condition for this message.
 * Example: /// Example: YES
 * Constraints: Minimum length = 0, Maximum length = 8
 */
ackReqInd():string|null
ackReqInd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ackReqInd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies textual data amplifying the data contained in the acknowledgement requirement indicator (ackRedInd) field or the unit required to acknowledge.
 * Example: /// Example: INST:45TS
 * Constraints: Minimum length = 0, Maximum length = 36
 */
ackUnitInstructions():string|null
ackUnitInstructions(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ackUnitInstructions(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The effective begin time for this ATO in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-10-25T12:00:00.123Z
 * Constraints: No constraints specified.
 */
beginTs():string|null
beginTs(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
beginTs(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The effective end time for this ATO in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-10-27T12:00:00.123Z
 * Constraints: No constraints specified.
 */
endTs():string|null
endTs(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTs(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
genText(index: number):string
genText(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
genText(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

genTextLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
acMsnTasking(index: number):string
acMsnTasking(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
acMsnTasking(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

acMsnTaskingLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A collection that specifies the naval flight operations for this ATO.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
navalFltOps(index: number):string
navalFltOps(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
navalFltOps(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

navalFltOpsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AirTaskingOrder_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AirTaskingOrder_Ingest_dataMode_Enum.REAL;
}

static startAirTaskingOrder_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(22);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rawFileUriOffset, 0);
}

static addOpExerName(builder:flatbuffers.Builder, opExerNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, opExerNameOffset, 0);
}

static addMsgOriginator(builder:flatbuffers.Builder, msgOriginatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, msgOriginatorOffset, 0);
}

static addMsgSn(builder:flatbuffers.Builder, msgSnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, msgSnOffset, 0);
}

static addMsgMonth(builder:flatbuffers.Builder, msgMonthOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, msgMonthOffset, 0);
}

static addMsgQualifier(builder:flatbuffers.Builder, msgQualifierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, msgQualifierOffset, 0);
}

static addAckReqInd(builder:flatbuffers.Builder, ackReqIndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, ackReqIndOffset, 0);
}

static addAckUnitInstructions(builder:flatbuffers.Builder, ackUnitInstructionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, ackUnitInstructionsOffset, 0);
}

static addBeginTs(builder:flatbuffers.Builder, beginTsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, beginTsOffset, 0);
}

static addEndTs(builder:flatbuffers.Builder, endTsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, endTsOffset, 0);
}

static addGenText(builder:flatbuffers.Builder, genTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, genTextOffset, 0);
}

static createGenTextVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGenTextVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAcMsnTasking(builder:flatbuffers.Builder, acMsnTaskingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, acMsnTaskingOffset, 0);
}

static createAcMsnTaskingVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAcMsnTaskingVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNavalFltOps(builder:flatbuffers.Builder, navalFltOpsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, navalFltOpsOffset, 0);
}

static createNavalFltOpsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNavalFltOpsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, sourceOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, sourceDlOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AirTaskingOrder_Ingest_dataMode_Enum) {
  builder.addFieldInt8(21, dataMode, AirTaskingOrder_Ingest_dataMode_Enum.REAL);
}

static endAirTaskingOrder_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirTaskingOrder_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRT');
}

static finishSizePrefixedAirTaskingOrder_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRT', true);
}

static createAirTaskingOrder_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, rawFileUriOffset:flatbuffers.Offset, opExerNameOffset:flatbuffers.Offset, msgOriginatorOffset:flatbuffers.Offset, msgSnOffset:flatbuffers.Offset, msgMonthOffset:flatbuffers.Offset, msgQualifierOffset:flatbuffers.Offset, ackReqIndOffset:flatbuffers.Offset, ackUnitInstructionsOffset:flatbuffers.Offset, beginTsOffset:flatbuffers.Offset, endTsOffset:flatbuffers.Offset, genTextOffset:flatbuffers.Offset, acMsnTaskingOffset:flatbuffers.Offset, navalFltOpsOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:AirTaskingOrder_Ingest_dataMode_Enum):flatbuffers.Offset {
  AirTaskingOrder_Ingest.startAirTaskingOrder_Ingest(builder);
  AirTaskingOrder_Ingest.addId(builder, idOffset);
  AirTaskingOrder_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  AirTaskingOrder_Ingest.addRawFileUri(builder, rawFileUriOffset);
  AirTaskingOrder_Ingest.addOpExerName(builder, opExerNameOffset);
  AirTaskingOrder_Ingest.addMsgOriginator(builder, msgOriginatorOffset);
  AirTaskingOrder_Ingest.addMsgSn(builder, msgSnOffset);
  AirTaskingOrder_Ingest.addMsgMonth(builder, msgMonthOffset);
  AirTaskingOrder_Ingest.addMsgQualifier(builder, msgQualifierOffset);
  AirTaskingOrder_Ingest.addAckReqInd(builder, ackReqIndOffset);
  AirTaskingOrder_Ingest.addAckUnitInstructions(builder, ackUnitInstructionsOffset);
  AirTaskingOrder_Ingest.addBeginTs(builder, beginTsOffset);
  AirTaskingOrder_Ingest.addEndTs(builder, endTsOffset);
  AirTaskingOrder_Ingest.addGenText(builder, genTextOffset);
  AirTaskingOrder_Ingest.addAcMsnTasking(builder, acMsnTaskingOffset);
  AirTaskingOrder_Ingest.addNavalFltOps(builder, navalFltOpsOffset);
  AirTaskingOrder_Ingest.addCreatedAt(builder, createdAtOffset);
  AirTaskingOrder_Ingest.addCreatedBy(builder, createdByOffset);
  AirTaskingOrder_Ingest.addSource(builder, sourceOffset);
  AirTaskingOrder_Ingest.addSourceDl(builder, sourceDlOffset);
  AirTaskingOrder_Ingest.addOrigin(builder, originOffset);
  AirTaskingOrder_Ingest.addOrigNetwork(builder, origNetworkOffset);
  AirTaskingOrder_Ingest.addDataMode(builder, dataMode);
  return AirTaskingOrder_Ingest.endAirTaskingOrder_Ingest(builder);
}

unpack(): AirTaskingOrder_IngestT {
  return new AirTaskingOrder_IngestT(
    this.id(),
    this.classificationMarking(),
    this.rawFileUri(),
    this.opExerName(),
    this.msgOriginator(),
    this.msgSn(),
    this.msgMonth(),
    this.msgQualifier(),
    this.ackReqInd(),
    this.ackUnitInstructions(),
    this.beginTs(),
    this.endTs(),
    this.bb!.createScalarList<string>(this.genText.bind(this), this.genTextLength()),
    this.bb!.createScalarList<string>(this.acMsnTasking.bind(this), this.acMsnTaskingLength()),
    this.bb!.createScalarList<string>(this.navalFltOps.bind(this), this.navalFltOpsLength()),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.sourceDl(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: AirTaskingOrder_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.rawFileUri = this.rawFileUri();
  _o.opExerName = this.opExerName();
  _o.msgOriginator = this.msgOriginator();
  _o.msgSn = this.msgSn();
  _o.msgMonth = this.msgMonth();
  _o.msgQualifier = this.msgQualifier();
  _o.ackReqInd = this.ackReqInd();
  _o.ackUnitInstructions = this.ackUnitInstructions();
  _o.beginTs = this.beginTs();
  _o.endTs = this.endTs();
  _o.genText = this.bb!.createScalarList<string>(this.genText.bind(this), this.genTextLength());
  _o.acMsnTasking = this.bb!.createScalarList<string>(this.acMsnTasking.bind(this), this.acMsnTaskingLength());
  _o.navalFltOps = this.bb!.createScalarList<string>(this.navalFltOps.bind(this), this.navalFltOpsLength());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.sourceDl = this.sourceDl();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class AirTaskingOrder_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public rawFileUri: string|Uint8Array|null = null,
  public opExerName: string|Uint8Array|null = null,
  public msgOriginator: string|Uint8Array|null = null,
  public msgSn: string|Uint8Array|null = null,
  public msgMonth: string|Uint8Array|null = null,
  public msgQualifier: string|Uint8Array|null = null,
  public ackReqInd: string|Uint8Array|null = null,
  public ackUnitInstructions: string|Uint8Array|null = null,
  public beginTs: string|Uint8Array|null = null,
  public endTs: string|Uint8Array|null = null,
  public genText: (string)[] = [],
  public acMsnTasking: (string)[] = [],
  public navalFltOps: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: AirTaskingOrder_Ingest_dataMode_Enum = AirTaskingOrder_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const rawFileUri = (this.rawFileUri !== null ? builder.createString(this.rawFileUri!) : 0);
  const opExerName = (this.opExerName !== null ? builder.createString(this.opExerName!) : 0);
  const msgOriginator = (this.msgOriginator !== null ? builder.createString(this.msgOriginator!) : 0);
  const msgSn = (this.msgSn !== null ? builder.createString(this.msgSn!) : 0);
  const msgMonth = (this.msgMonth !== null ? builder.createString(this.msgMonth!) : 0);
  const msgQualifier = (this.msgQualifier !== null ? builder.createString(this.msgQualifier!) : 0);
  const ackReqInd = (this.ackReqInd !== null ? builder.createString(this.ackReqInd!) : 0);
  const ackUnitInstructions = (this.ackUnitInstructions !== null ? builder.createString(this.ackUnitInstructions!) : 0);
  const beginTs = (this.beginTs !== null ? builder.createString(this.beginTs!) : 0);
  const endTs = (this.endTs !== null ? builder.createString(this.endTs!) : 0);
  const genText = AirTaskingOrder_Ingest.createGenTextVector(builder, builder.createObjectOffsetList(this.genText));
  const acMsnTasking = AirTaskingOrder_Ingest.createAcMsnTaskingVector(builder, builder.createObjectOffsetList(this.acMsnTasking));
  const navalFltOps = AirTaskingOrder_Ingest.createNavalFltOpsVector(builder, builder.createObjectOffsetList(this.navalFltOps));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return AirTaskingOrder_Ingest.createAirTaskingOrder_Ingest(builder,
    id,
    classificationMarking,
    rawFileUri,
    opExerName,
    msgOriginator,
    msgSn,
    msgMonth,
    msgQualifier,
    ackReqInd,
    ackUnitInstructions,
    beginTs,
    endTs,
    genText,
    acMsnTasking,
    navalFltOps,
    createdAt,
    createdBy,
    source,
    sourceDl,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
