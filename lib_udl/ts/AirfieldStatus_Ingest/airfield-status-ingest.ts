// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AirfieldStatus_Ingest_dataMode_Enum } from './airfield-status-ingest-data-mode-enum.js';


/**
 * /// The airfield status contains dynamic data of an airfield's capabilities.
 */
export class AirfieldStatus_Ingest implements flatbuffers.IUnpackableObject<AirfieldStatus_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirfieldStatus_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirfieldStatus_Ingest(bb:flatbuffers.ByteBuffer, obj?:AirfieldStatus_Ingest):AirfieldStatus_Ingest {
  return (obj || new AirfieldStatus_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirfieldStatus_Ingest(bb:flatbuffers.ByteBuffer, obj?:AirfieldStatus_Ingest):AirfieldStatus_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirfieldStatus_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRF');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Airfield for which this status is referencing.
 * Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idAirfield():string|null
idAirfield(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idAirfield(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate airfield identifier provided by the source.
 * Example: /// Example: AIRFIELD-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
altAirfieldId():string|null
altAirfieldId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altAirfieldId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Maximum on ground (MOG) number of high-reach/wide-body passenger aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
passengerServiceMog():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Maximum on ground (MOG) number of fleet aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
 * Example: /// Example: 4
 * Constraints: No constraints specified.
 */
fleetServiceMog():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Maximum on ground (MOG) number of high-reach/wide-body cargo aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
 * Example: /// Example: 8
 * Constraints: No constraints specified.
 */
cargoMog():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Maximum on ground (MOG) number of aircraft that can be simultaneously refueled based on spacing and manpower at the time of status.
 * Example: /// Example: 9
 * Constraints: No constraints specified.
 */
fuelMog():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array of fuel types available at the airfield. This array must be the same length as fuelQtys.
 * Example: /// Example: ['JP-8', 'Jet A', 'AVGAS']
 * Constraints: No constraints specified.
 */
fuelTypes(index: number):string
fuelTypes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
fuelTypes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

fuelTypesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of quantities for each fuel type at the airfield, in kilograms. The values in this array must correspond to the position index in fuelTypes. This array must be the same length as fuelTypes.
 * Example: /// Example: [263083.6, 286674.9, 18143.69]
 * Constraints: No constraints specified.
 */
fuelQtys(index: number):string
fuelQtys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
fuelQtys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

fuelQtysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Maximum on ground (MOG) number of aircraft that can be simultaneously ground handled for standard maintenance based on spacing and manpower at the time of status.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
mxMog():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Maximum on ground (MOG) number of aircraft due to items not directly related to the airfield infrastructure or aircraft servicing capability based on spacing and manpower at the time of status.
 * Example: /// Example: 4
 * Constraints: No constraints specified.
 */
operatingMog():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The number of aircraft that are currently on ground (COG) at the airfield.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
numCog():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Maximum on ground (MOG) number of working wide-body aircraft based on spacing and manpower at the time of status.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
wideWorkingMog():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Maximum on ground (MOG) number of parking wide-body aircraft based on spacing and manpower at the time of status.
 * Example: /// Example: 7
 * Constraints: No constraints specified.
 */
wideParkingMog():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Maximum on ground (MOG) number of working narrow-body aircraft based on spacing and manpower at the time of status.
 * Example: /// Example: 4
 * Constraints: No constraints specified.
 */
narrowWorkingMog():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Maximum on ground (MOG) number of parking narrow-body aircraft based on spacing and manpower at the time of status.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
narrowParkingMog():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array of material handling equipment types at the airfield. This array must be the same length as mheQtys.
 * Example: /// Example: ['30k', 'AT', '60k']
 * Constraints: No constraints specified.
 */
mheTypes(index: number):string
mheTypes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
mheTypes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

mheTypesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of quantities for each material handling equipment types at the airfield. The values in this array must correspond to the position index in mheTypes. This array must be the same length as mheTypes.
 * Example: /// Example: [1, 3, 1]
 * Constraints: No constraints specified.
 */
mheQtys(index: number):string
mheQtys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
mheQtys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

mheQtysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The level of medical support and capabilities available at the airfield.
 * Example: /// Example: Large Field Hospital
 * Constraints: Minimum length = 0, Maximum length = 64
 */
medCap():string|null
medCap(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
medCap(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The category of aircraft rescue and fire fighting (ARFF) services that are currently available at the airfield. Entries should include  the code (FAA or ICAO) and the category.
 * Example: /// Example: FAA-A
 * Constraints: Minimum length = 0, Maximum length = 64
 */
arffCat():string|null
arffCat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arffCat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The expected time to receive ground support equipment (e.g. power units, air units, cables, hoses, etc.), in minutes.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
gseTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The number or ID of primary runway at the airfield.
 * Example: /// Example: 35R
 * Constraints: Minimum length = 0, Maximum length = 16
 */
priRwyNum():string|null
priRwyNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
priRwyNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The primary runway condition reading value used for determining runway braking action, from 0 to 26. A value of 0 indicates braking action is poor or non-existent, where a value of 26 indicates braking action is good.
 * Example: /// Example: 23
 * Constraints: No constraints specified.
 */
rwyCondReading():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The primary runway friction factor which is dependent on the surface friction between the tires of the aircraft and the runway surface, from 0 to 100. A lower number indicates less friction and less braking response.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
rwyFrictionFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array of markings currently on the primary runway.
 * Example: /// Example: ['Aiming Point', 'Threshold']
 * Constraints: No constraints specified.
 */
rwyMarkings(index: number):string
rwyMarkings(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rwyMarkings(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rwyMarkingsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Description of the current status of the airfield.
 * Example: /// Example: Status message about the airfield.
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The primary frequency which the airfield is currently operating, in megahertz.
 * Example: /// Example: 123.45
 * Constraints: No constraints specified.
 */
priFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Array of slot types that an airfield requires a particular aircraft provide in order to consume a slot at this location.
 * Example: /// Example: ['PARKING', 'WORKING', 'LANDING']
 * Constraints: No constraints specified.
 */
slotTypesReq(index: number):string
slotTypesReq(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
slotTypesReq(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

slotTypesReqLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AirfieldStatus_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AirfieldStatus_Ingest_dataMode_Enum.REAL;
}

static startAirfieldStatus_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(36);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdAirfield(builder:flatbuffers.Builder, idAirfieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idAirfieldOffset, 0);
}

static addAltAirfieldId(builder:flatbuffers.Builder, altAirfieldIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, altAirfieldIdOffset, 0);
}

static addPassengerServiceMog(builder:flatbuffers.Builder, passengerServiceMog:number) {
  builder.addFieldInt32(4, passengerServiceMog, 0);
}

static addFleetServiceMog(builder:flatbuffers.Builder, fleetServiceMog:number) {
  builder.addFieldInt32(5, fleetServiceMog, 0);
}

static addCargoMog(builder:flatbuffers.Builder, cargoMog:number) {
  builder.addFieldInt32(6, cargoMog, 0);
}

static addFuelMog(builder:flatbuffers.Builder, fuelMog:number) {
  builder.addFieldInt32(7, fuelMog, 0);
}

static addFuelTypes(builder:flatbuffers.Builder, fuelTypesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, fuelTypesOffset, 0);
}

static createFuelTypesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFuelTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFuelQtys(builder:flatbuffers.Builder, fuelQtysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, fuelQtysOffset, 0);
}

static createFuelQtysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFuelQtysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMxMog(builder:flatbuffers.Builder, mxMog:number) {
  builder.addFieldInt32(10, mxMog, 0);
}

static addOperatingMog(builder:flatbuffers.Builder, operatingMog:number) {
  builder.addFieldInt32(11, operatingMog, 0);
}

static addNumCog(builder:flatbuffers.Builder, numCog:number) {
  builder.addFieldInt32(12, numCog, 0);
}

static addWideWorkingMog(builder:flatbuffers.Builder, wideWorkingMog:number) {
  builder.addFieldInt32(13, wideWorkingMog, 0);
}

static addWideParkingMog(builder:flatbuffers.Builder, wideParkingMog:number) {
  builder.addFieldInt32(14, wideParkingMog, 0);
}

static addNarrowWorkingMog(builder:flatbuffers.Builder, narrowWorkingMog:number) {
  builder.addFieldInt32(15, narrowWorkingMog, 0);
}

static addNarrowParkingMog(builder:flatbuffers.Builder, narrowParkingMog:number) {
  builder.addFieldInt32(16, narrowParkingMog, 0);
}

static addMheTypes(builder:flatbuffers.Builder, mheTypesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, mheTypesOffset, 0);
}

static createMheTypesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMheTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMheQtys(builder:flatbuffers.Builder, mheQtysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, mheQtysOffset, 0);
}

static createMheQtysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMheQtysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMedCap(builder:flatbuffers.Builder, medCapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, medCapOffset, 0);
}

static addArffCat(builder:flatbuffers.Builder, arffCatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, arffCatOffset, 0);
}

static addGseTime(builder:flatbuffers.Builder, gseTime:number) {
  builder.addFieldInt32(21, gseTime, 0);
}

static addPriRwyNum(builder:flatbuffers.Builder, priRwyNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, priRwyNumOffset, 0);
}

static addRwyCondReading(builder:flatbuffers.Builder, rwyCondReading:number) {
  builder.addFieldInt32(23, rwyCondReading, 0);
}

static addRwyFrictionFactor(builder:flatbuffers.Builder, rwyFrictionFactor:number) {
  builder.addFieldInt32(24, rwyFrictionFactor, 0);
}

static addRwyMarkings(builder:flatbuffers.Builder, rwyMarkingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, rwyMarkingsOffset, 0);
}

static createRwyMarkingsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRwyMarkingsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, messageOffset, 0);
}

static addPriFreq(builder:flatbuffers.Builder, priFreq:number) {
  builder.addFieldFloat64(27, priFreq, 0.0);
}

static addSlotTypesReq(builder:flatbuffers.Builder, slotTypesReqOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, slotTypesReqOffset, 0);
}

static createSlotTypesReqVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSlotTypesReqVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, createdByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AirfieldStatus_Ingest_dataMode_Enum) {
  builder.addFieldInt8(35, dataMode, AirfieldStatus_Ingest_dataMode_Enum.REAL);
}

static endAirfieldStatus_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirfieldStatus_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRF');
}

static finishSizePrefixedAirfieldStatus_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRF', true);
}

static createAirfieldStatus_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idAirfieldOffset:flatbuffers.Offset, altAirfieldIdOffset:flatbuffers.Offset, passengerServiceMog:number, fleetServiceMog:number, cargoMog:number, fuelMog:number, fuelTypesOffset:flatbuffers.Offset, fuelQtysOffset:flatbuffers.Offset, mxMog:number, operatingMog:number, numCog:number, wideWorkingMog:number, wideParkingMog:number, narrowWorkingMog:number, narrowParkingMog:number, mheTypesOffset:flatbuffers.Offset, mheQtysOffset:flatbuffers.Offset, medCapOffset:flatbuffers.Offset, arffCatOffset:flatbuffers.Offset, gseTime:number, priRwyNumOffset:flatbuffers.Offset, rwyCondReading:number, rwyFrictionFactor:number, rwyMarkingsOffset:flatbuffers.Offset, messageOffset:flatbuffers.Offset, priFreq:number, slotTypesReqOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:AirfieldStatus_Ingest_dataMode_Enum):flatbuffers.Offset {
  AirfieldStatus_Ingest.startAirfieldStatus_Ingest(builder);
  AirfieldStatus_Ingest.addId(builder, idOffset);
  AirfieldStatus_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  AirfieldStatus_Ingest.addIdAirfield(builder, idAirfieldOffset);
  AirfieldStatus_Ingest.addAltAirfieldId(builder, altAirfieldIdOffset);
  AirfieldStatus_Ingest.addPassengerServiceMog(builder, passengerServiceMog);
  AirfieldStatus_Ingest.addFleetServiceMog(builder, fleetServiceMog);
  AirfieldStatus_Ingest.addCargoMog(builder, cargoMog);
  AirfieldStatus_Ingest.addFuelMog(builder, fuelMog);
  AirfieldStatus_Ingest.addFuelTypes(builder, fuelTypesOffset);
  AirfieldStatus_Ingest.addFuelQtys(builder, fuelQtysOffset);
  AirfieldStatus_Ingest.addMxMog(builder, mxMog);
  AirfieldStatus_Ingest.addOperatingMog(builder, operatingMog);
  AirfieldStatus_Ingest.addNumCog(builder, numCog);
  AirfieldStatus_Ingest.addWideWorkingMog(builder, wideWorkingMog);
  AirfieldStatus_Ingest.addWideParkingMog(builder, wideParkingMog);
  AirfieldStatus_Ingest.addNarrowWorkingMog(builder, narrowWorkingMog);
  AirfieldStatus_Ingest.addNarrowParkingMog(builder, narrowParkingMog);
  AirfieldStatus_Ingest.addMheTypes(builder, mheTypesOffset);
  AirfieldStatus_Ingest.addMheQtys(builder, mheQtysOffset);
  AirfieldStatus_Ingest.addMedCap(builder, medCapOffset);
  AirfieldStatus_Ingest.addArffCat(builder, arffCatOffset);
  AirfieldStatus_Ingest.addGseTime(builder, gseTime);
  AirfieldStatus_Ingest.addPriRwyNum(builder, priRwyNumOffset);
  AirfieldStatus_Ingest.addRwyCondReading(builder, rwyCondReading);
  AirfieldStatus_Ingest.addRwyFrictionFactor(builder, rwyFrictionFactor);
  AirfieldStatus_Ingest.addRwyMarkings(builder, rwyMarkingsOffset);
  AirfieldStatus_Ingest.addMessage(builder, messageOffset);
  AirfieldStatus_Ingest.addPriFreq(builder, priFreq);
  AirfieldStatus_Ingest.addSlotTypesReq(builder, slotTypesReqOffset);
  AirfieldStatus_Ingest.addCreatedAt(builder, createdAtOffset);
  AirfieldStatus_Ingest.addCreatedBy(builder, createdByOffset);
  AirfieldStatus_Ingest.addSourceDl(builder, sourceDlOffset);
  AirfieldStatus_Ingest.addSource(builder, sourceOffset);
  AirfieldStatus_Ingest.addOrigin(builder, originOffset);
  AirfieldStatus_Ingest.addOrigNetwork(builder, origNetworkOffset);
  AirfieldStatus_Ingest.addDataMode(builder, dataMode);
  return AirfieldStatus_Ingest.endAirfieldStatus_Ingest(builder);
}

unpack(): AirfieldStatus_IngestT {
  return new AirfieldStatus_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idAirfield(),
    this.altAirfieldId(),
    this.passengerServiceMog(),
    this.fleetServiceMog(),
    this.cargoMog(),
    this.fuelMog(),
    this.bb!.createScalarList<string>(this.fuelTypes.bind(this), this.fuelTypes_Length()),
    this.bb!.createScalarList<string>(this.fuelQtys.bind(this), this.fuelQtys_Length()),
    this.mxMog(),
    this.operatingMog(),
    this.numCog(),
    this.wideWorkingMog(),
    this.wideParkingMog(),
    this.narrowWorkingMog(),
    this.narrowParkingMog(),
    this.bb!.createScalarList<string>(this.mheTypes.bind(this), this.mheTypes_Length()),
    this.bb!.createScalarList<string>(this.mheQtys.bind(this), this.mheQtys_Length()),
    this.medCap(),
    this.arffCat(),
    this.gseTime(),
    this.priRwyNum(),
    this.rwyCondReading(),
    this.rwyFrictionFactor(),
    this.bb!.createScalarList<string>(this.rwyMarkings.bind(this), this.rwyMarkings_Length()),
    this.message(),
    this.priFreq(),
    this.bb!.createScalarList<string>(this.slotTypesReq.bind(this), this.slotTypesReq_Length()),
    this.createdAt(),
    this.createdBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: AirfieldStatus_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idAirfield = this.idAirfield();
  _o.altAirfieldId = this.altAirfieldId();
  _o.passengerServiceMOG = this.passengerServiceMog();
  _o.fleetServiceMOG = this.fleetServiceMog();
  _o.cargoMOG = this.cargoMog();
  _o.fuelMOG = this.fuelMog();
  _o.fuelTypes = this.bb!.createScalarList<string>(this.fuelTypes.bind(this), this.fuelTypes_Length());
  _o.fuelQtys = this.bb!.createScalarList<string>(this.fuelQtys.bind(this), this.fuelQtys_Length());
  _o.mxMOG = this.mxMog();
  _o.operatingMOG = this.operatingMog();
  _o.numCOG = this.numCog();
  _o.wideWorkingMOG = this.wideWorkingMog();
  _o.wideParkingMOG = this.wideParkingMog();
  _o.narrowWorkingMOG = this.narrowWorkingMog();
  _o.narrowParkingMOG = this.narrowParkingMog();
  _o.mheTypes = this.bb!.createScalarList<string>(this.mheTypes.bind(this), this.mheTypes_Length());
  _o.mheQtys = this.bb!.createScalarList<string>(this.mheQtys.bind(this), this.mheQtys_Length());
  _o.medCap = this.medCap();
  _o.arffCat = this.arffCat();
  _o.gseTime = this.gseTime();
  _o.priRwyNum = this.priRwyNum();
  _o.rwyCondReading = this.rwyCondReading();
  _o.rwyFrictionFactor = this.rwyFrictionFactor();
  _o.rwyMarkings = this.bb!.createScalarList<string>(this.rwyMarkings.bind(this), this.rwyMarkings_Length());
  _o.message = this.message();
  _o.priFreq = this.priFreq();
  _o.slotTypesReq = this.bb!.createScalarList<string>(this.slotTypesReq.bind(this), this.slotTypesReq_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class AirfieldStatus_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idAirfield: string|Uint8Array|null = null,
  public altAirfieldId: string|Uint8Array|null = null,
  public passengerServiceMOG: number = 0,
  public fleetServiceMOG: number = 0,
  public cargoMOG: number = 0,
  public fuelMOG: number = 0,
  public fuelTypes: (string)[] = [],
  public fuelQtys: (string)[] = [],
  public mxMOG: number = 0,
  public operatingMOG: number = 0,
  public numCOG: number = 0,
  public wideWorkingMOG: number = 0,
  public wideParkingMOG: number = 0,
  public narrowWorkingMOG: number = 0,
  public narrowParkingMOG: number = 0,
  public mheTypes: (string)[] = [],
  public mheQtys: (string)[] = [],
  public medCap: string|Uint8Array|null = null,
  public arffCat: string|Uint8Array|null = null,
  public gseTime: number = 0,
  public priRwyNum: string|Uint8Array|null = null,
  public rwyCondReading: number = 0,
  public rwyFrictionFactor: number = 0,
  public rwyMarkings: (string)[] = [],
  public message: string|Uint8Array|null = null,
  public priFreq: number = 0.0,
  public slotTypesReq: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: AirfieldStatus_Ingest_dataMode_Enum = AirfieldStatus_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idAirfield = (this.idAirfield !== null ? builder.createString(this.idAirfield!) : 0);
  const altAirfieldId = (this.altAirfieldId !== null ? builder.createString(this.altAirfieldId!) : 0);
  const fuelTypes = AirfieldStatus_Ingest.createFuelTypesVector(builder, builder.createObjectOffsetList(this.fuelTypes));
  const fuelQtys = AirfieldStatus_Ingest.createFuelQtysVector(builder, builder.createObjectOffsetList(this.fuelQtys));
  const mheTypes = AirfieldStatus_Ingest.createMheTypesVector(builder, builder.createObjectOffsetList(this.mheTypes));
  const mheQtys = AirfieldStatus_Ingest.createMheQtysVector(builder, builder.createObjectOffsetList(this.mheQtys));
  const medCap = (this.medCap !== null ? builder.createString(this.medCap!) : 0);
  const arffCat = (this.arffCat !== null ? builder.createString(this.arffCat!) : 0);
  const priRwyNum = (this.priRwyNum !== null ? builder.createString(this.priRwyNum!) : 0);
  const rwyMarkings = AirfieldStatus_Ingest.createRwyMarkingsVector(builder, builder.createObjectOffsetList(this.rwyMarkings));
  const message = (this.message !== null ? builder.createString(this.message!) : 0);
  const slotTypesReq = AirfieldStatus_Ingest.createSlotTypesReqVector(builder, builder.createObjectOffsetList(this.slotTypesReq));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return AirfieldStatus_Ingest.createAirfieldStatus_Ingest(builder,
    id,
    classificationMarking,
    idAirfield,
    altAirfieldId,
    this.passengerServiceMOG,
    this.fleetServiceMOG,
    this.cargoMOG,
    this.fuelMOG,
    fuelTypes,
    fuelQtys,
    this.mxMOG,
    this.operatingMOG,
    this.numCOG,
    this.wideWorkingMOG,
    this.wideParkingMOG,
    this.narrowWorkingMOG,
    this.narrowParkingMOG,
    mheTypes,
    mheQtys,
    medCap,
    arffCat,
    this.gseTime,
    priRwyNum,
    this.rwyCondReading,
    this.rwyFrictionFactor,
    rwyMarkings,
    message,
    this.priFreq,
    slotTypesReq,
    createdAt,
    createdBy,
    sourceDL,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
