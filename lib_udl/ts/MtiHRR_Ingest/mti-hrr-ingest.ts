// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Data on High-Range Resolution (HRR) targets or High Range Resolution Range Doppler Maps (RDM) for a specified area.
 */
export class MtiHRR_Ingest implements flatbuffers.IUnpackableObject<MtiHRR_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MtiHRR_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMtiHRR_Ingest(bb:flatbuffers.ByteBuffer, obj?:MtiHRR_Ingest):MtiHRR_Ingest {
  return (obj || new MtiHRR_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMtiHRR_Ingest(bb:flatbuffers.ByteBuffer, obj?:MtiHRR_Ingest):MtiHRR_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MtiHRR_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MTIH');
}

/**
 * Sequential count of a revisit of the bounding area for a given job ID.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
h2():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
h3():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Flag to indicate the last dwell of the revisit.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
h4():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Sequential index of the associated MTI Report.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
h5():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of Range Doppler pixels that exceed target scatterer threshold and are reported in this segment.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
h6():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of Range Bins/Samples in a Range Doppler Chip.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
h7():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of Doppler bins in a Range-Doppler chip.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
h8():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The Peak Scatter returns the maximum power level (e.g. in milliwatts, or dBm) registered by the sensor.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
h9():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Detection threshold used to isolate significant target scatterer pixels, expressed as power relative to clutter mean in negative quarter-decibels.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
h10():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * 3dB range impulse response of the radar, expressed in centimeters.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
h11():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Slant Range pixel spacing after over sampling, expressed in centimeters.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
h12():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * 3dB Doppler resolution of the radar, expressed in Hertz.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
h13():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Doppler pixel spacing after over sampling, expressed in Hertz.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
h14():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Center Frequency of the radar in GHz.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
h15():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Enumeration table denoting the compression technique used.
 * Example: /// Example: TABLE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
h16():string|null
h16(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
h16(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Enumeration table indicating the spectral weighting used in the range compression process.
 * Example: /// Example: TABLE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
h17():string|null
h17(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
h17(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Enumeration table indicating the spectral weighting used in the cross-range or Doppler compression process.
 * Example: /// Example: TABLE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
h18():string|null
h18(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
h18(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Initial power of the peak scatterer, expressed in dB.
 * Example: /// Example: 12.23
 * Constraints: No constraints specified.
 */
h19():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * RCS of the peak scatterer, expressed in half-decibels (dB/2).
 * Example: /// Example: 117
 * Constraints: No constraints specified.
 */
h20():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * When the RDM does not correlate to a single MTI report index or when the center range bin does not correlate to the center of the dwell; provide the range sample offset in meters from Dwell Center (positive is away from the sensor) of the first scatterer record.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
h21():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * When the RDM does not correlate to a single MTI report index or the center doppler bin does not correlate to the doppler centroid of the dwell; Doppler sample value in Hz of the first scatterer record.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
h22():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Enumeration field which designates the type of data being delivered.
 * Example: /// Example: FIELD
 * Constraints: Minimum length = 0, Maximum length = 32
 */
h23():string|null
h23(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
h23(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag field to indicate the additional signal processing techniques applied to the data.
 * Example: /// Example: FLAG
 * Constraints: Minimum length = 0, Maximum length = 64
 */
h24():string|null
h24(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
h24(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of pixels in the range dimension of the chip.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
h27():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Distance from Range Bin to closest edge in the entire chip, expressed in centimeters.
 * Example: /// Example: 1234567890
 * Constraints: No constraints specified.
 */
h28():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

/**
 * Relative velocity to skin line.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
h29():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Computed object length based upon HRR profile, in meters.
 * Example: /// Example: 22
 * Constraints: No constraints specified.
 */
h30():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Standard deviation of estimate of the object length, expressed in meters.
 * Example: /// Example: 55
 * Constraints: No constraints specified.
 */
h31():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Standard deviation of estimate of the object length, expressed in meters.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
h32(index: number):string
h32(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
h32(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

h32Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMtiHRR_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(29);
}

static addH2(builder:flatbuffers.Builder, h2:number) {
  builder.addFieldInt32(0, h2, 0);
}

static addH3(builder:flatbuffers.Builder, h3:number) {
  builder.addFieldInt32(1, h3, 0);
}

static addH4(builder:flatbuffers.Builder, h4:boolean) {
  builder.addFieldInt8(2, +h4, +false);
}

static addH5(builder:flatbuffers.Builder, h5:number) {
  builder.addFieldInt32(3, h5, 0);
}

static addH6(builder:flatbuffers.Builder, h6:number) {
  builder.addFieldInt32(4, h6, 0);
}

static addH7(builder:flatbuffers.Builder, h7:number) {
  builder.addFieldInt32(5, h7, 0);
}

static addH8(builder:flatbuffers.Builder, h8:number) {
  builder.addFieldInt32(6, h8, 0);
}

static addH9(builder:flatbuffers.Builder, h9:number) {
  builder.addFieldInt32(7, h9, 0);
}

static addH10(builder:flatbuffers.Builder, h10:number) {
  builder.addFieldInt32(8, h10, 0);
}

static addH11(builder:flatbuffers.Builder, h11:number) {
  builder.addFieldFloat64(9, h11, 0.0);
}

static addH12(builder:flatbuffers.Builder, h12:number) {
  builder.addFieldFloat64(10, h12, 0.0);
}

static addH13(builder:flatbuffers.Builder, h13:number) {
  builder.addFieldFloat64(11, h13, 0.0);
}

static addH14(builder:flatbuffers.Builder, h14:number) {
  builder.addFieldFloat64(12, h14, 0.0);
}

static addH15(builder:flatbuffers.Builder, h15:number) {
  builder.addFieldFloat64(13, h15, 0.0);
}

static addH16(builder:flatbuffers.Builder, h16Offset:flatbuffers.Offset) {
  builder.addFieldOffset(14, h16Offset, 0);
}

static addH17(builder:flatbuffers.Builder, h17Offset:flatbuffers.Offset) {
  builder.addFieldOffset(15, h17Offset, 0);
}

static addH18(builder:flatbuffers.Builder, h18Offset:flatbuffers.Offset) {
  builder.addFieldOffset(16, h18Offset, 0);
}

static addH19(builder:flatbuffers.Builder, h19:number) {
  builder.addFieldFloat64(17, h19, 0.0);
}

static addH20(builder:flatbuffers.Builder, h20:number) {
  builder.addFieldInt32(18, h20, 0);
}

static addH21(builder:flatbuffers.Builder, h21:number) {
  builder.addFieldInt32(19, h21, 0);
}

static addH22(builder:flatbuffers.Builder, h22:number) {
  builder.addFieldInt32(20, h22, 0);
}

static addH23(builder:flatbuffers.Builder, h23Offset:flatbuffers.Offset) {
  builder.addFieldOffset(21, h23Offset, 0);
}

static addH24(builder:flatbuffers.Builder, h24Offset:flatbuffers.Offset) {
  builder.addFieldOffset(22, h24Offset, 0);
}

static addH27(builder:flatbuffers.Builder, h27:number) {
  builder.addFieldInt32(23, h27, 0);
}

static addH28(builder:flatbuffers.Builder, h28:bigint) {
  builder.addFieldInt64(24, h28, BigInt('0'));
}

static addH29(builder:flatbuffers.Builder, h29:number) {
  builder.addFieldInt32(25, h29, 0);
}

static addH30(builder:flatbuffers.Builder, h30:number) {
  builder.addFieldInt32(26, h30, 0);
}

static addH31(builder:flatbuffers.Builder, h31:number) {
  builder.addFieldInt32(27, h31, 0);
}

static addH32(builder:flatbuffers.Builder, h32Offset:flatbuffers.Offset) {
  builder.addFieldOffset(28, h32Offset, 0);
}

static createH32Vector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startH32Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMtiHRR_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMtiHRR_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIH');
}

static finishSizePrefixedMtiHRR_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIH', true);
}

static createMtiHRR_Ingest(builder:flatbuffers.Builder, h2:number, h3:number, h4:boolean, h5:number, h6:number, h7:number, h8:number, h9:number, h10:number, h11:number, h12:number, h13:number, h14:number, h15:number, h16Offset:flatbuffers.Offset, h17Offset:flatbuffers.Offset, h18Offset:flatbuffers.Offset, h19:number, h20:number, h21:number, h22:number, h23Offset:flatbuffers.Offset, h24Offset:flatbuffers.Offset, h27:number, h28:bigint, h29:number, h30:number, h31:number, h32Offset:flatbuffers.Offset):flatbuffers.Offset {
  MtiHRR_Ingest.startMtiHRR_Ingest(builder);
  MtiHRR_Ingest.addH2(builder, h2);
  MtiHRR_Ingest.addH3(builder, h3);
  MtiHRR_Ingest.addH4(builder, h4);
  MtiHRR_Ingest.addH5(builder, h5);
  MtiHRR_Ingest.addH6(builder, h6);
  MtiHRR_Ingest.addH7(builder, h7);
  MtiHRR_Ingest.addH8(builder, h8);
  MtiHRR_Ingest.addH9(builder, h9);
  MtiHRR_Ingest.addH10(builder, h10);
  MtiHRR_Ingest.addH11(builder, h11);
  MtiHRR_Ingest.addH12(builder, h12);
  MtiHRR_Ingest.addH13(builder, h13);
  MtiHRR_Ingest.addH14(builder, h14);
  MtiHRR_Ingest.addH15(builder, h15);
  MtiHRR_Ingest.addH16(builder, h16Offset);
  MtiHRR_Ingest.addH17(builder, h17Offset);
  MtiHRR_Ingest.addH18(builder, h18Offset);
  MtiHRR_Ingest.addH19(builder, h19);
  MtiHRR_Ingest.addH20(builder, h20);
  MtiHRR_Ingest.addH21(builder, h21);
  MtiHRR_Ingest.addH22(builder, h22);
  MtiHRR_Ingest.addH23(builder, h23Offset);
  MtiHRR_Ingest.addH24(builder, h24Offset);
  MtiHRR_Ingest.addH27(builder, h27);
  MtiHRR_Ingest.addH28(builder, h28);
  MtiHRR_Ingest.addH29(builder, h29);
  MtiHRR_Ingest.addH30(builder, h30);
  MtiHRR_Ingest.addH31(builder, h31);
  MtiHRR_Ingest.addH32(builder, h32Offset);
  return MtiHRR_Ingest.endMtiHRR_Ingest(builder);
}

unpack(): MtiHRR_IngestT {
  return new MtiHRR_IngestT(
    this.h2(),
    this.h3(),
    this.h4(),
    this.h5(),
    this.h6(),
    this.h7(),
    this.h8(),
    this.h9(),
    this.h10(),
    this.h11(),
    this.h12(),
    this.h13(),
    this.h14(),
    this.h15(),
    this.h16(),
    this.h17(),
    this.h18(),
    this.h19(),
    this.h20(),
    this.h21(),
    this.h22(),
    this.h23(),
    this.h24(),
    this.h27(),
    this.h28(),
    this.h29(),
    this.h30(),
    this.h31(),
    this.bb!.createScalarList<string>(this.h32.bind(this), this.h32_Length())
  );
}


unpackTo(_o: MtiHRR_IngestT): void {
  _o.h2 = this.h2();
  _o.h3 = this.h3();
  _o.h4 = this.h4();
  _o.h5 = this.h5();
  _o.h6 = this.h6();
  _o.h7 = this.h7();
  _o.h8 = this.h8();
  _o.h9 = this.h9();
  _o.h10 = this.h10();
  _o.h11 = this.h11();
  _o.h12 = this.h12();
  _o.h13 = this.h13();
  _o.h14 = this.h14();
  _o.h15 = this.h15();
  _o.h16 = this.h16();
  _o.h17 = this.h17();
  _o.h18 = this.h18();
  _o.h19 = this.h19();
  _o.h20 = this.h20();
  _o.h21 = this.h21();
  _o.h22 = this.h22();
  _o.h23 = this.h23();
  _o.h24 = this.h24();
  _o.h27 = this.h27();
  _o.h28 = this.h28();
  _o.h29 = this.h29();
  _o.h30 = this.h30();
  _o.h31 = this.h31();
  _o.h32 = this.bb!.createScalarList<string>(this.h32.bind(this), this.h32_Length());
}
}

export class MtiHRR_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public h2: number = 0,
  public h3: number = 0,
  public h4: boolean = false,
  public h5: number = 0,
  public h6: number = 0,
  public h7: number = 0,
  public h8: number = 0,
  public h9: number = 0,
  public h10: number = 0,
  public h11: number = 0.0,
  public h12: number = 0.0,
  public h13: number = 0.0,
  public h14: number = 0.0,
  public h15: number = 0.0,
  public h16: string|Uint8Array|null = null,
  public h17: string|Uint8Array|null = null,
  public h18: string|Uint8Array|null = null,
  public h19: number = 0.0,
  public h20: number = 0,
  public h21: number = 0,
  public h22: number = 0,
  public h23: string|Uint8Array|null = null,
  public h24: string|Uint8Array|null = null,
  public h27: number = 0,
  public h28: bigint = BigInt('0'),
  public h29: number = 0,
  public h30: number = 0,
  public h31: number = 0,
  public h32: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const h16 = (this.h16 !== null ? builder.createString(this.h16!) : 0);
  const h17 = (this.h17 !== null ? builder.createString(this.h17!) : 0);
  const h18 = (this.h18 !== null ? builder.createString(this.h18!) : 0);
  const h23 = (this.h23 !== null ? builder.createString(this.h23!) : 0);
  const h24 = (this.h24 !== null ? builder.createString(this.h24!) : 0);
  const h32 = MtiHRR_Ingest.createH32Vector(builder, builder.createObjectOffsetList(this.h32));

  return MtiHRR_Ingest.createMtiHRR_Ingest(builder,
    this.h2,
    this.h3,
    this.h4,
    this.h5,
    this.h6,
    this.h7,
    this.h8,
    this.h9,
    this.h10,
    this.h11,
    this.h12,
    this.h13,
    this.h14,
    this.h15,
    h16,
    h17,
    h18,
    this.h19,
    this.h20,
    this.h21,
    this.h22,
    h23,
    h24,
    this.h27,
    this.h28,
    this.h29,
    this.h30,
    this.h31,
    h32
  );
}
}
