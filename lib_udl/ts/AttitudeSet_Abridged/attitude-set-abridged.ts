// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AttitudeSet_Abridged_dataMode_Enum } from './attitude-set-abridged-data-mode-enum.js';


/**
 * /// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.
 */
export class AttitudeSet_Abridged implements flatbuffers.IUnpackableObject<AttitudeSet_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AttitudeSet_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAttitudeSet_Abridged(bb:flatbuffers.ByteBuffer, obj?:AttitudeSet_Abridged):AttitudeSet_Abridged {
  return (obj || new AttitudeSet_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAttitudeSet_Abridged(bb:flatbuffers.ByteBuffer, obj?:AttitudeSet_Abridged):AttitudeSet_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AttitudeSet_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ATTI');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: ATTITUDESET-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the on-orbit satellite to which this attitude set applies.
 * Example: /// Example: 41947
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the on-orbit object to which this attitude set applies.
 * Example: /// Example: 41947
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.
 * Example: /// Example: D6593
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of attitude message or messages associated with this set.
 * AEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.
 * APM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.
 * Example: /// Example: AEM
 * Constraints: Minimum length = 1, Maximum length = 3
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.
 * Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
 * Constraints: Minimum length = 0, Maximum length = 36
 */
esId():string|null
esId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
esId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.
 * Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.
 * Example: /// Example: 2022-07-07T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.
 * Example: /// Example: 2022-07-07T18:00:00.654321Z
 * Constraints: No constraints specified.
 */
endTime():string|null
endTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
 * Example: /// Example: SCBODY
 * Constraints: Minimum length = 1, Maximum length = 36
 */
frame1():string|null
frame1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
frame1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
 * Example: /// Example: J2000
 * Constraints: Minimum length = 1, Maximum length = 36
 */
frame2():string|null
frame2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
frame2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of attitude records contained in this set.
 * Example: /// Example: 120
 * Constraints: No constraints specified.
 */
numPoints():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
 * Example: /// Example: 60
 * Constraints: No constraints specified.
 */
stepSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Initial precession angle (ECI J2000 frame) in degrees.
 * Example: /// Example: 30.5
 * Constraints: No constraints specified.
 */
precAngleInit():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Initial spin angle (ECI J2000 frame) in degrees.
 * Example: /// Example: 25.5
 * Constraints: No constraints specified.
 */
spinAngleInit():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. 
 * The following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.
 * Example: /// Example: 123
 * Constraints: Minimum length = 0, Maximum length = 3
 */
eulerRotSeq():string|null
eulerRotSeq(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eulerRotSeq(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Recommended interpolation method for estimating attitude ephemeris data.
 * Example: /// Example: LINEAR
 * Constraints: Minimum length = 0, Maximum length = 16
 */
interpolator():string|null
interpolator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
interpolator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Recommended polynomial interpolation degree.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
interpolatorDegree():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional notes/comments for this attitude set.
 * Example: /// Example: Notes for this attitude set
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-07-05T12:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AttitudeSet_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AttitudeSet_Abridged_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAttitudeSet_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(27);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(3, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, origObjectIdOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, typeOffset, 0);
}

static addEsId(builder:flatbuffers.Builder, esIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, esIdOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, idSensorOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, origSensorIdOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, startTimeOffset, 0);
}

static addEndTime(builder:flatbuffers.Builder, endTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, endTimeOffset, 0);
}

static addFrame1(builder:flatbuffers.Builder, frame1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(11, frame1Offset, 0);
}

static addFrame2(builder:flatbuffers.Builder, frame2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(12, frame2Offset, 0);
}

static addNumPoints(builder:flatbuffers.Builder, numPoints:number) {
  builder.addFieldInt32(13, numPoints, 0);
}

static addStepSize(builder:flatbuffers.Builder, stepSize:number) {
  builder.addFieldInt32(14, stepSize, 0);
}

static addPrecAngleInit(builder:flatbuffers.Builder, precAngleInit:number) {
  builder.addFieldFloat64(15, precAngleInit, 0.0);
}

static addSpinAngleInit(builder:flatbuffers.Builder, spinAngleInit:number) {
  builder.addFieldFloat64(16, spinAngleInit, 0.0);
}

static addEulerRotSeq(builder:flatbuffers.Builder, eulerRotSeqOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, eulerRotSeqOffset, 0);
}

static addInterpolator(builder:flatbuffers.Builder, interpolatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, interpolatorOffset, 0);
}

static addInterpolatorDegree(builder:flatbuffers.Builder, interpolatorDegree:number) {
  builder.addFieldInt32(19, interpolatorDegree, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, notesOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AttitudeSet_Abridged_dataMode_Enum) {
  builder.addFieldInt8(25, dataMode, AttitudeSet_Abridged_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, origNetworkOffset, 0);
}

static endAttitudeSet_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAttitudeSet_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ATTI');
}

static finishSizePrefixedAttitudeSet_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ATTI', true);
}

static createAttitudeSet_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, esIdOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, endTimeOffset:flatbuffers.Offset, frame1Offset:flatbuffers.Offset, frame2Offset:flatbuffers.Offset, numPoints:number, stepSize:number, precAngleInit:number, spinAngleInit:number, eulerRotSeqOffset:flatbuffers.Offset, interpolatorOffset:flatbuffers.Offset, interpolatorDegree:number, notesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:AttitudeSet_Abridged_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  AttitudeSet_Abridged.startAttitudeSet_Abridged(builder);
  AttitudeSet_Abridged.addId(builder, idOffset);
  AttitudeSet_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  AttitudeSet_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
  AttitudeSet_Abridged.addSatNo(builder, satNo);
  AttitudeSet_Abridged.addOrigObjectId(builder, origObjectIdOffset);
  AttitudeSet_Abridged.addType(builder, typeOffset);
  AttitudeSet_Abridged.addEsId(builder, esIdOffset);
  AttitudeSet_Abridged.addIdSensor(builder, idSensorOffset);
  AttitudeSet_Abridged.addOrigSensorId(builder, origSensorIdOffset);
  AttitudeSet_Abridged.addStartTime(builder, startTimeOffset);
  AttitudeSet_Abridged.addEndTime(builder, endTimeOffset);
  AttitudeSet_Abridged.addFrame1(builder, frame1Offset);
  AttitudeSet_Abridged.addFrame2(builder, frame2Offset);
  AttitudeSet_Abridged.addNumPoints(builder, numPoints);
  AttitudeSet_Abridged.addStepSize(builder, stepSize);
  AttitudeSet_Abridged.addPrecAngleInit(builder, precAngleInit);
  AttitudeSet_Abridged.addSpinAngleInit(builder, spinAngleInit);
  AttitudeSet_Abridged.addEulerRotSeq(builder, eulerRotSeqOffset);
  AttitudeSet_Abridged.addInterpolator(builder, interpolatorOffset);
  AttitudeSet_Abridged.addInterpolatorDegree(builder, interpolatorDegree);
  AttitudeSet_Abridged.addNotes(builder, notesOffset);
  AttitudeSet_Abridged.addCreatedAt(builder, createdAtOffset);
  AttitudeSet_Abridged.addCreatedBy(builder, createdByOffset);
  AttitudeSet_Abridged.addSource(builder, sourceOffset);
  AttitudeSet_Abridged.addOrigin(builder, originOffset);
  AttitudeSet_Abridged.addDataMode(builder, dataMode);
  AttitudeSet_Abridged.addOrigNetwork(builder, origNetworkOffset);
  return AttitudeSet_Abridged.endAttitudeSet_Abridged(builder);
}

unpack(): AttitudeSet_AbridgedT {
  return new AttitudeSet_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.type(),
    this.esId(),
    this.idSensor(),
    this.origSensorId(),
    this.startTime(),
    this.endTime(),
    this.frame1(),
    this.frame2(),
    this.numPoints(),
    this.stepSize(),
    this.precAngleInit(),
    this.spinAngleInit(),
    this.eulerRotSeq(),
    this.interpolator(),
    this.interpolatorDegree(),
    this.notes(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: AttitudeSet_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.type = this.type();
  _o.esId = this.esId();
  _o.idSensor = this.idSensor();
  _o.origSensorId = this.origSensorId();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.frame1 = this.frame1();
  _o.frame2 = this.frame2();
  _o.numPoints = this.numPoints();
  _o.stepSize = this.stepSize();
  _o.precAngleInit = this.precAngleInit();
  _o.spinAngleInit = this.spinAngleInit();
  _o.eulerRotSeq = this.eulerRotSeq();
  _o.interpolator = this.interpolator();
  _o.interpolatorDegree = this.interpolatorDegree();
  _o.notes = this.notes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class AttitudeSet_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public esId: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public endTime: string|Uint8Array|null = null,
  public frame1: string|Uint8Array|null = null,
  public frame2: string|Uint8Array|null = null,
  public numPoints: number = 0,
  public stepSize: number = 0,
  public precAngleInit: number = 0.0,
  public spinAngleInit: number = 0.0,
  public eulerRotSeq: string|Uint8Array|null = null,
  public interpolator: string|Uint8Array|null = null,
  public interpolatorDegree: number = 0,
  public notes: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: AttitudeSet_Abridged_dataMode_Enum = AttitudeSet_Abridged_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const esId = (this.esId !== null ? builder.createString(this.esId!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const endTime = (this.endTime !== null ? builder.createString(this.endTime!) : 0);
  const frame1 = (this.frame1 !== null ? builder.createString(this.frame1!) : 0);
  const frame2 = (this.frame2 !== null ? builder.createString(this.frame2!) : 0);
  const eulerRotSeq = (this.eulerRotSeq !== null ? builder.createString(this.eulerRotSeq!) : 0);
  const interpolator = (this.interpolator !== null ? builder.createString(this.interpolator!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return AttitudeSet_Abridged.createAttitudeSet_Abridged(builder,
    id,
    classificationMarking,
    idOnOrbit,
    this.satNo,
    origObjectId,
    type,
    esId,
    idSensor,
    origSensorId,
    startTime,
    endTime,
    frame1,
    frame2,
    this.numPoints,
    this.stepSize,
    this.precAngleInit,
    this.spinAngleInit,
    eulerRotSeq,
    interpolator,
    this.interpolatorDegree,
    notes,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
