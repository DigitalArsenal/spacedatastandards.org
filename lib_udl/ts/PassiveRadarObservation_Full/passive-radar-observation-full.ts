// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PassiveRadarObservation_Full_dataMode_Enum } from './passive-radar-observation-full-data-mode-enum.js';


/**
 * /// Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.
 */
export class PassiveRadarObservation_Full implements flatbuffers.IUnpackableObject<PassiveRadarObservation_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PassiveRadarObservation_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPassiveRadarObservation_Full(bb:flatbuffers.ByteBuffer, obj?:PassiveRadarObservation_Full):PassiveRadarObservation_Full {
  return (obj || new PassiveRadarObservation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPassiveRadarObservation_Full(bb:flatbuffers.ByteBuffer, obj?:PassiveRadarObservation_Full):PassiveRadarObservation_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PassiveRadarObservation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('PASS');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ob detection time in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2023-01-24T23:35:26.518152Z
 * Constraints: No constraints specified.
 */
obTime():string|null
obTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
 * Example: /// Example: 40699
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/Catalog number of the target on-orbit object.
 * Example: /// Example: 40699
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
 * Example: /// Example: OCULUSA
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
 * Example: /// Example: RED_CLIFFS_3ABCRN
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idRfemitter():string|null
idRfemitter(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idRfemitter(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
 * Example: /// Example: OculusRef1
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensorRefReceiver():string|null
idSensorRefReceiver(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensorRefReceiver(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional external observation identifier provided by the source.
 * Example: /// Example: 26892
 * Constraints: Minimum length = 0, Maximum length = 36
 */
extObservationId():string|null
extObservationId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
extObservationId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier to indicate the specific tasking which produced this observation.
 * Example: /// Example: TASK-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
taskId():string|null
taskId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of a track that represents a tracklet for this observation.
 * Example: /// Example: 12212
 * Constraints: Minimum length = 0, Maximum length = 36
 */
trackId():string|null
trackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
 * Example: /// Example: FIRST
 * Constraints: Minimum length = 0, Maximum length = 8
 */
obPosition():string|null
obPosition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obPosition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
uct():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Line of sight azimuth angle in degrees and topocentric frame.
 * Example: /// Example: 134.5
 * Constraints: No constraints specified.
 */
azimuth():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
azimuthUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor azimuth angle bias in degrees.
 * Example: /// Example: 0.123
 * Constraints: No constraints specified.
 */
azimuthBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of the line of sight azimuth in degrees per second.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
azimuthRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line of sight elevation in degrees and topocentric frame.
 * Example: /// Example: 76.1
 * Constraints: No constraints specified.
 */
elevation():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
elevationUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor elevation bias in degrees.
 * Example: /// Example: 0.123
 * Constraints: No constraints specified.
 */
elevationBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of the line of sight elevation in degrees per second.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
elevationRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
 * Example: /// Example: 0.00505820232809312
 * Constraints: No constraints specified.
 */
delay():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the delay measurement, in seconds.
 * Example: /// Example: 3.1e-06
 * Constraints: No constraints specified.
 */
delayUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Delay bias in seconds.
 * Example: /// Example: 1.23e-06
 * Constraints: No constraints specified.
 */
delayBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
 * Example: /// Example: 754.8212
 * Constraints: No constraints specified.
 */
bistaticRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in bistatic range in kilometers.
 * Example: /// Example: 5.1
 * Constraints: No constraints specified.
 */
bistaticRangeUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor bistatic range bias in kilometers.
 * Example: /// Example: 2.34
 * Constraints: No constraints specified.
 */
bistaticRangeBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of the bistatic path in kilometers/sec.
 * Example: /// Example: -0.30222
 * Constraints: No constraints specified.
 */
bistaticRangeRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
 * Example: /// Example: 0.123
 * Constraints: No constraints specified.
 */
bistaticRangeRateUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Bistatic range acceleration in kilometers/sec^2.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
bistaticRangeAccel():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
 * Example: /// Example: 0.1
 * Constraints: No constraints specified.
 */
bistaticRangeAccelUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Doppler measurement in hertz.
 * Example: /// Example: -101.781641000597
 * Constraints: No constraints specified.
 */
doppler():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the Doppler measurement in hertz.
 * Example: /// Example: 0.2
 * Constraints: No constraints specified.
 */
dopplerUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Coning angle in degrees.
 * Example: /// Example: 60.1
 * Constraints: No constraints specified.
 */
coning():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the coning angle measurement, in degrees.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
coningUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
 * Example: /// Example: 0.00592856674135648
 * Constraints: No constraints specified.
 */
tof():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in time of flight in seconds.
 * Example: /// Example: 3.1e-06
 * Constraints: No constraints specified.
 */
tofUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Time of Flight (TOF) bias in seconds.
 * Example: /// Example: 1.23e-06
 * Constraints: No constraints specified.
 */
tofBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The target Acceleration measurement in kilometers/sec^2 for this observation.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
accel():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
 * Example: /// Example: 0.1
 * Constraints: No constraints specified.
 */
accelUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line of sight right ascension in degrees and J2000 coordinate frame.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
ra():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line of sight declination angle in degrees and J2000 coordinate frame.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
declination():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: -35.1181763996856
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 139.613567052763
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
 * Example: /// Example: 478.056378
 * Constraints: No constraints specified.
 */
alt():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * X velocity of target in kilometers/sec in J2000 coordinate frame.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
xvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Y velocity of target in kilometers/sec in J2000 coordinate frame.
 * Example: /// Example: 3.21
 * Constraints: No constraints specified.
 */
yvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Z velocity of target in kilometers/sec in J2000 coordinate frame.
 * Example: /// Example: 3.12
 * Constraints: No constraints specified.
 */
zvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Radar cross section in meters squared for polarization principal.
 * Example: /// Example: 100.23
 * Constraints: No constraints specified.
 */
rcs():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
rcsUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Radar cross section in meters squared for orthogonal polarization.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
orthogonalRcs():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
orthogonalRcsUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Signal to noise ratio, in dB.
 * Example: /// Example: 17.292053
 * Constraints: No constraints specified.
 */
snr():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor timing bias in seconds.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
timingBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['TAG1', 'TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: TRANSACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional source-provided and searchable metadata or descriptor of the data.
 * Example: /// Example: Descriptor
 * Constraints: Minimum length = 0, Maximum length = 64
 */
descriptor():string|null
descriptor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
descriptor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():PassiveRadarObservation_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : PassiveRadarObservation_Full_dataMode_Enum.REAL;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
onOrbit():string|null
onOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
onOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
 * Example: /// Example: RADAR
 * Constraints: No constraints specified.
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPassiveRadarObservation_Full(builder:flatbuffers.Builder) {
  builder.startObject(68);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addObTime(builder:flatbuffers.Builder, obTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, obTimeOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(4, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, origObjectIdOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, idSensorOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, origSensorIdOffset, 0);
}

static addIdRfemitter(builder:flatbuffers.Builder, idRfemitterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, idRfemitterOffset, 0);
}

static addIdSensorRefReceiver(builder:flatbuffers.Builder, idSensorRefReceiverOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, idSensorRefReceiverOffset, 0);
}

static addExtObservationId(builder:flatbuffers.Builder, extObservationIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, extObservationIdOffset, 0);
}

static addTaskId(builder:flatbuffers.Builder, taskIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, taskIdOffset, 0);
}

static addTrackId(builder:flatbuffers.Builder, trackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, trackIdOffset, 0);
}

static addObPosition(builder:flatbuffers.Builder, obPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, obPositionOffset, 0);
}

static addUct(builder:flatbuffers.Builder, uct:boolean) {
  builder.addFieldInt8(14, +uct, +false);
}

static addAzimuth(builder:flatbuffers.Builder, azimuth:number) {
  builder.addFieldFloat64(15, azimuth, 0.0);
}

static addAzimuthUnc(builder:flatbuffers.Builder, azimuthUnc:number) {
  builder.addFieldFloat64(16, azimuthUnc, 0.0);
}

static addAzimuthBias(builder:flatbuffers.Builder, azimuthBias:number) {
  builder.addFieldFloat64(17, azimuthBias, 0.0);
}

static addAzimuthRate(builder:flatbuffers.Builder, azimuthRate:number) {
  builder.addFieldFloat64(18, azimuthRate, 0.0);
}

static addElevation(builder:flatbuffers.Builder, elevation:number) {
  builder.addFieldFloat64(19, elevation, 0.0);
}

static addElevationUnc(builder:flatbuffers.Builder, elevationUnc:number) {
  builder.addFieldFloat64(20, elevationUnc, 0.0);
}

static addElevationBias(builder:flatbuffers.Builder, elevationBias:number) {
  builder.addFieldFloat64(21, elevationBias, 0.0);
}

static addElevationRate(builder:flatbuffers.Builder, elevationRate:number) {
  builder.addFieldFloat64(22, elevationRate, 0.0);
}

static addDelay(builder:flatbuffers.Builder, delay:number) {
  builder.addFieldFloat64(23, delay, 0.0);
}

static addDelayUnc(builder:flatbuffers.Builder, delayUnc:number) {
  builder.addFieldFloat64(24, delayUnc, 0.0);
}

static addDelayBias(builder:flatbuffers.Builder, delayBias:number) {
  builder.addFieldFloat64(25, delayBias, 0.0);
}

static addBistaticRange(builder:flatbuffers.Builder, bistaticRange:number) {
  builder.addFieldFloat64(26, bistaticRange, 0.0);
}

static addBistaticRangeUnc(builder:flatbuffers.Builder, bistaticRangeUnc:number) {
  builder.addFieldFloat64(27, bistaticRangeUnc, 0.0);
}

static addBistaticRangeBias(builder:flatbuffers.Builder, bistaticRangeBias:number) {
  builder.addFieldFloat64(28, bistaticRangeBias, 0.0);
}

static addBistaticRangeRate(builder:flatbuffers.Builder, bistaticRangeRate:number) {
  builder.addFieldFloat64(29, bistaticRangeRate, 0.0);
}

static addBistaticRangeRateUnc(builder:flatbuffers.Builder, bistaticRangeRateUnc:number) {
  builder.addFieldFloat64(30, bistaticRangeRateUnc, 0.0);
}

static addBistaticRangeAccel(builder:flatbuffers.Builder, bistaticRangeAccel:number) {
  builder.addFieldFloat64(31, bistaticRangeAccel, 0.0);
}

static addBistaticRangeAccelUnc(builder:flatbuffers.Builder, bistaticRangeAccelUnc:number) {
  builder.addFieldFloat64(32, bistaticRangeAccelUnc, 0.0);
}

static addDoppler(builder:flatbuffers.Builder, doppler:number) {
  builder.addFieldFloat64(33, doppler, 0.0);
}

static addDopplerUnc(builder:flatbuffers.Builder, dopplerUnc:number) {
  builder.addFieldFloat64(34, dopplerUnc, 0.0);
}

static addConing(builder:flatbuffers.Builder, coning:number) {
  builder.addFieldFloat64(35, coning, 0.0);
}

static addConingUnc(builder:flatbuffers.Builder, coningUnc:number) {
  builder.addFieldFloat64(36, coningUnc, 0.0);
}

static addTof(builder:flatbuffers.Builder, tof:number) {
  builder.addFieldFloat64(37, tof, 0.0);
}

static addTofUnc(builder:flatbuffers.Builder, tofUnc:number) {
  builder.addFieldFloat64(38, tofUnc, 0.0);
}

static addTofBias(builder:flatbuffers.Builder, tofBias:number) {
  builder.addFieldFloat64(39, tofBias, 0.0);
}

static addAccel(builder:flatbuffers.Builder, accel:number) {
  builder.addFieldFloat64(40, accel, 0.0);
}

static addAccelUnc(builder:flatbuffers.Builder, accelUnc:number) {
  builder.addFieldFloat64(41, accelUnc, 0.0);
}

static addRa(builder:flatbuffers.Builder, ra:number) {
  builder.addFieldFloat64(42, ra, 0.0);
}

static addDeclination(builder:flatbuffers.Builder, declination:number) {
  builder.addFieldFloat64(43, declination, 0.0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(44, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(45, lon, 0.0);
}

static addAlt(builder:flatbuffers.Builder, alt:number) {
  builder.addFieldFloat64(46, alt, 0.0);
}

static addXvel(builder:flatbuffers.Builder, xvel:number) {
  builder.addFieldFloat64(47, xvel, 0.0);
}

static addYvel(builder:flatbuffers.Builder, yvel:number) {
  builder.addFieldFloat64(48, yvel, 0.0);
}

static addZvel(builder:flatbuffers.Builder, zvel:number) {
  builder.addFieldFloat64(49, zvel, 0.0);
}

static addRcs(builder:flatbuffers.Builder, rcs:number) {
  builder.addFieldFloat64(50, rcs, 0.0);
}

static addRcsUnc(builder:flatbuffers.Builder, rcsUnc:number) {
  builder.addFieldFloat64(51, rcsUnc, 0.0);
}

static addOrthogonalRcs(builder:flatbuffers.Builder, orthogonalRcs:number) {
  builder.addFieldFloat64(52, orthogonalRcs, 0.0);
}

static addOrthogonalRcsUnc(builder:flatbuffers.Builder, orthogonalRcsUnc:number) {
  builder.addFieldFloat64(53, orthogonalRcsUnc, 0.0);
}

static addSnr(builder:flatbuffers.Builder, snr:number) {
  builder.addFieldFloat64(54, snr, 0.0);
}

static addTimingBias(builder:flatbuffers.Builder, timingBias:number) {
  builder.addFieldFloat64(55, timingBias, 0.0);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, transactionIdOffset, 0);
}

static addDescriptor(builder:flatbuffers.Builder, descriptorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, descriptorOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, origNetworkOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, sourceDlOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:PassiveRadarObservation_Full_dataMode_Enum) {
  builder.addFieldInt8(65, dataMode, PassiveRadarObservation_Full_dataMode_Enum.REAL);
}

static addOnOrbit(builder:flatbuffers.Builder, onOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, onOrbitOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, typeOffset, 0);
}

static endPassiveRadarObservation_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPassiveRadarObservation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'PASS');
}

static finishSizePrefixedPassiveRadarObservation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'PASS', true);
}

static createPassiveRadarObservation_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, obTimeOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, idRfemitterOffset:flatbuffers.Offset, idSensorRefReceiverOffset:flatbuffers.Offset, extObservationIdOffset:flatbuffers.Offset, taskIdOffset:flatbuffers.Offset, trackIdOffset:flatbuffers.Offset, obPositionOffset:flatbuffers.Offset, uct:boolean, azimuth:number, azimuthUnc:number, azimuthBias:number, azimuthRate:number, elevation:number, elevationUnc:number, elevationBias:number, elevationRate:number, delay:number, delayUnc:number, delayBias:number, bistaticRange:number, bistaticRangeUnc:number, bistaticRangeBias:number, bistaticRangeRate:number, bistaticRangeRateUnc:number, bistaticRangeAccel:number, bistaticRangeAccelUnc:number, doppler:number, dopplerUnc:number, coning:number, coningUnc:number, tof:number, tofUnc:number, tofBias:number, accel:number, accelUnc:number, ra:number, declination:number, lat:number, lon:number, alt:number, xvel:number, yvel:number, zvel:number, rcs:number, rcsUnc:number, orthogonalRcs:number, orthogonalRcsUnc:number, snr:number, timingBias:number, tagsOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, descriptorOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, dataMode:PassiveRadarObservation_Full_dataMode_Enum, onOrbitOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset):flatbuffers.Offset {
  PassiveRadarObservation_Full.startPassiveRadarObservation_Full(builder);
  PassiveRadarObservation_Full.addId(builder, idOffset);
  PassiveRadarObservation_Full.addClassificationMarking(builder, classificationMarkingOffset);
  PassiveRadarObservation_Full.addObTime(builder, obTimeOffset);
  PassiveRadarObservation_Full.addIdOnOrbit(builder, idOnOrbitOffset);
  PassiveRadarObservation_Full.addSatNo(builder, satNo);
  PassiveRadarObservation_Full.addOrigObjectId(builder, origObjectIdOffset);
  PassiveRadarObservation_Full.addIdSensor(builder, idSensorOffset);
  PassiveRadarObservation_Full.addOrigSensorId(builder, origSensorIdOffset);
  PassiveRadarObservation_Full.addIdRfemitter(builder, idRfemitterOffset);
  PassiveRadarObservation_Full.addIdSensorRefReceiver(builder, idSensorRefReceiverOffset);
  PassiveRadarObservation_Full.addExtObservationId(builder, extObservationIdOffset);
  PassiveRadarObservation_Full.addTaskId(builder, taskIdOffset);
  PassiveRadarObservation_Full.addTrackId(builder, trackIdOffset);
  PassiveRadarObservation_Full.addObPosition(builder, obPositionOffset);
  PassiveRadarObservation_Full.addUct(builder, uct);
  PassiveRadarObservation_Full.addAzimuth(builder, azimuth);
  PassiveRadarObservation_Full.addAzimuthUnc(builder, azimuthUnc);
  PassiveRadarObservation_Full.addAzimuthBias(builder, azimuthBias);
  PassiveRadarObservation_Full.addAzimuthRate(builder, azimuthRate);
  PassiveRadarObservation_Full.addElevation(builder, elevation);
  PassiveRadarObservation_Full.addElevationUnc(builder, elevationUnc);
  PassiveRadarObservation_Full.addElevationBias(builder, elevationBias);
  PassiveRadarObservation_Full.addElevationRate(builder, elevationRate);
  PassiveRadarObservation_Full.addDelay(builder, delay);
  PassiveRadarObservation_Full.addDelayUnc(builder, delayUnc);
  PassiveRadarObservation_Full.addDelayBias(builder, delayBias);
  PassiveRadarObservation_Full.addBistaticRange(builder, bistaticRange);
  PassiveRadarObservation_Full.addBistaticRangeUnc(builder, bistaticRangeUnc);
  PassiveRadarObservation_Full.addBistaticRangeBias(builder, bistaticRangeBias);
  PassiveRadarObservation_Full.addBistaticRangeRate(builder, bistaticRangeRate);
  PassiveRadarObservation_Full.addBistaticRangeRateUnc(builder, bistaticRangeRateUnc);
  PassiveRadarObservation_Full.addBistaticRangeAccel(builder, bistaticRangeAccel);
  PassiveRadarObservation_Full.addBistaticRangeAccelUnc(builder, bistaticRangeAccelUnc);
  PassiveRadarObservation_Full.addDoppler(builder, doppler);
  PassiveRadarObservation_Full.addDopplerUnc(builder, dopplerUnc);
  PassiveRadarObservation_Full.addConing(builder, coning);
  PassiveRadarObservation_Full.addConingUnc(builder, coningUnc);
  PassiveRadarObservation_Full.addTof(builder, tof);
  PassiveRadarObservation_Full.addTofUnc(builder, tofUnc);
  PassiveRadarObservation_Full.addTofBias(builder, tofBias);
  PassiveRadarObservation_Full.addAccel(builder, accel);
  PassiveRadarObservation_Full.addAccelUnc(builder, accelUnc);
  PassiveRadarObservation_Full.addRa(builder, ra);
  PassiveRadarObservation_Full.addDeclination(builder, declination);
  PassiveRadarObservation_Full.addLat(builder, lat);
  PassiveRadarObservation_Full.addLon(builder, lon);
  PassiveRadarObservation_Full.addAlt(builder, alt);
  PassiveRadarObservation_Full.addXvel(builder, xvel);
  PassiveRadarObservation_Full.addYvel(builder, yvel);
  PassiveRadarObservation_Full.addZvel(builder, zvel);
  PassiveRadarObservation_Full.addRcs(builder, rcs);
  PassiveRadarObservation_Full.addRcsUnc(builder, rcsUnc);
  PassiveRadarObservation_Full.addOrthogonalRcs(builder, orthogonalRcs);
  PassiveRadarObservation_Full.addOrthogonalRcsUnc(builder, orthogonalRcsUnc);
  PassiveRadarObservation_Full.addSnr(builder, snr);
  PassiveRadarObservation_Full.addTimingBias(builder, timingBias);
  PassiveRadarObservation_Full.addTags(builder, tagsOffset);
  PassiveRadarObservation_Full.addTransactionId(builder, transactionIdOffset);
  PassiveRadarObservation_Full.addDescriptor(builder, descriptorOffset);
  PassiveRadarObservation_Full.addCreatedAt(builder, createdAtOffset);
  PassiveRadarObservation_Full.addCreatedBy(builder, createdByOffset);
  PassiveRadarObservation_Full.addSource(builder, sourceOffset);
  PassiveRadarObservation_Full.addOrigin(builder, originOffset);
  PassiveRadarObservation_Full.addOrigNetwork(builder, origNetworkOffset);
  PassiveRadarObservation_Full.addSourceDl(builder, sourceDlOffset);
  PassiveRadarObservation_Full.addDataMode(builder, dataMode);
  PassiveRadarObservation_Full.addOnOrbit(builder, onOrbitOffset);
  PassiveRadarObservation_Full.addType(builder, typeOffset);
  return PassiveRadarObservation_Full.endPassiveRadarObservation_Full(builder);
}

unpack(): PassiveRadarObservation_FullT {
  return new PassiveRadarObservation_FullT(
    this.id(),
    this.classificationMarking(),
    this.obTime(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.idSensor(),
    this.origSensorId(),
    this.idRfemitter(),
    this.idSensorRefReceiver(),
    this.extObservationId(),
    this.taskId(),
    this.trackId(),
    this.obPosition(),
    this.uct(),
    this.azimuth(),
    this.azimuthUnc(),
    this.azimuthBias(),
    this.azimuthRate(),
    this.elevation(),
    this.elevationUnc(),
    this.elevationBias(),
    this.elevationRate(),
    this.delay(),
    this.delayUnc(),
    this.delayBias(),
    this.bistaticRange(),
    this.bistaticRangeUnc(),
    this.bistaticRangeBias(),
    this.bistaticRangeRate(),
    this.bistaticRangeRateUnc(),
    this.bistaticRangeAccel(),
    this.bistaticRangeAccelUnc(),
    this.doppler(),
    this.dopplerUnc(),
    this.coning(),
    this.coningUnc(),
    this.tof(),
    this.tofUnc(),
    this.tofBias(),
    this.accel(),
    this.accelUnc(),
    this.ra(),
    this.declination(),
    this.lat(),
    this.lon(),
    this.alt(),
    this.xvel(),
    this.yvel(),
    this.zvel(),
    this.rcs(),
    this.rcsUnc(),
    this.orthogonalRcs(),
    this.orthogonalRcsUnc(),
    this.snr(),
    this.timingBias(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length()),
    this.transactionId(),
    this.descriptor(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.sourceDl(),
    this.dataMode(),
    this.onOrbit(),
    this.type()
  );
}


unpackTo(_o: PassiveRadarObservation_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.obTime = this.obTime();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.idSensor = this.idSensor();
  _o.origSensorId = this.origSensorId();
  _o.idRFEmitter = this.idRfemitter();
  _o.idSensorRefReceiver = this.idSensorRefReceiver();
  _o.extObservationId = this.extObservationId();
  _o.taskId = this.taskId();
  _o.trackId = this.trackId();
  _o.obPosition = this.obPosition();
  _o.uct = this.uct();
  _o.azimuth = this.azimuth();
  _o.azimuthUnc = this.azimuthUnc();
  _o.azimuthBias = this.azimuthBias();
  _o.azimuthRate = this.azimuthRate();
  _o.elevation = this.elevation();
  _o.elevationUnc = this.elevationUnc();
  _o.elevationBias = this.elevationBias();
  _o.elevationRate = this.elevationRate();
  _o.delay = this.delay();
  _o.delayUnc = this.delayUnc();
  _o.delayBias = this.delayBias();
  _o.bistaticRange = this.bistaticRange();
  _o.bistaticRangeUnc = this.bistaticRangeUnc();
  _o.bistaticRangeBias = this.bistaticRangeBias();
  _o.bistaticRangeRate = this.bistaticRangeRate();
  _o.bistaticRangeRateUnc = this.bistaticRangeRateUnc();
  _o.bistaticRangeAccel = this.bistaticRangeAccel();
  _o.bistaticRangeAccelUnc = this.bistaticRangeAccelUnc();
  _o.doppler = this.doppler();
  _o.dopplerUnc = this.dopplerUnc();
  _o.coning = this.coning();
  _o.coningUnc = this.coningUnc();
  _o.tof = this.tof();
  _o.tofUnc = this.tofUnc();
  _o.tofBias = this.tofBias();
  _o.accel = this.accel();
  _o.accelUnc = this.accelUnc();
  _o.ra = this.ra();
  _o.declination = this.declination();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.alt = this.alt();
  _o.xvel = this.xvel();
  _o.yvel = this.yvel();
  _o.zvel = this.zvel();
  _o.rcs = this.rcs();
  _o.rcsUnc = this.rcsUnc();
  _o.orthogonalRcs = this.orthogonalRcs();
  _o.orthogonalRcsUnc = this.orthogonalRcsUnc();
  _o.snr = this.snr();
  _o.timingBias = this.timingBias();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length());
  _o.transactionId = this.transactionId();
  _o.descriptor = this.descriptor();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.sourceDL = this.sourceDl();
  _o.dataMode = this.dataMode();
  _o.onOrbit = this.onOrbit();
  _o.type = this.type();
}
}

export class PassiveRadarObservation_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public obTime: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public idRFEmitter: string|Uint8Array|null = null,
  public idSensorRefReceiver: string|Uint8Array|null = null,
  public extObservationId: string|Uint8Array|null = null,
  public taskId: string|Uint8Array|null = null,
  public trackId: string|Uint8Array|null = null,
  public obPosition: string|Uint8Array|null = null,
  public uct: boolean = false,
  public azimuth: number = 0.0,
  public azimuthUnc: number = 0.0,
  public azimuthBias: number = 0.0,
  public azimuthRate: number = 0.0,
  public elevation: number = 0.0,
  public elevationUnc: number = 0.0,
  public elevationBias: number = 0.0,
  public elevationRate: number = 0.0,
  public delay: number = 0.0,
  public delayUnc: number = 0.0,
  public delayBias: number = 0.0,
  public bistaticRange: number = 0.0,
  public bistaticRangeUnc: number = 0.0,
  public bistaticRangeBias: number = 0.0,
  public bistaticRangeRate: number = 0.0,
  public bistaticRangeRateUnc: number = 0.0,
  public bistaticRangeAccel: number = 0.0,
  public bistaticRangeAccelUnc: number = 0.0,
  public doppler: number = 0.0,
  public dopplerUnc: number = 0.0,
  public coning: number = 0.0,
  public coningUnc: number = 0.0,
  public tof: number = 0.0,
  public tofUnc: number = 0.0,
  public tofBias: number = 0.0,
  public accel: number = 0.0,
  public accelUnc: number = 0.0,
  public ra: number = 0.0,
  public declination: number = 0.0,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public alt: number = 0.0,
  public xvel: number = 0.0,
  public yvel: number = 0.0,
  public zvel: number = 0.0,
  public rcs: number = 0.0,
  public rcsUnc: number = 0.0,
  public orthogonalRcs: number = 0.0,
  public orthogonalRcsUnc: number = 0.0,
  public snr: number = 0.0,
  public timingBias: number = 0.0,
  public tags: (string)[] = [],
  public transactionId: string|Uint8Array|null = null,
  public descriptor: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public dataMode: PassiveRadarObservation_Full_dataMode_Enum = PassiveRadarObservation_Full_dataMode_Enum.REAL,
  public onOrbit: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const obTime = (this.obTime !== null ? builder.createString(this.obTime!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const idRFEmitter = (this.idRFEmitter !== null ? builder.createString(this.idRFEmitter!) : 0);
  const idSensorRefReceiver = (this.idSensorRefReceiver !== null ? builder.createString(this.idSensorRefReceiver!) : 0);
  const extObservationId = (this.extObservationId !== null ? builder.createString(this.extObservationId!) : 0);
  const taskId = (this.taskId !== null ? builder.createString(this.taskId!) : 0);
  const trackId = (this.trackId !== null ? builder.createString(this.trackId!) : 0);
  const obPosition = (this.obPosition !== null ? builder.createString(this.obPosition!) : 0);
  const tags = PassiveRadarObservation_Full.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const descriptor = (this.descriptor !== null ? builder.createString(this.descriptor!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const onOrbit = (this.onOrbit !== null ? builder.createString(this.onOrbit!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);

  return PassiveRadarObservation_Full.createPassiveRadarObservation_Full(builder,
    id,
    classificationMarking,
    obTime,
    idOnOrbit,
    this.satNo,
    origObjectId,
    idSensor,
    origSensorId,
    idRFEmitter,
    idSensorRefReceiver,
    extObservationId,
    taskId,
    trackId,
    obPosition,
    this.uct,
    this.azimuth,
    this.azimuthUnc,
    this.azimuthBias,
    this.azimuthRate,
    this.elevation,
    this.elevationUnc,
    this.elevationBias,
    this.elevationRate,
    this.delay,
    this.delayUnc,
    this.delayBias,
    this.bistaticRange,
    this.bistaticRangeUnc,
    this.bistaticRangeBias,
    this.bistaticRangeRate,
    this.bistaticRangeRateUnc,
    this.bistaticRangeAccel,
    this.bistaticRangeAccelUnc,
    this.doppler,
    this.dopplerUnc,
    this.coning,
    this.coningUnc,
    this.tof,
    this.tofUnc,
    this.tofBias,
    this.accel,
    this.accelUnc,
    this.ra,
    this.declination,
    this.lat,
    this.lon,
    this.alt,
    this.xvel,
    this.yvel,
    this.zvel,
    this.rcs,
    this.rcsUnc,
    this.orthogonalRcs,
    this.orthogonalRcsUnc,
    this.snr,
    this.timingBias,
    tags,
    transactionId,
    descriptor,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    sourceDL,
    this.dataMode,
    onOrbit,
    type
  );
}
}
