// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Hazard_Abridged_dataMode_Enum } from './hazard-abridged-data-mode-enum.js';


/**
 * /// Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.
 */
export class Hazard_Abridged implements flatbuffers.IUnpackableObject<Hazard_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Hazard_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHazard_Abridged(bb:flatbuffers.ByteBuffer, obj?:Hazard_Abridged):Hazard_Abridged {
  return (obj || new Hazard_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHazard_Abridged(bb:flatbuffers.ByteBuffer, obj?:Hazard_Abridged):Hazard_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Hazard_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('HAZA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: HAZARD-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.
 * Example: /// Example: Chemical
 * Constraints: Minimum length = 1, Maximum length = 32
 */
detectType():string|null
detectType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
detectType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The detect time, in ISO 8601 UTC format, with millisecond precision.
 * Example: /// Example: 2022-03-07T14:51:39.653Z
 * Constraints: No constraints specified.
 */
detectTime():string|null
detectTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
detectTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating whether this detection is harmful to humans.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
harmful():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.
 * Example: /// Example: ['Alarm1', 'Alarm2']
 * Constraints: No constraints specified.
 */
alarms(index: number):string
alarms(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
alarms(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

alarmsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.
 * Example: /// Example: [2.7, 2.9]
 * Constraints: No constraints specified.
 */
alarmValues(index: number):string
alarmValues(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
alarmValues(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

alarmValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
 * Example: /// Example: ['Rad1', 'Rad2']
 * Constraints: No constraints specified.
 */
readings(index: number):string
readings(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
readings(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

readingsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
 * Example: /// Example: ['Gray', 'Gray']
 * Constraints: No constraints specified.
 */
readingUnits(index: number):string
readingUnits(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
readingUnits(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

readingUnitsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
 * Example: /// Example: [107.2, 124.1]
 * Constraints: No constraints specified.
 */
readingValues(index: number):string
readingValues(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
readingValues(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

readingValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.
 * Example: /// Example: 21
 * Constraints: Minimum length = 0, Maximum length = 48
 */
matType():string|null
matType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
matType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.
 * Example: /// Example: Nerve Agent
 * Constraints: Minimum length = 0, Maximum length = 64
 */
matClass():string|null
matClass(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
matClass(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The material common name associated with this detection.
 * Example: /// Example: VX
 * Constraints: Minimum length = 0, Maximum length = 64
 */
matName():string|null
matName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
matName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: 
 * Category 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. 
 * Category 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. 
 * Category 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. 
 * Category 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. 
 * Category 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
matCat():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.
 * Example: /// Example: 64-17-5
 * Constraints: Minimum length = 0, Maximum length = 24
 */
casRn():string|null
casRn(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
casRn(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).
 * Example: /// Example: 27129
 * Constraints: No constraints specified.
 */
ppm():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Measure of density of the material associated with this detection, in kg/m^3.
 * Example: /// Example: 18900.2
 * Constraints: No constraints specified.
 */
density():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.
 * Example: /// Example: 1.31
 * Constraints: No constraints specified.
 */
radCtrn():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.
 * Example: /// Example: 2.5
 * Constraints: No constraints specified.
 */
gBar():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.
 * Example: /// Example: 3.1
 * Constraints: No constraints specified.
 */
hBar():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Atomic Number of the material associated with this detection.
 * Example: /// Example: 92
 * Constraints: No constraints specified.
 */
z():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.
 * Example: /// Example: 238
 * Constraints: No constraints specified.
 */
a():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The specific bottle ID associated with this detection.
 * Example: /// Example: 6264
 * Constraints: Minimum length = 0, Maximum length = 16
 */
bottleId():string|null
bottleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bottleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .
 * Example: /// Example: Skin
 * Constraints: Minimum length = 0, Maximum length = 64
 */
channel():string|null
channel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
channel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The known or projected hazard duration, in seconds, associated with this material detection.
 * Example: /// Example: 14400
 * Constraints: No constraints specified.
 */
duration():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.
 * Example: /// Example: 120.1
 * Constraints: No constraints specified.
 */
activity():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The deposition measurement of the contaminant to surface area, in kg/m^2.
 * Example: /// Example: 1.084
 * Constraints: No constraints specified.
 */
dep():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The deposition concentration of the contaminant to surface area, in becquerels/m^2.
 * Example: /// Example: 86.1
 * Constraints: No constraints specified.
 */
depCtrn():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Ratio of the chemical substance mass to the total mass of the mixture.
 * Example: /// Example: 0.029
 * Constraints: No constraints specified.
 */
massFrac():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.
 * Example: /// Example: 1.12
 * Constraints: No constraints specified.
 */
dose():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The concentration time, in (kg/sec)/m^3, associated with this material detection.
 * Example: /// Example: 1.077
 * Constraints: No constraints specified.
 */
ctrnTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.
 * Example: /// Example: 1.0000001865
 * Constraints: No constraints specified.
 */
doseRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * ID of the Point of Interest (POI) record related to this hazard record.
 * Example: /// Example: POI-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idPoi():string|null
idPoi(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idPoi(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the Track record related to this hazard record.
 * Example: /// Example: TRACK-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idTrack():string|null
idTrack(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idTrack(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Hazard_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Hazard_Abridged_dataMode_Enum.REAL;
}

static startHazard_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(40);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addDetectType(builder:flatbuffers.Builder, detectTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, detectTypeOffset, 0);
}

static addDetectTime(builder:flatbuffers.Builder, detectTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, detectTimeOffset, 0);
}

static addHarmful(builder:flatbuffers.Builder, harmful:boolean) {
  builder.addFieldInt8(4, +harmful, +false);
}

static addAlarms(builder:flatbuffers.Builder, alarmsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, alarmsOffset, 0);
}

static createAlarmsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAlarmsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAlarmValues(builder:flatbuffers.Builder, alarmValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, alarmValuesOffset, 0);
}

static createAlarmValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAlarmValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addReadings(builder:flatbuffers.Builder, readingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, readingsOffset, 0);
}

static createReadingsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startReadingsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addReadingUnits(builder:flatbuffers.Builder, readingUnitsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, readingUnitsOffset, 0);
}

static createReadingUnitsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startReadingUnitsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addReadingValues(builder:flatbuffers.Builder, readingValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, readingValuesOffset, 0);
}

static createReadingValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startReadingValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMatType(builder:flatbuffers.Builder, matTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, matTypeOffset, 0);
}

static addMatClass(builder:flatbuffers.Builder, matClassOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, matClassOffset, 0);
}

static addMatName(builder:flatbuffers.Builder, matNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, matNameOffset, 0);
}

static addMatCat(builder:flatbuffers.Builder, matCat:number) {
  builder.addFieldInt32(13, matCat, 0);
}

static addCasRn(builder:flatbuffers.Builder, casRnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, casRnOffset, 0);
}

static addPpm(builder:flatbuffers.Builder, ppm:number) {
  builder.addFieldInt32(15, ppm, 0);
}

static addDensity(builder:flatbuffers.Builder, density:number) {
  builder.addFieldFloat64(16, density, 0.0);
}

static addRadCtrn(builder:flatbuffers.Builder, radCtrn:number) {
  builder.addFieldFloat64(17, radCtrn, 0.0);
}

static addGBar(builder:flatbuffers.Builder, gBar:number) {
  builder.addFieldFloat64(18, gBar, 0.0);
}

static addHBar(builder:flatbuffers.Builder, hBar:number) {
  builder.addFieldFloat64(19, hBar, 0.0);
}

static addZ(builder:flatbuffers.Builder, z:number) {
  builder.addFieldInt32(20, z, 0);
}

static addA(builder:flatbuffers.Builder, a:number) {
  builder.addFieldInt32(21, a, 0);
}

static addBottleId(builder:flatbuffers.Builder, bottleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, bottleIdOffset, 0);
}

static addChannel(builder:flatbuffers.Builder, channelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, channelOffset, 0);
}

static addDuration(builder:flatbuffers.Builder, duration:number) {
  builder.addFieldInt32(24, duration, 0);
}

static addActivity(builder:flatbuffers.Builder, activity:number) {
  builder.addFieldFloat64(25, activity, 0.0);
}

static addDep(builder:flatbuffers.Builder, dep:number) {
  builder.addFieldFloat64(26, dep, 0.0);
}

static addDepCtrn(builder:flatbuffers.Builder, depCtrn:number) {
  builder.addFieldFloat64(27, depCtrn, 0.0);
}

static addMassFrac(builder:flatbuffers.Builder, massFrac:number) {
  builder.addFieldFloat64(28, massFrac, 0.0);
}

static addDose(builder:flatbuffers.Builder, dose:number) {
  builder.addFieldFloat64(29, dose, 0.0);
}

static addCtrnTime(builder:flatbuffers.Builder, ctrnTime:number) {
  builder.addFieldFloat64(30, ctrnTime, 0.0);
}

static addDoseRate(builder:flatbuffers.Builder, doseRate:number) {
  builder.addFieldFloat64(31, doseRate, 0.0);
}

static addIdPoi(builder:flatbuffers.Builder, idPoiOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, idPoiOffset, 0);
}

static addIdTrack(builder:flatbuffers.Builder, idTrackOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, idTrackOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Hazard_Abridged_dataMode_Enum) {
  builder.addFieldInt8(39, dataMode, Hazard_Abridged_dataMode_Enum.REAL);
}

static endHazard_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishHazard_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'HAZA');
}

static finishSizePrefixedHazard_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'HAZA', true);
}

static createHazard_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, detectTypeOffset:flatbuffers.Offset, detectTimeOffset:flatbuffers.Offset, harmful:boolean, alarmsOffset:flatbuffers.Offset, alarmValuesOffset:flatbuffers.Offset, readingsOffset:flatbuffers.Offset, readingUnitsOffset:flatbuffers.Offset, readingValuesOffset:flatbuffers.Offset, matTypeOffset:flatbuffers.Offset, matClassOffset:flatbuffers.Offset, matNameOffset:flatbuffers.Offset, matCat:number, casRnOffset:flatbuffers.Offset, ppm:number, density:number, radCtrn:number, gBar:number, hBar:number, z:number, a:number, bottleIdOffset:flatbuffers.Offset, channelOffset:flatbuffers.Offset, duration:number, activity:number, dep:number, depCtrn:number, massFrac:number, dose:number, ctrnTime:number, doseRate:number, idPoiOffset:flatbuffers.Offset, idTrackOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:Hazard_Abridged_dataMode_Enum):flatbuffers.Offset {
  Hazard_Abridged.startHazard_Abridged(builder);
  Hazard_Abridged.addId(builder, idOffset);
  Hazard_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  Hazard_Abridged.addDetectType(builder, detectTypeOffset);
  Hazard_Abridged.addDetectTime(builder, detectTimeOffset);
  Hazard_Abridged.addHarmful(builder, harmful);
  Hazard_Abridged.addAlarms(builder, alarmsOffset);
  Hazard_Abridged.addAlarmValues(builder, alarmValuesOffset);
  Hazard_Abridged.addReadings(builder, readingsOffset);
  Hazard_Abridged.addReadingUnits(builder, readingUnitsOffset);
  Hazard_Abridged.addReadingValues(builder, readingValuesOffset);
  Hazard_Abridged.addMatType(builder, matTypeOffset);
  Hazard_Abridged.addMatClass(builder, matClassOffset);
  Hazard_Abridged.addMatName(builder, matNameOffset);
  Hazard_Abridged.addMatCat(builder, matCat);
  Hazard_Abridged.addCasRn(builder, casRnOffset);
  Hazard_Abridged.addPpm(builder, ppm);
  Hazard_Abridged.addDensity(builder, density);
  Hazard_Abridged.addRadCtrn(builder, radCtrn);
  Hazard_Abridged.addGBar(builder, gBar);
  Hazard_Abridged.addHBar(builder, hBar);
  Hazard_Abridged.addZ(builder, z);
  Hazard_Abridged.addA(builder, a);
  Hazard_Abridged.addBottleId(builder, bottleIdOffset);
  Hazard_Abridged.addChannel(builder, channelOffset);
  Hazard_Abridged.addDuration(builder, duration);
  Hazard_Abridged.addActivity(builder, activity);
  Hazard_Abridged.addDep(builder, dep);
  Hazard_Abridged.addDepCtrn(builder, depCtrn);
  Hazard_Abridged.addMassFrac(builder, massFrac);
  Hazard_Abridged.addDose(builder, dose);
  Hazard_Abridged.addCtrnTime(builder, ctrnTime);
  Hazard_Abridged.addDoseRate(builder, doseRate);
  Hazard_Abridged.addIdPoi(builder, idPoiOffset);
  Hazard_Abridged.addIdTrack(builder, idTrackOffset);
  Hazard_Abridged.addCreatedAt(builder, createdAtOffset);
  Hazard_Abridged.addCreatedBy(builder, createdByOffset);
  Hazard_Abridged.addSource(builder, sourceOffset);
  Hazard_Abridged.addOrigin(builder, originOffset);
  Hazard_Abridged.addOrigNetwork(builder, origNetworkOffset);
  Hazard_Abridged.addDataMode(builder, dataMode);
  return Hazard_Abridged.endHazard_Abridged(builder);
}

unpack(): Hazard_AbridgedT {
  return new Hazard_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.detectType(),
    this.detectTime(),
    this.harmful(),
    this.bb!.createScalarList<string>(this.alarms.bind(this), this.alarms_Length()),
    this.bb!.createScalarList<string>(this.alarmValues.bind(this), this.alarmValues_Length()),
    this.bb!.createScalarList<string>(this.readings.bind(this), this.readings_Length()),
    this.bb!.createScalarList<string>(this.readingUnits.bind(this), this.readingUnits_Length()),
    this.bb!.createScalarList<string>(this.readingValues.bind(this), this.readingValues_Length()),
    this.matType(),
    this.matClass(),
    this.matName(),
    this.matCat(),
    this.casRn(),
    this.ppm(),
    this.density(),
    this.radCtrn(),
    this.gBar(),
    this.hBar(),
    this.z(),
    this.a(),
    this.bottleId(),
    this.channel(),
    this.duration(),
    this.activity(),
    this.dep(),
    this.depCtrn(),
    this.massFrac(),
    this.dose(),
    this.ctrnTime(),
    this.doseRate(),
    this.idPoi(),
    this.idTrack(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: Hazard_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.detectType = this.detectType();
  _o.detectTime = this.detectTime();
  _o.harmful = this.harmful();
  _o.alarms = this.bb!.createScalarList<string>(this.alarms.bind(this), this.alarms_Length());
  _o.alarmValues = this.bb!.createScalarList<string>(this.alarmValues.bind(this), this.alarmValues_Length());
  _o.readings = this.bb!.createScalarList<string>(this.readings.bind(this), this.readings_Length());
  _o.readingUnits = this.bb!.createScalarList<string>(this.readingUnits.bind(this), this.readingUnits_Length());
  _o.readingValues = this.bb!.createScalarList<string>(this.readingValues.bind(this), this.readingValues_Length());
  _o.matType = this.matType();
  _o.matClass = this.matClass();
  _o.matName = this.matName();
  _o.matCat = this.matCat();
  _o.casRN = this.casRn();
  _o.ppm = this.ppm();
  _o.density = this.density();
  _o.radCtrn = this.radCtrn();
  _o.gBar = this.gBar();
  _o.hBar = this.hBar();
  _o.z = this.z();
  _o.a = this.a();
  _o.bottleId = this.bottleId();
  _o.channel = this.channel();
  _o.duration = this.duration();
  _o.activity = this.activity();
  _o.dep = this.dep();
  _o.depCtrn = this.depCtrn();
  _o.massFrac = this.massFrac();
  _o.dose = this.dose();
  _o.ctrnTime = this.ctrnTime();
  _o.doseRate = this.doseRate();
  _o.idPOI = this.idPoi();
  _o.idTrack = this.idTrack();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class Hazard_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public detectType: string|Uint8Array|null = null,
  public detectTime: string|Uint8Array|null = null,
  public harmful: boolean = false,
  public alarms: (string)[] = [],
  public alarmValues: (string)[] = [],
  public readings: (string)[] = [],
  public readingUnits: (string)[] = [],
  public readingValues: (string)[] = [],
  public matType: string|Uint8Array|null = null,
  public matClass: string|Uint8Array|null = null,
  public matName: string|Uint8Array|null = null,
  public matCat: number = 0,
  public casRN: string|Uint8Array|null = null,
  public ppm: number = 0,
  public density: number = 0.0,
  public radCtrn: number = 0.0,
  public gBar: number = 0.0,
  public hBar: number = 0.0,
  public z: number = 0,
  public a: number = 0,
  public bottleId: string|Uint8Array|null = null,
  public channel: string|Uint8Array|null = null,
  public duration: number = 0,
  public activity: number = 0.0,
  public dep: number = 0.0,
  public depCtrn: number = 0.0,
  public massFrac: number = 0.0,
  public dose: number = 0.0,
  public ctrnTime: number = 0.0,
  public doseRate: number = 0.0,
  public idPOI: string|Uint8Array|null = null,
  public idTrack: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: Hazard_Abridged_dataMode_Enum = Hazard_Abridged_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const detectType = (this.detectType !== null ? builder.createString(this.detectType!) : 0);
  const detectTime = (this.detectTime !== null ? builder.createString(this.detectTime!) : 0);
  const alarms = Hazard_Abridged.createAlarmsVector(builder, builder.createObjectOffsetList(this.alarms));
  const alarmValues = Hazard_Abridged.createAlarmValuesVector(builder, builder.createObjectOffsetList(this.alarmValues));
  const readings = Hazard_Abridged.createReadingsVector(builder, builder.createObjectOffsetList(this.readings));
  const readingUnits = Hazard_Abridged.createReadingUnitsVector(builder, builder.createObjectOffsetList(this.readingUnits));
  const readingValues = Hazard_Abridged.createReadingValuesVector(builder, builder.createObjectOffsetList(this.readingValues));
  const matType = (this.matType !== null ? builder.createString(this.matType!) : 0);
  const matClass = (this.matClass !== null ? builder.createString(this.matClass!) : 0);
  const matName = (this.matName !== null ? builder.createString(this.matName!) : 0);
  const casRN = (this.casRN !== null ? builder.createString(this.casRN!) : 0);
  const bottleId = (this.bottleId !== null ? builder.createString(this.bottleId!) : 0);
  const channel = (this.channel !== null ? builder.createString(this.channel!) : 0);
  const idPOI = (this.idPOI !== null ? builder.createString(this.idPOI!) : 0);
  const idTrack = (this.idTrack !== null ? builder.createString(this.idTrack!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Hazard_Abridged.createHazard_Abridged(builder,
    id,
    classificationMarking,
    detectType,
    detectTime,
    this.harmful,
    alarms,
    alarmValues,
    readings,
    readingUnits,
    readingValues,
    matType,
    matClass,
    matName,
    this.matCat,
    casRN,
    this.ppm,
    this.density,
    this.radCtrn,
    this.gBar,
    this.hBar,
    this.z,
    this.a,
    bottleId,
    channel,
    this.duration,
    this.activity,
    this.dep,
    this.depCtrn,
    this.massFrac,
    this.dose,
    this.ctrnTime,
    this.doseRate,
    idPOI,
    idTrack,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
