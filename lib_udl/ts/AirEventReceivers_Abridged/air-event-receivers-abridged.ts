// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of receiver aircraft associated with this Air Event.
 */
export class AirEventReceivers_Abridged implements flatbuffers.IUnpackableObject<AirEventReceivers_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirEventReceivers_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirEventReceivers_Abridged(bb:flatbuffers.ByteBuffer, obj?:AirEventReceivers_Abridged):AirEventReceivers_Abridged {
  return (obj || new AirEventReceivers_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirEventReceivers_Abridged(bb:flatbuffers.ByteBuffer, obj?:AirEventReceivers_Abridged):AirEventReceivers_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirEventReceivers_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRE');
}

/**
 * The UDL ID of the aircraft sortie this receiver is associated with for this event.
 * Example: /// Example: 1d03e85a-1fb9-4f6e-86a0-593306b6e3f0
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idReceiverSortie():string|null
idReceiverSortie(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idReceiverSortie(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL ID of the mission this receiver is associated with for this event.
 * Example: /// Example: ce99757d-f733-461f-8939-3939d4f05946
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idReceiverMission():string|null
idReceiverMission(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idReceiverMission(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL ID of the airfield this receiver is associated with for this event.
 * Example: /// Example: 96c4c2ba-a031-4e58-9b8e-3c6fb90a7534
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idReceiverAirfield():string|null
idReceiverAirfield(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idReceiverAirfield(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional receiver identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: 3fb8169f-adc1-4667-acab-8415a012d766
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalReceiverId():string|null
externalReceiverId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalReceiverId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Coordination record identifier of this receiver.
 * Example: /// Example: TTC601
 * Constraints: Minimum length = 0, Maximum length = 6
 */
receiverCoord():string|null
receiverCoord(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiverCoord(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Model Design Series designation of this receiver.
 * Example: /// Example: KC135R
 * Constraints: Minimum length = 0, Maximum length = 128
 */
receiverMds():string|null
receiverMds(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiverMds(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Air Mobility Command (AMC) mission identifier of this receiver.
 * Example: /// Example: 8PH000B1S052
 * Constraints: Minimum length = 0, Maximum length = 36
 */
amcReceiverMissionId():string|null
amcReceiverMissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
amcReceiverMissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate mission identifier of this receiver provided by source.
 * Example: /// Example: 1UN05201L121
 * Constraints: Minimum length = 0, Maximum length = 32
 */
altReceiverMissionId():string|null
altReceiverMissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altReceiverMissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The call sign assigned to this receiver.
 * Example: /// Example: BAKER
 * Constraints: Minimum length = 0, Maximum length = 24
 */
receiverCallSign():string|null
receiverCallSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiverCallSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The wing or unit that owns this receiver.
 * Example: /// Example: 117ARW
 * Constraints: Minimum length = 0, Maximum length = 256
 */
receiverOwner():string|null
receiverOwner(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiverOwner(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name and/or number of the point of contact for this receiver.
 * Example: /// Example: JOHN SMITH (555)555-5555
 * Constraints: Minimum length = 0, Maximum length = 68
 */
receiverPoc():string|null
receiverPoc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiverPoc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifies the itinerary point of a mission that this receiver is linked to.
 * Example: /// Example: 825
 * Constraints: No constraints specified.
 */
receiverLegNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Location the receiver is deployed to for an air refueling event.
 * Example: /// Example: KOFF
 * Constraints: Minimum length = 0, Maximum length = 4
 */
receiverDeployedIcao():string|null
receiverDeployedIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiverDeployedIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of fuel delivery method used by the receiver during an air refueling event (BOOM, DROGUE, BOTH).
 * Example: /// Example: DROGUE
 * Constraints: Minimum length = 0, Maximum length = 6
 */
receiverDeliveryMethod():string|null
receiverDeliveryMethod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiverDeliveryMethod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Total weight of the fuel transferred to this receiver during an air refueling event, in pounds.
 * Example: /// Example: 15000000.1
 * Constraints: No constraints specified.
 */
fuelOn():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Position of this receiver within a group of receivers in an air refueling event.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
receiverCellPosition():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Indicates the unique number by Unit ID, which identifies an air refueling event.
 * Example: /// Example: 1018
 * Constraints: Minimum length = 0, Maximum length = 15
 */
sequenceNum():string|null
sequenceNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sequenceNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The major command level (MAJCOM) or foreign military sales (FMS) name of the receiver's organization. The tanker flying hours used for an air refueling event are logged against the receiver MAJCOM or foreign government being supported.
 * Example: /// Example: AMC
 * Constraints: Minimum length = 0, Maximum length = 3
 */
recOrg():string|null
recOrg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recOrg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of aircraft contained within one receiver coordination record for an air refueling event.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
numRecAircraft():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Type of fuel being transferred to the receiver in an air refueling event.
 * Example: /// Example: JP8
 * Constraints: Minimum length = 0, Maximum length = 3
 */
receiverFuelType():string|null
receiverFuelType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiverFuelType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the receiver exercise associated with an air refueling event.
 * Example: /// Example: NATO19
 * Constraints: Minimum length = 0, Maximum length = 12
 */
receiverExercise():string|null
receiverExercise(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiverExercise(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The package identifier for the receiver in an air refueling event.
 * Example: /// Example: 135
 * Constraints: Minimum length = 0, Maximum length = 3
 */
packageId():string|null
packageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
packageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAirEventReceivers_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(22);
}

static addIdReceiverSortie(builder:flatbuffers.Builder, idReceiverSortieOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idReceiverSortieOffset, 0);
}

static addIdReceiverMission(builder:flatbuffers.Builder, idReceiverMissionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idReceiverMissionOffset, 0);
}

static addIdReceiverAirfield(builder:flatbuffers.Builder, idReceiverAirfieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idReceiverAirfieldOffset, 0);
}

static addExternalReceiverId(builder:flatbuffers.Builder, externalReceiverIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, externalReceiverIdOffset, 0);
}

static addReceiverCoord(builder:flatbuffers.Builder, receiverCoordOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, receiverCoordOffset, 0);
}

static addReceiverMds(builder:flatbuffers.Builder, receiverMdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, receiverMdsOffset, 0);
}

static addAmcReceiverMissionId(builder:flatbuffers.Builder, amcReceiverMissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, amcReceiverMissionIdOffset, 0);
}

static addAltReceiverMissionId(builder:flatbuffers.Builder, altReceiverMissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, altReceiverMissionIdOffset, 0);
}

static addReceiverCallSign(builder:flatbuffers.Builder, receiverCallSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, receiverCallSignOffset, 0);
}

static addReceiverOwner(builder:flatbuffers.Builder, receiverOwnerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, receiverOwnerOffset, 0);
}

static addReceiverPoc(builder:flatbuffers.Builder, receiverPocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, receiverPocOffset, 0);
}

static addReceiverLegNum(builder:flatbuffers.Builder, receiverLegNum:number) {
  builder.addFieldInt32(11, receiverLegNum, 0);
}

static addReceiverDeployedIcao(builder:flatbuffers.Builder, receiverDeployedIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, receiverDeployedIcaoOffset, 0);
}

static addReceiverDeliveryMethod(builder:flatbuffers.Builder, receiverDeliveryMethodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, receiverDeliveryMethodOffset, 0);
}

static addFuelOn(builder:flatbuffers.Builder, fuelOn:number) {
  builder.addFieldFloat64(14, fuelOn, 0.0);
}

static addReceiverCellPosition(builder:flatbuffers.Builder, receiverCellPosition:number) {
  builder.addFieldInt32(15, receiverCellPosition, 0);
}

static addSequenceNum(builder:flatbuffers.Builder, sequenceNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, sequenceNumOffset, 0);
}

static addRecOrg(builder:flatbuffers.Builder, recOrgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, recOrgOffset, 0);
}

static addNumRecAircraft(builder:flatbuffers.Builder, numRecAircraft:number) {
  builder.addFieldInt32(18, numRecAircraft, 0);
}

static addReceiverFuelType(builder:flatbuffers.Builder, receiverFuelTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, receiverFuelTypeOffset, 0);
}

static addReceiverExercise(builder:flatbuffers.Builder, receiverExerciseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, receiverExerciseOffset, 0);
}

static addPackageId(builder:flatbuffers.Builder, packageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, packageIdOffset, 0);
}

static endAirEventReceivers_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirEventReceivers_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRE');
}

static finishSizePrefixedAirEventReceivers_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRE', true);
}

static createAirEventReceivers_Abridged(builder:flatbuffers.Builder, idReceiverSortieOffset:flatbuffers.Offset, idReceiverMissionOffset:flatbuffers.Offset, idReceiverAirfieldOffset:flatbuffers.Offset, externalReceiverIdOffset:flatbuffers.Offset, receiverCoordOffset:flatbuffers.Offset, receiverMdsOffset:flatbuffers.Offset, amcReceiverMissionIdOffset:flatbuffers.Offset, altReceiverMissionIdOffset:flatbuffers.Offset, receiverCallSignOffset:flatbuffers.Offset, receiverOwnerOffset:flatbuffers.Offset, receiverPocOffset:flatbuffers.Offset, receiverLegNum:number, receiverDeployedIcaoOffset:flatbuffers.Offset, receiverDeliveryMethodOffset:flatbuffers.Offset, fuelOn:number, receiverCellPosition:number, sequenceNumOffset:flatbuffers.Offset, recOrgOffset:flatbuffers.Offset, numRecAircraft:number, receiverFuelTypeOffset:flatbuffers.Offset, receiverExerciseOffset:flatbuffers.Offset, packageIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  AirEventReceivers_Abridged.startAirEventReceivers_Abridged(builder);
  AirEventReceivers_Abridged.addIdReceiverSortie(builder, idReceiverSortieOffset);
  AirEventReceivers_Abridged.addIdReceiverMission(builder, idReceiverMissionOffset);
  AirEventReceivers_Abridged.addIdReceiverAirfield(builder, idReceiverAirfieldOffset);
  AirEventReceivers_Abridged.addExternalReceiverId(builder, externalReceiverIdOffset);
  AirEventReceivers_Abridged.addReceiverCoord(builder, receiverCoordOffset);
  AirEventReceivers_Abridged.addReceiverMds(builder, receiverMdsOffset);
  AirEventReceivers_Abridged.addAmcReceiverMissionId(builder, amcReceiverMissionIdOffset);
  AirEventReceivers_Abridged.addAltReceiverMissionId(builder, altReceiverMissionIdOffset);
  AirEventReceivers_Abridged.addReceiverCallSign(builder, receiverCallSignOffset);
  AirEventReceivers_Abridged.addReceiverOwner(builder, receiverOwnerOffset);
  AirEventReceivers_Abridged.addReceiverPoc(builder, receiverPocOffset);
  AirEventReceivers_Abridged.addReceiverLegNum(builder, receiverLegNum);
  AirEventReceivers_Abridged.addReceiverDeployedIcao(builder, receiverDeployedIcaoOffset);
  AirEventReceivers_Abridged.addReceiverDeliveryMethod(builder, receiverDeliveryMethodOffset);
  AirEventReceivers_Abridged.addFuelOn(builder, fuelOn);
  AirEventReceivers_Abridged.addReceiverCellPosition(builder, receiverCellPosition);
  AirEventReceivers_Abridged.addSequenceNum(builder, sequenceNumOffset);
  AirEventReceivers_Abridged.addRecOrg(builder, recOrgOffset);
  AirEventReceivers_Abridged.addNumRecAircraft(builder, numRecAircraft);
  AirEventReceivers_Abridged.addReceiverFuelType(builder, receiverFuelTypeOffset);
  AirEventReceivers_Abridged.addReceiverExercise(builder, receiverExerciseOffset);
  AirEventReceivers_Abridged.addPackageId(builder, packageIdOffset);
  return AirEventReceivers_Abridged.endAirEventReceivers_Abridged(builder);
}

unpack(): AirEventReceivers_AbridgedT {
  return new AirEventReceivers_AbridgedT(
    this.idReceiverSortie(),
    this.idReceiverMission(),
    this.idReceiverAirfield(),
    this.externalReceiverId(),
    this.receiverCoord(),
    this.receiverMds(),
    this.amcReceiverMissionId(),
    this.altReceiverMissionId(),
    this.receiverCallSign(),
    this.receiverOwner(),
    this.receiverPoc(),
    this.receiverLegNum(),
    this.receiverDeployedIcao(),
    this.receiverDeliveryMethod(),
    this.fuelOn(),
    this.receiverCellPosition(),
    this.sequenceNum(),
    this.recOrg(),
    this.numRecAircraft(),
    this.receiverFuelType(),
    this.receiverExercise(),
    this.packageId()
  );
}


unpackTo(_o: AirEventReceivers_AbridgedT): void {
  _o.idReceiverSortie = this.idReceiverSortie();
  _o.idReceiverMission = this.idReceiverMission();
  _o.idReceiverAirfield = this.idReceiverAirfield();
  _o.externalReceiverId = this.externalReceiverId();
  _o.receiverCoord = this.receiverCoord();
  _o.receiverMDS = this.receiverMds();
  _o.amcReceiverMissionId = this.amcReceiverMissionId();
  _o.altReceiverMissionId = this.altReceiverMissionId();
  _o.receiverCallSign = this.receiverCallSign();
  _o.receiverOwner = this.receiverOwner();
  _o.receiverPOC = this.receiverPoc();
  _o.receiverLegNum = this.receiverLegNum();
  _o.receiverDeployedICAO = this.receiverDeployedIcao();
  _o.receiverDeliveryMethod = this.receiverDeliveryMethod();
  _o.fuelOn = this.fuelOn();
  _o.receiverCellPosition = this.receiverCellPosition();
  _o.sequenceNum = this.sequenceNum();
  _o.recOrg = this.recOrg();
  _o.numRecAircraft = this.numRecAircraft();
  _o.receiverFuelType = this.receiverFuelType();
  _o.receiverExercise = this.receiverExercise();
  _o.packageId = this.packageId();
}
}

export class AirEventReceivers_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public idReceiverSortie: string|Uint8Array|null = null,
  public idReceiverMission: string|Uint8Array|null = null,
  public idReceiverAirfield: string|Uint8Array|null = null,
  public externalReceiverId: string|Uint8Array|null = null,
  public receiverCoord: string|Uint8Array|null = null,
  public receiverMDS: string|Uint8Array|null = null,
  public amcReceiverMissionId: string|Uint8Array|null = null,
  public altReceiverMissionId: string|Uint8Array|null = null,
  public receiverCallSign: string|Uint8Array|null = null,
  public receiverOwner: string|Uint8Array|null = null,
  public receiverPOC: string|Uint8Array|null = null,
  public receiverLegNum: number = 0,
  public receiverDeployedICAO: string|Uint8Array|null = null,
  public receiverDeliveryMethod: string|Uint8Array|null = null,
  public fuelOn: number = 0.0,
  public receiverCellPosition: number = 0,
  public sequenceNum: string|Uint8Array|null = null,
  public recOrg: string|Uint8Array|null = null,
  public numRecAircraft: number = 0,
  public receiverFuelType: string|Uint8Array|null = null,
  public receiverExercise: string|Uint8Array|null = null,
  public packageId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const idReceiverSortie = (this.idReceiverSortie !== null ? builder.createString(this.idReceiverSortie!) : 0);
  const idReceiverMission = (this.idReceiverMission !== null ? builder.createString(this.idReceiverMission!) : 0);
  const idReceiverAirfield = (this.idReceiverAirfield !== null ? builder.createString(this.idReceiverAirfield!) : 0);
  const externalReceiverId = (this.externalReceiverId !== null ? builder.createString(this.externalReceiverId!) : 0);
  const receiverCoord = (this.receiverCoord !== null ? builder.createString(this.receiverCoord!) : 0);
  const receiverMDS = (this.receiverMDS !== null ? builder.createString(this.receiverMDS!) : 0);
  const amcReceiverMissionId = (this.amcReceiverMissionId !== null ? builder.createString(this.amcReceiverMissionId!) : 0);
  const altReceiverMissionId = (this.altReceiverMissionId !== null ? builder.createString(this.altReceiverMissionId!) : 0);
  const receiverCallSign = (this.receiverCallSign !== null ? builder.createString(this.receiverCallSign!) : 0);
  const receiverOwner = (this.receiverOwner !== null ? builder.createString(this.receiverOwner!) : 0);
  const receiverPOC = (this.receiverPOC !== null ? builder.createString(this.receiverPOC!) : 0);
  const receiverDeployedICAO = (this.receiverDeployedICAO !== null ? builder.createString(this.receiverDeployedICAO!) : 0);
  const receiverDeliveryMethod = (this.receiverDeliveryMethod !== null ? builder.createString(this.receiverDeliveryMethod!) : 0);
  const sequenceNum = (this.sequenceNum !== null ? builder.createString(this.sequenceNum!) : 0);
  const recOrg = (this.recOrg !== null ? builder.createString(this.recOrg!) : 0);
  const receiverFuelType = (this.receiverFuelType !== null ? builder.createString(this.receiverFuelType!) : 0);
  const receiverExercise = (this.receiverExercise !== null ? builder.createString(this.receiverExercise!) : 0);
  const packageId = (this.packageId !== null ? builder.createString(this.packageId!) : 0);

  return AirEventReceivers_Abridged.createAirEventReceivers_Abridged(builder,
    idReceiverSortie,
    idReceiverMission,
    idReceiverAirfield,
    externalReceiverId,
    receiverCoord,
    receiverMDS,
    amcReceiverMissionId,
    altReceiverMissionId,
    receiverCallSign,
    receiverOwner,
    receiverPOC,
    this.receiverLegNum,
    receiverDeployedICAO,
    receiverDeliveryMethod,
    this.fuelOn,
    this.receiverCellPosition,
    sequenceNum,
    recOrg,
    this.numRecAircraft,
    receiverFuelType,
    receiverExercise,
    packageId
  );
}
}
