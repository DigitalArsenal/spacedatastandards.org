// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Sensor_Ingest_dataMode_Enum } from './Sensor_Ingest_dataMode_Enum.js';


/**
 * /// Model representation of observation data for electro-optical based sensor phenomenologies.
 */
export class Sensor_Ingest implements flatbuffers.IUnpackableObject<Sensor_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Sensor_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSensor_Ingest(bb:flatbuffers.ByteBuffer, obj?:Sensor_Ingest):Sensor_Ingest {
  return (obj || new Sensor_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSensor_Ingest(bb:flatbuffers.ByteBuffer, obj?:Sensor_Ingest):Sensor_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Sensor_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SENS');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SENSOR-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique name of this sensor.
 * Example: /// Example: SENSOR_NAME
 * Constraints: Minimum length = 1, Maximum length = 128
 */
sensorName():string|null
sensorName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
 * Example: /// Example: 1234
 * Constraints: No constraints specified.
 */
sensorNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional short name for the sensor.
 * Example: /// Example: SNR-1
 * Constraints: Minimum length = 0, Maximum length = 5
 */
shortName():string|null
shortName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shortName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional dissemination control required for accessing data (e.g observations) produced by this sensor. This is typically a proprietary data owner control for commercial sensors.
 * Example: /// Example: observations
 * Constraints: Minimum length = 0, Maximum length = 128
 */
dataControl():string|null
dataControl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataControl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional US Air Force identifier for the sensor/ASR site, typically for air surveillance radar (ASR) sensors.
 * Example: /// Example: AF-ID
 * Constraints: Minimum length = 0, Maximum length = 8
 */
afId():string|null
afId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
afId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The sensor type at the site. Optional field, intended primarily for ASRs.
 * Example: /// Example: SENSOR_TYPE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
asrType():string|null
asrType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
asrType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Sensor_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Sensor_Ingest_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional flag indicating if the sensor is active.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
active():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Collection of Sensorcharacteristics which define characteristics and capabilities of a sensor.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
sensorcharacteristics(index: number):string
sensorcharacteristics(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
sensorcharacteristics(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

sensorcharacteristicsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Collection of SensorStats which contain statistics of a sensor.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
sensorStats(index: number):string
sensorStats(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
sensorStats(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

sensorStatsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
sensorlimitsCollection(index: number):string
sensorlimitsCollection(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
sensorlimitsCollection(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

sensorlimitsCollectionLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
entity():string|null
entity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent entity. idEntity is required for Put.
 * Example: /// Example: ENTITY-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idEntity():string|null
idEntity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idEntity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
sensorObservationType():string|null
sensorObservationType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorObservationType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
sensorType():string|null
sensorType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSensor_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(22);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idSensorOffset, 0);
}

static addSensorName(builder:flatbuffers.Builder, sensorNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, sensorNameOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addSensorNumber(builder:flatbuffers.Builder, sensorNumber:number) {
  builder.addFieldInt32(3, sensorNumber, 0);
}

static addShortName(builder:flatbuffers.Builder, shortNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, shortNameOffset, 0);
}

static addDataControl(builder:flatbuffers.Builder, dataControlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, dataControlOffset, 0);
}

static addAfId(builder:flatbuffers.Builder, afIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, afIdOffset, 0);
}

static addAsrType(builder:flatbuffers.Builder, asrTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, asrTypeOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Sensor_Ingest_dataMode_Enum) {
  builder.addFieldInt8(11, dataMode, Sensor_Ingest_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, createdByOffset, 0);
}

static addActive(builder:flatbuffers.Builder, active:boolean) {
  builder.addFieldInt8(14, +active, +false);
}

static addSensorcharacteristics(builder:flatbuffers.Builder, sensorcharacteristicsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, sensorcharacteristicsOffset, 0);
}

static createSensorcharacteristicsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSensorcharacteristicsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSensorStats(builder:flatbuffers.Builder, sensorStatsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, sensorStatsOffset, 0);
}

static createSensorStatsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSensorStatsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSensorlimitsCollection(builder:flatbuffers.Builder, sensorlimitsCollectionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, sensorlimitsCollectionOffset, 0);
}

static createSensorlimitsCollectionVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSensorlimitsCollectionVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEntity(builder:flatbuffers.Builder, entityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, entityOffset, 0);
}

static addIdEntity(builder:flatbuffers.Builder, idEntityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, idEntityOffset, 0);
}

static addSensorObservationType(builder:flatbuffers.Builder, sensorObservationTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, sensorObservationTypeOffset, 0);
}

static addSensorType(builder:flatbuffers.Builder, sensorTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, sensorTypeOffset, 0);
}

static endSensor_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSensor_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SENS');
}

static finishSizePrefixedSensor_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SENS', true);
}

static createSensor_Ingest(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset, sensorNameOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, sensorNumber:number, shortNameOffset:flatbuffers.Offset, dataControlOffset:flatbuffers.Offset, afIdOffset:flatbuffers.Offset, asrTypeOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:Sensor_Ingest_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, active:boolean, sensorcharacteristicsOffset:flatbuffers.Offset, sensorStatsOffset:flatbuffers.Offset, sensorlimitsCollectionOffset:flatbuffers.Offset, entityOffset:flatbuffers.Offset, idEntityOffset:flatbuffers.Offset, sensorObservationTypeOffset:flatbuffers.Offset, sensorTypeOffset:flatbuffers.Offset):flatbuffers.Offset {
  Sensor_Ingest.startSensor_Ingest(builder);
  Sensor_Ingest.addIdSensor(builder, idSensorOffset);
  Sensor_Ingest.addSensorName(builder, sensorNameOffset);
  Sensor_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  Sensor_Ingest.addSensorNumber(builder, sensorNumber);
  Sensor_Ingest.addShortName(builder, shortNameOffset);
  Sensor_Ingest.addDataControl(builder, dataControlOffset);
  Sensor_Ingest.addAfId(builder, afIdOffset);
  Sensor_Ingest.addAsrType(builder, asrTypeOffset);
  Sensor_Ingest.addSource(builder, sourceOffset);
  Sensor_Ingest.addOrigin(builder, originOffset);
  Sensor_Ingest.addOrigNetwork(builder, origNetworkOffset);
  Sensor_Ingest.addDataMode(builder, dataMode);
  Sensor_Ingest.addCreatedAt(builder, createdAtOffset);
  Sensor_Ingest.addCreatedBy(builder, createdByOffset);
  Sensor_Ingest.addActive(builder, active);
  Sensor_Ingest.addSensorcharacteristics(builder, sensorcharacteristicsOffset);
  Sensor_Ingest.addSensorStats(builder, sensorStatsOffset);
  Sensor_Ingest.addSensorlimitsCollection(builder, sensorlimitsCollectionOffset);
  Sensor_Ingest.addEntity(builder, entityOffset);
  Sensor_Ingest.addIdEntity(builder, idEntityOffset);
  Sensor_Ingest.addSensorObservationType(builder, sensorObservationTypeOffset);
  Sensor_Ingest.addSensorType(builder, sensorTypeOffset);
  return Sensor_Ingest.endSensor_Ingest(builder);
}

unpack(): Sensor_IngestT {
  return new Sensor_IngestT(
    this.idSensor(),
    this.sensorName(),
    this.classificationMarking(),
    this.sensorNumber(),
    this.shortName(),
    this.dataControl(),
    this.afId(),
    this.asrType(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.active(),
    this.bb!.createScalarList<string>(this.sensorcharacteristics.bind(this), this.sensorcharacteristicsLength()),
    this.bb!.createScalarList<string>(this.sensorStats.bind(this), this.sensorStatsLength()),
    this.bb!.createScalarList<string>(this.sensorlimitsCollection.bind(this), this.sensorlimitsCollectionLength()),
    this.entity(),
    this.idEntity(),
    this.sensorObservationType(),
    this.sensorType()
  );
}


unpackTo(_o: Sensor_IngestT): void {
  _o.idSensor = this.idSensor();
  _o.sensorName = this.sensorName();
  _o.classificationMarking = this.classificationMarking();
  _o.sensorNumber = this.sensorNumber();
  _o.shortName = this.shortName();
  _o.dataControl = this.dataControl();
  _o.afId = this.afId();
  _o.asrType = this.asrType();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.active = this.active();
  _o.sensorcharacteristics = this.bb!.createScalarList<string>(this.sensorcharacteristics.bind(this), this.sensorcharacteristicsLength());
  _o.sensorStats = this.bb!.createScalarList<string>(this.sensorStats.bind(this), this.sensorStatsLength());
  _o.sensorlimitsCollection = this.bb!.createScalarList<string>(this.sensorlimitsCollection.bind(this), this.sensorlimitsCollectionLength());
  _o.entity = this.entity();
  _o.idEntity = this.idEntity();
  _o.sensorObservationType = this.sensorObservationType();
  _o.sensorType = this.sensorType();
}
}

export class Sensor_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public idSensor: string|Uint8Array|null = null,
  public sensorName: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public sensorNumber: number = 0,
  public shortName: string|Uint8Array|null = null,
  public dataControl: string|Uint8Array|null = null,
  public afId: string|Uint8Array|null = null,
  public asrType: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: Sensor_Ingest_dataMode_Enum = Sensor_Ingest_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public active: boolean = false,
  public sensorcharacteristics: (string)[] = [],
  public sensorStats: (string)[] = [],
  public sensorlimitsCollection: (string)[] = [],
  public entity: string|Uint8Array|null = null,
  public idEntity: string|Uint8Array|null = null,
  public sensorObservationType: string|Uint8Array|null = null,
  public sensorType: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const sensorName = (this.sensorName !== null ? builder.createString(this.sensorName!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const shortName = (this.shortName !== null ? builder.createString(this.shortName!) : 0);
  const dataControl = (this.dataControl !== null ? builder.createString(this.dataControl!) : 0);
  const afId = (this.afId !== null ? builder.createString(this.afId!) : 0);
  const asrType = (this.asrType !== null ? builder.createString(this.asrType!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sensorcharacteristics = Sensor_Ingest.createSensorcharacteristicsVector(builder, builder.createObjectOffsetList(this.sensorcharacteristics));
  const sensorStats = Sensor_Ingest.createSensorStatsVector(builder, builder.createObjectOffsetList(this.sensorStats));
  const sensorlimitsCollection = Sensor_Ingest.createSensorlimitsCollectionVector(builder, builder.createObjectOffsetList(this.sensorlimitsCollection));
  const entity = (this.entity !== null ? builder.createString(this.entity!) : 0);
  const idEntity = (this.idEntity !== null ? builder.createString(this.idEntity!) : 0);
  const sensorObservationType = (this.sensorObservationType !== null ? builder.createString(this.sensorObservationType!) : 0);
  const sensorType = (this.sensorType !== null ? builder.createString(this.sensorType!) : 0);

  return Sensor_Ingest.createSensor_Ingest(builder,
    idSensor,
    sensorName,
    classificationMarking,
    this.sensorNumber,
    shortName,
    dataControl,
    afId,
    asrType,
    source,
    origin,
    origNetwork,
    this.dataMode,
    createdAt,
    createdBy,
    this.active,
    sensorcharacteristics,
    sensorStats,
    sensorlimitsCollection,
    entity,
    idEntity,
    sensorObservationType,
    sensorType
  );
}
}
