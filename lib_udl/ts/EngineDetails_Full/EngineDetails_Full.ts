// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { EngineDetails_Full_dataMode_Enum } from './EngineDetails_Full_dataMode_Enum.js';


/**
 * /// Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.
 */
export class EngineDetails_Full implements flatbuffers.IUnpackableObject<EngineDetails_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EngineDetails_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEngineDetails_Full(bb:flatbuffers.ByteBuffer, obj?:EngineDetails_Full):EngineDetails_Full {
  return (obj || new EngineDetails_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEngineDetails_Full(bb:flatbuffers.ByteBuffer, obj?:EngineDetails_Full):EngineDetails_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EngineDetails_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ENGI');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: ENGINEDETAILS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the parent engine record.
 * Example: /// Example: ENGINE-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idEngine():string|null
idEngine(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idEngine(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Engine type or family.
 * Example: /// Example: ENGINE_TYPE1
 * Constraints: Minimum length = 0, Maximum length = 64
 */
family():string|null
family(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
family(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
 * Example: /// Example: Pressure Fed
 * Constraints: Minimum length = 0, Maximum length = 64
 */
cycleType():string|null
cycleType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cycleType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).
 * Example: /// Example: Electric
 * Constraints: Minimum length = 0, Maximum length = 64
 */
characteristicType():string|null
characteristicType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
characteristicType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Organization ID of the engine manufacturer.
 * Example: /// Example: MANUFACTURERORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Launch engine specific impulse in seconds.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
specificImpulse():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch engine maximum burn time in seconds.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
burnTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Engine maximum thrust at sea level in Kilo-Newtons.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
seaLevelThrust():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Engine maximum thrust in a vacuum in Kilo-Newtons.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
vacuumThrust():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Engine chamber pressure in bars.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
chamberPressure():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Engine nozzle expansion ratio.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
nozzleExpansionRatio():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Engine maximum number of firings.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
maxFirings():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).
 * Example: /// Example: Liquid
 * Constraints: Minimum length = 0, Maximum length = 64
 */
propellant():string|null
propellant(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
propellant(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
 * Example: /// Example: Liquid Oxygen
 * Constraints: Minimum length = 0, Maximum length = 64
 */
oxidizer():string|null
oxidizer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
oxidizer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Notes/Description of the engine.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was last updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():EngineDetails_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : EngineDetails_Full_dataMode_Enum.REAL;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startEngineDetails_Full(builder:flatbuffers.Builder) {
  builder.startObject(26);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdEngine(builder:flatbuffers.Builder, idEngineOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idEngineOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addFamily(builder:flatbuffers.Builder, familyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, familyOffset, 0);
}

static addCycleType(builder:flatbuffers.Builder, cycleTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, cycleTypeOffset, 0);
}

static addCharacteristicType(builder:flatbuffers.Builder, characteristicTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, characteristicTypeOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, manufacturerOrgIdOffset, 0);
}

static addSpecificImpulse(builder:flatbuffers.Builder, specificImpulse:number) {
  builder.addFieldFloat64(7, specificImpulse, 0.0);
}

static addBurnTime(builder:flatbuffers.Builder, burnTime:number) {
  builder.addFieldFloat64(8, burnTime, 0.0);
}

static addSeaLevelThrust(builder:flatbuffers.Builder, seaLevelThrust:number) {
  builder.addFieldFloat64(9, seaLevelThrust, 0.0);
}

static addVacuumThrust(builder:flatbuffers.Builder, vacuumThrust:number) {
  builder.addFieldFloat64(10, vacuumThrust, 0.0);
}

static addChamberPressure(builder:flatbuffers.Builder, chamberPressure:number) {
  builder.addFieldFloat64(11, chamberPressure, 0.0);
}

static addNozzleExpansionRatio(builder:flatbuffers.Builder, nozzleExpansionRatio:number) {
  builder.addFieldFloat64(12, nozzleExpansionRatio, 0.0);
}

static addMaxFirings(builder:flatbuffers.Builder, maxFirings:number) {
  builder.addFieldInt32(13, maxFirings, 0);
}

static addPropellant(builder:flatbuffers.Builder, propellantOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, propellantOffset, 0);
}

static addOxidizer(builder:flatbuffers.Builder, oxidizerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, oxidizerOffset, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, notesOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, updatedByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:EngineDetails_Full_dataMode_Enum) {
  builder.addFieldInt8(24, dataMode, EngineDetails_Full_dataMode_Enum.REAL);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endEngineDetails_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEngineDetails_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ENGI');
}

static finishSizePrefixedEngineDetails_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ENGI', true);
}

static createEngineDetails_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idEngineOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, familyOffset:flatbuffers.Offset, cycleTypeOffset:flatbuffers.Offset, characteristicTypeOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, specificImpulse:number, burnTime:number, seaLevelThrust:number, vacuumThrust:number, chamberPressure:number, nozzleExpansionRatio:number, maxFirings:number, propellantOffset:flatbuffers.Offset, oxidizerOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:EngineDetails_Full_dataMode_Enum, tagsOffset:flatbuffers.Offset):flatbuffers.Offset {
  EngineDetails_Full.startEngineDetails_Full(builder);
  EngineDetails_Full.addId(builder, idOffset);
  EngineDetails_Full.addIdEngine(builder, idEngineOffset);
  EngineDetails_Full.addClassificationMarking(builder, classificationMarkingOffset);
  EngineDetails_Full.addFamily(builder, familyOffset);
  EngineDetails_Full.addCycleType(builder, cycleTypeOffset);
  EngineDetails_Full.addCharacteristicType(builder, characteristicTypeOffset);
  EngineDetails_Full.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  EngineDetails_Full.addSpecificImpulse(builder, specificImpulse);
  EngineDetails_Full.addBurnTime(builder, burnTime);
  EngineDetails_Full.addSeaLevelThrust(builder, seaLevelThrust);
  EngineDetails_Full.addVacuumThrust(builder, vacuumThrust);
  EngineDetails_Full.addChamberPressure(builder, chamberPressure);
  EngineDetails_Full.addNozzleExpansionRatio(builder, nozzleExpansionRatio);
  EngineDetails_Full.addMaxFirings(builder, maxFirings);
  EngineDetails_Full.addPropellant(builder, propellantOffset);
  EngineDetails_Full.addOxidizer(builder, oxidizerOffset);
  EngineDetails_Full.addNotes(builder, notesOffset);
  EngineDetails_Full.addCreatedAt(builder, createdAtOffset);
  EngineDetails_Full.addCreatedBy(builder, createdByOffset);
  EngineDetails_Full.addUpdatedAt(builder, updatedAtOffset);
  EngineDetails_Full.addUpdatedBy(builder, updatedByOffset);
  EngineDetails_Full.addSource(builder, sourceOffset);
  EngineDetails_Full.addOrigin(builder, originOffset);
  EngineDetails_Full.addOrigNetwork(builder, origNetworkOffset);
  EngineDetails_Full.addDataMode(builder, dataMode);
  EngineDetails_Full.addTags(builder, tagsOffset);
  return EngineDetails_Full.endEngineDetails_Full(builder);
}

unpack(): EngineDetails_FullT {
  return new EngineDetails_FullT(
    this.id(),
    this.idEngine(),
    this.classificationMarking(),
    this.family(),
    this.cycleType(),
    this.characteristicType(),
    this.manufacturerOrgId(),
    this.specificImpulse(),
    this.burnTime(),
    this.seaLevelThrust(),
    this.vacuumThrust(),
    this.chamberPressure(),
    this.nozzleExpansionRatio(),
    this.maxFirings(),
    this.propellant(),
    this.oxidizer(),
    this.notes(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength())
  );
}


unpackTo(_o: EngineDetails_FullT): void {
  _o.id = this.id();
  _o.idEngine = this.idEngine();
  _o.classificationMarking = this.classificationMarking();
  _o.family = this.family();
  _o.cycleType = this.cycleType();
  _o.characteristicType = this.characteristicType();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.specificImpulse = this.specificImpulse();
  _o.burnTime = this.burnTime();
  _o.seaLevelThrust = this.seaLevelThrust();
  _o.vacuumThrust = this.vacuumThrust();
  _o.chamberPressure = this.chamberPressure();
  _o.nozzleExpansionRatio = this.nozzleExpansionRatio();
  _o.maxFirings = this.maxFirings();
  _o.propellant = this.propellant();
  _o.oxidizer = this.oxidizer();
  _o.notes = this.notes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength());
}
}

export class EngineDetails_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idEngine: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public family: string|Uint8Array|null = null,
  public cycleType: string|Uint8Array|null = null,
  public characteristicType: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public specificImpulse: number = 0.0,
  public burnTime: number = 0.0,
  public seaLevelThrust: number = 0.0,
  public vacuumThrust: number = 0.0,
  public chamberPressure: number = 0.0,
  public nozzleExpansionRatio: number = 0.0,
  public maxFirings: number = 0,
  public propellant: string|Uint8Array|null = null,
  public oxidizer: string|Uint8Array|null = null,
  public notes: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: EngineDetails_Full_dataMode_Enum = EngineDetails_Full_dataMode_Enum.REAL,
  public tags: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idEngine = (this.idEngine !== null ? builder.createString(this.idEngine!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const family = (this.family !== null ? builder.createString(this.family!) : 0);
  const cycleType = (this.cycleType !== null ? builder.createString(this.cycleType!) : 0);
  const characteristicType = (this.characteristicType !== null ? builder.createString(this.characteristicType!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const propellant = (this.propellant !== null ? builder.createString(this.propellant!) : 0);
  const oxidizer = (this.oxidizer !== null ? builder.createString(this.oxidizer!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const tags = EngineDetails_Full.createTagsVector(builder, builder.createObjectOffsetList(this.tags));

  return EngineDetails_Full.createEngineDetails_Full(builder,
    id,
    idEngine,
    classificationMarking,
    family,
    cycleType,
    characteristicType,
    manufacturerOrgId,
    this.specificImpulse,
    this.burnTime,
    this.seaLevelThrust,
    this.vacuumThrust,
    this.chamberPressure,
    this.nozzleExpansionRatio,
    this.maxFirings,
    propellant,
    oxidizer,
    notes,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    source,
    origin,
    origNetwork,
    this.dataMode,
    tags
  );
}
}
