// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
 */
export class MtiTargetReport_Abridged implements flatbuffers.IUnpackableObject<MtiTargetReport_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MtiTargetReport_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMtiTargetReport_Abridged(bb:flatbuffers.ByteBuffer, obj?:MtiTargetReport_Abridged):MtiTargetReport_Abridged {
  return (obj || new MtiTargetReport_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMtiTargetReport_Abridged(bb:flatbuffers.ByteBuffer, obj?:MtiTargetReport_Abridged):MtiTargetReport_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MtiTargetReport_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MTIT');
}

/**
 * Sequential count of this MTI report within the dwell.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
d321():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) of the Equator.
 * Example: /// Example: 20.23
 * Constraints: No constraints specified.
 */
d322():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The East-West position of the reported detection, expressed as degrees East (positive) from the Prime Meridian.
 * Example: /// Example: 20.23
 * Constraints: No constraints specified.
 */
d323():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) from the Dwell Area Center Latitude.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
d324():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The East-West position of the reported detection, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian from the Dwell Area Center Longitude.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
d325():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Height of the reported detection, referenced to its position above the WGS 84 ellipsoid, in meters.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
d326():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The component of velocity for the reported detection, expressed in centimeters per second, corrected for platform motion, along the line of sight between the sensor and the reported detection, where the positive direction is away from the sensor.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
d327():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The target wrap velocity permits trackers to un-wrap velocities for targets with line-of-sight components large enough to exceed the first velocity period.  Expressed in centimeters/sec.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
d328():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Estimated signal-to-noise ratio (SNR) of the target return, in decibels.
 * Example: /// Example: 17
 * Constraints: No constraints specified.
 */
d329():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The classification of the target (i.e. vehicle, aircraft, â€¦).
 * Example: /// Example: vehicle
 * Constraints: Minimum length = 0, Maximum length = 32
 */
d3210():string|null
d3210(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
d3210(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Estimated probability that the target classification field is correctly classified.
 * Example: /// Example: 90
 * Constraints: No constraints specified.
 */
d3211():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Standard deviation of the estimated slant range of the reported detection, in centimeters.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
d3212():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Standard deviation of the position estimate, in the cross-range direction, of the reported detection, in decimeters.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
d3213():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Standard deviation of the estimated geodetic height, in meters.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
d3214():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Standard deviation of the measured line-of-sight velocity component, in centimeters per second.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
d3215():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The Truth Tag- Application is the Application Field truncated to 8 bits, from the Entity State Protocol Data Unit (PDU) used to generate the MTI Target.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
d3216():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The Truth Tag - Entity is the Entity Field from the Entity State PDU used to generate the MTI Target.
 * Example: /// Example: 1234567890
 * Constraints: No constraints specified.
 */
d3217():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

/**
 * Estimated radar cross section of the target return, in half-decibels.
 * Example: /// Example: 98
 * Constraints: No constraints specified.
 */
d3218():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startMtiTargetReport_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(18);
}

static addD321(builder:flatbuffers.Builder, d321:number) {
  builder.addFieldInt32(0, d321, 0);
}

static addD322(builder:flatbuffers.Builder, d322:number) {
  builder.addFieldFloat64(1, d322, 0.0);
}

static addD323(builder:flatbuffers.Builder, d323:number) {
  builder.addFieldFloat64(2, d323, 0.0);
}

static addD324(builder:flatbuffers.Builder, d324:number) {
  builder.addFieldInt32(3, d324, 0);
}

static addD325(builder:flatbuffers.Builder, d325:number) {
  builder.addFieldInt32(4, d325, 0);
}

static addD326(builder:flatbuffers.Builder, d326:number) {
  builder.addFieldInt32(5, d326, 0);
}

static addD327(builder:flatbuffers.Builder, d327:number) {
  builder.addFieldInt32(6, d327, 0);
}

static addD328(builder:flatbuffers.Builder, d328:number) {
  builder.addFieldInt32(7, d328, 0);
}

static addD329(builder:flatbuffers.Builder, d329:number) {
  builder.addFieldInt32(8, d329, 0);
}

static addD3210(builder:flatbuffers.Builder, d3210Offset:flatbuffers.Offset) {
  builder.addFieldOffset(9, d3210Offset, 0);
}

static addD3211(builder:flatbuffers.Builder, d3211:number) {
  builder.addFieldInt32(10, d3211, 0);
}

static addD3212(builder:flatbuffers.Builder, d3212:number) {
  builder.addFieldInt32(11, d3212, 0);
}

static addD3213(builder:flatbuffers.Builder, d3213:number) {
  builder.addFieldInt32(12, d3213, 0);
}

static addD3214(builder:flatbuffers.Builder, d3214:number) {
  builder.addFieldInt32(13, d3214, 0);
}

static addD3215(builder:flatbuffers.Builder, d3215:number) {
  builder.addFieldInt32(14, d3215, 0);
}

static addD3216(builder:flatbuffers.Builder, d3216:number) {
  builder.addFieldInt32(15, d3216, 0);
}

static addD3217(builder:flatbuffers.Builder, d3217:bigint) {
  builder.addFieldInt64(16, d3217, BigInt('0'));
}

static addD3218(builder:flatbuffers.Builder, d3218:number) {
  builder.addFieldInt32(17, d3218, 0);
}

static endMtiTargetReport_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMtiTargetReport_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIT');
}

static finishSizePrefixedMtiTargetReport_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIT', true);
}

static createMtiTargetReport_Abridged(builder:flatbuffers.Builder, d321:number, d322:number, d323:number, d324:number, d325:number, d326:number, d327:number, d328:number, d329:number, d3210Offset:flatbuffers.Offset, d3211:number, d3212:number, d3213:number, d3214:number, d3215:number, d3216:number, d3217:bigint, d3218:number):flatbuffers.Offset {
  MtiTargetReport_Abridged.startMtiTargetReport_Abridged(builder);
  MtiTargetReport_Abridged.addD321(builder, d321);
  MtiTargetReport_Abridged.addD322(builder, d322);
  MtiTargetReport_Abridged.addD323(builder, d323);
  MtiTargetReport_Abridged.addD324(builder, d324);
  MtiTargetReport_Abridged.addD325(builder, d325);
  MtiTargetReport_Abridged.addD326(builder, d326);
  MtiTargetReport_Abridged.addD327(builder, d327);
  MtiTargetReport_Abridged.addD328(builder, d328);
  MtiTargetReport_Abridged.addD329(builder, d329);
  MtiTargetReport_Abridged.addD3210(builder, d3210Offset);
  MtiTargetReport_Abridged.addD3211(builder, d3211);
  MtiTargetReport_Abridged.addD3212(builder, d3212);
  MtiTargetReport_Abridged.addD3213(builder, d3213);
  MtiTargetReport_Abridged.addD3214(builder, d3214);
  MtiTargetReport_Abridged.addD3215(builder, d3215);
  MtiTargetReport_Abridged.addD3216(builder, d3216);
  MtiTargetReport_Abridged.addD3217(builder, d3217);
  MtiTargetReport_Abridged.addD3218(builder, d3218);
  return MtiTargetReport_Abridged.endMtiTargetReport_Abridged(builder);
}

unpack(): MtiTargetReport_AbridgedT {
  return new MtiTargetReport_AbridgedT(
    this.d321(),
    this.d322(),
    this.d323(),
    this.d324(),
    this.d325(),
    this.d326(),
    this.d327(),
    this.d328(),
    this.d329(),
    this.d3210(),
    this.d3211(),
    this.d3212(),
    this.d3213(),
    this.d3214(),
    this.d3215(),
    this.d3216(),
    this.d3217(),
    this.d3218()
  );
}


unpackTo(_o: MtiTargetReport_AbridgedT): void {
  _o.d321 = this.d321();
  _o.d322 = this.d322();
  _o.d323 = this.d323();
  _o.d324 = this.d324();
  _o.d325 = this.d325();
  _o.d326 = this.d326();
  _o.d327 = this.d327();
  _o.d328 = this.d328();
  _o.d329 = this.d329();
  _o.d3210 = this.d3210();
  _o.d3211 = this.d3211();
  _o.d3212 = this.d3212();
  _o.d3213 = this.d3213();
  _o.d3214 = this.d3214();
  _o.d3215 = this.d3215();
  _o.d3216 = this.d3216();
  _o.d3217 = this.d3217();
  _o.d3218 = this.d3218();
}
}

export class MtiTargetReport_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public d321: number = 0,
  public d322: number = 0.0,
  public d323: number = 0.0,
  public d324: number = 0,
  public d325: number = 0,
  public d326: number = 0,
  public d327: number = 0,
  public d328: number = 0,
  public d329: number = 0,
  public d3210: string|Uint8Array|null = null,
  public d3211: number = 0,
  public d3212: number = 0,
  public d3213: number = 0,
  public d3214: number = 0,
  public d3215: number = 0,
  public d3216: number = 0,
  public d3217: bigint = BigInt('0'),
  public d3218: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const d3210 = (this.d3210 !== null ? builder.createString(this.d3210!) : 0);

  return MtiTargetReport_Abridged.createMtiTargetReport_Abridged(builder,
    this.d321,
    this.d322,
    this.d323,
    this.d324,
    this.d325,
    this.d326,
    this.d327,
    this.d328,
    this.d329,
    d3210,
    this.d3211,
    this.d3212,
    this.d3213,
    this.d3214,
    this.d3215,
    this.d3216,
    this.d3217,
    this.d3218
  );
}
}
