// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of diplomatic clearance details.
 */
export class DiplomaticClearanceDetails_Full implements flatbuffers.IUnpackableObject<DiplomaticClearanceDetails_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DiplomaticClearanceDetails_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDiplomaticClearanceDetails_Full(bb:flatbuffers.ByteBuffer, obj?:DiplomaticClearanceDetails_Full):DiplomaticClearanceDetails_Full {
  return (obj || new DiplomaticClearanceDetails_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDiplomaticClearanceDetails_Full(bb:flatbuffers.ByteBuffer, obj?:DiplomaticClearanceDetails_Full):DiplomaticClearanceDetails_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DiplomaticClearanceDetails_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DIPL');
}

/**
 * Unique identifier of the Aircraft Sortie associated with this diplomatic clearance record.
 * Example: /// Example: 207010e0-f97d-431c-8c00-7e46acfef0f5
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSortie():string|null
idSortie(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSortie(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifies the Itinerary point of a sortie where an air event occurs.
 * Example: /// Example: 825
 * Constraints: No constraints specified.
 */
legNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The 1801 fileable route of flight string associated with this diplomatic clearance. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
 * Example: /// Example: DCT DOH P430 BAYAN/M062F150 P430 RAMKI
 * Constraints: Minimum length = 0, Maximum length = 4000
 */
routeString():string|null
routeString(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
routeString(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The start time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
validStartTime():string|null
validStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
validStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The end time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
validEndTime():string|null
validEndTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
validEndTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of this diplomatic clearance issued by the host country.
 * Example: /// Example: MFMW225662GHQ
 * Constraints: Minimum length = 0, Maximum length = 32
 */
clearanceId():string|null
clearanceId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
clearanceId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional clearance ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalClearanceId():string|null
externalClearanceId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalClearanceId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The call sign of the sortie cleared with this diplomatic clearance.
 * Example: /// Example: FALCN09
 * Constraints: Minimum length = 0, Maximum length = 24
 */
clearedCallSign():string|null
clearedCallSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
clearedCallSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The placement of this diplomatic clearance within a sequence of clearances used on a sortie. For example, a sequence value of 3 means that it is the third diplomatic clearance the aircraft will use.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
sequenceNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
 * Example: /// Example: NL
 * Constraints: Minimum length = 0, Maximum length = 4
 */
countryCode():string|null
countryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
 * Example: /// Example: IZ
 * Constraints: Minimum length = 0, Maximum length = 16
 */
altCountryCode():string|null
altCountryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altCountryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the country issuing this diplomatic clearance.
 * Example: /// Example: NETHERLANDS
 * Constraints: Minimum length = 0, Maximum length = 50
 */
countryName():string|null
countryName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of when this diplomatic clearance is valid.
 * Example: /// Example: CY2023
 * Constraints: Minimum length = 0, Maximum length = 256
 */
validDesc():string|null
validDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
validDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Remarks concerning the valid diplomatic clearance window.
 * Example: /// Example: Period remarks
 * Constraints: Minimum length = 0, Maximum length = 256
 */
windowRemark():string|null
windowRemark(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
windowRemark(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The navigation point name where the aircraft must enter the country.
 * Example: /// Example: LOMOS
 * Constraints: Minimum length = 0, Maximum length = 38
 */
entryPoint():string|null
entryPoint(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entryPoint(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Earliest time the aircraft may enter the country, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
entryNet():string|null
entryNet(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entryNet(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The navigation point name where the aircraft must exit the country.
 * Example: /// Example: BUDOP
 * Constraints: Minimum length = 0, Maximum length = 38
 */
exitPoint():string|null
exitPoint(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
exitPoint(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Latest time the aircraft may exit the country, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
exitNlt():string|null
exitNlt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
exitNlt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating whether the clearance request requires ICAO specific information.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
reqIcao():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The type of action the aircraft can take with this diplomatic clearance (e.g. O for Overfly, L for Land, etc.).
 * Example: /// Example: O
 * Constraints: Minimum length = 0, Maximum length = 1
 */
action():string|null
action(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
action(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the current status of the diplomatic clearance request.
 * Example: /// Example: IN WORK
 * Constraints: Minimum length = 0, Maximum length = 16
 */
status():string|null
status(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
status(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The diplomatic clearance profile name used within clearance management systems.
 * Example: /// Example: T LAND/OFLY IATA COMPLIANT CARGO 23
 * Constraints: Minimum length = 0, Maximum length = 100
 */
profile():string|null
profile(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
profile(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating whether entry/exit points are required for clearances.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
reqPoint():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Remarks concerning this diplomatic clearance.
 * Example: /// Example: Clearance remarks
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
clearanceRemark():string|null
clearanceRemark(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
clearanceRemark(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDiplomaticClearanceDetails_Full(builder:flatbuffers.Builder) {
  builder.startObject(24);
}

static addIdSortie(builder:flatbuffers.Builder, idSortieOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idSortieOffset, 0);
}

static addLegNum(builder:flatbuffers.Builder, legNum:number) {
  builder.addFieldInt32(1, legNum, 0);
}

static addRouteString(builder:flatbuffers.Builder, routeStringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, routeStringOffset, 0);
}

static addValidStartTime(builder:flatbuffers.Builder, validStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, validStartTimeOffset, 0);
}

static addValidEndTime(builder:flatbuffers.Builder, validEndTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, validEndTimeOffset, 0);
}

static addClearanceId(builder:flatbuffers.Builder, clearanceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, clearanceIdOffset, 0);
}

static addExternalClearanceId(builder:flatbuffers.Builder, externalClearanceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, externalClearanceIdOffset, 0);
}

static addClearedCallSign(builder:flatbuffers.Builder, clearedCallSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, clearedCallSignOffset, 0);
}

static addSequenceNum(builder:flatbuffers.Builder, sequenceNum:number) {
  builder.addFieldInt32(8, sequenceNum, 0);
}

static addCountryCode(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, countryCodeOffset, 0);
}

static addAltCountryCode(builder:flatbuffers.Builder, altCountryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, altCountryCodeOffset, 0);
}

static addCountryName(builder:flatbuffers.Builder, countryNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, countryNameOffset, 0);
}

static addValidDesc(builder:flatbuffers.Builder, validDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, validDescOffset, 0);
}

static addWindowRemark(builder:flatbuffers.Builder, windowRemarkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, windowRemarkOffset, 0);
}

static addEntryPoint(builder:flatbuffers.Builder, entryPointOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, entryPointOffset, 0);
}

static addEntryNet(builder:flatbuffers.Builder, entryNetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, entryNetOffset, 0);
}

static addExitPoint(builder:flatbuffers.Builder, exitPointOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, exitPointOffset, 0);
}

static addExitNlt(builder:flatbuffers.Builder, exitNltOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, exitNltOffset, 0);
}

static addReqIcao(builder:flatbuffers.Builder, reqIcao:boolean) {
  builder.addFieldInt8(18, +reqIcao, +false);
}

static addAction(builder:flatbuffers.Builder, actionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, actionOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, statusOffset, 0);
}

static addProfile(builder:flatbuffers.Builder, profileOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, profileOffset, 0);
}

static addReqPoint(builder:flatbuffers.Builder, reqPoint:boolean) {
  builder.addFieldInt8(22, +reqPoint, +false);
}

static addClearanceRemark(builder:flatbuffers.Builder, clearanceRemarkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, clearanceRemarkOffset, 0);
}

static endDiplomaticClearanceDetails_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDiplomaticClearanceDetails_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DIPL');
}

static finishSizePrefixedDiplomaticClearanceDetails_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DIPL', true);
}

static createDiplomaticClearanceDetails_Full(builder:flatbuffers.Builder, idSortieOffset:flatbuffers.Offset, legNum:number, routeStringOffset:flatbuffers.Offset, validStartTimeOffset:flatbuffers.Offset, validEndTimeOffset:flatbuffers.Offset, clearanceIdOffset:flatbuffers.Offset, externalClearanceIdOffset:flatbuffers.Offset, clearedCallSignOffset:flatbuffers.Offset, sequenceNum:number, countryCodeOffset:flatbuffers.Offset, altCountryCodeOffset:flatbuffers.Offset, countryNameOffset:flatbuffers.Offset, validDescOffset:flatbuffers.Offset, windowRemarkOffset:flatbuffers.Offset, entryPointOffset:flatbuffers.Offset, entryNetOffset:flatbuffers.Offset, exitPointOffset:flatbuffers.Offset, exitNltOffset:flatbuffers.Offset, reqIcao:boolean, actionOffset:flatbuffers.Offset, statusOffset:flatbuffers.Offset, profileOffset:flatbuffers.Offset, reqPoint:boolean, clearanceRemarkOffset:flatbuffers.Offset):flatbuffers.Offset {
  DiplomaticClearanceDetails_Full.startDiplomaticClearanceDetails_Full(builder);
  DiplomaticClearanceDetails_Full.addIdSortie(builder, idSortieOffset);
  DiplomaticClearanceDetails_Full.addLegNum(builder, legNum);
  DiplomaticClearanceDetails_Full.addRouteString(builder, routeStringOffset);
  DiplomaticClearanceDetails_Full.addValidStartTime(builder, validStartTimeOffset);
  DiplomaticClearanceDetails_Full.addValidEndTime(builder, validEndTimeOffset);
  DiplomaticClearanceDetails_Full.addClearanceId(builder, clearanceIdOffset);
  DiplomaticClearanceDetails_Full.addExternalClearanceId(builder, externalClearanceIdOffset);
  DiplomaticClearanceDetails_Full.addClearedCallSign(builder, clearedCallSignOffset);
  DiplomaticClearanceDetails_Full.addSequenceNum(builder, sequenceNum);
  DiplomaticClearanceDetails_Full.addCountryCode(builder, countryCodeOffset);
  DiplomaticClearanceDetails_Full.addAltCountryCode(builder, altCountryCodeOffset);
  DiplomaticClearanceDetails_Full.addCountryName(builder, countryNameOffset);
  DiplomaticClearanceDetails_Full.addValidDesc(builder, validDescOffset);
  DiplomaticClearanceDetails_Full.addWindowRemark(builder, windowRemarkOffset);
  DiplomaticClearanceDetails_Full.addEntryPoint(builder, entryPointOffset);
  DiplomaticClearanceDetails_Full.addEntryNet(builder, entryNetOffset);
  DiplomaticClearanceDetails_Full.addExitPoint(builder, exitPointOffset);
  DiplomaticClearanceDetails_Full.addExitNlt(builder, exitNltOffset);
  DiplomaticClearanceDetails_Full.addReqIcao(builder, reqIcao);
  DiplomaticClearanceDetails_Full.addAction(builder, actionOffset);
  DiplomaticClearanceDetails_Full.addStatus(builder, statusOffset);
  DiplomaticClearanceDetails_Full.addProfile(builder, profileOffset);
  DiplomaticClearanceDetails_Full.addReqPoint(builder, reqPoint);
  DiplomaticClearanceDetails_Full.addClearanceRemark(builder, clearanceRemarkOffset);
  return DiplomaticClearanceDetails_Full.endDiplomaticClearanceDetails_Full(builder);
}

unpack(): DiplomaticClearanceDetails_FullT {
  return new DiplomaticClearanceDetails_FullT(
    this.idSortie(),
    this.legNum(),
    this.routeString(),
    this.validStartTime(),
    this.validEndTime(),
    this.clearanceId(),
    this.externalClearanceId(),
    this.clearedCallSign(),
    this.sequenceNum(),
    this.countryCode(),
    this.altCountryCode(),
    this.countryName(),
    this.validDesc(),
    this.windowRemark(),
    this.entryPoint(),
    this.entryNet(),
    this.exitPoint(),
    this.exitNlt(),
    this.reqIcao(),
    this.action(),
    this.status(),
    this.profile(),
    this.reqPoint(),
    this.clearanceRemark()
  );
}


unpackTo(_o: DiplomaticClearanceDetails_FullT): void {
  _o.idSortie = this.idSortie();
  _o.legNum = this.legNum();
  _o.routeString = this.routeString();
  _o.validStartTime = this.validStartTime();
  _o.validEndTime = this.validEndTime();
  _o.clearanceId = this.clearanceId();
  _o.externalClearanceId = this.externalClearanceId();
  _o.clearedCallSign = this.clearedCallSign();
  _o.sequenceNum = this.sequenceNum();
  _o.countryCode = this.countryCode();
  _o.altCountryCode = this.altCountryCode();
  _o.countryName = this.countryName();
  _o.validDesc = this.validDesc();
  _o.windowRemark = this.windowRemark();
  _o.entryPoint = this.entryPoint();
  _o.entryNet = this.entryNet();
  _o.exitPoint = this.exitPoint();
  _o.exitNlt = this.exitNlt();
  _o.reqIcao = this.reqIcao();
  _o.action = this.action();
  _o.status = this.status();
  _o.profile = this.profile();
  _o.reqPoint = this.reqPoint();
  _o.clearanceRemark = this.clearanceRemark();
}
}

export class DiplomaticClearanceDetails_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public idSortie: string|Uint8Array|null = null,
  public legNum: number = 0,
  public routeString: string|Uint8Array|null = null,
  public validStartTime: string|Uint8Array|null = null,
  public validEndTime: string|Uint8Array|null = null,
  public clearanceId: string|Uint8Array|null = null,
  public externalClearanceId: string|Uint8Array|null = null,
  public clearedCallSign: string|Uint8Array|null = null,
  public sequenceNum: number = 0,
  public countryCode: string|Uint8Array|null = null,
  public altCountryCode: string|Uint8Array|null = null,
  public countryName: string|Uint8Array|null = null,
  public validDesc: string|Uint8Array|null = null,
  public windowRemark: string|Uint8Array|null = null,
  public entryPoint: string|Uint8Array|null = null,
  public entryNet: string|Uint8Array|null = null,
  public exitPoint: string|Uint8Array|null = null,
  public exitNlt: string|Uint8Array|null = null,
  public reqIcao: boolean = false,
  public action: string|Uint8Array|null = null,
  public status: string|Uint8Array|null = null,
  public profile: string|Uint8Array|null = null,
  public reqPoint: boolean = false,
  public clearanceRemark: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const idSortie = (this.idSortie !== null ? builder.createString(this.idSortie!) : 0);
  const routeString = (this.routeString !== null ? builder.createString(this.routeString!) : 0);
  const validStartTime = (this.validStartTime !== null ? builder.createString(this.validStartTime!) : 0);
  const validEndTime = (this.validEndTime !== null ? builder.createString(this.validEndTime!) : 0);
  const clearanceId = (this.clearanceId !== null ? builder.createString(this.clearanceId!) : 0);
  const externalClearanceId = (this.externalClearanceId !== null ? builder.createString(this.externalClearanceId!) : 0);
  const clearedCallSign = (this.clearedCallSign !== null ? builder.createString(this.clearedCallSign!) : 0);
  const countryCode = (this.countryCode !== null ? builder.createString(this.countryCode!) : 0);
  const altCountryCode = (this.altCountryCode !== null ? builder.createString(this.altCountryCode!) : 0);
  const countryName = (this.countryName !== null ? builder.createString(this.countryName!) : 0);
  const validDesc = (this.validDesc !== null ? builder.createString(this.validDesc!) : 0);
  const windowRemark = (this.windowRemark !== null ? builder.createString(this.windowRemark!) : 0);
  const entryPoint = (this.entryPoint !== null ? builder.createString(this.entryPoint!) : 0);
  const entryNet = (this.entryNet !== null ? builder.createString(this.entryNet!) : 0);
  const exitPoint = (this.exitPoint !== null ? builder.createString(this.exitPoint!) : 0);
  const exitNlt = (this.exitNlt !== null ? builder.createString(this.exitNlt!) : 0);
  const action = (this.action !== null ? builder.createString(this.action!) : 0);
  const status = (this.status !== null ? builder.createString(this.status!) : 0);
  const profile = (this.profile !== null ? builder.createString(this.profile!) : 0);
  const clearanceRemark = (this.clearanceRemark !== null ? builder.createString(this.clearanceRemark!) : 0);

  return DiplomaticClearanceDetails_Full.createDiplomaticClearanceDetails_Full(builder,
    idSortie,
    this.legNum,
    routeString,
    validStartTime,
    validEndTime,
    clearanceId,
    externalClearanceId,
    clearedCallSign,
    this.sequenceNum,
    countryCode,
    altCountryCode,
    countryName,
    validDesc,
    windowRemark,
    entryPoint,
    entryNet,
    exitPoint,
    exitNlt,
    this.reqIcao,
    action,
    status,
    profile,
    this.reqPoint,
    clearanceRemark
  );
}
}
