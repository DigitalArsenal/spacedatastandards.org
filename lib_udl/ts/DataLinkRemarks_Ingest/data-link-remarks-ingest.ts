// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of remarks associated with this data link message.
 */
export class DataLinkRemarks_Ingest implements flatbuffers.IUnpackableObject<DataLinkRemarks_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataLinkRemarks_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataLinkRemarks_Ingest(bb:flatbuffers.ByteBuffer, obj?:DataLinkRemarks_Ingest):DataLinkRemarks_Ingest {
  return (obj || new DataLinkRemarks_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataLinkRemarks_Ingest(bb:flatbuffers.ByteBuffer, obj?:DataLinkRemarks_Ingest):DataLinkRemarks_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataLinkRemarks_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DATA');
}

/**
 * Indicates the subject matter of the remark.
 * Example: /// Example: CONTINGENCY PROCEDURES
 * Constraints: Minimum length = 0, Maximum length = 64
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Text of the remark.
 * Example: /// Example: Example data link remarks
 * Constraints: Minimum length = 0, Maximum length = 128
 */
text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDataLinkRemarks_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, textOffset, 0);
}

static endDataLinkRemarks_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDataLinkRemarks_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA');
}

static finishSizePrefixedDataLinkRemarks_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA', true);
}

static createDataLinkRemarks_Ingest(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, textOffset:flatbuffers.Offset):flatbuffers.Offset {
  DataLinkRemarks_Ingest.startDataLinkRemarks_Ingest(builder);
  DataLinkRemarks_Ingest.addType(builder, typeOffset);
  DataLinkRemarks_Ingest.addText(builder, textOffset);
  return DataLinkRemarks_Ingest.endDataLinkRemarks_Ingest(builder);
}

unpack(): DataLinkRemarks_IngestT {
  return new DataLinkRemarks_IngestT(
    this.type(),
    this.text()
  );
}


unpackTo(_o: DataLinkRemarks_IngestT): void {
  _o.type = this.type();
  _o.text = this.text();
}
}

export class DataLinkRemarks_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public type: string|Uint8Array|null = null,
  public text: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const text = (this.text !== null ? builder.createString(this.text!) : 0);

  return DataLinkRemarks_Ingest.createDataLinkRemarks_Ingest(builder,
    type,
    text
  );
}
}
