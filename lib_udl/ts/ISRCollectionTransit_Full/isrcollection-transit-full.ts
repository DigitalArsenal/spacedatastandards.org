// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Object for data dissemination.
 */
export class ISRCollectionTransit_Full implements flatbuffers.IUnpackableObject<ISRCollectionTransit_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ISRCollectionTransit_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsISRCollectionTransit_Full(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionTransit_Full):ISRCollectionTransit_Full {
  return (obj || new ISRCollectionTransit_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsISRCollectionTransit_Full(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionTransit_Full):ISRCollectionTransit_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ISRCollectionTransit_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ISRC');
}

/**
 * Transit Unique Identifier.
 * Example: /// Example: ISRCOLLECTIONTRANSIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Military Base to transmit the dissemination of this data.
 * Example: /// Example: ENVOYS
 * Constraints: Minimum length = 0, Maximum length = 32
 */
base():string|null
base(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
base(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Length of mission in milliseconds.
 * Example: /// Example: 200.23
 * Constraints: No constraints specified.
 */
duration():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startISRCollectionTransit_Full(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, baseOffset, 0);
}

static addDuration(builder:flatbuffers.Builder, duration:number) {
  builder.addFieldFloat64(2, duration, 0.0);
}

static endISRCollectionTransit_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishISRCollectionTransit_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC');
}

static finishSizePrefixedISRCollectionTransit_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC', true);
}

static createISRCollectionTransit_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, baseOffset:flatbuffers.Offset, duration:number):flatbuffers.Offset {
  ISRCollectionTransit_Full.startISRCollectionTransit_Full(builder);
  ISRCollectionTransit_Full.addId(builder, idOffset);
  ISRCollectionTransit_Full.addBase(builder, baseOffset);
  ISRCollectionTransit_Full.addDuration(builder, duration);
  return ISRCollectionTransit_Full.endISRCollectionTransit_Full(builder);
}

unpack(): ISRCollectionTransit_FullT {
  return new ISRCollectionTransit_FullT(
    this.id(),
    this.base(),
    this.duration()
  );
}


unpackTo(_o: ISRCollectionTransit_FullT): void {
  _o.id = this.id();
  _o.base = this.base();
  _o.duration = this.duration();
}
}

export class ISRCollectionTransit_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public base: string|Uint8Array|null = null,
  public duration: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const base = (this.base !== null ? builder.createString(this.base!) : 0);

  return ISRCollectionTransit_Full.createISRCollectionTransit_Full(builder,
    id,
    base,
    this.duration
  );
}
}
