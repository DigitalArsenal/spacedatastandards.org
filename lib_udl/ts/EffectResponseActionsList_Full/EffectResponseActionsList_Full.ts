// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// List of actions associated with this effect response.
 */
export class EffectResponseActionsList_Full implements flatbuffers.IUnpackableObject<EffectResponseActionsList_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EffectResponseActionsList_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEffectResponseActionsList_Full(bb:flatbuffers.ByteBuffer, obj?:EffectResponseActionsList_Full):EffectResponseActionsList_Full {
  return (obj || new EffectResponseActionsList_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEffectResponseActionsList_Full(bb:flatbuffers.ByteBuffer, obj?:EffectResponseActionsList_Full):EffectResponseActionsList_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EffectResponseActionsList_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EFFE');
}

/**
 * A summary string describing different aspects of the action.
 * Example: /// Example: Example summary
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
summary():string|null
summary(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
summary(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of this action.
 * Example: /// Example: ACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
actionId():string|null
actionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The desired start time of this task, in ISO8601 UTC format.
 * Example: /// Example: 2021-01-01T00:00:00.123456Z
 * Constraints: No constraints specified.
 */
actionStartTime():string|null
actionStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actionStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The desired end time of this task, in ISO8601 UTC format.
 * Example: /// Example: 2021-01-01T00:00:00.123456Z
 * Constraints: No constraints specified.
 */
actionEndTime():string|null
actionEndTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actionEndTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The start time of the asset TOT (time over target), in ISO8601 UTC format.
 * Example: /// Example: 2021-01-01T00:00:00.123456Z
 * Constraints: No constraints specified.
 */
totStartTime():string|null
totStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
totStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The end time of the asset TOT (time over target), in ISO8601 UTC format.
 * Example: /// Example: 2021-01-01T00:00:00.123456Z
 * Constraints: No constraints specified.
 */
totEndTime():string|null
totEndTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
totEndTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
 * Example: /// Example: AIRCRAFT
 * Constraints: Minimum length = 0, Maximum length = 64
 */
actionActorSrcType():string|null
actionActorSrcType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actionActorSrcType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.
 * Example: /// Example: ACTIONACTORSRC-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
actionActorSrcId():string|null
actionActorSrcId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actionActorSrcId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of munition or sensor used by this asset/actor.
 * Example: /// Example: SENSOR1
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
effector():string|null
effector(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effector(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source type of the targetId identifier (POI, TRACK).
 * Example: /// Example: POI
 * Constraints: Minimum length = 0, Maximum length = 64
 */
targetSrcType():string|null
targetSrcType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
targetSrcType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
 * Example: /// Example: TARGETSRC-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
targetSrcId():string|null
targetSrcId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
targetSrcId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.1
 * Constraints: No constraints specified.
 */
actorInterceptLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 180.1
 * Constraints: No constraints specified.
 */
actorInterceptLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
actorInterceptAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.1
 * Constraints: No constraints specified.
 */
weaponInterceptLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 180.1
 * Constraints: No constraints specified.
 */
weaponInterceptLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The WGS-84 altitude of the weapon destination location, in meters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
weaponInterceptAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * List of metrics associated with this action.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
actionMetrics(index: number):string
actionMetrics(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
actionMetrics(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

actionMetricsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startEffectResponseActionsList_Full(builder:flatbuffers.Builder) {
  builder.startObject(18);
}

static addSummary(builder:flatbuffers.Builder, summaryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, summaryOffset, 0);
}

static addActionId(builder:flatbuffers.Builder, actionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, actionIdOffset, 0);
}

static addActionStartTime(builder:flatbuffers.Builder, actionStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, actionStartTimeOffset, 0);
}

static addActionEndTime(builder:flatbuffers.Builder, actionEndTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, actionEndTimeOffset, 0);
}

static addTotStartTime(builder:flatbuffers.Builder, totStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, totStartTimeOffset, 0);
}

static addTotEndTime(builder:flatbuffers.Builder, totEndTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, totEndTimeOffset, 0);
}

static addActionActorSrcType(builder:flatbuffers.Builder, actionActorSrcTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, actionActorSrcTypeOffset, 0);
}

static addActionActorSrcId(builder:flatbuffers.Builder, actionActorSrcIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, actionActorSrcIdOffset, 0);
}

static addEffector(builder:flatbuffers.Builder, effectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, effectorOffset, 0);
}

static addTargetSrcType(builder:flatbuffers.Builder, targetSrcTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, targetSrcTypeOffset, 0);
}

static addTargetSrcId(builder:flatbuffers.Builder, targetSrcIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, targetSrcIdOffset, 0);
}

static addActorInterceptLat(builder:flatbuffers.Builder, actorInterceptLat:number) {
  builder.addFieldFloat64(11, actorInterceptLat, 0.0);
}

static addActorInterceptLon(builder:flatbuffers.Builder, actorInterceptLon:number) {
  builder.addFieldFloat64(12, actorInterceptLon, 0.0);
}

static addActorInterceptAlt(builder:flatbuffers.Builder, actorInterceptAlt:number) {
  builder.addFieldFloat64(13, actorInterceptAlt, 0.0);
}

static addWeaponInterceptLat(builder:flatbuffers.Builder, weaponInterceptLat:number) {
  builder.addFieldFloat64(14, weaponInterceptLat, 0.0);
}

static addWeaponInterceptLon(builder:flatbuffers.Builder, weaponInterceptLon:number) {
  builder.addFieldFloat64(15, weaponInterceptLon, 0.0);
}

static addWeaponInterceptAlt(builder:flatbuffers.Builder, weaponInterceptAlt:number) {
  builder.addFieldFloat64(16, weaponInterceptAlt, 0.0);
}

static addActionMetrics(builder:flatbuffers.Builder, actionMetricsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, actionMetricsOffset, 0);
}

static createActionMetricsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startActionMetricsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endEffectResponseActionsList_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEffectResponseActionsList_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EFFE');
}

static finishSizePrefixedEffectResponseActionsList_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EFFE', true);
}

static createEffectResponseActionsList_Full(builder:flatbuffers.Builder, summaryOffset:flatbuffers.Offset, actionIdOffset:flatbuffers.Offset, actionStartTimeOffset:flatbuffers.Offset, actionEndTimeOffset:flatbuffers.Offset, totStartTimeOffset:flatbuffers.Offset, totEndTimeOffset:flatbuffers.Offset, actionActorSrcTypeOffset:flatbuffers.Offset, actionActorSrcIdOffset:flatbuffers.Offset, effectorOffset:flatbuffers.Offset, targetSrcTypeOffset:flatbuffers.Offset, targetSrcIdOffset:flatbuffers.Offset, actorInterceptLat:number, actorInterceptLon:number, actorInterceptAlt:number, weaponInterceptLat:number, weaponInterceptLon:number, weaponInterceptAlt:number, actionMetricsOffset:flatbuffers.Offset):flatbuffers.Offset {
  EffectResponseActionsList_Full.startEffectResponseActionsList_Full(builder);
  EffectResponseActionsList_Full.addSummary(builder, summaryOffset);
  EffectResponseActionsList_Full.addActionId(builder, actionIdOffset);
  EffectResponseActionsList_Full.addActionStartTime(builder, actionStartTimeOffset);
  EffectResponseActionsList_Full.addActionEndTime(builder, actionEndTimeOffset);
  EffectResponseActionsList_Full.addTotStartTime(builder, totStartTimeOffset);
  EffectResponseActionsList_Full.addTotEndTime(builder, totEndTimeOffset);
  EffectResponseActionsList_Full.addActionActorSrcType(builder, actionActorSrcTypeOffset);
  EffectResponseActionsList_Full.addActionActorSrcId(builder, actionActorSrcIdOffset);
  EffectResponseActionsList_Full.addEffector(builder, effectorOffset);
  EffectResponseActionsList_Full.addTargetSrcType(builder, targetSrcTypeOffset);
  EffectResponseActionsList_Full.addTargetSrcId(builder, targetSrcIdOffset);
  EffectResponseActionsList_Full.addActorInterceptLat(builder, actorInterceptLat);
  EffectResponseActionsList_Full.addActorInterceptLon(builder, actorInterceptLon);
  EffectResponseActionsList_Full.addActorInterceptAlt(builder, actorInterceptAlt);
  EffectResponseActionsList_Full.addWeaponInterceptLat(builder, weaponInterceptLat);
  EffectResponseActionsList_Full.addWeaponInterceptLon(builder, weaponInterceptLon);
  EffectResponseActionsList_Full.addWeaponInterceptAlt(builder, weaponInterceptAlt);
  EffectResponseActionsList_Full.addActionMetrics(builder, actionMetricsOffset);
  return EffectResponseActionsList_Full.endEffectResponseActionsList_Full(builder);
}

unpack(): EffectResponseActionsList_FullT {
  return new EffectResponseActionsList_FullT(
    this.summary(),
    this.actionId(),
    this.actionStartTime(),
    this.actionEndTime(),
    this.totStartTime(),
    this.totEndTime(),
    this.actionActorSrcType(),
    this.actionActorSrcId(),
    this.effector(),
    this.targetSrcType(),
    this.targetSrcId(),
    this.actorInterceptLat(),
    this.actorInterceptLon(),
    this.actorInterceptAlt(),
    this.weaponInterceptLat(),
    this.weaponInterceptLon(),
    this.weaponInterceptAlt(),
    this.bb!.createScalarList<string>(this.actionMetrics.bind(this), this.actionMetricsLength())
  );
}


unpackTo(_o: EffectResponseActionsList_FullT): void {
  _o.summary = this.summary();
  _o.actionId = this.actionId();
  _o.actionStartTime = this.actionStartTime();
  _o.actionEndTime = this.actionEndTime();
  _o.totStartTime = this.totStartTime();
  _o.totEndTime = this.totEndTime();
  _o.actionActorSrcType = this.actionActorSrcType();
  _o.actionActorSrcId = this.actionActorSrcId();
  _o.effector = this.effector();
  _o.targetSrcType = this.targetSrcType();
  _o.targetSrcId = this.targetSrcId();
  _o.actorInterceptLat = this.actorInterceptLat();
  _o.actorInterceptLon = this.actorInterceptLon();
  _o.actorInterceptAlt = this.actorInterceptAlt();
  _o.weaponInterceptLat = this.weaponInterceptLat();
  _o.weaponInterceptLon = this.weaponInterceptLon();
  _o.weaponInterceptAlt = this.weaponInterceptAlt();
  _o.actionMetrics = this.bb!.createScalarList<string>(this.actionMetrics.bind(this), this.actionMetricsLength());
}
}

export class EffectResponseActionsList_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public summary: string|Uint8Array|null = null,
  public actionId: string|Uint8Array|null = null,
  public actionStartTime: string|Uint8Array|null = null,
  public actionEndTime: string|Uint8Array|null = null,
  public totStartTime: string|Uint8Array|null = null,
  public totEndTime: string|Uint8Array|null = null,
  public actionActorSrcType: string|Uint8Array|null = null,
  public actionActorSrcId: string|Uint8Array|null = null,
  public effector: string|Uint8Array|null = null,
  public targetSrcType: string|Uint8Array|null = null,
  public targetSrcId: string|Uint8Array|null = null,
  public actorInterceptLat: number = 0.0,
  public actorInterceptLon: number = 0.0,
  public actorInterceptAlt: number = 0.0,
  public weaponInterceptLat: number = 0.0,
  public weaponInterceptLon: number = 0.0,
  public weaponInterceptAlt: number = 0.0,
  public actionMetrics: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const summary = (this.summary !== null ? builder.createString(this.summary!) : 0);
  const actionId = (this.actionId !== null ? builder.createString(this.actionId!) : 0);
  const actionStartTime = (this.actionStartTime !== null ? builder.createString(this.actionStartTime!) : 0);
  const actionEndTime = (this.actionEndTime !== null ? builder.createString(this.actionEndTime!) : 0);
  const totStartTime = (this.totStartTime !== null ? builder.createString(this.totStartTime!) : 0);
  const totEndTime = (this.totEndTime !== null ? builder.createString(this.totEndTime!) : 0);
  const actionActorSrcType = (this.actionActorSrcType !== null ? builder.createString(this.actionActorSrcType!) : 0);
  const actionActorSrcId = (this.actionActorSrcId !== null ? builder.createString(this.actionActorSrcId!) : 0);
  const effector = (this.effector !== null ? builder.createString(this.effector!) : 0);
  const targetSrcType = (this.targetSrcType !== null ? builder.createString(this.targetSrcType!) : 0);
  const targetSrcId = (this.targetSrcId !== null ? builder.createString(this.targetSrcId!) : 0);
  const actionMetrics = EffectResponseActionsList_Full.createActionMetricsVector(builder, builder.createObjectOffsetList(this.actionMetrics));

  return EffectResponseActionsList_Full.createEffectResponseActionsList_Full(builder,
    summary,
    actionId,
    actionStartTime,
    actionEndTime,
    totStartTime,
    totEndTime,
    actionActorSrcType,
    actionActorSrcId,
    effector,
    targetSrcType,
    targetSrcId,
    this.actorInterceptLat,
    this.actorInterceptLon,
    this.actorInterceptAlt,
    this.weaponInterceptLat,
    this.weaponInterceptLon,
    this.weaponInterceptAlt,
    actionMetrics
  );
}
}
