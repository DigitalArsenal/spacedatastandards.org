// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// An Optical SOI record contains observation information taken from a sensor about a Space Object.
 */
export class OpticalSOIObservation_Full implements flatbuffers.IUnpackableObject<OpticalSOIObservation_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OpticalSOIObservation_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOpticalSOIObservation_Full(bb:flatbuffers.ByteBuffer, obj?:OpticalSOIObservation_Full):OpticalSOIObservation_Full {
  return (obj || new OpticalSOIObservation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOpticalSOIObservation_Full(bb:flatbuffers.ByteBuffer, obj?:OpticalSOIObservation_Full):OpticalSOIObservation_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OpticalSOIObservation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('OPTI');
}

/**
 * Observation detection start time in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.888456Z
 * Constraints: No constraints specified.
 */
obStartTime():string|null
obStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
 * Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
 * Constraints: No constraints specified.
 */
intensityTimes(index: number):string
intensityTimes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
intensityTimes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

intensityTimesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
 * Example: /// Example: 0
 * Constraints: No constraints specified.
 */
currentSpectralFilterNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Image exposure duration in seconds.
 * Example: /// Example: 0.455
 * Constraints: No constraints specified.
 */
expDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
 * Example: /// Example: [1.1, 1.1, 1.1]
 * Constraints: No constraints specified.
 */
intensities(index: number):string
intensities(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
intensities(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

intensitiesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
 * Example: /// Example: [0.32, 0.32, 0.32]
 * Constraints: No constraints specified.
 */
extinctionCoeffs(index: number):string
extinctionCoeffs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
extinctionCoeffs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

extinctionCoeffsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
 * Example: /// Example: [0.06, 0.06, 0.06]
 * Constraints: No constraints specified.
 */
extinctionCoeffsUnc(index: number):string
extinctionCoeffsUnc(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
extinctionCoeffsUnc(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

extinctionCoeffsUncLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
 * Example: /// Example: [100625.375, 100625.375, 100625.375]
 * Constraints: No constraints specified.
 */
skyBgs(index: number):string
skyBgs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
skyBgs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

skyBgsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
 * Example: /// Example: [100625.375, 100625.375, 100625.375]
 * Constraints: No constraints specified.
 */
localSkyBgs(index: number):string
localSkyBgs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
localSkyBgs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

localSkyBgsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
 * Example: /// Example: [0.065, 0.065, 0.065]
 * Constraints: No constraints specified.
 */
localSkyBgsUnc(index: number):string
localSkyBgsUnc(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
localSkyBgsUnc(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

localSkyBgsUncLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the number of detected stars in the FOV with a value for each element in the intensities field.
 * Example: /// Example: [6, 6, 6]
 * Constraints: No constraints specified.
 */
numDetectedStars(index: number):string
numDetectedStars(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
numDetectedStars(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

numDetectedStarsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
 * Example: /// Example: [3, 3, 3]
 * Constraints: No constraints specified.
 */
numCorrelatedStars(index: number):string
numCorrelatedStars(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
numCorrelatedStars(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

numCorrelatedStarsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
 * Example: /// Example: [24.711, 24.711, 24.711]
 * Constraints: No constraints specified.
 */
zeroPoints(index: number):string
zeroPoints(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
zeroPoints(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

zeroPointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
 * Example: /// Example: [107.4, 107.4, 107.4]
 * Constraints: No constraints specified.
 */
ras(index: number):string
ras(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ras(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rasLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
 * Example: /// Example: [-0.45, -0.45, -0.45]
 * Constraints: No constraints specified.
 */
declinations(index: number):string
declinations(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
declinations(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

declinationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
 * Example: /// Example: [0, 0, 0]
 * Constraints: No constraints specified.
 */
raRates(index: number):string
raRates(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
raRates(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

raRatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
 * Example: /// Example: [0.1, 0.2, 1]
 * Constraints: No constraints specified.
 */
percentSats(index: number):string
percentSats(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
percentSats(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

percentSatsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startOpticalSOIObservation_Full(builder:flatbuffers.Builder) {
  builder.startObject(17);
}

static addObStartTime(builder:flatbuffers.Builder, obStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, obStartTimeOffset, 0);
}

static addIntensityTimes(builder:flatbuffers.Builder, intensityTimesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, intensityTimesOffset, 0);
}

static createIntensityTimesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startIntensityTimesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCurrentSpectralFilterNum(builder:flatbuffers.Builder, currentSpectralFilterNum:number) {
  builder.addFieldInt32(2, currentSpectralFilterNum, 0);
}

static addExpDuration(builder:flatbuffers.Builder, expDuration:number) {
  builder.addFieldFloat64(3, expDuration, 0.0);
}

static addIntensities(builder:flatbuffers.Builder, intensitiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, intensitiesOffset, 0);
}

static createIntensitiesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startIntensitiesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addExtinctionCoeffs(builder:flatbuffers.Builder, extinctionCoeffsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, extinctionCoeffsOffset, 0);
}

static createExtinctionCoeffsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExtinctionCoeffsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addExtinctionCoeffsUnc(builder:flatbuffers.Builder, extinctionCoeffsUncOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, extinctionCoeffsUncOffset, 0);
}

static createExtinctionCoeffsUncVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExtinctionCoeffsUncVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSkyBgs(builder:flatbuffers.Builder, skyBgsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, skyBgsOffset, 0);
}

static createSkyBgsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSkyBgsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLocalSkyBgs(builder:flatbuffers.Builder, localSkyBgsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, localSkyBgsOffset, 0);
}

static createLocalSkyBgsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLocalSkyBgsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLocalSkyBgsUnc(builder:flatbuffers.Builder, localSkyBgsUncOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, localSkyBgsUncOffset, 0);
}

static createLocalSkyBgsUncVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLocalSkyBgsUncVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNumDetectedStars(builder:flatbuffers.Builder, numDetectedStarsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, numDetectedStarsOffset, 0);
}

static createNumDetectedStarsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNumDetectedStarsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNumCorrelatedStars(builder:flatbuffers.Builder, numCorrelatedStarsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, numCorrelatedStarsOffset, 0);
}

static createNumCorrelatedStarsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNumCorrelatedStarsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addZeroPoints(builder:flatbuffers.Builder, zeroPointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, zeroPointsOffset, 0);
}

static createZeroPointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startZeroPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRas(builder:flatbuffers.Builder, rasOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, rasOffset, 0);
}

static createRasVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRasVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDeclinations(builder:flatbuffers.Builder, declinationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, declinationsOffset, 0);
}

static createDeclinationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDeclinationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRaRates(builder:flatbuffers.Builder, raRatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, raRatesOffset, 0);
}

static createRaRatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRaRatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPercentSats(builder:flatbuffers.Builder, percentSatsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, percentSatsOffset, 0);
}

static createPercentSatsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPercentSatsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endOpticalSOIObservation_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOpticalSOIObservation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'OPTI');
}

static finishSizePrefixedOpticalSOIObservation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'OPTI', true);
}

static createOpticalSOIObservation_Full(builder:flatbuffers.Builder, obStartTimeOffset:flatbuffers.Offset, intensityTimesOffset:flatbuffers.Offset, currentSpectralFilterNum:number, expDuration:number, intensitiesOffset:flatbuffers.Offset, extinctionCoeffsOffset:flatbuffers.Offset, extinctionCoeffsUncOffset:flatbuffers.Offset, skyBgsOffset:flatbuffers.Offset, localSkyBgsOffset:flatbuffers.Offset, localSkyBgsUncOffset:flatbuffers.Offset, numDetectedStarsOffset:flatbuffers.Offset, numCorrelatedStarsOffset:flatbuffers.Offset, zeroPointsOffset:flatbuffers.Offset, rasOffset:flatbuffers.Offset, declinationsOffset:flatbuffers.Offset, raRatesOffset:flatbuffers.Offset, percentSatsOffset:flatbuffers.Offset):flatbuffers.Offset {
  OpticalSOIObservation_Full.startOpticalSOIObservation_Full(builder);
  OpticalSOIObservation_Full.addObStartTime(builder, obStartTimeOffset);
  OpticalSOIObservation_Full.addIntensityTimes(builder, intensityTimesOffset);
  OpticalSOIObservation_Full.addCurrentSpectralFilterNum(builder, currentSpectralFilterNum);
  OpticalSOIObservation_Full.addExpDuration(builder, expDuration);
  OpticalSOIObservation_Full.addIntensities(builder, intensitiesOffset);
  OpticalSOIObservation_Full.addExtinctionCoeffs(builder, extinctionCoeffsOffset);
  OpticalSOIObservation_Full.addExtinctionCoeffsUnc(builder, extinctionCoeffsUncOffset);
  OpticalSOIObservation_Full.addSkyBgs(builder, skyBgsOffset);
  OpticalSOIObservation_Full.addLocalSkyBgs(builder, localSkyBgsOffset);
  OpticalSOIObservation_Full.addLocalSkyBgsUnc(builder, localSkyBgsUncOffset);
  OpticalSOIObservation_Full.addNumDetectedStars(builder, numDetectedStarsOffset);
  OpticalSOIObservation_Full.addNumCorrelatedStars(builder, numCorrelatedStarsOffset);
  OpticalSOIObservation_Full.addZeroPoints(builder, zeroPointsOffset);
  OpticalSOIObservation_Full.addRas(builder, rasOffset);
  OpticalSOIObservation_Full.addDeclinations(builder, declinationsOffset);
  OpticalSOIObservation_Full.addRaRates(builder, raRatesOffset);
  OpticalSOIObservation_Full.addPercentSats(builder, percentSatsOffset);
  return OpticalSOIObservation_Full.endOpticalSOIObservation_Full(builder);
}

unpack(): OpticalSOIObservation_FullT {
  return new OpticalSOIObservation_FullT(
    this.obStartTime(),
    this.bb!.createScalarList<string>(this.intensityTimes.bind(this), this.intensityTimes_Length()),
    this.currentSpectralFilterNum(),
    this.expDuration(),
    this.bb!.createScalarList<string>(this.intensities.bind(this), this.intensities_Length()),
    this.bb!.createScalarList<string>(this.extinctionCoeffs.bind(this), this.extinctionCoeffs_Length()),
    this.bb!.createScalarList<string>(this.extinctionCoeffsUnc.bind(this), this.extinctionCoeffsUnc_Length()),
    this.bb!.createScalarList<string>(this.skyBgs.bind(this), this.skyBgs_Length()),
    this.bb!.createScalarList<string>(this.localSkyBgs.bind(this), this.localSkyBgs_Length()),
    this.bb!.createScalarList<string>(this.localSkyBgsUnc.bind(this), this.localSkyBgsUnc_Length()),
    this.bb!.createScalarList<string>(this.numDetectedStars.bind(this), this.numDetectedStars_Length()),
    this.bb!.createScalarList<string>(this.numCorrelatedStars.bind(this), this.numCorrelatedStars_Length()),
    this.bb!.createScalarList<string>(this.zeroPoints.bind(this), this.zeroPoints_Length()),
    this.bb!.createScalarList<string>(this.ras.bind(this), this.ras_Length()),
    this.bb!.createScalarList<string>(this.declinations.bind(this), this.declinations_Length()),
    this.bb!.createScalarList<string>(this.raRates.bind(this), this.raRates_Length()),
    this.bb!.createScalarList<string>(this.percentSats.bind(this), this.percentSats_Length())
  );
}


unpackTo(_o: OpticalSOIObservation_FullT): void {
  _o.obStartTime = this.obStartTime();
  _o.intensityTimes = this.bb!.createScalarList<string>(this.intensityTimes.bind(this), this.intensityTimes_Length());
  _o.currentSpectralFilterNum = this.currentSpectralFilterNum();
  _o.expDuration = this.expDuration();
  _o.intensities = this.bb!.createScalarList<string>(this.intensities.bind(this), this.intensities_Length());
  _o.extinctionCoeffs = this.bb!.createScalarList<string>(this.extinctionCoeffs.bind(this), this.extinctionCoeffs_Length());
  _o.extinctionCoeffsUnc = this.bb!.createScalarList<string>(this.extinctionCoeffsUnc.bind(this), this.extinctionCoeffsUnc_Length());
  _o.skyBgs = this.bb!.createScalarList<string>(this.skyBgs.bind(this), this.skyBgs_Length());
  _o.localSkyBgs = this.bb!.createScalarList<string>(this.localSkyBgs.bind(this), this.localSkyBgs_Length());
  _o.localSkyBgsUnc = this.bb!.createScalarList<string>(this.localSkyBgsUnc.bind(this), this.localSkyBgsUnc_Length());
  _o.numDetectedStars = this.bb!.createScalarList<string>(this.numDetectedStars.bind(this), this.numDetectedStars_Length());
  _o.numCorrelatedStars = this.bb!.createScalarList<string>(this.numCorrelatedStars.bind(this), this.numCorrelatedStars_Length());
  _o.zeroPoints = this.bb!.createScalarList<string>(this.zeroPoints.bind(this), this.zeroPoints_Length());
  _o.ras = this.bb!.createScalarList<string>(this.ras.bind(this), this.ras_Length());
  _o.declinations = this.bb!.createScalarList<string>(this.declinations.bind(this), this.declinations_Length());
  _o.raRates = this.bb!.createScalarList<string>(this.raRates.bind(this), this.raRates_Length());
  _o.percentSats = this.bb!.createScalarList<string>(this.percentSats.bind(this), this.percentSats_Length());
}
}

export class OpticalSOIObservation_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public obStartTime: string|Uint8Array|null = null,
  public intensityTimes: (string)[] = [],
  public currentSpectralFilterNum: number = 0,
  public expDuration: number = 0.0,
  public intensities: (string)[] = [],
  public extinctionCoeffs: (string)[] = [],
  public extinctionCoeffsUnc: (string)[] = [],
  public skyBgs: (string)[] = [],
  public localSkyBgs: (string)[] = [],
  public localSkyBgsUnc: (string)[] = [],
  public numDetectedStars: (string)[] = [],
  public numCorrelatedStars: (string)[] = [],
  public zeroPoints: (string)[] = [],
  public ras: (string)[] = [],
  public declinations: (string)[] = [],
  public raRates: (string)[] = [],
  public percentSats: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const obStartTime = (this.obStartTime !== null ? builder.createString(this.obStartTime!) : 0);
  const intensityTimes = OpticalSOIObservation_Full.createIntensityTimesVector(builder, builder.createObjectOffsetList(this.intensityTimes));
  const intensities = OpticalSOIObservation_Full.createIntensitiesVector(builder, builder.createObjectOffsetList(this.intensities));
  const extinctionCoeffs = OpticalSOIObservation_Full.createExtinctionCoeffsVector(builder, builder.createObjectOffsetList(this.extinctionCoeffs));
  const extinctionCoeffsUnc = OpticalSOIObservation_Full.createExtinctionCoeffsUncVector(builder, builder.createObjectOffsetList(this.extinctionCoeffsUnc));
  const skyBgs = OpticalSOIObservation_Full.createSkyBgsVector(builder, builder.createObjectOffsetList(this.skyBgs));
  const localSkyBgs = OpticalSOIObservation_Full.createLocalSkyBgsVector(builder, builder.createObjectOffsetList(this.localSkyBgs));
  const localSkyBgsUnc = OpticalSOIObservation_Full.createLocalSkyBgsUncVector(builder, builder.createObjectOffsetList(this.localSkyBgsUnc));
  const numDetectedStars = OpticalSOIObservation_Full.createNumDetectedStarsVector(builder, builder.createObjectOffsetList(this.numDetectedStars));
  const numCorrelatedStars = OpticalSOIObservation_Full.createNumCorrelatedStarsVector(builder, builder.createObjectOffsetList(this.numCorrelatedStars));
  const zeroPoints = OpticalSOIObservation_Full.createZeroPointsVector(builder, builder.createObjectOffsetList(this.zeroPoints));
  const ras = OpticalSOIObservation_Full.createRasVector(builder, builder.createObjectOffsetList(this.ras));
  const declinations = OpticalSOIObservation_Full.createDeclinationsVector(builder, builder.createObjectOffsetList(this.declinations));
  const raRates = OpticalSOIObservation_Full.createRaRatesVector(builder, builder.createObjectOffsetList(this.raRates));
  const percentSats = OpticalSOIObservation_Full.createPercentSatsVector(builder, builder.createObjectOffsetList(this.percentSats));

  return OpticalSOIObservation_Full.createOpticalSOIObservation_Full(builder,
    obStartTime,
    intensityTimes,
    this.currentSpectralFilterNum,
    this.expDuration,
    intensities,
    extinctionCoeffs,
    extinctionCoeffsUnc,
    skyBgs,
    localSkyBgs,
    localSkyBgsUnc,
    numDetectedStars,
    numCorrelatedStars,
    zeroPoints,
    ras,
    declinations,
    raRates,
    percentSats
  );
}
}
