// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Stage_Abridged_dataMode_Enum } from './Stage_Abridged_dataMode_Enum.js';


/**
 * /// Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.
 */
export class Stage_Abridged implements flatbuffers.IUnpackableObject<Stage_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Stage_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStage_Abridged(bb:flatbuffers.ByteBuffer, obj?:Stage_Abridged):Stage_Abridged {
  return (obj || new Stage_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStage_Abridged(bb:flatbuffers.ByteBuffer, obj?:Stage_Abridged):Stage_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Stage_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('STAG');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: STAGE-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the launch vehicle record for this stage.
 * Example: /// Example: LAUNCHVEHICLE-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idLaunchVehicle():string|null
idLaunchVehicle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idLaunchVehicle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the Engine record for this stage.
 * Example: /// Example: ENGINE-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idEngine():string|null
idEngine(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idEngine(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The stage number of this launch stage.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
stageNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
 * Example: /// Example: Electrostatic Ion
 * Constraints: Minimum length = 0, Maximum length = 64
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the organization that manufactures this launch stage.
 * Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of the specified engines on this launch stage.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numEngines():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Stage length in meters.
 * Example: /// Example: 25.13
 * Constraints: No constraints specified.
 */
length():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Stage maximum external diameter in meters.
 * Example: /// Example: 3.95
 * Constraints: No constraints specified.
 */
diameter():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Stage gross mass in kg.
 * Example: /// Example: 9956.1
 * Constraints: No constraints specified.
 */
mass():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Engine vernier or additional engine type.
 * Example: /// Example: vernier
 * Constraints: Minimum length = 0, Maximum length = 32
 */
vernier():string|null
vernier(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vernier(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of vernier or additional engines.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
numVernier():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Thrust of the stage main engine at sea level in kN.
 * Example: /// Example: 733.4
 * Constraints: No constraints specified.
 */
mainEngineThrustSeaLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Thrust of the stage main engine in a vacuum in kN.
 * Example: /// Example: 733.4
 * Constraints: No constraints specified.
 */
mainEngineThrustVacuum():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total thrust of the stage at sea level in kN.
 * Example: /// Example: 733.4
 * Constraints: No constraints specified.
 */
thrustSeaLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total thrust of the stage in a vacuum in kN.
 * Example: /// Example: 733.4
 * Constraints: No constraints specified.
 */
thrustVacuum():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total burn time of the stage engines in seconds.
 * Example: /// Example: 256.3
 * Constraints: No constraints specified.
 */
burnTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of burns for the stage engines.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numBurns():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Total burn time of the vernier or additional stage engines in seconds.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
vernierBurnTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total number of burns of the vernier or additional stage engines.
 * Example: /// Example: 4
 * Constraints: No constraints specified.
 */
vernierNumBurns():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Total thrust of one of the vernier or additional engines at sea level in kN.
 * Example: /// Example: 4.1
 * Constraints: No constraints specified.
 */
vernierThrustSeaLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total thrust of one of the vernier or additional engines in a vacuum in kN.
 * Example: /// Example: 3.2
 * Constraints: No constraints specified.
 */
vernierThrustVacuum():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of launch stage elements used in this stage.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
numStageElements():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Boolean indicating if this launch stage is reusable.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
reusable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Boolean indicating if this launch stage can be restarted.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
restartable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Control thruster 1 type.
 * Example: /// Example: controlThruster1
 * Constraints: Minimum length = 0, Maximum length = 64
 */
controlThruster1():string|null
controlThruster1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
controlThruster1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of type control thruster 1.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numControlThruster1():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Control thruster 2 type.
 * Example: /// Example: controlThruster2
 * Constraints: Minimum length = 0, Maximum length = 64
 */
controlThruster2():string|null
controlThruster2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
controlThruster2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of type control thruster 2.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numControlThruster2():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array of URLs of photos of the stage.
 * Example: /// Example: ['photoURL']
 * Constraints: No constraints specified.
 */
photoUrls(index: number):string
photoUrls(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
photoUrls(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

photoUrlsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Description/notes of the stage.
 * Example: /// Example: Sample Notes
 * Constraints: Minimum length = 0, Maximum length = 256
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description/notes of the stage avionics.
 * Example: /// Example: Sample Notes
 * Constraints: Minimum length = 0, Maximum length = 256
 */
avionicsNotes():string|null
avionicsNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
avionicsNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Stage_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Stage_Abridged_dataMode_Enum.REAL;
}

static startStage_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(39);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdLaunchVehicle(builder:flatbuffers.Builder, idLaunchVehicleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idLaunchVehicleOffset, 0);
}

static addIdEngine(builder:flatbuffers.Builder, idEngineOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idEngineOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, classificationMarkingOffset, 0);
}

static addStageNumber(builder:flatbuffers.Builder, stageNumber:number) {
  builder.addFieldInt32(4, stageNumber, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, typeOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, manufacturerOrgIdOffset, 0);
}

static addNumEngines(builder:flatbuffers.Builder, numEngines:number) {
  builder.addFieldInt32(7, numEngines, 0);
}

static addLength(builder:flatbuffers.Builder, length:number) {
  builder.addFieldFloat64(8, length, 0.0);
}

static addDiameter(builder:flatbuffers.Builder, diameter:number) {
  builder.addFieldFloat64(9, diameter, 0.0);
}

static addMass(builder:flatbuffers.Builder, mass:number) {
  builder.addFieldFloat64(10, mass, 0.0);
}

static addVernier(builder:flatbuffers.Builder, vernierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, vernierOffset, 0);
}

static addNumVernier(builder:flatbuffers.Builder, numVernier:number) {
  builder.addFieldInt32(12, numVernier, 0);
}

static addMainEngineThrustSeaLevel(builder:flatbuffers.Builder, mainEngineThrustSeaLevel:number) {
  builder.addFieldFloat64(13, mainEngineThrustSeaLevel, 0.0);
}

static addMainEngineThrustVacuum(builder:flatbuffers.Builder, mainEngineThrustVacuum:number) {
  builder.addFieldFloat64(14, mainEngineThrustVacuum, 0.0);
}

static addThrustSeaLevel(builder:flatbuffers.Builder, thrustSeaLevel:number) {
  builder.addFieldFloat64(15, thrustSeaLevel, 0.0);
}

static addThrustVacuum(builder:flatbuffers.Builder, thrustVacuum:number) {
  builder.addFieldFloat64(16, thrustVacuum, 0.0);
}

static addBurnTime(builder:flatbuffers.Builder, burnTime:number) {
  builder.addFieldFloat64(17, burnTime, 0.0);
}

static addNumBurns(builder:flatbuffers.Builder, numBurns:number) {
  builder.addFieldInt32(18, numBurns, 0);
}

static addVernierBurnTime(builder:flatbuffers.Builder, vernierBurnTime:number) {
  builder.addFieldFloat64(19, vernierBurnTime, 0.0);
}

static addVernierNumBurns(builder:flatbuffers.Builder, vernierNumBurns:number) {
  builder.addFieldInt32(20, vernierNumBurns, 0);
}

static addVernierThrustSeaLevel(builder:flatbuffers.Builder, vernierThrustSeaLevel:number) {
  builder.addFieldFloat64(21, vernierThrustSeaLevel, 0.0);
}

static addVernierThrustVacuum(builder:flatbuffers.Builder, vernierThrustVacuum:number) {
  builder.addFieldFloat64(22, vernierThrustVacuum, 0.0);
}

static addNumStageElements(builder:flatbuffers.Builder, numStageElements:number) {
  builder.addFieldInt32(23, numStageElements, 0);
}

static addReusable(builder:flatbuffers.Builder, reusable:boolean) {
  builder.addFieldInt8(24, +reusable, +false);
}

static addRestartable(builder:flatbuffers.Builder, restartable:boolean) {
  builder.addFieldInt8(25, +restartable, +false);
}

static addControlThruster1(builder:flatbuffers.Builder, controlThruster1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(26, controlThruster1Offset, 0);
}

static addNumControlThruster1(builder:flatbuffers.Builder, numControlThruster1:number) {
  builder.addFieldInt32(27, numControlThruster1, 0);
}

static addControlThruster2(builder:flatbuffers.Builder, controlThruster2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(28, controlThruster2Offset, 0);
}

static addNumControlThruster2(builder:flatbuffers.Builder, numControlThruster2:number) {
  builder.addFieldInt32(29, numControlThruster2, 0);
}

static addPhotoUrls(builder:flatbuffers.Builder, photoUrlsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, photoUrlsOffset, 0);
}

static createPhotoUrlsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPhotoUrlsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, notesOffset, 0);
}

static addAvionicsNotes(builder:flatbuffers.Builder, avionicsNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, avionicsNotesOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Stage_Abridged_dataMode_Enum) {
  builder.addFieldInt8(38, dataMode, Stage_Abridged_dataMode_Enum.REAL);
}

static endStage_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishStage_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'STAG');
}

static finishSizePrefixedStage_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'STAG', true);
}

static createStage_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idLaunchVehicleOffset:flatbuffers.Offset, idEngineOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, stageNumber:number, typeOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, numEngines:number, length:number, diameter:number, mass:number, vernierOffset:flatbuffers.Offset, numVernier:number, mainEngineThrustSeaLevel:number, mainEngineThrustVacuum:number, thrustSeaLevel:number, thrustVacuum:number, burnTime:number, numBurns:number, vernierBurnTime:number, vernierNumBurns:number, vernierThrustSeaLevel:number, vernierThrustVacuum:number, numStageElements:number, reusable:boolean, restartable:boolean, controlThruster1Offset:flatbuffers.Offset, numControlThruster1:number, controlThruster2Offset:flatbuffers.Offset, numControlThruster2:number, photoUrlsOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, avionicsNotesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:Stage_Abridged_dataMode_Enum):flatbuffers.Offset {
  Stage_Abridged.startStage_Abridged(builder);
  Stage_Abridged.addId(builder, idOffset);
  Stage_Abridged.addIdLaunchVehicle(builder, idLaunchVehicleOffset);
  Stage_Abridged.addIdEngine(builder, idEngineOffset);
  Stage_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  Stage_Abridged.addStageNumber(builder, stageNumber);
  Stage_Abridged.addType(builder, typeOffset);
  Stage_Abridged.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  Stage_Abridged.addNumEngines(builder, numEngines);
  Stage_Abridged.addLength(builder, length);
  Stage_Abridged.addDiameter(builder, diameter);
  Stage_Abridged.addMass(builder, mass);
  Stage_Abridged.addVernier(builder, vernierOffset);
  Stage_Abridged.addNumVernier(builder, numVernier);
  Stage_Abridged.addMainEngineThrustSeaLevel(builder, mainEngineThrustSeaLevel);
  Stage_Abridged.addMainEngineThrustVacuum(builder, mainEngineThrustVacuum);
  Stage_Abridged.addThrustSeaLevel(builder, thrustSeaLevel);
  Stage_Abridged.addThrustVacuum(builder, thrustVacuum);
  Stage_Abridged.addBurnTime(builder, burnTime);
  Stage_Abridged.addNumBurns(builder, numBurns);
  Stage_Abridged.addVernierBurnTime(builder, vernierBurnTime);
  Stage_Abridged.addVernierNumBurns(builder, vernierNumBurns);
  Stage_Abridged.addVernierThrustSeaLevel(builder, vernierThrustSeaLevel);
  Stage_Abridged.addVernierThrustVacuum(builder, vernierThrustVacuum);
  Stage_Abridged.addNumStageElements(builder, numStageElements);
  Stage_Abridged.addReusable(builder, reusable);
  Stage_Abridged.addRestartable(builder, restartable);
  Stage_Abridged.addControlThruster1(builder, controlThruster1Offset);
  Stage_Abridged.addNumControlThruster1(builder, numControlThruster1);
  Stage_Abridged.addControlThruster2(builder, controlThruster2Offset);
  Stage_Abridged.addNumControlThruster2(builder, numControlThruster2);
  Stage_Abridged.addPhotoUrls(builder, photoUrlsOffset);
  Stage_Abridged.addNotes(builder, notesOffset);
  Stage_Abridged.addAvionicsNotes(builder, avionicsNotesOffset);
  Stage_Abridged.addCreatedAt(builder, createdAtOffset);
  Stage_Abridged.addCreatedBy(builder, createdByOffset);
  Stage_Abridged.addSource(builder, sourceOffset);
  Stage_Abridged.addOrigin(builder, originOffset);
  Stage_Abridged.addOrigNetwork(builder, origNetworkOffset);
  Stage_Abridged.addDataMode(builder, dataMode);
  return Stage_Abridged.endStage_Abridged(builder);
}

unpack(): Stage_AbridgedT {
  return new Stage_AbridgedT(
    this.id(),
    this.idLaunchVehicle(),
    this.idEngine(),
    this.classificationMarking(),
    this.stageNumber(),
    this.type(),
    this.manufacturerOrgId(),
    this.numEngines(),
    this.length(),
    this.diameter(),
    this.mass(),
    this.vernier(),
    this.numVernier(),
    this.mainEngineThrustSeaLevel(),
    this.mainEngineThrustVacuum(),
    this.thrustSeaLevel(),
    this.thrustVacuum(),
    this.burnTime(),
    this.numBurns(),
    this.vernierBurnTime(),
    this.vernierNumBurns(),
    this.vernierThrustSeaLevel(),
    this.vernierThrustVacuum(),
    this.numStageElements(),
    this.reusable(),
    this.restartable(),
    this.controlThruster1(),
    this.numControlThruster1(),
    this.controlThruster2(),
    this.numControlThruster2(),
    this.bb!.createScalarList<string>(this.photoUrls.bind(this), this.photoUrlsLength()),
    this.notes(),
    this.avionicsNotes(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: Stage_AbridgedT): void {
  _o.id = this.id();
  _o.idLaunchVehicle = this.idLaunchVehicle();
  _o.idEngine = this.idEngine();
  _o.classificationMarking = this.classificationMarking();
  _o.stageNumber = this.stageNumber();
  _o.type = this.type();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.numEngines = this.numEngines();
  _o.length = this.length();
  _o.diameter = this.diameter();
  _o.mass = this.mass();
  _o.vernier = this.vernier();
  _o.numVernier = this.numVernier();
  _o.mainEngineThrustSeaLevel = this.mainEngineThrustSeaLevel();
  _o.mainEngineThrustVacuum = this.mainEngineThrustVacuum();
  _o.thrustSeaLevel = this.thrustSeaLevel();
  _o.thrustVacuum = this.thrustVacuum();
  _o.burnTime = this.burnTime();
  _o.numBurns = this.numBurns();
  _o.vernierBurnTime = this.vernierBurnTime();
  _o.vernierNumBurns = this.vernierNumBurns();
  _o.vernierThrustSeaLevel = this.vernierThrustSeaLevel();
  _o.vernierThrustVacuum = this.vernierThrustVacuum();
  _o.numStageElements = this.numStageElements();
  _o.reusable = this.reusable();
  _o.restartable = this.restartable();
  _o.controlThruster1 = this.controlThruster1();
  _o.numControlThruster1 = this.numControlThruster1();
  _o.controlThruster2 = this.controlThruster2();
  _o.numControlThruster2 = this.numControlThruster2();
  _o.photoUrls = this.bb!.createScalarList<string>(this.photoUrls.bind(this), this.photoUrlsLength());
  _o.notes = this.notes();
  _o.avionicsNotes = this.avionicsNotes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class Stage_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idLaunchVehicle: string|Uint8Array|null = null,
  public idEngine: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public stageNumber: number = 0,
  public type: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public numEngines: number = 0,
  public length: number = 0.0,
  public diameter: number = 0.0,
  public mass: number = 0.0,
  public vernier: string|Uint8Array|null = null,
  public numVernier: number = 0,
  public mainEngineThrustSeaLevel: number = 0.0,
  public mainEngineThrustVacuum: number = 0.0,
  public thrustSeaLevel: number = 0.0,
  public thrustVacuum: number = 0.0,
  public burnTime: number = 0.0,
  public numBurns: number = 0,
  public vernierBurnTime: number = 0.0,
  public vernierNumBurns: number = 0,
  public vernierThrustSeaLevel: number = 0.0,
  public vernierThrustVacuum: number = 0.0,
  public numStageElements: number = 0,
  public reusable: boolean = false,
  public restartable: boolean = false,
  public controlThruster1: string|Uint8Array|null = null,
  public numControlThruster1: number = 0,
  public controlThruster2: string|Uint8Array|null = null,
  public numControlThruster2: number = 0,
  public photoUrls: (string)[] = [],
  public notes: string|Uint8Array|null = null,
  public avionicsNotes: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: Stage_Abridged_dataMode_Enum = Stage_Abridged_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idLaunchVehicle = (this.idLaunchVehicle !== null ? builder.createString(this.idLaunchVehicle!) : 0);
  const idEngine = (this.idEngine !== null ? builder.createString(this.idEngine!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const vernier = (this.vernier !== null ? builder.createString(this.vernier!) : 0);
  const controlThruster1 = (this.controlThruster1 !== null ? builder.createString(this.controlThruster1!) : 0);
  const controlThruster2 = (this.controlThruster2 !== null ? builder.createString(this.controlThruster2!) : 0);
  const photoUrls = Stage_Abridged.createPhotoUrlsVector(builder, builder.createObjectOffsetList(this.photoUrls));
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const avionicsNotes = (this.avionicsNotes !== null ? builder.createString(this.avionicsNotes!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Stage_Abridged.createStage_Abridged(builder,
    id,
    idLaunchVehicle,
    idEngine,
    classificationMarking,
    this.stageNumber,
    type,
    manufacturerOrgId,
    this.numEngines,
    this.length,
    this.diameter,
    this.mass,
    vernier,
    this.numVernier,
    this.mainEngineThrustSeaLevel,
    this.mainEngineThrustVacuum,
    this.thrustSeaLevel,
    this.thrustVacuum,
    this.burnTime,
    this.numBurns,
    this.vernierBurnTime,
    this.vernierNumBurns,
    this.vernierThrustSeaLevel,
    this.vernierThrustVacuum,
    this.numStageElements,
    this.reusable,
    this.restartable,
    controlThruster1,
    this.numControlThruster1,
    controlThruster2,
    this.numControlThruster2,
    photoUrls,
    notes,
    avionicsNotes,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
