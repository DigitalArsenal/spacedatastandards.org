// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LaunchVehicleDetails_Ingest_dataMode_Enum } from './launch-vehicle-details-ingest-data-mode-enum.js';


/**
 * /// Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.
 */
export class LaunchVehicleDetails_Ingest implements flatbuffers.IUnpackableObject<LaunchVehicleDetails_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LaunchVehicleDetails_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLaunchVehicleDetails_Ingest(bb:flatbuffers.ByteBuffer, obj?:LaunchVehicleDetails_Ingest):LaunchVehicleDetails_Ingest {
  return (obj || new LaunchVehicleDetails_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLaunchVehicleDetails_Ingest(bb:flatbuffers.ByteBuffer, obj?:LaunchVehicleDetails_Ingest):LaunchVehicleDetails_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LaunchVehicleDetails_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('LAUN');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: LAUNCHVEHICLEDETAILS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the parent launch vehicle record.
 * Example: /// Example: LAUNCHVEHICLE-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idLaunchVehicle():string|null
idLaunchVehicle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idLaunchVehicle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Vehicle variant.
 * Example: /// Example: Example-variant
 * Constraints: Minimum length = 0, Maximum length = 64
 */
variant():string|null
variant(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
variant(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Vehicle minor variant.
 * Example: /// Example: Example-minor-variant
 * Constraints: Minimum length = 0, Maximum length = 64
 */
minorVariant():string|null
minorVariant(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
minorVariant(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Vehicle category.
 * Example: /// Example: Example-category
 * Constraints: Minimum length = 0, Maximum length = 64
 */
category():string|null
category(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
category(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the organization that manufactures the launch vehicle.
 * Example: /// Example: MANUFACTURERORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Vehicle launch prefix.
 * Example: /// Example: AX011
 * Constraints: Minimum length = 0, Maximum length = 8
 */
launchPrefix():string|null
launchPrefix(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchPrefix(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Vehicle family.
 * Example: /// Example: Example-family
 * Constraints: Minimum length = 0, Maximum length = 64
 */
family():string|null
family(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
family(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Propellant type.
 * Example: /// Example: Nitrogen
 * Constraints: Minimum length = 0, Maximum length = 64
 */
propellant():string|null
propellant(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
propellant(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Oxidizer type.
 * Example: /// Example: Bromine
 * Constraints: Minimum length = 0, Maximum length = 64
 */
oxidizer():string|null
oxidizer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
oxidizer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Vehicle length in meters.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
length():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vehicle diameter in meters.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
diameter():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vehicle total mass at launch time in kg (including all boosters).
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
launchMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum vehicle payload mass to GEO orbit in kg.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
geoPayloadMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Max vehicle payload mass to Geo-Transfer Orbit in kg.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
gtoPayloadMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Max vehicle payload mass to LEO orbit in kg.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
leoPayloadMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Max vehicle payload mass to Sun-Synchronous Orbit in kg.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
ssoPayloadMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vehicle fairing length in meters.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
fairingLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Name of the fairing.
 * Example: /// Example: Example-fairing-name
 * Constraints: Minimum length = 0, Maximum length = 64
 */
fairingName():string|null
fairingName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fairingName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Vehicle fairing maximum external diameter in meters.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
fairingExternalDiameter():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vehicle fairing maximum internal diameter in meters.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
fairingInternalDiameter():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vehicle fairing mass in kg.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
fairingMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fairing material.
 * Example: /// Example: Example-fairing-material
 * Constraints: Minimum length = 0, Maximum length = 64
 */
fairingMaterial():string|null
fairingMaterial(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fairingMaterial(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Vehicle maximum acceleration load in g.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
maxAccelLoad():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vehicle maximum payload lateral frequency in Hz.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
maxPayloadFreqLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vehicle maximum payload longitudinal frequency in Hz.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
maxPayloadFreqLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vehicle maximum acoustic level in dB.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
maxAcousticLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vehicle maximum acoustic level range in Hz.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
maxAcousticLevelRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vehicle overall sound pressure level in dB.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
soundPressureLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vehicle maximum flight shock force in g.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
maxFlightShockForce():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vehicle maximum flight shock frequency in Hz.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
maxFlightShockFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vehicle fairing maximum pressure change in kPa/sec.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
maxFairingPressureChange():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch vehicle estimated launch price in US dollars.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
estLaunchPrice():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch vehicle typical estimated launch price in US dollars.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
estLaunchPriceTypical():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
gtoInj3SigAccuracyApogeeTarget():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
gtoInj3SigAccuracyApogeeMargin():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
gtoInj3SigAccuracyPerigeeTarget():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
gtoInj3SigAccuracyPerigeeMargin():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
gtoInj3SigAccuracyInclinationTarget():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
gtoInj3SigAccuracyInclinationMargin():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch vehicle attitude accuracy (degrees).
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
attitudeAccuracy():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch vehicle payload separation rate in m/s.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
payloadSeparationRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch vehicle deployment rotation rate in RPM.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
deploymentRotationRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional URL for additional information on the vehicle.
 * Example: /// Example: Example URL
 * Constraints: Minimum length = 0, Maximum length = 256
 */
sourceUrl():string|null
sourceUrl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceUrl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Notes/Description of the launch vehicle.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 512
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Notes/Description of the launch vehicle fairing.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 512
 */
fairingNotes():string|null
fairingNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fairingNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Notes/Description of the launch vehicle payload.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 512
 */
payloadNotes():string|null
payloadNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
payloadNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():LaunchVehicleDetails_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : LaunchVehicleDetails_Ingest_dataMode_Enum.REAL;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startLaunchVehicleDetails_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(55);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdLaunchVehicle(builder:flatbuffers.Builder, idLaunchVehicleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idLaunchVehicleOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addVariant(builder:flatbuffers.Builder, variantOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, variantOffset, 0);
}

static addMinorVariant(builder:flatbuffers.Builder, minorVariantOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, minorVariantOffset, 0);
}

static addCategory(builder:flatbuffers.Builder, categoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, categoryOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, manufacturerOrgIdOffset, 0);
}

static addLaunchPrefix(builder:flatbuffers.Builder, launchPrefixOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, launchPrefixOffset, 0);
}

static addFamily(builder:flatbuffers.Builder, familyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, familyOffset, 0);
}

static addPropellant(builder:flatbuffers.Builder, propellantOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, propellantOffset, 0);
}

static addOxidizer(builder:flatbuffers.Builder, oxidizerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, oxidizerOffset, 0);
}

static addLength(builder:flatbuffers.Builder, length:number) {
  builder.addFieldFloat64(11, length, 0.0);
}

static addDiameter(builder:flatbuffers.Builder, diameter:number) {
  builder.addFieldFloat64(12, diameter, 0.0);
}

static addLaunchMass(builder:flatbuffers.Builder, launchMass:number) {
  builder.addFieldFloat64(13, launchMass, 0.0);
}

static addGeoPayloadMass(builder:flatbuffers.Builder, geoPayloadMass:number) {
  builder.addFieldFloat64(14, geoPayloadMass, 0.0);
}

static addGtoPayloadMass(builder:flatbuffers.Builder, gtoPayloadMass:number) {
  builder.addFieldFloat64(15, gtoPayloadMass, 0.0);
}

static addLeoPayloadMass(builder:flatbuffers.Builder, leoPayloadMass:number) {
  builder.addFieldFloat64(16, leoPayloadMass, 0.0);
}

static addSsoPayloadMass(builder:flatbuffers.Builder, ssoPayloadMass:number) {
  builder.addFieldFloat64(17, ssoPayloadMass, 0.0);
}

static addFairingLength(builder:flatbuffers.Builder, fairingLength:number) {
  builder.addFieldFloat64(18, fairingLength, 0.0);
}

static addFairingName(builder:flatbuffers.Builder, fairingNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, fairingNameOffset, 0);
}

static addFairingExternalDiameter(builder:flatbuffers.Builder, fairingExternalDiameter:number) {
  builder.addFieldFloat64(20, fairingExternalDiameter, 0.0);
}

static addFairingInternalDiameter(builder:flatbuffers.Builder, fairingInternalDiameter:number) {
  builder.addFieldFloat64(21, fairingInternalDiameter, 0.0);
}

static addFairingMass(builder:flatbuffers.Builder, fairingMass:number) {
  builder.addFieldFloat64(22, fairingMass, 0.0);
}

static addFairingMaterial(builder:flatbuffers.Builder, fairingMaterialOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, fairingMaterialOffset, 0);
}

static addMaxAccelLoad(builder:flatbuffers.Builder, maxAccelLoad:number) {
  builder.addFieldFloat64(24, maxAccelLoad, 0.0);
}

static addMaxPayloadFreqLat(builder:flatbuffers.Builder, maxPayloadFreqLat:number) {
  builder.addFieldFloat64(25, maxPayloadFreqLat, 0.0);
}

static addMaxPayloadFreqLon(builder:flatbuffers.Builder, maxPayloadFreqLon:number) {
  builder.addFieldFloat64(26, maxPayloadFreqLon, 0.0);
}

static addMaxAcousticLevel(builder:flatbuffers.Builder, maxAcousticLevel:number) {
  builder.addFieldFloat64(27, maxAcousticLevel, 0.0);
}

static addMaxAcousticLevelRange(builder:flatbuffers.Builder, maxAcousticLevelRange:number) {
  builder.addFieldFloat64(28, maxAcousticLevelRange, 0.0);
}

static addSoundPressureLevel(builder:flatbuffers.Builder, soundPressureLevel:number) {
  builder.addFieldFloat64(29, soundPressureLevel, 0.0);
}

static addMaxFlightShockForce(builder:flatbuffers.Builder, maxFlightShockForce:number) {
  builder.addFieldFloat64(30, maxFlightShockForce, 0.0);
}

static addMaxFlightShockFreq(builder:flatbuffers.Builder, maxFlightShockFreq:number) {
  builder.addFieldFloat64(31, maxFlightShockFreq, 0.0);
}

static addMaxFairingPressureChange(builder:flatbuffers.Builder, maxFairingPressureChange:number) {
  builder.addFieldFloat64(32, maxFairingPressureChange, 0.0);
}

static addEstLaunchPrice(builder:flatbuffers.Builder, estLaunchPrice:number) {
  builder.addFieldFloat64(33, estLaunchPrice, 0.0);
}

static addEstLaunchPriceTypical(builder:flatbuffers.Builder, estLaunchPriceTypical:number) {
  builder.addFieldFloat64(34, estLaunchPriceTypical, 0.0);
}

static addGtoInj3SigAccuracyApogeeTarget(builder:flatbuffers.Builder, gtoInj3SigAccuracyApogeeTarget:number) {
  builder.addFieldFloat64(35, gtoInj3SigAccuracyApogeeTarget, 0.0);
}

static addGtoInj3SigAccuracyApogeeMargin(builder:flatbuffers.Builder, gtoInj3SigAccuracyApogeeMargin:number) {
  builder.addFieldFloat64(36, gtoInj3SigAccuracyApogeeMargin, 0.0);
}

static addGtoInj3SigAccuracyPerigeeTarget(builder:flatbuffers.Builder, gtoInj3SigAccuracyPerigeeTarget:number) {
  builder.addFieldFloat64(37, gtoInj3SigAccuracyPerigeeTarget, 0.0);
}

static addGtoInj3SigAccuracyPerigeeMargin(builder:flatbuffers.Builder, gtoInj3SigAccuracyPerigeeMargin:number) {
  builder.addFieldFloat64(38, gtoInj3SigAccuracyPerigeeMargin, 0.0);
}

static addGtoInj3SigAccuracyInclinationTarget(builder:flatbuffers.Builder, gtoInj3SigAccuracyInclinationTarget:number) {
  builder.addFieldFloat64(39, gtoInj3SigAccuracyInclinationTarget, 0.0);
}

static addGtoInj3SigAccuracyInclinationMargin(builder:flatbuffers.Builder, gtoInj3SigAccuracyInclinationMargin:number) {
  builder.addFieldFloat64(40, gtoInj3SigAccuracyInclinationMargin, 0.0);
}

static addAttitudeAccuracy(builder:flatbuffers.Builder, attitudeAccuracy:number) {
  builder.addFieldFloat64(41, attitudeAccuracy, 0.0);
}

static addPayloadSeparationRate(builder:flatbuffers.Builder, payloadSeparationRate:number) {
  builder.addFieldFloat64(42, payloadSeparationRate, 0.0);
}

static addDeploymentRotationRate(builder:flatbuffers.Builder, deploymentRotationRate:number) {
  builder.addFieldFloat64(43, deploymentRotationRate, 0.0);
}

static addSourceUrl(builder:flatbuffers.Builder, sourceUrlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, sourceUrlOffset, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, notesOffset, 0);
}

static addFairingNotes(builder:flatbuffers.Builder, fairingNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, fairingNotesOffset, 0);
}

static addPayloadNotes(builder:flatbuffers.Builder, payloadNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, payloadNotesOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:LaunchVehicleDetails_Ingest_dataMode_Enum) {
  builder.addFieldInt8(53, dataMode, LaunchVehicleDetails_Ingest_dataMode_Enum.REAL);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endLaunchVehicleDetails_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLaunchVehicleDetails_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LAUN');
}

static finishSizePrefixedLaunchVehicleDetails_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LAUN', true);
}

static createLaunchVehicleDetails_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idLaunchVehicleOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, variantOffset:flatbuffers.Offset, minorVariantOffset:flatbuffers.Offset, categoryOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, launchPrefixOffset:flatbuffers.Offset, familyOffset:flatbuffers.Offset, propellantOffset:flatbuffers.Offset, oxidizerOffset:flatbuffers.Offset, length:number, diameter:number, launchMass:number, geoPayloadMass:number, gtoPayloadMass:number, leoPayloadMass:number, ssoPayloadMass:number, fairingLength:number, fairingNameOffset:flatbuffers.Offset, fairingExternalDiameter:number, fairingInternalDiameter:number, fairingMass:number, fairingMaterialOffset:flatbuffers.Offset, maxAccelLoad:number, maxPayloadFreqLat:number, maxPayloadFreqLon:number, maxAcousticLevel:number, maxAcousticLevelRange:number, soundPressureLevel:number, maxFlightShockForce:number, maxFlightShockFreq:number, maxFairingPressureChange:number, estLaunchPrice:number, estLaunchPriceTypical:number, gtoInj3SigAccuracyApogeeTarget:number, gtoInj3SigAccuracyApogeeMargin:number, gtoInj3SigAccuracyPerigeeTarget:number, gtoInj3SigAccuracyPerigeeMargin:number, gtoInj3SigAccuracyInclinationTarget:number, gtoInj3SigAccuracyInclinationMargin:number, attitudeAccuracy:number, payloadSeparationRate:number, deploymentRotationRate:number, sourceUrlOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, fairingNotesOffset:flatbuffers.Offset, payloadNotesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:LaunchVehicleDetails_Ingest_dataMode_Enum, tagsOffset:flatbuffers.Offset):flatbuffers.Offset {
  LaunchVehicleDetails_Ingest.startLaunchVehicleDetails_Ingest(builder);
  LaunchVehicleDetails_Ingest.addId(builder, idOffset);
  LaunchVehicleDetails_Ingest.addIdLaunchVehicle(builder, idLaunchVehicleOffset);
  LaunchVehicleDetails_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  LaunchVehicleDetails_Ingest.addVariant(builder, variantOffset);
  LaunchVehicleDetails_Ingest.addMinorVariant(builder, minorVariantOffset);
  LaunchVehicleDetails_Ingest.addCategory(builder, categoryOffset);
  LaunchVehicleDetails_Ingest.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  LaunchVehicleDetails_Ingest.addLaunchPrefix(builder, launchPrefixOffset);
  LaunchVehicleDetails_Ingest.addFamily(builder, familyOffset);
  LaunchVehicleDetails_Ingest.addPropellant(builder, propellantOffset);
  LaunchVehicleDetails_Ingest.addOxidizer(builder, oxidizerOffset);
  LaunchVehicleDetails_Ingest.addLength(builder, length);
  LaunchVehicleDetails_Ingest.addDiameter(builder, diameter);
  LaunchVehicleDetails_Ingest.addLaunchMass(builder, launchMass);
  LaunchVehicleDetails_Ingest.addGeoPayloadMass(builder, geoPayloadMass);
  LaunchVehicleDetails_Ingest.addGtoPayloadMass(builder, gtoPayloadMass);
  LaunchVehicleDetails_Ingest.addLeoPayloadMass(builder, leoPayloadMass);
  LaunchVehicleDetails_Ingest.addSsoPayloadMass(builder, ssoPayloadMass);
  LaunchVehicleDetails_Ingest.addFairingLength(builder, fairingLength);
  LaunchVehicleDetails_Ingest.addFairingName(builder, fairingNameOffset);
  LaunchVehicleDetails_Ingest.addFairingExternalDiameter(builder, fairingExternalDiameter);
  LaunchVehicleDetails_Ingest.addFairingInternalDiameter(builder, fairingInternalDiameter);
  LaunchVehicleDetails_Ingest.addFairingMass(builder, fairingMass);
  LaunchVehicleDetails_Ingest.addFairingMaterial(builder, fairingMaterialOffset);
  LaunchVehicleDetails_Ingest.addMaxAccelLoad(builder, maxAccelLoad);
  LaunchVehicleDetails_Ingest.addMaxPayloadFreqLat(builder, maxPayloadFreqLat);
  LaunchVehicleDetails_Ingest.addMaxPayloadFreqLon(builder, maxPayloadFreqLon);
  LaunchVehicleDetails_Ingest.addMaxAcousticLevel(builder, maxAcousticLevel);
  LaunchVehicleDetails_Ingest.addMaxAcousticLevelRange(builder, maxAcousticLevelRange);
  LaunchVehicleDetails_Ingest.addSoundPressureLevel(builder, soundPressureLevel);
  LaunchVehicleDetails_Ingest.addMaxFlightShockForce(builder, maxFlightShockForce);
  LaunchVehicleDetails_Ingest.addMaxFlightShockFreq(builder, maxFlightShockFreq);
  LaunchVehicleDetails_Ingest.addMaxFairingPressureChange(builder, maxFairingPressureChange);
  LaunchVehicleDetails_Ingest.addEstLaunchPrice(builder, estLaunchPrice);
  LaunchVehicleDetails_Ingest.addEstLaunchPriceTypical(builder, estLaunchPriceTypical);
  LaunchVehicleDetails_Ingest.addGtoInj3SigAccuracyApogeeTarget(builder, gtoInj3SigAccuracyApogeeTarget);
  LaunchVehicleDetails_Ingest.addGtoInj3SigAccuracyApogeeMargin(builder, gtoInj3SigAccuracyApogeeMargin);
  LaunchVehicleDetails_Ingest.addGtoInj3SigAccuracyPerigeeTarget(builder, gtoInj3SigAccuracyPerigeeTarget);
  LaunchVehicleDetails_Ingest.addGtoInj3SigAccuracyPerigeeMargin(builder, gtoInj3SigAccuracyPerigeeMargin);
  LaunchVehicleDetails_Ingest.addGtoInj3SigAccuracyInclinationTarget(builder, gtoInj3SigAccuracyInclinationTarget);
  LaunchVehicleDetails_Ingest.addGtoInj3SigAccuracyInclinationMargin(builder, gtoInj3SigAccuracyInclinationMargin);
  LaunchVehicleDetails_Ingest.addAttitudeAccuracy(builder, attitudeAccuracy);
  LaunchVehicleDetails_Ingest.addPayloadSeparationRate(builder, payloadSeparationRate);
  LaunchVehicleDetails_Ingest.addDeploymentRotationRate(builder, deploymentRotationRate);
  LaunchVehicleDetails_Ingest.addSourceUrl(builder, sourceUrlOffset);
  LaunchVehicleDetails_Ingest.addNotes(builder, notesOffset);
  LaunchVehicleDetails_Ingest.addFairingNotes(builder, fairingNotesOffset);
  LaunchVehicleDetails_Ingest.addPayloadNotes(builder, payloadNotesOffset);
  LaunchVehicleDetails_Ingest.addCreatedAt(builder, createdAtOffset);
  LaunchVehicleDetails_Ingest.addCreatedBy(builder, createdByOffset);
  LaunchVehicleDetails_Ingest.addSource(builder, sourceOffset);
  LaunchVehicleDetails_Ingest.addOrigin(builder, originOffset);
  LaunchVehicleDetails_Ingest.addOrigNetwork(builder, origNetworkOffset);
  LaunchVehicleDetails_Ingest.addDataMode(builder, dataMode);
  LaunchVehicleDetails_Ingest.addTags(builder, tagsOffset);
  return LaunchVehicleDetails_Ingest.endLaunchVehicleDetails_Ingest(builder);
}

unpack(): LaunchVehicleDetails_IngestT {
  return new LaunchVehicleDetails_IngestT(
    this.id(),
    this.idLaunchVehicle(),
    this.classificationMarking(),
    this.variant(),
    this.minorVariant(),
    this.category(),
    this.manufacturerOrgId(),
    this.launchPrefix(),
    this.family(),
    this.propellant(),
    this.oxidizer(),
    this.length(),
    this.diameter(),
    this.launchMass(),
    this.geoPayloadMass(),
    this.gtoPayloadMass(),
    this.leoPayloadMass(),
    this.ssoPayloadMass(),
    this.fairingLength(),
    this.fairingName(),
    this.fairingExternalDiameter(),
    this.fairingInternalDiameter(),
    this.fairingMass(),
    this.fairingMaterial(),
    this.maxAccelLoad(),
    this.maxPayloadFreqLat(),
    this.maxPayloadFreqLon(),
    this.maxAcousticLevel(),
    this.maxAcousticLevelRange(),
    this.soundPressureLevel(),
    this.maxFlightShockForce(),
    this.maxFlightShockFreq(),
    this.maxFairingPressureChange(),
    this.estLaunchPrice(),
    this.estLaunchPriceTypical(),
    this.gtoInj3SigAccuracyApogeeTarget(),
    this.gtoInj3SigAccuracyApogeeMargin(),
    this.gtoInj3SigAccuracyPerigeeTarget(),
    this.gtoInj3SigAccuracyPerigeeMargin(),
    this.gtoInj3SigAccuracyInclinationTarget(),
    this.gtoInj3SigAccuracyInclinationMargin(),
    this.attitudeAccuracy(),
    this.payloadSeparationRate(),
    this.deploymentRotationRate(),
    this.sourceUrl(),
    this.notes(),
    this.fairingNotes(),
    this.payloadNotes(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length())
  );
}


unpackTo(_o: LaunchVehicleDetails_IngestT): void {
  _o.id = this.id();
  _o.idLaunchVehicle = this.idLaunchVehicle();
  _o.classificationMarking = this.classificationMarking();
  _o.variant = this.variant();
  _o.minorVariant = this.minorVariant();
  _o.category = this.category();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.launchPrefix = this.launchPrefix();
  _o.family = this.family();
  _o.propellant = this.propellant();
  _o.oxidizer = this.oxidizer();
  _o.length = this.length();
  _o.diameter = this.diameter();
  _o.launchMass = this.launchMass();
  _o.geoPayloadMass = this.geoPayloadMass();
  _o.gtoPayloadMass = this.gtoPayloadMass();
  _o.leoPayloadMass = this.leoPayloadMass();
  _o.ssoPayloadMass = this.ssoPayloadMass();
  _o.fairingLength = this.fairingLength();
  _o.fairingName = this.fairingName();
  _o.fairingExternalDiameter = this.fairingExternalDiameter();
  _o.fairingInternalDiameter = this.fairingInternalDiameter();
  _o.fairingMass = this.fairingMass();
  _o.fairingMaterial = this.fairingMaterial();
  _o.maxAccelLoad = this.maxAccelLoad();
  _o.maxPayloadFreqLat = this.maxPayloadFreqLat();
  _o.maxPayloadFreqLon = this.maxPayloadFreqLon();
  _o.maxAcousticLevel = this.maxAcousticLevel();
  _o.maxAcousticLevelRange = this.maxAcousticLevelRange();
  _o.soundPressureLevel = this.soundPressureLevel();
  _o.maxFlightShockForce = this.maxFlightShockForce();
  _o.maxFlightShockFreq = this.maxFlightShockFreq();
  _o.maxFairingPressureChange = this.maxFairingPressureChange();
  _o.estLaunchPrice = this.estLaunchPrice();
  _o.estLaunchPriceTypical = this.estLaunchPriceTypical();
  _o.gtoInj3SigAccuracyApogeeTarget = this.gtoInj3SigAccuracyApogeeTarget();
  _o.gtoInj3SigAccuracyApogeeMargin = this.gtoInj3SigAccuracyApogeeMargin();
  _o.gtoInj3SigAccuracyPerigeeTarget = this.gtoInj3SigAccuracyPerigeeTarget();
  _o.gtoInj3SigAccuracyPerigeeMargin = this.gtoInj3SigAccuracyPerigeeMargin();
  _o.gtoInj3SigAccuracyInclinationTarget = this.gtoInj3SigAccuracyInclinationTarget();
  _o.gtoInj3SigAccuracyInclinationMargin = this.gtoInj3SigAccuracyInclinationMargin();
  _o.attitudeAccuracy = this.attitudeAccuracy();
  _o.payloadSeparationRate = this.payloadSeparationRate();
  _o.deploymentRotationRate = this.deploymentRotationRate();
  _o.sourceURL = this.sourceUrl();
  _o.notes = this.notes();
  _o.fairingNotes = this.fairingNotes();
  _o.payloadNotes = this.payloadNotes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length());
}
}

export class LaunchVehicleDetails_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idLaunchVehicle: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public variant: string|Uint8Array|null = null,
  public minorVariant: string|Uint8Array|null = null,
  public category: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public launchPrefix: string|Uint8Array|null = null,
  public family: string|Uint8Array|null = null,
  public propellant: string|Uint8Array|null = null,
  public oxidizer: string|Uint8Array|null = null,
  public length: number = 0.0,
  public diameter: number = 0.0,
  public launchMass: number = 0.0,
  public geoPayloadMass: number = 0.0,
  public gtoPayloadMass: number = 0.0,
  public leoPayloadMass: number = 0.0,
  public ssoPayloadMass: number = 0.0,
  public fairingLength: number = 0.0,
  public fairingName: string|Uint8Array|null = null,
  public fairingExternalDiameter: number = 0.0,
  public fairingInternalDiameter: number = 0.0,
  public fairingMass: number = 0.0,
  public fairingMaterial: string|Uint8Array|null = null,
  public maxAccelLoad: number = 0.0,
  public maxPayloadFreqLat: number = 0.0,
  public maxPayloadFreqLon: number = 0.0,
  public maxAcousticLevel: number = 0.0,
  public maxAcousticLevelRange: number = 0.0,
  public soundPressureLevel: number = 0.0,
  public maxFlightShockForce: number = 0.0,
  public maxFlightShockFreq: number = 0.0,
  public maxFairingPressureChange: number = 0.0,
  public estLaunchPrice: number = 0.0,
  public estLaunchPriceTypical: number = 0.0,
  public gtoInj3SigAccuracyApogeeTarget: number = 0.0,
  public gtoInj3SigAccuracyApogeeMargin: number = 0.0,
  public gtoInj3SigAccuracyPerigeeTarget: number = 0.0,
  public gtoInj3SigAccuracyPerigeeMargin: number = 0.0,
  public gtoInj3SigAccuracyInclinationTarget: number = 0.0,
  public gtoInj3SigAccuracyInclinationMargin: number = 0.0,
  public attitudeAccuracy: number = 0.0,
  public payloadSeparationRate: number = 0.0,
  public deploymentRotationRate: number = 0.0,
  public sourceURL: string|Uint8Array|null = null,
  public notes: string|Uint8Array|null = null,
  public fairingNotes: string|Uint8Array|null = null,
  public payloadNotes: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: LaunchVehicleDetails_Ingest_dataMode_Enum = LaunchVehicleDetails_Ingest_dataMode_Enum.REAL,
  public tags: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idLaunchVehicle = (this.idLaunchVehicle !== null ? builder.createString(this.idLaunchVehicle!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const variant = (this.variant !== null ? builder.createString(this.variant!) : 0);
  const minorVariant = (this.minorVariant !== null ? builder.createString(this.minorVariant!) : 0);
  const category = (this.category !== null ? builder.createString(this.category!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const launchPrefix = (this.launchPrefix !== null ? builder.createString(this.launchPrefix!) : 0);
  const family = (this.family !== null ? builder.createString(this.family!) : 0);
  const propellant = (this.propellant !== null ? builder.createString(this.propellant!) : 0);
  const oxidizer = (this.oxidizer !== null ? builder.createString(this.oxidizer!) : 0);
  const fairingName = (this.fairingName !== null ? builder.createString(this.fairingName!) : 0);
  const fairingMaterial = (this.fairingMaterial !== null ? builder.createString(this.fairingMaterial!) : 0);
  const sourceURL = (this.sourceURL !== null ? builder.createString(this.sourceURL!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const fairingNotes = (this.fairingNotes !== null ? builder.createString(this.fairingNotes!) : 0);
  const payloadNotes = (this.payloadNotes !== null ? builder.createString(this.payloadNotes!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const tags = LaunchVehicleDetails_Ingest.createTagsVector(builder, builder.createObjectOffsetList(this.tags));

  return LaunchVehicleDetails_Ingest.createLaunchVehicleDetails_Ingest(builder,
    id,
    idLaunchVehicle,
    classificationMarking,
    variant,
    minorVariant,
    category,
    manufacturerOrgId,
    launchPrefix,
    family,
    propellant,
    oxidizer,
    this.length,
    this.diameter,
    this.launchMass,
    this.geoPayloadMass,
    this.gtoPayloadMass,
    this.leoPayloadMass,
    this.ssoPayloadMass,
    this.fairingLength,
    fairingName,
    this.fairingExternalDiameter,
    this.fairingInternalDiameter,
    this.fairingMass,
    fairingMaterial,
    this.maxAccelLoad,
    this.maxPayloadFreqLat,
    this.maxPayloadFreqLon,
    this.maxAcousticLevel,
    this.maxAcousticLevelRange,
    this.soundPressureLevel,
    this.maxFlightShockForce,
    this.maxFlightShockFreq,
    this.maxFairingPressureChange,
    this.estLaunchPrice,
    this.estLaunchPriceTypical,
    this.gtoInj3SigAccuracyApogeeTarget,
    this.gtoInj3SigAccuracyApogeeMargin,
    this.gtoInj3SigAccuracyPerigeeTarget,
    this.gtoInj3SigAccuracyPerigeeMargin,
    this.gtoInj3SigAccuracyInclinationTarget,
    this.gtoInj3SigAccuracyInclinationMargin,
    this.attitudeAccuracy,
    this.payloadSeparationRate,
    this.deploymentRotationRate,
    sourceURL,
    notes,
    fairingNotes,
    payloadNotes,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode,
    tags
  );
}
}
