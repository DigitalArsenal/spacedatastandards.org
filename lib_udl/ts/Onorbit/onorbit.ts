// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Onorbit_category_Enum } from './onorbit-category-enum.js';
import { Onorbit_dataMode_Enum } from './onorbit-data-mode-enum.js';
import { Onorbit_objectType_Enum } from './onorbit-object-type-enum.js';


/**
 * /// Model object representing on-orbit objects or satellites in the system.
 */
export class Onorbit implements flatbuffers.IUnpackableObject<OnorbitT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Onorbit {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOnorbit(bb:flatbuffers.ByteBuffer, obj?:Onorbit):Onorbit {
  return (obj || new Onorbit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOnorbit(bb:flatbuffers.ByteBuffer, obj?:Onorbit):Onorbit {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Onorbit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ONOR');
}

/**
 * For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/Catalog number of the target on-orbit object.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Common name of the on-orbit object.
 * Example: /// Example: Example common name
 * Constraints: Minimum length = 0, Maximum length = 128
 */
commonName():string|null
commonName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
commonName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Constellation to which this satellite belongs.
 * Example: /// Example: Big Dipper
 * Constraints: Minimum length = 0, Maximum length = 128
 */
constellation():string|null
constellation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
constellation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.
 * Example: /// Example: 2021123ABC
 * Constraints: Minimum length = 0, Maximum length = 45
 */
intlDes():string|null
intlDes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
intlDes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Date of launch.
 * Example: /// Example: 2018-01-01
 * Constraints: No constraints specified.
 */
launchDate():string|null
launchDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Date of decay.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
decayDate():string|null
decayDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
decayDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.
 * Example: /// Example: PAYLOAD
 * Constraints: Minimum length = 0, Maximum length = 32
 */
objectType():Onorbit_objectType_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Onorbit_objectType_Enum.ROCKET_BODY;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mission number of the on-orbit object.
 * Example: /// Example: Expedition 1
 * Constraints: Minimum length = 0, Maximum length = 128
 */
missionNumber():string|null
missionNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).
 * Example: /// Example: Lunar
 * Constraints: Minimum length = 0, Maximum length = 45
 */
category():Onorbit_category_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Onorbit_category_Enum.UNKNOWN;
}

/**
 * Estimated lifetime of the on-orbit payload, if known.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
lifetimeYears():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Alternate name of the on-orbit object.
 * Example: /// Example: Alternate Name
 * Constraints: Minimum length = 0, Maximum length = 64
 */
altName():string|null
altName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was last updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Onorbit_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Onorbit_dataMode_Enum.REAL;
}

/**
 * Id of the associated launchSite entity.
 * Example: /// Example: LAUNCHSITE-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
launchSiteId():string|null
launchSiteId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchSiteId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Read-only collection of antennas on this on-orbit object.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
antennas(index: number):string
antennas(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
antennas(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

antennasLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Read-only collection of batteries on this on-orbit object.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
batteries(index: number):string
batteries(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
batteries(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

batteriesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Read-only collection of solar arrays on this on-orbit object.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
solarArrays(index: number):string
solarArrays(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
solarArrays(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

solarArraysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Read-only collection of thrusters (engines) on this on-orbit object.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
thrusters(index: number):string
thrusters(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
thrusters(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

thrustersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Read-only collection of details for this on-orbit object.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
onorbitDetails(index: number):string
onorbitDetails(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
onorbitDetails(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

onorbitDetailsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
 * Example: /// Example: US
 * Constraints: No constraints specified.
 */
countryCode():string|null
countryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startOnorbit(builder:flatbuffers.Builder) {
  builder.startObject(28);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOnOrbitOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(2, satNo, 0);
}

static addCommonName(builder:flatbuffers.Builder, commonNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, commonNameOffset, 0);
}

static addConstellation(builder:flatbuffers.Builder, constellationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, constellationOffset, 0);
}

static addIntlDes(builder:flatbuffers.Builder, intlDesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, intlDesOffset, 0);
}

static addLaunchDate(builder:flatbuffers.Builder, launchDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, launchDateOffset, 0);
}

static addDecayDate(builder:flatbuffers.Builder, decayDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, decayDateOffset, 0);
}

static addObjectType(builder:flatbuffers.Builder, objectType:Onorbit_objectType_Enum) {
  builder.addFieldInt8(8, objectType, Onorbit_objectType_Enum.ROCKET_BODY);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, originOffset, 0);
}

static addMissionNumber(builder:flatbuffers.Builder, missionNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, missionNumberOffset, 0);
}

static addCategory(builder:flatbuffers.Builder, category:Onorbit_category_Enum) {
  builder.addFieldInt8(11, category, Onorbit_category_Enum.UNKNOWN);
}

static addLifetimeYears(builder:flatbuffers.Builder, lifetimeYears:number) {
  builder.addFieldInt32(12, lifetimeYears, 0);
}

static addAltName(builder:flatbuffers.Builder, altNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, altNameOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, updatedByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, sourceOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Onorbit_dataMode_Enum) {
  builder.addFieldInt8(19, dataMode, Onorbit_dataMode_Enum.REAL);
}

static addLaunchSiteId(builder:flatbuffers.Builder, launchSiteIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, launchSiteIdOffset, 0);
}

static addAntennas(builder:flatbuffers.Builder, antennasOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, antennasOffset, 0);
}

static createAntennasVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAntennasVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBatteries(builder:flatbuffers.Builder, batteriesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, batteriesOffset, 0);
}

static createBatteriesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBatteriesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSolarArrays(builder:flatbuffers.Builder, solarArraysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, solarArraysOffset, 0);
}

static createSolarArraysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSolarArraysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addThrusters(builder:flatbuffers.Builder, thrustersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, thrustersOffset, 0);
}

static createThrustersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startThrustersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOnorbitDetails(builder:flatbuffers.Builder, onorbitDetailsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, onorbitDetailsOffset, 0);
}

static createOnorbitDetailsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOnorbitDetailsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCountryCode(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, countryCodeOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, origNetworkOffset, 0);
}

static endOnorbit(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOnorbitBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ONOR');
}

static finishSizePrefixedOnorbitBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ONOR', true);
}

static createOnorbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, satNo:number, commonNameOffset:flatbuffers.Offset, constellationOffset:flatbuffers.Offset, intlDesOffset:flatbuffers.Offset, launchDateOffset:flatbuffers.Offset, decayDateOffset:flatbuffers.Offset, objectType:Onorbit_objectType_Enum, originOffset:flatbuffers.Offset, missionNumberOffset:flatbuffers.Offset, category:Onorbit_category_Enum, lifetimeYears:number, altNameOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, dataMode:Onorbit_dataMode_Enum, launchSiteIdOffset:flatbuffers.Offset, antennasOffset:flatbuffers.Offset, batteriesOffset:flatbuffers.Offset, solarArraysOffset:flatbuffers.Offset, thrustersOffset:flatbuffers.Offset, onorbitDetailsOffset:flatbuffers.Offset, countryCodeOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  Onorbit.startOnorbit(builder);
  Onorbit.addIdOnOrbit(builder, idOnOrbitOffset);
  Onorbit.addClassificationMarking(builder, classificationMarkingOffset);
  Onorbit.addSatNo(builder, satNo);
  Onorbit.addCommonName(builder, commonNameOffset);
  Onorbit.addConstellation(builder, constellationOffset);
  Onorbit.addIntlDes(builder, intlDesOffset);
  Onorbit.addLaunchDate(builder, launchDateOffset);
  Onorbit.addDecayDate(builder, decayDateOffset);
  Onorbit.addObjectType(builder, objectType);
  Onorbit.addOrigin(builder, originOffset);
  Onorbit.addMissionNumber(builder, missionNumberOffset);
  Onorbit.addCategory(builder, category);
  Onorbit.addLifetimeYears(builder, lifetimeYears);
  Onorbit.addAltName(builder, altNameOffset);
  Onorbit.addCreatedAt(builder, createdAtOffset);
  Onorbit.addCreatedBy(builder, createdByOffset);
  Onorbit.addUpdatedAt(builder, updatedAtOffset);
  Onorbit.addUpdatedBy(builder, updatedByOffset);
  Onorbit.addSource(builder, sourceOffset);
  Onorbit.addDataMode(builder, dataMode);
  Onorbit.addLaunchSiteId(builder, launchSiteIdOffset);
  Onorbit.addAntennas(builder, antennasOffset);
  Onorbit.addBatteries(builder, batteriesOffset);
  Onorbit.addSolarArrays(builder, solarArraysOffset);
  Onorbit.addThrusters(builder, thrustersOffset);
  Onorbit.addOnorbitDetails(builder, onorbitDetailsOffset);
  Onorbit.addCountryCode(builder, countryCodeOffset);
  Onorbit.addOrigNetwork(builder, origNetworkOffset);
  return Onorbit.endOnorbit(builder);
}

unpack(): OnorbitT {
  return new OnorbitT(
    this.idOnOrbit(),
    this.classificationMarking(),
    this.satNo(),
    this.commonName(),
    this.constellation(),
    this.intlDes(),
    this.launchDate(),
    this.decayDate(),
    this.objectType(),
    this.origin(),
    this.missionNumber(),
    this.category(),
    this.lifetimeYears(),
    this.altName(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.source(),
    this.dataMode(),
    this.launchSiteId(),
    this.bb!.createScalarList<string>(this.antennas.bind(this), this.antennas_Length()),
    this.bb!.createScalarList<string>(this.batteries.bind(this), this.batteries_Length()),
    this.bb!.createScalarList<string>(this.solarArrays.bind(this), this.solarArrays_Length()),
    this.bb!.createScalarList<string>(this.thrusters.bind(this), this.thrusters_Length()),
    this.bb!.createScalarList<string>(this.onorbitDetails.bind(this), this.onorbitDetails_Length()),
    this.countryCode(),
    this.origNetwork()
  );
}


unpackTo(_o: OnorbitT): void {
  _o.idOnOrbit = this.idOnOrbit();
  _o.classificationMarking = this.classificationMarking();
  _o.satNo = this.satNo();
  _o.commonName = this.commonName();
  _o.constellation = this.constellation();
  _o.intlDes = this.intlDes();
  _o.launchDate = this.launchDate();
  _o.decayDate = this.decayDate();
  _o.objectType = this.objectType();
  _o.origin = this.origin();
  _o.missionNumber = this.missionNumber();
  _o.category = this.category();
  _o.lifetimeYears = this.lifetimeYears();
  _o.altName = this.altName();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.source = this.source();
  _o.dataMode = this.dataMode();
  _o.launchSiteId = this.launchSiteId();
  _o.antennas = this.bb!.createScalarList<string>(this.antennas.bind(this), this.antennas_Length());
  _o.batteries = this.bb!.createScalarList<string>(this.batteries.bind(this), this.batteries_Length());
  _o.solarArrays = this.bb!.createScalarList<string>(this.solarArrays.bind(this), this.solarArrays_Length());
  _o.thrusters = this.bb!.createScalarList<string>(this.thrusters.bind(this), this.thrusters_Length());
  _o.onorbitDetails = this.bb!.createScalarList<string>(this.onorbitDetails.bind(this), this.onorbitDetails_Length());
  _o.countryCode = this.countryCode();
  _o.origNetwork = this.origNetwork();
}
}

export class OnorbitT implements flatbuffers.IGeneratedObject {
constructor(
  public idOnOrbit: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public satNo: number = 0,
  public commonName: string|Uint8Array|null = null,
  public constellation: string|Uint8Array|null = null,
  public intlDes: string|Uint8Array|null = null,
  public launchDate: string|Uint8Array|null = null,
  public decayDate: string|Uint8Array|null = null,
  public objectType: Onorbit_objectType_Enum = Onorbit_objectType_Enum.ROCKET_BODY,
  public origin: string|Uint8Array|null = null,
  public missionNumber: string|Uint8Array|null = null,
  public category: Onorbit_category_Enum = Onorbit_category_Enum.UNKNOWN,
  public lifetimeYears: number = 0,
  public altName: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public dataMode: Onorbit_dataMode_Enum = Onorbit_dataMode_Enum.REAL,
  public launchSiteId: string|Uint8Array|null = null,
  public antennas: (string)[] = [],
  public batteries: (string)[] = [],
  public solarArrays: (string)[] = [],
  public thrusters: (string)[] = [],
  public onorbitDetails: (string)[] = [],
  public countryCode: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const commonName = (this.commonName !== null ? builder.createString(this.commonName!) : 0);
  const constellation = (this.constellation !== null ? builder.createString(this.constellation!) : 0);
  const intlDes = (this.intlDes !== null ? builder.createString(this.intlDes!) : 0);
  const launchDate = (this.launchDate !== null ? builder.createString(this.launchDate!) : 0);
  const decayDate = (this.decayDate !== null ? builder.createString(this.decayDate!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const missionNumber = (this.missionNumber !== null ? builder.createString(this.missionNumber!) : 0);
  const altName = (this.altName !== null ? builder.createString(this.altName!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const launchSiteId = (this.launchSiteId !== null ? builder.createString(this.launchSiteId!) : 0);
  const antennas = Onorbit.createAntennasVector(builder, builder.createObjectOffsetList(this.antennas));
  const batteries = Onorbit.createBatteriesVector(builder, builder.createObjectOffsetList(this.batteries));
  const solarArrays = Onorbit.createSolarArraysVector(builder, builder.createObjectOffsetList(this.solarArrays));
  const thrusters = Onorbit.createThrustersVector(builder, builder.createObjectOffsetList(this.thrusters));
  const onorbitDetails = Onorbit.createOnorbitDetailsVector(builder, builder.createObjectOffsetList(this.onorbitDetails));
  const countryCode = (this.countryCode !== null ? builder.createString(this.countryCode!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Onorbit.createOnorbit(builder,
    idOnOrbit,
    classificationMarking,
    this.satNo,
    commonName,
    constellation,
    intlDes,
    launchDate,
    decayDate,
    this.objectType,
    origin,
    missionNumber,
    this.category,
    this.lifetimeYears,
    altName,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    source,
    this.dataMode,
    launchSiteId,
    antennas,
    batteries,
    solarArrays,
    thrusters,
    onorbitDetails,
    countryCode,
    origNetwork
  );
}
}
