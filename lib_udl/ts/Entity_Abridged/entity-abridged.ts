// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Entity_Abridged_dataMode_Enum } from './entity-abridged-data-mode-enum.js';
import { Entity_Abridged_ownerType_Enum } from './entity-abridged-owner-type-enum.js';
import { Entity_Abridged_type_Enum } from './entity-abridged-type-enum.js';


/**
 * /// An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.
 */
export class Entity_Abridged implements flatbuffers.IUnpackableObject<Entity_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Entity_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEntity_Abridged(bb:flatbuffers.ByteBuffer, obj?:Entity_Abridged):Entity_Abridged {
  return (obj || new Entity_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEntity_Abridged(bb:flatbuffers.ByteBuffer, obj?:Entity_Abridged):Entity_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Entity_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ENTI');
}

/**
 * Unique identifier of the record.
 * Example: /// Example: ENTITY-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idEntity():string|null
idEntity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idEntity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique entity name.
 * Example: /// Example: Example name
 * Constraints: Minimum length = 1, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
 * Example: /// Example: ONORBIT
 * Constraints: Minimum length = 1, Maximum length = 45
 */
type():Entity_Abridged_type_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Entity_Abridged_type_Enum.AIRCRAFT;
}

/**
 * Unique identifier of the entity location, if terrestrial/fixed.
 * Example: /// Example: LOCATION-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idLocation():string|null
idLocation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idLocation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
 * Example: /// Example: US
 * Constraints: Minimum length = 0, Maximum length = 4
 */
countryCode():string|null
countryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).
 * Example: /// Example: Commercial
 * Constraints: Minimum length = 0, Maximum length = 32
 */
ownerType():Entity_Abridged_ownerType_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Entity_Abridged_ownerType_Enum.COMMERCIAL;
}

/**
 * Boolean indicating if this entity is taskable.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
taskable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Entity_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Entity_Abridged_dataMode_Enum.REAL;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
location():string|null
location(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
location(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
onOrbit():string|null
onOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
onOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the associated operating unit object.
 * Example: /// Example: OPERATINGUNIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOperatingUnit():string|null
idOperatingUnit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOperatingUnit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEntity_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(18);
}

static addIdEntity(builder:flatbuffers.Builder, idEntityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idEntityOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:Entity_Abridged_type_Enum) {
  builder.addFieldInt8(3, type, Entity_Abridged_type_Enum.AIRCRAFT);
}

static addIdLocation(builder:flatbuffers.Builder, idLocationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idLocationOffset, 0);
}

static addCountryCode(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, countryCodeOffset, 0);
}

static addOwnerType(builder:flatbuffers.Builder, ownerType:Entity_Abridged_ownerType_Enum) {
  builder.addFieldInt8(6, ownerType, Entity_Abridged_ownerType_Enum.COMMERCIAL);
}

static addTaskable(builder:flatbuffers.Builder, taskable:boolean) {
  builder.addFieldInt8(7, +taskable, +false);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Entity_Abridged_dataMode_Enum) {
  builder.addFieldInt8(12, dataMode, Entity_Abridged_dataMode_Enum.REAL);
}

static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, locationOffset, 0);
}

static addOnOrbit(builder:flatbuffers.Builder, onOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, onOrbitOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, idOnOrbitOffset, 0);
}

static addIdOperatingUnit(builder:flatbuffers.Builder, idOperatingUnitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, idOperatingUnitOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, origNetworkOffset, 0);
}

static endEntity_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEntity_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ENTI');
}

static finishSizePrefixedEntity_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ENTI', true);
}

static createEntity_Abridged(builder:flatbuffers.Builder, idEntityOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, type:Entity_Abridged_type_Enum, idLocationOffset:flatbuffers.Offset, countryCodeOffset:flatbuffers.Offset, ownerType:Entity_Abridged_ownerType_Enum, taskable:boolean, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:Entity_Abridged_dataMode_Enum, locationOffset:flatbuffers.Offset, onOrbitOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, idOperatingUnitOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  Entity_Abridged.startEntity_Abridged(builder);
  Entity_Abridged.addIdEntity(builder, idEntityOffset);
  Entity_Abridged.addName(builder, nameOffset);
  Entity_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  Entity_Abridged.addType(builder, type);
  Entity_Abridged.addIdLocation(builder, idLocationOffset);
  Entity_Abridged.addCountryCode(builder, countryCodeOffset);
  Entity_Abridged.addOwnerType(builder, ownerType);
  Entity_Abridged.addTaskable(builder, taskable);
  Entity_Abridged.addCreatedAt(builder, createdAtOffset);
  Entity_Abridged.addCreatedBy(builder, createdByOffset);
  Entity_Abridged.addSource(builder, sourceOffset);
  Entity_Abridged.addOrigin(builder, originOffset);
  Entity_Abridged.addDataMode(builder, dataMode);
  Entity_Abridged.addLocation(builder, locationOffset);
  Entity_Abridged.addOnOrbit(builder, onOrbitOffset);
  Entity_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
  Entity_Abridged.addIdOperatingUnit(builder, idOperatingUnitOffset);
  Entity_Abridged.addOrigNetwork(builder, origNetworkOffset);
  return Entity_Abridged.endEntity_Abridged(builder);
}

unpack(): Entity_AbridgedT {
  return new Entity_AbridgedT(
    this.idEntity(),
    this.name(),
    this.classificationMarking(),
    this.type(),
    this.idLocation(),
    this.countryCode(),
    this.ownerType(),
    this.taskable(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.location(),
    this.onOrbit(),
    this.idOnOrbit(),
    this.idOperatingUnit(),
    this.origNetwork()
  );
}


unpackTo(_o: Entity_AbridgedT): void {
  _o.idEntity = this.idEntity();
  _o.name = this.name();
  _o.classificationMarking = this.classificationMarking();
  _o.type = this.type();
  _o.idLocation = this.idLocation();
  _o.countryCode = this.countryCode();
  _o.ownerType = this.ownerType();
  _o.taskable = this.taskable();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.location = this.location();
  _o.onOrbit = this.onOrbit();
  _o.idOnOrbit = this.idOnOrbit();
  _o.idOperatingUnit = this.idOperatingUnit();
  _o.origNetwork = this.origNetwork();
}
}

export class Entity_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public idEntity: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public type: Entity_Abridged_type_Enum = Entity_Abridged_type_Enum.AIRCRAFT,
  public idLocation: string|Uint8Array|null = null,
  public countryCode: string|Uint8Array|null = null,
  public ownerType: Entity_Abridged_ownerType_Enum = Entity_Abridged_ownerType_Enum.COMMERCIAL,
  public taskable: boolean = false,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: Entity_Abridged_dataMode_Enum = Entity_Abridged_dataMode_Enum.REAL,
  public location: string|Uint8Array|null = null,
  public onOrbit: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public idOperatingUnit: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const idEntity = (this.idEntity !== null ? builder.createString(this.idEntity!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idLocation = (this.idLocation !== null ? builder.createString(this.idLocation!) : 0);
  const countryCode = (this.countryCode !== null ? builder.createString(this.countryCode!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const location = (this.location !== null ? builder.createString(this.location!) : 0);
  const onOrbit = (this.onOrbit !== null ? builder.createString(this.onOrbit!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const idOperatingUnit = (this.idOperatingUnit !== null ? builder.createString(this.idOperatingUnit!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Entity_Abridged.createEntity_Abridged(builder,
    idEntity,
    name,
    classificationMarking,
    this.type,
    idLocation,
    countryCode,
    this.ownerType,
    this.taskable,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    location,
    onOrbit,
    idOnOrbit,
    idOperatingUnit,
    origNetwork
  );
}
}
