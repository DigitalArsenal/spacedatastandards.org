// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Schema for the CotChatData to post.
 */
export class CotChatData_Ingest implements flatbuffers.IUnpackableObject<CotChatData_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CotChatData_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCotChatData_Ingest(bb:flatbuffers.ByteBuffer, obj?:CotChatData_Ingest):CotChatData_Ingest {
  return (obj || new CotChatData_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCotChatData_Ingest(bb:flatbuffers.ByteBuffer, obj?:CotChatData_Ingest):CotChatData_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CotChatData_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('COTC');
}

/**
 * Chat room name to send chat message to.
 * Example: /// Example: All Chat Rooms
 * Constraints: No constraints specified.
 */
chatRoom():string|null
chatRoom(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chatRoom(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Callsign of chat sender.
 * Example: /// Example: Pebble
 * Constraints: No constraints specified.
 */
chatSenderCallSign():string|null
chatSenderCallSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chatSenderCallSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Contents of a chat message.
 * Example: /// Example: Mission is go
 * Constraints: No constraints specified.
 */
chatMsg():string|null
chatMsg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chatMsg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startCotChatData_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addChatRoom(builder:flatbuffers.Builder, chatRoomOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, chatRoomOffset, 0);
}

static addChatSenderCallSign(builder:flatbuffers.Builder, chatSenderCallSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, chatSenderCallSignOffset, 0);
}

static addChatMsg(builder:flatbuffers.Builder, chatMsgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, chatMsgOffset, 0);
}

static endCotChatData_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCotChatData_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'COTC');
}

static finishSizePrefixedCotChatData_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'COTC', true);
}

static createCotChatData_Ingest(builder:flatbuffers.Builder, chatRoomOffset:flatbuffers.Offset, chatSenderCallSignOffset:flatbuffers.Offset, chatMsgOffset:flatbuffers.Offset):flatbuffers.Offset {
  CotChatData_Ingest.startCotChatData_Ingest(builder);
  CotChatData_Ingest.addChatRoom(builder, chatRoomOffset);
  CotChatData_Ingest.addChatSenderCallSign(builder, chatSenderCallSignOffset);
  CotChatData_Ingest.addChatMsg(builder, chatMsgOffset);
  return CotChatData_Ingest.endCotChatData_Ingest(builder);
}

unpack(): CotChatData_IngestT {
  return new CotChatData_IngestT(
    this.chatRoom(),
    this.chatSenderCallSign(),
    this.chatMsg()
  );
}


unpackTo(_o: CotChatData_IngestT): void {
  _o.chatRoom = this.chatRoom();
  _o.chatSenderCallSign = this.chatSenderCallSign();
  _o.chatMsg = this.chatMsg();
}
}

export class CotChatData_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public chatRoom: string|Uint8Array|null = null,
  public chatSenderCallSign: string|Uint8Array|null = null,
  public chatMsg: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const chatRoom = (this.chatRoom !== null ? builder.createString(this.chatRoom!) : 0);
  const chatSenderCallSign = (this.chatSenderCallSign !== null ? builder.createString(this.chatSenderCallSign!) : 0);
  const chatMsg = (this.chatMsg !== null ? builder.createString(this.chatMsg!) : 0);

  return CotChatData_Ingest.createCotChatData_Ingest(builder,
    chatRoom,
    chatSenderCallSign,
    chatMsg
  );
}
}
