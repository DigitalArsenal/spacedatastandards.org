// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// High priority time windows.
 */
export class ISRCollectionCriticalTimes_Ingest implements flatbuffers.IUnpackableObject<ISRCollectionCriticalTimes_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ISRCollectionCriticalTimes_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsISRCollectionCriticalTimes_Ingest(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionCriticalTimes_Ingest):ISRCollectionCriticalTimes_Ingest {
  return (obj || new ISRCollectionCriticalTimes_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsISRCollectionCriticalTimes_Ingest(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionCriticalTimes_Ingest):ISRCollectionCriticalTimes_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ISRCollectionCriticalTimes_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ISRC');
}

/**
 * Critical start time to collect an image for this requirement.
 * Example: /// Example: 2021-01-19T01:01:15.001Z
 * Constraints: No constraints specified.
 */
earliestImagingTime():string|null
earliestImagingTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
earliestImagingTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Critical stop time to collect an image for this requirement.
 * Example: /// Example: 2021-01-19T01:11:15.001Z
 * Constraints: No constraints specified.
 */
latestImagingTime():string|null
latestImagingTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
latestImagingTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startISRCollectionCriticalTimes_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addEarliestImagingTime(builder:flatbuffers.Builder, earliestImagingTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, earliestImagingTimeOffset, 0);
}

static addLatestImagingTime(builder:flatbuffers.Builder, latestImagingTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, latestImagingTimeOffset, 0);
}

static endISRCollectionCriticalTimes_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishISRCollectionCriticalTimes_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC');
}

static finishSizePrefixedISRCollectionCriticalTimes_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC', true);
}

static createISRCollectionCriticalTimes_Ingest(builder:flatbuffers.Builder, earliestImagingTimeOffset:flatbuffers.Offset, latestImagingTimeOffset:flatbuffers.Offset):flatbuffers.Offset {
  ISRCollectionCriticalTimes_Ingest.startISRCollectionCriticalTimes_Ingest(builder);
  ISRCollectionCriticalTimes_Ingest.addEarliestImagingTime(builder, earliestImagingTimeOffset);
  ISRCollectionCriticalTimes_Ingest.addLatestImagingTime(builder, latestImagingTimeOffset);
  return ISRCollectionCriticalTimes_Ingest.endISRCollectionCriticalTimes_Ingest(builder);
}

unpack(): ISRCollectionCriticalTimes_IngestT {
  return new ISRCollectionCriticalTimes_IngestT(
    this.earliestImagingTime(),
    this.latestImagingTime()
  );
}


unpackTo(_o: ISRCollectionCriticalTimes_IngestT): void {
  _o.earliestImagingTime = this.earliestImagingTime();
  _o.latestImagingTime = this.latestImagingTime();
}
}

export class ISRCollectionCriticalTimes_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public earliestImagingTime: string|Uint8Array|null = null,
  public latestImagingTime: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const earliestImagingTime = (this.earliestImagingTime !== null ? builder.createString(this.earliestImagingTime!) : 0);
  const latestImagingTime = (this.latestImagingTime !== null ? builder.createString(this.latestImagingTime!) : 0);

  return ISRCollectionCriticalTimes_Ingest.createISRCollectionCriticalTimes_Ingest(builder,
    earliestImagingTime,
    latestImagingTime
  );
}
}
