// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection that specifies the naval flight operations for this ATO.
 */
export class NavalFlightOperations_Ingest implements flatbuffers.IUnpackableObject<NavalFlightOperations_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NavalFlightOperations_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNavalFlightOperations_Ingest(bb:flatbuffers.ByteBuffer, obj?:NavalFlightOperations_Ingest):NavalFlightOperations_Ingest {
  return (obj || new NavalFlightOperations_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNavalFlightOperations_Ingest(bb:flatbuffers.ByteBuffer, obj?:NavalFlightOperations_Ingest):NavalFlightOperations_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NavalFlightOperations_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('NAVA');
}

/**
 * The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
 * Example: /// Example: USS WASP
 * Constraints: Minimum length = 1, Maximum length = 48
 */
shipName():string|null
shipName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shipName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time when flight operations begin in ISO8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-02-25T12:00:00.123Z
 * Constraints: No constraints specified.
 */
fltOpStart():string|null
fltOpStart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fltOpStart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time when flight operations end in ISO8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-02-25T12:00:00.123Z
 * Constraints: No constraints specified.
 */
fltOpStop():string|null
fltOpStop(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fltOpStop(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * An array of times at which an aircraft will be launched and/or recovered in ISO8601 UTC format with millisecond precision.
 * Example: /// Example: ['2021-02-25T12:00:00.123Z']
 * Constraints: No constraints specified.
 */
schdLaunchRcvyTime(index: number):string
schdLaunchRcvyTime(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
schdLaunchRcvyTime(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

schdLaunchRcvyTimeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startNavalFlightOperations_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addShipName(builder:flatbuffers.Builder, shipNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, shipNameOffset, 0);
}

static addFltOpStart(builder:flatbuffers.Builder, fltOpStartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, fltOpStartOffset, 0);
}

static addFltOpStop(builder:flatbuffers.Builder, fltOpStopOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, fltOpStopOffset, 0);
}

static addSchdLaunchRcvyTime(builder:flatbuffers.Builder, schdLaunchRcvyTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, schdLaunchRcvyTimeOffset, 0);
}

static createSchdLaunchRcvyTimeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSchdLaunchRcvyTimeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endNavalFlightOperations_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishNavalFlightOperations_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'NAVA');
}

static finishSizePrefixedNavalFlightOperations_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'NAVA', true);
}

static createNavalFlightOperations_Ingest(builder:flatbuffers.Builder, shipNameOffset:flatbuffers.Offset, fltOpStartOffset:flatbuffers.Offset, fltOpStopOffset:flatbuffers.Offset, schdLaunchRcvyTimeOffset:flatbuffers.Offset):flatbuffers.Offset {
  NavalFlightOperations_Ingest.startNavalFlightOperations_Ingest(builder);
  NavalFlightOperations_Ingest.addShipName(builder, shipNameOffset);
  NavalFlightOperations_Ingest.addFltOpStart(builder, fltOpStartOffset);
  NavalFlightOperations_Ingest.addFltOpStop(builder, fltOpStopOffset);
  NavalFlightOperations_Ingest.addSchdLaunchRcvyTime(builder, schdLaunchRcvyTimeOffset);
  return NavalFlightOperations_Ingest.endNavalFlightOperations_Ingest(builder);
}

unpack(): NavalFlightOperations_IngestT {
  return new NavalFlightOperations_IngestT(
    this.shipName(),
    this.fltOpStart(),
    this.fltOpStop(),
    this.bb!.createScalarList<string>(this.schdLaunchRcvyTime.bind(this), this.schdLaunchRcvyTime_Length())
  );
}


unpackTo(_o: NavalFlightOperations_IngestT): void {
  _o.shipName = this.shipName();
  _o.fltOpStart = this.fltOpStart();
  _o.fltOpStop = this.fltOpStop();
  _o.schdLaunchRcvyTime = this.bb!.createScalarList<string>(this.schdLaunchRcvyTime.bind(this), this.schdLaunchRcvyTime_Length());
}
}

export class NavalFlightOperations_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public shipName: string|Uint8Array|null = null,
  public fltOpStart: string|Uint8Array|null = null,
  public fltOpStop: string|Uint8Array|null = null,
  public schdLaunchRcvyTime: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const shipName = (this.shipName !== null ? builder.createString(this.shipName!) : 0);
  const fltOpStart = (this.fltOpStart !== null ? builder.createString(this.fltOpStart!) : 0);
  const fltOpStop = (this.fltOpStop !== null ? builder.createString(this.fltOpStop!) : 0);
  const schdLaunchRcvyTime = NavalFlightOperations_Ingest.createSchdLaunchRcvyTimeVector(builder, builder.createObjectOffsetList(this.schdLaunchRcvyTime));

  return NavalFlightOperations_Ingest.createNavalFlightOperations_Ingest(builder,
    shipName,
    fltOpStart,
    fltOpStop,
    schdLaunchRcvyTime
  );
}
}
