// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OnorbitThrusterStatus_Full_dataMode_Enum } from './OnorbitThrusterStatus_Full_dataMode_Enum.js';


/**
 * /// Status information for OnorbitThruster objects.
 */
export class OnorbitThrusterStatus_Full implements flatbuffers.IUnpackableObject<OnorbitThrusterStatus_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OnorbitThrusterStatus_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOnorbitThrusterStatus_Full(bb:flatbuffers.ByteBuffer, obj?:OnorbitThrusterStatus_Full):OnorbitThrusterStatus_Full {
  return (obj || new OnorbitThrusterStatus_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOnorbitThrusterStatus_Full(bb:flatbuffers.ByteBuffer, obj?:OnorbitThrusterStatus_Full):OnorbitThrusterStatus_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OnorbitThrusterStatus_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ONOR');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: af103c-1f917dc-002c1bd
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
 * Example: /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idOnorbitThruster():string|null
idOnorbitThruster(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnorbitThruster(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of this thruster.
 * Example: /// Example: REA1
 * Constraints: Minimum length = 0, Maximum length = 32
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
 * Example: /// Example: 2024-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
statusTime():string|null
statusTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
statusTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Minimum available propellant mass for this thruster's type, in kilograms.
 * Example: /// Example: 0.1
 * Constraints: No constraints specified.
 */
propMassMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average available propellant mass for this thruster's type, in kilograms.
 * Example: /// Example: 907.6
 * Constraints: No constraints specified.
 */
propMassAvg():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Median available propellant mass for this thruster's type, in kilograms.
 * Example: /// Example: 200.1
 * Constraints: No constraints specified.
 */
propMassMedian():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum available propellant mass for this thruster's type, in kilograms.
 * Example: /// Example: 2333.3
 * Constraints: No constraints specified.
 */
propMassMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total fuel mass available for this thruster's type, in kilograms.
 * Example: /// Example: 100.1
 * Constraints: No constraints specified.
 */
fuelMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * 1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
fuelMassUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total delta-velocity available for this thruster's type, in meters per second.
 * Example: /// Example: 100.1
 * Constraints: No constraints specified.
 */
totalDeltaV():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum available delta-velocity for this thruster, in meters per second.
 * Example: /// Example: 0.1
 * Constraints: No constraints specified.
 */
minDeltaV():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Estimated available delta-velocity for this thruster, in meters per second.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
estDeltaV():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum available delta-velocity for this thruster, in meters per second.
 * Example: /// Example: 100.1
 * Constraints: No constraints specified.
 */
maxDeltaV():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum available thrust for this thruster, in newtons.
 * Example: /// Example: 22.1
 * Constraints: No constraints specified.
 */
thrustMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Specific impulse for this thruster, in seconds.
 * Example: /// Example: 300.1
 * Constraints: No constraints specified.
 */
isp():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating if this thruster is operational.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
operational():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():OnorbitThrusterStatus_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OnorbitThrusterStatus_Full_dataMode_Enum.REAL;
}

static startOnorbitThrusterStatus_Full(builder:flatbuffers.Builder) {
  builder.startObject(24);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdOnorbitThruster(builder:flatbuffers.Builder, idOnorbitThrusterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOnorbitThrusterOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addStatusTime(builder:flatbuffers.Builder, statusTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, statusTimeOffset, 0);
}

static addPropMassMin(builder:flatbuffers.Builder, propMassMin:number) {
  builder.addFieldFloat64(5, propMassMin, 0.0);
}

static addPropMassAvg(builder:flatbuffers.Builder, propMassAvg:number) {
  builder.addFieldFloat64(6, propMassAvg, 0.0);
}

static addPropMassMedian(builder:flatbuffers.Builder, propMassMedian:number) {
  builder.addFieldFloat64(7, propMassMedian, 0.0);
}

static addPropMassMax(builder:flatbuffers.Builder, propMassMax:number) {
  builder.addFieldFloat64(8, propMassMax, 0.0);
}

static addFuelMass(builder:flatbuffers.Builder, fuelMass:number) {
  builder.addFieldFloat64(9, fuelMass, 0.0);
}

static addFuelMassUnc(builder:flatbuffers.Builder, fuelMassUnc:number) {
  builder.addFieldFloat64(10, fuelMassUnc, 0.0);
}

static addTotalDeltaV(builder:flatbuffers.Builder, totalDeltaV:number) {
  builder.addFieldFloat64(11, totalDeltaV, 0.0);
}

static addMinDeltaV(builder:flatbuffers.Builder, minDeltaV:number) {
  builder.addFieldFloat64(12, minDeltaV, 0.0);
}

static addEstDeltaV(builder:flatbuffers.Builder, estDeltaV:number) {
  builder.addFieldFloat64(13, estDeltaV, 0.0);
}

static addMaxDeltaV(builder:flatbuffers.Builder, maxDeltaV:number) {
  builder.addFieldFloat64(14, maxDeltaV, 0.0);
}

static addThrustMax(builder:flatbuffers.Builder, thrustMax:number) {
  builder.addFieldFloat64(15, thrustMax, 0.0);
}

static addIsp(builder:flatbuffers.Builder, isp:number) {
  builder.addFieldFloat64(16, isp, 0.0);
}

static addOperational(builder:flatbuffers.Builder, operational:boolean) {
  builder.addFieldInt8(17, +operational, +false);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:OnorbitThrusterStatus_Full_dataMode_Enum) {
  builder.addFieldInt8(23, dataMode, OnorbitThrusterStatus_Full_dataMode_Enum.REAL);
}

static endOnorbitThrusterStatus_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOnorbitThrusterStatus_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ONOR');
}

static finishSizePrefixedOnorbitThrusterStatus_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ONOR', true);
}

static createOnorbitThrusterStatus_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idOnorbitThrusterOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, statusTimeOffset:flatbuffers.Offset, propMassMin:number, propMassAvg:number, propMassMedian:number, propMassMax:number, fuelMass:number, fuelMassUnc:number, totalDeltaV:number, minDeltaV:number, estDeltaV:number, maxDeltaV:number, thrustMax:number, isp:number, operational:boolean, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:OnorbitThrusterStatus_Full_dataMode_Enum):flatbuffers.Offset {
  OnorbitThrusterStatus_Full.startOnorbitThrusterStatus_Full(builder);
  OnorbitThrusterStatus_Full.addId(builder, idOffset);
  OnorbitThrusterStatus_Full.addClassificationMarking(builder, classificationMarkingOffset);
  OnorbitThrusterStatus_Full.addIdOnorbitThruster(builder, idOnorbitThrusterOffset);
  OnorbitThrusterStatus_Full.addName(builder, nameOffset);
  OnorbitThrusterStatus_Full.addStatusTime(builder, statusTimeOffset);
  OnorbitThrusterStatus_Full.addPropMassMin(builder, propMassMin);
  OnorbitThrusterStatus_Full.addPropMassAvg(builder, propMassAvg);
  OnorbitThrusterStatus_Full.addPropMassMedian(builder, propMassMedian);
  OnorbitThrusterStatus_Full.addPropMassMax(builder, propMassMax);
  OnorbitThrusterStatus_Full.addFuelMass(builder, fuelMass);
  OnorbitThrusterStatus_Full.addFuelMassUnc(builder, fuelMassUnc);
  OnorbitThrusterStatus_Full.addTotalDeltaV(builder, totalDeltaV);
  OnorbitThrusterStatus_Full.addMinDeltaV(builder, minDeltaV);
  OnorbitThrusterStatus_Full.addEstDeltaV(builder, estDeltaV);
  OnorbitThrusterStatus_Full.addMaxDeltaV(builder, maxDeltaV);
  OnorbitThrusterStatus_Full.addThrustMax(builder, thrustMax);
  OnorbitThrusterStatus_Full.addIsp(builder, isp);
  OnorbitThrusterStatus_Full.addOperational(builder, operational);
  OnorbitThrusterStatus_Full.addCreatedAt(builder, createdAtOffset);
  OnorbitThrusterStatus_Full.addCreatedBy(builder, createdByOffset);
  OnorbitThrusterStatus_Full.addSource(builder, sourceOffset);
  OnorbitThrusterStatus_Full.addOrigin(builder, originOffset);
  OnorbitThrusterStatus_Full.addOrigNetwork(builder, origNetworkOffset);
  OnorbitThrusterStatus_Full.addDataMode(builder, dataMode);
  return OnorbitThrusterStatus_Full.endOnorbitThrusterStatus_Full(builder);
}

unpack(): OnorbitThrusterStatus_FullT {
  return new OnorbitThrusterStatus_FullT(
    this.id(),
    this.classificationMarking(),
    this.idOnorbitThruster(),
    this.name(),
    this.statusTime(),
    this.propMassMin(),
    this.propMassAvg(),
    this.propMassMedian(),
    this.propMassMax(),
    this.fuelMass(),
    this.fuelMassUnc(),
    this.totalDeltaV(),
    this.minDeltaV(),
    this.estDeltaV(),
    this.maxDeltaV(),
    this.thrustMax(),
    this.isp(),
    this.operational(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: OnorbitThrusterStatus_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idOnorbitThruster = this.idOnorbitThruster();
  _o.name = this.name();
  _o.statusTime = this.statusTime();
  _o.propMassMin = this.propMassMin();
  _o.propMassAvg = this.propMassAvg();
  _o.propMassMedian = this.propMassMedian();
  _o.propMassMax = this.propMassMax();
  _o.fuelMass = this.fuelMass();
  _o.fuelMassUnc = this.fuelMassUnc();
  _o.totalDeltaV = this.totalDeltaV();
  _o.minDeltaV = this.minDeltaV();
  _o.estDeltaV = this.estDeltaV();
  _o.maxDeltaV = this.maxDeltaV();
  _o.thrustMax = this.thrustMax();
  _o.isp = this.isp();
  _o.operational = this.operational();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class OnorbitThrusterStatus_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idOnorbitThruster: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public statusTime: string|Uint8Array|null = null,
  public propMassMin: number = 0.0,
  public propMassAvg: number = 0.0,
  public propMassMedian: number = 0.0,
  public propMassMax: number = 0.0,
  public fuelMass: number = 0.0,
  public fuelMassUnc: number = 0.0,
  public totalDeltaV: number = 0.0,
  public minDeltaV: number = 0.0,
  public estDeltaV: number = 0.0,
  public maxDeltaV: number = 0.0,
  public thrustMax: number = 0.0,
  public isp: number = 0.0,
  public operational: boolean = false,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: OnorbitThrusterStatus_Full_dataMode_Enum = OnorbitThrusterStatus_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idOnorbitThruster = (this.idOnorbitThruster !== null ? builder.createString(this.idOnorbitThruster!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const statusTime = (this.statusTime !== null ? builder.createString(this.statusTime!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return OnorbitThrusterStatus_Full.createOnorbitThrusterStatus_Full(builder,
    id,
    classificationMarking,
    idOnorbitThruster,
    name,
    statusTime,
    this.propMassMin,
    this.propMassAvg,
    this.propMassMedian,
    this.propMassMax,
    this.fuelMass,
    this.fuelMassUnc,
    this.totalDeltaV,
    this.minDeltaV,
    this.estDeltaV,
    this.maxDeltaV,
    this.thrustMax,
    this.isp,
    this.operational,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
