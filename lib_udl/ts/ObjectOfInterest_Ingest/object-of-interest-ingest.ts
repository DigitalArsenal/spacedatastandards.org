// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ObjectOfInterest_Ingest_dataMode_Enum } from './object-of-interest-ingest-data-mode-enum.js';


/**
 * /// OnOrbit objects of interest, which include information about the last known state of the object.
 */
export class ObjectOfInterest_Ingest implements flatbuffers.IUnpackableObject<ObjectOfInterest_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ObjectOfInterest_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsObjectOfInterest_Ingest(bb:flatbuffers.ByteBuffer, obj?:ObjectOfInterest_Ingest):ObjectOfInterest_Ingest {
  return (obj || new ObjectOfInterest_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsObjectOfInterest_Ingest(bb:flatbuffers.ByteBuffer, obj?:ObjectOfInterest_Ingest):ObjectOfInterest_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ObjectOfInterest_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('OBJE');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: OBJECTOFINTEREST-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID of the parent Onorbit record.
 * Example: /// Example: REF-ONORBIT-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/Catalog number of the target on-orbit object.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Unique name of the object of interest event.
 * Example: /// Example: Example_name
 * Constraints: Minimum length = 0, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sensor tasking start time for object of interest.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
sensorTaskingStartTime():string|null
sensorTaskingStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorTaskingStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sensor tasking stop time for object of interest.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
sensorTaskingStopTime():string|null
sensorTaskingStopTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorTaskingStopTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Priority of the object of interest as an integer (1=highest priority).
 * Example: /// Example: 7
 * Constraints: No constraints specified.
 */
priority():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
 * Example: /// Example: OPEN
 * Constraints: Minimum length = 0, Maximum length = 16
 */
status():string|null
status(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
status(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of last status change of the object of interest event.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
statusDate():string|null
statusDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
statusDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the object of interest event.
 * Example: /// Example: Example description
 * Constraints: Minimum length = 0, Maximum length = 256
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Last reported observation time in ISO 8601 UTC time, with microsecond precision.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
lastObTime():string|null
lastObTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastObTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
missedObTime():string|null
missedObTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missedObTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Possible delta V applications for the object of interest, in km/sec.
 * Example: /// Example: [1.1, 2.2, 3.3]
 * Constraints: No constraints specified.
 */
deltaVs(index: number):string
deltaVs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
deltaVs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

deltaVsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Possible delta time applications for the object of interest, in seconds.
 * Example: /// Example: [1.1, 2.2, 3.3]
 * Constraints: No constraints specified.
 */
deltaTs(index: number):string
deltaTs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
deltaTs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

deltaTsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
svEpoch():string|null
svEpoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
svEpoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Last reported x position of the object in km, in J2000 coordinates.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
x():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported y position of the object in km, in J2000 coordinates.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
y():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported z position of the object in km, in J2000 coordinates.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
z():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported x velocity of the object in km/sec, in J2000 coordinates.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
xvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported y velocity of the object in km/sec, in J2000 coordinates.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
yvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported z velocity of the object in km/sec, in J2000 coordinates.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
zvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
elsetEpoch():string|null
elsetEpoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
elsetEpoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
meanMotion():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
eccentricity():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
inclination():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
raan():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
argOfPerigee():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
meanAnomaly():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
revNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
bStar():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
meanMotionDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
meanMotionDdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
semiMajorAxis():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
period():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
apogee():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
perigee():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional array of Onorbit IDs (idOnOrbit) representing satellites potentially affected by this object of interest.
 * Example: /// Example: ['AFFECTEDOBJECT1-ID', 'AFFECTEDOBJECT2-ID']
 * Constraints: No constraints specified.
 */
affectedObjects(index: number):string
affectedObjects(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
affectedObjects(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

affectedObjectsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():ObjectOfInterest_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ObjectOfInterest_Ingest_dataMode_Enum.REAL;
}

static startObjectOfInterest_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(44);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(3, satNo, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, nameOffset, 0);
}

static addSensorTaskingStartTime(builder:flatbuffers.Builder, sensorTaskingStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, sensorTaskingStartTimeOffset, 0);
}

static addSensorTaskingStopTime(builder:flatbuffers.Builder, sensorTaskingStopTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, sensorTaskingStopTimeOffset, 0);
}

static addPriority(builder:flatbuffers.Builder, priority:number) {
  builder.addFieldInt32(7, priority, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, statusOffset, 0);
}

static addStatusDate(builder:flatbuffers.Builder, statusDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, statusDateOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, descriptionOffset, 0);
}

static addLastObTime(builder:flatbuffers.Builder, lastObTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, lastObTimeOffset, 0);
}

static addMissedObTime(builder:flatbuffers.Builder, missedObTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, missedObTimeOffset, 0);
}

static addDeltaVs(builder:flatbuffers.Builder, deltaVsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, deltaVsOffset, 0);
}

static createDeltaVsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDeltaVsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDeltaTs(builder:flatbuffers.Builder, deltaTsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, deltaTsOffset, 0);
}

static createDeltaTsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDeltaTsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSvEpoch(builder:flatbuffers.Builder, svEpochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, svEpochOffset, 0);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat64(16, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat64(17, y, 0.0);
}

static addZ(builder:flatbuffers.Builder, z:number) {
  builder.addFieldFloat64(18, z, 0.0);
}

static addXvel(builder:flatbuffers.Builder, xvel:number) {
  builder.addFieldFloat64(19, xvel, 0.0);
}

static addYvel(builder:flatbuffers.Builder, yvel:number) {
  builder.addFieldFloat64(20, yvel, 0.0);
}

static addZvel(builder:flatbuffers.Builder, zvel:number) {
  builder.addFieldFloat64(21, zvel, 0.0);
}

static addElsetEpoch(builder:flatbuffers.Builder, elsetEpochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, elsetEpochOffset, 0);
}

static addMeanMotion(builder:flatbuffers.Builder, meanMotion:number) {
  builder.addFieldFloat64(23, meanMotion, 0.0);
}

static addEccentricity(builder:flatbuffers.Builder, eccentricity:number) {
  builder.addFieldFloat64(24, eccentricity, 0.0);
}

static addInclination(builder:flatbuffers.Builder, inclination:number) {
  builder.addFieldFloat64(25, inclination, 0.0);
}

static addRaan(builder:flatbuffers.Builder, raan:number) {
  builder.addFieldFloat64(26, raan, 0.0);
}

static addArgOfPerigee(builder:flatbuffers.Builder, argOfPerigee:number) {
  builder.addFieldFloat64(27, argOfPerigee, 0.0);
}

static addMeanAnomaly(builder:flatbuffers.Builder, meanAnomaly:number) {
  builder.addFieldFloat64(28, meanAnomaly, 0.0);
}

static addRevNo(builder:flatbuffers.Builder, revNo:number) {
  builder.addFieldInt32(29, revNo, 0);
}

static addBStar(builder:flatbuffers.Builder, bStar:number) {
  builder.addFieldFloat64(30, bStar, 0.0);
}

static addMeanMotionDot(builder:flatbuffers.Builder, meanMotionDot:number) {
  builder.addFieldFloat64(31, meanMotionDot, 0.0);
}

static addMeanMotionDdot(builder:flatbuffers.Builder, meanMotionDdot:number) {
  builder.addFieldFloat64(32, meanMotionDdot, 0.0);
}

static addSemiMajorAxis(builder:flatbuffers.Builder, semiMajorAxis:number) {
  builder.addFieldFloat64(33, semiMajorAxis, 0.0);
}

static addPeriod(builder:flatbuffers.Builder, period:number) {
  builder.addFieldFloat64(34, period, 0.0);
}

static addApogee(builder:flatbuffers.Builder, apogee:number) {
  builder.addFieldFloat64(35, apogee, 0.0);
}

static addPerigee(builder:flatbuffers.Builder, perigee:number) {
  builder.addFieldFloat64(36, perigee, 0.0);
}

static addAffectedObjects(builder:flatbuffers.Builder, affectedObjectsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, affectedObjectsOffset, 0);
}

static createAffectedObjectsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAffectedObjectsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:ObjectOfInterest_Ingest_dataMode_Enum) {
  builder.addFieldInt8(43, dataMode, ObjectOfInterest_Ingest_dataMode_Enum.REAL);
}

static endObjectOfInterest_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishObjectOfInterest_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'OBJE');
}

static finishSizePrefixedObjectOfInterest_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'OBJE', true);
}

static createObjectOfInterest_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, nameOffset:flatbuffers.Offset, sensorTaskingStartTimeOffset:flatbuffers.Offset, sensorTaskingStopTimeOffset:flatbuffers.Offset, priority:number, statusOffset:flatbuffers.Offset, statusDateOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, lastObTimeOffset:flatbuffers.Offset, missedObTimeOffset:flatbuffers.Offset, deltaVsOffset:flatbuffers.Offset, deltaTsOffset:flatbuffers.Offset, svEpochOffset:flatbuffers.Offset, x:number, y:number, z:number, xvel:number, yvel:number, zvel:number, elsetEpochOffset:flatbuffers.Offset, meanMotion:number, eccentricity:number, inclination:number, raan:number, argOfPerigee:number, meanAnomaly:number, revNo:number, bStar:number, meanMotionDot:number, meanMotionDdot:number, semiMajorAxis:number, period:number, apogee:number, perigee:number, affectedObjectsOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:ObjectOfInterest_Ingest_dataMode_Enum):flatbuffers.Offset {
  ObjectOfInterest_Ingest.startObjectOfInterest_Ingest(builder);
  ObjectOfInterest_Ingest.addId(builder, idOffset);
  ObjectOfInterest_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  ObjectOfInterest_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
  ObjectOfInterest_Ingest.addSatNo(builder, satNo);
  ObjectOfInterest_Ingest.addName(builder, nameOffset);
  ObjectOfInterest_Ingest.addSensorTaskingStartTime(builder, sensorTaskingStartTimeOffset);
  ObjectOfInterest_Ingest.addSensorTaskingStopTime(builder, sensorTaskingStopTimeOffset);
  ObjectOfInterest_Ingest.addPriority(builder, priority);
  ObjectOfInterest_Ingest.addStatus(builder, statusOffset);
  ObjectOfInterest_Ingest.addStatusDate(builder, statusDateOffset);
  ObjectOfInterest_Ingest.addDescription(builder, descriptionOffset);
  ObjectOfInterest_Ingest.addLastObTime(builder, lastObTimeOffset);
  ObjectOfInterest_Ingest.addMissedObTime(builder, missedObTimeOffset);
  ObjectOfInterest_Ingest.addDeltaVs(builder, deltaVsOffset);
  ObjectOfInterest_Ingest.addDeltaTs(builder, deltaTsOffset);
  ObjectOfInterest_Ingest.addSvEpoch(builder, svEpochOffset);
  ObjectOfInterest_Ingest.addX(builder, x);
  ObjectOfInterest_Ingest.addY(builder, y);
  ObjectOfInterest_Ingest.addZ(builder, z);
  ObjectOfInterest_Ingest.addXvel(builder, xvel);
  ObjectOfInterest_Ingest.addYvel(builder, yvel);
  ObjectOfInterest_Ingest.addZvel(builder, zvel);
  ObjectOfInterest_Ingest.addElsetEpoch(builder, elsetEpochOffset);
  ObjectOfInterest_Ingest.addMeanMotion(builder, meanMotion);
  ObjectOfInterest_Ingest.addEccentricity(builder, eccentricity);
  ObjectOfInterest_Ingest.addInclination(builder, inclination);
  ObjectOfInterest_Ingest.addRaan(builder, raan);
  ObjectOfInterest_Ingest.addArgOfPerigee(builder, argOfPerigee);
  ObjectOfInterest_Ingest.addMeanAnomaly(builder, meanAnomaly);
  ObjectOfInterest_Ingest.addRevNo(builder, revNo);
  ObjectOfInterest_Ingest.addBStar(builder, bStar);
  ObjectOfInterest_Ingest.addMeanMotionDot(builder, meanMotionDot);
  ObjectOfInterest_Ingest.addMeanMotionDdot(builder, meanMotionDdot);
  ObjectOfInterest_Ingest.addSemiMajorAxis(builder, semiMajorAxis);
  ObjectOfInterest_Ingest.addPeriod(builder, period);
  ObjectOfInterest_Ingest.addApogee(builder, apogee);
  ObjectOfInterest_Ingest.addPerigee(builder, perigee);
  ObjectOfInterest_Ingest.addAffectedObjects(builder, affectedObjectsOffset);
  ObjectOfInterest_Ingest.addCreatedAt(builder, createdAtOffset);
  ObjectOfInterest_Ingest.addCreatedBy(builder, createdByOffset);
  ObjectOfInterest_Ingest.addSource(builder, sourceOffset);
  ObjectOfInterest_Ingest.addOrigin(builder, originOffset);
  ObjectOfInterest_Ingest.addOrigNetwork(builder, origNetworkOffset);
  ObjectOfInterest_Ingest.addDataMode(builder, dataMode);
  return ObjectOfInterest_Ingest.endObjectOfInterest_Ingest(builder);
}

unpack(): ObjectOfInterest_IngestT {
  return new ObjectOfInterest_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idOnOrbit(),
    this.satNo(),
    this.name(),
    this.sensorTaskingStartTime(),
    this.sensorTaskingStopTime(),
    this.priority(),
    this.status(),
    this.statusDate(),
    this.description(),
    this.lastObTime(),
    this.missedObTime(),
    this.bb!.createScalarList<string>(this.deltaVs.bind(this), this.deltaVs_Length()),
    this.bb!.createScalarList<string>(this.deltaTs.bind(this), this.deltaTs_Length()),
    this.svEpoch(),
    this.x(),
    this.y(),
    this.z(),
    this.xvel(),
    this.yvel(),
    this.zvel(),
    this.elsetEpoch(),
    this.meanMotion(),
    this.eccentricity(),
    this.inclination(),
    this.raan(),
    this.argOfPerigee(),
    this.meanAnomaly(),
    this.revNo(),
    this.bStar(),
    this.meanMotionDot(),
    this.meanMotionDdot(),
    this.semiMajorAxis(),
    this.period(),
    this.apogee(),
    this.perigee(),
    this.bb!.createScalarList<string>(this.affectedObjects.bind(this), this.affectedObjects_Length()),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: ObjectOfInterest_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.name = this.name();
  _o.sensorTaskingStartTime = this.sensorTaskingStartTime();
  _o.sensorTaskingStopTime = this.sensorTaskingStopTime();
  _o.priority = this.priority();
  _o.status = this.status();
  _o.statusDate = this.statusDate();
  _o.description = this.description();
  _o.lastObTime = this.lastObTime();
  _o.missedObTime = this.missedObTime();
  _o.deltaVs = this.bb!.createScalarList<string>(this.deltaVs.bind(this), this.deltaVs_Length());
  _o.deltaTs = this.bb!.createScalarList<string>(this.deltaTs.bind(this), this.deltaTs_Length());
  _o.svEpoch = this.svEpoch();
  _o.x = this.x();
  _o.y = this.y();
  _o.z = this.z();
  _o.xvel = this.xvel();
  _o.yvel = this.yvel();
  _o.zvel = this.zvel();
  _o.elsetEpoch = this.elsetEpoch();
  _o.meanMotion = this.meanMotion();
  _o.eccentricity = this.eccentricity();
  _o.inclination = this.inclination();
  _o.raan = this.raan();
  _o.argOfPerigee = this.argOfPerigee();
  _o.meanAnomaly = this.meanAnomaly();
  _o.revNo = this.revNo();
  _o.bStar = this.bStar();
  _o.meanMotionDot = this.meanMotionDot();
  _o.meanMotionDDot = this.meanMotionDdot();
  _o.semiMajorAxis = this.semiMajorAxis();
  _o.period = this.period();
  _o.apogee = this.apogee();
  _o.perigee = this.perigee();
  _o.affectedObjects = this.bb!.createScalarList<string>(this.affectedObjects.bind(this), this.affectedObjects_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class ObjectOfInterest_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public name: string|Uint8Array|null = null,
  public sensorTaskingStartTime: string|Uint8Array|null = null,
  public sensorTaskingStopTime: string|Uint8Array|null = null,
  public priority: number = 0,
  public status: string|Uint8Array|null = null,
  public statusDate: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public lastObTime: string|Uint8Array|null = null,
  public missedObTime: string|Uint8Array|null = null,
  public deltaVs: (string)[] = [],
  public deltaTs: (string)[] = [],
  public svEpoch: string|Uint8Array|null = null,
  public x: number = 0.0,
  public y: number = 0.0,
  public z: number = 0.0,
  public xvel: number = 0.0,
  public yvel: number = 0.0,
  public zvel: number = 0.0,
  public elsetEpoch: string|Uint8Array|null = null,
  public meanMotion: number = 0.0,
  public eccentricity: number = 0.0,
  public inclination: number = 0.0,
  public raan: number = 0.0,
  public argOfPerigee: number = 0.0,
  public meanAnomaly: number = 0.0,
  public revNo: number = 0,
  public bStar: number = 0.0,
  public meanMotionDot: number = 0.0,
  public meanMotionDDot: number = 0.0,
  public semiMajorAxis: number = 0.0,
  public period: number = 0.0,
  public apogee: number = 0.0,
  public perigee: number = 0.0,
  public affectedObjects: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: ObjectOfInterest_Ingest_dataMode_Enum = ObjectOfInterest_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const sensorTaskingStartTime = (this.sensorTaskingStartTime !== null ? builder.createString(this.sensorTaskingStartTime!) : 0);
  const sensorTaskingStopTime = (this.sensorTaskingStopTime !== null ? builder.createString(this.sensorTaskingStopTime!) : 0);
  const status = (this.status !== null ? builder.createString(this.status!) : 0);
  const statusDate = (this.statusDate !== null ? builder.createString(this.statusDate!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const lastObTime = (this.lastObTime !== null ? builder.createString(this.lastObTime!) : 0);
  const missedObTime = (this.missedObTime !== null ? builder.createString(this.missedObTime!) : 0);
  const deltaVs = ObjectOfInterest_Ingest.createDeltaVsVector(builder, builder.createObjectOffsetList(this.deltaVs));
  const deltaTs = ObjectOfInterest_Ingest.createDeltaTsVector(builder, builder.createObjectOffsetList(this.deltaTs));
  const svEpoch = (this.svEpoch !== null ? builder.createString(this.svEpoch!) : 0);
  const elsetEpoch = (this.elsetEpoch !== null ? builder.createString(this.elsetEpoch!) : 0);
  const affectedObjects = ObjectOfInterest_Ingest.createAffectedObjectsVector(builder, builder.createObjectOffsetList(this.affectedObjects));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return ObjectOfInterest_Ingest.createObjectOfInterest_Ingest(builder,
    id,
    classificationMarking,
    idOnOrbit,
    this.satNo,
    name,
    sensorTaskingStartTime,
    sensorTaskingStopTime,
    this.priority,
    status,
    statusDate,
    description,
    lastObTime,
    missedObTime,
    deltaVs,
    deltaTs,
    svEpoch,
    this.x,
    this.y,
    this.z,
    this.xvel,
    this.yvel,
    this.zvel,
    elsetEpoch,
    this.meanMotion,
    this.eccentricity,
    this.inclination,
    this.raan,
    this.argOfPerigee,
    this.meanAnomaly,
    this.revNo,
    this.bStar,
    this.meanMotionDot,
    this.meanMotionDDot,
    this.semiMajorAxis,
    this.period,
    this.apogee,
    this.perigee,
    affectedObjects,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
