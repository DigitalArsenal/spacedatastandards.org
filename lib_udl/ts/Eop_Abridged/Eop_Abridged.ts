// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Eop_Abridged_dataMode_Enum } from './Eop_Abridged_dataMode_Enum.js';
import { Eop_Abridged_nutationState_Enum } from './Eop_Abridged_nutationState_Enum.js';
import { Eop_Abridged_polarMotionState_Enum } from './Eop_Abridged_polarMotionState_Enum.js';
import { Eop_Abridged_ut1UTCState_Enum } from './Eop_Abridged_ut1UTCState_Enum.js';


/**
 * /// Model representation of Earth Orientation Parameters (EOP) produced by the IERS (International Earth Rotation and Reference Systems Service). Earth Orientation Parameters describe the irregularities of the earth's rotation. Technically, they are the parameters which provide the rotation of the ITRS (International Terrestrial Reference System) to the ICRS (International Celestial Reference System) as a function of time.
 * Universal time -- Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
 * Coordinates of the pole -- x and y are the coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS Reference Pole. The CEP differs from the instantaneous rotation axis by quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the direction 90 degrees West longitude.
 * Celestial pole offsets -- Celestial pole offsets are described in the IAU Precession and Nutation models. The observed differences with respect to the conventional celestial pole position defined by the models are monitored and reported by the IERS.
 * IERS Bulletins A and B provide current information on the Earth's orientation in the IERS Reference System.  This includes Universal Time, coordinates of the terrestrial pole, and celestial pole offsets.  Bulletin A gives an advanced solution updated weekly; the standard solution is given monthly in Bulletin B. Fields suffixed with 'B' are Bulletin B values. All solutions are continuous within their respective uncertainties.  Bulletin A is issued by the IERS Rapid Service/Prediction Centre at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports the latest determinations for polar motion, UT1-UTC, and nutation offsets at daily intervals based on a combination of contributed analysis results using data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging (LLR). Predictions for variations a year into the future are also provided. Meteorological predictions of variations in Atmospheric Angular Momentum (AAM) are used to aid in the prediction of near-term UT1-UTC changes. This publication is prepared by the IERS Rapid Service/Prediction Center.
 */
export class Eop_Abridged implements flatbuffers.IUnpackableObject<Eop_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Eop_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEop_Abridged(bb:flatbuffers.ByteBuffer, obj?:Eop_Abridged):Eop_Abridged {
  return (obj || new Eop_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEop_Abridged(bb:flatbuffers.ByteBuffer, obj?:Eop_Abridged):Eop_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Eop_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EOPA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: EOP-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Effective date/time for the EOP values in ISO8601 UTC format.  The values could be current or predicted.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
eopDate():string|null
eopDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eopDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating Issued (I), or Predicted (P) for this record's polar motion values.
 * Example: /// Example: I
 * Constraints: Minimum length = 0, Maximum length = 1
 */
polarMotionState():Eop_Abridged_polarMotionState_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Eop_Abridged_polarMotionState_Enum.I;
}

/**
 * The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
 * Example: /// Example: 0.182987
 * Constraints: No constraints specified.
 */
polarMotionX():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Estimated uncertainty/error in polarMotionX value in arc seconds.
 * Example: /// Example: 0.000672
 * Constraints: No constraints specified.
 */
polarMotionXunc():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
 * Example: /// Example: 0.168775
 * Constraints: No constraints specified.
 */
polarMotionY():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Estimated uncertainty/error in polarMotionY value in arc seconds.
 * Example: /// Example: 0.000345
 * Constraints: No constraints specified.
 */
polarMotionYunc():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A UT1-UTC values.
 * Example: /// Example: I
 * Constraints: Minimum length = 0, Maximum length = 1
 */
ut1Utcstate():Eop_Abridged_ut1UTCState_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Eop_Abridged_ut1UTCState_Enum.I;
}

/**
 * The difference between the Bulletin A UT1 and UTC time scales as of eopDate in seconds.
 * Example: /// Example: -0.1251659
 * Constraints: No constraints specified.
 */
ut1Utc():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The estimated uncertainty/error in the ut1UTC value in seconds.
 * Example: /// Example: 2.07e-05
 * Constraints: No constraints specified.
 */
ut1Utcunc():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
 * Example: /// Example: 1.8335
 * Constraints: No constraints specified.
 */
lod():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The estimated uncertainty/error in the lod value in seconds.
 * Example: /// Example: 0.0201
 * Constraints: No constraints specified.
 */
lodUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating Issued (I), or Predicted (P) for this record's nutation values (dPSI and dEpsilon).
 * Example: /// Example: I
 * Constraints: Minimum length = 0, Maximum length = 1
 */
nutationState():Eop_Abridged_nutationState_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Eop_Abridged_nutationState_Enum.I;
}

/**
 * The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSI is not used when this record represents IAU 2000 data.
 * Example: /// Example: -10.437
 * Constraints: No constraints specified.
 */
dPsi():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The estimated uncertainty/error in the dPSI value in milliseconds of arc.
 * Example: /// Example: 0.507
 * Constraints: No constraints specified.
 */
dPsiunc():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
 * Example: /// Example: -0.917
 * Constraints: No constraints specified.
 */
dEpsilon():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
 * Example: /// Example: 0.165
 * Constraints: No constraints specified.
 */
dEpsilonUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is not used when this record represents IAU 1980 data.
 * Example: /// Example: -0.086
 * Constraints: No constraints specified.
 */
dX():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of arc.
 * Example: /// Example: 0.202
 * Constraints: No constraints specified.
 */
dXunc():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is not used when this record represents IAU 1980 data.
 * Example: /// Example: 0.13
 * Constraints: No constraints specified.
 */
dY():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of arc.
 * Example: /// Example: 0.165
 * Constraints: No constraints specified.
 */
dYunc():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
 * Example: /// Example: 0.1824
 * Constraints: No constraints specified.
 */
polarMotionXb():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
 * Example: /// Example: 0.1679
 * Constraints: No constraints specified.
 */
polarMotionYb():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Bulletin B difference between the UT1 and UTC time scales as of eopDate in seconds.
 * Example: /// Example: -0.1253
 * Constraints: No constraints specified.
 */
ut1Utcb():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSIB is not used when this record represents IAU 2000 data.
 * Example: /// Example: -9.9
 * Constraints: No constraints specified.
 */
dPsib():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
 * Example: /// Example: -1.7
 * Constraints: No constraints specified.
 */
dEpsilonB():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Bulletin B celestial pole offset along the X-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dXB is not used when this record represents IAU 1980 data.
 * Example: /// Example: 0.129
 * Constraints: No constraints specified.
 */
dXb():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Bulletin B celestial pole offset along the Y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dYB is not used when this record represents IAU 1980 data.
 * Example: /// Example: -0.653
 * Constraints: No constraints specified.
 */
dYb():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The IAU Theory of Precession and Theory of Nutation applied to the data in this record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980 Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of Precession and Nutation.
 * Example: /// Example: IAU1980
 * Constraints: Minimum length = 0, Maximum length = 10
 */
precessionNutationStd():string|null
precessionNutationStd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
precessionNutationStd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: Example URI
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Eop_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Eop_Abridged_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEop_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(37);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addEopDate(builder:flatbuffers.Builder, eopDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, eopDateOffset, 0);
}

static addPolarMotionState(builder:flatbuffers.Builder, polarMotionState:Eop_Abridged_polarMotionState_Enum) {
  builder.addFieldInt8(3, polarMotionState, Eop_Abridged_polarMotionState_Enum.I);
}

static addPolarMotionX(builder:flatbuffers.Builder, polarMotionX:number) {
  builder.addFieldFloat64(4, polarMotionX, 0.0);
}

static addPolarMotionXunc(builder:flatbuffers.Builder, polarMotionXunc:number) {
  builder.addFieldFloat64(5, polarMotionXunc, 0.0);
}

static addPolarMotionY(builder:flatbuffers.Builder, polarMotionY:number) {
  builder.addFieldFloat64(6, polarMotionY, 0.0);
}

static addPolarMotionYunc(builder:flatbuffers.Builder, polarMotionYunc:number) {
  builder.addFieldFloat64(7, polarMotionYunc, 0.0);
}

static addUt1Utcstate(builder:flatbuffers.Builder, ut1Utcstate:Eop_Abridged_ut1UTCState_Enum) {
  builder.addFieldInt8(8, ut1Utcstate, Eop_Abridged_ut1UTCState_Enum.I);
}

static addUt1Utc(builder:flatbuffers.Builder, ut1Utc:number) {
  builder.addFieldFloat64(9, ut1Utc, 0.0);
}

static addUt1Utcunc(builder:flatbuffers.Builder, ut1Utcunc:number) {
  builder.addFieldFloat64(10, ut1Utcunc, 0.0);
}

static addLod(builder:flatbuffers.Builder, lod:number) {
  builder.addFieldFloat64(11, lod, 0.0);
}

static addLodUnc(builder:flatbuffers.Builder, lodUnc:number) {
  builder.addFieldFloat64(12, lodUnc, 0.0);
}

static addNutationState(builder:flatbuffers.Builder, nutationState:Eop_Abridged_nutationState_Enum) {
  builder.addFieldInt8(13, nutationState, Eop_Abridged_nutationState_Enum.I);
}

static addDPsi(builder:flatbuffers.Builder, dPsi:number) {
  builder.addFieldFloat64(14, dPsi, 0.0);
}

static addDPsiunc(builder:flatbuffers.Builder, dPsiunc:number) {
  builder.addFieldFloat64(15, dPsiunc, 0.0);
}

static addDEpsilon(builder:flatbuffers.Builder, dEpsilon:number) {
  builder.addFieldFloat64(16, dEpsilon, 0.0);
}

static addDEpsilonUnc(builder:flatbuffers.Builder, dEpsilonUnc:number) {
  builder.addFieldFloat64(17, dEpsilonUnc, 0.0);
}

static addDX(builder:flatbuffers.Builder, dX:number) {
  builder.addFieldFloat64(18, dX, 0.0);
}

static addDXunc(builder:flatbuffers.Builder, dXunc:number) {
  builder.addFieldFloat64(19, dXunc, 0.0);
}

static addDY(builder:flatbuffers.Builder, dY:number) {
  builder.addFieldFloat64(20, dY, 0.0);
}

static addDYunc(builder:flatbuffers.Builder, dYunc:number) {
  builder.addFieldFloat64(21, dYunc, 0.0);
}

static addPolarMotionXb(builder:flatbuffers.Builder, polarMotionXb:number) {
  builder.addFieldFloat64(22, polarMotionXb, 0.0);
}

static addPolarMotionYb(builder:flatbuffers.Builder, polarMotionYb:number) {
  builder.addFieldFloat64(23, polarMotionYb, 0.0);
}

static addUt1Utcb(builder:flatbuffers.Builder, ut1Utcb:number) {
  builder.addFieldFloat64(24, ut1Utcb, 0.0);
}

static addDPsib(builder:flatbuffers.Builder, dPsib:number) {
  builder.addFieldFloat64(25, dPsib, 0.0);
}

static addDEpsilonB(builder:flatbuffers.Builder, dEpsilonB:number) {
  builder.addFieldFloat64(26, dEpsilonB, 0.0);
}

static addDXb(builder:flatbuffers.Builder, dXb:number) {
  builder.addFieldFloat64(27, dXb, 0.0);
}

static addDYb(builder:flatbuffers.Builder, dYb:number) {
  builder.addFieldFloat64(28, dYb, 0.0);
}

static addPrecessionNutationStd(builder:flatbuffers.Builder, precessionNutationStdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, precessionNutationStdOffset, 0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, rawFileUriOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Eop_Abridged_dataMode_Enum) {
  builder.addFieldInt8(33, dataMode, Eop_Abridged_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, createdByOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, origNetworkOffset, 0);
}

static endEop_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEop_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EOPA');
}

static finishSizePrefixedEop_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EOPA', true);
}

static createEop_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, eopDateOffset:flatbuffers.Offset, polarMotionState:Eop_Abridged_polarMotionState_Enum, polarMotionX:number, polarMotionXunc:number, polarMotionY:number, polarMotionYunc:number, ut1Utcstate:Eop_Abridged_ut1UTCState_Enum, ut1Utc:number, ut1Utcunc:number, lod:number, lodUnc:number, nutationState:Eop_Abridged_nutationState_Enum, dPsi:number, dPsiunc:number, dEpsilon:number, dEpsilonUnc:number, dX:number, dXunc:number, dY:number, dYunc:number, polarMotionXb:number, polarMotionYb:number, ut1Utcb:number, dPsib:number, dEpsilonB:number, dXb:number, dYb:number, precessionNutationStdOffset:flatbuffers.Offset, rawFileUriOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:Eop_Abridged_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  Eop_Abridged.startEop_Abridged(builder);
  Eop_Abridged.addId(builder, idOffset);
  Eop_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  Eop_Abridged.addEopDate(builder, eopDateOffset);
  Eop_Abridged.addPolarMotionState(builder, polarMotionState);
  Eop_Abridged.addPolarMotionX(builder, polarMotionX);
  Eop_Abridged.addPolarMotionXunc(builder, polarMotionXunc);
  Eop_Abridged.addPolarMotionY(builder, polarMotionY);
  Eop_Abridged.addPolarMotionYunc(builder, polarMotionYunc);
  Eop_Abridged.addUt1Utcstate(builder, ut1Utcstate);
  Eop_Abridged.addUt1Utc(builder, ut1Utc);
  Eop_Abridged.addUt1Utcunc(builder, ut1Utcunc);
  Eop_Abridged.addLod(builder, lod);
  Eop_Abridged.addLodUnc(builder, lodUnc);
  Eop_Abridged.addNutationState(builder, nutationState);
  Eop_Abridged.addDPsi(builder, dPsi);
  Eop_Abridged.addDPsiunc(builder, dPsiunc);
  Eop_Abridged.addDEpsilon(builder, dEpsilon);
  Eop_Abridged.addDEpsilonUnc(builder, dEpsilonUnc);
  Eop_Abridged.addDX(builder, dX);
  Eop_Abridged.addDXunc(builder, dXunc);
  Eop_Abridged.addDY(builder, dY);
  Eop_Abridged.addDYunc(builder, dYunc);
  Eop_Abridged.addPolarMotionXb(builder, polarMotionXb);
  Eop_Abridged.addPolarMotionYb(builder, polarMotionYb);
  Eop_Abridged.addUt1Utcb(builder, ut1Utcb);
  Eop_Abridged.addDPsib(builder, dPsib);
  Eop_Abridged.addDEpsilonB(builder, dEpsilonB);
  Eop_Abridged.addDXb(builder, dXb);
  Eop_Abridged.addDYb(builder, dYb);
  Eop_Abridged.addPrecessionNutationStd(builder, precessionNutationStdOffset);
  Eop_Abridged.addRawFileUri(builder, rawFileUriOffset);
  Eop_Abridged.addSource(builder, sourceOffset);
  Eop_Abridged.addOrigin(builder, originOffset);
  Eop_Abridged.addDataMode(builder, dataMode);
  Eop_Abridged.addCreatedAt(builder, createdAtOffset);
  Eop_Abridged.addCreatedBy(builder, createdByOffset);
  Eop_Abridged.addOrigNetwork(builder, origNetworkOffset);
  return Eop_Abridged.endEop_Abridged(builder);
}

unpack(): Eop_AbridgedT {
  return new Eop_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.eopDate(),
    this.polarMotionState(),
    this.polarMotionX(),
    this.polarMotionXunc(),
    this.polarMotionY(),
    this.polarMotionYunc(),
    this.ut1Utcstate(),
    this.ut1Utc(),
    this.ut1Utcunc(),
    this.lod(),
    this.lodUnc(),
    this.nutationState(),
    this.dPsi(),
    this.dPsiunc(),
    this.dEpsilon(),
    this.dEpsilonUnc(),
    this.dX(),
    this.dXunc(),
    this.dY(),
    this.dYunc(),
    this.polarMotionXb(),
    this.polarMotionYb(),
    this.ut1Utcb(),
    this.dPsib(),
    this.dEpsilonB(),
    this.dXb(),
    this.dYb(),
    this.precessionNutationStd(),
    this.rawFileUri(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.origNetwork()
  );
}


unpackTo(_o: Eop_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.eopDate = this.eopDate();
  _o.polarMotionState = this.polarMotionState();
  _o.polarMotionX = this.polarMotionX();
  _o.polarMotionXunc = this.polarMotionXunc();
  _o.polarMotionY = this.polarMotionY();
  _o.polarMotionYunc = this.polarMotionYunc();
  _o.ut1Utcstate = this.ut1Utcstate();
  _o.ut1Utc = this.ut1Utc();
  _o.ut1Utcunc = this.ut1Utcunc();
  _o.lod = this.lod();
  _o.lodUnc = this.lodUnc();
  _o.nutationState = this.nutationState();
  _o.dPsi = this.dPsi();
  _o.dPsiunc = this.dPsiunc();
  _o.dEpsilon = this.dEpsilon();
  _o.dEpsilonUnc = this.dEpsilonUnc();
  _o.dX = this.dX();
  _o.dXunc = this.dXunc();
  _o.dY = this.dY();
  _o.dYunc = this.dYunc();
  _o.polarMotionXb = this.polarMotionXb();
  _o.polarMotionYb = this.polarMotionYb();
  _o.ut1Utcb = this.ut1Utcb();
  _o.dPsib = this.dPsib();
  _o.dEpsilonB = this.dEpsilonB();
  _o.dXb = this.dXb();
  _o.dYb = this.dYb();
  _o.precessionNutationStd = this.precessionNutationStd();
  _o.rawFileUri = this.rawFileUri();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.origNetwork = this.origNetwork();
}
}

export class Eop_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public eopDate: string|Uint8Array|null = null,
  public polarMotionState: Eop_Abridged_polarMotionState_Enum = Eop_Abridged_polarMotionState_Enum.I,
  public polarMotionX: number = 0.0,
  public polarMotionXunc: number = 0.0,
  public polarMotionY: number = 0.0,
  public polarMotionYunc: number = 0.0,
  public ut1Utcstate: Eop_Abridged_ut1UTCState_Enum = Eop_Abridged_ut1UTCState_Enum.I,
  public ut1Utc: number = 0.0,
  public ut1Utcunc: number = 0.0,
  public lod: number = 0.0,
  public lodUnc: number = 0.0,
  public nutationState: Eop_Abridged_nutationState_Enum = Eop_Abridged_nutationState_Enum.I,
  public dPsi: number = 0.0,
  public dPsiunc: number = 0.0,
  public dEpsilon: number = 0.0,
  public dEpsilonUnc: number = 0.0,
  public dX: number = 0.0,
  public dXunc: number = 0.0,
  public dY: number = 0.0,
  public dYunc: number = 0.0,
  public polarMotionXb: number = 0.0,
  public polarMotionYb: number = 0.0,
  public ut1Utcb: number = 0.0,
  public dPsib: number = 0.0,
  public dEpsilonB: number = 0.0,
  public dXb: number = 0.0,
  public dYb: number = 0.0,
  public precessionNutationStd: string|Uint8Array|null = null,
  public rawFileUri: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: Eop_Abridged_dataMode_Enum = Eop_Abridged_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const eopDate = (this.eopDate !== null ? builder.createString(this.eopDate!) : 0);
  const precessionNutationStd = (this.precessionNutationStd !== null ? builder.createString(this.precessionNutationStd!) : 0);
  const rawFileUri = (this.rawFileUri !== null ? builder.createString(this.rawFileUri!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Eop_Abridged.createEop_Abridged(builder,
    id,
    classificationMarking,
    eopDate,
    this.polarMotionState,
    this.polarMotionX,
    this.polarMotionXunc,
    this.polarMotionY,
    this.polarMotionYunc,
    this.ut1Utcstate,
    this.ut1Utc,
    this.ut1Utcunc,
    this.lod,
    this.lodUnc,
    this.nutationState,
    this.dPsi,
    this.dPsiunc,
    this.dEpsilon,
    this.dEpsilonUnc,
    this.dX,
    this.dXunc,
    this.dY,
    this.dYunc,
    this.polarMotionXb,
    this.polarMotionYb,
    this.ut1Utcb,
    this.dPsib,
    this.dEpsilonB,
    this.dXb,
    this.dYb,
    precessionNutationStd,
    rawFileUri,
    source,
    origin,
    this.dataMode,
    createdAt,
    createdBy,
    origNetwork
  );
}
}
