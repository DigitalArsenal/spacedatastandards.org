// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DiffOfArrival_Ingest_dataMode_Enum } from './diff-of-arrival-ingest-data-mode-enum.js';


/**
 * /// Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.
 */
export class DiffOfArrival_Ingest implements flatbuffers.IUnpackableObject<DiffOfArrival_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DiffOfArrival_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDiffOfArrival_Ingest(bb:flatbuffers.ByteBuffer, obj?:DiffOfArrival_Ingest):DiffOfArrival_Ingest {
  return (obj || new DiffOfArrival_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDiffOfArrival_Ingest(bb:flatbuffers.ByteBuffer, obj?:DiffOfArrival_Ingest):DiffOfArrival_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DiffOfArrival_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DIFF');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: DIFFOFARRIVAL-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ob detection time in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
obTime():string|null
obTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the target on-orbit object, if correlated.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sensor ID of the primary/1st sensor used for this measurement.
 * Example: /// Example: SENSOR1-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor1():string|null
idSensor1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sensor ID of the secondary/2nd sensor used for this measurement.
 * Example: /// Example: SENSOR2-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor2():string|null
idSensor2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Catalog number of the target on-orbit object.
 * Example: /// Example: 25544
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier to indicate the specific tasking which produced this observation.
 * Example: /// Example: TASK-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
taskId():string|null
taskId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR1-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId1():string|null
origSensorId1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR2-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId2():string|null
origSensorId2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
uct():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The signal arrival delay relative to sensor 1 in seconds.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
sensor1Delay():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The signal arrival delay relative to sensor 2 in seconds.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
sensor2Delay():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.1
 * Constraints: No constraints specified.
 */
senlat():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 120.1
 * Constraints: No constraints specified.
 */
senlon():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senalt():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
sen2lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
sen2lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
sen2alt():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Center frequency of the collect in Hz.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
frequency():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Bandwidth of the signal in Hz.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
bandwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
deltaRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in delta range, in km.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
deltaRangeUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
deltaRangeRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the delta range rate, in km/sec.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
deltaRangeRateUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Signal to noise ratio, in dB.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
snr():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
tdoa():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
tdoaUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
fdoa():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
fdoaUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
 * Example: /// Example: SURVEY
 * Constraints: Minimum length = 0, Maximum length = 32
 */
collectionMode():string|null
collectionMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collectionMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: No example provided.
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():DiffOfArrival_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DiffOfArrival_Ingest_dataMode_Enum.REAL;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional source-provided and searchable metadata or descriptor of the data.
 * Example: /// Example: Example descriptor
 * Constraints: Minimum length = 0, Maximum length = 64
 */
descriptor():string|null
descriptor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
descriptor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: TRANSACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDiffOfArrival_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(43);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addObTime(builder:flatbuffers.Builder, obTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, obTimeOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idOnOrbitOffset, 0);
}

static addIdSensor1(builder:flatbuffers.Builder, idSensor1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idSensor1Offset, 0);
}

static addIdSensor2(builder:flatbuffers.Builder, idSensor2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idSensor2Offset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(6, satNo, 0);
}

static addTaskId(builder:flatbuffers.Builder, taskIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, taskIdOffset, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, origObjectIdOffset, 0);
}

static addOrigSensorId1(builder:flatbuffers.Builder, origSensorId1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(9, origSensorId1Offset, 0);
}

static addOrigSensorId2(builder:flatbuffers.Builder, origSensorId2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(10, origSensorId2Offset, 0);
}

static addUct(builder:flatbuffers.Builder, uct:boolean) {
  builder.addFieldInt8(11, +uct, +false);
}

static addSensor1Delay(builder:flatbuffers.Builder, sensor1Delay:number) {
  builder.addFieldFloat64(12, sensor1Delay, 0.0);
}

static addSensor2Delay(builder:flatbuffers.Builder, sensor2Delay:number) {
  builder.addFieldFloat64(13, sensor2Delay, 0.0);
}

static addSenlat(builder:flatbuffers.Builder, senlat:number) {
  builder.addFieldFloat64(14, senlat, 0.0);
}

static addSenlon(builder:flatbuffers.Builder, senlon:number) {
  builder.addFieldFloat64(15, senlon, 0.0);
}

static addSenalt(builder:flatbuffers.Builder, senalt:number) {
  builder.addFieldFloat64(16, senalt, 0.0);
}

static addSen2lat(builder:flatbuffers.Builder, sen2lat:number) {
  builder.addFieldFloat64(17, sen2lat, 0.0);
}

static addSen2lon(builder:flatbuffers.Builder, sen2lon:number) {
  builder.addFieldFloat64(18, sen2lon, 0.0);
}

static addSen2alt(builder:flatbuffers.Builder, sen2alt:number) {
  builder.addFieldFloat64(19, sen2alt, 0.0);
}

static addFrequency(builder:flatbuffers.Builder, frequency:number) {
  builder.addFieldFloat64(20, frequency, 0.0);
}

static addBandwidth(builder:flatbuffers.Builder, bandwidth:number) {
  builder.addFieldFloat64(21, bandwidth, 0.0);
}

static addDeltaRange(builder:flatbuffers.Builder, deltaRange:number) {
  builder.addFieldFloat64(22, deltaRange, 0.0);
}

static addDeltaRangeUnc(builder:flatbuffers.Builder, deltaRangeUnc:number) {
  builder.addFieldFloat64(23, deltaRangeUnc, 0.0);
}

static addDeltaRangeRate(builder:flatbuffers.Builder, deltaRangeRate:number) {
  builder.addFieldFloat64(24, deltaRangeRate, 0.0);
}

static addDeltaRangeRateUnc(builder:flatbuffers.Builder, deltaRangeRateUnc:number) {
  builder.addFieldFloat64(25, deltaRangeRateUnc, 0.0);
}

static addSnr(builder:flatbuffers.Builder, snr:number) {
  builder.addFieldFloat64(26, snr, 0.0);
}

static addTdoa(builder:flatbuffers.Builder, tdoa:number) {
  builder.addFieldFloat64(27, tdoa, 0.0);
}

static addTdoaUnc(builder:flatbuffers.Builder, tdoaUnc:number) {
  builder.addFieldFloat64(28, tdoaUnc, 0.0);
}

static addFdoa(builder:flatbuffers.Builder, fdoa:number) {
  builder.addFieldFloat64(29, fdoa, 0.0);
}

static addFdoaUnc(builder:flatbuffers.Builder, fdoaUnc:number) {
  builder.addFieldFloat64(30, fdoaUnc, 0.0);
}

static addCollectionMode(builder:flatbuffers.Builder, collectionModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, collectionModeOffset, 0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, rawFileUriOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, sourceOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:DiffOfArrival_Ingest_dataMode_Enum) {
  builder.addFieldInt8(34, dataMode, DiffOfArrival_Ingest_dataMode_Enum.REAL);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, originOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, createdByOffset, 0);
}

static addDescriptor(builder:flatbuffers.Builder, descriptorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, descriptorOffset, 0);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, transactionIdOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, origNetworkOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, sourceDlOffset, 0);
}

static endDiffOfArrival_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDiffOfArrival_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DIFF');
}

static finishSizePrefixedDiffOfArrival_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DIFF', true);
}

static createDiffOfArrival_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, obTimeOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, idSensor1Offset:flatbuffers.Offset, idSensor2Offset:flatbuffers.Offset, satNo:number, taskIdOffset:flatbuffers.Offset, origObjectIdOffset:flatbuffers.Offset, origSensorId1Offset:flatbuffers.Offset, origSensorId2Offset:flatbuffers.Offset, uct:boolean, sensor1Delay:number, sensor2Delay:number, senlat:number, senlon:number, senalt:number, sen2lat:number, sen2lon:number, sen2alt:number, frequency:number, bandwidth:number, deltaRange:number, deltaRangeUnc:number, deltaRangeRate:number, deltaRangeRateUnc:number, snr:number, tdoa:number, tdoaUnc:number, fdoa:number, fdoaUnc:number, collectionModeOffset:flatbuffers.Offset, rawFileUriOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, dataMode:DiffOfArrival_Ingest_dataMode_Enum, tagsOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, descriptorOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset):flatbuffers.Offset {
  DiffOfArrival_Ingest.startDiffOfArrival_Ingest(builder);
  DiffOfArrival_Ingest.addId(builder, idOffset);
  DiffOfArrival_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  DiffOfArrival_Ingest.addObTime(builder, obTimeOffset);
  DiffOfArrival_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
  DiffOfArrival_Ingest.addIdSensor1(builder, idSensor1Offset);
  DiffOfArrival_Ingest.addIdSensor2(builder, idSensor2Offset);
  DiffOfArrival_Ingest.addSatNo(builder, satNo);
  DiffOfArrival_Ingest.addTaskId(builder, taskIdOffset);
  DiffOfArrival_Ingest.addOrigObjectId(builder, origObjectIdOffset);
  DiffOfArrival_Ingest.addOrigSensorId1(builder, origSensorId1Offset);
  DiffOfArrival_Ingest.addOrigSensorId2(builder, origSensorId2Offset);
  DiffOfArrival_Ingest.addUct(builder, uct);
  DiffOfArrival_Ingest.addSensor1Delay(builder, sensor1Delay);
  DiffOfArrival_Ingest.addSensor2Delay(builder, sensor2Delay);
  DiffOfArrival_Ingest.addSenlat(builder, senlat);
  DiffOfArrival_Ingest.addSenlon(builder, senlon);
  DiffOfArrival_Ingest.addSenalt(builder, senalt);
  DiffOfArrival_Ingest.addSen2lat(builder, sen2lat);
  DiffOfArrival_Ingest.addSen2lon(builder, sen2lon);
  DiffOfArrival_Ingest.addSen2alt(builder, sen2alt);
  DiffOfArrival_Ingest.addFrequency(builder, frequency);
  DiffOfArrival_Ingest.addBandwidth(builder, bandwidth);
  DiffOfArrival_Ingest.addDeltaRange(builder, deltaRange);
  DiffOfArrival_Ingest.addDeltaRangeUnc(builder, deltaRangeUnc);
  DiffOfArrival_Ingest.addDeltaRangeRate(builder, deltaRangeRate);
  DiffOfArrival_Ingest.addDeltaRangeRateUnc(builder, deltaRangeRateUnc);
  DiffOfArrival_Ingest.addSnr(builder, snr);
  DiffOfArrival_Ingest.addTdoa(builder, tdoa);
  DiffOfArrival_Ingest.addTdoaUnc(builder, tdoaUnc);
  DiffOfArrival_Ingest.addFdoa(builder, fdoa);
  DiffOfArrival_Ingest.addFdoaUnc(builder, fdoaUnc);
  DiffOfArrival_Ingest.addCollectionMode(builder, collectionModeOffset);
  DiffOfArrival_Ingest.addRawFileUri(builder, rawFileUriOffset);
  DiffOfArrival_Ingest.addSource(builder, sourceOffset);
  DiffOfArrival_Ingest.addDataMode(builder, dataMode);
  DiffOfArrival_Ingest.addTags(builder, tagsOffset);
  DiffOfArrival_Ingest.addOrigin(builder, originOffset);
  DiffOfArrival_Ingest.addCreatedAt(builder, createdAtOffset);
  DiffOfArrival_Ingest.addCreatedBy(builder, createdByOffset);
  DiffOfArrival_Ingest.addDescriptor(builder, descriptorOffset);
  DiffOfArrival_Ingest.addTransactionId(builder, transactionIdOffset);
  DiffOfArrival_Ingest.addOrigNetwork(builder, origNetworkOffset);
  DiffOfArrival_Ingest.addSourceDl(builder, sourceDlOffset);
  return DiffOfArrival_Ingest.endDiffOfArrival_Ingest(builder);
}

unpack(): DiffOfArrival_IngestT {
  return new DiffOfArrival_IngestT(
    this.id(),
    this.classificationMarking(),
    this.obTime(),
    this.idOnOrbit(),
    this.idSensor1(),
    this.idSensor2(),
    this.satNo(),
    this.taskId(),
    this.origObjectId(),
    this.origSensorId1(),
    this.origSensorId2(),
    this.uct(),
    this.sensor1Delay(),
    this.sensor2Delay(),
    this.senlat(),
    this.senlon(),
    this.senalt(),
    this.sen2lat(),
    this.sen2lon(),
    this.sen2alt(),
    this.frequency(),
    this.bandwidth(),
    this.deltaRange(),
    this.deltaRangeUnc(),
    this.deltaRangeRate(),
    this.deltaRangeRateUnc(),
    this.snr(),
    this.tdoa(),
    this.tdoaUnc(),
    this.fdoa(),
    this.fdoaUnc(),
    this.collectionMode(),
    this.rawFileUri(),
    this.source(),
    this.dataMode(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length()),
    this.origin(),
    this.createdAt(),
    this.createdBy(),
    this.descriptor(),
    this.transactionId(),
    this.origNetwork(),
    this.sourceDl()
  );
}


unpackTo(_o: DiffOfArrival_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.obTime = this.obTime();
  _o.idOnOrbit = this.idOnOrbit();
  _o.idSensor1 = this.idSensor1();
  _o.idSensor2 = this.idSensor2();
  _o.satNo = this.satNo();
  _o.taskId = this.taskId();
  _o.origObjectId = this.origObjectId();
  _o.origSensorId1 = this.origSensorId1();
  _o.origSensorId2 = this.origSensorId2();
  _o.uct = this.uct();
  _o.sensor1Delay = this.sensor1Delay();
  _o.sensor2Delay = this.sensor2Delay();
  _o.senlat = this.senlat();
  _o.senlon = this.senlon();
  _o.senalt = this.senalt();
  _o.sen2lat = this.sen2lat();
  _o.sen2lon = this.sen2lon();
  _o.sen2alt = this.sen2alt();
  _o.frequency = this.frequency();
  _o.bandwidth = this.bandwidth();
  _o.deltaRange = this.deltaRange();
  _o.deltaRangeUnc = this.deltaRangeUnc();
  _o.deltaRangeRate = this.deltaRangeRate();
  _o.deltaRangeRateUnc = this.deltaRangeRateUnc();
  _o.snr = this.snr();
  _o.tdoa = this.tdoa();
  _o.tdoaUnc = this.tdoaUnc();
  _o.fdoa = this.fdoa();
  _o.fdoaUnc = this.fdoaUnc();
  _o.collectionMode = this.collectionMode();
  _o.rawFileURI = this.rawFileUri();
  _o.source = this.source();
  _o.dataMode = this.dataMode();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length());
  _o.origin = this.origin();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.descriptor = this.descriptor();
  _o.transactionId = this.transactionId();
  _o.origNetwork = this.origNetwork();
  _o.sourceDL = this.sourceDl();
}
}

export class DiffOfArrival_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public obTime: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public idSensor1: string|Uint8Array|null = null,
  public idSensor2: string|Uint8Array|null = null,
  public satNo: number = 0,
  public taskId: string|Uint8Array|null = null,
  public origObjectId: string|Uint8Array|null = null,
  public origSensorId1: string|Uint8Array|null = null,
  public origSensorId2: string|Uint8Array|null = null,
  public uct: boolean = false,
  public sensor1Delay: number = 0.0,
  public sensor2Delay: number = 0.0,
  public senlat: number = 0.0,
  public senlon: number = 0.0,
  public senalt: number = 0.0,
  public sen2lat: number = 0.0,
  public sen2lon: number = 0.0,
  public sen2alt: number = 0.0,
  public frequency: number = 0.0,
  public bandwidth: number = 0.0,
  public deltaRange: number = 0.0,
  public deltaRangeUnc: number = 0.0,
  public deltaRangeRate: number = 0.0,
  public deltaRangeRateUnc: number = 0.0,
  public snr: number = 0.0,
  public tdoa: number = 0.0,
  public tdoaUnc: number = 0.0,
  public fdoa: number = 0.0,
  public fdoaUnc: number = 0.0,
  public collectionMode: string|Uint8Array|null = null,
  public rawFileURI: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public dataMode: DiffOfArrival_Ingest_dataMode_Enum = DiffOfArrival_Ingest_dataMode_Enum.REAL,
  public tags: (string)[] = [],
  public origin: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public descriptor: string|Uint8Array|null = null,
  public transactionId: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const obTime = (this.obTime !== null ? builder.createString(this.obTime!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const idSensor1 = (this.idSensor1 !== null ? builder.createString(this.idSensor1!) : 0);
  const idSensor2 = (this.idSensor2 !== null ? builder.createString(this.idSensor2!) : 0);
  const taskId = (this.taskId !== null ? builder.createString(this.taskId!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const origSensorId1 = (this.origSensorId1 !== null ? builder.createString(this.origSensorId1!) : 0);
  const origSensorId2 = (this.origSensorId2 !== null ? builder.createString(this.origSensorId2!) : 0);
  const collectionMode = (this.collectionMode !== null ? builder.createString(this.collectionMode!) : 0);
  const rawFileURI = (this.rawFileURI !== null ? builder.createString(this.rawFileURI!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const tags = DiffOfArrival_Ingest.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const descriptor = (this.descriptor !== null ? builder.createString(this.descriptor!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);

  return DiffOfArrival_Ingest.createDiffOfArrival_Ingest(builder,
    id,
    classificationMarking,
    obTime,
    idOnOrbit,
    idSensor1,
    idSensor2,
    this.satNo,
    taskId,
    origObjectId,
    origSensorId1,
    origSensorId2,
    this.uct,
    this.sensor1Delay,
    this.sensor2Delay,
    this.senlat,
    this.senlon,
    this.senalt,
    this.sen2lat,
    this.sen2lon,
    this.sen2alt,
    this.frequency,
    this.bandwidth,
    this.deltaRange,
    this.deltaRangeUnc,
    this.deltaRangeRate,
    this.deltaRangeRateUnc,
    this.snr,
    this.tdoa,
    this.tdoaUnc,
    this.fdoa,
    this.fdoaUnc,
    collectionMode,
    rawFileURI,
    source,
    this.dataMode,
    tags,
    origin,
    createdAt,
    createdBy,
    descriptor,
    transactionId,
    origNetwork,
    sourceDL
  );
}
}
