// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BeamContour_Full_dataMode_Enum } from './beam-contour-full-data-mode-enum.js';
import { BeamContour_Full_type_Enum } from './beam-contour-full-type-enum.js';


/**
 * /// Describes the beam contour associated with a beam entity. Beam contours are the geographic representation of the relative gain levels of beam power off of the maximum gain boresight points.
 */
export class BeamContour_Full implements flatbuffers.IUnpackableObject<BeamContour_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BeamContour_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBeamContour_Full(bb:flatbuffers.ByteBuffer, obj?:BeamContour_Full):BeamContour_Full {
  return (obj || new BeamContour_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBeamContour_Full(bb:flatbuffers.ByteBuffer, obj?:BeamContour_Full):BeamContour_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BeamContour_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('BEAM');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: BEAMCONTOUR-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the beam.
 * Example: /// Example: REF-BEAM-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idBeam():string|null
idBeam(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idBeam(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).  Boresight refers to the point of maximum/peak gain, and should not be confused with the 'aim point' of the related beam.  Gain contours are regions of  coverage referenced to the relative gain of the related beam.  Service Areas are composed of one or more service regions, with each region being either discrete point(s) or a continuous contour.
 * Example: /// Example: BORESIGHT
 * Constraints: Minimum length = 1, Maximum length = 16
 */
type():BeamContour_Full_type_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BeamContour_Full_type_Enum.BORESIGHT;
}

/**
 * The index number of this contour. The value is required if type = CONTOUR.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
contourIdx():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The relative gain level in dB associated with this boresight or contour.  Gain does not apply to service area records. The value is required if type = BORESIGHT or CONTOUR.
 * Example: /// Example: 17.1
 * Constraints: No constraints specified.
 */
gain():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The region name within the service area.
 * Example: /// Example: Example region name
 * Constraints: Minimum length = 0, Maximum length = 24
 */
regionName():string|null
regionName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
regionName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * GeoJSON or Well Known Text expression of the boresight point, service area point or region, or the gain contour region in geographic longitude, latitude pairs. Boresight and service area point(s) are represented as a 'Point' or 'MultiPoint', service areas and closed gain contours as 'Polygon', and open contours as 'LineString'. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both geographyText and geographyJson fields appropriately. A create request must contain one of the geography, geographyText, or geographyJson.
 * Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
 * Constraints: No constraints specified.
 */
geography():string|null
geography(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geography(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
 * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
 * Constraints: No constraints specified.
 */
geographyText():string|null
geographyText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geographyText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
 * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
 * Constraints: No constraints specified.
 */
geographyJson():string|null
geographyJson(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geographyJson(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of region as projected.
 * Example: /// Example: ST_Polygon
 * Constraints: Minimum length = 0, Maximum length = 128
 */
geographyType():string|null
geographyType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geographyType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of dimensions of the geometry depicted by region.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
geographyNdims():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Geographical spatial_ref_sys for region.
 * Example: /// Example: 4326
 * Constraints: No constraints specified.
 */
geographySrid():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():BeamContour_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BeamContour_Full_dataMode_Enum.REAL;
}

static startBeamContour_Full(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdBeam(builder:flatbuffers.Builder, idBeamOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idBeamOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:BeamContour_Full_type_Enum) {
  builder.addFieldInt8(3, type, BeamContour_Full_type_Enum.BORESIGHT);
}

static addContourIdx(builder:flatbuffers.Builder, contourIdx:number) {
  builder.addFieldInt32(4, contourIdx, 0);
}

static addGain(builder:flatbuffers.Builder, gain:number) {
  builder.addFieldFloat64(5, gain, 0.0);
}

static addRegionName(builder:flatbuffers.Builder, regionNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, regionNameOffset, 0);
}

static addGeography(builder:flatbuffers.Builder, geographyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, geographyOffset, 0);
}

static addGeographyText(builder:flatbuffers.Builder, geographyTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, geographyTextOffset, 0);
}

static addGeographyJson(builder:flatbuffers.Builder, geographyJsonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, geographyJsonOffset, 0);
}

static addGeographyType(builder:flatbuffers.Builder, geographyTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, geographyTypeOffset, 0);
}

static addGeographyNdims(builder:flatbuffers.Builder, geographyNdims:number) {
  builder.addFieldInt32(11, geographyNdims, 0);
}

static addGeographySrid(builder:flatbuffers.Builder, geographySrid:number) {
  builder.addFieldInt32(12, geographySrid, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, updatedByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:BeamContour_Full_dataMode_Enum) {
  builder.addFieldInt8(20, dataMode, BeamContour_Full_dataMode_Enum.REAL);
}

static endBeamContour_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishBeamContour_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'BEAM');
}

static finishSizePrefixedBeamContour_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'BEAM', true);
}

static createBeamContour_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idBeamOffset:flatbuffers.Offset, type:BeamContour_Full_type_Enum, contourIdx:number, gain:number, regionNameOffset:flatbuffers.Offset, geographyOffset:flatbuffers.Offset, geographyTextOffset:flatbuffers.Offset, geographyJsonOffset:flatbuffers.Offset, geographyTypeOffset:flatbuffers.Offset, geographyNdims:number, geographySrid:number, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:BeamContour_Full_dataMode_Enum):flatbuffers.Offset {
  BeamContour_Full.startBeamContour_Full(builder);
  BeamContour_Full.addId(builder, idOffset);
  BeamContour_Full.addClassificationMarking(builder, classificationMarkingOffset);
  BeamContour_Full.addIdBeam(builder, idBeamOffset);
  BeamContour_Full.addType(builder, type);
  BeamContour_Full.addContourIdx(builder, contourIdx);
  BeamContour_Full.addGain(builder, gain);
  BeamContour_Full.addRegionName(builder, regionNameOffset);
  BeamContour_Full.addGeography(builder, geographyOffset);
  BeamContour_Full.addGeographyText(builder, geographyTextOffset);
  BeamContour_Full.addGeographyJson(builder, geographyJsonOffset);
  BeamContour_Full.addGeographyType(builder, geographyTypeOffset);
  BeamContour_Full.addGeographyNdims(builder, geographyNdims);
  BeamContour_Full.addGeographySrid(builder, geographySrid);
  BeamContour_Full.addCreatedAt(builder, createdAtOffset);
  BeamContour_Full.addCreatedBy(builder, createdByOffset);
  BeamContour_Full.addUpdatedAt(builder, updatedAtOffset);
  BeamContour_Full.addUpdatedBy(builder, updatedByOffset);
  BeamContour_Full.addSource(builder, sourceOffset);
  BeamContour_Full.addOrigin(builder, originOffset);
  BeamContour_Full.addOrigNetwork(builder, origNetworkOffset);
  BeamContour_Full.addDataMode(builder, dataMode);
  return BeamContour_Full.endBeamContour_Full(builder);
}

unpack(): BeamContour_FullT {
  return new BeamContour_FullT(
    this.id(),
    this.classificationMarking(),
    this.idBeam(),
    this.type(),
    this.contourIdx(),
    this.gain(),
    this.regionName(),
    this.geography(),
    this.geographyText(),
    this.geographyJson(),
    this.geographyType(),
    this.geographyNdims(),
    this.geographySrid(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: BeamContour_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idBeam = this.idBeam();
  _o.type = this.type();
  _o.contourIdx = this.contourIdx();
  _o.gain = this.gain();
  _o.regionName = this.regionName();
  _o.geography = this.geography();
  _o.geographyText = this.geographyText();
  _o.geographyJson = this.geographyJson();
  _o.geographyType = this.geographyType();
  _o.geographyNdims = this.geographyNdims();
  _o.geographySrid = this.geographySrid();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class BeamContour_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idBeam: string|Uint8Array|null = null,
  public type: BeamContour_Full_type_Enum = BeamContour_Full_type_Enum.BORESIGHT,
  public contourIdx: number = 0,
  public gain: number = 0.0,
  public regionName: string|Uint8Array|null = null,
  public geography: string|Uint8Array|null = null,
  public geographyText: string|Uint8Array|null = null,
  public geographyJson: string|Uint8Array|null = null,
  public geographyType: string|Uint8Array|null = null,
  public geographyNdims: number = 0,
  public geographySrid: number = 0,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: BeamContour_Full_dataMode_Enum = BeamContour_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idBeam = (this.idBeam !== null ? builder.createString(this.idBeam!) : 0);
  const regionName = (this.regionName !== null ? builder.createString(this.regionName!) : 0);
  const geography = (this.geography !== null ? builder.createString(this.geography!) : 0);
  const geographyText = (this.geographyText !== null ? builder.createString(this.geographyText!) : 0);
  const geographyJson = (this.geographyJson !== null ? builder.createString(this.geographyJson!) : 0);
  const geographyType = (this.geographyType !== null ? builder.createString(this.geographyType!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return BeamContour_Full.createBeamContour_Full(builder,
    id,
    classificationMarking,
    idBeam,
    this.type,
    this.contourIdx,
    this.gain,
    regionName,
    geography,
    geographyText,
    geographyJson,
    geographyType,
    this.geographyNdims,
    this.geographySrid,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
