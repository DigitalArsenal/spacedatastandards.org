// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Tasking desired collection requirements.
 */
export class ISRCollectionRequirements_Full implements flatbuffers.IUnpackableObject<ISRCollectionRequirements_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ISRCollectionRequirements_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsISRCollectionRequirements_Full(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionRequirements_Full):ISRCollectionRequirements_Full {
  return (obj || new ISRCollectionRequirements_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsISRCollectionRequirements_Full(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionRequirements_Full):ISRCollectionRequirements_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ISRCollectionRequirements_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ISRC');
}

/**
 * Collection Requirement Unique Identifier.
 * Example: /// Example: ISCRCOLLECTIONREQUIREMENTS
 * Constraints: Minimum length = 0, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Encryption hashing algorithm.
 * Example: /// Example: HASH
 * Constraints: Minimum length = 0, Maximum length = 128
 */
hash():string|null
hash(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hash(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type collection this requirement applies to.
 * Example: /// Example: COLLECTION_TYPE
 * Constraints: Minimum length = 0, Maximum length = 128
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Collection Requirement Unique Identifier.
 * Example: /// Example: CRID
 * Constraints: Minimum length = 0, Maximum length = 256
 */
cridNumbers():string|null
cridNumbers(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cridNumbers(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * 1-n priority for this collection requirement.
 * Example: /// Example: 20.23
 * Constraints: No constraints specified.
 */
priority():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Record id.
 * Example: /// Example: RECORD-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
recordId():string|null
recordId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recordId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Reconnaissance Survey information the operator needs.
 * Example: /// Example: SURVEY_INFO
 * Constraints: Minimum length = 0, Maximum length = 32
 */
reconSurvey():string|null
reconSurvey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reconSurvey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Primary type of intelligence to be collected for this requirement.
 * Example: /// Example: Sig
 * Constraints: Minimum length = 0, Maximum length = 32
 */
intelDiscipline():string|null
intelDiscipline(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
intelDiscipline(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sub category of primary intelligence to be collected for this requirement.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
secondary():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Is this collection requirement an emphasized/critical requirement.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
emphasized():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Is this collection request for the Prism system?.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
isPrismCr():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Start time for this requirement, should be within the mission time window.
 * Example: /// Example: 2021-01-19T01:01:15.001Z
 * Constraints: No constraints specified.
 */
start():string|null
start(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
start(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Stop time for this requirement, should be within the mission time window.
 * Example: /// Example: 2021-01-19T01:20:01.001Z
 * Constraints: No constraints specified.
 */
stop():string|null
stop(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stop(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Human readable name for this operation.
 * Example: /// Example: NAME
 * Constraints: Minimum length = 0, Maximum length = 32
 */
operation():string|null
operation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the military unit that this assigned collection requirement will support.
 * Example: /// Example: UNIT
 * Constraints: Minimum length = 0, Maximum length = 32
 */
supportedUnit():string|null
supportedUnit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
supportedUnit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Country code of the collection requirement. A Country may represent countries, multi-national consortiums, and international organizations.
 * Example: /// Example: COUNTRY_CODE
 * Constraints: Minimum length = 0, Maximum length = 4
 */
country():string|null
country(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
country(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Region of the collection requirement.
 * Example: /// Example: REGION
 * Constraints: Minimum length = 0, Maximum length = 32
 */
region():string|null
region(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
region(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Subregion of the collection requirement.
 * Example: /// Example: SUBREGION
 * Constraints: Minimum length = 0, Maximum length = 32
 */
subregion():string|null
subregion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
subregion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Free text field for the user to specify special instructions needed for this collection.
 * Example: /// Example: TEXT
 * Constraints: Minimum length = 0, Maximum length = 256
 */
specialComGuidance():string|null
specialComGuidance(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
specialComGuidance(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
criticalTimes():string|null
criticalTimes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
criticalTimes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
exploitationRequirement():string|null
exploitationRequirement(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
exploitationRequirement(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of POI Id's for the targets being tasked.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
targetList(index: number):string
targetList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
targetList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

targetListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startISRCollectionRequirements_Full(builder:flatbuffers.Builder) {
  builder.startObject(22);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addHash(builder:flatbuffers.Builder, hashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, hashOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, typeOffset, 0);
}

static addCridNumbers(builder:flatbuffers.Builder, cridNumbersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, cridNumbersOffset, 0);
}

static addPriority(builder:flatbuffers.Builder, priority:number) {
  builder.addFieldFloat64(4, priority, 0.0);
}

static addRecordId(builder:flatbuffers.Builder, recordIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, recordIdOffset, 0);
}

static addReconSurvey(builder:flatbuffers.Builder, reconSurveyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, reconSurveyOffset, 0);
}

static addIntelDiscipline(builder:flatbuffers.Builder, intelDisciplineOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, intelDisciplineOffset, 0);
}

static addSecondary(builder:flatbuffers.Builder, secondary:boolean) {
  builder.addFieldInt8(8, +secondary, +false);
}

static addEmphasized(builder:flatbuffers.Builder, emphasized:boolean) {
  builder.addFieldInt8(9, +emphasized, +false);
}

static addIsPrismCr(builder:flatbuffers.Builder, isPrismCr:boolean) {
  builder.addFieldInt8(10, +isPrismCr, +false);
}

static addStart(builder:flatbuffers.Builder, startOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, startOffset, 0);
}

static addStop(builder:flatbuffers.Builder, stopOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, stopOffset, 0);
}

static addOperation(builder:flatbuffers.Builder, operationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, operationOffset, 0);
}

static addSupportedUnit(builder:flatbuffers.Builder, supportedUnitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, supportedUnitOffset, 0);
}

static addCountry(builder:flatbuffers.Builder, countryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, countryOffset, 0);
}

static addRegion(builder:flatbuffers.Builder, regionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, regionOffset, 0);
}

static addSubregion(builder:flatbuffers.Builder, subregionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, subregionOffset, 0);
}

static addSpecialComGuidance(builder:flatbuffers.Builder, specialComGuidanceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, specialComGuidanceOffset, 0);
}

static addCriticalTimes(builder:flatbuffers.Builder, criticalTimesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, criticalTimesOffset, 0);
}

static addExploitationRequirement(builder:flatbuffers.Builder, exploitationRequirementOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, exploitationRequirementOffset, 0);
}

static addTargetList(builder:flatbuffers.Builder, targetListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, targetListOffset, 0);
}

static createTargetListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTargetListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endISRCollectionRequirements_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishISRCollectionRequirements_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC');
}

static finishSizePrefixedISRCollectionRequirements_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC', true);
}

static createISRCollectionRequirements_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, hashOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, cridNumbersOffset:flatbuffers.Offset, priority:number, recordIdOffset:flatbuffers.Offset, reconSurveyOffset:flatbuffers.Offset, intelDisciplineOffset:flatbuffers.Offset, secondary:boolean, emphasized:boolean, isPrismCr:boolean, startOffset:flatbuffers.Offset, stopOffset:flatbuffers.Offset, operationOffset:flatbuffers.Offset, supportedUnitOffset:flatbuffers.Offset, countryOffset:flatbuffers.Offset, regionOffset:flatbuffers.Offset, subregionOffset:flatbuffers.Offset, specialComGuidanceOffset:flatbuffers.Offset, criticalTimesOffset:flatbuffers.Offset, exploitationRequirementOffset:flatbuffers.Offset, targetListOffset:flatbuffers.Offset):flatbuffers.Offset {
  ISRCollectionRequirements_Full.startISRCollectionRequirements_Full(builder);
  ISRCollectionRequirements_Full.addId(builder, idOffset);
  ISRCollectionRequirements_Full.addHash(builder, hashOffset);
  ISRCollectionRequirements_Full.addType(builder, typeOffset);
  ISRCollectionRequirements_Full.addCridNumbers(builder, cridNumbersOffset);
  ISRCollectionRequirements_Full.addPriority(builder, priority);
  ISRCollectionRequirements_Full.addRecordId(builder, recordIdOffset);
  ISRCollectionRequirements_Full.addReconSurvey(builder, reconSurveyOffset);
  ISRCollectionRequirements_Full.addIntelDiscipline(builder, intelDisciplineOffset);
  ISRCollectionRequirements_Full.addSecondary(builder, secondary);
  ISRCollectionRequirements_Full.addEmphasized(builder, emphasized);
  ISRCollectionRequirements_Full.addIsPrismCr(builder, isPrismCr);
  ISRCollectionRequirements_Full.addStart(builder, startOffset);
  ISRCollectionRequirements_Full.addStop(builder, stopOffset);
  ISRCollectionRequirements_Full.addOperation(builder, operationOffset);
  ISRCollectionRequirements_Full.addSupportedUnit(builder, supportedUnitOffset);
  ISRCollectionRequirements_Full.addCountry(builder, countryOffset);
  ISRCollectionRequirements_Full.addRegion(builder, regionOffset);
  ISRCollectionRequirements_Full.addSubregion(builder, subregionOffset);
  ISRCollectionRequirements_Full.addSpecialComGuidance(builder, specialComGuidanceOffset);
  ISRCollectionRequirements_Full.addCriticalTimes(builder, criticalTimesOffset);
  ISRCollectionRequirements_Full.addExploitationRequirement(builder, exploitationRequirementOffset);
  ISRCollectionRequirements_Full.addTargetList(builder, targetListOffset);
  return ISRCollectionRequirements_Full.endISRCollectionRequirements_Full(builder);
}

unpack(): ISRCollectionRequirements_FullT {
  return new ISRCollectionRequirements_FullT(
    this.id(),
    this.hash(),
    this.type(),
    this.cridNumbers(),
    this.priority(),
    this.recordId(),
    this.reconSurvey(),
    this.intelDiscipline(),
    this.secondary(),
    this.emphasized(),
    this.isPrismCr(),
    this.start(),
    this.stop(),
    this.operation(),
    this.supportedUnit(),
    this.country(),
    this.region(),
    this.subregion(),
    this.specialComGuidance(),
    this.criticalTimes(),
    this.exploitationRequirement(),
    this.bb!.createScalarList<string>(this.targetList.bind(this), this.targetListLength())
  );
}


unpackTo(_o: ISRCollectionRequirements_FullT): void {
  _o.id = this.id();
  _o.hash = this.hash();
  _o.type = this.type();
  _o.cridNumbers = this.cridNumbers();
  _o.priority = this.priority();
  _o.recordId = this.recordId();
  _o.reconSurvey = this.reconSurvey();
  _o.intelDiscipline = this.intelDiscipline();
  _o.secondary = this.secondary();
  _o.emphasized = this.emphasized();
  _o.isPrismCr = this.isPrismCr();
  _o.start = this.start();
  _o.stop = this.stop();
  _o.operation = this.operation();
  _o.supportedUnit = this.supportedUnit();
  _o.country = this.country();
  _o.region = this.region();
  _o.subregion = this.subregion();
  _o.specialComGuidance = this.specialComGuidance();
  _o.criticalTimes = this.criticalTimes();
  _o.exploitationRequirement = this.exploitationRequirement();
  _o.targetList = this.bb!.createScalarList<string>(this.targetList.bind(this), this.targetListLength());
}
}

export class ISRCollectionRequirements_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public hash: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public cridNumbers: string|Uint8Array|null = null,
  public priority: number = 0.0,
  public recordId: string|Uint8Array|null = null,
  public reconSurvey: string|Uint8Array|null = null,
  public intelDiscipline: string|Uint8Array|null = null,
  public secondary: boolean = false,
  public emphasized: boolean = false,
  public isPrismCr: boolean = false,
  public start: string|Uint8Array|null = null,
  public stop: string|Uint8Array|null = null,
  public operation: string|Uint8Array|null = null,
  public supportedUnit: string|Uint8Array|null = null,
  public country: string|Uint8Array|null = null,
  public region: string|Uint8Array|null = null,
  public subregion: string|Uint8Array|null = null,
  public specialComGuidance: string|Uint8Array|null = null,
  public criticalTimes: string|Uint8Array|null = null,
  public exploitationRequirement: string|Uint8Array|null = null,
  public targetList: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const hash = (this.hash !== null ? builder.createString(this.hash!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const cridNumbers = (this.cridNumbers !== null ? builder.createString(this.cridNumbers!) : 0);
  const recordId = (this.recordId !== null ? builder.createString(this.recordId!) : 0);
  const reconSurvey = (this.reconSurvey !== null ? builder.createString(this.reconSurvey!) : 0);
  const intelDiscipline = (this.intelDiscipline !== null ? builder.createString(this.intelDiscipline!) : 0);
  const start = (this.start !== null ? builder.createString(this.start!) : 0);
  const stop = (this.stop !== null ? builder.createString(this.stop!) : 0);
  const operation = (this.operation !== null ? builder.createString(this.operation!) : 0);
  const supportedUnit = (this.supportedUnit !== null ? builder.createString(this.supportedUnit!) : 0);
  const country = (this.country !== null ? builder.createString(this.country!) : 0);
  const region = (this.region !== null ? builder.createString(this.region!) : 0);
  const subregion = (this.subregion !== null ? builder.createString(this.subregion!) : 0);
  const specialComGuidance = (this.specialComGuidance !== null ? builder.createString(this.specialComGuidance!) : 0);
  const criticalTimes = (this.criticalTimes !== null ? builder.createString(this.criticalTimes!) : 0);
  const exploitationRequirement = (this.exploitationRequirement !== null ? builder.createString(this.exploitationRequirement!) : 0);
  const targetList = ISRCollectionRequirements_Full.createTargetListVector(builder, builder.createObjectOffsetList(this.targetList));

  return ISRCollectionRequirements_Full.createISRCollectionRequirements_Full(builder,
    id,
    hash,
    type,
    cridNumbers,
    this.priority,
    recordId,
    reconSurvey,
    intelDiscipline,
    this.secondary,
    this.emphasized,
    this.isPrismCr,
    start,
    stop,
    operation,
    supportedUnit,
    country,
    region,
    subregion,
    specialComGuidance,
    criticalTimes,
    exploitationRequirement,
    targetList
  );
}
}
