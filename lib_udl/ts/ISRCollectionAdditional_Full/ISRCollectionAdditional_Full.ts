// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Additional start and stop for the collection.
 */
export class ISRCollectionAdditional_Full implements flatbuffers.IUnpackableObject<ISRCollectionAdditional_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ISRCollectionAdditional_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsISRCollectionAdditional_Full(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionAdditional_Full):ISRCollectionAdditional_Full {
  return (obj || new ISRCollectionAdditional_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsISRCollectionAdditional_Full(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionAdditional_Full):ISRCollectionAdditional_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ISRCollectionAdditional_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ISRC');
}

/**
 * Unique Identifier of additional collection period.
 * Example: /// Example: ISRCOLLECTIONADDITIONAL
 * Constraints: Minimum length = 0, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start time of collection, in ISO 8601 UTC format.
 * Example: /// Example: 2021-01-19T01:01:15.001Z
 * Constraints: No constraints specified.
 */
start():string|null
start(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
start(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Stop time of collection, in ISO 8601 UTC format.
 * Example: /// Example: 2021-01-19T01:01:15.001Z
 * Constraints: No constraints specified.
 */
stop():string|null
stop(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stop(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startISRCollectionAdditional_Full(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addStart(builder:flatbuffers.Builder, startOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, startOffset, 0);
}

static addStop(builder:flatbuffers.Builder, stopOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, stopOffset, 0);
}

static endISRCollectionAdditional_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishISRCollectionAdditional_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC');
}

static finishSizePrefixedISRCollectionAdditional_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC', true);
}

static createISRCollectionAdditional_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, startOffset:flatbuffers.Offset, stopOffset:flatbuffers.Offset):flatbuffers.Offset {
  ISRCollectionAdditional_Full.startISRCollectionAdditional_Full(builder);
  ISRCollectionAdditional_Full.addId(builder, idOffset);
  ISRCollectionAdditional_Full.addStart(builder, startOffset);
  ISRCollectionAdditional_Full.addStop(builder, stopOffset);
  return ISRCollectionAdditional_Full.endISRCollectionAdditional_Full(builder);
}

unpack(): ISRCollectionAdditional_FullT {
  return new ISRCollectionAdditional_FullT(
    this.id(),
    this.start(),
    this.stop()
  );
}


unpackTo(_o: ISRCollectionAdditional_FullT): void {
  _o.id = this.id();
  _o.start = this.start();
  _o.stop = this.stop();
}
}

export class ISRCollectionAdditional_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public start: string|Uint8Array|null = null,
  public stop: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const start = (this.start !== null ? builder.createString(this.start!) : 0);
  const stop = (this.stop !== null ? builder.createString(this.stop!) : 0);

  return ISRCollectionAdditional_Full.createISRCollectionAdditional_Full(builder,
    id,
    start,
    stop
  );
}
}
