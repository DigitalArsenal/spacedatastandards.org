// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
 */
export class FlightPlanMessages_Full implements flatbuffers.IUnpackableObject<FlightPlanMessages_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlightPlanMessages_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlightPlanMessages_Full(bb:flatbuffers.ByteBuffer, obj?:FlightPlanMessages_Full):FlightPlanMessages_Full {
  return (obj || new FlightPlanMessages_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlightPlanMessages_Full(bb:flatbuffers.ByteBuffer, obj?:FlightPlanMessages_Full):FlightPlanMessages_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlightPlanMessages_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('FLIG');
}

/**
 * The severity of the message.
 * Example: /// Example: SEVERE
 * Constraints: Minimum length = 0, Maximum length = 16
 */
severity():string|null
severity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
severity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The waypoint number for which the message was generated, or enter "PLAN" for a message impacting the entire route.
 * Example: /// Example: 20
 * Constraints: Minimum length = 0, Maximum length = 8
 */
wpNum():string|null
wpNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
wpNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
 * Example: /// Example: PRIMARY
 * Constraints: Minimum length = 0, Maximum length = 16
 */
routePath():string|null
routePath(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
routePath(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The text of the message.
 * Example: /// Example: Message text
 * Constraints: Minimum length = 0, Maximum length = 256
 */
msgText():string|null
msgText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startFlightPlanMessages_Full(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addSeverity(builder:flatbuffers.Builder, severityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, severityOffset, 0);
}

static addWpNum(builder:flatbuffers.Builder, wpNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, wpNumOffset, 0);
}

static addRoutePath(builder:flatbuffers.Builder, routePathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, routePathOffset, 0);
}

static addMsgText(builder:flatbuffers.Builder, msgTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, msgTextOffset, 0);
}

static endFlightPlanMessages_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFlightPlanMessages_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'FLIG');
}

static finishSizePrefixedFlightPlanMessages_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'FLIG', true);
}

static createFlightPlanMessages_Full(builder:flatbuffers.Builder, severityOffset:flatbuffers.Offset, wpNumOffset:flatbuffers.Offset, routePathOffset:flatbuffers.Offset, msgTextOffset:flatbuffers.Offset):flatbuffers.Offset {
  FlightPlanMessages_Full.startFlightPlanMessages_Full(builder);
  FlightPlanMessages_Full.addSeverity(builder, severityOffset);
  FlightPlanMessages_Full.addWpNum(builder, wpNumOffset);
  FlightPlanMessages_Full.addRoutePath(builder, routePathOffset);
  FlightPlanMessages_Full.addMsgText(builder, msgTextOffset);
  return FlightPlanMessages_Full.endFlightPlanMessages_Full(builder);
}

unpack(): FlightPlanMessages_FullT {
  return new FlightPlanMessages_FullT(
    this.severity(),
    this.wpNum(),
    this.routePath(),
    this.msgText()
  );
}


unpackTo(_o: FlightPlanMessages_FullT): void {
  _o.severity = this.severity();
  _o.wpNum = this.wpNum();
  _o.routePath = this.routePath();
  _o.msgText = this.msgText();
}
}

export class FlightPlanMessages_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public severity: string|Uint8Array|null = null,
  public wpNum: string|Uint8Array|null = null,
  public routePath: string|Uint8Array|null = null,
  public msgText: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const severity = (this.severity !== null ? builder.createString(this.severity!) : 0);
  const wpNum = (this.wpNum !== null ? builder.createString(this.wpNum!) : 0);
  const routePath = (this.routePath !== null ? builder.createString(this.routePath!) : 0);
  const msgText = (this.msgText !== null ? builder.createString(this.msgText!) : 0);

  return FlightPlanMessages_Full.createFlightPlanMessages_Full(builder,
    severity,
    wpNum,
    routePath,
    msgText
  );
}
}
