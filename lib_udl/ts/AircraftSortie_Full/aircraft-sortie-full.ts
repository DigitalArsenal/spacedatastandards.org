// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AircraftSortie_Full_dataMode_Enum } from './aircraft-sortie-full-data-mode-enum.js';
import { AircraftSortie_Full_paperStatus_Enum } from './aircraft-sortie-full-paper-status-enum.js';
import { AircraftSortie_Full_pprStatus_Enum } from './aircraft-sortie-full-ppr-status-enum.js';
import { AircraftSortie_Full_rvnReq_Enum } from './aircraft-sortie-full-rvn-req-enum.js';


/**
 * /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
 */
export class AircraftSortie_Full implements flatbuffers.IUnpackableObject<AircraftSortie_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AircraftSortie_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAircraftSortie_Full(bb:flatbuffers.ByteBuffer, obj?:AircraftSortie_Full):AircraftSortie_Full {
  return (obj || new AircraftSortie_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAircraftSortie_Full(bb:flatbuffers.ByteBuffer, obj?:AircraftSortie_Full):AircraftSortie_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AircraftSortie_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRC');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: AIRCRAFTSORTIE-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The sortie identifier provided by the originating source.
 * Example: /// Example: A0640
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origSortieId():string|null
origSortieId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSortieId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the aircraft.
 * Example: /// Example: REF-AIRCRAFT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idAircraft():string|null
idAircraft(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idAircraft(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate Aircraft Identifier provided by source.
 * Example: /// Example: ALT-AIRCRAFT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
aircraftAltId():string|null
aircraftAltId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aircraftAltId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The tail number of the aircraft assigned to this sortie.
 * Example: /// Example: Tail_1
 * Constraints: Minimum length = 0, Maximum length = 16
 */
tailNumber():string|null
tailNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tailNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The aircraft Model Design Series designation assigned to this sortie.
 * Example: /// Example: C017A
 * Constraints: Minimum length = 0, Maximum length = 36
 */
aircraftMds():string|null
aircraftMds(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aircraftMds(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
 * Example: /// Example: AE123C
 * Constraints: Minimum length = 0, Maximum length = 16
 */
aircraftAdsb():string|null
aircraftAdsb(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aircraftAdsb(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex. YYYY-MM-DD).
 * Example: /// Example: 2021-01-01
 * Constraints: No constraints specified.
 */
sortieDate():string|null
sortieDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sortieDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The external system line number of this sortie.
 * Example: /// Example: 99
 * Constraints: No constraints specified.
 */
lineNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The unique identifier of the mission to which this sortie is assigned.
 * Example: /// Example: fa18d96e-91ea-60da-a7a8-1af6500066c8
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idMission():string|null
idMission(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idMission(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The mission ID according to the source system.
 * Example: /// Example: ABLE
 * Constraints: Minimum length = 0, Maximum length = 24
 */
missionId():string|null
missionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Air Mobility Command (AMC) mission number of the sortie.
 * Example: /// Example: AJM512571333
 * Constraints: Minimum length = 0, Maximum length = 36
 */
amcMsnNum():string|null
amcMsnNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
amcMsnNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of mission (e.g. SAAM, CHNL, etc.).
 * Example: /// Example: SAAM
 * Constraints: Minimum length = 0, Maximum length = 36
 */
amcMsnType():string|null
amcMsnType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
amcMsnType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The call sign assigned to the aircraft on this sortie.
 * Example: /// Example: BAKER
 * Constraints: Minimum length = 0, Maximum length = 24
 */
callSign():string|null
callSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Joint Chiefs of Staff priority of this sortie.
 * Example: /// Example: 1A3
 * Constraints: Minimum length = 0, Maximum length = 3
 */
jcsPriority():string|null
jcsPriority(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
jcsPriority(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The planned primary Standard Conventional Load of the aircraft for this sortie.
 * Example: /// Example: ABC
 * Constraints: Minimum length = 0, Maximum length = 24
 */
primaryScl():string|null
primaryScl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
primaryScl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The planned secondary Standard Conventional Load of the aircraft for this sortie.
 * Example: /// Example: ABC
 * Constraints: Minimum length = 0, Maximum length = 24
 */
secondaryScl():string|null
secondaryScl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
secondaryScl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Aircraft configuration required for the mission.
 * Example: /// Example: C-1
 * Constraints: Minimum length = 0, Maximum length = 8
 */
reqConfig():string|null
reqConfig(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reqConfig(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are determined by the data source.
 * Example: /// Example: C-1
 * Constraints: Minimum length = 0, Maximum length = 8
 */
cargoConfig():string|null
cargoConfig(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cargoConfig(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mass of fuel required for this leg of the sortie, in kilograms.
 * Example: /// Example: 20000.1
 * Constraints: No constraints specified.
 */
fuelReq():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Liquid oxygen required on the aircraft for the crew compartment, in liters.
 * Example: /// Example: 12.3
 * Constraints: No constraints specified.
 */
oxyReqCrew():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Liquid oxygen onboard the aircraft for the crew compartment, in liters.
 * Example: /// Example: 12.3
 * Constraints: No constraints specified.
 */
oxyOnCrew():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Liquid oxygen required on the aircraft for the troop compartment, in liters.
 * Example: /// Example: 12.3
 * Constraints: No constraints specified.
 */
oxyReqPax():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Liquid oxygen onboard the aircraft for the troop compartment, in liters.
 * Example: /// Example: 12.3
 * Constraints: No constraints specified.
 */
oxyOnPax():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Alert Status code.
 * Example: /// Example: C1
 * Constraints: Minimum length = 0, Maximum length = 24
 */
alertStatusCode():string|null
alertStatusCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
alertStatusCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The amount of time allowed between launch order and takeoff, in seconds.
 * Example: /// Example: 22
 * Constraints: No constraints specified.
 */
alertStatus():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The current state of this sortie.
 * Example: /// Example: Park
 * Constraints: Minimum length = 0, Maximum length = 32
 */
currentState():string|null
currentState(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentState(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The itinerary identifier of the departure location.
 * Example: /// Example: 100
 * Constraints: No constraints specified.
 */
depItinerary():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The departure International Civil Aviation Organization (ICAO) of this sortie.
 * Example: /// Example: KCOS
 * Constraints: Minimum length = 0, Maximum length = 4
 */
depIcao():string|null
depIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The departure International Aviation Transport Association (IATA) code of this sortie.
 * Example: /// Example: AAA
 * Constraints: Minimum length = 0, Maximum length = 3
 */
depIata():string|null
depIata(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depIata(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The departure Federal Aviation Administration (FAA) code of this sortie.
 * Example: /// Example: FAA1
 * Constraints: Minimum length = 0, Maximum length = 5
 */
depFaa():string|null
depFaa(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depFaa(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
plannedDepTime():string|null
plannedDepTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
plannedDepTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
estDepTime():string|null
estDepTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
estDepTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The actual departure time, in ISO 8601 UTC format.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
actualDepTime():string|null
actualDepTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actualDepTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The estimated time the Aircraft will begin to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-01-01T00:55:01.123Z
 * Constraints: No constraints specified.
 */
estBlockOutTime():string|null
estBlockOutTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
estBlockOutTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The actual time the Aircraft begins to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-01-01T00:55:01.123Z
 * Constraints: No constraints specified.
 */
actualBlockOutTime():string|null
actualBlockOutTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actualBlockOutTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Purpose code at the departure location of this sortie.
 * Example: /// Example: P
 * Constraints: Minimum length = 0, Maximum length = 10
 */
depPurposeCode():string|null
depPurposeCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depPurposeCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The itinerary identifier of the arrival location.
 * Example: /// Example: 101
 * Constraints: No constraints specified.
 */
arrItinerary():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The arrival International Civil Aviation Organization (ICAO) of this sortie.
 * Example: /// Example: KCOS
 * Constraints: Minimum length = 0, Maximum length = 4
 */
arrIcao():string|null
arrIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The arrival International Aviation Transport Association (IATA) code of this sortie.
 * Example: /// Example: AAA
 * Constraints: Minimum length = 0, Maximum length = 3
 */
arrIata():string|null
arrIata(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrIata(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The arrival Federal Aviation Administration (FAA) code of this sortie.
 * Example: /// Example: FAA1
 * Constraints: Minimum length = 0, Maximum length = 5
 */
arrFaa():string|null
arrFaa(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrFaa(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The scheduled time that the Aircraft sortie is planned to arrive,  in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
plannedArrTime():string|null
plannedArrTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
plannedArrTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
estArrTime():string|null
estArrTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
estArrTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The actual arrival time, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
actualArrTime():string|null
actualArrTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actualArrTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The estimated time the Aircraft will come to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-01-01T01:06:01.123Z
 * Constraints: No constraints specified.
 */
estBlockInTime():string|null
estBlockInTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
estBlockInTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The actual time the Aircraft comes to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-01-01T01:06:01.123Z
 * Constraints: No constraints specified.
 */
actualBlockInTime():string|null
actualBlockInTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actualBlockInTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Purpose code at the arrival location of this sortie.
 * Example: /// Example: O
 * Constraints: Minimum length = 0, Maximum length = 10
 */
arrPurposeCode():string|null
arrPurposeCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrPurposeCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Due home date by which the aircraft must return to its home station, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-01-03T01:01:01.123Z
 * Constraints: No constraints specified.
 */
dhd():string|null
dhd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dhd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Reason the aircraft must return to home station by its due home date.
 * Example: /// Example: Due for maintenance
 * Constraints: Minimum length = 0, Maximum length = 32
 */
dhdReason():string|null
dhdReason(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dhdReason(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Aircraft event text.
 * Example: /// Example: Example event
 * Constraints: Minimum length = 0, Maximum length = 128
 */
aircraftEvent():string|null
aircraftEvent(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aircraftEvent(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the group responsible for recording the completion time of the next event in the sequence of events assigned to this sortie (e.g. OPS - Operations, MX - Maintenance, TR - Transportation, etc.).
 * Example: /// Example: OPS
 * Constraints: Minimum length = 0, Maximum length = 16
 */
soe():string|null
soe(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
soe(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The leg number of this sortie.
 * Example: /// Example: 14
 * Constraints: No constraints specified.
 */
legNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The planned flight time for this sortie, in minutes.
 * Example: /// Example: 104.5
 * Constraints: No constraints specified.
 */
flightTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Scheduled ground time, in minutes.
 * Example: /// Example: 387.8
 * Constraints: No constraints specified.
 */
gndTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * When crew papers are associated to this sortie, the system updates this value. This field is the URI location in the document repository of that raw file. To download the raw file, prepend https://udl-hostname/scs/download?id= to this field's value.
 * Example: /// Example: Example URI
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The version number of the crew paper.
 * Example: /// Example: 1.1
 * Constraints: Minimum length = 0, Maximum length = 16
 */
papersVersion():string|null
papersVersion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
papersVersion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the uploaded PDF.
 * Example: /// Example: ExampleFileName
 * Constraints: Minimum length = 0, Maximum length = 512
 */
filename():string|null
filename(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
filename(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Size of the supporting PDF, in bytes.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
filesize():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The status of the supporting document.
 * Example: /// Example: PUBLISHED
 * Constraints: Minimum length = 0, Maximum length = 9
 */
paperStatus():AircraftSortie_Full_paperStatus_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AircraftSortie_Full_paperStatus_Enum.PUBLISHED;
}

/**
 * The prior permission required (PPR) status.
 * Example: /// Example: PENDING
 * Constraints: Minimum length = 0, Maximum length = 22
 */
pprStatus():AircraftSortie_Full_pprStatus_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AircraftSortie_Full_pprStatus_Enum.NOT_REQUIRED;
}

/**
 * Time the associated mission data was last updated in relation to the aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this time is coming from an external system, it may not sync with the latest mission time associated to this record.
 * Example: /// Example: 2024-09-09T01:01:01.123Z
 * Constraints: No constraints specified.
 */
missionUpdate():string|null
missionUpdate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionUpdate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The primary delay code.
 * Example: /// Example: 500
 * Constraints: Minimum length = 0, Maximum length = 10
 */
delayCode():string|null
delayCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
delayCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The last name of the aircraft commander.
 * Example: /// Example: Smith
 * Constraints: Minimum length = 0, Maximum length = 36
 */
commanderName():string|null
commanderName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
commanderName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Desk phone number of the flight manager assigned to the sortie. Null when no flight manager is assigned.
 * Example: /// Example: 7198675309
 * Constraints: Minimum length = 0, Maximum length = 45
 */
fmDeskNum():string|null
fmDeskNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fmDeskNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Last name of the flight manager assigned to the sortie. Null when no flight manager is assigned.
 * Example: /// Example: Smith
 * Constraints: Minimum length = 0, Maximum length = 64
 */
fmName():string|null
fmName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fmName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of Ravens required for this sortie (N - None, R - Raven (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required (Ground time over 6 hours)).
 * Example: /// Example: R
 * Constraints: Minimum length = 0, Maximum length = 2
 */
rvnReq():AircraftSortie_Full_rvnReq_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AircraftSortie_Full_rvnReq_Enum.N;
}

/**
 * The number of passengers tasked for this sortie.
 * Example: /// Example: 17
 * Constraints: No constraints specified.
 */
passengers():number {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The POI parking location.
 * Example: /// Example: KCOS
 * Constraints: Minimum length = 0, Maximum length = 32
 */
parkingLoc():string|null
parkingLoc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
parkingLoc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Remarks concerning the sortie objective.
 * Example: /// Example: Some objective remark about aircraft A
 * Constraints: Minimum length = 0, Maximum length = 512
 */
objectiveRemarks():string|null
objectiveRemarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectiveRemarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Remarks concerning the aircraft.
 * Example: /// Example: Some remark about aircraft A
 * Constraints: Minimum length = 0, Maximum length = 512
 */
aircraftRemarks():string|null
aircraftRemarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aircraftRemarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Remarks concerning the schedule.
 * Example: /// Example: Some schedule remark about aircraft A
 * Constraints: Minimum length = 0, Maximum length = 512
 */
scheduleRemarks():string|null
scheduleRemarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scheduleRemarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Remarks concerning the results of this sortie.
 * Example: /// Example: Some remark about aircraft A
 * Constraints: Minimum length = 0, Maximum length = 512
 */
resultRemarks():string|null
resultRemarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
resultRemarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AircraftSortie_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AircraftSortie_Full_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
crew():string|null
crew(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
crew(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
sortiePpr(index: number):string
sortiePpr(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
sortiePpr(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

sortiePprLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startAircraftSortie_Full(builder:flatbuffers.Builder) {
  builder.startObject(84);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addOrigSortieId(builder:flatbuffers.Builder, origSortieIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, origSortieIdOffset, 0);
}

static addIdAircraft(builder:flatbuffers.Builder, idAircraftOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idAircraftOffset, 0);
}

static addAircraftAltId(builder:flatbuffers.Builder, aircraftAltIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, aircraftAltIdOffset, 0);
}

static addTailNumber(builder:flatbuffers.Builder, tailNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, tailNumberOffset, 0);
}

static addAircraftMds(builder:flatbuffers.Builder, aircraftMdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, aircraftMdsOffset, 0);
}

static addAircraftAdsb(builder:flatbuffers.Builder, aircraftAdsbOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, aircraftAdsbOffset, 0);
}

static addSortieDate(builder:flatbuffers.Builder, sortieDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, sortieDateOffset, 0);
}

static addLineNumber(builder:flatbuffers.Builder, lineNumber:number) {
  builder.addFieldInt32(9, lineNumber, 0);
}

static addIdMission(builder:flatbuffers.Builder, idMissionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, idMissionOffset, 0);
}

static addMissionId(builder:flatbuffers.Builder, missionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, missionIdOffset, 0);
}

static addAmcMsnNum(builder:flatbuffers.Builder, amcMsnNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, amcMsnNumOffset, 0);
}

static addAmcMsnType(builder:flatbuffers.Builder, amcMsnTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, amcMsnTypeOffset, 0);
}

static addCallSign(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, callSignOffset, 0);
}

static addJcsPriority(builder:flatbuffers.Builder, jcsPriorityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, jcsPriorityOffset, 0);
}

static addPrimaryScl(builder:flatbuffers.Builder, primarySclOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, primarySclOffset, 0);
}

static addSecondaryScl(builder:flatbuffers.Builder, secondarySclOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, secondarySclOffset, 0);
}

static addReqConfig(builder:flatbuffers.Builder, reqConfigOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, reqConfigOffset, 0);
}

static addCargoConfig(builder:flatbuffers.Builder, cargoConfigOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, cargoConfigOffset, 0);
}

static addFuelReq(builder:flatbuffers.Builder, fuelReq:number) {
  builder.addFieldFloat64(20, fuelReq, 0.0);
}

static addOxyReqCrew(builder:flatbuffers.Builder, oxyReqCrew:number) {
  builder.addFieldFloat64(21, oxyReqCrew, 0.0);
}

static addOxyOnCrew(builder:flatbuffers.Builder, oxyOnCrew:number) {
  builder.addFieldFloat64(22, oxyOnCrew, 0.0);
}

static addOxyReqPax(builder:flatbuffers.Builder, oxyReqPax:number) {
  builder.addFieldFloat64(23, oxyReqPax, 0.0);
}

static addOxyOnPax(builder:flatbuffers.Builder, oxyOnPax:number) {
  builder.addFieldFloat64(24, oxyOnPax, 0.0);
}

static addAlertStatusCode(builder:flatbuffers.Builder, alertStatusCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, alertStatusCodeOffset, 0);
}

static addAlertStatus(builder:flatbuffers.Builder, alertStatus:number) {
  builder.addFieldInt32(26, alertStatus, 0);
}

static addCurrentState(builder:flatbuffers.Builder, currentStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, currentStateOffset, 0);
}

static addDepItinerary(builder:flatbuffers.Builder, depItinerary:number) {
  builder.addFieldInt32(28, depItinerary, 0);
}

static addDepIcao(builder:flatbuffers.Builder, depIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, depIcaoOffset, 0);
}

static addDepIata(builder:flatbuffers.Builder, depIataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, depIataOffset, 0);
}

static addDepFaa(builder:flatbuffers.Builder, depFaaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, depFaaOffset, 0);
}

static addPlannedDepTime(builder:flatbuffers.Builder, plannedDepTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, plannedDepTimeOffset, 0);
}

static addEstDepTime(builder:flatbuffers.Builder, estDepTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, estDepTimeOffset, 0);
}

static addActualDepTime(builder:flatbuffers.Builder, actualDepTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, actualDepTimeOffset, 0);
}

static addEstBlockOutTime(builder:flatbuffers.Builder, estBlockOutTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, estBlockOutTimeOffset, 0);
}

static addActualBlockOutTime(builder:flatbuffers.Builder, actualBlockOutTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, actualBlockOutTimeOffset, 0);
}

static addDepPurposeCode(builder:flatbuffers.Builder, depPurposeCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, depPurposeCodeOffset, 0);
}

static addArrItinerary(builder:flatbuffers.Builder, arrItinerary:number) {
  builder.addFieldInt32(38, arrItinerary, 0);
}

static addArrIcao(builder:flatbuffers.Builder, arrIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, arrIcaoOffset, 0);
}

static addArrIata(builder:flatbuffers.Builder, arrIataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, arrIataOffset, 0);
}

static addArrFaa(builder:flatbuffers.Builder, arrFaaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, arrFaaOffset, 0);
}

static addPlannedArrTime(builder:flatbuffers.Builder, plannedArrTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, plannedArrTimeOffset, 0);
}

static addEstArrTime(builder:flatbuffers.Builder, estArrTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, estArrTimeOffset, 0);
}

static addActualArrTime(builder:flatbuffers.Builder, actualArrTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, actualArrTimeOffset, 0);
}

static addEstBlockInTime(builder:flatbuffers.Builder, estBlockInTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, estBlockInTimeOffset, 0);
}

static addActualBlockInTime(builder:flatbuffers.Builder, actualBlockInTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, actualBlockInTimeOffset, 0);
}

static addArrPurposeCode(builder:flatbuffers.Builder, arrPurposeCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, arrPurposeCodeOffset, 0);
}

static addDhd(builder:flatbuffers.Builder, dhdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, dhdOffset, 0);
}

static addDhdReason(builder:flatbuffers.Builder, dhdReasonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, dhdReasonOffset, 0);
}

static addAircraftEvent(builder:flatbuffers.Builder, aircraftEventOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, aircraftEventOffset, 0);
}

static addSoe(builder:flatbuffers.Builder, soeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, soeOffset, 0);
}

static addLegNum(builder:flatbuffers.Builder, legNum:number) {
  builder.addFieldInt32(52, legNum, 0);
}

static addFlightTime(builder:flatbuffers.Builder, flightTime:number) {
  builder.addFieldFloat64(53, flightTime, 0.0);
}

static addGndTime(builder:flatbuffers.Builder, gndTime:number) {
  builder.addFieldFloat64(54, gndTime, 0.0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, rawFileUriOffset, 0);
}

static addPapersVersion(builder:flatbuffers.Builder, papersVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, papersVersionOffset, 0);
}

static addFilename(builder:flatbuffers.Builder, filenameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, filenameOffset, 0);
}

static addFilesize(builder:flatbuffers.Builder, filesize:number) {
  builder.addFieldInt32(58, filesize, 0);
}

static addPaperStatus(builder:flatbuffers.Builder, paperStatus:AircraftSortie_Full_paperStatus_Enum) {
  builder.addFieldInt8(59, paperStatus, AircraftSortie_Full_paperStatus_Enum.PUBLISHED);
}

static addPprStatus(builder:flatbuffers.Builder, pprStatus:AircraftSortie_Full_pprStatus_Enum) {
  builder.addFieldInt8(60, pprStatus, AircraftSortie_Full_pprStatus_Enum.NOT_REQUIRED);
}

static addMissionUpdate(builder:flatbuffers.Builder, missionUpdateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, missionUpdateOffset, 0);
}

static addDelayCode(builder:flatbuffers.Builder, delayCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, delayCodeOffset, 0);
}

static addCommanderName(builder:flatbuffers.Builder, commanderNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, commanderNameOffset, 0);
}

static addFmDeskNum(builder:flatbuffers.Builder, fmDeskNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, fmDeskNumOffset, 0);
}

static addFmName(builder:flatbuffers.Builder, fmNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, fmNameOffset, 0);
}

static addRvnReq(builder:flatbuffers.Builder, rvnReq:AircraftSortie_Full_rvnReq_Enum) {
  builder.addFieldInt8(66, rvnReq, AircraftSortie_Full_rvnReq_Enum.N);
}

static addPassengers(builder:flatbuffers.Builder, passengers:number) {
  builder.addFieldInt32(67, passengers, 0);
}

static addParkingLoc(builder:flatbuffers.Builder, parkingLocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(68, parkingLocOffset, 0);
}

static addObjectiveRemarks(builder:flatbuffers.Builder, objectiveRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(69, objectiveRemarksOffset, 0);
}

static addAircraftRemarks(builder:flatbuffers.Builder, aircraftRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(70, aircraftRemarksOffset, 0);
}

static addScheduleRemarks(builder:flatbuffers.Builder, scheduleRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(71, scheduleRemarksOffset, 0);
}

static addResultRemarks(builder:flatbuffers.Builder, resultRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(72, resultRemarksOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(73, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(74, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(75, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(76, updatedByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(77, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(78, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(79, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AircraftSortie_Full_dataMode_Enum) {
  builder.addFieldInt8(80, dataMode, AircraftSortie_Full_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(81, origNetworkOffset, 0);
}

static addCrew(builder:flatbuffers.Builder, crewOffset:flatbuffers.Offset) {
  builder.addFieldOffset(82, crewOffset, 0);
}

static addSortiePpr(builder:flatbuffers.Builder, sortiePprOffset:flatbuffers.Offset) {
  builder.addFieldOffset(83, sortiePprOffset, 0);
}

static createSortiePprVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSortiePprVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endAircraftSortie_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAircraftSortie_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC');
}

static finishSizePrefixedAircraftSortie_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC', true);
}

static createAircraftSortie_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, origSortieIdOffset:flatbuffers.Offset, idAircraftOffset:flatbuffers.Offset, aircraftAltIdOffset:flatbuffers.Offset, tailNumberOffset:flatbuffers.Offset, aircraftMdsOffset:flatbuffers.Offset, aircraftAdsbOffset:flatbuffers.Offset, sortieDateOffset:flatbuffers.Offset, lineNumber:number, idMissionOffset:flatbuffers.Offset, missionIdOffset:flatbuffers.Offset, amcMsnNumOffset:flatbuffers.Offset, amcMsnTypeOffset:flatbuffers.Offset, callSignOffset:flatbuffers.Offset, jcsPriorityOffset:flatbuffers.Offset, primarySclOffset:flatbuffers.Offset, secondarySclOffset:flatbuffers.Offset, reqConfigOffset:flatbuffers.Offset, cargoConfigOffset:flatbuffers.Offset, fuelReq:number, oxyReqCrew:number, oxyOnCrew:number, oxyReqPax:number, oxyOnPax:number, alertStatusCodeOffset:flatbuffers.Offset, alertStatus:number, currentStateOffset:flatbuffers.Offset, depItinerary:number, depIcaoOffset:flatbuffers.Offset, depIataOffset:flatbuffers.Offset, depFaaOffset:flatbuffers.Offset, plannedDepTimeOffset:flatbuffers.Offset, estDepTimeOffset:flatbuffers.Offset, actualDepTimeOffset:flatbuffers.Offset, estBlockOutTimeOffset:flatbuffers.Offset, actualBlockOutTimeOffset:flatbuffers.Offset, depPurposeCodeOffset:flatbuffers.Offset, arrItinerary:number, arrIcaoOffset:flatbuffers.Offset, arrIataOffset:flatbuffers.Offset, arrFaaOffset:flatbuffers.Offset, plannedArrTimeOffset:flatbuffers.Offset, estArrTimeOffset:flatbuffers.Offset, actualArrTimeOffset:flatbuffers.Offset, estBlockInTimeOffset:flatbuffers.Offset, actualBlockInTimeOffset:flatbuffers.Offset, arrPurposeCodeOffset:flatbuffers.Offset, dhdOffset:flatbuffers.Offset, dhdReasonOffset:flatbuffers.Offset, aircraftEventOffset:flatbuffers.Offset, soeOffset:flatbuffers.Offset, legNum:number, flightTime:number, gndTime:number, rawFileUriOffset:flatbuffers.Offset, papersVersionOffset:flatbuffers.Offset, filenameOffset:flatbuffers.Offset, filesize:number, paperStatus:AircraftSortie_Full_paperStatus_Enum, pprStatus:AircraftSortie_Full_pprStatus_Enum, missionUpdateOffset:flatbuffers.Offset, delayCodeOffset:flatbuffers.Offset, commanderNameOffset:flatbuffers.Offset, fmDeskNumOffset:flatbuffers.Offset, fmNameOffset:flatbuffers.Offset, rvnReq:AircraftSortie_Full_rvnReq_Enum, passengers:number, parkingLocOffset:flatbuffers.Offset, objectiveRemarksOffset:flatbuffers.Offset, aircraftRemarksOffset:flatbuffers.Offset, scheduleRemarksOffset:flatbuffers.Offset, resultRemarksOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:AircraftSortie_Full_dataMode_Enum, origNetworkOffset:flatbuffers.Offset, crewOffset:flatbuffers.Offset, sortiePprOffset:flatbuffers.Offset):flatbuffers.Offset {
  AircraftSortie_Full.startAircraftSortie_Full(builder);
  AircraftSortie_Full.addId(builder, idOffset);
  AircraftSortie_Full.addClassificationMarking(builder, classificationMarkingOffset);
  AircraftSortie_Full.addOrigSortieId(builder, origSortieIdOffset);
  AircraftSortie_Full.addIdAircraft(builder, idAircraftOffset);
  AircraftSortie_Full.addAircraftAltId(builder, aircraftAltIdOffset);
  AircraftSortie_Full.addTailNumber(builder, tailNumberOffset);
  AircraftSortie_Full.addAircraftMds(builder, aircraftMdsOffset);
  AircraftSortie_Full.addAircraftAdsb(builder, aircraftAdsbOffset);
  AircraftSortie_Full.addSortieDate(builder, sortieDateOffset);
  AircraftSortie_Full.addLineNumber(builder, lineNumber);
  AircraftSortie_Full.addIdMission(builder, idMissionOffset);
  AircraftSortie_Full.addMissionId(builder, missionIdOffset);
  AircraftSortie_Full.addAmcMsnNum(builder, amcMsnNumOffset);
  AircraftSortie_Full.addAmcMsnType(builder, amcMsnTypeOffset);
  AircraftSortie_Full.addCallSign(builder, callSignOffset);
  AircraftSortie_Full.addJcsPriority(builder, jcsPriorityOffset);
  AircraftSortie_Full.addPrimaryScl(builder, primarySclOffset);
  AircraftSortie_Full.addSecondaryScl(builder, secondarySclOffset);
  AircraftSortie_Full.addReqConfig(builder, reqConfigOffset);
  AircraftSortie_Full.addCargoConfig(builder, cargoConfigOffset);
  AircraftSortie_Full.addFuelReq(builder, fuelReq);
  AircraftSortie_Full.addOxyReqCrew(builder, oxyReqCrew);
  AircraftSortie_Full.addOxyOnCrew(builder, oxyOnCrew);
  AircraftSortie_Full.addOxyReqPax(builder, oxyReqPax);
  AircraftSortie_Full.addOxyOnPax(builder, oxyOnPax);
  AircraftSortie_Full.addAlertStatusCode(builder, alertStatusCodeOffset);
  AircraftSortie_Full.addAlertStatus(builder, alertStatus);
  AircraftSortie_Full.addCurrentState(builder, currentStateOffset);
  AircraftSortie_Full.addDepItinerary(builder, depItinerary);
  AircraftSortie_Full.addDepIcao(builder, depIcaoOffset);
  AircraftSortie_Full.addDepIata(builder, depIataOffset);
  AircraftSortie_Full.addDepFaa(builder, depFaaOffset);
  AircraftSortie_Full.addPlannedDepTime(builder, plannedDepTimeOffset);
  AircraftSortie_Full.addEstDepTime(builder, estDepTimeOffset);
  AircraftSortie_Full.addActualDepTime(builder, actualDepTimeOffset);
  AircraftSortie_Full.addEstBlockOutTime(builder, estBlockOutTimeOffset);
  AircraftSortie_Full.addActualBlockOutTime(builder, actualBlockOutTimeOffset);
  AircraftSortie_Full.addDepPurposeCode(builder, depPurposeCodeOffset);
  AircraftSortie_Full.addArrItinerary(builder, arrItinerary);
  AircraftSortie_Full.addArrIcao(builder, arrIcaoOffset);
  AircraftSortie_Full.addArrIata(builder, arrIataOffset);
  AircraftSortie_Full.addArrFaa(builder, arrFaaOffset);
  AircraftSortie_Full.addPlannedArrTime(builder, plannedArrTimeOffset);
  AircraftSortie_Full.addEstArrTime(builder, estArrTimeOffset);
  AircraftSortie_Full.addActualArrTime(builder, actualArrTimeOffset);
  AircraftSortie_Full.addEstBlockInTime(builder, estBlockInTimeOffset);
  AircraftSortie_Full.addActualBlockInTime(builder, actualBlockInTimeOffset);
  AircraftSortie_Full.addArrPurposeCode(builder, arrPurposeCodeOffset);
  AircraftSortie_Full.addDhd(builder, dhdOffset);
  AircraftSortie_Full.addDhdReason(builder, dhdReasonOffset);
  AircraftSortie_Full.addAircraftEvent(builder, aircraftEventOffset);
  AircraftSortie_Full.addSoe(builder, soeOffset);
  AircraftSortie_Full.addLegNum(builder, legNum);
  AircraftSortie_Full.addFlightTime(builder, flightTime);
  AircraftSortie_Full.addGndTime(builder, gndTime);
  AircraftSortie_Full.addRawFileUri(builder, rawFileUriOffset);
  AircraftSortie_Full.addPapersVersion(builder, papersVersionOffset);
  AircraftSortie_Full.addFilename(builder, filenameOffset);
  AircraftSortie_Full.addFilesize(builder, filesize);
  AircraftSortie_Full.addPaperStatus(builder, paperStatus);
  AircraftSortie_Full.addPprStatus(builder, pprStatus);
  AircraftSortie_Full.addMissionUpdate(builder, missionUpdateOffset);
  AircraftSortie_Full.addDelayCode(builder, delayCodeOffset);
  AircraftSortie_Full.addCommanderName(builder, commanderNameOffset);
  AircraftSortie_Full.addFmDeskNum(builder, fmDeskNumOffset);
  AircraftSortie_Full.addFmName(builder, fmNameOffset);
  AircraftSortie_Full.addRvnReq(builder, rvnReq);
  AircraftSortie_Full.addPassengers(builder, passengers);
  AircraftSortie_Full.addParkingLoc(builder, parkingLocOffset);
  AircraftSortie_Full.addObjectiveRemarks(builder, objectiveRemarksOffset);
  AircraftSortie_Full.addAircraftRemarks(builder, aircraftRemarksOffset);
  AircraftSortie_Full.addScheduleRemarks(builder, scheduleRemarksOffset);
  AircraftSortie_Full.addResultRemarks(builder, resultRemarksOffset);
  AircraftSortie_Full.addCreatedAt(builder, createdAtOffset);
  AircraftSortie_Full.addCreatedBy(builder, createdByOffset);
  AircraftSortie_Full.addUpdatedAt(builder, updatedAtOffset);
  AircraftSortie_Full.addUpdatedBy(builder, updatedByOffset);
  AircraftSortie_Full.addSourceDl(builder, sourceDlOffset);
  AircraftSortie_Full.addSource(builder, sourceOffset);
  AircraftSortie_Full.addOrigin(builder, originOffset);
  AircraftSortie_Full.addDataMode(builder, dataMode);
  AircraftSortie_Full.addOrigNetwork(builder, origNetworkOffset);
  AircraftSortie_Full.addCrew(builder, crewOffset);
  AircraftSortie_Full.addSortiePpr(builder, sortiePprOffset);
  return AircraftSortie_Full.endAircraftSortie_Full(builder);
}

unpack(): AircraftSortie_FullT {
  return new AircraftSortie_FullT(
    this.id(),
    this.classificationMarking(),
    this.origSortieId(),
    this.idAircraft(),
    this.aircraftAltId(),
    this.tailNumber(),
    this.aircraftMds(),
    this.aircraftAdsb(),
    this.sortieDate(),
    this.lineNumber(),
    this.idMission(),
    this.missionId(),
    this.amcMsnNum(),
    this.amcMsnType(),
    this.callSign(),
    this.jcsPriority(),
    this.primaryScl(),
    this.secondaryScl(),
    this.reqConfig(),
    this.cargoConfig(),
    this.fuelReq(),
    this.oxyReqCrew(),
    this.oxyOnCrew(),
    this.oxyReqPax(),
    this.oxyOnPax(),
    this.alertStatusCode(),
    this.alertStatus(),
    this.currentState(),
    this.depItinerary(),
    this.depIcao(),
    this.depIata(),
    this.depFaa(),
    this.plannedDepTime(),
    this.estDepTime(),
    this.actualDepTime(),
    this.estBlockOutTime(),
    this.actualBlockOutTime(),
    this.depPurposeCode(),
    this.arrItinerary(),
    this.arrIcao(),
    this.arrIata(),
    this.arrFaa(),
    this.plannedArrTime(),
    this.estArrTime(),
    this.actualArrTime(),
    this.estBlockInTime(),
    this.actualBlockInTime(),
    this.arrPurposeCode(),
    this.dhd(),
    this.dhdReason(),
    this.aircraftEvent(),
    this.soe(),
    this.legNum(),
    this.flightTime(),
    this.gndTime(),
    this.rawFileUri(),
    this.papersVersion(),
    this.filename(),
    this.filesize(),
    this.paperStatus(),
    this.pprStatus(),
    this.missionUpdate(),
    this.delayCode(),
    this.commanderName(),
    this.fmDeskNum(),
    this.fmName(),
    this.rvnReq(),
    this.passengers(),
    this.parkingLoc(),
    this.objectiveRemarks(),
    this.aircraftRemarks(),
    this.scheduleRemarks(),
    this.resultRemarks(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork(),
    this.crew(),
    this.bb!.createScalarList<string>(this.sortiePpr.bind(this), this.sortiePPR_Length())
  );
}


unpackTo(_o: AircraftSortie_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.origSortieId = this.origSortieId();
  _o.idAircraft = this.idAircraft();
  _o.aircraftAltId = this.aircraftAltId();
  _o.tailNumber = this.tailNumber();
  _o.aircraftMDS = this.aircraftMds();
  _o.aircraftADSB = this.aircraftAdsb();
  _o.sortieDate = this.sortieDate();
  _o.lineNumber = this.lineNumber();
  _o.idMission = this.idMission();
  _o.missionId = this.missionId();
  _o.amcMsnNum = this.amcMsnNum();
  _o.amcMsnType = this.amcMsnType();
  _o.callSign = this.callSign();
  _o.jcsPriority = this.jcsPriority();
  _o.primarySCL = this.primaryScl();
  _o.secondarySCL = this.secondaryScl();
  _o.reqConfig = this.reqConfig();
  _o.cargoConfig = this.cargoConfig();
  _o.fuelReq = this.fuelReq();
  _o.oxyReqCrew = this.oxyReqCrew();
  _o.oxyOnCrew = this.oxyOnCrew();
  _o.oxyReqPax = this.oxyReqPax();
  _o.oxyOnPax = this.oxyOnPax();
  _o.alertStatusCode = this.alertStatusCode();
  _o.alertStatus = this.alertStatus();
  _o.currentState = this.currentState();
  _o.depItinerary = this.depItinerary();
  _o.depICAO = this.depIcao();
  _o.depIATA = this.depIata();
  _o.depFAA = this.depFaa();
  _o.plannedDepTime = this.plannedDepTime();
  _o.estDepTime = this.estDepTime();
  _o.actualDepTime = this.actualDepTime();
  _o.estBlockOutTime = this.estBlockOutTime();
  _o.actualBlockOutTime = this.actualBlockOutTime();
  _o.depPurposeCode = this.depPurposeCode();
  _o.arrItinerary = this.arrItinerary();
  _o.arrICAO = this.arrIcao();
  _o.arrIATA = this.arrIata();
  _o.arrFAA = this.arrFaa();
  _o.plannedArrTime = this.plannedArrTime();
  _o.estArrTime = this.estArrTime();
  _o.actualArrTime = this.actualArrTime();
  _o.estBlockInTime = this.estBlockInTime();
  _o.actualBlockInTime = this.actualBlockInTime();
  _o.arrPurposeCode = this.arrPurposeCode();
  _o.dhd = this.dhd();
  _o.dhdReason = this.dhdReason();
  _o.aircraftEvent = this.aircraftEvent();
  _o.soe = this.soe();
  _o.legNum = this.legNum();
  _o.flightTime = this.flightTime();
  _o.gndTime = this.gndTime();
  _o.rawFileURI = this.rawFileUri();
  _o.papersVersion = this.papersVersion();
  _o.filename = this.filename();
  _o.filesize = this.filesize();
  _o.paperStatus = this.paperStatus();
  _o.pprStatus = this.pprStatus();
  _o.missionUpdate = this.missionUpdate();
  _o.delayCode = this.delayCode();
  _o.commanderName = this.commanderName();
  _o.fmDeskNum = this.fmDeskNum();
  _o.fmName = this.fmName();
  _o.rvnReq = this.rvnReq();
  _o.passengers = this.passengers();
  _o.parkingLoc = this.parkingLoc();
  _o.objectiveRemarks = this.objectiveRemarks();
  _o.aircraftRemarks = this.aircraftRemarks();
  _o.scheduleRemarks = this.scheduleRemarks();
  _o.resultRemarks = this.resultRemarks();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
  _o.crew = this.crew();
  _o.sortiePPR = this.bb!.createScalarList<string>(this.sortiePpr.bind(this), this.sortiePPR_Length());
}
}

export class AircraftSortie_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public origSortieId: string|Uint8Array|null = null,
  public idAircraft: string|Uint8Array|null = null,
  public aircraftAltId: string|Uint8Array|null = null,
  public tailNumber: string|Uint8Array|null = null,
  public aircraftMDS: string|Uint8Array|null = null,
  public aircraftADSB: string|Uint8Array|null = null,
  public sortieDate: string|Uint8Array|null = null,
  public lineNumber: number = 0,
  public idMission: string|Uint8Array|null = null,
  public missionId: string|Uint8Array|null = null,
  public amcMsnNum: string|Uint8Array|null = null,
  public amcMsnType: string|Uint8Array|null = null,
  public callSign: string|Uint8Array|null = null,
  public jcsPriority: string|Uint8Array|null = null,
  public primarySCL: string|Uint8Array|null = null,
  public secondarySCL: string|Uint8Array|null = null,
  public reqConfig: string|Uint8Array|null = null,
  public cargoConfig: string|Uint8Array|null = null,
  public fuelReq: number = 0.0,
  public oxyReqCrew: number = 0.0,
  public oxyOnCrew: number = 0.0,
  public oxyReqPax: number = 0.0,
  public oxyOnPax: number = 0.0,
  public alertStatusCode: string|Uint8Array|null = null,
  public alertStatus: number = 0,
  public currentState: string|Uint8Array|null = null,
  public depItinerary: number = 0,
  public depICAO: string|Uint8Array|null = null,
  public depIATA: string|Uint8Array|null = null,
  public depFAA: string|Uint8Array|null = null,
  public plannedDepTime: string|Uint8Array|null = null,
  public estDepTime: string|Uint8Array|null = null,
  public actualDepTime: string|Uint8Array|null = null,
  public estBlockOutTime: string|Uint8Array|null = null,
  public actualBlockOutTime: string|Uint8Array|null = null,
  public depPurposeCode: string|Uint8Array|null = null,
  public arrItinerary: number = 0,
  public arrICAO: string|Uint8Array|null = null,
  public arrIATA: string|Uint8Array|null = null,
  public arrFAA: string|Uint8Array|null = null,
  public plannedArrTime: string|Uint8Array|null = null,
  public estArrTime: string|Uint8Array|null = null,
  public actualArrTime: string|Uint8Array|null = null,
  public estBlockInTime: string|Uint8Array|null = null,
  public actualBlockInTime: string|Uint8Array|null = null,
  public arrPurposeCode: string|Uint8Array|null = null,
  public dhd: string|Uint8Array|null = null,
  public dhdReason: string|Uint8Array|null = null,
  public aircraftEvent: string|Uint8Array|null = null,
  public soe: string|Uint8Array|null = null,
  public legNum: number = 0,
  public flightTime: number = 0.0,
  public gndTime: number = 0.0,
  public rawFileURI: string|Uint8Array|null = null,
  public papersVersion: string|Uint8Array|null = null,
  public filename: string|Uint8Array|null = null,
  public filesize: number = 0,
  public paperStatus: AircraftSortie_Full_paperStatus_Enum = AircraftSortie_Full_paperStatus_Enum.PUBLISHED,
  public pprStatus: AircraftSortie_Full_pprStatus_Enum = AircraftSortie_Full_pprStatus_Enum.NOT_REQUIRED,
  public missionUpdate: string|Uint8Array|null = null,
  public delayCode: string|Uint8Array|null = null,
  public commanderName: string|Uint8Array|null = null,
  public fmDeskNum: string|Uint8Array|null = null,
  public fmName: string|Uint8Array|null = null,
  public rvnReq: AircraftSortie_Full_rvnReq_Enum = AircraftSortie_Full_rvnReq_Enum.N,
  public passengers: number = 0,
  public parkingLoc: string|Uint8Array|null = null,
  public objectiveRemarks: string|Uint8Array|null = null,
  public aircraftRemarks: string|Uint8Array|null = null,
  public scheduleRemarks: string|Uint8Array|null = null,
  public resultRemarks: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: AircraftSortie_Full_dataMode_Enum = AircraftSortie_Full_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null,
  public crew: string|Uint8Array|null = null,
  public sortiePPR: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const origSortieId = (this.origSortieId !== null ? builder.createString(this.origSortieId!) : 0);
  const idAircraft = (this.idAircraft !== null ? builder.createString(this.idAircraft!) : 0);
  const aircraftAltId = (this.aircraftAltId !== null ? builder.createString(this.aircraftAltId!) : 0);
  const tailNumber = (this.tailNumber !== null ? builder.createString(this.tailNumber!) : 0);
  const aircraftMDS = (this.aircraftMDS !== null ? builder.createString(this.aircraftMDS!) : 0);
  const aircraftADSB = (this.aircraftADSB !== null ? builder.createString(this.aircraftADSB!) : 0);
  const sortieDate = (this.sortieDate !== null ? builder.createString(this.sortieDate!) : 0);
  const idMission = (this.idMission !== null ? builder.createString(this.idMission!) : 0);
  const missionId = (this.missionId !== null ? builder.createString(this.missionId!) : 0);
  const amcMsnNum = (this.amcMsnNum !== null ? builder.createString(this.amcMsnNum!) : 0);
  const amcMsnType = (this.amcMsnType !== null ? builder.createString(this.amcMsnType!) : 0);
  const callSign = (this.callSign !== null ? builder.createString(this.callSign!) : 0);
  const jcsPriority = (this.jcsPriority !== null ? builder.createString(this.jcsPriority!) : 0);
  const primarySCL = (this.primarySCL !== null ? builder.createString(this.primarySCL!) : 0);
  const secondarySCL = (this.secondarySCL !== null ? builder.createString(this.secondarySCL!) : 0);
  const reqConfig = (this.reqConfig !== null ? builder.createString(this.reqConfig!) : 0);
  const cargoConfig = (this.cargoConfig !== null ? builder.createString(this.cargoConfig!) : 0);
  const alertStatusCode = (this.alertStatusCode !== null ? builder.createString(this.alertStatusCode!) : 0);
  const currentState = (this.currentState !== null ? builder.createString(this.currentState!) : 0);
  const depICAO = (this.depICAO !== null ? builder.createString(this.depICAO!) : 0);
  const depIATA = (this.depIATA !== null ? builder.createString(this.depIATA!) : 0);
  const depFAA = (this.depFAA !== null ? builder.createString(this.depFAA!) : 0);
  const plannedDepTime = (this.plannedDepTime !== null ? builder.createString(this.plannedDepTime!) : 0);
  const estDepTime = (this.estDepTime !== null ? builder.createString(this.estDepTime!) : 0);
  const actualDepTime = (this.actualDepTime !== null ? builder.createString(this.actualDepTime!) : 0);
  const estBlockOutTime = (this.estBlockOutTime !== null ? builder.createString(this.estBlockOutTime!) : 0);
  const actualBlockOutTime = (this.actualBlockOutTime !== null ? builder.createString(this.actualBlockOutTime!) : 0);
  const depPurposeCode = (this.depPurposeCode !== null ? builder.createString(this.depPurposeCode!) : 0);
  const arrICAO = (this.arrICAO !== null ? builder.createString(this.arrICAO!) : 0);
  const arrIATA = (this.arrIATA !== null ? builder.createString(this.arrIATA!) : 0);
  const arrFAA = (this.arrFAA !== null ? builder.createString(this.arrFAA!) : 0);
  const plannedArrTime = (this.plannedArrTime !== null ? builder.createString(this.plannedArrTime!) : 0);
  const estArrTime = (this.estArrTime !== null ? builder.createString(this.estArrTime!) : 0);
  const actualArrTime = (this.actualArrTime !== null ? builder.createString(this.actualArrTime!) : 0);
  const estBlockInTime = (this.estBlockInTime !== null ? builder.createString(this.estBlockInTime!) : 0);
  const actualBlockInTime = (this.actualBlockInTime !== null ? builder.createString(this.actualBlockInTime!) : 0);
  const arrPurposeCode = (this.arrPurposeCode !== null ? builder.createString(this.arrPurposeCode!) : 0);
  const dhd = (this.dhd !== null ? builder.createString(this.dhd!) : 0);
  const dhdReason = (this.dhdReason !== null ? builder.createString(this.dhdReason!) : 0);
  const aircraftEvent = (this.aircraftEvent !== null ? builder.createString(this.aircraftEvent!) : 0);
  const soe = (this.soe !== null ? builder.createString(this.soe!) : 0);
  const rawFileURI = (this.rawFileURI !== null ? builder.createString(this.rawFileURI!) : 0);
  const papersVersion = (this.papersVersion !== null ? builder.createString(this.papersVersion!) : 0);
  const filename = (this.filename !== null ? builder.createString(this.filename!) : 0);
  const missionUpdate = (this.missionUpdate !== null ? builder.createString(this.missionUpdate!) : 0);
  const delayCode = (this.delayCode !== null ? builder.createString(this.delayCode!) : 0);
  const commanderName = (this.commanderName !== null ? builder.createString(this.commanderName!) : 0);
  const fmDeskNum = (this.fmDeskNum !== null ? builder.createString(this.fmDeskNum!) : 0);
  const fmName = (this.fmName !== null ? builder.createString(this.fmName!) : 0);
  const parkingLoc = (this.parkingLoc !== null ? builder.createString(this.parkingLoc!) : 0);
  const objectiveRemarks = (this.objectiveRemarks !== null ? builder.createString(this.objectiveRemarks!) : 0);
  const aircraftRemarks = (this.aircraftRemarks !== null ? builder.createString(this.aircraftRemarks!) : 0);
  const scheduleRemarks = (this.scheduleRemarks !== null ? builder.createString(this.scheduleRemarks!) : 0);
  const resultRemarks = (this.resultRemarks !== null ? builder.createString(this.resultRemarks!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const crew = (this.crew !== null ? builder.createString(this.crew!) : 0);
  const sortiePPR = AircraftSortie_Full.createSortiePprVector(builder, builder.createObjectOffsetList(this.sortiePPR));

  return AircraftSortie_Full.createAircraftSortie_Full(builder,
    id,
    classificationMarking,
    origSortieId,
    idAircraft,
    aircraftAltId,
    tailNumber,
    aircraftMDS,
    aircraftADSB,
    sortieDate,
    this.lineNumber,
    idMission,
    missionId,
    amcMsnNum,
    amcMsnType,
    callSign,
    jcsPriority,
    primarySCL,
    secondarySCL,
    reqConfig,
    cargoConfig,
    this.fuelReq,
    this.oxyReqCrew,
    this.oxyOnCrew,
    this.oxyReqPax,
    this.oxyOnPax,
    alertStatusCode,
    this.alertStatus,
    currentState,
    this.depItinerary,
    depICAO,
    depIATA,
    depFAA,
    plannedDepTime,
    estDepTime,
    actualDepTime,
    estBlockOutTime,
    actualBlockOutTime,
    depPurposeCode,
    this.arrItinerary,
    arrICAO,
    arrIATA,
    arrFAA,
    plannedArrTime,
    estArrTime,
    actualArrTime,
    estBlockInTime,
    actualBlockInTime,
    arrPurposeCode,
    dhd,
    dhdReason,
    aircraftEvent,
    soe,
    this.legNum,
    this.flightTime,
    this.gndTime,
    rawFileURI,
    papersVersion,
    filename,
    this.filesize,
    this.paperStatus,
    this.pprStatus,
    missionUpdate,
    delayCode,
    commanderName,
    fmDeskNum,
    fmName,
    this.rvnReq,
    this.passengers,
    parkingLoc,
    objectiveRemarks,
    aircraftRemarks,
    scheduleRemarks,
    resultRemarks,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    sourceDL,
    source,
    origin,
    this.dataMode,
    origNetwork,
    crew,
    sortiePPR
  );
}
}
