// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GroundImagery_Ingest_dataMode_Enum } from './ground-imagery-ingest-data-mode-enum.js';


/**
 * /// Imagery of terrestrial regions from on-orbit, air, and other sensors.
 */
export class GroundImagery_Ingest implements flatbuffers.IUnpackableObject<GroundImagery_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GroundImagery_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGroundImagery_Ingest(bb:flatbuffers.ByteBuffer, obj?:GroundImagery_Ingest):GroundImagery_Ingest {
  return (obj || new GroundImagery_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGroundImagery_Ingest(bb:flatbuffers.ByteBuffer, obj?:GroundImagery_Ingest):GroundImagery_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GroundImagery_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('GROU');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: GROUNDIMAGERY-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional ID of the sensor that produced this ground image.
 * Example: /// Example: SENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Timestamp the image was captured/produced.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
imageTime():string|null
imageTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imageTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the image file.
 * Example: /// Example: Example file name
 * Constraints: Minimum length = 1, Maximum length = 128
 */
filename():string|null
filename(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
filename(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lon/lat pairs) of the image as projected on the ground in geoJSON or geoText format. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both regionText and regionGeoJSON fields appropriately. When omitted, regionText or regionGeoJSON is expected.
 * Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
 * Constraints: Minimum length = 0, Maximum length = 65535
 */
region():string|null
region(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
region(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
 * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
 * Constraints: Minimum length = 0, Maximum length = 65535
 */
regionText():string|null
regionText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
regionText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
 * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
 * Constraints: Minimum length = 0, Maximum length = 65535
 */
regionGeoJson():string|null
regionGeoJson(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
regionGeoJson(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of region as projected on the ground.
 * Example: /// Example: Polygon
 * Constraints: Minimum length = 0, Maximum length = 64
 */
regionType():string|null
regionType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
regionType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of dimensions of the geometry depicted by region.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
regionNdims():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Geographical spatial_ref_sys for region.
 * Example: /// Example: 4326
 * Constraints: No constraints specified.
 */
regionSrid():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
 * Example: /// Example: SUBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
subjectId():string|null
subjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
subjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional name/description associated with this image.
 * Example: /// Example: Example name
 * Constraints: Minimum length = 0, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():GroundImagery_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : GroundImagery_Ingest_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional array of keywords for this image.
 * Example: /// Example: ['KEYWORD1', 'KEYWORD2']
 * Constraints: No constraints specified.
 */
keywords(index: number):string
keywords(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
keywords(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

keywordsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Description and notes of the image.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional, field indicating type of image, NITF, PNG, etc.
 * Example: /// Example: PNG
 * Constraints: Minimum length = 1, Maximum length = 16
 */
format():string|null
format(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
format(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
 * Example: /// Example: 0
 * Constraints: No constraints specified.
 */
filesize():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

/**
 * MD5 value of the file. The ingest/create operation will automatically generate the value.
 * Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
 * Constraints: Minimum length = 1, Maximum length = 256
 */
checksumValue():string|null
checksumValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
checksumValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startGroundImagery_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(28);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idSensorOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addImageTime(builder:flatbuffers.Builder, imageTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, imageTimeOffset, 0);
}

static addFilename(builder:flatbuffers.Builder, filenameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, filenameOffset, 0);
}

static addRegion(builder:flatbuffers.Builder, regionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, regionOffset, 0);
}

static addRegionText(builder:flatbuffers.Builder, regionTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, regionTextOffset, 0);
}

static addRegionGeoJson(builder:flatbuffers.Builder, regionGeoJsonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, regionGeoJsonOffset, 0);
}

static addRegionType(builder:flatbuffers.Builder, regionTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, regionTypeOffset, 0);
}

static addRegionNdims(builder:flatbuffers.Builder, regionNdims:number) {
  builder.addFieldInt32(9, regionNdims, 0);
}

static addRegionSrid(builder:flatbuffers.Builder, regionSrid:number) {
  builder.addFieldInt32(10, regionSrid, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, origSensorIdOffset, 0);
}

static addSubjectId(builder:flatbuffers.Builder, subjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, subjectIdOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, nameOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, origNetworkOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, sourceDlOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:GroundImagery_Ingest_dataMode_Enum) {
  builder.addFieldInt8(18, dataMode, GroundImagery_Ingest_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, createdByOffset, 0);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, transactionIdOffset, 0);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addKeywords(builder:flatbuffers.Builder, keywordsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, keywordsOffset, 0);
}

static createKeywordsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeywordsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, notesOffset, 0);
}

static addFormat(builder:flatbuffers.Builder, formatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, formatOffset, 0);
}

static addFilesize(builder:flatbuffers.Builder, filesize:bigint) {
  builder.addFieldInt64(26, filesize, BigInt('0'));
}

static addChecksumValue(builder:flatbuffers.Builder, checksumValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, checksumValueOffset, 0);
}

static endGroundImagery_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishGroundImagery_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'GROU');
}

static finishSizePrefixedGroundImagery_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'GROU', true);
}

static createGroundImagery_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, imageTimeOffset:flatbuffers.Offset, filenameOffset:flatbuffers.Offset, regionOffset:flatbuffers.Offset, regionTextOffset:flatbuffers.Offset, regionGeoJsonOffset:flatbuffers.Offset, regionTypeOffset:flatbuffers.Offset, regionNdims:number, regionSrid:number, origSensorIdOffset:flatbuffers.Offset, subjectIdOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, dataMode:GroundImagery_Ingest_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, tagsOffset:flatbuffers.Offset, keywordsOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, formatOffset:flatbuffers.Offset, filesize:bigint, checksumValueOffset:flatbuffers.Offset):flatbuffers.Offset {
  GroundImagery_Ingest.startGroundImagery_Ingest(builder);
  GroundImagery_Ingest.addId(builder, idOffset);
  GroundImagery_Ingest.addIdSensor(builder, idSensorOffset);
  GroundImagery_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  GroundImagery_Ingest.addImageTime(builder, imageTimeOffset);
  GroundImagery_Ingest.addFilename(builder, filenameOffset);
  GroundImagery_Ingest.addRegion(builder, regionOffset);
  GroundImagery_Ingest.addRegionText(builder, regionTextOffset);
  GroundImagery_Ingest.addRegionGeoJson(builder, regionGeoJsonOffset);
  GroundImagery_Ingest.addRegionType(builder, regionTypeOffset);
  GroundImagery_Ingest.addRegionNdims(builder, regionNdims);
  GroundImagery_Ingest.addRegionSrid(builder, regionSrid);
  GroundImagery_Ingest.addOrigSensorId(builder, origSensorIdOffset);
  GroundImagery_Ingest.addSubjectId(builder, subjectIdOffset);
  GroundImagery_Ingest.addName(builder, nameOffset);
  GroundImagery_Ingest.addSource(builder, sourceOffset);
  GroundImagery_Ingest.addOrigin(builder, originOffset);
  GroundImagery_Ingest.addOrigNetwork(builder, origNetworkOffset);
  GroundImagery_Ingest.addSourceDl(builder, sourceDlOffset);
  GroundImagery_Ingest.addDataMode(builder, dataMode);
  GroundImagery_Ingest.addCreatedAt(builder, createdAtOffset);
  GroundImagery_Ingest.addCreatedBy(builder, createdByOffset);
  GroundImagery_Ingest.addTransactionId(builder, transactionIdOffset);
  GroundImagery_Ingest.addTags(builder, tagsOffset);
  GroundImagery_Ingest.addKeywords(builder, keywordsOffset);
  GroundImagery_Ingest.addNotes(builder, notesOffset);
  GroundImagery_Ingest.addFormat(builder, formatOffset);
  GroundImagery_Ingest.addFilesize(builder, filesize);
  GroundImagery_Ingest.addChecksumValue(builder, checksumValueOffset);
  return GroundImagery_Ingest.endGroundImagery_Ingest(builder);
}

unpack(): GroundImagery_IngestT {
  return new GroundImagery_IngestT(
    this.id(),
    this.idSensor(),
    this.classificationMarking(),
    this.imageTime(),
    this.filename(),
    this.region(),
    this.regionText(),
    this.regionGeoJson(),
    this.regionType(),
    this.regionNdims(),
    this.regionSrid(),
    this.origSensorId(),
    this.subjectId(),
    this.name(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.sourceDl(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.transactionId(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length()),
    this.bb!.createScalarList<string>(this.keywords.bind(this), this.keywords_Length()),
    this.notes(),
    this.format(),
    this.filesize(),
    this.checksumValue()
  );
}


unpackTo(_o: GroundImagery_IngestT): void {
  _o.id = this.id();
  _o.idSensor = this.idSensor();
  _o.classificationMarking = this.classificationMarking();
  _o.imageTime = this.imageTime();
  _o.filename = this.filename();
  _o.region = this.region();
  _o.regionText = this.regionText();
  _o.regionGeoJSON = this.regionGeoJson();
  _o.regionType = this.regionType();
  _o.regionNDims = this.regionNdims();
  _o.regionSRid = this.regionSrid();
  _o.origSensorId = this.origSensorId();
  _o.subjectId = this.subjectId();
  _o.name = this.name();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.sourceDL = this.sourceDl();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.transactionId = this.transactionId();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length());
  _o.keywords = this.bb!.createScalarList<string>(this.keywords.bind(this), this.keywords_Length());
  _o.notes = this.notes();
  _o.format = this.format();
  _o.filesize = this.filesize();
  _o.checksumValue = this.checksumValue();
}
}

export class GroundImagery_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public imageTime: string|Uint8Array|null = null,
  public filename: string|Uint8Array|null = null,
  public region: string|Uint8Array|null = null,
  public regionText: string|Uint8Array|null = null,
  public regionGeoJSON: string|Uint8Array|null = null,
  public regionType: string|Uint8Array|null = null,
  public regionNDims: number = 0,
  public regionSRid: number = 0,
  public origSensorId: string|Uint8Array|null = null,
  public subjectId: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public dataMode: GroundImagery_Ingest_dataMode_Enum = GroundImagery_Ingest_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public transactionId: string|Uint8Array|null = null,
  public tags: (string)[] = [],
  public keywords: (string)[] = [],
  public notes: string|Uint8Array|null = null,
  public format: string|Uint8Array|null = null,
  public filesize: bigint = BigInt('0'),
  public checksumValue: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const imageTime = (this.imageTime !== null ? builder.createString(this.imageTime!) : 0);
  const filename = (this.filename !== null ? builder.createString(this.filename!) : 0);
  const region = (this.region !== null ? builder.createString(this.region!) : 0);
  const regionText = (this.regionText !== null ? builder.createString(this.regionText!) : 0);
  const regionGeoJSON = (this.regionGeoJSON !== null ? builder.createString(this.regionGeoJSON!) : 0);
  const regionType = (this.regionType !== null ? builder.createString(this.regionType!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const subjectId = (this.subjectId !== null ? builder.createString(this.subjectId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const tags = GroundImagery_Ingest.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const keywords = GroundImagery_Ingest.createKeywordsVector(builder, builder.createObjectOffsetList(this.keywords));
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const format = (this.format !== null ? builder.createString(this.format!) : 0);
  const checksumValue = (this.checksumValue !== null ? builder.createString(this.checksumValue!) : 0);

  return GroundImagery_Ingest.createGroundImagery_Ingest(builder,
    id,
    idSensor,
    classificationMarking,
    imageTime,
    filename,
    region,
    regionText,
    regionGeoJSON,
    regionType,
    this.regionNDims,
    this.regionSRid,
    origSensorId,
    subjectId,
    name,
    source,
    origin,
    origNetwork,
    sourceDL,
    this.dataMode,
    createdAt,
    createdBy,
    transactionId,
    tags,
    keywords,
    notes,
    format,
    this.filesize,
    checksumValue
  );
}
}
