// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SortiePPR_Ingest_dataMode_Enum } from './sortie-ppr-ingest-data-mode-enum.js';
import { SortiePPR_Ingest_type_Enum } from './sortie-ppr-ingest-type-enum.js';


/**
 * /// SortiePPR is a regulatory requirement where operators must obtain permissions to full operational access to a runway, taxiway, or airport service.
 */
export class SortiePPR_Ingest implements flatbuffers.IUnpackableObject<SortiePPR_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SortiePPR_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSortiePPR_Ingest(bb:flatbuffers.ByteBuffer, obj?:SortiePPR_Ingest):SortiePPR_Ingest {
  return (obj || new SortiePPR_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSortiePPR_Ingest(bb:flatbuffers.ByteBuffer, obj?:SortiePPR_Ingest):SortiePPR_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SortiePPR_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SORT');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SORTIEPPR-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Aircraft Sortie associated with this prior permission required (PPR) record.
 * Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idSortie():string|null
idSortie(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSortie(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalId():string|null
externalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The prior permission required (PPR) number issued by the airfield for a sortie.
 * Example: /// Example: 07-21-07W
 * Constraints: Minimum length = 0, Maximum length = 16
 */
number():string|null
number(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
number(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the prior permission required (PPR) valid window begins, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the prior permission required (PPR) valid window ends, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
endTime():string|null
endTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The username of the prior permission required (PPR) requestor.
 * Example: /// Example: jsmith1
 * Constraints: Minimum length = 0, Maximum length = 32
 */
requestor():string|null
requestor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
requestor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the prior permission required (PPR) grantor.
 * Example: /// Example: SMITH
 * Constraints: Minimum length = 0, Maximum length = 32
 */
grantor():string|null
grantor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
grantor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of prior permission required (PPR) for a sortie (M - Military or C - Civilian). Enum: [M, C].
 * Example: /// Example: M
 * Constraints: Minimum length = 0, Maximum length = 1
 */
type():SortiePPR_Ingest_type_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SortiePPR_Ingest_type_Enum.M;
}

/**
 * Remarks concerning the prior permission required (PPR) for a sortie.
 * Example: /// Example: PPR remark
 * Constraints: Minimum length = 0, Maximum length = 512
 */
remarks():string|null
remarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
remarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SortiePPR_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SortiePPR_Ingest_dataMode_Enum.REAL;
}

static startSortiePPR_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(18);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdSortie(builder:flatbuffers.Builder, idSortieOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idSortieOffset, 0);
}

static addExternalId(builder:flatbuffers.Builder, externalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, externalIdOffset, 0);
}

static addNumber(builder:flatbuffers.Builder, numberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, numberOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, startTimeOffset, 0);
}

static addEndTime(builder:flatbuffers.Builder, endTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, endTimeOffset, 0);
}

static addRequestor(builder:flatbuffers.Builder, requestorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, requestorOffset, 0);
}

static addGrantor(builder:flatbuffers.Builder, grantorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, grantorOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:SortiePPR_Ingest_type_Enum) {
  builder.addFieldInt8(9, type, SortiePPR_Ingest_type_Enum.M);
}

static addRemarks(builder:flatbuffers.Builder, remarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, remarksOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, createdByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SortiePPR_Ingest_dataMode_Enum) {
  builder.addFieldInt8(17, dataMode, SortiePPR_Ingest_dataMode_Enum.REAL);
}

static endSortiePPR_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSortiePPR_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SORT');
}

static finishSizePrefixedSortiePPR_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SORT', true);
}

static createSortiePPR_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idSortieOffset:flatbuffers.Offset, externalIdOffset:flatbuffers.Offset, numberOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, endTimeOffset:flatbuffers.Offset, requestorOffset:flatbuffers.Offset, grantorOffset:flatbuffers.Offset, type:SortiePPR_Ingest_type_Enum, remarksOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:SortiePPR_Ingest_dataMode_Enum):flatbuffers.Offset {
  SortiePPR_Ingest.startSortiePPR_Ingest(builder);
  SortiePPR_Ingest.addId(builder, idOffset);
  SortiePPR_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  SortiePPR_Ingest.addIdSortie(builder, idSortieOffset);
  SortiePPR_Ingest.addExternalId(builder, externalIdOffset);
  SortiePPR_Ingest.addNumber(builder, numberOffset);
  SortiePPR_Ingest.addStartTime(builder, startTimeOffset);
  SortiePPR_Ingest.addEndTime(builder, endTimeOffset);
  SortiePPR_Ingest.addRequestor(builder, requestorOffset);
  SortiePPR_Ingest.addGrantor(builder, grantorOffset);
  SortiePPR_Ingest.addType(builder, type);
  SortiePPR_Ingest.addRemarks(builder, remarksOffset);
  SortiePPR_Ingest.addCreatedAt(builder, createdAtOffset);
  SortiePPR_Ingest.addCreatedBy(builder, createdByOffset);
  SortiePPR_Ingest.addSourceDl(builder, sourceDlOffset);
  SortiePPR_Ingest.addSource(builder, sourceOffset);
  SortiePPR_Ingest.addOrigin(builder, originOffset);
  SortiePPR_Ingest.addOrigNetwork(builder, origNetworkOffset);
  SortiePPR_Ingest.addDataMode(builder, dataMode);
  return SortiePPR_Ingest.endSortiePPR_Ingest(builder);
}

unpack(): SortiePPR_IngestT {
  return new SortiePPR_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idSortie(),
    this.externalId(),
    this.number(),
    this.startTime(),
    this.endTime(),
    this.requestor(),
    this.grantor(),
    this.type(),
    this.remarks(),
    this.createdAt(),
    this.createdBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: SortiePPR_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idSortie = this.idSortie();
  _o.externalId = this.externalId();
  _o.number = this.number();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.requestor = this.requestor();
  _o.grantor = this.grantor();
  _o.type = this.type();
  _o.remarks = this.remarks();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class SortiePPR_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idSortie: string|Uint8Array|null = null,
  public externalId: string|Uint8Array|null = null,
  public number: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public endTime: string|Uint8Array|null = null,
  public requestor: string|Uint8Array|null = null,
  public grantor: string|Uint8Array|null = null,
  public type: SortiePPR_Ingest_type_Enum = SortiePPR_Ingest_type_Enum.M,
  public remarks: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: SortiePPR_Ingest_dataMode_Enum = SortiePPR_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idSortie = (this.idSortie !== null ? builder.createString(this.idSortie!) : 0);
  const externalId = (this.externalId !== null ? builder.createString(this.externalId!) : 0);
  const number = (this.number !== null ? builder.createString(this.number!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const endTime = (this.endTime !== null ? builder.createString(this.endTime!) : 0);
  const requestor = (this.requestor !== null ? builder.createString(this.requestor!) : 0);
  const grantor = (this.grantor !== null ? builder.createString(this.grantor!) : 0);
  const remarks = (this.remarks !== null ? builder.createString(this.remarks!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return SortiePPR_Ingest.createSortiePPR_Ingest(builder,
    id,
    classificationMarking,
    idSortie,
    externalId,
    number,
    startTime,
    endTime,
    requestor,
    grantor,
    this.type,
    remarks,
    createdAt,
    createdBy,
    sourceDL,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
