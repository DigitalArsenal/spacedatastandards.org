// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
 */
export class DataLinkOps_Abridged implements flatbuffers.IUnpackableObject<DataLinkOps_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataLinkOps_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataLinkOps_Abridged(bb:flatbuffers.ByteBuffer, obj?:DataLinkOps_Abridged):DataLinkOps_Abridged {
  return (obj || new DataLinkOps_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataLinkOps_Abridged(bb:flatbuffers.ByteBuffer, obj?:DataLinkOps_Abridged):DataLinkOps_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataLinkOps_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DATA');
}

/**
 * Name of the data link.
 * Example: /// Example: Link-16
 * Constraints: Minimum length = 0, Maximum length = 24
 */
linkName():string|null
linkName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linkName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The start of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-07T13:55:43.123Z
 * Constraints: No constraints specified.
 */
linkStartTime():string|null
linkStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linkStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The end of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-08T13:55:43.123Z
 * Constraints: No constraints specified.
 */
linkStopTime():string|null
linkStopTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linkStopTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A qualifier for the end of the effective time period of this data link, such as AFTER, ASOF, NLT, etc. Used with field linkStopTimeMod to indicate a relative time.
 * Example: /// Example: AFTER
 * Constraints: Minimum length = 0, Maximum length = 8
 */
linkStopTimeMod():string|null
linkStopTimeMod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linkStopTimeMod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Detailed characteristics of the data link.
 * Example: /// Example: Link details
 * Constraints: Minimum length = 0, Maximum length = 3000
 */
linkDetails():string|null
linkDetails(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linkDetails(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDataLinkOps_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addLinkName(builder:flatbuffers.Builder, linkNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, linkNameOffset, 0);
}

static addLinkStartTime(builder:flatbuffers.Builder, linkStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, linkStartTimeOffset, 0);
}

static addLinkStopTime(builder:flatbuffers.Builder, linkStopTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, linkStopTimeOffset, 0);
}

static addLinkStopTimeMod(builder:flatbuffers.Builder, linkStopTimeModOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, linkStopTimeModOffset, 0);
}

static addLinkDetails(builder:flatbuffers.Builder, linkDetailsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, linkDetailsOffset, 0);
}

static endDataLinkOps_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDataLinkOps_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA');
}

static finishSizePrefixedDataLinkOps_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA', true);
}

static createDataLinkOps_Abridged(builder:flatbuffers.Builder, linkNameOffset:flatbuffers.Offset, linkStartTimeOffset:flatbuffers.Offset, linkStopTimeOffset:flatbuffers.Offset, linkStopTimeModOffset:flatbuffers.Offset, linkDetailsOffset:flatbuffers.Offset):flatbuffers.Offset {
  DataLinkOps_Abridged.startDataLinkOps_Abridged(builder);
  DataLinkOps_Abridged.addLinkName(builder, linkNameOffset);
  DataLinkOps_Abridged.addLinkStartTime(builder, linkStartTimeOffset);
  DataLinkOps_Abridged.addLinkStopTime(builder, linkStopTimeOffset);
  DataLinkOps_Abridged.addLinkStopTimeMod(builder, linkStopTimeModOffset);
  DataLinkOps_Abridged.addLinkDetails(builder, linkDetailsOffset);
  return DataLinkOps_Abridged.endDataLinkOps_Abridged(builder);
}

unpack(): DataLinkOps_AbridgedT {
  return new DataLinkOps_AbridgedT(
    this.linkName(),
    this.linkStartTime(),
    this.linkStopTime(),
    this.linkStopTimeMod(),
    this.linkDetails()
  );
}


unpackTo(_o: DataLinkOps_AbridgedT): void {
  _o.linkName = this.linkName();
  _o.linkStartTime = this.linkStartTime();
  _o.linkStopTime = this.linkStopTime();
  _o.linkStopTimeMod = this.linkStopTimeMod();
  _o.linkDetails = this.linkDetails();
}
}

export class DataLinkOps_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public linkName: string|Uint8Array|null = null,
  public linkStartTime: string|Uint8Array|null = null,
  public linkStopTime: string|Uint8Array|null = null,
  public linkStopTimeMod: string|Uint8Array|null = null,
  public linkDetails: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const linkName = (this.linkName !== null ? builder.createString(this.linkName!) : 0);
  const linkStartTime = (this.linkStartTime !== null ? builder.createString(this.linkStartTime!) : 0);
  const linkStopTime = (this.linkStopTime !== null ? builder.createString(this.linkStopTime!) : 0);
  const linkStopTimeMod = (this.linkStopTimeMod !== null ? builder.createString(this.linkStopTimeMod!) : 0);
  const linkDetails = (this.linkDetails !== null ? builder.createString(this.linkDetails!) : 0);

  return DataLinkOps_Abridged.createDataLinkOps_Abridged(builder,
    linkName,
    linkStartTime,
    linkStopTime,
    linkStopTimeMod,
    linkDetails
  );
}
}
