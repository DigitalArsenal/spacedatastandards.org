// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Information regarding the recovery vehicle.
 */
export class PersonnelRecoveryVehicle_Ingest implements flatbuffers.IUnpackableObject<PersonnelRecoveryVehicle_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PersonnelRecoveryVehicle_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPersonnelRecoveryVehicle_Ingest(bb:flatbuffers.ByteBuffer, obj?:PersonnelRecoveryVehicle_Ingest):PersonnelRecoveryVehicle_Ingest {
  return (obj || new PersonnelRecoveryVehicle_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPersonnelRecoveryVehicle_Ingest(bb:flatbuffers.ByteBuffer, obj?:PersonnelRecoveryVehicle_Ingest):PersonnelRecoveryVehicle_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PersonnelRecoveryVehicle_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('PERS');
}

/**
 * The call sign of the recovery vehicle.
 * Example: /// Example: FALCO
 * Constraints: Minimum length = 0, Maximum length = 128
 */
callSign():string|null
callSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The particular type of recovery vehicle to be used.
 * Example: /// Example: C17
 * Constraints: Minimum length = 0, Maximum length = 64
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Primary contact frequency of the recovery vehicle.
 * Example: /// Example: 34.55
 * Constraints: No constraints specified.
 */
primaryFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The number of objects or units moving as a group and represented as a single entity in this recovery vehicle message. If null, the strength is assumed to represent a single object.  Note that if this recovery derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
strength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startPersonnelRecoveryVehicle_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addCallSign(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, callSignOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, typeOffset, 0);
}

static addPrimaryFreq(builder:flatbuffers.Builder, primaryFreq:number) {
  builder.addFieldFloat64(2, primaryFreq, 0.0);
}

static addStrength(builder:flatbuffers.Builder, strength:number) {
  builder.addFieldInt32(3, strength, 0);
}

static endPersonnelRecoveryVehicle_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPersonnelRecoveryVehicle_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'PERS');
}

static finishSizePrefixedPersonnelRecoveryVehicle_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'PERS', true);
}

static createPersonnelRecoveryVehicle_Ingest(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, primaryFreq:number, strength:number):flatbuffers.Offset {
  PersonnelRecoveryVehicle_Ingest.startPersonnelRecoveryVehicle_Ingest(builder);
  PersonnelRecoveryVehicle_Ingest.addCallSign(builder, callSignOffset);
  PersonnelRecoveryVehicle_Ingest.addType(builder, typeOffset);
  PersonnelRecoveryVehicle_Ingest.addPrimaryFreq(builder, primaryFreq);
  PersonnelRecoveryVehicle_Ingest.addStrength(builder, strength);
  return PersonnelRecoveryVehicle_Ingest.endPersonnelRecoveryVehicle_Ingest(builder);
}

unpack(): PersonnelRecoveryVehicle_IngestT {
  return new PersonnelRecoveryVehicle_IngestT(
    this.callSign(),
    this.type(),
    this.primaryFreq(),
    this.strength()
  );
}


unpackTo(_o: PersonnelRecoveryVehicle_IngestT): void {
  _o.callSign = this.callSign();
  _o.type = this.type();
  _o.primaryFreq = this.primaryFreq();
  _o.strength = this.strength();
}
}

export class PersonnelRecoveryVehicle_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public callSign: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public primaryFreq: number = 0.0,
  public strength: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const callSign = (this.callSign !== null ? builder.createString(this.callSign!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);

  return PersonnelRecoveryVehicle_Ingest.createPersonnelRecoveryVehicle_Ingest(builder,
    callSign,
    type,
    this.primaryFreq,
    this.strength
  );
}
}
