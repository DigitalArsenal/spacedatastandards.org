// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Medical condition causation information.
 */
export class EvacEtiology_Ingest implements flatbuffers.IUnpackableObject<EvacEtiology_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EvacEtiology_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEvacEtiology_Ingest(bb:flatbuffers.ByteBuffer, obj?:EvacEtiology_Ingest):EvacEtiology_Ingest {
  return (obj || new EvacEtiology_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEvacEtiology_Ingest(bb:flatbuffers.ByteBuffer, obj?:EvacEtiology_Ingest):EvacEtiology_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EvacEtiology_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EVAC');
}

/**
 * The cause or manner of causation of the medical condition.  Intended as, but not constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE, BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN THERMAL, etc.).
 * Example: /// Example: BURN
 * Constraints: Minimum length = 0, Maximum length = 32
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The body part or location affected from the etiology.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
 * Example: /// Example: ARM LEFT FRONT
 * Constraints: Minimum length = 0, Maximum length = 32
 */
bodyPart():string|null
bodyPart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bodyPart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Datetime of the discovery of the etiology state in ISO 8601 UTC format.
 * Example: /// Example: 2021-10-16T16:00:00.123Z
 * Constraints: No constraints specified.
 */
time():string|null
time(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
time(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional comments on the patient's etiology information.
 * Example: /// Example: Comments on the etiology info.
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
comments():string|null
comments(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
comments(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEvacEtiology_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addBodyPart(builder:flatbuffers.Builder, bodyPartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, bodyPartOffset, 0);
}

static addTime(builder:flatbuffers.Builder, timeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, timeOffset, 0);
}

static addComments(builder:flatbuffers.Builder, commentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, commentsOffset, 0);
}

static endEvacEtiology_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEvacEtiology_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC');
}

static finishSizePrefixedEvacEtiology_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC', true);
}

static createEvacEtiology_Ingest(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, bodyPartOffset:flatbuffers.Offset, timeOffset:flatbuffers.Offset, commentsOffset:flatbuffers.Offset):flatbuffers.Offset {
  EvacEtiology_Ingest.startEvacEtiology_Ingest(builder);
  EvacEtiology_Ingest.addType(builder, typeOffset);
  EvacEtiology_Ingest.addBodyPart(builder, bodyPartOffset);
  EvacEtiology_Ingest.addTime(builder, timeOffset);
  EvacEtiology_Ingest.addComments(builder, commentsOffset);
  return EvacEtiology_Ingest.endEvacEtiology_Ingest(builder);
}

unpack(): EvacEtiology_IngestT {
  return new EvacEtiology_IngestT(
    this.type(),
    this.bodyPart(),
    this.time(),
    this.comments()
  );
}


unpackTo(_o: EvacEtiology_IngestT): void {
  _o.type = this.type();
  _o.bodyPart = this.bodyPart();
  _o.time = this.time();
  _o.comments = this.comments();
}
}

export class EvacEtiology_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public type: string|Uint8Array|null = null,
  public bodyPart: string|Uint8Array|null = null,
  public time: string|Uint8Array|null = null,
  public comments: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const bodyPart = (this.bodyPart !== null ? builder.createString(this.bodyPart!) : 0);
  const time = (this.time !== null ? builder.createString(this.time!) : 0);
  const comments = (this.comments !== null ? builder.createString(this.comments!) : 0);

  return EvacEtiology_Ingest.createEvacEtiology_Ingest(builder,
    type,
    bodyPart,
    time,
    comments
  );
}
}
