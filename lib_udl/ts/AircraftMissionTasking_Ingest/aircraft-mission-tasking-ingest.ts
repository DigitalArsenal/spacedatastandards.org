// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
 */
export class AircraftMissionTasking_Ingest implements flatbuffers.IUnpackableObject<AircraftMissionTasking_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AircraftMissionTasking_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAircraftMissionTasking_Ingest(bb:flatbuffers.ByteBuffer, obj?:AircraftMissionTasking_Ingest):AircraftMissionTasking_Ingest {
  return (obj || new AircraftMissionTasking_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAircraftMissionTasking_Ingest(bb:flatbuffers.ByteBuffer, obj?:AircraftMissionTasking_Ingest):AircraftMissionTasking_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AircraftMissionTasking_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRC');
}

/**
 * The country code responsible for conducting this aircraft mission tasking for the exercise or operation.
 * Example: /// Example: US
 * Constraints: Minimum length = 1, Maximum length = 4
 */
countryCode():string|null
countryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The service tasked with conducting this aircraft mission tasking for the exercise or operation.
 * Example: /// Example: A
 * Constraints: Minimum length = 1, Maximum length = 1
 */
taskedService():string|null
taskedService(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskedService(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The designator of the unit that is tasked to perform this aircraft mission tasking.
 * Example: /// Example: AMPHIB5DIV
 * Constraints: Minimum length = 1, Maximum length = 36
 */
unitDesignator():string|null
unitDesignator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unitDesignator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The tasked units location expressed as an ICAO or a place name.
 * Example: /// Example: ICAO:KXXQ
 * Constraints: Minimum length = 0, Maximum length = 36
 */
unitLocName():string|null
unitLocName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unitLocName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * An indicator of whether a mission is or will be a residual mission.
 * Example: /// Example: N
 * Constraints: Minimum length = 0, Maximum length = 1
 */
resMsnInd():string|null
resMsnInd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
resMsnInd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The AMC number assigned to identify one aircraft from another.
 * Example: /// Example: AMC:JJXD123HA045
 * Constraints: Minimum length = 0, Maximum length = 16
 */
amcMsnNum():string|null
amcMsnNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
amcMsnNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The identifier for the composite set of missions for this operation/exercise.
 * Example: /// Example: ZZ
 * Constraints: Minimum length = 0, Maximum length = 8
 */
pkgId():string|null
pkgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pkgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The commander responsible for the planning and execution of the forces necessary to achieve desired objectives.
 * Example: /// Example: MC
 * Constraints: Minimum length = 0, Maximum length = 8
 */
msnCommander():string|null
msnCommander(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msnCommander(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The mission number assigned to this mission.
 * Example: /// Example: D123HA
 * Constraints: Minimum length = 0, Maximum length = 8
 */
msnNum():string|null
msnNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msnNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The code for the preferred type or designator for a tasked air mission.
 * Example: /// Example: CAS
 * Constraints: Minimum length = 0, Maximum length = 8
 */
priMsnType():string|null
priMsnType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
priMsnType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The code for the alternative type of a tasked air mission.
 * Example: /// Example: SEAD
 * Constraints: Minimum length = 0, Maximum length = 8
 */
secMsnType():string|null
secMsnType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
secMsnType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The readiness status expressed in time (minutes) for an aircraft to be airborne after the launch order is received or the time required for a missile unit to assume battle stations.
 * Example: /// Example: 30
 * Constraints: No constraints specified.
 */
alertStatus():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The location or name specified for the departure of the tasked air mission.
 * Example: /// Example: ICAO:KBIF
 * Constraints: Minimum length = 0, Maximum length = 36
 */
depLocName():string|null
depLocName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depLocName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The departure location specified in UTM (100 meter) coordinates for the tasked air mission.
 * Example: /// Example: 32WDL123123
 * Constraints: Minimum length = 0, Maximum length = 36
 */
depLocUtm():string|null
depLocUtm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depLocUtm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
 * Example: /// Example: 35.123
 * Constraints: No constraints specified.
 */
depLocLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
 * Example: /// Example: 79.2354
 * Constraints: No constraints specified.
 */
depLocLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The time of departure for the tasked air mission in ISO8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-10-25T12:00:00.123Z
 * Constraints: No constraints specified.
 */
depTime():string|null
depTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * An array of locations specified for the recovery of the tasked air mission represented by varying formats.
 * Example: /// Example: ['ARRLOC:KBIF', 'ARRLOC:KDZ7']
 * Constraints: No constraints specified.
 */
rcvyLocName(index: number):string
rcvyLocName(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rcvyLocName(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rcvyLocNameLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * An array of recovery locations specified in UTM (100 meter) coordinates for the tasked air mission.
 * Example: /// Example: ['ARRUTMO:32WDL123123', 'ARRUTMO:32WDL321321']
 * Constraints: No constraints specified.
 */
rcvyLocUtm(index: number):string
rcvyLocUtm(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rcvyLocUtm(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rcvyLocUtmLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
 * Example: /// Example: [48.8584, 40.7554]
 * Constraints: No constraints specified.
 */
rcvyLocLat(index: number):string
rcvyLocLat(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rcvyLocLat(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rcvyLocLatLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
 * Example: /// Example: [2.2945, -73.9866]
 * Constraints: No constraints specified.
 */
rcvyLocLon(index: number):string
rcvyLocLon(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rcvyLocLon(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rcvyLocLonLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * An array of recovery times for the tasked air mission in ISO8601 UTC format with millisecond precision.
 * Example: /// Example: ['2021-10-25T16:00:00.234Z', '2021-10-26T16:00:00.234Z']
 * Constraints: No constraints specified.
 */
rcvyTime(index: number):string
rcvyTime(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rcvyTime(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rcvyTimeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A collection of the individual aircraft assigned to this aircraft mission tasking.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
indActasking(index: number):string
indActasking(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
indActasking(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

indActaskingLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A collection of aircraft mission location information for this aircraft mission tasking.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
acMsnLocSeg(index: number):string
acMsnLocSeg(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
acMsnLocSeg(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

acMsnLocSegLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startAircraftMissionTasking_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(24);
}

static addCountryCode(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, countryCodeOffset, 0);
}

static addTaskedService(builder:flatbuffers.Builder, taskedServiceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, taskedServiceOffset, 0);
}

static addUnitDesignator(builder:flatbuffers.Builder, unitDesignatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, unitDesignatorOffset, 0);
}

static addUnitLocName(builder:flatbuffers.Builder, unitLocNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, unitLocNameOffset, 0);
}

static addResMsnInd(builder:flatbuffers.Builder, resMsnIndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, resMsnIndOffset, 0);
}

static addAmcMsnNum(builder:flatbuffers.Builder, amcMsnNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, amcMsnNumOffset, 0);
}

static addPkgId(builder:flatbuffers.Builder, pkgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, pkgIdOffset, 0);
}

static addMsnCommander(builder:flatbuffers.Builder, msnCommanderOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, msnCommanderOffset, 0);
}

static addMsnNum(builder:flatbuffers.Builder, msnNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, msnNumOffset, 0);
}

static addPriMsnType(builder:flatbuffers.Builder, priMsnTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, priMsnTypeOffset, 0);
}

static addSecMsnType(builder:flatbuffers.Builder, secMsnTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, secMsnTypeOffset, 0);
}

static addAlertStatus(builder:flatbuffers.Builder, alertStatus:number) {
  builder.addFieldInt32(11, alertStatus, 0);
}

static addDepLocName(builder:flatbuffers.Builder, depLocNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, depLocNameOffset, 0);
}

static addDepLocUtm(builder:flatbuffers.Builder, depLocUtmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, depLocUtmOffset, 0);
}

static addDepLocLat(builder:flatbuffers.Builder, depLocLat:number) {
  builder.addFieldFloat64(14, depLocLat, 0.0);
}

static addDepLocLon(builder:flatbuffers.Builder, depLocLon:number) {
  builder.addFieldFloat64(15, depLocLon, 0.0);
}

static addDepTime(builder:flatbuffers.Builder, depTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, depTimeOffset, 0);
}

static addRcvyLocName(builder:flatbuffers.Builder, rcvyLocNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, rcvyLocNameOffset, 0);
}

static createRcvyLocNameVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRcvyLocNameVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRcvyLocUtm(builder:flatbuffers.Builder, rcvyLocUtmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, rcvyLocUtmOffset, 0);
}

static createRcvyLocUtmVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRcvyLocUtmVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRcvyLocLat(builder:flatbuffers.Builder, rcvyLocLatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, rcvyLocLatOffset, 0);
}

static createRcvyLocLatVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRcvyLocLatVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRcvyLocLon(builder:flatbuffers.Builder, rcvyLocLonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, rcvyLocLonOffset, 0);
}

static createRcvyLocLonVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRcvyLocLonVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRcvyTime(builder:flatbuffers.Builder, rcvyTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, rcvyTimeOffset, 0);
}

static createRcvyTimeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRcvyTimeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIndActasking(builder:flatbuffers.Builder, indActaskingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, indActaskingOffset, 0);
}

static createIndActaskingVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startIndActaskingVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAcMsnLocSeg(builder:flatbuffers.Builder, acMsnLocSegOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, acMsnLocSegOffset, 0);
}

static createAcMsnLocSegVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAcMsnLocSegVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endAircraftMissionTasking_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAircraftMissionTasking_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC');
}

static finishSizePrefixedAircraftMissionTasking_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC', true);
}

static createAircraftMissionTasking_Ingest(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset, taskedServiceOffset:flatbuffers.Offset, unitDesignatorOffset:flatbuffers.Offset, unitLocNameOffset:flatbuffers.Offset, resMsnIndOffset:flatbuffers.Offset, amcMsnNumOffset:flatbuffers.Offset, pkgIdOffset:flatbuffers.Offset, msnCommanderOffset:flatbuffers.Offset, msnNumOffset:flatbuffers.Offset, priMsnTypeOffset:flatbuffers.Offset, secMsnTypeOffset:flatbuffers.Offset, alertStatus:number, depLocNameOffset:flatbuffers.Offset, depLocUtmOffset:flatbuffers.Offset, depLocLat:number, depLocLon:number, depTimeOffset:flatbuffers.Offset, rcvyLocNameOffset:flatbuffers.Offset, rcvyLocUtmOffset:flatbuffers.Offset, rcvyLocLatOffset:flatbuffers.Offset, rcvyLocLonOffset:flatbuffers.Offset, rcvyTimeOffset:flatbuffers.Offset, indActaskingOffset:flatbuffers.Offset, acMsnLocSegOffset:flatbuffers.Offset):flatbuffers.Offset {
  AircraftMissionTasking_Ingest.startAircraftMissionTasking_Ingest(builder);
  AircraftMissionTasking_Ingest.addCountryCode(builder, countryCodeOffset);
  AircraftMissionTasking_Ingest.addTaskedService(builder, taskedServiceOffset);
  AircraftMissionTasking_Ingest.addUnitDesignator(builder, unitDesignatorOffset);
  AircraftMissionTasking_Ingest.addUnitLocName(builder, unitLocNameOffset);
  AircraftMissionTasking_Ingest.addResMsnInd(builder, resMsnIndOffset);
  AircraftMissionTasking_Ingest.addAmcMsnNum(builder, amcMsnNumOffset);
  AircraftMissionTasking_Ingest.addPkgId(builder, pkgIdOffset);
  AircraftMissionTasking_Ingest.addMsnCommander(builder, msnCommanderOffset);
  AircraftMissionTasking_Ingest.addMsnNum(builder, msnNumOffset);
  AircraftMissionTasking_Ingest.addPriMsnType(builder, priMsnTypeOffset);
  AircraftMissionTasking_Ingest.addSecMsnType(builder, secMsnTypeOffset);
  AircraftMissionTasking_Ingest.addAlertStatus(builder, alertStatus);
  AircraftMissionTasking_Ingest.addDepLocName(builder, depLocNameOffset);
  AircraftMissionTasking_Ingest.addDepLocUtm(builder, depLocUtmOffset);
  AircraftMissionTasking_Ingest.addDepLocLat(builder, depLocLat);
  AircraftMissionTasking_Ingest.addDepLocLon(builder, depLocLon);
  AircraftMissionTasking_Ingest.addDepTime(builder, depTimeOffset);
  AircraftMissionTasking_Ingest.addRcvyLocName(builder, rcvyLocNameOffset);
  AircraftMissionTasking_Ingest.addRcvyLocUtm(builder, rcvyLocUtmOffset);
  AircraftMissionTasking_Ingest.addRcvyLocLat(builder, rcvyLocLatOffset);
  AircraftMissionTasking_Ingest.addRcvyLocLon(builder, rcvyLocLonOffset);
  AircraftMissionTasking_Ingest.addRcvyTime(builder, rcvyTimeOffset);
  AircraftMissionTasking_Ingest.addIndActasking(builder, indActaskingOffset);
  AircraftMissionTasking_Ingest.addAcMsnLocSeg(builder, acMsnLocSegOffset);
  return AircraftMissionTasking_Ingest.endAircraftMissionTasking_Ingest(builder);
}

unpack(): AircraftMissionTasking_IngestT {
  return new AircraftMissionTasking_IngestT(
    this.countryCode(),
    this.taskedService(),
    this.unitDesignator(),
    this.unitLocName(),
    this.resMsnInd(),
    this.amcMsnNum(),
    this.pkgId(),
    this.msnCommander(),
    this.msnNum(),
    this.priMsnType(),
    this.secMsnType(),
    this.alertStatus(),
    this.depLocName(),
    this.depLocUtm(),
    this.depLocLat(),
    this.depLocLon(),
    this.depTime(),
    this.bb!.createScalarList<string>(this.rcvyLocName.bind(this), this.rcvyLocName_Length()),
    this.bb!.createScalarList<string>(this.rcvyLocUtm.bind(this), this.rcvyLocUTM_Length()),
    this.bb!.createScalarList<string>(this.rcvyLocLat.bind(this), this.rcvyLocLat_Length()),
    this.bb!.createScalarList<string>(this.rcvyLocLon.bind(this), this.rcvyLocLon_Length()),
    this.bb!.createScalarList<string>(this.rcvyTime.bind(this), this.rcvyTime_Length()),
    this.bb!.createScalarList<string>(this.indActasking.bind(this), this.indACTasking_Length()),
    this.bb!.createScalarList<string>(this.acMsnLocSeg.bind(this), this.acMsnLocSeg_Length())
  );
}


unpackTo(_o: AircraftMissionTasking_IngestT): void {
  _o.countryCode = this.countryCode();
  _o.taskedService = this.taskedService();
  _o.unitDesignator = this.unitDesignator();
  _o.unitLocName = this.unitLocName();
  _o.resMsnInd = this.resMsnInd();
  _o.amcMsnNum = this.amcMsnNum();
  _o.pkgId = this.pkgId();
  _o.msnCommander = this.msnCommander();
  _o.msnNum = this.msnNum();
  _o.priMsnType = this.priMsnType();
  _o.secMsnType = this.secMsnType();
  _o.alertStatus = this.alertStatus();
  _o.depLocName = this.depLocName();
  _o.depLocUTM = this.depLocUtm();
  _o.depLocLat = this.depLocLat();
  _o.depLocLon = this.depLocLon();
  _o.depTime = this.depTime();
  _o.rcvyLocName = this.bb!.createScalarList<string>(this.rcvyLocName.bind(this), this.rcvyLocName_Length());
  _o.rcvyLocUTM = this.bb!.createScalarList<string>(this.rcvyLocUtm.bind(this), this.rcvyLocUTM_Length());
  _o.rcvyLocLat = this.bb!.createScalarList<string>(this.rcvyLocLat.bind(this), this.rcvyLocLat_Length());
  _o.rcvyLocLon = this.bb!.createScalarList<string>(this.rcvyLocLon.bind(this), this.rcvyLocLon_Length());
  _o.rcvyTime = this.bb!.createScalarList<string>(this.rcvyTime.bind(this), this.rcvyTime_Length());
  _o.indACTasking = this.bb!.createScalarList<string>(this.indActasking.bind(this), this.indACTasking_Length());
  _o.acMsnLocSeg = this.bb!.createScalarList<string>(this.acMsnLocSeg.bind(this), this.acMsnLocSeg_Length());
}
}

export class AircraftMissionTasking_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public countryCode: string|Uint8Array|null = null,
  public taskedService: string|Uint8Array|null = null,
  public unitDesignator: string|Uint8Array|null = null,
  public unitLocName: string|Uint8Array|null = null,
  public resMsnInd: string|Uint8Array|null = null,
  public amcMsnNum: string|Uint8Array|null = null,
  public pkgId: string|Uint8Array|null = null,
  public msnCommander: string|Uint8Array|null = null,
  public msnNum: string|Uint8Array|null = null,
  public priMsnType: string|Uint8Array|null = null,
  public secMsnType: string|Uint8Array|null = null,
  public alertStatus: number = 0,
  public depLocName: string|Uint8Array|null = null,
  public depLocUTM: string|Uint8Array|null = null,
  public depLocLat: number = 0.0,
  public depLocLon: number = 0.0,
  public depTime: string|Uint8Array|null = null,
  public rcvyLocName: (string)[] = [],
  public rcvyLocUTM: (string)[] = [],
  public rcvyLocLat: (string)[] = [],
  public rcvyLocLon: (string)[] = [],
  public rcvyTime: (string)[] = [],
  public indACTasking: (string)[] = [],
  public acMsnLocSeg: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const countryCode = (this.countryCode !== null ? builder.createString(this.countryCode!) : 0);
  const taskedService = (this.taskedService !== null ? builder.createString(this.taskedService!) : 0);
  const unitDesignator = (this.unitDesignator !== null ? builder.createString(this.unitDesignator!) : 0);
  const unitLocName = (this.unitLocName !== null ? builder.createString(this.unitLocName!) : 0);
  const resMsnInd = (this.resMsnInd !== null ? builder.createString(this.resMsnInd!) : 0);
  const amcMsnNum = (this.amcMsnNum !== null ? builder.createString(this.amcMsnNum!) : 0);
  const pkgId = (this.pkgId !== null ? builder.createString(this.pkgId!) : 0);
  const msnCommander = (this.msnCommander !== null ? builder.createString(this.msnCommander!) : 0);
  const msnNum = (this.msnNum !== null ? builder.createString(this.msnNum!) : 0);
  const priMsnType = (this.priMsnType !== null ? builder.createString(this.priMsnType!) : 0);
  const secMsnType = (this.secMsnType !== null ? builder.createString(this.secMsnType!) : 0);
  const depLocName = (this.depLocName !== null ? builder.createString(this.depLocName!) : 0);
  const depLocUTM = (this.depLocUTM !== null ? builder.createString(this.depLocUTM!) : 0);
  const depTime = (this.depTime !== null ? builder.createString(this.depTime!) : 0);
  const rcvyLocName = AircraftMissionTasking_Ingest.createRcvyLocNameVector(builder, builder.createObjectOffsetList(this.rcvyLocName));
  const rcvyLocUTM = AircraftMissionTasking_Ingest.createRcvyLocUtmVector(builder, builder.createObjectOffsetList(this.rcvyLocUTM));
  const rcvyLocLat = AircraftMissionTasking_Ingest.createRcvyLocLatVector(builder, builder.createObjectOffsetList(this.rcvyLocLat));
  const rcvyLocLon = AircraftMissionTasking_Ingest.createRcvyLocLonVector(builder, builder.createObjectOffsetList(this.rcvyLocLon));
  const rcvyTime = AircraftMissionTasking_Ingest.createRcvyTimeVector(builder, builder.createObjectOffsetList(this.rcvyTime));
  const indACTasking = AircraftMissionTasking_Ingest.createIndActaskingVector(builder, builder.createObjectOffsetList(this.indACTasking));
  const acMsnLocSeg = AircraftMissionTasking_Ingest.createAcMsnLocSegVector(builder, builder.createObjectOffsetList(this.acMsnLocSeg));

  return AircraftMissionTasking_Ingest.createAircraftMissionTasking_Ingest(builder,
    countryCode,
    taskedService,
    unitDesignator,
    unitLocName,
    resMsnInd,
    amcMsnNum,
    pkgId,
    msnCommander,
    msnNum,
    priMsnType,
    secMsnType,
    this.alertStatus,
    depLocName,
    depLocUTM,
    this.depLocLat,
    this.depLocLon,
    depTime,
    rcvyLocName,
    rcvyLocUTM,
    rcvyLocLat,
    rcvyLocLon,
    rcvyTime,
    indACTasking,
    acMsnLocSeg
  );
}
}
