// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Minimum and maximum altitude bounds for the track.
 */
export class AltitudeBlocks_Abridged implements flatbuffers.IUnpackableObject<AltitudeBlocks_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AltitudeBlocks_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAltitudeBlocks_Abridged(bb:flatbuffers.ByteBuffer, obj?:AltitudeBlocks_Abridged):AltitudeBlocks_Abridged {
  return (obj || new AltitudeBlocks_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAltitudeBlocks_Abridged(bb:flatbuffers.ByteBuffer, obj?:AltitudeBlocks_Abridged):AltitudeBlocks_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AltitudeBlocks_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ALTI');
}

/**
 * Sequencing field for the altitude block.
 * Example: /// Example: A1
 * Constraints: Minimum length = 0, Maximum length = 24
 */
altitudeSequenceId():string|null
altitudeSequenceId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altitudeSequenceId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Lowest altitude of the track route altitude block above mean sea level in feet.
 * Example: /// Example: 27000.1
 * Constraints: No constraints specified.
 */
lowerAltitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Highest altitude of the track route altitude block above mean sea level in feet.
 * Example: /// Example: 27200.5
 * Constraints: No constraints specified.
 */
upperAltitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startAltitudeBlocks_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addAltitudeSequenceId(builder:flatbuffers.Builder, altitudeSequenceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, altitudeSequenceIdOffset, 0);
}

static addLowerAltitude(builder:flatbuffers.Builder, lowerAltitude:number) {
  builder.addFieldFloat64(1, lowerAltitude, 0.0);
}

static addUpperAltitude(builder:flatbuffers.Builder, upperAltitude:number) {
  builder.addFieldFloat64(2, upperAltitude, 0.0);
}

static endAltitudeBlocks_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAltitudeBlocks_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ALTI');
}

static finishSizePrefixedAltitudeBlocks_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ALTI', true);
}

static createAltitudeBlocks_Abridged(builder:flatbuffers.Builder, altitudeSequenceIdOffset:flatbuffers.Offset, lowerAltitude:number, upperAltitude:number):flatbuffers.Offset {
  AltitudeBlocks_Abridged.startAltitudeBlocks_Abridged(builder);
  AltitudeBlocks_Abridged.addAltitudeSequenceId(builder, altitudeSequenceIdOffset);
  AltitudeBlocks_Abridged.addLowerAltitude(builder, lowerAltitude);
  AltitudeBlocks_Abridged.addUpperAltitude(builder, upperAltitude);
  return AltitudeBlocks_Abridged.endAltitudeBlocks_Abridged(builder);
}

unpack(): AltitudeBlocks_AbridgedT {
  return new AltitudeBlocks_AbridgedT(
    this.altitudeSequenceId(),
    this.lowerAltitude(),
    this.upperAltitude()
  );
}


unpackTo(_o: AltitudeBlocks_AbridgedT): void {
  _o.altitudeSequenceId = this.altitudeSequenceId();
  _o.lowerAltitude = this.lowerAltitude();
  _o.upperAltitude = this.upperAltitude();
}
}

export class AltitudeBlocks_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public altitudeSequenceId: string|Uint8Array|null = null,
  public lowerAltitude: number = 0.0,
  public upperAltitude: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const altitudeSequenceId = (this.altitudeSequenceId !== null ? builder.createString(this.altitudeSequenceId!) : 0);

  return AltitudeBlocks_Abridged.createAltitudeBlocks_Abridged(builder,
    altitudeSequenceId,
    this.lowerAltitude,
    this.upperAltitude
  );
}
}
