// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Related document ids.
 */
export class RelatedDocument_Full implements flatbuffers.IUnpackableObject<RelatedDocument_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RelatedDocument_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRelatedDocument_Full(bb:flatbuffers.ByteBuffer, obj?:RelatedDocument_Full):RelatedDocument_Full {
  return (obj || new RelatedDocument_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRelatedDocument_Full(bb:flatbuffers.ByteBuffer, obj?:RelatedDocument_Full):RelatedDocument_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RelatedDocument_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('RELA');
}

/**
 * The document id of the related document.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
documentId():string|null
documentId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
documentId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * List of data sources related to this document.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
dataSourceRefs(index: number):string
dataSourceRefs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
dataSourceRefs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dataSourceRefsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRelatedDocument_Full(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addDocumentId(builder:flatbuffers.Builder, documentIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, documentIdOffset, 0);
}

static addDataSourceRefs(builder:flatbuffers.Builder, dataSourceRefsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataSourceRefsOffset, 0);
}

static createDataSourceRefsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDataSourceRefsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRelatedDocument_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishRelatedDocument_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RELA');
}

static finishSizePrefixedRelatedDocument_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RELA', true);
}

static createRelatedDocument_Full(builder:flatbuffers.Builder, documentIdOffset:flatbuffers.Offset, dataSourceRefsOffset:flatbuffers.Offset):flatbuffers.Offset {
  RelatedDocument_Full.startRelatedDocument_Full(builder);
  RelatedDocument_Full.addDocumentId(builder, documentIdOffset);
  RelatedDocument_Full.addDataSourceRefs(builder, dataSourceRefsOffset);
  return RelatedDocument_Full.endRelatedDocument_Full(builder);
}

unpack(): RelatedDocument_FullT {
  return new RelatedDocument_FullT(
    this.documentId(),
    this.bb!.createScalarList<string>(this.dataSourceRefs.bind(this), this.dataSourceRefs_Length())
  );
}


unpackTo(_o: RelatedDocument_FullT): void {
  _o.documentId = this.documentId();
  _o.dataSourceRefs = this.bb!.createScalarList<string>(this.dataSourceRefs.bind(this), this.dataSourceRefs_Length());
}
}

export class RelatedDocument_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public documentId: string|Uint8Array|null = null,
  public dataSourceRefs: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const documentId = (this.documentId !== null ? builder.createString(this.documentId!) : 0);
  const dataSourceRefs = RelatedDocument_Full.createDataSourceRefsVector(builder, builder.createObjectOffsetList(this.dataSourceRefs));

  return RelatedDocument_Full.createRelatedDocument_Full(builder,
    documentId,
    dataSourceRefs
  );
}
}
