// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TrackDetails_Full_dataMode_Enum } from './TrackDetails_Full_dataMode_Enum.js';
import { TrackDetails_Full_env_Enum } from './TrackDetails_Full_env_Enum.js';
import { TrackDetails_Full_objIdent_Enum } from './TrackDetails_Full_objIdent_Enum.js';


/**
 * /// These services provide operations for querying of all available track details and amplifying track data. A track is a position and optionally a heading/velocity of an object such as an aircraft, marine vessel, etc at a particular timestamp. It also includes optional information regarding the identity/type of the target object and other amplifying object data, if known.
 */
export class TrackDetails_Full implements flatbuffers.IUnpackableObject<TrackDetails_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TrackDetails_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrackDetails_Full(bb:flatbuffers.ByteBuffer, obj?:TrackDetails_Full):TrackDetails_Full {
  return (obj || new TrackDetails_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrackDetails_Full(bb:flatbuffers.ByteBuffer, obj?:TrackDetails_Full):TrackDetails_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrackDetails_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('TRAC');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: TRACK-DETAILS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
 *  AIR: Between sea level and the K치rm치n line, which has an altitude of 100 kilometers (62 miles).
 *  LAND: On the surface of dry land.
 *  SPACE: Above the K치rm치n line, which has an altitude of 100 kilometers (62 miles).
 *  SURFACE: On the surface of a body of water.
 *  SUBSURFACE: Below the surface of a body of water.
 *  UNKNOWN: Environment is not known.
 * Example: /// Example: LAND
 * Constraints: Minimum length = 0, Maximum length = 16
 */
env():TrackDetails_Full_env_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TrackDetails_Full_env_Enum.AIR;
}

/**
 * Optional message type designation.
 * Example: /// Example: PLATFORM
 * Constraints: Minimum length = 0, Maximum length = 32
 */
msgType():string|null
msgType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The vessel hull number designation of this maritime vessel.  The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
 * Example: /// Example: A30081
 * Constraints: Minimum length = 0, Maximum length = 7
 */
hullNum():string|null
hullNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hullNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Pseudo Identification Feature (PIF) number is a four digit code that provides an exact ID for the ship or aircraft. Friendly military only.
 * Example: /// Example: 0137
 * Constraints: Minimum length = 0, Maximum length = 5
 */
pif():string|null
pif(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pif(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
 * Example: /// Example: B45524
 * Constraints: Minimum length = 0, Maximum length = 36
 */
sconum():string|null
sconum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sconum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Naval Tactical Data System (NTDS) track number assigned to this track.
 * Example: /// Example: ZZ777
 * Constraints: Minimum length = 0, Maximum length = 6
 */
ntds():string|null
ntds(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ntds(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Intel Discrete Identifier (IDI) code assigned to this track.  The IDI is a four-digit code representing hostile or unknown tracks.
 * Example: /// Example: 7670
 * Constraints: Minimum length = 0, Maximum length = 5
 */
disId():string|null
disId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
disId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The category code that represents the associated facility purpose within the target system.  This value is the category code in the MIDB (Modernized Intelligence Database).
 * Example: /// Example: 20345
 * Constraints: Minimum length = 0, Maximum length = 6
 */
midbCat():string|null
midbCat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
midbCat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Basic Encyclopedia (BE) number associated with this installation or area.
 * Example: /// Example: ENC-123
 * Constraints: Minimum length = 0, Maximum length = 10
 */
beNumber():string|null
beNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
beNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The O-suffix associated with this facility.  The O-suffix is a five-character alpha/numeric system used to identify a facility, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the facility within the Modernized Integrated Database (MIDB).  The Installation beNumber and oSuffix are also used in conjunction with the midbCat code to classify the function or purpose of the facility.
 * Example: /// Example: AA125
 * Constraints: Minimum length = 0, Maximum length = 6
 */
oSuffix():string|null
oSuffix(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
oSuffix(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * This value represents the site number of a specific electronic site or its associated equipment.
 * Example: /// Example: E12345012
 * Constraints: Minimum length = 0, Maximum length = 9
 */
pin():string|null
pin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating whether the missile is considered lost, if reporting a missile track.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
lostTrkInd():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Track ID for the source of the Missile-Unique Identifier (MUID), if reporting a missile track.
 * Example: /// Example: MUID-SRC-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
muidSrcTrk():string|null
muidSrcTrk(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
muidSrcTrk(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the Missile-Unique Identifier (MUID), if reporting a missile track.
 * Example: /// Example: MUID-SRC
 * Constraints: Minimum length = 0, Maximum length = 36
 */
muidSrc():string|null
muidSrc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
muidSrc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The status of the missile track in this record, if reporting a missile track (e.g. AT LAUNCH, AT OBSERVATION, FLYING, IMPACTED, LOST, STALE, DEBRIS).
 * Example: /// Example: AT LAUNCH
 * Constraints: Minimum length = 0, Maximum length = 32
 */
mslStatus():string|null
mslStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mslStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
 * Example: /// Example: 0.95
 * Constraints: No constraints specified.
 */
trkConf():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track; Higher values indicate higher track quality, i.e., lower errors in reported position.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
trkQual():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * A track may be designated as an alert track with the following designations:
 * HIT - High Interest Track
 * TGT - Target
 * SUS - Suspect Carrier
 * NSP - Cleared Suspect
 * If alert is null, the track is assumed to be of non-alert status.
 * Example: /// Example: TGT
 * Constraints: Minimum length = 0, Maximum length = 3
 */
alert():string|null
alert(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
alert(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Original source cross-reference code for the Command that originated the report.
 * Example: /// Example: INT
 * Constraints: Minimum length = 0, Maximum length = 5
 */
origXref():string|null
origXref(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origXref(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Primary ELINT Notification (ELNOT), a five character identifier assigned to each non-communication emission for collection and reporting purposes.  This five-digit field begins with an alpha character, followed by three numbers, ending with another alpha character.
 * Example: /// Example: A123A
 * Constraints: Minimum length = 0, Maximum length = 5
 */
elnot1():string|null
elnot1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
elnot1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Secondary ELINT Notification (ELNOT), a five character identifier assigned to each non-communication emission for collection and reporting purposes.  This five-digit field begins with an alpha character, followed by three numbers, ending with another alpha character.
 * Example: /// Example: A123B
 * Constraints: Minimum length = 0, Maximum length = 5
 */
elnot2():string|null
elnot2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
elnot2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
 *  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
 *  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
 *  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
 *  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
 *  PENDING: Track object which has not been evaluated.
 *  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
 *  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
 * Example: /// Example: FRIEND
 * Constraints: Minimum length = 0, Maximum length = 32
 */
objIdent():TrackDetails_Full_objIdent_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TrackDetails_Full_objIdent_Enum.ASSUMED_FRIEND;
}

/**
 * The generic classification of the track object/group (e.g., BALLISTIC, HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
 * Example: /// Example: TRACKED
 * Constraints: Minimum length = 0, Maximum length = 32
 */
objType():string|null
objType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The object platform type is intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.  For cases in which no MIl-STD-6016 designation exists, a general description can be used (e.g. SATELLITE).
 * Example: /// Example: WEAPON
 * Constraints: Minimum length = 0, Maximum length = 32
 */
objPlat():string|null
objPlat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objPlat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.  For cases in which no MIl-STD-6016 designation exists, a general description can be used (e.g. ANTISPACE WARFARE).
 * Example: /// Example: HOLDING
 * Constraints: Minimum length = 0, Maximum length = 32
 */
objAct():string|null
objAct(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objAct(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Nationality of the tracked object.
 * Example: /// Example: USA
 * Constraints: Minimum length = 0, Maximum length = 24
 */
objNat():string|null
objNat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objNat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Track name.
 * Example: /// Example: TRACK-NAME
 * Constraints: Minimum length = 0, Maximum length = 48
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Abbreviated track name.
 * Example: /// Example: COMMSCHECK
 * Constraints: Minimum length = 0, Maximum length = 11
 */
shortName():string|null
shortName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shortName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID identifying the track, which should remain the same on subsequent tracks of the same object.
 * Example: /// Example: trkId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
trkId():string|null
trkId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trkId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
 * Example: /// Example: trkNum
 * Constraints: Minimum length = 0, Maximum length = 32
 */
trkNum():string|null
trkNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trkNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Value Indicating the scope of this track:
 * 1 - TERMINAL  (Terminal) - available only on the workstation where they were created.
 * 2 - LOCAL  (Local) - available only on workstations in the local area network
 * 3 - OTH  (Over the Horizon) - available to everyone.
 * Example: /// Example: OTH
 * Constraints: Minimum length = 0, Maximum length = 12
 */
trkScope():string|null
trkScope(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trkScope(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The unique identifier of the source node.
 * Example: /// Example: MCS
 * Constraints: Minimum length = 0, Maximum length = 4
 */
sourceUid():string|null
sourceUid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceUid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The call sign currently assigned to this track object.
 * Example: /// Example: Charlie
 * Constraints: Minimum length = 0, Maximum length = 24
 */
callSign():string|null
callSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
 *  FAKER: Friendly track, object, or entity acting as an exercise hostile.
 *  JOKER: Friendly track, object, or entity acting as an exercise suspect.
 *  KILO: Friendly high-value object.
 *  TRAVELLER: Suspect land or surface track following a recognized traffic route.
 *  ZOMBIE: Suspect track, object, or entity of special interest.
 * Example: /// Example: JOKER
 * Constraints: Minimum length = 0, Maximum length = 32
 */
identAmp():string|null
identAmp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
identAmp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Space amplification indicates additional information on the space environment object being reported (e.g. DEBRIS, FUEL-AIR EXPLOSIVE, NUCLEAR WARHEAD).
 * Example: /// Example: NUCLEAR WARHEAD
 * Constraints: Minimum length = 0, Maximum length = 32
 */
spaceAmp():string|null
spaceAmp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spaceAmp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Confidence level of the amplifying characteristics.  Values range from 0 to 6, with 0 indicating the lowest confidence and 6 indicating the highest.
 * Example: /// Example: 6
 * Constraints: No constraints specified.
 */
spaceAmpConf():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Specific type of point or track with an environment of space.
 * Example: /// Example: SS-21_MOD_2_CRBM
 * Constraints: Minimum length = 0, Maximum length = 32
 */
spaceSpecType():string|null
spaceSpecType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spaceSpecType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM:
 * SRBM - Short-Range Ballistic Missile
 * MRBM - Medium-Range Ballistic Missile
 * IRBM - Intermediate-Range Ballistic Missile
 * LRBM - Long-Range Ballistic Missile
 * ICBM - Intercontinental Ballistic Missile
 * SLBM - Submarine-Launched Ballistic Missile.
 * Example: /// Example: SLBM
 * Constraints: Minimum length = 0, Maximum length = 16
 */
acftSubType():string|null
acftSubType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
acftSubType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Track timestamp in ISO8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
ts():string|null
ts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Missile launch timestamp in ISO8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
launchTime():string|null
launchTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Missile impact timestamp in ISO8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
impactTime():string|null
impactTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
impactTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The message timestamp that the ftn track position was recorded, in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
ftnMsgTs():string|null
ftnMsgTs(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ftnMsgTs(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * An ftn used to associate information and directives with the track.
 * Example: /// Example: FTN
 * Constraints: Minimum length = 0, Maximum length = 32
 */
ftn():string|null
ftn(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ftn(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the Command reporting the Force Over-The-Horizon Track Coordinator (FOTC) track number.
 * Example: /// Example: TRUETT
 * Constraints: Minimum length = 0, Maximum length = 18
 */
ftnCmd():string|null
ftnCmd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ftnCmd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The message timestamp that the reference track position was recorded, in ISO 8601 UTC format with microsecond precision. The 'rtnMsgTs' and 'rtn' arrays must match in size.
 * Example: /// Example: ['2021-02-25T12:00:00.123456Z']
 * Constraints: No constraints specified.
 */
rtnMsgTs(index: number):string
rtnMsgTs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rtnMsgTs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rtnMsgTsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A Reference Track Number used to associate information and directives with the track.  Referenced, but not constrained to, MIL-STD-6016F Reference Track Number. The 'rtnMsgTs' and 'rtn' arrays must match in size.
 * Example: /// Example: ['ex-a']
 * Constraints: No constraints specified.
 */
rtn(index: number):string
rtn(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rtn(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rtnLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Value representing the state of the Received Track.
 * Example: /// Example: Local_RTN
 * Constraints: Minimum length = 0, Maximum length = 16
 */
rtnTrkState():string|null
rtnTrkState(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rtnTrkState(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the Command reporting the Received Track Number (RTN).
 * Example: /// Example: YORKTOWN
 * Constraints: Minimum length = 0, Maximum length = 8
 */
rtnCmd():string|null
rtnCmd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rtnCmd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Id/name of sensor providing the track data.
 * Example: /// Example: OTH
 * Constraints: Minimum length = 0, Maximum length = 32
 */
sen():string|null
sen(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sen(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source cross-reference code for the Command that originated the track report.
 * Example: /// Example: INT
 * Constraints: Minimum length = 0, Maximum length = 18
 */
rptChxref():string|null
rptChxref(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rptChxref(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating whether this track is archived.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
rptArchived():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this track is self reported.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
selfReport():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The MIL-STD-2525B symbology code that applies to the subject of this track.
 * Example: /// Example: SHP*S----------
 * Constraints: Minimum length = 0, Maximum length = 16
 */
mil2525Bstr():string|null
mil2525Bstr(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mil2525Bstr(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Transponder ID for the track.  This does not correspond to the UDL transponder schema.
 * Example: /// Example: 11
 * Constraints: Minimum length = 0, Maximum length = 61
 */
trnspdrId():string|null
trnspdrId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trnspdrId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Transponder type for the track.
 * Example: /// Example: AFTS
 * Constraints: Minimum length = 0, Maximum length = 51
 */
trnspdrType():string|null
trnspdrType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trnspdrType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Radar name of the sensor tracking this object (e.g., RAY1500, SPN-43, HEADNET).
 * Example: /// Example: RAY1500
 * Constraints: Minimum length = 0, Maximum length = 16
 */
emitterName():string|null
emitterName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
emitterName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source code for source of information used to detect track.
 * Example: /// Example: S1
 * Constraints: Minimum length = 0, Maximum length = 64
 */
infoSource():string|null
infoSource(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
infoSource(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating that the missile is currently in a state of boosting, if reporting a missile track.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
boosting():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Frequency, in hertz, for the signature report.
 * Example: /// Example: 63.65
 * Constraints: No constraints specified.
 */
freq():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum frequency, in hertz, reported for this acoustic track.
 * Example: /// Example: 10324.53
 * Constraints: No constraints specified.
 */
maxFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * List of harmonics of the signature report in descending order of predominance using 1-2 digit combinations separated by commas, e.g., 8,12,4. (1-22NS).
 * Example: /// Example: 8,12,4
 * Constraints: Minimum length = 0, Maximum length = 24
 */
harmonics():string|null
harmonics(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
harmonics(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Pulse repetition interval of the emitter, measured in microseconds.  The interval between the start of one pulse and the start of another.
 * Example: /// Example: 56657.2238
 * Constraints: No constraints specified.
 */
pri():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pulse repetition frequency of the emitter, measured in pulses per second.  PRF is the number of pulses transmitted per second. This is the reciprocal of the pri value.
 * Example: /// Example: 17.65
 * Constraints: No constraints specified.
 */
prf():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Pulse width of the emitter, measured in microseconds.  This is the duration of the pulse.
 * Example: /// Example: 1347.45
 * Constraints: No constraints specified.
 */
pw():number {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Type of radar scan.
 * Example: /// Example: UNK
 * Constraints: Minimum length = 0, Maximum length = 5
 */
scanType():string|null
scanType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scanType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Scan rate of the emitter, measured in seconds per rotation (SPR).
 * Example: /// Example: 12.01
 * Constraints: No constraints specified.
 */
scanRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Sequential Contact Number (SCN) for this track.
 * Example: /// Example: 1474305
 * Constraints: No constraints specified.
 */
scn():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Correlation Index; reference code for the site that originally reported the track.
 * Example: /// Example: BB
 * Constraints: Minimum length = 0, Maximum length = 3
 */
cI():string|null
cI(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cI(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The angle formed between the line of sight of the observer and the horizon, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
 * Example: /// Example: 15.2
 * Constraints: No constraints specified.
 */
angElev():number {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 19.88550102
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 46.74596844
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 19.88550102
 * Constraints: No constraints specified.
 */
launchLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 46.74550102
 * Constraints: No constraints specified.
 */
launchLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 latitude of the missile impact point, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 19.88550102
 * Constraints: No constraints specified.
 */
impactLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the missile impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 46.74550102
 * Constraints: No constraints specified.
 */
impactLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 azimuth corridor reference point latitude, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 19.88550102
 * Constraints: No constraints specified.
 */
polarSingLocLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 azimuth corridor reference point longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 46.74550102
 * Constraints: No constraints specified.
 */
polarSingLocLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The azimuth corridor centerline angle measured in degrees clockwise from true north, of the center line of an azimuth corridor. The center line extends from the referenced corridor origin location.
 * Example: /// Example: 12.876
 * Constraints: No constraints specified.
 */
azCorrCenterLine():number {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Azimuth corridor arc distance measured in meters from reference point of azimuth corridor to far edge of bounded azimuth corridor wedge, measured along azimuth corridor center line.
 * Example: /// Example: 71.76
 * Constraints: No constraints specified.
 */
azCorrArcWidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The error in the semi-intermediate axis.  The semi-intermediate axis is intermediate in length between semi-major and semi-minor axes. This field is doubled and centered on intersection of area semi-major axis and area semi-minor axis at 90 degrees to the plane defined by those axes. For these shapes, the volume is defined as having a 50-percent probability of containing the true location of the referenced entity.
 * Example: /// Example: 7010.882
 * Constraints: No constraints specified.
 */
errSemiIntAxis():number {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The error in the Area Orientation.  Area Orientation is the angle or roll in degrees, between area semi-minor axis and plane defined by local vertical and area semi-major axis. When reported without major and minor axis, it is angle between an axis perpendicular to a 2D true north axis and plane defined by local vertical and a 2D true north axis.
 * Example: /// Example: 69.6
 * Constraints: No constraints specified.
 */
errAreaOrient():number {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The error in the Semi-major elevation axis. Semi-major elevation axis is the elevation of the cubical, 3D rectangular, cylindrical, 3D ellipsoidal, or spherical semi-major axis, in degrees, measured from local horizontal.
 * Example: /// Example: 168.8
 * Constraints: No constraints specified.
 */
errSemiMajElev():number {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Geometric area switch identifies the 3D shape of the error volume by providing the 2D shape for the 3D plane. The 3D plane is the plane orthogonal to the area semi-major axis and area semi-minor axis. Depending on whether the 2D plane is reported as an error ellipse 2D or as an error rectangle 2D, this switch reports a complete error volume that is cubical, 3D rectangular, cylindrical, 3D ellipsoidal, or spherical.
 * 0 - SWITCH_TYPE_UNKNOWN
 * 1 - SQUARE_RECTANGLE
 * 2 - CIRCLE_ELLIPSE.
 * Example: /// Example: CIRCLE_ELLIPSE
 * Constraints: Minimum length = 0, Maximum length = 24
 */
errGeoAreaSwitch():string|null
errGeoAreaSwitch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
errGeoAreaSwitch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Track point burnout altitude relative to WGS-84 ellipsoid, in meters.
 * Example: /// Example: 30567.452
 * Constraints: No constraints specified.
 */
burnoutAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Threat Event System Track ID.
 * Example: /// Example: 6217
 * Constraints: Minimum length = 0, Maximum length = 8
 */
tesEventId():string|null
tesEventId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tesEventId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 176);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Track object speed, in meters/sec.
 * Example: /// Example: 15.03443
 * Constraints: No constraints specified.
 */
spd():number {
  const offset = this.bb!.__offset(this.bb_pos, 178);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The average speed, in kilometers/hour, calculated for the subject during the latest voyage/excursion.
 * Example: /// Example: 18.25
 * Constraints: No constraints specified.
 */
avgSpd():number {
  const offset = this.bb!.__offset(this.bb_pos, 180);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Motion model Time On Leg in hours.
 * Example: /// Example: 4.1
 * Constraints: No constraints specified.
 */
tol():number {
  const offset = this.bb!.__offset(this.bb_pos, 182);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
 * Example: /// Example: 153.01
 * Constraints: No constraints specified.
 */
alt():number {
  const offset = this.bb!.__offset(this.bb_pos, 184);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Track object heading, in degrees clockwise from true north.
 * Example: /// Example: 19.7
 * Constraints: No constraints specified.
 */
hdng():number {
  const offset = this.bb!.__offset(this.bb_pos, 186);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
 * Example: /// Example: 4.3580153
 * Constraints: No constraints specified.
 */
course():number {
  const offset = this.bb!.__offset(this.bb_pos, 188);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The number of propeller revolutions per minute for a submarine or ship.
 * Example: /// Example: 8.2
 * Constraints: No constraints specified.
 */
propRpm():number {
  const offset = this.bb!.__offset(this.bb_pos, 190);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The number of turns of the vessel propellers per knot of forward motion.
 * Example: /// Example: 2.65
 * Constraints: No constraints specified.
 */
tpk():number {
  const offset = this.bb!.__offset(this.bb_pos, 192);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Cooperative Location Indicator specifies whether the reported entity location was derived using reported locations from sensors on more than one platform.
 * 0 - COOPERATIVE_LOCATOR_NONE
 * 1 - SINGLE_PLATFORM
 * 2 - FRAGMENT
 * 3 - COOPERATIVE.
 * Example: /// Example: COOPERATIVE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
coopLocInd():string|null
coopLocInd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
coopLocInd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 194);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The manuevering indicator specifying the missile boost phase.
 * 0 - POST_BOOST_NONE
 * 1 - POST_BOOST_MANUEVER
 * 2 - POST_BOOST_COMPLETE_MANUEVER.
 * Example: /// Example: POST_BOOST_NONE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
maneuverInd():string|null
maneuverInd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
maneuverInd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 196);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The launch location Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the launchAouData array and is required if launchAouData is not null. See the launchAouData field definition for specific information.
 * Example: /// Example: ELLIPSE
 * Constraints: Minimum length = 0, Maximum length = 20
 */
launchAouType():string|null
launchAouType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchAouType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 198);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Three element array representing the launch location Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the launchAouType specified in this record:
 *  ELLIPSE:
 *    brg - orientation in degrees of the ellipse
 *    a1 - semi-major axis in meters
 *    a2 - semi-minor axis in meters
 *  BEARING (BEARING BOX or MTST BEARING BOX):
 *    brg - orientation in degrees of the bearing box
 *    a1 - length of bearing box in meters
 *    a2 - half-width of bearing box in meters
 *  OTHER (All other type values):
 *    brg - line of bearing in degrees true
 *    a1 - bearing error in degrees
 *    a2 - estimated range in meters.
 * Example: /// Example: [34.3, 26.5, 1.2]
 * Constraints: No constraints specified.
 */
launchAouData(index: number):string
launchAouData(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
launchAouData(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 200);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

launchAouDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 200);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The impact point Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the impactAouData array and is required if impactAouData is not null. See the impactAouData field definition for specific information.
 * Example: /// Example: ELLIPSE
 * Constraints: Minimum length = 0, Maximum length = 20
 */
impactAouType():string|null
impactAouType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
impactAouType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 202);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Three element array representing the impact point Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the impactAouType specified in this record:
 *  ELLIPSE:
 *    brg - orientation in degrees of the ellipse
 *    a1 - semi-major axis in meters
 *    a2 - semi-minor axis in meters
 *  BEARING (BEARING BOX or MTST BEARING BOX):
 *    brg - orientation in degrees of the bearing box
 *    a1 - length of bearing box in meters
 *    a2 - half-width of bearing box in meters
 *  OTHER (All other type values):
 *    brg - line of bearing in degrees true
 *    a1 - bearing error in degrees
 *    a2 - estimated range in meters.
 * Example: /// Example: [34.3, 26.5, 1.2]
 * Constraints: No constraints specified.
 */
impactAouData(index: number):string
impactAouData(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
impactAouData(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 204);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

impactAouDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 204);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The track Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouRptData array and is required if aouRptData is not null. See the aouRptData field definition for specific information.
 * Example: /// Example: ELLIPSE
 * Constraints: Minimum length = 0, Maximum length = 20
 */
aouRptType():string|null
aouRptType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aouRptType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 206);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouRptType specified in this record:
 *  ELLIPSE:
 *    brg - orientation in degrees of the ellipse
 *    a1 - semi-major axis in meters
 *    a2 - semi-minor axis in meters
 *  BEARING (BEARING BOX or MTST BEARING BOX):
 *    brg - orientation in degrees of the bearing box
 *    a1 - length of bearing box in meters
 *    a2 - half-width of bearing box in meters
 *  OTHER (All other type values):
 *    brg - line of bearing in degrees true
 *    a1 - bearing error in degrees
 *    a2 - estimated range in meters.
 * Example: /// Example: [34.3, 26.5, 1.2]
 * Constraints: No constraints specified.
 */
aouRptData(index: number):string
aouRptData(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
aouRptData(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 208);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

aouRptDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 208);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Track object location in ECEF [x, y, z], meters. When provided, array must always contain 3 values.
 * Example: /// Example: [1.23, 2.35, 3.42]
 * Constraints: No constraints specified.
 */
ecefPos(index: number):string
ecefPos(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ecefPos(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 210);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

ecefPosLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 210);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Track object velocity in ECEF [x', y', z'], meters/sec. When provided, array must always contain 3 values.
 * Example: /// Example: [1.23, 2.35, 3.42]
 * Constraints: No constraints specified.
 */
ecefVel(index: number):string
ecefVel(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ecefVel(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 212);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

ecefVelLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 212);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
 * Example: /// Example: 97
 * Constraints: No constraints specified.
 */
containment():number {
  const offset = this.bb!.__offset(this.bb_pos, 214);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The distance, in meters, of the closest point of approach between this track to the master reference track.
 * Example: /// Example: 500
 * Constraints: No constraints specified.
 */
cpa():number {
  const offset = this.bb!.__offset(this.bb_pos, 216);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The time, in ISO 8601 UTC format with millisecond precision, of the  closest point of approach between this track and the master reference track.
 * Example: /// Example: 2021-02-25T12:00:00.123Z
 * Constraints: No constraints specified.
 */
tcpa():string|null
tcpa(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tcpa(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 218);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
 * Example: /// Example: Underway Using Engine
 * Constraints: Minimum length = 0, Maximum length = 64
 */
navStatus():string|null
navStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
navStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 220);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
 * Example: /// Example: GPS
 * Constraints: Minimum length = 0, Maximum length = 24
 */
posDeviceType():string|null
posDeviceType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
posDeviceType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 222);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of Aid to Navigation. Intended as, but not constrained to, the USCG NAVCEN  aids to navigation. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
 * Example: /// Example: Cardinal Mark N
 * Constraints: Minimum length = 0, Maximum length = 64
 */
aton():string|null
aton(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aton(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 224);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator position (OFF, ON, UNK) for optional floating navigational aids only.
 * Example: /// Example: ON
 * Constraints: Minimum length = 0, Maximum length = 3
 */
offPosInd():string|null
offPosInd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
offPosInd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 226);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reference dimensions of the vessel, reported as [A, B, C, D], in meters. Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna. Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
 * Example: /// Example: [50.1, 50.1, 20.1, 20.1]
 * Constraints: No constraints specified.
 */
antennaRefDimensions(index: number):string
antennaRefDimensions(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
antennaRefDimensions(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 228);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

antennaRefDimensionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 228);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The common name for a group of ships with similar design, usually named for the first vessel of the class.
 * Example: /// Example: Nimitz
 * Constraints: Minimum length = 0, Maximum length = 64
 */
shipClass():string|null
shipClass(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shipClass(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 230);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
 * Example: /// Example: 9015462
 * Constraints: No constraints specified.
 */
imon():number {
  const offset = this.bb!.__offset(this.bb_pos, 232);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
 * Example: /// Example: 304010417
 * Constraints: No constraints specified.
 */
mmsi():number {
  const offset = this.bb!.__offset(this.bb_pos, 234);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The maximum static draught, in meters, of the vessel according to the AIS transmission.
 * Example: /// Example: 21.1
 * Constraints: No constraints specified.
 */
draught():number {
  const offset = this.bb!.__offset(this.bb_pos, 236);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
 * Example: /// Example: 511.1
 * Constraints: No constraints specified.
 */
length():number {
  const offset = this.bb!.__offset(this.bb_pos, 238);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
 * Example: /// Example: 24.1
 * Constraints: No constraints specified.
 */
width():number {
  const offset = this.bb!.__offset(this.bb_pos, 240);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
 * Example: /// Example: Freight
 * Constraints: Minimum length = 0, Maximum length = 48
 */
cargoType():string|null
cargoType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cargoType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 242);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Appearance group code.
 * GP1 - Superstructure exceeds 1/3 of ship length.
 * GP2 - Superstructure less than 1/3 of ship length.
 * GP3 - Stack aft.
 * Example: /// Example: GP1
 * Constraints: Minimum length = 0, Maximum length = 7
 */
appGrp():string|null
appGrp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
appGrp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 244);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Hull profile code. Based on GCCS-J hull profiles.
 * FLUSH           No breaks in Hull Profile.
 * RAISED 1        Hull Profile shows distinct raised area at bow. Remainder of deck is flush.
 * RAISED 2        Hull Profile shows distinct raised area amidships. Bow and stern are flush.
 * RAISED 3        Hull Profile shows distinct raised area at stern. Remainder of deck is flush.
 * RAISED 1-2-3    Distinct raised areas at bow, midships, and stern with breaks between each raise.
 * RAISED 1-2      Raised area at bow and midships with break between.
 * RAISED 1-3      Raised area at bow and stern with break between.
 * RAISED 12       Continuous raised area encompassing both bow and midships.
 * RAISED 23       Continuous raised area encompassing midships and stern.
 * RAISED 12-3     Raised areas at bow, midships and stern. Bow and midship raises are continuous. Break between midship and stern raises.
 * RAISED 1-23     Raised areas at bow, midships, and stern. Midship and stern raises are continuous with break between bow and midship raises.
 * RAISED 1-L2-3   Raised areas at bow, midships, and stern with break between each raise. Midships raise is longer than that associated with raised 1-2-3.
 * Example: /// Example: Raised 1-23
 * Constraints: Minimum length = 0, Maximum length = 16
 */
hullProf():string|null
hullProf(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hullProf(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 246);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of propulsion employed by the track object (Diesel, Nuclear).
 * Example: /// Example: Diesel
 * Constraints: Minimum length = 0, Maximum length = 6
 */
propType():string|null
propType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
propType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 248);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of blades per shaft of the track object.  Applicable for maritime vessels.
 * Example: /// Example: 4
 * Constraints: No constraints specified.
 */
numBlades():number {
  const offset = this.bb!.__offset(this.bb_pos, 250);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The number of shafts on the track object.  Applicable for maritime vessels.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
numShafts():number {
  const offset = this.bb!.__offset(this.bb_pos, 252);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The stern type code (Counter, Cruiser) associated with the track object.
 * Example: /// Example: Cruiser
 * Constraints: Minimum length = 0, Maximum length = 16
 */
sternType():string|null
sternType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sternType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 254);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The weight, in tons, of the vessel associated with this track.
 * Example: /// Example: 3423.76
 * Constraints: No constraints specified.
 */
vslWt():number {
  const offset = this.bb!.__offset(this.bb_pos, 256);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Arrival Time of the vessel at the destination, in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
arrTime():string|null
arrTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 258);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The flag of the arrival port.
 * Example: /// Example: USA
 * Constraints: Minimum length = 0, Maximum length = 36
 */
arrFlag():string|null
arrFlag(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrFlag(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 260);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reported arrival cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
 * Example: /// Example: Freight
 * Constraints: Minimum length = 0, Maximum length = 48
 */
arrCargo():string|null
arrCargo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrCargo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 262);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Arrival Port of the vessel according to the AIS transmission.
 * Example: /// Example: Lanshan
 * Constraints: Minimum length = 0, Maximum length = 20
 */
arrPort():string|null
arrPort(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrPort(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 264);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Departure Port of the vessel according to the AIS transmission.
 * Example: /// Example: Lanshan
 * Constraints: Minimum length = 0, Maximum length = 20
 */
depPort():string|null
depPort(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depPort(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 266);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The flag of the departure port.
 * Example: /// Example: USA
 * Constraints: Minimum length = 0, Maximum length = 36
 */
depFlag():string|null
depFlag(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depFlag(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 268);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reported departure cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
 * Example: /// Example: Freight
 * Constraints: Minimum length = 0, Maximum length = 48
 */
depCargo():string|null
depCargo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depCargo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 270);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The flag of the destination port.
 * Example: /// Example: USA
 * Constraints: Minimum length = 0, Maximum length = 36
 */
desFlag():string|null
desFlag(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
desFlag(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 272);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reported destination cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
 * Example: /// Example: Freight
 * Constraints: Minimum length = 0, Maximum length = 48
 */
desCargo():string|null
desCargo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
desCargo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 274);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The destination of the vessel according to the AIS transmission.
 * Example: /// Example: USCLE
 * Constraints: Minimum length = 0, Maximum length = 20
 */
destination():string|null
destination(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
destination(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 276);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Estimated Time of Arrival of the vessel at the destination port, in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
eta():string|null
eta(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eta(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 278);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Estimated Time of Departure of the vessel from the departure port (depPort), according to Marine Traffic calculations, in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-02-25T12:00:00.123456Z
 * Constraints: No constraints specified.
 */
etd():string|null
etd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
etd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 280);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A text amplifier displaying IFF/SIF/AIS Identification modes and codes.
 * Example: /// Example: ID Mode
 * Constraints: Minimum length = 0, Maximum length = 64
 */
iff():string|null
iff(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
iff(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 282);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating that the track object has an emergency.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
emgInd():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 284);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The drop-point indicator setting.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
dropPtInd():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 286);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
reinforced():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 288);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating for the track represents a reduced force object or group.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
reduced():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 290);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
hq():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 292);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment, and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
dummy():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 294);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
taskForce():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 296);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment, and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
feint():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 298);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
installation():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 300);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * A text amplifier for units, equipment and installations; content is implementation specific.
 * Example: /// Example: Staff Comments
 * Constraints: Minimum length = 0, Maximum length = 256
 */
staffCmts():string|null
staffCmts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
staffCmts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 302);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A text amplifier for units, equipment and installations; content is implementation specific.
 * Example: /// Example: Additional information
 * Constraints: Minimum length = 0, Maximum length = 256
 */
addInfo():string|null
addInfo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
addInfo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 304);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A text amplifier code for units, equipment, and installations that consists of a one-letter reliability rating and a one-number credibility rating based on the following definitions of each:
 *  Reliability Ratings:
 *   A-completely reliable
 *   B-usually reliable
 *   C-fairly reliable
 *   D-not usually reliable
 *   E-unreliable
 *   F-reliability cannot be judged
 *  Credibility Ratings:
 *   1-confirmed by other sources
 *   2-probably true
 *   3-possibly true
 *   4-doubtfully true
 *   5-improbable
 *   6-truth cannot be judged.
 * Example: /// Example: A1
 * Constraints: Minimum length = 0, Maximum length = 2
 */
evalRating():string|null
evalRating(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
evalRating(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 306);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database.
 * Example: /// Example: 2021-02-25T12:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 308);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 310);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 312);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 314);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():TrackDetails_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 316);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TrackDetails_Full_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 318);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startTrackDetails_Full(builder:flatbuffers.Builder) {
  builder.startObject(158);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addEnv(builder:flatbuffers.Builder, env:TrackDetails_Full_env_Enum) {
  builder.addFieldInt8(2, env, TrackDetails_Full_env_Enum.AIR);
}

static addMsgType(builder:flatbuffers.Builder, msgTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, msgTypeOffset, 0);
}

static addHullNum(builder:flatbuffers.Builder, hullNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, hullNumOffset, 0);
}

static addPif(builder:flatbuffers.Builder, pifOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, pifOffset, 0);
}

static addSconum(builder:flatbuffers.Builder, sconumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, sconumOffset, 0);
}

static addNtds(builder:flatbuffers.Builder, ntdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, ntdsOffset, 0);
}

static addDisId(builder:flatbuffers.Builder, disIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, disIdOffset, 0);
}

static addMidbCat(builder:flatbuffers.Builder, midbCatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, midbCatOffset, 0);
}

static addBeNumber(builder:flatbuffers.Builder, beNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, beNumberOffset, 0);
}

static addOSuffix(builder:flatbuffers.Builder, oSuffixOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, oSuffixOffset, 0);
}

static addPin(builder:flatbuffers.Builder, pinOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, pinOffset, 0);
}

static addLostTrkInd(builder:flatbuffers.Builder, lostTrkInd:boolean) {
  builder.addFieldInt8(13, +lostTrkInd, +false);
}

static addMuidSrcTrk(builder:flatbuffers.Builder, muidSrcTrkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, muidSrcTrkOffset, 0);
}

static addMuidSrc(builder:flatbuffers.Builder, muidSrcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, muidSrcOffset, 0);
}

static addMslStatus(builder:flatbuffers.Builder, mslStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, mslStatusOffset, 0);
}

static addTrkConf(builder:flatbuffers.Builder, trkConf:number) {
  builder.addFieldFloat64(17, trkConf, 0.0);
}

static addTrkQual(builder:flatbuffers.Builder, trkQual:number) {
  builder.addFieldInt32(18, trkQual, 0);
}

static addAlert(builder:flatbuffers.Builder, alertOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, alertOffset, 0);
}

static addOrigXref(builder:flatbuffers.Builder, origXrefOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, origXrefOffset, 0);
}

static addElnot1(builder:flatbuffers.Builder, elnot1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(21, elnot1Offset, 0);
}

static addElnot2(builder:flatbuffers.Builder, elnot2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(22, elnot2Offset, 0);
}

static addObjIdent(builder:flatbuffers.Builder, objIdent:TrackDetails_Full_objIdent_Enum) {
  builder.addFieldInt8(23, objIdent, TrackDetails_Full_objIdent_Enum.ASSUMED_FRIEND);
}

static addObjType(builder:flatbuffers.Builder, objTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, objTypeOffset, 0);
}

static addObjPlat(builder:flatbuffers.Builder, objPlatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, objPlatOffset, 0);
}

static addObjAct(builder:flatbuffers.Builder, objActOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, objActOffset, 0);
}

static addObjNat(builder:flatbuffers.Builder, objNatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, objNatOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, nameOffset, 0);
}

static addShortName(builder:flatbuffers.Builder, shortNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, shortNameOffset, 0);
}

static addTrkId(builder:flatbuffers.Builder, trkIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, trkIdOffset, 0);
}

static addTrkNum(builder:flatbuffers.Builder, trkNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, trkNumOffset, 0);
}

static addTrkScope(builder:flatbuffers.Builder, trkScopeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, trkScopeOffset, 0);
}

static addSourceUid(builder:flatbuffers.Builder, sourceUidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, sourceUidOffset, 0);
}

static addCallSign(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, callSignOffset, 0);
}

static addIdentAmp(builder:flatbuffers.Builder, identAmpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, identAmpOffset, 0);
}

static addSpaceAmp(builder:flatbuffers.Builder, spaceAmpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, spaceAmpOffset, 0);
}

static addSpaceAmpConf(builder:flatbuffers.Builder, spaceAmpConf:number) {
  builder.addFieldInt32(37, spaceAmpConf, 0);
}

static addSpaceSpecType(builder:flatbuffers.Builder, spaceSpecTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, spaceSpecTypeOffset, 0);
}

static addAcftSubType(builder:flatbuffers.Builder, acftSubTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, acftSubTypeOffset, 0);
}

static addTs(builder:flatbuffers.Builder, tsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, tsOffset, 0);
}

static addLaunchTime(builder:flatbuffers.Builder, launchTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, launchTimeOffset, 0);
}

static addImpactTime(builder:flatbuffers.Builder, impactTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, impactTimeOffset, 0);
}

static addFtnMsgTs(builder:flatbuffers.Builder, ftnMsgTsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, ftnMsgTsOffset, 0);
}

static addFtn(builder:flatbuffers.Builder, ftnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, ftnOffset, 0);
}

static addFtnCmd(builder:flatbuffers.Builder, ftnCmdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, ftnCmdOffset, 0);
}

static addRtnMsgTs(builder:flatbuffers.Builder, rtnMsgTsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, rtnMsgTsOffset, 0);
}

static createRtnMsgTsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRtnMsgTsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRtn(builder:flatbuffers.Builder, rtnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, rtnOffset, 0);
}

static createRtnVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRtnVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRtnTrkState(builder:flatbuffers.Builder, rtnTrkStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, rtnTrkStateOffset, 0);
}

static addRtnCmd(builder:flatbuffers.Builder, rtnCmdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, rtnCmdOffset, 0);
}

static addSen(builder:flatbuffers.Builder, senOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, senOffset, 0);
}

static addRptChxref(builder:flatbuffers.Builder, rptChxrefOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, rptChxrefOffset, 0);
}

static addRptArchived(builder:flatbuffers.Builder, rptArchived:boolean) {
  builder.addFieldInt8(52, +rptArchived, +false);
}

static addSelfReport(builder:flatbuffers.Builder, selfReport:boolean) {
  builder.addFieldInt8(53, +selfReport, +false);
}

static addMil2525Bstr(builder:flatbuffers.Builder, mil2525BstrOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, mil2525BstrOffset, 0);
}

static addTrnspdrId(builder:flatbuffers.Builder, trnspdrIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, trnspdrIdOffset, 0);
}

static addTrnspdrType(builder:flatbuffers.Builder, trnspdrTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, trnspdrTypeOffset, 0);
}

static addEmitterName(builder:flatbuffers.Builder, emitterNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, emitterNameOffset, 0);
}

static addInfoSource(builder:flatbuffers.Builder, infoSourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, infoSourceOffset, 0);
}

static addBoosting(builder:flatbuffers.Builder, boosting:boolean) {
  builder.addFieldInt8(59, +boosting, +false);
}

static addFreq(builder:flatbuffers.Builder, freq:number) {
  builder.addFieldFloat64(60, freq, 0.0);
}

static addMaxFreq(builder:flatbuffers.Builder, maxFreq:number) {
  builder.addFieldFloat64(61, maxFreq, 0.0);
}

static addHarmonics(builder:flatbuffers.Builder, harmonicsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, harmonicsOffset, 0);
}

static addPri(builder:flatbuffers.Builder, pri:number) {
  builder.addFieldFloat64(63, pri, 0.0);
}

static addPrf(builder:flatbuffers.Builder, prf:number) {
  builder.addFieldFloat64(64, prf, 0.0);
}

static addPw(builder:flatbuffers.Builder, pw:number) {
  builder.addFieldFloat64(65, pw, 0.0);
}

static addScanType(builder:flatbuffers.Builder, scanTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, scanTypeOffset, 0);
}

static addScanRate(builder:flatbuffers.Builder, scanRate:number) {
  builder.addFieldFloat64(67, scanRate, 0.0);
}

static addScn(builder:flatbuffers.Builder, scn:number) {
  builder.addFieldInt32(68, scn, 0);
}

static addCI(builder:flatbuffers.Builder, cIOffset:flatbuffers.Offset) {
  builder.addFieldOffset(69, cIOffset, 0);
}

static addAngElev(builder:flatbuffers.Builder, angElev:number) {
  builder.addFieldFloat64(70, angElev, 0.0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(71, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(72, lon, 0.0);
}

static addLaunchLat(builder:flatbuffers.Builder, launchLat:number) {
  builder.addFieldFloat64(73, launchLat, 0.0);
}

static addLaunchLon(builder:flatbuffers.Builder, launchLon:number) {
  builder.addFieldFloat64(74, launchLon, 0.0);
}

static addImpactLat(builder:flatbuffers.Builder, impactLat:number) {
  builder.addFieldFloat64(75, impactLat, 0.0);
}

static addImpactLon(builder:flatbuffers.Builder, impactLon:number) {
  builder.addFieldFloat64(76, impactLon, 0.0);
}

static addPolarSingLocLat(builder:flatbuffers.Builder, polarSingLocLat:number) {
  builder.addFieldFloat64(77, polarSingLocLat, 0.0);
}

static addPolarSingLocLon(builder:flatbuffers.Builder, polarSingLocLon:number) {
  builder.addFieldFloat64(78, polarSingLocLon, 0.0);
}

static addAzCorrCenterLine(builder:flatbuffers.Builder, azCorrCenterLine:number) {
  builder.addFieldFloat64(79, azCorrCenterLine, 0.0);
}

static addAzCorrArcWidth(builder:flatbuffers.Builder, azCorrArcWidth:number) {
  builder.addFieldFloat64(80, azCorrArcWidth, 0.0);
}

static addErrSemiIntAxis(builder:flatbuffers.Builder, errSemiIntAxis:number) {
  builder.addFieldFloat64(81, errSemiIntAxis, 0.0);
}

static addErrAreaOrient(builder:flatbuffers.Builder, errAreaOrient:number) {
  builder.addFieldFloat64(82, errAreaOrient, 0.0);
}

static addErrSemiMajElev(builder:flatbuffers.Builder, errSemiMajElev:number) {
  builder.addFieldFloat64(83, errSemiMajElev, 0.0);
}

static addErrGeoAreaSwitch(builder:flatbuffers.Builder, errGeoAreaSwitchOffset:flatbuffers.Offset) {
  builder.addFieldOffset(84, errGeoAreaSwitchOffset, 0);
}

static addBurnoutAlt(builder:flatbuffers.Builder, burnoutAlt:number) {
  builder.addFieldFloat64(85, burnoutAlt, 0.0);
}

static addTesEventId(builder:flatbuffers.Builder, tesEventIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(86, tesEventIdOffset, 0);
}

static addSpd(builder:flatbuffers.Builder, spd:number) {
  builder.addFieldFloat64(87, spd, 0.0);
}

static addAvgSpd(builder:flatbuffers.Builder, avgSpd:number) {
  builder.addFieldFloat64(88, avgSpd, 0.0);
}

static addTol(builder:flatbuffers.Builder, tol:number) {
  builder.addFieldFloat64(89, tol, 0.0);
}

static addAlt(builder:flatbuffers.Builder, alt:number) {
  builder.addFieldFloat64(90, alt, 0.0);
}

static addHdng(builder:flatbuffers.Builder, hdng:number) {
  builder.addFieldFloat64(91, hdng, 0.0);
}

static addCourse(builder:flatbuffers.Builder, course:number) {
  builder.addFieldFloat64(92, course, 0.0);
}

static addPropRpm(builder:flatbuffers.Builder, propRpm:number) {
  builder.addFieldFloat64(93, propRpm, 0.0);
}

static addTpk(builder:flatbuffers.Builder, tpk:number) {
  builder.addFieldFloat64(94, tpk, 0.0);
}

static addCoopLocInd(builder:flatbuffers.Builder, coopLocIndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(95, coopLocIndOffset, 0);
}

static addManeuverInd(builder:flatbuffers.Builder, maneuverIndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(96, maneuverIndOffset, 0);
}

static addLaunchAouType(builder:flatbuffers.Builder, launchAouTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(97, launchAouTypeOffset, 0);
}

static addLaunchAouData(builder:flatbuffers.Builder, launchAouDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(98, launchAouDataOffset, 0);
}

static createLaunchAouDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLaunchAouDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addImpactAouType(builder:flatbuffers.Builder, impactAouTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(99, impactAouTypeOffset, 0);
}

static addImpactAouData(builder:flatbuffers.Builder, impactAouDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(100, impactAouDataOffset, 0);
}

static createImpactAouDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startImpactAouDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAouRptType(builder:flatbuffers.Builder, aouRptTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(101, aouRptTypeOffset, 0);
}

static addAouRptData(builder:flatbuffers.Builder, aouRptDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(102, aouRptDataOffset, 0);
}

static createAouRptDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAouRptDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEcefPos(builder:flatbuffers.Builder, ecefPosOffset:flatbuffers.Offset) {
  builder.addFieldOffset(103, ecefPosOffset, 0);
}

static createEcefPosVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEcefPosVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEcefVel(builder:flatbuffers.Builder, ecefVelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(104, ecefVelOffset, 0);
}

static createEcefVelVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEcefVelVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addContainment(builder:flatbuffers.Builder, containment:number) {
  builder.addFieldFloat64(105, containment, 0.0);
}

static addCpa(builder:flatbuffers.Builder, cpa:number) {
  builder.addFieldFloat64(106, cpa, 0.0);
}

static addTcpa(builder:flatbuffers.Builder, tcpaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(107, tcpaOffset, 0);
}

static addNavStatus(builder:flatbuffers.Builder, navStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(108, navStatusOffset, 0);
}

static addPosDeviceType(builder:flatbuffers.Builder, posDeviceTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(109, posDeviceTypeOffset, 0);
}

static addAton(builder:flatbuffers.Builder, atonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(110, atonOffset, 0);
}

static addOffPosInd(builder:flatbuffers.Builder, offPosIndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(111, offPosIndOffset, 0);
}

static addAntennaRefDimensions(builder:flatbuffers.Builder, antennaRefDimensionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(112, antennaRefDimensionsOffset, 0);
}

static createAntennaRefDimensionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAntennaRefDimensionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addShipClass(builder:flatbuffers.Builder, shipClassOffset:flatbuffers.Offset) {
  builder.addFieldOffset(113, shipClassOffset, 0);
}

static addImon(builder:flatbuffers.Builder, imon:number) {
  builder.addFieldInt32(114, imon, 0);
}

static addMmsi(builder:flatbuffers.Builder, mmsi:number) {
  builder.addFieldInt32(115, mmsi, 0);
}

static addDraught(builder:flatbuffers.Builder, draught:number) {
  builder.addFieldFloat64(116, draught, 0.0);
}

static addLength(builder:flatbuffers.Builder, length:number) {
  builder.addFieldFloat64(117, length, 0.0);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldFloat64(118, width, 0.0);
}

static addCargoType(builder:flatbuffers.Builder, cargoTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(119, cargoTypeOffset, 0);
}

static addAppGrp(builder:flatbuffers.Builder, appGrpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(120, appGrpOffset, 0);
}

static addHullProf(builder:flatbuffers.Builder, hullProfOffset:flatbuffers.Offset) {
  builder.addFieldOffset(121, hullProfOffset, 0);
}

static addPropType(builder:flatbuffers.Builder, propTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(122, propTypeOffset, 0);
}

static addNumBlades(builder:flatbuffers.Builder, numBlades:number) {
  builder.addFieldInt32(123, numBlades, 0);
}

static addNumShafts(builder:flatbuffers.Builder, numShafts:number) {
  builder.addFieldInt32(124, numShafts, 0);
}

static addSternType(builder:flatbuffers.Builder, sternTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(125, sternTypeOffset, 0);
}

static addVslWt(builder:flatbuffers.Builder, vslWt:number) {
  builder.addFieldFloat64(126, vslWt, 0.0);
}

static addArrTime(builder:flatbuffers.Builder, arrTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(127, arrTimeOffset, 0);
}

static addArrFlag(builder:flatbuffers.Builder, arrFlagOffset:flatbuffers.Offset) {
  builder.addFieldOffset(128, arrFlagOffset, 0);
}

static addArrCargo(builder:flatbuffers.Builder, arrCargoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(129, arrCargoOffset, 0);
}

static addArrPort(builder:flatbuffers.Builder, arrPortOffset:flatbuffers.Offset) {
  builder.addFieldOffset(130, arrPortOffset, 0);
}

static addDepPort(builder:flatbuffers.Builder, depPortOffset:flatbuffers.Offset) {
  builder.addFieldOffset(131, depPortOffset, 0);
}

static addDepFlag(builder:flatbuffers.Builder, depFlagOffset:flatbuffers.Offset) {
  builder.addFieldOffset(132, depFlagOffset, 0);
}

static addDepCargo(builder:flatbuffers.Builder, depCargoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(133, depCargoOffset, 0);
}

static addDesFlag(builder:flatbuffers.Builder, desFlagOffset:flatbuffers.Offset) {
  builder.addFieldOffset(134, desFlagOffset, 0);
}

static addDesCargo(builder:flatbuffers.Builder, desCargoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(135, desCargoOffset, 0);
}

static addDestination(builder:flatbuffers.Builder, destinationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(136, destinationOffset, 0);
}

static addEta(builder:flatbuffers.Builder, etaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(137, etaOffset, 0);
}

static addEtd(builder:flatbuffers.Builder, etdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(138, etdOffset, 0);
}

static addIff(builder:flatbuffers.Builder, iffOffset:flatbuffers.Offset) {
  builder.addFieldOffset(139, iffOffset, 0);
}

static addEmgInd(builder:flatbuffers.Builder, emgInd:boolean) {
  builder.addFieldInt8(140, +emgInd, +false);
}

static addDropPtInd(builder:flatbuffers.Builder, dropPtInd:boolean) {
  builder.addFieldInt8(141, +dropPtInd, +false);
}

static addReinforced(builder:flatbuffers.Builder, reinforced:boolean) {
  builder.addFieldInt8(142, +reinforced, +false);
}

static addReduced(builder:flatbuffers.Builder, reduced:boolean) {
  builder.addFieldInt8(143, +reduced, +false);
}

static addHq(builder:flatbuffers.Builder, hq:boolean) {
  builder.addFieldInt8(144, +hq, +false);
}

static addDummy(builder:flatbuffers.Builder, dummy:boolean) {
  builder.addFieldInt8(145, +dummy, +false);
}

static addTaskForce(builder:flatbuffers.Builder, taskForce:boolean) {
  builder.addFieldInt8(146, +taskForce, +false);
}

static addFeint(builder:flatbuffers.Builder, feint:boolean) {
  builder.addFieldInt8(147, +feint, +false);
}

static addInstallation(builder:flatbuffers.Builder, installation:boolean) {
  builder.addFieldInt8(148, +installation, +false);
}

static addStaffCmts(builder:flatbuffers.Builder, staffCmtsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(149, staffCmtsOffset, 0);
}

static addAddInfo(builder:flatbuffers.Builder, addInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(150, addInfoOffset, 0);
}

static addEvalRating(builder:flatbuffers.Builder, evalRatingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(151, evalRatingOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(152, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(153, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(154, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(155, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:TrackDetails_Full_dataMode_Enum) {
  builder.addFieldInt8(156, dataMode, TrackDetails_Full_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(157, origNetworkOffset, 0);
}

static endTrackDetails_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTrackDetails_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'TRAC');
}

static finishSizePrefixedTrackDetails_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'TRAC', true);
}

static createTrackDetails_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, env:TrackDetails_Full_env_Enum, msgTypeOffset:flatbuffers.Offset, hullNumOffset:flatbuffers.Offset, pifOffset:flatbuffers.Offset, sconumOffset:flatbuffers.Offset, ntdsOffset:flatbuffers.Offset, disIdOffset:flatbuffers.Offset, midbCatOffset:flatbuffers.Offset, beNumberOffset:flatbuffers.Offset, oSuffixOffset:flatbuffers.Offset, pinOffset:flatbuffers.Offset, lostTrkInd:boolean, muidSrcTrkOffset:flatbuffers.Offset, muidSrcOffset:flatbuffers.Offset, mslStatusOffset:flatbuffers.Offset, trkConf:number, trkQual:number, alertOffset:flatbuffers.Offset, origXrefOffset:flatbuffers.Offset, elnot1Offset:flatbuffers.Offset, elnot2Offset:flatbuffers.Offset, objIdent:TrackDetails_Full_objIdent_Enum, objTypeOffset:flatbuffers.Offset, objPlatOffset:flatbuffers.Offset, objActOffset:flatbuffers.Offset, objNatOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, shortNameOffset:flatbuffers.Offset, trkIdOffset:flatbuffers.Offset, trkNumOffset:flatbuffers.Offset, trkScopeOffset:flatbuffers.Offset, sourceUidOffset:flatbuffers.Offset, callSignOffset:flatbuffers.Offset, identAmpOffset:flatbuffers.Offset, spaceAmpOffset:flatbuffers.Offset, spaceAmpConf:number, spaceSpecTypeOffset:flatbuffers.Offset, acftSubTypeOffset:flatbuffers.Offset, tsOffset:flatbuffers.Offset, launchTimeOffset:flatbuffers.Offset, impactTimeOffset:flatbuffers.Offset, ftnMsgTsOffset:flatbuffers.Offset, ftnOffset:flatbuffers.Offset, ftnCmdOffset:flatbuffers.Offset, rtnMsgTsOffset:flatbuffers.Offset, rtnOffset:flatbuffers.Offset, rtnTrkStateOffset:flatbuffers.Offset, rtnCmdOffset:flatbuffers.Offset, senOffset:flatbuffers.Offset, rptChxrefOffset:flatbuffers.Offset, rptArchived:boolean, selfReport:boolean, mil2525BstrOffset:flatbuffers.Offset, trnspdrIdOffset:flatbuffers.Offset, trnspdrTypeOffset:flatbuffers.Offset, emitterNameOffset:flatbuffers.Offset, infoSourceOffset:flatbuffers.Offset, boosting:boolean, freq:number, maxFreq:number, harmonicsOffset:flatbuffers.Offset, pri:number, prf:number, pw:number, scanTypeOffset:flatbuffers.Offset, scanRate:number, scn:number, cIOffset:flatbuffers.Offset, angElev:number, lat:number, lon:number, launchLat:number, launchLon:number, impactLat:number, impactLon:number, polarSingLocLat:number, polarSingLocLon:number, azCorrCenterLine:number, azCorrArcWidth:number, errSemiIntAxis:number, errAreaOrient:number, errSemiMajElev:number, errGeoAreaSwitchOffset:flatbuffers.Offset, burnoutAlt:number, tesEventIdOffset:flatbuffers.Offset, spd:number, avgSpd:number, tol:number, alt:number, hdng:number, course:number, propRpm:number, tpk:number, coopLocIndOffset:flatbuffers.Offset, maneuverIndOffset:flatbuffers.Offset, launchAouTypeOffset:flatbuffers.Offset, launchAouDataOffset:flatbuffers.Offset, impactAouTypeOffset:flatbuffers.Offset, impactAouDataOffset:flatbuffers.Offset, aouRptTypeOffset:flatbuffers.Offset, aouRptDataOffset:flatbuffers.Offset, ecefPosOffset:flatbuffers.Offset, ecefVelOffset:flatbuffers.Offset, containment:number, cpa:number, tcpaOffset:flatbuffers.Offset, navStatusOffset:flatbuffers.Offset, posDeviceTypeOffset:flatbuffers.Offset, atonOffset:flatbuffers.Offset, offPosIndOffset:flatbuffers.Offset, antennaRefDimensionsOffset:flatbuffers.Offset, shipClassOffset:flatbuffers.Offset, imon:number, mmsi:number, draught:number, length:number, width:number, cargoTypeOffset:flatbuffers.Offset, appGrpOffset:flatbuffers.Offset, hullProfOffset:flatbuffers.Offset, propTypeOffset:flatbuffers.Offset, numBlades:number, numShafts:number, sternTypeOffset:flatbuffers.Offset, vslWt:number, arrTimeOffset:flatbuffers.Offset, arrFlagOffset:flatbuffers.Offset, arrCargoOffset:flatbuffers.Offset, arrPortOffset:flatbuffers.Offset, depPortOffset:flatbuffers.Offset, depFlagOffset:flatbuffers.Offset, depCargoOffset:flatbuffers.Offset, desFlagOffset:flatbuffers.Offset, desCargoOffset:flatbuffers.Offset, destinationOffset:flatbuffers.Offset, etaOffset:flatbuffers.Offset, etdOffset:flatbuffers.Offset, iffOffset:flatbuffers.Offset, emgInd:boolean, dropPtInd:boolean, reinforced:boolean, reduced:boolean, hq:boolean, dummy:boolean, taskForce:boolean, feint:boolean, installation:boolean, staffCmtsOffset:flatbuffers.Offset, addInfoOffset:flatbuffers.Offset, evalRatingOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:TrackDetails_Full_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  TrackDetails_Full.startTrackDetails_Full(builder);
  TrackDetails_Full.addId(builder, idOffset);
  TrackDetails_Full.addClassificationMarking(builder, classificationMarkingOffset);
  TrackDetails_Full.addEnv(builder, env);
  TrackDetails_Full.addMsgType(builder, msgTypeOffset);
  TrackDetails_Full.addHullNum(builder, hullNumOffset);
  TrackDetails_Full.addPif(builder, pifOffset);
  TrackDetails_Full.addSconum(builder, sconumOffset);
  TrackDetails_Full.addNtds(builder, ntdsOffset);
  TrackDetails_Full.addDisId(builder, disIdOffset);
  TrackDetails_Full.addMidbCat(builder, midbCatOffset);
  TrackDetails_Full.addBeNumber(builder, beNumberOffset);
  TrackDetails_Full.addOSuffix(builder, oSuffixOffset);
  TrackDetails_Full.addPin(builder, pinOffset);
  TrackDetails_Full.addLostTrkInd(builder, lostTrkInd);
  TrackDetails_Full.addMuidSrcTrk(builder, muidSrcTrkOffset);
  TrackDetails_Full.addMuidSrc(builder, muidSrcOffset);
  TrackDetails_Full.addMslStatus(builder, mslStatusOffset);
  TrackDetails_Full.addTrkConf(builder, trkConf);
  TrackDetails_Full.addTrkQual(builder, trkQual);
  TrackDetails_Full.addAlert(builder, alertOffset);
  TrackDetails_Full.addOrigXref(builder, origXrefOffset);
  TrackDetails_Full.addElnot1(builder, elnot1Offset);
  TrackDetails_Full.addElnot2(builder, elnot2Offset);
  TrackDetails_Full.addObjIdent(builder, objIdent);
  TrackDetails_Full.addObjType(builder, objTypeOffset);
  TrackDetails_Full.addObjPlat(builder, objPlatOffset);
  TrackDetails_Full.addObjAct(builder, objActOffset);
  TrackDetails_Full.addObjNat(builder, objNatOffset);
  TrackDetails_Full.addName(builder, nameOffset);
  TrackDetails_Full.addShortName(builder, shortNameOffset);
  TrackDetails_Full.addTrkId(builder, trkIdOffset);
  TrackDetails_Full.addTrkNum(builder, trkNumOffset);
  TrackDetails_Full.addTrkScope(builder, trkScopeOffset);
  TrackDetails_Full.addSourceUid(builder, sourceUidOffset);
  TrackDetails_Full.addCallSign(builder, callSignOffset);
  TrackDetails_Full.addIdentAmp(builder, identAmpOffset);
  TrackDetails_Full.addSpaceAmp(builder, spaceAmpOffset);
  TrackDetails_Full.addSpaceAmpConf(builder, spaceAmpConf);
  TrackDetails_Full.addSpaceSpecType(builder, spaceSpecTypeOffset);
  TrackDetails_Full.addAcftSubType(builder, acftSubTypeOffset);
  TrackDetails_Full.addTs(builder, tsOffset);
  TrackDetails_Full.addLaunchTime(builder, launchTimeOffset);
  TrackDetails_Full.addImpactTime(builder, impactTimeOffset);
  TrackDetails_Full.addFtnMsgTs(builder, ftnMsgTsOffset);
  TrackDetails_Full.addFtn(builder, ftnOffset);
  TrackDetails_Full.addFtnCmd(builder, ftnCmdOffset);
  TrackDetails_Full.addRtnMsgTs(builder, rtnMsgTsOffset);
  TrackDetails_Full.addRtn(builder, rtnOffset);
  TrackDetails_Full.addRtnTrkState(builder, rtnTrkStateOffset);
  TrackDetails_Full.addRtnCmd(builder, rtnCmdOffset);
  TrackDetails_Full.addSen(builder, senOffset);
  TrackDetails_Full.addRptChxref(builder, rptChxrefOffset);
  TrackDetails_Full.addRptArchived(builder, rptArchived);
  TrackDetails_Full.addSelfReport(builder, selfReport);
  TrackDetails_Full.addMil2525Bstr(builder, mil2525BstrOffset);
  TrackDetails_Full.addTrnspdrId(builder, trnspdrIdOffset);
  TrackDetails_Full.addTrnspdrType(builder, trnspdrTypeOffset);
  TrackDetails_Full.addEmitterName(builder, emitterNameOffset);
  TrackDetails_Full.addInfoSource(builder, infoSourceOffset);
  TrackDetails_Full.addBoosting(builder, boosting);
  TrackDetails_Full.addFreq(builder, freq);
  TrackDetails_Full.addMaxFreq(builder, maxFreq);
  TrackDetails_Full.addHarmonics(builder, harmonicsOffset);
  TrackDetails_Full.addPri(builder, pri);
  TrackDetails_Full.addPrf(builder, prf);
  TrackDetails_Full.addPw(builder, pw);
  TrackDetails_Full.addScanType(builder, scanTypeOffset);
  TrackDetails_Full.addScanRate(builder, scanRate);
  TrackDetails_Full.addScn(builder, scn);
  TrackDetails_Full.addCI(builder, cIOffset);
  TrackDetails_Full.addAngElev(builder, angElev);
  TrackDetails_Full.addLat(builder, lat);
  TrackDetails_Full.addLon(builder, lon);
  TrackDetails_Full.addLaunchLat(builder, launchLat);
  TrackDetails_Full.addLaunchLon(builder, launchLon);
  TrackDetails_Full.addImpactLat(builder, impactLat);
  TrackDetails_Full.addImpactLon(builder, impactLon);
  TrackDetails_Full.addPolarSingLocLat(builder, polarSingLocLat);
  TrackDetails_Full.addPolarSingLocLon(builder, polarSingLocLon);
  TrackDetails_Full.addAzCorrCenterLine(builder, azCorrCenterLine);
  TrackDetails_Full.addAzCorrArcWidth(builder, azCorrArcWidth);
  TrackDetails_Full.addErrSemiIntAxis(builder, errSemiIntAxis);
  TrackDetails_Full.addErrAreaOrient(builder, errAreaOrient);
  TrackDetails_Full.addErrSemiMajElev(builder, errSemiMajElev);
  TrackDetails_Full.addErrGeoAreaSwitch(builder, errGeoAreaSwitchOffset);
  TrackDetails_Full.addBurnoutAlt(builder, burnoutAlt);
  TrackDetails_Full.addTesEventId(builder, tesEventIdOffset);
  TrackDetails_Full.addSpd(builder, spd);
  TrackDetails_Full.addAvgSpd(builder, avgSpd);
  TrackDetails_Full.addTol(builder, tol);
  TrackDetails_Full.addAlt(builder, alt);
  TrackDetails_Full.addHdng(builder, hdng);
  TrackDetails_Full.addCourse(builder, course);
  TrackDetails_Full.addPropRpm(builder, propRpm);
  TrackDetails_Full.addTpk(builder, tpk);
  TrackDetails_Full.addCoopLocInd(builder, coopLocIndOffset);
  TrackDetails_Full.addManeuverInd(builder, maneuverIndOffset);
  TrackDetails_Full.addLaunchAouType(builder, launchAouTypeOffset);
  TrackDetails_Full.addLaunchAouData(builder, launchAouDataOffset);
  TrackDetails_Full.addImpactAouType(builder, impactAouTypeOffset);
  TrackDetails_Full.addImpactAouData(builder, impactAouDataOffset);
  TrackDetails_Full.addAouRptType(builder, aouRptTypeOffset);
  TrackDetails_Full.addAouRptData(builder, aouRptDataOffset);
  TrackDetails_Full.addEcefPos(builder, ecefPosOffset);
  TrackDetails_Full.addEcefVel(builder, ecefVelOffset);
  TrackDetails_Full.addContainment(builder, containment);
  TrackDetails_Full.addCpa(builder, cpa);
  TrackDetails_Full.addTcpa(builder, tcpaOffset);
  TrackDetails_Full.addNavStatus(builder, navStatusOffset);
  TrackDetails_Full.addPosDeviceType(builder, posDeviceTypeOffset);
  TrackDetails_Full.addAton(builder, atonOffset);
  TrackDetails_Full.addOffPosInd(builder, offPosIndOffset);
  TrackDetails_Full.addAntennaRefDimensions(builder, antennaRefDimensionsOffset);
  TrackDetails_Full.addShipClass(builder, shipClassOffset);
  TrackDetails_Full.addImon(builder, imon);
  TrackDetails_Full.addMmsi(builder, mmsi);
  TrackDetails_Full.addDraught(builder, draught);
  TrackDetails_Full.addLength(builder, length);
  TrackDetails_Full.addWidth(builder, width);
  TrackDetails_Full.addCargoType(builder, cargoTypeOffset);
  TrackDetails_Full.addAppGrp(builder, appGrpOffset);
  TrackDetails_Full.addHullProf(builder, hullProfOffset);
  TrackDetails_Full.addPropType(builder, propTypeOffset);
  TrackDetails_Full.addNumBlades(builder, numBlades);
  TrackDetails_Full.addNumShafts(builder, numShafts);
  TrackDetails_Full.addSternType(builder, sternTypeOffset);
  TrackDetails_Full.addVslWt(builder, vslWt);
  TrackDetails_Full.addArrTime(builder, arrTimeOffset);
  TrackDetails_Full.addArrFlag(builder, arrFlagOffset);
  TrackDetails_Full.addArrCargo(builder, arrCargoOffset);
  TrackDetails_Full.addArrPort(builder, arrPortOffset);
  TrackDetails_Full.addDepPort(builder, depPortOffset);
  TrackDetails_Full.addDepFlag(builder, depFlagOffset);
  TrackDetails_Full.addDepCargo(builder, depCargoOffset);
  TrackDetails_Full.addDesFlag(builder, desFlagOffset);
  TrackDetails_Full.addDesCargo(builder, desCargoOffset);
  TrackDetails_Full.addDestination(builder, destinationOffset);
  TrackDetails_Full.addEta(builder, etaOffset);
  TrackDetails_Full.addEtd(builder, etdOffset);
  TrackDetails_Full.addIff(builder, iffOffset);
  TrackDetails_Full.addEmgInd(builder, emgInd);
  TrackDetails_Full.addDropPtInd(builder, dropPtInd);
  TrackDetails_Full.addReinforced(builder, reinforced);
  TrackDetails_Full.addReduced(builder, reduced);
  TrackDetails_Full.addHq(builder, hq);
  TrackDetails_Full.addDummy(builder, dummy);
  TrackDetails_Full.addTaskForce(builder, taskForce);
  TrackDetails_Full.addFeint(builder, feint);
  TrackDetails_Full.addInstallation(builder, installation);
  TrackDetails_Full.addStaffCmts(builder, staffCmtsOffset);
  TrackDetails_Full.addAddInfo(builder, addInfoOffset);
  TrackDetails_Full.addEvalRating(builder, evalRatingOffset);
  TrackDetails_Full.addCreatedAt(builder, createdAtOffset);
  TrackDetails_Full.addCreatedBy(builder, createdByOffset);
  TrackDetails_Full.addSource(builder, sourceOffset);
  TrackDetails_Full.addOrigin(builder, originOffset);
  TrackDetails_Full.addDataMode(builder, dataMode);
  TrackDetails_Full.addOrigNetwork(builder, origNetworkOffset);
  return TrackDetails_Full.endTrackDetails_Full(builder);
}

unpack(): TrackDetails_FullT {
  return new TrackDetails_FullT(
    this.id(),
    this.classificationMarking(),
    this.env(),
    this.msgType(),
    this.hullNum(),
    this.pif(),
    this.sconum(),
    this.ntds(),
    this.disId(),
    this.midbCat(),
    this.beNumber(),
    this.oSuffix(),
    this.pin(),
    this.lostTrkInd(),
    this.muidSrcTrk(),
    this.muidSrc(),
    this.mslStatus(),
    this.trkConf(),
    this.trkQual(),
    this.alert(),
    this.origXref(),
    this.elnot1(),
    this.elnot2(),
    this.objIdent(),
    this.objType(),
    this.objPlat(),
    this.objAct(),
    this.objNat(),
    this.name(),
    this.shortName(),
    this.trkId(),
    this.trkNum(),
    this.trkScope(),
    this.sourceUid(),
    this.callSign(),
    this.identAmp(),
    this.spaceAmp(),
    this.spaceAmpConf(),
    this.spaceSpecType(),
    this.acftSubType(),
    this.ts(),
    this.launchTime(),
    this.impactTime(),
    this.ftnMsgTs(),
    this.ftn(),
    this.ftnCmd(),
    this.bb!.createScalarList<string>(this.rtnMsgTs.bind(this), this.rtnMsgTsLength()),
    this.bb!.createScalarList<string>(this.rtn.bind(this), this.rtnLength()),
    this.rtnTrkState(),
    this.rtnCmd(),
    this.sen(),
    this.rptChxref(),
    this.rptArchived(),
    this.selfReport(),
    this.mil2525Bstr(),
    this.trnspdrId(),
    this.trnspdrType(),
    this.emitterName(),
    this.infoSource(),
    this.boosting(),
    this.freq(),
    this.maxFreq(),
    this.harmonics(),
    this.pri(),
    this.prf(),
    this.pw(),
    this.scanType(),
    this.scanRate(),
    this.scn(),
    this.cI(),
    this.angElev(),
    this.lat(),
    this.lon(),
    this.launchLat(),
    this.launchLon(),
    this.impactLat(),
    this.impactLon(),
    this.polarSingLocLat(),
    this.polarSingLocLon(),
    this.azCorrCenterLine(),
    this.azCorrArcWidth(),
    this.errSemiIntAxis(),
    this.errAreaOrient(),
    this.errSemiMajElev(),
    this.errGeoAreaSwitch(),
    this.burnoutAlt(),
    this.tesEventId(),
    this.spd(),
    this.avgSpd(),
    this.tol(),
    this.alt(),
    this.hdng(),
    this.course(),
    this.propRpm(),
    this.tpk(),
    this.coopLocInd(),
    this.maneuverInd(),
    this.launchAouType(),
    this.bb!.createScalarList<string>(this.launchAouData.bind(this), this.launchAouDataLength()),
    this.impactAouType(),
    this.bb!.createScalarList<string>(this.impactAouData.bind(this), this.impactAouDataLength()),
    this.aouRptType(),
    this.bb!.createScalarList<string>(this.aouRptData.bind(this), this.aouRptDataLength()),
    this.bb!.createScalarList<string>(this.ecefPos.bind(this), this.ecefPosLength()),
    this.bb!.createScalarList<string>(this.ecefVel.bind(this), this.ecefVelLength()),
    this.containment(),
    this.cpa(),
    this.tcpa(),
    this.navStatus(),
    this.posDeviceType(),
    this.aton(),
    this.offPosInd(),
    this.bb!.createScalarList<string>(this.antennaRefDimensions.bind(this), this.antennaRefDimensionsLength()),
    this.shipClass(),
    this.imon(),
    this.mmsi(),
    this.draught(),
    this.length(),
    this.width(),
    this.cargoType(),
    this.appGrp(),
    this.hullProf(),
    this.propType(),
    this.numBlades(),
    this.numShafts(),
    this.sternType(),
    this.vslWt(),
    this.arrTime(),
    this.arrFlag(),
    this.arrCargo(),
    this.arrPort(),
    this.depPort(),
    this.depFlag(),
    this.depCargo(),
    this.desFlag(),
    this.desCargo(),
    this.destination(),
    this.eta(),
    this.etd(),
    this.iff(),
    this.emgInd(),
    this.dropPtInd(),
    this.reinforced(),
    this.reduced(),
    this.hq(),
    this.dummy(),
    this.taskForce(),
    this.feint(),
    this.installation(),
    this.staffCmts(),
    this.addInfo(),
    this.evalRating(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: TrackDetails_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.env = this.env();
  _o.msgType = this.msgType();
  _o.hullNum = this.hullNum();
  _o.pif = this.pif();
  _o.sconum = this.sconum();
  _o.ntds = this.ntds();
  _o.disId = this.disId();
  _o.midbCat = this.midbCat();
  _o.beNumber = this.beNumber();
  _o.oSuffix = this.oSuffix();
  _o.pin = this.pin();
  _o.lostTrkInd = this.lostTrkInd();
  _o.muidSrcTrk = this.muidSrcTrk();
  _o.muidSrc = this.muidSrc();
  _o.mslStatus = this.mslStatus();
  _o.trkConf = this.trkConf();
  _o.trkQual = this.trkQual();
  _o.alert = this.alert();
  _o.origXref = this.origXref();
  _o.elnot1 = this.elnot1();
  _o.elnot2 = this.elnot2();
  _o.objIdent = this.objIdent();
  _o.objType = this.objType();
  _o.objPlat = this.objPlat();
  _o.objAct = this.objAct();
  _o.objNat = this.objNat();
  _o.name = this.name();
  _o.shortName = this.shortName();
  _o.trkId = this.trkId();
  _o.trkNum = this.trkNum();
  _o.trkScope = this.trkScope();
  _o.sourceUid = this.sourceUid();
  _o.callSign = this.callSign();
  _o.identAmp = this.identAmp();
  _o.spaceAmp = this.spaceAmp();
  _o.spaceAmpConf = this.spaceAmpConf();
  _o.spaceSpecType = this.spaceSpecType();
  _o.acftSubType = this.acftSubType();
  _o.ts = this.ts();
  _o.launchTime = this.launchTime();
  _o.impactTime = this.impactTime();
  _o.ftnMsgTs = this.ftnMsgTs();
  _o.ftn = this.ftn();
  _o.ftnCmd = this.ftnCmd();
  _o.rtnMsgTs = this.bb!.createScalarList<string>(this.rtnMsgTs.bind(this), this.rtnMsgTsLength());
  _o.rtn = this.bb!.createScalarList<string>(this.rtn.bind(this), this.rtnLength());
  _o.rtnTrkState = this.rtnTrkState();
  _o.rtnCmd = this.rtnCmd();
  _o.sen = this.sen();
  _o.rptChxref = this.rptChxref();
  _o.rptArchived = this.rptArchived();
  _o.selfReport = this.selfReport();
  _o.mil2525Bstr = this.mil2525Bstr();
  _o.trnspdrId = this.trnspdrId();
  _o.trnspdrType = this.trnspdrType();
  _o.emitterName = this.emitterName();
  _o.infoSource = this.infoSource();
  _o.boosting = this.boosting();
  _o.freq = this.freq();
  _o.maxFreq = this.maxFreq();
  _o.harmonics = this.harmonics();
  _o.pri = this.pri();
  _o.prf = this.prf();
  _o.pw = this.pw();
  _o.scanType = this.scanType();
  _o.scanRate = this.scanRate();
  _o.scn = this.scn();
  _o.cI = this.cI();
  _o.angElev = this.angElev();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.launchLat = this.launchLat();
  _o.launchLon = this.launchLon();
  _o.impactLat = this.impactLat();
  _o.impactLon = this.impactLon();
  _o.polarSingLocLat = this.polarSingLocLat();
  _o.polarSingLocLon = this.polarSingLocLon();
  _o.azCorrCenterLine = this.azCorrCenterLine();
  _o.azCorrArcWidth = this.azCorrArcWidth();
  _o.errSemiIntAxis = this.errSemiIntAxis();
  _o.errAreaOrient = this.errAreaOrient();
  _o.errSemiMajElev = this.errSemiMajElev();
  _o.errGeoAreaSwitch = this.errGeoAreaSwitch();
  _o.burnoutAlt = this.burnoutAlt();
  _o.tesEventId = this.tesEventId();
  _o.spd = this.spd();
  _o.avgSpd = this.avgSpd();
  _o.tol = this.tol();
  _o.alt = this.alt();
  _o.hdng = this.hdng();
  _o.course = this.course();
  _o.propRpm = this.propRpm();
  _o.tpk = this.tpk();
  _o.coopLocInd = this.coopLocInd();
  _o.maneuverInd = this.maneuverInd();
  _o.launchAouType = this.launchAouType();
  _o.launchAouData = this.bb!.createScalarList<string>(this.launchAouData.bind(this), this.launchAouDataLength());
  _o.impactAouType = this.impactAouType();
  _o.impactAouData = this.bb!.createScalarList<string>(this.impactAouData.bind(this), this.impactAouDataLength());
  _o.aouRptType = this.aouRptType();
  _o.aouRptData = this.bb!.createScalarList<string>(this.aouRptData.bind(this), this.aouRptDataLength());
  _o.ecefPos = this.bb!.createScalarList<string>(this.ecefPos.bind(this), this.ecefPosLength());
  _o.ecefVel = this.bb!.createScalarList<string>(this.ecefVel.bind(this), this.ecefVelLength());
  _o.containment = this.containment();
  _o.cpa = this.cpa();
  _o.tcpa = this.tcpa();
  _o.navStatus = this.navStatus();
  _o.posDeviceType = this.posDeviceType();
  _o.aton = this.aton();
  _o.offPosInd = this.offPosInd();
  _o.antennaRefDimensions = this.bb!.createScalarList<string>(this.antennaRefDimensions.bind(this), this.antennaRefDimensionsLength());
  _o.shipClass = this.shipClass();
  _o.imon = this.imon();
  _o.mmsi = this.mmsi();
  _o.draught = this.draught();
  _o.length = this.length();
  _o.width = this.width();
  _o.cargoType = this.cargoType();
  _o.appGrp = this.appGrp();
  _o.hullProf = this.hullProf();
  _o.propType = this.propType();
  _o.numBlades = this.numBlades();
  _o.numShafts = this.numShafts();
  _o.sternType = this.sternType();
  _o.vslWt = this.vslWt();
  _o.arrTime = this.arrTime();
  _o.arrFlag = this.arrFlag();
  _o.arrCargo = this.arrCargo();
  _o.arrPort = this.arrPort();
  _o.depPort = this.depPort();
  _o.depFlag = this.depFlag();
  _o.depCargo = this.depCargo();
  _o.desFlag = this.desFlag();
  _o.desCargo = this.desCargo();
  _o.destination = this.destination();
  _o.eta = this.eta();
  _o.etd = this.etd();
  _o.iff = this.iff();
  _o.emgInd = this.emgInd();
  _o.dropPtInd = this.dropPtInd();
  _o.reinforced = this.reinforced();
  _o.reduced = this.reduced();
  _o.hq = this.hq();
  _o.dummy = this.dummy();
  _o.taskForce = this.taskForce();
  _o.feint = this.feint();
  _o.installation = this.installation();
  _o.staffCmts = this.staffCmts();
  _o.addInfo = this.addInfo();
  _o.evalRating = this.evalRating();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class TrackDetails_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public env: TrackDetails_Full_env_Enum = TrackDetails_Full_env_Enum.AIR,
  public msgType: string|Uint8Array|null = null,
  public hullNum: string|Uint8Array|null = null,
  public pif: string|Uint8Array|null = null,
  public sconum: string|Uint8Array|null = null,
  public ntds: string|Uint8Array|null = null,
  public disId: string|Uint8Array|null = null,
  public midbCat: string|Uint8Array|null = null,
  public beNumber: string|Uint8Array|null = null,
  public oSuffix: string|Uint8Array|null = null,
  public pin: string|Uint8Array|null = null,
  public lostTrkInd: boolean = false,
  public muidSrcTrk: string|Uint8Array|null = null,
  public muidSrc: string|Uint8Array|null = null,
  public mslStatus: string|Uint8Array|null = null,
  public trkConf: number = 0.0,
  public trkQual: number = 0,
  public alert: string|Uint8Array|null = null,
  public origXref: string|Uint8Array|null = null,
  public elnot1: string|Uint8Array|null = null,
  public elnot2: string|Uint8Array|null = null,
  public objIdent: TrackDetails_Full_objIdent_Enum = TrackDetails_Full_objIdent_Enum.ASSUMED_FRIEND,
  public objType: string|Uint8Array|null = null,
  public objPlat: string|Uint8Array|null = null,
  public objAct: string|Uint8Array|null = null,
  public objNat: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public shortName: string|Uint8Array|null = null,
  public trkId: string|Uint8Array|null = null,
  public trkNum: string|Uint8Array|null = null,
  public trkScope: string|Uint8Array|null = null,
  public sourceUid: string|Uint8Array|null = null,
  public callSign: string|Uint8Array|null = null,
  public identAmp: string|Uint8Array|null = null,
  public spaceAmp: string|Uint8Array|null = null,
  public spaceAmpConf: number = 0,
  public spaceSpecType: string|Uint8Array|null = null,
  public acftSubType: string|Uint8Array|null = null,
  public ts: string|Uint8Array|null = null,
  public launchTime: string|Uint8Array|null = null,
  public impactTime: string|Uint8Array|null = null,
  public ftnMsgTs: string|Uint8Array|null = null,
  public ftn: string|Uint8Array|null = null,
  public ftnCmd: string|Uint8Array|null = null,
  public rtnMsgTs: (string)[] = [],
  public rtn: (string)[] = [],
  public rtnTrkState: string|Uint8Array|null = null,
  public rtnCmd: string|Uint8Array|null = null,
  public sen: string|Uint8Array|null = null,
  public rptChxref: string|Uint8Array|null = null,
  public rptArchived: boolean = false,
  public selfReport: boolean = false,
  public mil2525Bstr: string|Uint8Array|null = null,
  public trnspdrId: string|Uint8Array|null = null,
  public trnspdrType: string|Uint8Array|null = null,
  public emitterName: string|Uint8Array|null = null,
  public infoSource: string|Uint8Array|null = null,
  public boosting: boolean = false,
  public freq: number = 0.0,
  public maxFreq: number = 0.0,
  public harmonics: string|Uint8Array|null = null,
  public pri: number = 0.0,
  public prf: number = 0.0,
  public pw: number = 0.0,
  public scanType: string|Uint8Array|null = null,
  public scanRate: number = 0.0,
  public scn: number = 0,
  public cI: string|Uint8Array|null = null,
  public angElev: number = 0.0,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public launchLat: number = 0.0,
  public launchLon: number = 0.0,
  public impactLat: number = 0.0,
  public impactLon: number = 0.0,
  public polarSingLocLat: number = 0.0,
  public polarSingLocLon: number = 0.0,
  public azCorrCenterLine: number = 0.0,
  public azCorrArcWidth: number = 0.0,
  public errSemiIntAxis: number = 0.0,
  public errAreaOrient: number = 0.0,
  public errSemiMajElev: number = 0.0,
  public errGeoAreaSwitch: string|Uint8Array|null = null,
  public burnoutAlt: number = 0.0,
  public tesEventId: string|Uint8Array|null = null,
  public spd: number = 0.0,
  public avgSpd: number = 0.0,
  public tol: number = 0.0,
  public alt: number = 0.0,
  public hdng: number = 0.0,
  public course: number = 0.0,
  public propRpm: number = 0.0,
  public tpk: number = 0.0,
  public coopLocInd: string|Uint8Array|null = null,
  public maneuverInd: string|Uint8Array|null = null,
  public launchAouType: string|Uint8Array|null = null,
  public launchAouData: (string)[] = [],
  public impactAouType: string|Uint8Array|null = null,
  public impactAouData: (string)[] = [],
  public aouRptType: string|Uint8Array|null = null,
  public aouRptData: (string)[] = [],
  public ecefPos: (string)[] = [],
  public ecefVel: (string)[] = [],
  public containment: number = 0.0,
  public cpa: number = 0.0,
  public tcpa: string|Uint8Array|null = null,
  public navStatus: string|Uint8Array|null = null,
  public posDeviceType: string|Uint8Array|null = null,
  public aton: string|Uint8Array|null = null,
  public offPosInd: string|Uint8Array|null = null,
  public antennaRefDimensions: (string)[] = [],
  public shipClass: string|Uint8Array|null = null,
  public imon: number = 0,
  public mmsi: number = 0,
  public draught: number = 0.0,
  public length: number = 0.0,
  public width: number = 0.0,
  public cargoType: string|Uint8Array|null = null,
  public appGrp: string|Uint8Array|null = null,
  public hullProf: string|Uint8Array|null = null,
  public propType: string|Uint8Array|null = null,
  public numBlades: number = 0,
  public numShafts: number = 0,
  public sternType: string|Uint8Array|null = null,
  public vslWt: number = 0.0,
  public arrTime: string|Uint8Array|null = null,
  public arrFlag: string|Uint8Array|null = null,
  public arrCargo: string|Uint8Array|null = null,
  public arrPort: string|Uint8Array|null = null,
  public depPort: string|Uint8Array|null = null,
  public depFlag: string|Uint8Array|null = null,
  public depCargo: string|Uint8Array|null = null,
  public desFlag: string|Uint8Array|null = null,
  public desCargo: string|Uint8Array|null = null,
  public destination: string|Uint8Array|null = null,
  public eta: string|Uint8Array|null = null,
  public etd: string|Uint8Array|null = null,
  public iff: string|Uint8Array|null = null,
  public emgInd: boolean = false,
  public dropPtInd: boolean = false,
  public reinforced: boolean = false,
  public reduced: boolean = false,
  public hq: boolean = false,
  public dummy: boolean = false,
  public taskForce: boolean = false,
  public feint: boolean = false,
  public installation: boolean = false,
  public staffCmts: string|Uint8Array|null = null,
  public addInfo: string|Uint8Array|null = null,
  public evalRating: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: TrackDetails_Full_dataMode_Enum = TrackDetails_Full_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const msgType = (this.msgType !== null ? builder.createString(this.msgType!) : 0);
  const hullNum = (this.hullNum !== null ? builder.createString(this.hullNum!) : 0);
  const pif = (this.pif !== null ? builder.createString(this.pif!) : 0);
  const sconum = (this.sconum !== null ? builder.createString(this.sconum!) : 0);
  const ntds = (this.ntds !== null ? builder.createString(this.ntds!) : 0);
  const disId = (this.disId !== null ? builder.createString(this.disId!) : 0);
  const midbCat = (this.midbCat !== null ? builder.createString(this.midbCat!) : 0);
  const beNumber = (this.beNumber !== null ? builder.createString(this.beNumber!) : 0);
  const oSuffix = (this.oSuffix !== null ? builder.createString(this.oSuffix!) : 0);
  const pin = (this.pin !== null ? builder.createString(this.pin!) : 0);
  const muidSrcTrk = (this.muidSrcTrk !== null ? builder.createString(this.muidSrcTrk!) : 0);
  const muidSrc = (this.muidSrc !== null ? builder.createString(this.muidSrc!) : 0);
  const mslStatus = (this.mslStatus !== null ? builder.createString(this.mslStatus!) : 0);
  const alert = (this.alert !== null ? builder.createString(this.alert!) : 0);
  const origXref = (this.origXref !== null ? builder.createString(this.origXref!) : 0);
  const elnot1 = (this.elnot1 !== null ? builder.createString(this.elnot1!) : 0);
  const elnot2 = (this.elnot2 !== null ? builder.createString(this.elnot2!) : 0);
  const objType = (this.objType !== null ? builder.createString(this.objType!) : 0);
  const objPlat = (this.objPlat !== null ? builder.createString(this.objPlat!) : 0);
  const objAct = (this.objAct !== null ? builder.createString(this.objAct!) : 0);
  const objNat = (this.objNat !== null ? builder.createString(this.objNat!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const shortName = (this.shortName !== null ? builder.createString(this.shortName!) : 0);
  const trkId = (this.trkId !== null ? builder.createString(this.trkId!) : 0);
  const trkNum = (this.trkNum !== null ? builder.createString(this.trkNum!) : 0);
  const trkScope = (this.trkScope !== null ? builder.createString(this.trkScope!) : 0);
  const sourceUid = (this.sourceUid !== null ? builder.createString(this.sourceUid!) : 0);
  const callSign = (this.callSign !== null ? builder.createString(this.callSign!) : 0);
  const identAmp = (this.identAmp !== null ? builder.createString(this.identAmp!) : 0);
  const spaceAmp = (this.spaceAmp !== null ? builder.createString(this.spaceAmp!) : 0);
  const spaceSpecType = (this.spaceSpecType !== null ? builder.createString(this.spaceSpecType!) : 0);
  const acftSubType = (this.acftSubType !== null ? builder.createString(this.acftSubType!) : 0);
  const ts = (this.ts !== null ? builder.createString(this.ts!) : 0);
  const launchTime = (this.launchTime !== null ? builder.createString(this.launchTime!) : 0);
  const impactTime = (this.impactTime !== null ? builder.createString(this.impactTime!) : 0);
  const ftnMsgTs = (this.ftnMsgTs !== null ? builder.createString(this.ftnMsgTs!) : 0);
  const ftn = (this.ftn !== null ? builder.createString(this.ftn!) : 0);
  const ftnCmd = (this.ftnCmd !== null ? builder.createString(this.ftnCmd!) : 0);
  const rtnMsgTs = TrackDetails_Full.createRtnMsgTsVector(builder, builder.createObjectOffsetList(this.rtnMsgTs));
  const rtn = TrackDetails_Full.createRtnVector(builder, builder.createObjectOffsetList(this.rtn));
  const rtnTrkState = (this.rtnTrkState !== null ? builder.createString(this.rtnTrkState!) : 0);
  const rtnCmd = (this.rtnCmd !== null ? builder.createString(this.rtnCmd!) : 0);
  const sen = (this.sen !== null ? builder.createString(this.sen!) : 0);
  const rptChxref = (this.rptChxref !== null ? builder.createString(this.rptChxref!) : 0);
  const mil2525Bstr = (this.mil2525Bstr !== null ? builder.createString(this.mil2525Bstr!) : 0);
  const trnspdrId = (this.trnspdrId !== null ? builder.createString(this.trnspdrId!) : 0);
  const trnspdrType = (this.trnspdrType !== null ? builder.createString(this.trnspdrType!) : 0);
  const emitterName = (this.emitterName !== null ? builder.createString(this.emitterName!) : 0);
  const infoSource = (this.infoSource !== null ? builder.createString(this.infoSource!) : 0);
  const harmonics = (this.harmonics !== null ? builder.createString(this.harmonics!) : 0);
  const scanType = (this.scanType !== null ? builder.createString(this.scanType!) : 0);
  const cI = (this.cI !== null ? builder.createString(this.cI!) : 0);
  const errGeoAreaSwitch = (this.errGeoAreaSwitch !== null ? builder.createString(this.errGeoAreaSwitch!) : 0);
  const tesEventId = (this.tesEventId !== null ? builder.createString(this.tesEventId!) : 0);
  const coopLocInd = (this.coopLocInd !== null ? builder.createString(this.coopLocInd!) : 0);
  const maneuverInd = (this.maneuverInd !== null ? builder.createString(this.maneuverInd!) : 0);
  const launchAouType = (this.launchAouType !== null ? builder.createString(this.launchAouType!) : 0);
  const launchAouData = TrackDetails_Full.createLaunchAouDataVector(builder, builder.createObjectOffsetList(this.launchAouData));
  const impactAouType = (this.impactAouType !== null ? builder.createString(this.impactAouType!) : 0);
  const impactAouData = TrackDetails_Full.createImpactAouDataVector(builder, builder.createObjectOffsetList(this.impactAouData));
  const aouRptType = (this.aouRptType !== null ? builder.createString(this.aouRptType!) : 0);
  const aouRptData = TrackDetails_Full.createAouRptDataVector(builder, builder.createObjectOffsetList(this.aouRptData));
  const ecefPos = TrackDetails_Full.createEcefPosVector(builder, builder.createObjectOffsetList(this.ecefPos));
  const ecefVel = TrackDetails_Full.createEcefVelVector(builder, builder.createObjectOffsetList(this.ecefVel));
  const tcpa = (this.tcpa !== null ? builder.createString(this.tcpa!) : 0);
  const navStatus = (this.navStatus !== null ? builder.createString(this.navStatus!) : 0);
  const posDeviceType = (this.posDeviceType !== null ? builder.createString(this.posDeviceType!) : 0);
  const aton = (this.aton !== null ? builder.createString(this.aton!) : 0);
  const offPosInd = (this.offPosInd !== null ? builder.createString(this.offPosInd!) : 0);
  const antennaRefDimensions = TrackDetails_Full.createAntennaRefDimensionsVector(builder, builder.createObjectOffsetList(this.antennaRefDimensions));
  const shipClass = (this.shipClass !== null ? builder.createString(this.shipClass!) : 0);
  const cargoType = (this.cargoType !== null ? builder.createString(this.cargoType!) : 0);
  const appGrp = (this.appGrp !== null ? builder.createString(this.appGrp!) : 0);
  const hullProf = (this.hullProf !== null ? builder.createString(this.hullProf!) : 0);
  const propType = (this.propType !== null ? builder.createString(this.propType!) : 0);
  const sternType = (this.sternType !== null ? builder.createString(this.sternType!) : 0);
  const arrTime = (this.arrTime !== null ? builder.createString(this.arrTime!) : 0);
  const arrFlag = (this.arrFlag !== null ? builder.createString(this.arrFlag!) : 0);
  const arrCargo = (this.arrCargo !== null ? builder.createString(this.arrCargo!) : 0);
  const arrPort = (this.arrPort !== null ? builder.createString(this.arrPort!) : 0);
  const depPort = (this.depPort !== null ? builder.createString(this.depPort!) : 0);
  const depFlag = (this.depFlag !== null ? builder.createString(this.depFlag!) : 0);
  const depCargo = (this.depCargo !== null ? builder.createString(this.depCargo!) : 0);
  const desFlag = (this.desFlag !== null ? builder.createString(this.desFlag!) : 0);
  const desCargo = (this.desCargo !== null ? builder.createString(this.desCargo!) : 0);
  const destination = (this.destination !== null ? builder.createString(this.destination!) : 0);
  const eta = (this.eta !== null ? builder.createString(this.eta!) : 0);
  const etd = (this.etd !== null ? builder.createString(this.etd!) : 0);
  const iff = (this.iff !== null ? builder.createString(this.iff!) : 0);
  const staffCmts = (this.staffCmts !== null ? builder.createString(this.staffCmts!) : 0);
  const addInfo = (this.addInfo !== null ? builder.createString(this.addInfo!) : 0);
  const evalRating = (this.evalRating !== null ? builder.createString(this.evalRating!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return TrackDetails_Full.createTrackDetails_Full(builder,
    id,
    classificationMarking,
    this.env,
    msgType,
    hullNum,
    pif,
    sconum,
    ntds,
    disId,
    midbCat,
    beNumber,
    oSuffix,
    pin,
    this.lostTrkInd,
    muidSrcTrk,
    muidSrc,
    mslStatus,
    this.trkConf,
    this.trkQual,
    alert,
    origXref,
    elnot1,
    elnot2,
    this.objIdent,
    objType,
    objPlat,
    objAct,
    objNat,
    name,
    shortName,
    trkId,
    trkNum,
    trkScope,
    sourceUid,
    callSign,
    identAmp,
    spaceAmp,
    this.spaceAmpConf,
    spaceSpecType,
    acftSubType,
    ts,
    launchTime,
    impactTime,
    ftnMsgTs,
    ftn,
    ftnCmd,
    rtnMsgTs,
    rtn,
    rtnTrkState,
    rtnCmd,
    sen,
    rptChxref,
    this.rptArchived,
    this.selfReport,
    mil2525Bstr,
    trnspdrId,
    trnspdrType,
    emitterName,
    infoSource,
    this.boosting,
    this.freq,
    this.maxFreq,
    harmonics,
    this.pri,
    this.prf,
    this.pw,
    scanType,
    this.scanRate,
    this.scn,
    cI,
    this.angElev,
    this.lat,
    this.lon,
    this.launchLat,
    this.launchLon,
    this.impactLat,
    this.impactLon,
    this.polarSingLocLat,
    this.polarSingLocLon,
    this.azCorrCenterLine,
    this.azCorrArcWidth,
    this.errSemiIntAxis,
    this.errAreaOrient,
    this.errSemiMajElev,
    errGeoAreaSwitch,
    this.burnoutAlt,
    tesEventId,
    this.spd,
    this.avgSpd,
    this.tol,
    this.alt,
    this.hdng,
    this.course,
    this.propRpm,
    this.tpk,
    coopLocInd,
    maneuverInd,
    launchAouType,
    launchAouData,
    impactAouType,
    impactAouData,
    aouRptType,
    aouRptData,
    ecefPos,
    ecefVel,
    this.containment,
    this.cpa,
    tcpa,
    navStatus,
    posDeviceType,
    aton,
    offPosInd,
    antennaRefDimensions,
    shipClass,
    this.imon,
    this.mmsi,
    this.draught,
    this.length,
    this.width,
    cargoType,
    appGrp,
    hullProf,
    propType,
    this.numBlades,
    this.numShafts,
    sternType,
    this.vslWt,
    arrTime,
    arrFlag,
    arrCargo,
    arrPort,
    depPort,
    depFlag,
    depCargo,
    desFlag,
    desCargo,
    destination,
    eta,
    etd,
    iff,
    this.emgInd,
    this.dropPtInd,
    this.reinforced,
    this.reduced,
    this.hq,
    this.dummy,
    this.taskForce,
    this.feint,
    this.installation,
    staffCmts,
    addInfo,
    evalRating,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
