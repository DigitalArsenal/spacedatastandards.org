// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Information about the Point of Contact (POC) for this ISR Collection.
 */
export class ISRCollectionPOC_Abridged implements flatbuffers.IUnpackableObject<ISRCollectionPOC_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ISRCollectionPOC_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsISRCollectionPOC_Abridged(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionPOC_Abridged):ISRCollectionPOC_Abridged {
  return (obj || new ISRCollectionPOC_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsISRCollectionPOC_Abridged(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionPOC_Abridged):ISRCollectionPOC_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ISRCollectionPOC_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ISRC');
}

/**
 * Unique identifier of the collection requirement POC.
 * Example: /// Example: ISRCOLLECTIONPOC-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the POC.
 * Example: /// Example: NAME
 * Constraints: Minimum length = 0, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Callsign of the POC.
 * Example: /// Example: CALLSIGN
 * Constraints: Minimum length = 0, Maximum length = 32
 */
callsign():string|null
callsign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callsign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unit the POC belongs to.
 * Example: /// Example: UNIT
 * Constraints: Minimum length = 0, Maximum length = 32
 */
unit():string|null
unit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Email address of the POC.
 * Example: /// Example: EMAIL
 * Constraints: Minimum length = 0, Maximum length = 128
 */
email():string|null
email(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
email(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Phone number of the POC.
 * Example: /// Example: PHONE
 * Constraints: Minimum length = 0, Maximum length = 45
 */
phone():string|null
phone(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
phone(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Radio Frequency the POC is on.
 * Example: /// Example: 123.23
 * Constraints: No constraints specified.
 */
radioFrequency():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Chat system the POC is accessing.
 * Example: /// Example: CHAT
 * Constraints: Minimum length = 0, Maximum length = 32
 */
chatSystem():string|null
chatSystem(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chatSystem(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Chat name of the POC.
 * Example: /// Example: CHAT_NAME
 * Constraints: Minimum length = 0, Maximum length = 32
 */
chatName():string|null
chatName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chatName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Amplifying notes about the POC.
 * Example: /// Example: NOTES
 * Constraints: Minimum length = 0, Maximum length = 256
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startISRCollectionPOC_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addCallsign(builder:flatbuffers.Builder, callsignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, callsignOffset, 0);
}

static addUnit(builder:flatbuffers.Builder, unitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, unitOffset, 0);
}

static addEmail(builder:flatbuffers.Builder, emailOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, emailOffset, 0);
}

static addPhone(builder:flatbuffers.Builder, phoneOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, phoneOffset, 0);
}

static addRadioFrequency(builder:flatbuffers.Builder, radioFrequency:number) {
  builder.addFieldFloat64(6, radioFrequency, 0.0);
}

static addChatSystem(builder:flatbuffers.Builder, chatSystemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, chatSystemOffset, 0);
}

static addChatName(builder:flatbuffers.Builder, chatNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, chatNameOffset, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, notesOffset, 0);
}

static endISRCollectionPOC_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishISRCollectionPOC_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC');
}

static finishSizePrefixedISRCollectionPOC_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC', true);
}

static createISRCollectionPOC_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, callsignOffset:flatbuffers.Offset, unitOffset:flatbuffers.Offset, emailOffset:flatbuffers.Offset, phoneOffset:flatbuffers.Offset, radioFrequency:number, chatSystemOffset:flatbuffers.Offset, chatNameOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset):flatbuffers.Offset {
  ISRCollectionPOC_Abridged.startISRCollectionPOC_Abridged(builder);
  ISRCollectionPOC_Abridged.addId(builder, idOffset);
  ISRCollectionPOC_Abridged.addName(builder, nameOffset);
  ISRCollectionPOC_Abridged.addCallsign(builder, callsignOffset);
  ISRCollectionPOC_Abridged.addUnit(builder, unitOffset);
  ISRCollectionPOC_Abridged.addEmail(builder, emailOffset);
  ISRCollectionPOC_Abridged.addPhone(builder, phoneOffset);
  ISRCollectionPOC_Abridged.addRadioFrequency(builder, radioFrequency);
  ISRCollectionPOC_Abridged.addChatSystem(builder, chatSystemOffset);
  ISRCollectionPOC_Abridged.addChatName(builder, chatNameOffset);
  ISRCollectionPOC_Abridged.addNotes(builder, notesOffset);
  return ISRCollectionPOC_Abridged.endISRCollectionPOC_Abridged(builder);
}

unpack(): ISRCollectionPOC_AbridgedT {
  return new ISRCollectionPOC_AbridgedT(
    this.id(),
    this.name(),
    this.callsign(),
    this.unit(),
    this.email(),
    this.phone(),
    this.radioFrequency(),
    this.chatSystem(),
    this.chatName(),
    this.notes()
  );
}


unpackTo(_o: ISRCollectionPOC_AbridgedT): void {
  _o.id = this.id();
  _o.name = this.name();
  _o.callsign = this.callsign();
  _o.unit = this.unit();
  _o.email = this.email();
  _o.phone = this.phone();
  _o.radioFrequency = this.radioFrequency();
  _o.chatSystem = this.chatSystem();
  _o.chatName = this.chatName();
  _o.notes = this.notes();
}
}

export class ISRCollectionPOC_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public callsign: string|Uint8Array|null = null,
  public unit: string|Uint8Array|null = null,
  public email: string|Uint8Array|null = null,
  public phone: string|Uint8Array|null = null,
  public radioFrequency: number = 0.0,
  public chatSystem: string|Uint8Array|null = null,
  public chatName: string|Uint8Array|null = null,
  public notes: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const callsign = (this.callsign !== null ? builder.createString(this.callsign!) : 0);
  const unit = (this.unit !== null ? builder.createString(this.unit!) : 0);
  const email = (this.email !== null ? builder.createString(this.email!) : 0);
  const phone = (this.phone !== null ? builder.createString(this.phone!) : 0);
  const chatSystem = (this.chatSystem !== null ? builder.createString(this.chatSystem!) : 0);
  const chatName = (this.chatName !== null ? builder.createString(this.chatName!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);

  return ISRCollectionPOC_Abridged.createISRCollectionPOC_Abridged(builder,
    id,
    name,
    callsign,
    unit,
    email,
    phone,
    this.radioFrequency,
    chatSystem,
    chatName,
    notes
  );
}
}
