// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GNSSObservationSet_Abridged_dataMode_Enum } from './GNSSObservationSet_Abridged_dataMode_Enum.js';


/**
 * /// Set of GNSSObservation data.
 */
export class GNSSObservationSet_Abridged implements flatbuffers.IUnpackableObject<GNSSObservationSet_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GNSSObservationSet_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGNSSObservationSet_Abridged(bb:flatbuffers.ByteBuffer, obj?:GNSSObservationSet_Abridged):GNSSObservationSet_Abridged {
  return (obj || new GNSSObservationSet_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGNSSObservationSet_Abridged(bb:flatbuffers.ByteBuffer, obj?:GNSSObservationSet_Abridged):GNSSObservationSet_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GNSSObservationSet_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('GNSS');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: GNSSObSet-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The marker type of the observing receiver (AIRBORNE, ANIMAL, BALLISTIC, FIXED BUOY, FLOATING BUOY, FLOATING ICE, GEODETIC, GLACIER, GROUNDCRAFT, HUMAN, NON GEODETIC, NON PHYSICAL, SPACEBORNE, WATERCRAFT).  Reference RINEX 3+ for further information concerning marker types.
 * Example: /// Example: SPACEBORNE
 * Constraints: Minimum length = 0, Maximum length = 24
 */
markerType():string|null
markerType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
markerType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the primary satellite on-orbit object.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the target on-orbit object.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Observation Time, in ISO8601 UTC format with microsecond precision.  This timestamp applies to all observations within the set.
 * Example: /// Example: 2022-01-01T00:00:00.123456Z
 * Constraints: No constraints specified.
 */
ts():string|null
ts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time, in seconds, that the receiver has been unable to compute a GNSS fix.
 * Example: /// Example: 200
 * Constraints: No constraints specified.
 */
outage():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Geometric Dilution of Precision.
 * Example: /// Example: 0.33
 * Constraints: No constraints specified.
 */
gDop():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Horizontal Dilution of Precision.
 * Example: /// Example: 0.03
 * Constraints: No constraints specified.
 */
hDop():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Position Dilution of Precision.
 * Example: /// Example: 0.002
 * Constraints: No constraints specified.
 */
pDop():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time Dilution of Precision.
 * Example: /// Example: 0.05
 * Constraints: No constraints specified.
 */
tDop():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vertical Dilution of Precision.
 * Example: /// Example: 0.03
 * Constraints: No constraints specified.
 */
vDop():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris.  If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Observation records if each receiver is synced to the ephemeris points.
 * Example: /// Example: ES-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
esId():string|null
esId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
esId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number or ID of the GNSS receiver associated with this data.  Each GNSS Observation Set is associated with only one receiver.  If reporting for multiple receivers a separate set should be generated for each.  A null value is assumed to indicate that only one receiver is present, or reported.
 * Example: /// Example: RECEIVER-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
receiver():string|null
receiver(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiver(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
 * Example: /// Example: [1.23, 3.23]
 * Constraints: No constraints specified.
 */
boresight(index: number):string
boresight(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
boresight(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

boresightLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at observation time (ts). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
 * Example: /// Example: [0.03, 0.02, 0.01, 0.012]
 * Constraints: No constraints specified.
 */
quat(index: number):string
quat(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
quat(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

quatLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * WGS-84 spacecraft latitude sub-point at observation time (ts), represented as -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 32.021
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 spacecraft longitude sub-point at observation time (ts), represented as -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 125.123
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft altitude at observation time (ts), expressed in kilometers above WGS-84 ellipsoid.
 * Example: /// Example: 200
 * Constraints: No constraints specified.
 */
alt():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Three element array, expressing the ECI J2K spacecraft velocity components, in km/second, at observation time (ts).  The array element order is [xvel, yvel, zvel].
 * Example: /// Example: [2.03, 0.003, 0.12]
 * Constraints: No constraints specified.
 */
satVelocity(index: number):string
satVelocity(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
satVelocity(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

satVelocityLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the strings containing the individual observation code sets that are contained within this GNSS Observation set.  Each string is a three-character representation of the measurement type, the channel, and the coding, in compliance with the RINEX 3+ standard (Pseudorange (C), Carrier Phase (L), Doppler (D), Signal Strength C/No (S), or Channel Number (X)).  See the GNSS Observation ob field for the units of measure associated with each observation type.
 * Example: /// Example: ['ACL']
 * Constraints: No constraints specified.
 */
obsCodes(index: number):string
obsCodes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
obsCodes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

obsCodesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
 * Example: /// Example: 0
 * Constraints: No constraints specified.
 */
trackingStatus():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The current navigation status as defined by the data source. In general the navigation status specifies whether the signal is normal, degraded, or unavailable. For status value definitions please reach out to data source provider.
 * Example: /// Example: degraded
 * Constraints: No constraints specified.
 */
navigationStatus():string|null
navigationStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
navigationStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * GNSS Automatic Gain Control State.
 * Example: /// Example: 20
 * Constraints: No constraints specified.
 */
agcState():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this GNSS Observation Set. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
 * Example: /// Example: ['SV', 'SV']
 * Constraints: No constraints specified.
 */
srcTyps(index: number):string
srcTyps(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcTyps(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcTypsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UUIDs of the UDL data records that are related to this GNSS Observation Set. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/statevector/{uuid}).
 * Example: /// Example: ['SV_ID', 'SV_ID']
 * Constraints: No constraints specified.
 */
srcIds(index: number):string
srcIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['TAG1', 'TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: TRANSACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():GNSSObservationSet_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : GNSSObservationSet_Abridged_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * GNSSObservations associated with this GNSSObservationSet.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
gnssObservationList(index: number):string
gnssObservationList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
gnssObservationList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

gnssObservationListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGNSSObservationSet_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(36);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addMarkerType(builder:flatbuffers.Builder, markerTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, markerTypeOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(4, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, origObjectIdOffset, 0);
}

static addTs(builder:flatbuffers.Builder, tsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, tsOffset, 0);
}

static addOutage(builder:flatbuffers.Builder, outage:number) {
  builder.addFieldInt32(7, outage, 0);
}

static addGDop(builder:flatbuffers.Builder, gDop:number) {
  builder.addFieldFloat64(8, gDop, 0.0);
}

static addHDop(builder:flatbuffers.Builder, hDop:number) {
  builder.addFieldFloat64(9, hDop, 0.0);
}

static addPDop(builder:flatbuffers.Builder, pDop:number) {
  builder.addFieldFloat64(10, pDop, 0.0);
}

static addTDop(builder:flatbuffers.Builder, tDop:number) {
  builder.addFieldFloat64(11, tDop, 0.0);
}

static addVDop(builder:flatbuffers.Builder, vDop:number) {
  builder.addFieldFloat64(12, vDop, 0.0);
}

static addEsId(builder:flatbuffers.Builder, esIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, esIdOffset, 0);
}

static addReceiver(builder:flatbuffers.Builder, receiverOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, receiverOffset, 0);
}

static addBoresight(builder:flatbuffers.Builder, boresightOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, boresightOffset, 0);
}

static createBoresightVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBoresightVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addQuat(builder:flatbuffers.Builder, quatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, quatOffset, 0);
}

static createQuatVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startQuatVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(17, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(18, lon, 0.0);
}

static addAlt(builder:flatbuffers.Builder, alt:number) {
  builder.addFieldFloat64(19, alt, 0.0);
}

static addSatVelocity(builder:flatbuffers.Builder, satVelocityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, satVelocityOffset, 0);
}

static createSatVelocityVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSatVelocityVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addObsCodes(builder:flatbuffers.Builder, obsCodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, obsCodesOffset, 0);
}

static createObsCodesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startObsCodesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrackingStatus(builder:flatbuffers.Builder, trackingStatus:number) {
  builder.addFieldInt32(22, trackingStatus, 0);
}

static addNavigationStatus(builder:flatbuffers.Builder, navigationStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, navigationStatusOffset, 0);
}

static addAgcState(builder:flatbuffers.Builder, agcState:number) {
  builder.addFieldInt32(24, agcState, 0);
}

static addSrcTyps(builder:flatbuffers.Builder, srcTypsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, srcTypsOffset, 0);
}

static createSrcTypsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcTypsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSrcIds(builder:flatbuffers.Builder, srcIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, srcIdsOffset, 0);
}

static createSrcIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, transactionIdOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:GNSSObservationSet_Abridged_dataMode_Enum) {
  builder.addFieldInt8(33, dataMode, GNSSObservationSet_Abridged_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, origNetworkOffset, 0);
}

static addGnssObservationList(builder:flatbuffers.Builder, gnssObservationListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, gnssObservationListOffset, 0);
}

static createGnssObservationListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGnssObservationListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGNSSObservationSet_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishGNSSObservationSet_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'GNSS');
}

static finishSizePrefixedGNSSObservationSet_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'GNSS', true);
}

static createGNSSObservationSet_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, markerTypeOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, tsOffset:flatbuffers.Offset, outage:number, gDop:number, hDop:number, pDop:number, tDop:number, vDop:number, esIdOffset:flatbuffers.Offset, receiverOffset:flatbuffers.Offset, boresightOffset:flatbuffers.Offset, quatOffset:flatbuffers.Offset, lat:number, lon:number, alt:number, satVelocityOffset:flatbuffers.Offset, obsCodesOffset:flatbuffers.Offset, trackingStatus:number, navigationStatusOffset:flatbuffers.Offset, agcState:number, srcTypsOffset:flatbuffers.Offset, srcIdsOffset:flatbuffers.Offset, tagsOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:GNSSObservationSet_Abridged_dataMode_Enum, origNetworkOffset:flatbuffers.Offset, gnssObservationListOffset:flatbuffers.Offset):flatbuffers.Offset {
  GNSSObservationSet_Abridged.startGNSSObservationSet_Abridged(builder);
  GNSSObservationSet_Abridged.addId(builder, idOffset);
  GNSSObservationSet_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  GNSSObservationSet_Abridged.addMarkerType(builder, markerTypeOffset);
  GNSSObservationSet_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
  GNSSObservationSet_Abridged.addSatNo(builder, satNo);
  GNSSObservationSet_Abridged.addOrigObjectId(builder, origObjectIdOffset);
  GNSSObservationSet_Abridged.addTs(builder, tsOffset);
  GNSSObservationSet_Abridged.addOutage(builder, outage);
  GNSSObservationSet_Abridged.addGDop(builder, gDop);
  GNSSObservationSet_Abridged.addHDop(builder, hDop);
  GNSSObservationSet_Abridged.addPDop(builder, pDop);
  GNSSObservationSet_Abridged.addTDop(builder, tDop);
  GNSSObservationSet_Abridged.addVDop(builder, vDop);
  GNSSObservationSet_Abridged.addEsId(builder, esIdOffset);
  GNSSObservationSet_Abridged.addReceiver(builder, receiverOffset);
  GNSSObservationSet_Abridged.addBoresight(builder, boresightOffset);
  GNSSObservationSet_Abridged.addQuat(builder, quatOffset);
  GNSSObservationSet_Abridged.addLat(builder, lat);
  GNSSObservationSet_Abridged.addLon(builder, lon);
  GNSSObservationSet_Abridged.addAlt(builder, alt);
  GNSSObservationSet_Abridged.addSatVelocity(builder, satVelocityOffset);
  GNSSObservationSet_Abridged.addObsCodes(builder, obsCodesOffset);
  GNSSObservationSet_Abridged.addTrackingStatus(builder, trackingStatus);
  GNSSObservationSet_Abridged.addNavigationStatus(builder, navigationStatusOffset);
  GNSSObservationSet_Abridged.addAgcState(builder, agcState);
  GNSSObservationSet_Abridged.addSrcTyps(builder, srcTypsOffset);
  GNSSObservationSet_Abridged.addSrcIds(builder, srcIdsOffset);
  GNSSObservationSet_Abridged.addTags(builder, tagsOffset);
  GNSSObservationSet_Abridged.addTransactionId(builder, transactionIdOffset);
  GNSSObservationSet_Abridged.addCreatedAt(builder, createdAtOffset);
  GNSSObservationSet_Abridged.addCreatedBy(builder, createdByOffset);
  GNSSObservationSet_Abridged.addSource(builder, sourceOffset);
  GNSSObservationSet_Abridged.addOrigin(builder, originOffset);
  GNSSObservationSet_Abridged.addDataMode(builder, dataMode);
  GNSSObservationSet_Abridged.addOrigNetwork(builder, origNetworkOffset);
  GNSSObservationSet_Abridged.addGnssObservationList(builder, gnssObservationListOffset);
  return GNSSObservationSet_Abridged.endGNSSObservationSet_Abridged(builder);
}

unpack(): GNSSObservationSet_AbridgedT {
  return new GNSSObservationSet_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.markerType(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.ts(),
    this.outage(),
    this.gDop(),
    this.hDop(),
    this.pDop(),
    this.tDop(),
    this.vDop(),
    this.esId(),
    this.receiver(),
    this.bb!.createScalarList<string>(this.boresight.bind(this), this.boresightLength()),
    this.bb!.createScalarList<string>(this.quat.bind(this), this.quatLength()),
    this.lat(),
    this.lon(),
    this.alt(),
    this.bb!.createScalarList<string>(this.satVelocity.bind(this), this.satVelocityLength()),
    this.bb!.createScalarList<string>(this.obsCodes.bind(this), this.obsCodesLength()),
    this.trackingStatus(),
    this.navigationStatus(),
    this.agcState(),
    this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTypsLength()),
    this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIdsLength()),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength()),
    this.transactionId(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork(),
    this.bb!.createScalarList<string>(this.gnssObservationList.bind(this), this.gnssObservationListLength())
  );
}


unpackTo(_o: GNSSObservationSet_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.markerType = this.markerType();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.ts = this.ts();
  _o.outage = this.outage();
  _o.gDop = this.gDop();
  _o.hDop = this.hDop();
  _o.pDop = this.pDop();
  _o.tDop = this.tDop();
  _o.vDop = this.vDop();
  _o.esId = this.esId();
  _o.receiver = this.receiver();
  _o.boresight = this.bb!.createScalarList<string>(this.boresight.bind(this), this.boresightLength());
  _o.quat = this.bb!.createScalarList<string>(this.quat.bind(this), this.quatLength());
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.alt = this.alt();
  _o.satVelocity = this.bb!.createScalarList<string>(this.satVelocity.bind(this), this.satVelocityLength());
  _o.obsCodes = this.bb!.createScalarList<string>(this.obsCodes.bind(this), this.obsCodesLength());
  _o.trackingStatus = this.trackingStatus();
  _o.navigationStatus = this.navigationStatus();
  _o.agcState = this.agcState();
  _o.srcTyps = this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTypsLength());
  _o.srcIds = this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIdsLength());
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength());
  _o.transactionId = this.transactionId();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
  _o.gnssObservationList = this.bb!.createScalarList<string>(this.gnssObservationList.bind(this), this.gnssObservationListLength());
}
}

export class GNSSObservationSet_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public markerType: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public ts: string|Uint8Array|null = null,
  public outage: number = 0,
  public gDop: number = 0.0,
  public hDop: number = 0.0,
  public pDop: number = 0.0,
  public tDop: number = 0.0,
  public vDop: number = 0.0,
  public esId: string|Uint8Array|null = null,
  public receiver: string|Uint8Array|null = null,
  public boresight: (string)[] = [],
  public quat: (string)[] = [],
  public lat: number = 0.0,
  public lon: number = 0.0,
  public alt: number = 0.0,
  public satVelocity: (string)[] = [],
  public obsCodes: (string)[] = [],
  public trackingStatus: number = 0,
  public navigationStatus: string|Uint8Array|null = null,
  public agcState: number = 0,
  public srcTyps: (string)[] = [],
  public srcIds: (string)[] = [],
  public tags: (string)[] = [],
  public transactionId: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: GNSSObservationSet_Abridged_dataMode_Enum = GNSSObservationSet_Abridged_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null,
  public gnssObservationList: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const markerType = (this.markerType !== null ? builder.createString(this.markerType!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const ts = (this.ts !== null ? builder.createString(this.ts!) : 0);
  const esId = (this.esId !== null ? builder.createString(this.esId!) : 0);
  const receiver = (this.receiver !== null ? builder.createString(this.receiver!) : 0);
  const boresight = GNSSObservationSet_Abridged.createBoresightVector(builder, builder.createObjectOffsetList(this.boresight));
  const quat = GNSSObservationSet_Abridged.createQuatVector(builder, builder.createObjectOffsetList(this.quat));
  const satVelocity = GNSSObservationSet_Abridged.createSatVelocityVector(builder, builder.createObjectOffsetList(this.satVelocity));
  const obsCodes = GNSSObservationSet_Abridged.createObsCodesVector(builder, builder.createObjectOffsetList(this.obsCodes));
  const navigationStatus = (this.navigationStatus !== null ? builder.createString(this.navigationStatus!) : 0);
  const srcTyps = GNSSObservationSet_Abridged.createSrcTypsVector(builder, builder.createObjectOffsetList(this.srcTyps));
  const srcIds = GNSSObservationSet_Abridged.createSrcIdsVector(builder, builder.createObjectOffsetList(this.srcIds));
  const tags = GNSSObservationSet_Abridged.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const gnssObservationList = GNSSObservationSet_Abridged.createGnssObservationListVector(builder, builder.createObjectOffsetList(this.gnssObservationList));

  return GNSSObservationSet_Abridged.createGNSSObservationSet_Abridged(builder,
    id,
    classificationMarking,
    markerType,
    idOnOrbit,
    this.satNo,
    origObjectId,
    ts,
    this.outage,
    this.gDop,
    this.hDop,
    this.pDop,
    this.tDop,
    this.vDop,
    esId,
    receiver,
    boresight,
    quat,
    this.lat,
    this.lon,
    this.alt,
    satVelocity,
    obsCodes,
    this.trackingStatus,
    navigationStatus,
    this.agcState,
    srcTyps,
    srcIds,
    tags,
    transactionId,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork,
    gnssObservationList
  );
}
}
