// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Bus_Full_dataMode_Enum } from './Bus_Full_dataMode_Enum.js';


/**
 * /// A bus is the physical and software infrastructure backbone to which on-orbit satellite payloads are attached for power, control, and other support functions.
 */
export class Bus_Full implements flatbuffers.IUnpackableObject<Bus_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Bus_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBus_Full(bb:flatbuffers.ByteBuffer, obj?:Bus_Full):Bus_Full {
  return (obj || new Bus_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBus_Full(bb:flatbuffers.ByteBuffer, obj?:Bus_Full):Bus_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Bus_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('BUSF');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: BUS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of this bus.
 * Example: /// Example: Example name
 * Constraints: Minimum length = 1, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the parent entity for this bus.
 * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idEntity():string|null
idEntity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idEntity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of this bus.
 * Example: /// Example: Example type
 * Constraints: Minimum length = 0, Maximum length = 128
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Maximum mass at launch, lower bounds, in kilograms.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
maxLaunchMassLower():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum mass at launch, upper bounds, in kilograms.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
maxLaunchMassUpper():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum mass on station at beginning of life, in kilograms.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
maxBolstationMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average mass available on this bus for payloads, in kilograms.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
avgPayloadMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum payload mass available, in kilograms.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
maxPayloadMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum mass of this bus without payloads or fuel, in kilograms.
 * Example: /// Example: 2858.1
 * Constraints: No constraints specified.
 */
minDryMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average mass of this bus without payloads or fuel, in kilograms.
 * Example: /// Example: 2879.1
 * Constraints: No constraints specified.
 */
avgDryMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Median mass of this bus without payloads or fuel, in kilograms.
 * Example: /// Example: 2950.1
 * Constraints: No constraints specified.
 */
medianDryMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum mass of this bus without payloads or fuel, in kilograms.
 * Example: /// Example: 2900.1
 * Constraints: No constraints specified.
 */
maxDryMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum mass of this bus with fuel, but without payloads, in kilograms.
 * Example: /// Example: 5192.1
 * Constraints: No constraints specified.
 */
minWetMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average mass of this bus with fuel, but without payloads, in kilograms.
 * Example: /// Example: 5246.1
 * Constraints: No constraints specified.
 */
avgWetMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Median mass of this bus with fuel, but without payloads, in kilograms.
 * Example: /// Example: 5260.1
 * Constraints: No constraints specified.
 */
medianWetMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum mass of this bus with fuel, but without payloads, in kilograms.
 * Example: /// Example: 5300.0
 * Constraints: No constraints specified.
 */
maxWetMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum power at beginning of life, lower bounds, in kilowatts.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
maxBolpowerLower():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum power at beginning of life, upper bounds, in kilowatts.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
maxBolpowerUpper():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum power at end of life, lower bounds, in kilowatts.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
maxEolpowerLower():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum power at end of life, upper bounds, in kilowatts.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
maxEolpowerUpper():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average power available on this bus, in kilowatts.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
avgSpacecraftPower():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum power available on this bus, in kilowatts.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
maxSpacecraftPower():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Orbit averaged power (the power averaged over one orbit) available on this bus, in kilowatts.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
oapSpacecraftPower():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average power available on this bus for payloads, in kilowatts.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
avgPayloadPower():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum payload power available, in kilowatts.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
maxPayloadPower():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Orbit averaged power (the power averaged over one orbit) available on this bus for payloads, in kilowatts.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
oapPayloadPower():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Body dimension in X direction pertaining to length, in meters.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
bodyDimensionX():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Body dimension in Y direction pertaining to height, in meters.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
bodyDimensionY():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Body dimension in Z direction pertaining to width, in meters.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
bodyDimensionZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The radial dimension available on this bus for payloads, in meters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
payloadDimensionX():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The in-track dimension available on this bus for payloads, in meters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
payloadDimensionY():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The cross-track dimension available on this bus for payloads, in meters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
payloadDimensionZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The volume available on this bus for payloads, in cubic meters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
payloadVolume():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch envelope dimension in X direction, in meters.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
launchEnvelopeDimensionX():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch envelope dimension in Y direction, in meters.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
launchEnvelopeDimensionY():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Launch envelope dimension in Z direction, in meters.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
launchEnvelopeDimensionZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The number of orbit types this bus can support.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
numOrbitType():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array of orbit types this bus can support (e.g. GEO, LEO, etc.). Must contain the same number of elements as the value of numOrbitType.
 * Example: /// Example: ['LEO', 'HEO', 'GEO']
 * Constraints: No constraints specified.
 */
orbitTypes(index: number):string
orbitTypes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
orbitTypes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

orbitTypesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Unique identifier of the organization which manufactures the telemetry tracking and command subsystem for this bus.
 * Example: /// Example: TELEMETRYTRACKINGMANUFACTURERORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
telemetryTrackingManufacturerOrgId():string|null
telemetryTrackingManufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
telemetryTrackingManufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the organization which manufactures the main onboard computer for this bus.
 * Example: /// Example: MAINCOMPUTERMANUFACTURERORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
mainComputerManufacturerOrgId():string|null
mainComputerManufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainComputerManufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the organization which manufactures this bus.
 * Example: /// Example: MANUFACTURERORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the organization which designs the bus kit.
 * Example: /// Example: BUSKITDESIGNERORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
busKitDesignerOrgId():string|null
busKitDesignerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
busKitDesignerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Country where this bus was manufactured. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
 * Example: /// Example: US
 * Constraints: Minimum length = 0, Maximum length = 4
 */
countryCode():string|null
countryCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
 * Example: /// Example: Nanosatellite
 * Constraints: Minimum length = 0, Maximum length = 64
 */
massCategory():string|null
massCategory(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
massCategory(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Power category of this bus (e.g. 0-1kW low power, etc).
 * Example: /// Example: low power
 * Constraints: Minimum length = 0, Maximum length = 64
 */
powerCategory():string|null
powerCategory(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
powerCategory(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating if this bus is generic.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
generic():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Notes/description of the bus.
 * Example: /// Example: Dedicated small spacecraft bus.
 * Constraints: Minimum length = 0, Maximum length = 128
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Attitude and Orbital Control Notes/description for the bus.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 256
 */
aocsNotes():string|null
aocsNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aocsNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Bus_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Bus_Full_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was last updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
entity():string|null
entity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startBus_Full(builder:flatbuffers.Builder) {
  builder.startObject(59);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addIdEntity(builder:flatbuffers.Builder, idEntityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idEntityOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, typeOffset, 0);
}

static addMaxLaunchMassLower(builder:flatbuffers.Builder, maxLaunchMassLower:number) {
  builder.addFieldFloat64(5, maxLaunchMassLower, 0.0);
}

static addMaxLaunchMassUpper(builder:flatbuffers.Builder, maxLaunchMassUpper:number) {
  builder.addFieldFloat64(6, maxLaunchMassUpper, 0.0);
}

static addMaxBolstationMass(builder:flatbuffers.Builder, maxBolstationMass:number) {
  builder.addFieldFloat64(7, maxBolstationMass, 0.0);
}

static addAvgPayloadMass(builder:flatbuffers.Builder, avgPayloadMass:number) {
  builder.addFieldFloat64(8, avgPayloadMass, 0.0);
}

static addMaxPayloadMass(builder:flatbuffers.Builder, maxPayloadMass:number) {
  builder.addFieldFloat64(9, maxPayloadMass, 0.0);
}

static addMinDryMass(builder:flatbuffers.Builder, minDryMass:number) {
  builder.addFieldFloat64(10, minDryMass, 0.0);
}

static addAvgDryMass(builder:flatbuffers.Builder, avgDryMass:number) {
  builder.addFieldFloat64(11, avgDryMass, 0.0);
}

static addMedianDryMass(builder:flatbuffers.Builder, medianDryMass:number) {
  builder.addFieldFloat64(12, medianDryMass, 0.0);
}

static addMaxDryMass(builder:flatbuffers.Builder, maxDryMass:number) {
  builder.addFieldFloat64(13, maxDryMass, 0.0);
}

static addMinWetMass(builder:flatbuffers.Builder, minWetMass:number) {
  builder.addFieldFloat64(14, minWetMass, 0.0);
}

static addAvgWetMass(builder:flatbuffers.Builder, avgWetMass:number) {
  builder.addFieldFloat64(15, avgWetMass, 0.0);
}

static addMedianWetMass(builder:flatbuffers.Builder, medianWetMass:number) {
  builder.addFieldFloat64(16, medianWetMass, 0.0);
}

static addMaxWetMass(builder:flatbuffers.Builder, maxWetMass:number) {
  builder.addFieldFloat64(17, maxWetMass, 0.0);
}

static addMaxBolpowerLower(builder:flatbuffers.Builder, maxBolpowerLower:number) {
  builder.addFieldFloat64(18, maxBolpowerLower, 0.0);
}

static addMaxBolpowerUpper(builder:flatbuffers.Builder, maxBolpowerUpper:number) {
  builder.addFieldFloat64(19, maxBolpowerUpper, 0.0);
}

static addMaxEolpowerLower(builder:flatbuffers.Builder, maxEolpowerLower:number) {
  builder.addFieldFloat64(20, maxEolpowerLower, 0.0);
}

static addMaxEolpowerUpper(builder:flatbuffers.Builder, maxEolpowerUpper:number) {
  builder.addFieldFloat64(21, maxEolpowerUpper, 0.0);
}

static addAvgSpacecraftPower(builder:flatbuffers.Builder, avgSpacecraftPower:number) {
  builder.addFieldFloat64(22, avgSpacecraftPower, 0.0);
}

static addMaxSpacecraftPower(builder:flatbuffers.Builder, maxSpacecraftPower:number) {
  builder.addFieldFloat64(23, maxSpacecraftPower, 0.0);
}

static addOapSpacecraftPower(builder:flatbuffers.Builder, oapSpacecraftPower:number) {
  builder.addFieldFloat64(24, oapSpacecraftPower, 0.0);
}

static addAvgPayloadPower(builder:flatbuffers.Builder, avgPayloadPower:number) {
  builder.addFieldFloat64(25, avgPayloadPower, 0.0);
}

static addMaxPayloadPower(builder:flatbuffers.Builder, maxPayloadPower:number) {
  builder.addFieldFloat64(26, maxPayloadPower, 0.0);
}

static addOapPayloadPower(builder:flatbuffers.Builder, oapPayloadPower:number) {
  builder.addFieldFloat64(27, oapPayloadPower, 0.0);
}

static addBodyDimensionX(builder:flatbuffers.Builder, bodyDimensionX:number) {
  builder.addFieldFloat64(28, bodyDimensionX, 0.0);
}

static addBodyDimensionY(builder:flatbuffers.Builder, bodyDimensionY:number) {
  builder.addFieldFloat64(29, bodyDimensionY, 0.0);
}

static addBodyDimensionZ(builder:flatbuffers.Builder, bodyDimensionZ:number) {
  builder.addFieldFloat64(30, bodyDimensionZ, 0.0);
}

static addPayloadDimensionX(builder:flatbuffers.Builder, payloadDimensionX:number) {
  builder.addFieldFloat64(31, payloadDimensionX, 0.0);
}

static addPayloadDimensionY(builder:flatbuffers.Builder, payloadDimensionY:number) {
  builder.addFieldFloat64(32, payloadDimensionY, 0.0);
}

static addPayloadDimensionZ(builder:flatbuffers.Builder, payloadDimensionZ:number) {
  builder.addFieldFloat64(33, payloadDimensionZ, 0.0);
}

static addPayloadVolume(builder:flatbuffers.Builder, payloadVolume:number) {
  builder.addFieldFloat64(34, payloadVolume, 0.0);
}

static addLaunchEnvelopeDimensionX(builder:flatbuffers.Builder, launchEnvelopeDimensionX:number) {
  builder.addFieldFloat64(35, launchEnvelopeDimensionX, 0.0);
}

static addLaunchEnvelopeDimensionY(builder:flatbuffers.Builder, launchEnvelopeDimensionY:number) {
  builder.addFieldFloat64(36, launchEnvelopeDimensionY, 0.0);
}

static addLaunchEnvelopeDimensionZ(builder:flatbuffers.Builder, launchEnvelopeDimensionZ:number) {
  builder.addFieldFloat64(37, launchEnvelopeDimensionZ, 0.0);
}

static addNumOrbitType(builder:flatbuffers.Builder, numOrbitType:number) {
  builder.addFieldInt32(38, numOrbitType, 0);
}

static addOrbitTypes(builder:flatbuffers.Builder, orbitTypesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, orbitTypesOffset, 0);
}

static createOrbitTypesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOrbitTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTelemetryTrackingManufacturerOrgId(builder:flatbuffers.Builder, telemetryTrackingManufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, telemetryTrackingManufacturerOrgIdOffset, 0);
}

static addMainComputerManufacturerOrgId(builder:flatbuffers.Builder, mainComputerManufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, mainComputerManufacturerOrgIdOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, manufacturerOrgIdOffset, 0);
}

static addBusKitDesignerOrgId(builder:flatbuffers.Builder, busKitDesignerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, busKitDesignerOrgIdOffset, 0);
}

static addCountryCode(builder:flatbuffers.Builder, countryCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, countryCodeOffset, 0);
}

static addMassCategory(builder:flatbuffers.Builder, massCategoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, massCategoryOffset, 0);
}

static addPowerCategory(builder:flatbuffers.Builder, powerCategoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, powerCategoryOffset, 0);
}

static addGeneric(builder:flatbuffers.Builder, generic:boolean) {
  builder.addFieldInt8(47, +generic, +false);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, descriptionOffset, 0);
}

static addAocsNotes(builder:flatbuffers.Builder, aocsNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, aocsNotesOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Bus_Full_dataMode_Enum) {
  builder.addFieldInt8(53, dataMode, Bus_Full_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, updatedByOffset, 0);
}

static addEntity(builder:flatbuffers.Builder, entityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, entityOffset, 0);
}

static endBus_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishBus_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'BUSF');
}

static finishSizePrefixedBus_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'BUSF', true);
}

static createBus_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idEntityOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, maxLaunchMassLower:number, maxLaunchMassUpper:number, maxBolstationMass:number, avgPayloadMass:number, maxPayloadMass:number, minDryMass:number, avgDryMass:number, medianDryMass:number, maxDryMass:number, minWetMass:number, avgWetMass:number, medianWetMass:number, maxWetMass:number, maxBolpowerLower:number, maxBolpowerUpper:number, maxEolpowerLower:number, maxEolpowerUpper:number, avgSpacecraftPower:number, maxSpacecraftPower:number, oapSpacecraftPower:number, avgPayloadPower:number, maxPayloadPower:number, oapPayloadPower:number, bodyDimensionX:number, bodyDimensionY:number, bodyDimensionZ:number, payloadDimensionX:number, payloadDimensionY:number, payloadDimensionZ:number, payloadVolume:number, launchEnvelopeDimensionX:number, launchEnvelopeDimensionY:number, launchEnvelopeDimensionZ:number, numOrbitType:number, orbitTypesOffset:flatbuffers.Offset, telemetryTrackingManufacturerOrgIdOffset:flatbuffers.Offset, mainComputerManufacturerOrgIdOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, busKitDesignerOrgIdOffset:flatbuffers.Offset, countryCodeOffset:flatbuffers.Offset, massCategoryOffset:flatbuffers.Offset, powerCategoryOffset:flatbuffers.Offset, generic:boolean, descriptionOffset:flatbuffers.Offset, aocsNotesOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:Bus_Full_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, entityOffset:flatbuffers.Offset):flatbuffers.Offset {
  Bus_Full.startBus_Full(builder);
  Bus_Full.addId(builder, idOffset);
  Bus_Full.addName(builder, nameOffset);
  Bus_Full.addClassificationMarking(builder, classificationMarkingOffset);
  Bus_Full.addIdEntity(builder, idEntityOffset);
  Bus_Full.addType(builder, typeOffset);
  Bus_Full.addMaxLaunchMassLower(builder, maxLaunchMassLower);
  Bus_Full.addMaxLaunchMassUpper(builder, maxLaunchMassUpper);
  Bus_Full.addMaxBolstationMass(builder, maxBolstationMass);
  Bus_Full.addAvgPayloadMass(builder, avgPayloadMass);
  Bus_Full.addMaxPayloadMass(builder, maxPayloadMass);
  Bus_Full.addMinDryMass(builder, minDryMass);
  Bus_Full.addAvgDryMass(builder, avgDryMass);
  Bus_Full.addMedianDryMass(builder, medianDryMass);
  Bus_Full.addMaxDryMass(builder, maxDryMass);
  Bus_Full.addMinWetMass(builder, minWetMass);
  Bus_Full.addAvgWetMass(builder, avgWetMass);
  Bus_Full.addMedianWetMass(builder, medianWetMass);
  Bus_Full.addMaxWetMass(builder, maxWetMass);
  Bus_Full.addMaxBolpowerLower(builder, maxBolpowerLower);
  Bus_Full.addMaxBolpowerUpper(builder, maxBolpowerUpper);
  Bus_Full.addMaxEolpowerLower(builder, maxEolpowerLower);
  Bus_Full.addMaxEolpowerUpper(builder, maxEolpowerUpper);
  Bus_Full.addAvgSpacecraftPower(builder, avgSpacecraftPower);
  Bus_Full.addMaxSpacecraftPower(builder, maxSpacecraftPower);
  Bus_Full.addOapSpacecraftPower(builder, oapSpacecraftPower);
  Bus_Full.addAvgPayloadPower(builder, avgPayloadPower);
  Bus_Full.addMaxPayloadPower(builder, maxPayloadPower);
  Bus_Full.addOapPayloadPower(builder, oapPayloadPower);
  Bus_Full.addBodyDimensionX(builder, bodyDimensionX);
  Bus_Full.addBodyDimensionY(builder, bodyDimensionY);
  Bus_Full.addBodyDimensionZ(builder, bodyDimensionZ);
  Bus_Full.addPayloadDimensionX(builder, payloadDimensionX);
  Bus_Full.addPayloadDimensionY(builder, payloadDimensionY);
  Bus_Full.addPayloadDimensionZ(builder, payloadDimensionZ);
  Bus_Full.addPayloadVolume(builder, payloadVolume);
  Bus_Full.addLaunchEnvelopeDimensionX(builder, launchEnvelopeDimensionX);
  Bus_Full.addLaunchEnvelopeDimensionY(builder, launchEnvelopeDimensionY);
  Bus_Full.addLaunchEnvelopeDimensionZ(builder, launchEnvelopeDimensionZ);
  Bus_Full.addNumOrbitType(builder, numOrbitType);
  Bus_Full.addOrbitTypes(builder, orbitTypesOffset);
  Bus_Full.addTelemetryTrackingManufacturerOrgId(builder, telemetryTrackingManufacturerOrgIdOffset);
  Bus_Full.addMainComputerManufacturerOrgId(builder, mainComputerManufacturerOrgIdOffset);
  Bus_Full.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  Bus_Full.addBusKitDesignerOrgId(builder, busKitDesignerOrgIdOffset);
  Bus_Full.addCountryCode(builder, countryCodeOffset);
  Bus_Full.addMassCategory(builder, massCategoryOffset);
  Bus_Full.addPowerCategory(builder, powerCategoryOffset);
  Bus_Full.addGeneric(builder, generic);
  Bus_Full.addDescription(builder, descriptionOffset);
  Bus_Full.addAocsNotes(builder, aocsNotesOffset);
  Bus_Full.addSource(builder, sourceOffset);
  Bus_Full.addOrigin(builder, originOffset);
  Bus_Full.addOrigNetwork(builder, origNetworkOffset);
  Bus_Full.addDataMode(builder, dataMode);
  Bus_Full.addCreatedAt(builder, createdAtOffset);
  Bus_Full.addCreatedBy(builder, createdByOffset);
  Bus_Full.addUpdatedAt(builder, updatedAtOffset);
  Bus_Full.addUpdatedBy(builder, updatedByOffset);
  Bus_Full.addEntity(builder, entityOffset);
  return Bus_Full.endBus_Full(builder);
}

unpack(): Bus_FullT {
  return new Bus_FullT(
    this.id(),
    this.name(),
    this.classificationMarking(),
    this.idEntity(),
    this.type(),
    this.maxLaunchMassLower(),
    this.maxLaunchMassUpper(),
    this.maxBolstationMass(),
    this.avgPayloadMass(),
    this.maxPayloadMass(),
    this.minDryMass(),
    this.avgDryMass(),
    this.medianDryMass(),
    this.maxDryMass(),
    this.minWetMass(),
    this.avgWetMass(),
    this.medianWetMass(),
    this.maxWetMass(),
    this.maxBolpowerLower(),
    this.maxBolpowerUpper(),
    this.maxEolpowerLower(),
    this.maxEolpowerUpper(),
    this.avgSpacecraftPower(),
    this.maxSpacecraftPower(),
    this.oapSpacecraftPower(),
    this.avgPayloadPower(),
    this.maxPayloadPower(),
    this.oapPayloadPower(),
    this.bodyDimensionX(),
    this.bodyDimensionY(),
    this.bodyDimensionZ(),
    this.payloadDimensionX(),
    this.payloadDimensionY(),
    this.payloadDimensionZ(),
    this.payloadVolume(),
    this.launchEnvelopeDimensionX(),
    this.launchEnvelopeDimensionY(),
    this.launchEnvelopeDimensionZ(),
    this.numOrbitType(),
    this.bb!.createScalarList<string>(this.orbitTypes.bind(this), this.orbitTypesLength()),
    this.telemetryTrackingManufacturerOrgId(),
    this.mainComputerManufacturerOrgId(),
    this.manufacturerOrgId(),
    this.busKitDesignerOrgId(),
    this.countryCode(),
    this.massCategory(),
    this.powerCategory(),
    this.generic(),
    this.description(),
    this.aocsNotes(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.entity()
  );
}


unpackTo(_o: Bus_FullT): void {
  _o.id = this.id();
  _o.name = this.name();
  _o.classificationMarking = this.classificationMarking();
  _o.idEntity = this.idEntity();
  _o.type = this.type();
  _o.maxLaunchMassLower = this.maxLaunchMassLower();
  _o.maxLaunchMassUpper = this.maxLaunchMassUpper();
  _o.maxBolstationMass = this.maxBolstationMass();
  _o.avgPayloadMass = this.avgPayloadMass();
  _o.maxPayloadMass = this.maxPayloadMass();
  _o.minDryMass = this.minDryMass();
  _o.avgDryMass = this.avgDryMass();
  _o.medianDryMass = this.medianDryMass();
  _o.maxDryMass = this.maxDryMass();
  _o.minWetMass = this.minWetMass();
  _o.avgWetMass = this.avgWetMass();
  _o.medianWetMass = this.medianWetMass();
  _o.maxWetMass = this.maxWetMass();
  _o.maxBolpowerLower = this.maxBolpowerLower();
  _o.maxBolpowerUpper = this.maxBolpowerUpper();
  _o.maxEolpowerLower = this.maxEolpowerLower();
  _o.maxEolpowerUpper = this.maxEolpowerUpper();
  _o.avgSpacecraftPower = this.avgSpacecraftPower();
  _o.maxSpacecraftPower = this.maxSpacecraftPower();
  _o.oapSpacecraftPower = this.oapSpacecraftPower();
  _o.avgPayloadPower = this.avgPayloadPower();
  _o.maxPayloadPower = this.maxPayloadPower();
  _o.oapPayloadPower = this.oapPayloadPower();
  _o.bodyDimensionX = this.bodyDimensionX();
  _o.bodyDimensionY = this.bodyDimensionY();
  _o.bodyDimensionZ = this.bodyDimensionZ();
  _o.payloadDimensionX = this.payloadDimensionX();
  _o.payloadDimensionY = this.payloadDimensionY();
  _o.payloadDimensionZ = this.payloadDimensionZ();
  _o.payloadVolume = this.payloadVolume();
  _o.launchEnvelopeDimensionX = this.launchEnvelopeDimensionX();
  _o.launchEnvelopeDimensionY = this.launchEnvelopeDimensionY();
  _o.launchEnvelopeDimensionZ = this.launchEnvelopeDimensionZ();
  _o.numOrbitType = this.numOrbitType();
  _o.orbitTypes = this.bb!.createScalarList<string>(this.orbitTypes.bind(this), this.orbitTypesLength());
  _o.telemetryTrackingManufacturerOrgId = this.telemetryTrackingManufacturerOrgId();
  _o.mainComputerManufacturerOrgId = this.mainComputerManufacturerOrgId();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.busKitDesignerOrgId = this.busKitDesignerOrgId();
  _o.countryCode = this.countryCode();
  _o.massCategory = this.massCategory();
  _o.powerCategory = this.powerCategory();
  _o.generic = this.generic();
  _o.description = this.description();
  _o.aocsNotes = this.aocsNotes();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.entity = this.entity();
}
}

export class Bus_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idEntity: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public maxLaunchMassLower: number = 0.0,
  public maxLaunchMassUpper: number = 0.0,
  public maxBolstationMass: number = 0.0,
  public avgPayloadMass: number = 0.0,
  public maxPayloadMass: number = 0.0,
  public minDryMass: number = 0.0,
  public avgDryMass: number = 0.0,
  public medianDryMass: number = 0.0,
  public maxDryMass: number = 0.0,
  public minWetMass: number = 0.0,
  public avgWetMass: number = 0.0,
  public medianWetMass: number = 0.0,
  public maxWetMass: number = 0.0,
  public maxBolpowerLower: number = 0.0,
  public maxBolpowerUpper: number = 0.0,
  public maxEolpowerLower: number = 0.0,
  public maxEolpowerUpper: number = 0.0,
  public avgSpacecraftPower: number = 0.0,
  public maxSpacecraftPower: number = 0.0,
  public oapSpacecraftPower: number = 0.0,
  public avgPayloadPower: number = 0.0,
  public maxPayloadPower: number = 0.0,
  public oapPayloadPower: number = 0.0,
  public bodyDimensionX: number = 0.0,
  public bodyDimensionY: number = 0.0,
  public bodyDimensionZ: number = 0.0,
  public payloadDimensionX: number = 0.0,
  public payloadDimensionY: number = 0.0,
  public payloadDimensionZ: number = 0.0,
  public payloadVolume: number = 0.0,
  public launchEnvelopeDimensionX: number = 0.0,
  public launchEnvelopeDimensionY: number = 0.0,
  public launchEnvelopeDimensionZ: number = 0.0,
  public numOrbitType: number = 0,
  public orbitTypes: (string)[] = [],
  public telemetryTrackingManufacturerOrgId: string|Uint8Array|null = null,
  public mainComputerManufacturerOrgId: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public busKitDesignerOrgId: string|Uint8Array|null = null,
  public countryCode: string|Uint8Array|null = null,
  public massCategory: string|Uint8Array|null = null,
  public powerCategory: string|Uint8Array|null = null,
  public generic: boolean = false,
  public description: string|Uint8Array|null = null,
  public aocsNotes: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: Bus_Full_dataMode_Enum = Bus_Full_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public entity: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idEntity = (this.idEntity !== null ? builder.createString(this.idEntity!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const orbitTypes = Bus_Full.createOrbitTypesVector(builder, builder.createObjectOffsetList(this.orbitTypes));
  const telemetryTrackingManufacturerOrgId = (this.telemetryTrackingManufacturerOrgId !== null ? builder.createString(this.telemetryTrackingManufacturerOrgId!) : 0);
  const mainComputerManufacturerOrgId = (this.mainComputerManufacturerOrgId !== null ? builder.createString(this.mainComputerManufacturerOrgId!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const busKitDesignerOrgId = (this.busKitDesignerOrgId !== null ? builder.createString(this.busKitDesignerOrgId!) : 0);
  const countryCode = (this.countryCode !== null ? builder.createString(this.countryCode!) : 0);
  const massCategory = (this.massCategory !== null ? builder.createString(this.massCategory!) : 0);
  const powerCategory = (this.powerCategory !== null ? builder.createString(this.powerCategory!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const aocsNotes = (this.aocsNotes !== null ? builder.createString(this.aocsNotes!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const entity = (this.entity !== null ? builder.createString(this.entity!) : 0);

  return Bus_Full.createBus_Full(builder,
    id,
    name,
    classificationMarking,
    idEntity,
    type,
    this.maxLaunchMassLower,
    this.maxLaunchMassUpper,
    this.maxBolstationMass,
    this.avgPayloadMass,
    this.maxPayloadMass,
    this.minDryMass,
    this.avgDryMass,
    this.medianDryMass,
    this.maxDryMass,
    this.minWetMass,
    this.avgWetMass,
    this.medianWetMass,
    this.maxWetMass,
    this.maxBolpowerLower,
    this.maxBolpowerUpper,
    this.maxEolpowerLower,
    this.maxEolpowerUpper,
    this.avgSpacecraftPower,
    this.maxSpacecraftPower,
    this.oapSpacecraftPower,
    this.avgPayloadPower,
    this.maxPayloadPower,
    this.oapPayloadPower,
    this.bodyDimensionX,
    this.bodyDimensionY,
    this.bodyDimensionZ,
    this.payloadDimensionX,
    this.payloadDimensionY,
    this.payloadDimensionZ,
    this.payloadVolume,
    this.launchEnvelopeDimensionX,
    this.launchEnvelopeDimensionY,
    this.launchEnvelopeDimensionZ,
    this.numOrbitType,
    orbitTypes,
    telemetryTrackingManufacturerOrgId,
    mainComputerManufacturerOrgId,
    manufacturerOrgId,
    busKitDesignerOrgId,
    countryCode,
    massCategory,
    powerCategory,
    this.generic,
    description,
    aocsNotes,
    source,
    origin,
    origNetwork,
    this.dataMode,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    entity
  );
}
}
