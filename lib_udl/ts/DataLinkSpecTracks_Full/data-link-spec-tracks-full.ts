// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
 */
export class DataLinkSpecTracks_Full implements flatbuffers.IUnpackableObject<DataLinkSpecTracks_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataLinkSpecTracks_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataLinkSpecTracks_Full(bb:flatbuffers.ByteBuffer, obj?:DataLinkSpecTracks_Full):DataLinkSpecTracks_Full {
  return (obj || new DataLinkSpecTracks_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataLinkSpecTracks_Full(bb:flatbuffers.ByteBuffer, obj?:DataLinkSpecTracks_Full):DataLinkSpecTracks_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataLinkSpecTracks_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DATA');
}

/**
 * The special track number used on the data link entered as an octal reference number. Used to identify a particular type of platform (e.g. MPA, KRESTA) or platform name (e.g. TROMP, MOUNT WHITNEY) which is not included in assigned track blocks.
 * Example: /// Example: 12345
 * Constraints: Minimum length = 0, Maximum length = 16
 */
specTrackNum():string|null
specTrackNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
specTrackNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the special track number.
 * Example: /// Example: SAM SITE CHARLIE
 * Constraints: Minimum length = 0, Maximum length = 40
 */
specTrackNumDesc():string|null
specTrackNumDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
specTrackNumDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDataLinkSpecTracks_Full(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSpecTrackNum(builder:flatbuffers.Builder, specTrackNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, specTrackNumOffset, 0);
}

static addSpecTrackNumDesc(builder:flatbuffers.Builder, specTrackNumDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, specTrackNumDescOffset, 0);
}

static endDataLinkSpecTracks_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDataLinkSpecTracks_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA');
}

static finishSizePrefixedDataLinkSpecTracks_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA', true);
}

static createDataLinkSpecTracks_Full(builder:flatbuffers.Builder, specTrackNumOffset:flatbuffers.Offset, specTrackNumDescOffset:flatbuffers.Offset):flatbuffers.Offset {
  DataLinkSpecTracks_Full.startDataLinkSpecTracks_Full(builder);
  DataLinkSpecTracks_Full.addSpecTrackNum(builder, specTrackNumOffset);
  DataLinkSpecTracks_Full.addSpecTrackNumDesc(builder, specTrackNumDescOffset);
  return DataLinkSpecTracks_Full.endDataLinkSpecTracks_Full(builder);
}

unpack(): DataLinkSpecTracks_FullT {
  return new DataLinkSpecTracks_FullT(
    this.specTrackNum(),
    this.specTrackNumDesc()
  );
}


unpackTo(_o: DataLinkSpecTracks_FullT): void {
  _o.specTrackNum = this.specTrackNum();
  _o.specTrackNumDesc = this.specTrackNumDesc();
}
}

export class DataLinkSpecTracks_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public specTrackNum: string|Uint8Array|null = null,
  public specTrackNumDesc: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const specTrackNum = (this.specTrackNum !== null ? builder.createString(this.specTrackNum!) : 0);
  const specTrackNumDesc = (this.specTrackNumDesc !== null ? builder.createString(this.specTrackNumDesc!) : 0);

  return DataLinkSpecTracks_Full.createDataLinkSpecTracks_Full(builder,
    specTrackNum,
    specTrackNumDesc
  );
}
}
