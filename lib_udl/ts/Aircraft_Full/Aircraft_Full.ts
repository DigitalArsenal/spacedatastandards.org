// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Aircraft_Full_dataMode_Enum } from './Aircraft_Full_dataMode_Enum.js';


/**
 * /// General aircraft designation, characteristics, and capabilities. The aircraft schema contains static data of specific aircraft, including tail number, cruise speed, max speed, and minimum required runway length, etc.
 */
export class Aircraft_Full implements flatbuffers.IUnpackableObject<Aircraft_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Aircraft_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAircraft_Full(bb:flatbuffers.ByteBuffer, obj?:Aircraft_Full):Aircraft_Full {
  return (obj || new Aircraft_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAircraft_Full(bb:flatbuffers.ByteBuffer, obj?:Aircraft_Full):Aircraft_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Aircraft_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRC');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
entity():string|null
entity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the parent entity for this aircraft.
 * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idEntity():string|null
idEntity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idEntity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft.  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
 * Example: /// Example: E-2C HAWKEYE
 * Constraints: Minimum length = 1, Maximum length = 128
 */
aircraftMds():string|null
aircraftMds(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aircraftMds(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The tail number of this aircraft.
 * Example: /// Example: N702JG
 * Constraints: Minimum length = 0, Maximum length = 16
 */
tailNumber():string|null
tailNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tailNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Full serial number of the aircraft.
 * Example: /// Example: 7007187
 * Constraints: Minimum length = 0, Maximum length = 32
 */
serialNumber():string|null
serialNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
serialNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The wing or unit that owns the aircraft.
 * Example: /// Example: 437AW
 * Constraints: Minimum length = 0, Maximum length = 32
 */
owner():string|null
owner(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
owner(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Air Force major command (MAJCOM) overseeing the aircraft.
 * Example: /// Example: HQACC
 * Constraints: Minimum length = 0, Maximum length = 16
 */
command():string|null
command(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
command(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The category of aircraft (e.g. M = Military, C = Commercial).
 * Example: /// Example: M
 * Constraints: Minimum length = 0, Maximum length = 1
 */
category():string|null
category(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
category(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Military data network data transfer device ID for this aircraft.
 * Example: /// Example: 005
 * Constraints: Minimum length = 0, Maximum length = 16
 */
dtd():string|null
dtd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dtd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The cruise speed of the aircraft, in kilometers/hour.
 * Example: /// Example: 915
 * Constraints: No constraints specified.
 */
cruiseSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The maximum air speed of the aircraft, in kilometers/hour.
 * Example: /// Example: 2655.1
 * Constraints: No constraints specified.
 */
maxSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The minimum length of runway required to land this aircraft, in meters. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 1000
 * Constraints: No constraints specified.
 */
minReqRunwayM():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The minimum length of runway required to land this aircraft, in feet. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 3000
 * Constraints: No constraints specified.
 */
minReqRunwayFt():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The nominal turnaround time for this aircraft, in minutes.
 * Example: /// Example: 500
 * Constraints: No constraints specified.
 */
nominalTatime():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional notes/comments for this aircraft.
 * Example: /// Example: Notes for this aircraft
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 64
 */
dataMode():Aircraft_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Aircraft_Full_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAircraft_Full(builder:flatbuffers.Builder) {
  builder.startObject(26);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addEntity(builder:flatbuffers.Builder, entityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, entityOffset, 0);
}

static addIdEntity(builder:flatbuffers.Builder, idEntityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idEntityOffset, 0);
}

static addAircraftMds(builder:flatbuffers.Builder, aircraftMdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, aircraftMdsOffset, 0);
}

static addTailNumber(builder:flatbuffers.Builder, tailNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, tailNumberOffset, 0);
}

static addSerialNumber(builder:flatbuffers.Builder, serialNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, serialNumberOffset, 0);
}

static addOwner(builder:flatbuffers.Builder, ownerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, ownerOffset, 0);
}

static addCommand(builder:flatbuffers.Builder, commandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, commandOffset, 0);
}

static addCategory(builder:flatbuffers.Builder, categoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, categoryOffset, 0);
}

static addDtd(builder:flatbuffers.Builder, dtdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, dtdOffset, 0);
}

static addCruiseSpeed(builder:flatbuffers.Builder, cruiseSpeed:number) {
  builder.addFieldFloat64(11, cruiseSpeed, 0.0);
}

static addMaxSpeed(builder:flatbuffers.Builder, maxSpeed:number) {
  builder.addFieldFloat64(12, maxSpeed, 0.0);
}

static addMinReqRunwayM(builder:flatbuffers.Builder, minReqRunwayM:number) {
  builder.addFieldInt32(13, minReqRunwayM, 0);
}

static addMinReqRunwayFt(builder:flatbuffers.Builder, minReqRunwayFt:number) {
  builder.addFieldInt32(14, minReqRunwayFt, 0);
}

static addNominalTatime(builder:flatbuffers.Builder, nominalTatime:number) {
  builder.addFieldInt32(15, nominalTatime, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, notesOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, updatedByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Aircraft_Full_dataMode_Enum) {
  builder.addFieldInt8(24, dataMode, Aircraft_Full_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, origNetworkOffset, 0);
}

static endAircraft_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAircraft_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC');
}

static finishSizePrefixedAircraft_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC', true);
}

static createAircraft_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, entityOffset:flatbuffers.Offset, idEntityOffset:flatbuffers.Offset, aircraftMdsOffset:flatbuffers.Offset, tailNumberOffset:flatbuffers.Offset, serialNumberOffset:flatbuffers.Offset, ownerOffset:flatbuffers.Offset, commandOffset:flatbuffers.Offset, categoryOffset:flatbuffers.Offset, dtdOffset:flatbuffers.Offset, cruiseSpeed:number, maxSpeed:number, minReqRunwayM:number, minReqRunwayFt:number, nominalTatime:number, notesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:Aircraft_Full_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  Aircraft_Full.startAircraft_Full(builder);
  Aircraft_Full.addId(builder, idOffset);
  Aircraft_Full.addClassificationMarking(builder, classificationMarkingOffset);
  Aircraft_Full.addEntity(builder, entityOffset);
  Aircraft_Full.addIdEntity(builder, idEntityOffset);
  Aircraft_Full.addAircraftMds(builder, aircraftMdsOffset);
  Aircraft_Full.addTailNumber(builder, tailNumberOffset);
  Aircraft_Full.addSerialNumber(builder, serialNumberOffset);
  Aircraft_Full.addOwner(builder, ownerOffset);
  Aircraft_Full.addCommand(builder, commandOffset);
  Aircraft_Full.addCategory(builder, categoryOffset);
  Aircraft_Full.addDtd(builder, dtdOffset);
  Aircraft_Full.addCruiseSpeed(builder, cruiseSpeed);
  Aircraft_Full.addMaxSpeed(builder, maxSpeed);
  Aircraft_Full.addMinReqRunwayM(builder, minReqRunwayM);
  Aircraft_Full.addMinReqRunwayFt(builder, minReqRunwayFt);
  Aircraft_Full.addNominalTatime(builder, nominalTatime);
  Aircraft_Full.addNotes(builder, notesOffset);
  Aircraft_Full.addCreatedAt(builder, createdAtOffset);
  Aircraft_Full.addCreatedBy(builder, createdByOffset);
  Aircraft_Full.addUpdatedAt(builder, updatedAtOffset);
  Aircraft_Full.addUpdatedBy(builder, updatedByOffset);
  Aircraft_Full.addSourceDl(builder, sourceDlOffset);
  Aircraft_Full.addSource(builder, sourceOffset);
  Aircraft_Full.addOrigin(builder, originOffset);
  Aircraft_Full.addDataMode(builder, dataMode);
  Aircraft_Full.addOrigNetwork(builder, origNetworkOffset);
  return Aircraft_Full.endAircraft_Full(builder);
}

unpack(): Aircraft_FullT {
  return new Aircraft_FullT(
    this.id(),
    this.classificationMarking(),
    this.entity(),
    this.idEntity(),
    this.aircraftMds(),
    this.tailNumber(),
    this.serialNumber(),
    this.owner(),
    this.command(),
    this.category(),
    this.dtd(),
    this.cruiseSpeed(),
    this.maxSpeed(),
    this.minReqRunwayM(),
    this.minReqRunwayFt(),
    this.nominalTatime(),
    this.notes(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: Aircraft_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.entity = this.entity();
  _o.idEntity = this.idEntity();
  _o.aircraftMds = this.aircraftMds();
  _o.tailNumber = this.tailNumber();
  _o.serialNumber = this.serialNumber();
  _o.owner = this.owner();
  _o.command = this.command();
  _o.category = this.category();
  _o.dtd = this.dtd();
  _o.cruiseSpeed = this.cruiseSpeed();
  _o.maxSpeed = this.maxSpeed();
  _o.minReqRunwayM = this.minReqRunwayM();
  _o.minReqRunwayFt = this.minReqRunwayFt();
  _o.nominalTatime = this.nominalTatime();
  _o.notes = this.notes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.sourceDl = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class Aircraft_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public entity: string|Uint8Array|null = null,
  public idEntity: string|Uint8Array|null = null,
  public aircraftMds: string|Uint8Array|null = null,
  public tailNumber: string|Uint8Array|null = null,
  public serialNumber: string|Uint8Array|null = null,
  public owner: string|Uint8Array|null = null,
  public command: string|Uint8Array|null = null,
  public category: string|Uint8Array|null = null,
  public dtd: string|Uint8Array|null = null,
  public cruiseSpeed: number = 0.0,
  public maxSpeed: number = 0.0,
  public minReqRunwayM: number = 0,
  public minReqRunwayFt: number = 0,
  public nominalTatime: number = 0,
  public notes: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: Aircraft_Full_dataMode_Enum = Aircraft_Full_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const entity = (this.entity !== null ? builder.createString(this.entity!) : 0);
  const idEntity = (this.idEntity !== null ? builder.createString(this.idEntity!) : 0);
  const aircraftMds = (this.aircraftMds !== null ? builder.createString(this.aircraftMds!) : 0);
  const tailNumber = (this.tailNumber !== null ? builder.createString(this.tailNumber!) : 0);
  const serialNumber = (this.serialNumber !== null ? builder.createString(this.serialNumber!) : 0);
  const owner = (this.owner !== null ? builder.createString(this.owner!) : 0);
  const command = (this.command !== null ? builder.createString(this.command!) : 0);
  const category = (this.category !== null ? builder.createString(this.category!) : 0);
  const dtd = (this.dtd !== null ? builder.createString(this.dtd!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Aircraft_Full.createAircraft_Full(builder,
    id,
    classificationMarking,
    entity,
    idEntity,
    aircraftMds,
    tailNumber,
    serialNumber,
    owner,
    command,
    category,
    dtd,
    this.cruiseSpeed,
    this.maxSpeed,
    this.minReqRunwayM,
    this.minReqRunwayFt,
    this.nominalTatime,
    notes,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    sourceDl,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
