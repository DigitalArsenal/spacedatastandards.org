// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OrganizationDetails_Ingest_dataMode_Enum } from './organization-details-ingest-data-mode-enum.js';


/**
 * /// Model representation of additional detailed organization data as collected by a particular source.
 */
export class OrganizationDetails_Ingest implements flatbuffers.IUnpackableObject<OrganizationDetails_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OrganizationDetails_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOrganizationDetails_Ingest(bb:flatbuffers.ByteBuffer, obj?:OrganizationDetails_Ingest):OrganizationDetails_Ingest {
  return (obj || new OrganizationDetails_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOrganizationDetails_Ingest(bb:flatbuffers.ByteBuffer, obj?:OrganizationDetails_Ingest):OrganizationDetails_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OrganizationDetails_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ORGA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: ORGANIZATIONDETAILS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent organization.
 * Example: /// Example: ORGANIZATION-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idOrganization():string|null
idOrganization(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOrganization(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Organization details name.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Listed contact email address for the organization.
 * Example: /// Example: some_organization@organization.com
 * Constraints: Minimum length = 0, Maximum length = 320
 */
email():string|null
email(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
email(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Street number of the organization.
 * Example: /// Example: 123 Main Street
 * Constraints: Minimum length = 0, Maximum length = 120
 */
address1():string|null
address1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
address1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Field for additional organization address information such as PO Box and unit number.
 * Example: /// Example: Apt 4B
 * Constraints: Minimum length = 0, Maximum length = 120
 */
address2():string|null
address2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
address2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Contains the third line of address information for an organization.
 * Example: /// Example: Colorado Springs CO, 80903
 * Constraints: Minimum length = 0, Maximum length = 120
 */
address3():string|null
address3(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
address3(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.
 * Example: /// Example: Colorado
 * Constraints: Minimum length = 0, Maximum length = 120
 */
geoAdminLevel1():string|null
geoAdminLevel1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geoAdminLevel1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.
 * Example: /// Example: El Paso County
 * Constraints: Minimum length = 0, Maximum length = 120
 */
geoAdminLevel2():string|null
geoAdminLevel2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geoAdminLevel2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.
 * Example: /// Example: Colorado Springs
 * Constraints: Minimum length = 0, Maximum length = 120
 */
geoAdminLevel3():string|null
geoAdminLevel3(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geoAdminLevel3(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.
 * Example: /// Example: 80903
 * Constraints: Minimum length = 0, Maximum length = 32
 */
postalCode():string|null
postalCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
postalCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Organization description.
 * Example: /// Example: Example description
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Former organization ID (if this organization previously existed as another organization).
 * Example: /// Example: FORMERORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
formerOrgId():string|null
formerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
formerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Parent organization ID of this organization if it is a child organization.
 * Example: /// Example: PARENTORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
parentOrgId():string|null
parentOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
parentOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
financialYearEndDate():string|null
financialYearEndDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
financialYearEndDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
revenue():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
profit():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
ebitda():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total number of FTEs in this organization.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
ftes():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Designated broker for this organization.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 128
 */
broker():string|null
broker(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
broker(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * For organizations of type CORPORATION, the name of the Chief Executive Officer.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 128
 */
ceo():string|null
ceo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ceo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * For organizations of type CORPORATION, the name of the Chief Financial Officer.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 128
 */
cfo():string|null
cfo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cfo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * For organizations of type CORPORATION, the name of the Chief Technology Officer.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 128
 */
cto():string|null
cto(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cto(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the risk manager for the organization.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 128
 */
riskManager():string|null
riskManager(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
riskManager(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mass ranking for this organization.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
massRanking():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Revenue ranking for this organization.
 * Example: /// Example: 123
 * Constraints: No constraints specified.
 */
revenueRanking():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * For organizations of type CORPORATION, notes on company financials.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
financialNotes():string|null
financialNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
financialNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Notes on the services provided by the organization.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
servicesNotes():string|null
servicesNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
servicesNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite fleet planning notes for this organization.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
fleetPlanNotes():string|null
fleetPlanNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fleetPlanNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():OrganizationDetails_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OrganizationDetails_Ingest_dataMode_Enum.REAL;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startOrganizationDetails_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(37);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdOrganization(builder:flatbuffers.Builder, idOrganizationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idOrganizationOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addEmail(builder:flatbuffers.Builder, emailOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, emailOffset, 0);
}

static addAddress1(builder:flatbuffers.Builder, address1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(5, address1Offset, 0);
}

static addAddress2(builder:flatbuffers.Builder, address2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(6, address2Offset, 0);
}

static addAddress3(builder:flatbuffers.Builder, address3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(7, address3Offset, 0);
}

static addGeoAdminLevel1(builder:flatbuffers.Builder, geoAdminLevel1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(8, geoAdminLevel1Offset, 0);
}

static addGeoAdminLevel2(builder:flatbuffers.Builder, geoAdminLevel2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(9, geoAdminLevel2Offset, 0);
}

static addGeoAdminLevel3(builder:flatbuffers.Builder, geoAdminLevel3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(10, geoAdminLevel3Offset, 0);
}

static addPostalCode(builder:flatbuffers.Builder, postalCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, postalCodeOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, descriptionOffset, 0);
}

static addFormerOrgId(builder:flatbuffers.Builder, formerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, formerOrgIdOffset, 0);
}

static addParentOrgId(builder:flatbuffers.Builder, parentOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, parentOrgIdOffset, 0);
}

static addFinancialYearEndDate(builder:flatbuffers.Builder, financialYearEndDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, financialYearEndDateOffset, 0);
}

static addRevenue(builder:flatbuffers.Builder, revenue:number) {
  builder.addFieldFloat64(16, revenue, 0.0);
}

static addProfit(builder:flatbuffers.Builder, profit:number) {
  builder.addFieldFloat64(17, profit, 0.0);
}

static addEbitda(builder:flatbuffers.Builder, ebitda:number) {
  builder.addFieldFloat64(18, ebitda, 0.0);
}

static addFtes(builder:flatbuffers.Builder, ftes:number) {
  builder.addFieldInt32(19, ftes, 0);
}

static addBroker(builder:flatbuffers.Builder, brokerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, brokerOffset, 0);
}

static addCeo(builder:flatbuffers.Builder, ceoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, ceoOffset, 0);
}

static addCfo(builder:flatbuffers.Builder, cfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, cfoOffset, 0);
}

static addCto(builder:flatbuffers.Builder, ctoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, ctoOffset, 0);
}

static addRiskManager(builder:flatbuffers.Builder, riskManagerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, riskManagerOffset, 0);
}

static addMassRanking(builder:flatbuffers.Builder, massRanking:number) {
  builder.addFieldInt32(25, massRanking, 0);
}

static addRevenueRanking(builder:flatbuffers.Builder, revenueRanking:number) {
  builder.addFieldInt32(26, revenueRanking, 0);
}

static addFinancialNotes(builder:flatbuffers.Builder, financialNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, financialNotesOffset, 0);
}

static addServicesNotes(builder:flatbuffers.Builder, servicesNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, servicesNotesOffset, 0);
}

static addFleetPlanNotes(builder:flatbuffers.Builder, fleetPlanNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, fleetPlanNotesOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:OrganizationDetails_Ingest_dataMode_Enum) {
  builder.addFieldInt8(32, dataMode, OrganizationDetails_Ingest_dataMode_Enum.REAL);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, createdByOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, origNetworkOffset, 0);
}

static endOrganizationDetails_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOrganizationDetails_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ORGA');
}

static finishSizePrefixedOrganizationDetails_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ORGA', true);
}

static createOrganizationDetails_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idOrganizationOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, emailOffset:flatbuffers.Offset, address1Offset:flatbuffers.Offset, address2Offset:flatbuffers.Offset, address3Offset:flatbuffers.Offset, geoAdminLevel1Offset:flatbuffers.Offset, geoAdminLevel2Offset:flatbuffers.Offset, geoAdminLevel3Offset:flatbuffers.Offset, postalCodeOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, formerOrgIdOffset:flatbuffers.Offset, parentOrgIdOffset:flatbuffers.Offset, financialYearEndDateOffset:flatbuffers.Offset, revenue:number, profit:number, ebitda:number, ftes:number, brokerOffset:flatbuffers.Offset, ceoOffset:flatbuffers.Offset, cfoOffset:flatbuffers.Offset, ctoOffset:flatbuffers.Offset, riskManagerOffset:flatbuffers.Offset, massRanking:number, revenueRanking:number, financialNotesOffset:flatbuffers.Offset, servicesNotesOffset:flatbuffers.Offset, fleetPlanNotesOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:OrganizationDetails_Ingest_dataMode_Enum, tagsOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  OrganizationDetails_Ingest.startOrganizationDetails_Ingest(builder);
  OrganizationDetails_Ingest.addId(builder, idOffset);
  OrganizationDetails_Ingest.addIdOrganization(builder, idOrganizationOffset);
  OrganizationDetails_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  OrganizationDetails_Ingest.addName(builder, nameOffset);
  OrganizationDetails_Ingest.addEmail(builder, emailOffset);
  OrganizationDetails_Ingest.addAddress1(builder, address1Offset);
  OrganizationDetails_Ingest.addAddress2(builder, address2Offset);
  OrganizationDetails_Ingest.addAddress3(builder, address3Offset);
  OrganizationDetails_Ingest.addGeoAdminLevel1(builder, geoAdminLevel1Offset);
  OrganizationDetails_Ingest.addGeoAdminLevel2(builder, geoAdminLevel2Offset);
  OrganizationDetails_Ingest.addGeoAdminLevel3(builder, geoAdminLevel3Offset);
  OrganizationDetails_Ingest.addPostalCode(builder, postalCodeOffset);
  OrganizationDetails_Ingest.addDescription(builder, descriptionOffset);
  OrganizationDetails_Ingest.addFormerOrgId(builder, formerOrgIdOffset);
  OrganizationDetails_Ingest.addParentOrgId(builder, parentOrgIdOffset);
  OrganizationDetails_Ingest.addFinancialYearEndDate(builder, financialYearEndDateOffset);
  OrganizationDetails_Ingest.addRevenue(builder, revenue);
  OrganizationDetails_Ingest.addProfit(builder, profit);
  OrganizationDetails_Ingest.addEbitda(builder, ebitda);
  OrganizationDetails_Ingest.addFtes(builder, ftes);
  OrganizationDetails_Ingest.addBroker(builder, brokerOffset);
  OrganizationDetails_Ingest.addCeo(builder, ceoOffset);
  OrganizationDetails_Ingest.addCfo(builder, cfoOffset);
  OrganizationDetails_Ingest.addCto(builder, ctoOffset);
  OrganizationDetails_Ingest.addRiskManager(builder, riskManagerOffset);
  OrganizationDetails_Ingest.addMassRanking(builder, massRanking);
  OrganizationDetails_Ingest.addRevenueRanking(builder, revenueRanking);
  OrganizationDetails_Ingest.addFinancialNotes(builder, financialNotesOffset);
  OrganizationDetails_Ingest.addServicesNotes(builder, servicesNotesOffset);
  OrganizationDetails_Ingest.addFleetPlanNotes(builder, fleetPlanNotesOffset);
  OrganizationDetails_Ingest.addSource(builder, sourceOffset);
  OrganizationDetails_Ingest.addOrigin(builder, originOffset);
  OrganizationDetails_Ingest.addDataMode(builder, dataMode);
  OrganizationDetails_Ingest.addTags(builder, tagsOffset);
  OrganizationDetails_Ingest.addCreatedAt(builder, createdAtOffset);
  OrganizationDetails_Ingest.addCreatedBy(builder, createdByOffset);
  OrganizationDetails_Ingest.addOrigNetwork(builder, origNetworkOffset);
  return OrganizationDetails_Ingest.endOrganizationDetails_Ingest(builder);
}

unpack(): OrganizationDetails_IngestT {
  return new OrganizationDetails_IngestT(
    this.id(),
    this.idOrganization(),
    this.classificationMarking(),
    this.name(),
    this.email(),
    this.address1(),
    this.address2(),
    this.address3(),
    this.geoAdminLevel1(),
    this.geoAdminLevel2(),
    this.geoAdminLevel3(),
    this.postalCode(),
    this.description(),
    this.formerOrgId(),
    this.parentOrgId(),
    this.financialYearEndDate(),
    this.revenue(),
    this.profit(),
    this.ebitda(),
    this.ftes(),
    this.broker(),
    this.ceo(),
    this.cfo(),
    this.cto(),
    this.riskManager(),
    this.massRanking(),
    this.revenueRanking(),
    this.financialNotes(),
    this.servicesNotes(),
    this.fleetPlanNotes(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length()),
    this.createdAt(),
    this.createdBy(),
    this.origNetwork()
  );
}


unpackTo(_o: OrganizationDetails_IngestT): void {
  _o.id = this.id();
  _o.idOrganization = this.idOrganization();
  _o.classificationMarking = this.classificationMarking();
  _o.name = this.name();
  _o.email = this.email();
  _o.address1 = this.address1();
  _o.address2 = this.address2();
  _o.address3 = this.address3();
  _o.geoAdminLevel1 = this.geoAdminLevel1();
  _o.geoAdminLevel2 = this.geoAdminLevel2();
  _o.geoAdminLevel3 = this.geoAdminLevel3();
  _o.postalCode = this.postalCode();
  _o.description = this.description();
  _o.formerOrgId = this.formerOrgId();
  _o.parentOrgId = this.parentOrgId();
  _o.financialYearEndDate = this.financialYearEndDate();
  _o.revenue = this.revenue();
  _o.profit = this.profit();
  _o.ebitda = this.ebitda();
  _o.ftes = this.ftes();
  _o.broker = this.broker();
  _o.ceo = this.ceo();
  _o.cfo = this.cfo();
  _o.cto = this.cto();
  _o.riskManager = this.riskManager();
  _o.massRanking = this.massRanking();
  _o.revenueRanking = this.revenueRanking();
  _o.financialNotes = this.financialNotes();
  _o.servicesNotes = this.servicesNotes();
  _o.fleetPlanNotes = this.fleetPlanNotes();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.origNetwork = this.origNetwork();
}
}

export class OrganizationDetails_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idOrganization: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public email: string|Uint8Array|null = null,
  public address1: string|Uint8Array|null = null,
  public address2: string|Uint8Array|null = null,
  public address3: string|Uint8Array|null = null,
  public geoAdminLevel1: string|Uint8Array|null = null,
  public geoAdminLevel2: string|Uint8Array|null = null,
  public geoAdminLevel3: string|Uint8Array|null = null,
  public postalCode: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public formerOrgId: string|Uint8Array|null = null,
  public parentOrgId: string|Uint8Array|null = null,
  public financialYearEndDate: string|Uint8Array|null = null,
  public revenue: number = 0.0,
  public profit: number = 0.0,
  public ebitda: number = 0.0,
  public ftes: number = 0,
  public broker: string|Uint8Array|null = null,
  public ceo: string|Uint8Array|null = null,
  public cfo: string|Uint8Array|null = null,
  public cto: string|Uint8Array|null = null,
  public riskManager: string|Uint8Array|null = null,
  public massRanking: number = 0,
  public revenueRanking: number = 0,
  public financialNotes: string|Uint8Array|null = null,
  public servicesNotes: string|Uint8Array|null = null,
  public fleetPlanNotes: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: OrganizationDetails_Ingest_dataMode_Enum = OrganizationDetails_Ingest_dataMode_Enum.REAL,
  public tags: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idOrganization = (this.idOrganization !== null ? builder.createString(this.idOrganization!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const email = (this.email !== null ? builder.createString(this.email!) : 0);
  const address1 = (this.address1 !== null ? builder.createString(this.address1!) : 0);
  const address2 = (this.address2 !== null ? builder.createString(this.address2!) : 0);
  const address3 = (this.address3 !== null ? builder.createString(this.address3!) : 0);
  const geoAdminLevel1 = (this.geoAdminLevel1 !== null ? builder.createString(this.geoAdminLevel1!) : 0);
  const geoAdminLevel2 = (this.geoAdminLevel2 !== null ? builder.createString(this.geoAdminLevel2!) : 0);
  const geoAdminLevel3 = (this.geoAdminLevel3 !== null ? builder.createString(this.geoAdminLevel3!) : 0);
  const postalCode = (this.postalCode !== null ? builder.createString(this.postalCode!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const formerOrgId = (this.formerOrgId !== null ? builder.createString(this.formerOrgId!) : 0);
  const parentOrgId = (this.parentOrgId !== null ? builder.createString(this.parentOrgId!) : 0);
  const financialYearEndDate = (this.financialYearEndDate !== null ? builder.createString(this.financialYearEndDate!) : 0);
  const broker = (this.broker !== null ? builder.createString(this.broker!) : 0);
  const ceo = (this.ceo !== null ? builder.createString(this.ceo!) : 0);
  const cfo = (this.cfo !== null ? builder.createString(this.cfo!) : 0);
  const cto = (this.cto !== null ? builder.createString(this.cto!) : 0);
  const riskManager = (this.riskManager !== null ? builder.createString(this.riskManager!) : 0);
  const financialNotes = (this.financialNotes !== null ? builder.createString(this.financialNotes!) : 0);
  const servicesNotes = (this.servicesNotes !== null ? builder.createString(this.servicesNotes!) : 0);
  const fleetPlanNotes = (this.fleetPlanNotes !== null ? builder.createString(this.fleetPlanNotes!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const tags = OrganizationDetails_Ingest.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return OrganizationDetails_Ingest.createOrganizationDetails_Ingest(builder,
    id,
    idOrganization,
    classificationMarking,
    name,
    email,
    address1,
    address2,
    address3,
    geoAdminLevel1,
    geoAdminLevel2,
    geoAdminLevel3,
    postalCode,
    description,
    formerOrgId,
    parentOrgId,
    financialYearEndDate,
    this.revenue,
    this.profit,
    this.ebitda,
    this.ftes,
    broker,
    ceo,
    cfo,
    cto,
    riskManager,
    this.massRanking,
    this.revenueRanking,
    financialNotes,
    servicesNotes,
    fleetPlanNotes,
    source,
    origin,
    this.dataMode,
    tags,
    createdAt,
    createdBy,
    origNetwork
  );
}
}
