// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TrackSensor_Abridged_sensorFOVType_Enum } from './TrackSensor_Abridged_sensorFOVType_Enum.js';


/**
 * /// Schema for Track Sensor data.
 */
export class TrackSensor_Abridged implements flatbuffers.IUnpackableObject<TrackSensor_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TrackSensor_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrackSensor_Abridged(bb:flatbuffers.ByteBuffer, obj?:TrackSensor_Abridged):TrackSensor_Abridged {
  return (obj || new TrackSensor_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrackSensor_Abridged(bb:flatbuffers.ByteBuffer, obj?:TrackSensor_Abridged):TrackSensor_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrackSensor_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('TRAC');
}

/**
 * The track object range from the observing sensor, in kilometers.
 * Example: /// Example: 4023.95
 * Constraints: No constraints specified.
 */
range():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The observing sensor azimuth angle, in degrees and topocentric frame.
 * Example: /// Example: 90
 * Constraints: No constraints specified.
 */
az():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
 * Example: /// Example: 1234
 * Constraints: No constraints specified.
 */
sensorNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Unique name of this sensor.
 * Example: /// Example: SENSOR_NAME
 * Constraints: Minimum length = 0, Maximum length = 128
 */
sensorName():string|null
sensorName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The mission number which produced this track observation.
 * Example: /// Example: Example Mission
 * Constraints: Minimum length = 0, Maximum length = 128
 */
missionNumber():string|null
missionNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Minimum range measurement capability of the sensor, in kilometers.
 * Example: /// Example: 20.23
 * Constraints: No constraints specified.
 */
minRangeLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The field of view (FOV) type (Butterfly, Cone Angular, Cone Distance, Horizon to Horizon, Unknown) employed by the sensor observing this object.
 * Example: /// Example: UNKNOWN
 * Constraints: Minimum length = 0, Maximum length = 24
 */
sensorFovtype():TrackSensor_Abridged_sensorFOVType_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TrackSensor_Abridged_sensorFOVType_Enum.BUTTERFLY;
}

static startTrackSensor_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addRange(builder:flatbuffers.Builder, range:number) {
  builder.addFieldFloat64(0, range, 0.0);
}

static addAz(builder:flatbuffers.Builder, az:number) {
  builder.addFieldFloat64(1, az, 0.0);
}

static addSensorNumber(builder:flatbuffers.Builder, sensorNumber:number) {
  builder.addFieldInt32(2, sensorNumber, 0);
}

static addSensorName(builder:flatbuffers.Builder, sensorNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, sensorNameOffset, 0);
}

static addMissionNumber(builder:flatbuffers.Builder, missionNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, missionNumberOffset, 0);
}

static addMinRangeLimit(builder:flatbuffers.Builder, minRangeLimit:number) {
  builder.addFieldFloat64(5, minRangeLimit, 0.0);
}

static addSensorFovtype(builder:flatbuffers.Builder, sensorFovtype:TrackSensor_Abridged_sensorFOVType_Enum) {
  builder.addFieldInt8(6, sensorFovtype, TrackSensor_Abridged_sensorFOVType_Enum.BUTTERFLY);
}

static endTrackSensor_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTrackSensor_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'TRAC');
}

static finishSizePrefixedTrackSensor_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'TRAC', true);
}

static createTrackSensor_Abridged(builder:flatbuffers.Builder, range:number, az:number, sensorNumber:number, sensorNameOffset:flatbuffers.Offset, missionNumberOffset:flatbuffers.Offset, minRangeLimit:number, sensorFovtype:TrackSensor_Abridged_sensorFOVType_Enum):flatbuffers.Offset {
  TrackSensor_Abridged.startTrackSensor_Abridged(builder);
  TrackSensor_Abridged.addRange(builder, range);
  TrackSensor_Abridged.addAz(builder, az);
  TrackSensor_Abridged.addSensorNumber(builder, sensorNumber);
  TrackSensor_Abridged.addSensorName(builder, sensorNameOffset);
  TrackSensor_Abridged.addMissionNumber(builder, missionNumberOffset);
  TrackSensor_Abridged.addMinRangeLimit(builder, minRangeLimit);
  TrackSensor_Abridged.addSensorFovtype(builder, sensorFovtype);
  return TrackSensor_Abridged.endTrackSensor_Abridged(builder);
}

unpack(): TrackSensor_AbridgedT {
  return new TrackSensor_AbridgedT(
    this.range(),
    this.az(),
    this.sensorNumber(),
    this.sensorName(),
    this.missionNumber(),
    this.minRangeLimit(),
    this.sensorFovtype()
  );
}


unpackTo(_o: TrackSensor_AbridgedT): void {
  _o.range = this.range();
  _o.az = this.az();
  _o.sensorNumber = this.sensorNumber();
  _o.sensorName = this.sensorName();
  _o.missionNumber = this.missionNumber();
  _o.minRangeLimit = this.minRangeLimit();
  _o.sensorFovtype = this.sensorFovtype();
}
}

export class TrackSensor_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public range: number = 0.0,
  public az: number = 0.0,
  public sensorNumber: number = 0,
  public sensorName: string|Uint8Array|null = null,
  public missionNumber: string|Uint8Array|null = null,
  public minRangeLimit: number = 0.0,
  public sensorFovtype: TrackSensor_Abridged_sensorFOVType_Enum = TrackSensor_Abridged_sensorFOVType_Enum.BUTTERFLY
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const sensorName = (this.sensorName !== null ? builder.createString(this.sensorName!) : 0);
  const missionNumber = (this.missionNumber !== null ? builder.createString(this.missionNumber!) : 0);

  return TrackSensor_Abridged.createTrackSensor_Abridged(builder,
    this.range,
    this.az,
    this.sensorNumber,
    sensorName,
    missionNumber,
    this.minRangeLimit,
    this.sensorFovtype
  );
}
}
