// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SensorPlan_Abridged_dataMode_Enum } from './sensor-plan-abridged-data-mode-enum.js';


/**
 * /// A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.
 */
export class SensorPlan_Abridged implements flatbuffers.IUnpackableObject<SensorPlan_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SensorPlan_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSensorPlan_Abridged(bb:flatbuffers.ByteBuffer, obj?:SensorPlan_Abridged):SensorPlan_Abridged {
  return (obj || new SensorPlan_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSensorPlan_Abridged(bb:flatbuffers.ByteBuffer, obj?:SensorPlan_Abridged):SensorPlan_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SensorPlan_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SENS');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SENSORPLAN-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).
 * Example: /// Example: PLAN
 * Constraints: Minimum length = 1, Maximum length = 12
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of records that comprise this parent set (COLLECT, CONTACT).
 * Example: /// Example: COLLECT
 * Constraints: Minimum length = 1, Maximum length = 12
 */
recType():string|null
recType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The start time of the plan or schedule, in ISO 8601 UTC format.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The end time of the plan or schedule, in ISO 8601 UTC format.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
endTime():string|null
endTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name associated with this plan or schedule.
 * Example: /// Example: EXAMPLE NAME
 * Constraints: Minimum length = 0, Maximum length = 24
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the requested/schedule/planned sensor associated with this request.
 * Example: /// Example: REF-SENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The purpose/description of this plan or schedule.
 * Example: /// Example: Example purpose
 * Constraints: Minimum length = 0, Maximum length = 256
 */
purpose():string|null
purpose(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
purpose(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The sensor or ground network associated with this plan or schedule.
 * Example: /// Example: NETWORK
 * Constraints: Minimum length = 0, Maximum length = 24
 */
senNetwork():string|null
senNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
senNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
reqTotal():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The customer for this plan or schedule.
 * Example: /// Example: CUSTOMER
 * Constraints: Minimum length = 0, Maximum length = 64
 */
customer():string|null
customer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
customer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).
 * Example: /// Example: ACCEPTED
 * Constraints: Minimum length = 0, Maximum length = 24
 */
status():string|null
status(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
status(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SensorPlan_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SensorPlan_Abridged_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSensorPlan_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(20);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, typeOffset, 0);
}

static addRecType(builder:flatbuffers.Builder, recTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, recTypeOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, startTimeOffset, 0);
}

static addEndTime(builder:flatbuffers.Builder, endTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, endTimeOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, nameOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, idSensorOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, origSensorIdOffset, 0);
}

static addPurpose(builder:flatbuffers.Builder, purposeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, purposeOffset, 0);
}

static addSenNetwork(builder:flatbuffers.Builder, senNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, senNetworkOffset, 0);
}

static addReqTotal(builder:flatbuffers.Builder, reqTotal:number) {
  builder.addFieldInt32(11, reqTotal, 0);
}

static addCustomer(builder:flatbuffers.Builder, customerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, customerOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, statusOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SensorPlan_Abridged_dataMode_Enum) {
  builder.addFieldInt8(18, dataMode, SensorPlan_Abridged_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, origNetworkOffset, 0);
}

static endSensorPlan_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSensorPlan_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SENS');
}

static finishSizePrefixedSensorPlan_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SENS', true);
}

static createSensorPlan_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, recTypeOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, endTimeOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, purposeOffset:flatbuffers.Offset, senNetworkOffset:flatbuffers.Offset, reqTotal:number, customerOffset:flatbuffers.Offset, statusOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:SensorPlan_Abridged_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  SensorPlan_Abridged.startSensorPlan_Abridged(builder);
  SensorPlan_Abridged.addId(builder, idOffset);
  SensorPlan_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  SensorPlan_Abridged.addType(builder, typeOffset);
  SensorPlan_Abridged.addRecType(builder, recTypeOffset);
  SensorPlan_Abridged.addStartTime(builder, startTimeOffset);
  SensorPlan_Abridged.addEndTime(builder, endTimeOffset);
  SensorPlan_Abridged.addName(builder, nameOffset);
  SensorPlan_Abridged.addIdSensor(builder, idSensorOffset);
  SensorPlan_Abridged.addOrigSensorId(builder, origSensorIdOffset);
  SensorPlan_Abridged.addPurpose(builder, purposeOffset);
  SensorPlan_Abridged.addSenNetwork(builder, senNetworkOffset);
  SensorPlan_Abridged.addReqTotal(builder, reqTotal);
  SensorPlan_Abridged.addCustomer(builder, customerOffset);
  SensorPlan_Abridged.addStatus(builder, statusOffset);
  SensorPlan_Abridged.addCreatedAt(builder, createdAtOffset);
  SensorPlan_Abridged.addCreatedBy(builder, createdByOffset);
  SensorPlan_Abridged.addSource(builder, sourceOffset);
  SensorPlan_Abridged.addOrigin(builder, originOffset);
  SensorPlan_Abridged.addDataMode(builder, dataMode);
  SensorPlan_Abridged.addOrigNetwork(builder, origNetworkOffset);
  return SensorPlan_Abridged.endSensorPlan_Abridged(builder);
}

unpack(): SensorPlan_AbridgedT {
  return new SensorPlan_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.type(),
    this.recType(),
    this.startTime(),
    this.endTime(),
    this.name(),
    this.idSensor(),
    this.origSensorId(),
    this.purpose(),
    this.senNetwork(),
    this.reqTotal(),
    this.customer(),
    this.status(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: SensorPlan_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.type = this.type();
  _o.recType = this.recType();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.name = this.name();
  _o.idSensor = this.idSensor();
  _o.origSensorId = this.origSensorId();
  _o.purpose = this.purpose();
  _o.senNetwork = this.senNetwork();
  _o.reqTotal = this.reqTotal();
  _o.customer = this.customer();
  _o.status = this.status();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class SensorPlan_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public recType: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public endTime: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public purpose: string|Uint8Array|null = null,
  public senNetwork: string|Uint8Array|null = null,
  public reqTotal: number = 0,
  public customer: string|Uint8Array|null = null,
  public status: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: SensorPlan_Abridged_dataMode_Enum = SensorPlan_Abridged_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const recType = (this.recType !== null ? builder.createString(this.recType!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const endTime = (this.endTime !== null ? builder.createString(this.endTime!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const purpose = (this.purpose !== null ? builder.createString(this.purpose!) : 0);
  const senNetwork = (this.senNetwork !== null ? builder.createString(this.senNetwork!) : 0);
  const customer = (this.customer !== null ? builder.createString(this.customer!) : 0);
  const status = (this.status !== null ? builder.createString(this.status!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return SensorPlan_Abridged.createSensorPlan_Abridged(builder,
    id,
    classificationMarking,
    type,
    recType,
    startTime,
    endTime,
    name,
    idSensor,
    origSensorId,
    purpose,
    senNetwork,
    this.reqTotal,
    customer,
    status,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
