// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Transponder_Full_dataMode_Enum } from './transponder-full-data-mode-enum.js';


/**
 * /// A transponder receives and transmits radio signals at a prescribed frequency range. A communications satellite's transponder is the series of interconnected units that form a communications channel between the receiving and the transmitting antennas. It is mainly used in satellite communication to transfer the received signals.
 */
export class Transponder_Full implements flatbuffers.IUnpackableObject<Transponder_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Transponder_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTransponder_Full(bb:flatbuffers.ByteBuffer, obj?:Transponder_Full):Transponder_Full {
  return (obj || new Transponder_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTransponder_Full(bb:flatbuffers.ByteBuffer, obj?:Transponder_Full):Transponder_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Transponder_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('TRAN');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: TRANSPONDER-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the parent Comm object for this transponder.
 * Example: /// Example: REF-COMM-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idComm():string|null
idComm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idComm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional name of the transponder.
 * Example: /// Example: AA10
 * Constraints: Minimum length = 0, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional external network id as provided data source.
 * Example: /// Example: N-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
nid():string|null
nid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional external transponder id as provided data source.
 * Example: /// Example: T-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
tid():string|null
tid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Transponder Translation Factor. This is the frequency difference between the uplink received by a satellite, and the downlink transmitted back. It varies satellite to satellite dependent on the mission.
 * Example: /// Example: 1.53261520047876
 * Constraints: No constraints specified.
 */
ttf():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Symbol rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per time unit using a digitally modulated signal or a line code. Also measured in Hz.
 * Example: /// Example: 4.0
 * Constraints: No constraints specified.
 */
symbolRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
 * Example: /// Example: 0
 * Constraints: No constraints specified.
 */
fec():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Transponder modulation, e.g. Auto, QPSK, 8PSK.
 * Example: /// Example: Auto
 * Constraints: Minimum length = 0, Maximum length = 10
 */
modulation():string|null
modulation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modulation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Format.
 * Example: /// Example: format
 * Constraints: Minimum length = 0, Maximum length = 45
 */
format():string|null
format(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
format(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Transponder system, e.g. DVB-S, DVB-S2.
 * Example: /// Example: DVB-S
 * Constraints: Minimum length = 0, Maximum length = 45
 */
system():string|null
system(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
system(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Transponder_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Transponder_Full_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was last updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Collection of Channels for this Transponder.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
channels(index: number):string
channels(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
channels(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

channelsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTransponder_Full(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdComm(builder:flatbuffers.Builder, idCommOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idCommOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, classificationMarkingOffset, 0);
}

static addNid(builder:flatbuffers.Builder, nidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, nidOffset, 0);
}

static addTid(builder:flatbuffers.Builder, tidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, tidOffset, 0);
}

static addTtf(builder:flatbuffers.Builder, ttf:number) {
  builder.addFieldFloat64(6, ttf, 0.0);
}

static addSymbolRate(builder:flatbuffers.Builder, symbolRate:number) {
  builder.addFieldFloat64(7, symbolRate, 0.0);
}

static addFec(builder:flatbuffers.Builder, fec:number) {
  builder.addFieldInt32(8, fec, 0);
}

static addModulation(builder:flatbuffers.Builder, modulationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, modulationOffset, 0);
}

static addFormat(builder:flatbuffers.Builder, formatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, formatOffset, 0);
}

static addSystem(builder:flatbuffers.Builder, systemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, systemOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Transponder_Full_dataMode_Enum) {
  builder.addFieldInt8(15, dataMode, Transponder_Full_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, updatedByOffset, 0);
}

static addChannels(builder:flatbuffers.Builder, channelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, channelsOffset, 0);
}

static createChannelsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChannelsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTransponder_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTransponder_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'TRAN');
}

static finishSizePrefixedTransponder_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'TRAN', true);
}

static createTransponder_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idCommOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, nidOffset:flatbuffers.Offset, tidOffset:flatbuffers.Offset, ttf:number, symbolRate:number, fec:number, modulationOffset:flatbuffers.Offset, formatOffset:flatbuffers.Offset, systemOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:Transponder_Full_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, channelsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Transponder_Full.startTransponder_Full(builder);
  Transponder_Full.addId(builder, idOffset);
  Transponder_Full.addIdComm(builder, idCommOffset);
  Transponder_Full.addName(builder, nameOffset);
  Transponder_Full.addClassificationMarking(builder, classificationMarkingOffset);
  Transponder_Full.addNid(builder, nidOffset);
  Transponder_Full.addTid(builder, tidOffset);
  Transponder_Full.addTtf(builder, ttf);
  Transponder_Full.addSymbolRate(builder, symbolRate);
  Transponder_Full.addFec(builder, fec);
  Transponder_Full.addModulation(builder, modulationOffset);
  Transponder_Full.addFormat(builder, formatOffset);
  Transponder_Full.addSystem(builder, systemOffset);
  Transponder_Full.addSource(builder, sourceOffset);
  Transponder_Full.addOrigin(builder, originOffset);
  Transponder_Full.addOrigNetwork(builder, origNetworkOffset);
  Transponder_Full.addDataMode(builder, dataMode);
  Transponder_Full.addCreatedAt(builder, createdAtOffset);
  Transponder_Full.addCreatedBy(builder, createdByOffset);
  Transponder_Full.addUpdatedAt(builder, updatedAtOffset);
  Transponder_Full.addUpdatedBy(builder, updatedByOffset);
  Transponder_Full.addChannels(builder, channelsOffset);
  return Transponder_Full.endTransponder_Full(builder);
}

unpack(): Transponder_FullT {
  return new Transponder_FullT(
    this.id(),
    this.idComm(),
    this.name(),
    this.classificationMarking(),
    this.nid(),
    this.tid(),
    this.ttf(),
    this.symbolRate(),
    this.fec(),
    this.modulation(),
    this.format(),
    this.system(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.bb!.createScalarList<string>(this.channels.bind(this), this.channels_Length())
  );
}


unpackTo(_o: Transponder_FullT): void {
  _o.id = this.id();
  _o.idComm = this.idComm();
  _o.name = this.name();
  _o.classificationMarking = this.classificationMarking();
  _o.nid = this.nid();
  _o.tid = this.tid();
  _o.ttf = this.ttf();
  _o.symbolRate = this.symbolRate();
  _o.fec = this.fec();
  _o.modulation = this.modulation();
  _o.format = this.format();
  _o.system = this.system();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.channels = this.bb!.createScalarList<string>(this.channels.bind(this), this.channels_Length());
}
}

export class Transponder_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idComm: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public nid: string|Uint8Array|null = null,
  public tid: string|Uint8Array|null = null,
  public ttf: number = 0.0,
  public symbolRate: number = 0.0,
  public fec: number = 0,
  public modulation: string|Uint8Array|null = null,
  public format: string|Uint8Array|null = null,
  public system: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: Transponder_Full_dataMode_Enum = Transponder_Full_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public channels: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idComm = (this.idComm !== null ? builder.createString(this.idComm!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const nid = (this.nid !== null ? builder.createString(this.nid!) : 0);
  const tid = (this.tid !== null ? builder.createString(this.tid!) : 0);
  const modulation = (this.modulation !== null ? builder.createString(this.modulation!) : 0);
  const format = (this.format !== null ? builder.createString(this.format!) : 0);
  const system = (this.system !== null ? builder.createString(this.system!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const channels = Transponder_Full.createChannelsVector(builder, builder.createObjectOffsetList(this.channels));

  return Transponder_Full.createTransponder_Full(builder,
    id,
    idComm,
    name,
    classificationMarking,
    nid,
    tid,
    this.ttf,
    this.symbolRate,
    this.fec,
    modulation,
    format,
    system,
    source,
    origin,
    origNetwork,
    this.dataMode,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    channels
  );
}
}
