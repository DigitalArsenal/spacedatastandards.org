// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Health state information.
 */
export class EvacHealthState_Abridged implements flatbuffers.IUnpackableObject<EvacHealthState_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EvacHealthState_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEvacHealthState_Abridged(bb:flatbuffers.ByteBuffer, obj?:EvacHealthState_Abridged):EvacHealthState_Abridged {
  return (obj || new EvacHealthState_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEvacHealthState_Abridged(bb:flatbuffers.ByteBuffer, obj?:EvacHealthState_Abridged):EvacHealthState_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EvacHealthState_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EVAC');
}

/**
 * Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION, LIFE SIGN, RADIATION, SHOCK, THERMAL).
 * Example: /// Example: COGNITIVE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Medical color code used to quickly identify various medical state (e.g. AMBER, BLACK, BLUE, GRAY, NORMAL, RED).
 * Example: /// Example: BLUE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
healthStateCode():string|null
healthStateCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
healthStateCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Medical confidence factor.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
medConfFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
 * Example: /// Example: 2021-10-15T16:00:00.123Z
 * Constraints: No constraints specified.
 */
time():string|null
time(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
time(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEvacHealthState_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addHealthStateCode(builder:flatbuffers.Builder, healthStateCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, healthStateCodeOffset, 0);
}

static addMedConfFactor(builder:flatbuffers.Builder, medConfFactor:number) {
  builder.addFieldInt32(2, medConfFactor, 0);
}

static addTime(builder:flatbuffers.Builder, timeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, timeOffset, 0);
}

static endEvacHealthState_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEvacHealthState_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC');
}

static finishSizePrefixedEvacHealthState_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC', true);
}

static createEvacHealthState_Abridged(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, healthStateCodeOffset:flatbuffers.Offset, medConfFactor:number, timeOffset:flatbuffers.Offset):flatbuffers.Offset {
  EvacHealthState_Abridged.startEvacHealthState_Abridged(builder);
  EvacHealthState_Abridged.addType(builder, typeOffset);
  EvacHealthState_Abridged.addHealthStateCode(builder, healthStateCodeOffset);
  EvacHealthState_Abridged.addMedConfFactor(builder, medConfFactor);
  EvacHealthState_Abridged.addTime(builder, timeOffset);
  return EvacHealthState_Abridged.endEvacHealthState_Abridged(builder);
}

unpack(): EvacHealthState_AbridgedT {
  return new EvacHealthState_AbridgedT(
    this.type(),
    this.healthStateCode(),
    this.medConfFactor(),
    this.time()
  );
}


unpackTo(_o: EvacHealthState_AbridgedT): void {
  _o.type = this.type();
  _o.healthStateCode = this.healthStateCode();
  _o.medConfFactor = this.medConfFactor();
  _o.time = this.time();
}
}

export class EvacHealthState_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public type: string|Uint8Array|null = null,
  public healthStateCode: string|Uint8Array|null = null,
  public medConfFactor: number = 0,
  public time: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const healthStateCode = (this.healthStateCode !== null ? builder.createString(this.healthStateCode!) : 0);
  const time = (this.time !== null ? builder.createString(this.time!) : 0);

  return EvacHealthState_Abridged.createEvacHealthState_Abridged(builder,
    type,
    healthStateCode,
    this.medConfFactor,
    time
  );
}
}
