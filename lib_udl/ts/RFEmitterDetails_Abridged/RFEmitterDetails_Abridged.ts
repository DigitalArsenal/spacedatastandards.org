// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RFEmitterDetails_Abridged_dataMode_Enum } from './RFEmitterDetails_Abridged_dataMode_Enum.js';


/**
 * /// Details for a particular RF Emitter, collected by a particular source. An RF Emitter may have multiple details records from various sources.
 */
export class RFEmitterDetails_Abridged implements flatbuffers.IUnpackableObject<RFEmitterDetails_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RFEmitterDetails_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRFEmitterDetails_Abridged(bb:flatbuffers.ByteBuffer, obj?:RFEmitterDetails_Abridged):RFEmitterDetails_Abridged {
  return (obj || new RFEmitterDetails_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRFEmitterDetails_Abridged(bb:flatbuffers.ByteBuffer, obj?:RFEmitterDetails_Abridged):RFEmitterDetails_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RFEmitterDetails_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('RFEM');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: RFEMITTERDETAILS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent RF Emitter.
 * Example: /// Example: RFEMITTER-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idRfemitter():string|null
idRfemitter(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idRfemitter(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Designator of this RF Emitter.
 * Example: /// Example: DESIGNATOR
 * Constraints: Minimum length = 0, Maximum length = 128
 */
designator():string|null
designator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
designator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional alternate name or alias for this RF Emitter.
 * Example: /// Example: ALTERNATE_NAME
 * Constraints: Minimum length = 0, Maximum length = 128
 */
altName():string|null
altName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Family of this RF Emitter type.
 * Example: /// Example: FAMILY
 * Constraints: Minimum length = 0, Maximum length = 128
 */
family():string|null
family(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
family(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the production facility for this RF Emitter.
 * Example: /// Example: PRODUCTION_FACILITY
 * Constraints: Minimum length = 0, Maximum length = 128
 */
productionFacilityName():string|null
productionFacilityName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
productionFacilityName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate facility name for this RF Emitter.
 * Example: /// Example: ALTERNATE_FACILITY_NAME
 * Constraints: Minimum length = 0, Maximum length = 128
 */
alternateFacilityName():string|null
alternateFacilityName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
alternateFacilityName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the organization which manufactures this RF Emitter.
 * Example: /// Example: MANUFACTURERORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the location of the production facility for this RF Emitter.
 * Example: /// Example: PRODUCTIONFACILITYLOCATION-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
productionFacilityLocationId():string|null
productionFacilityLocationId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
productionFacilityLocationId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
 * Example: /// Example: 50.23
 * Constraints: No constraints specified.
 */
systemSensitivityStart():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
 * Example: /// Example: 150.23
 * Constraints: No constraints specified.
 */
systemSensitivityEnd():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Type or name of receiver.
 * Example: /// Example: RECEIVER_TYPE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
receiverType():string|null
receiverType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiverType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Receiver sensitivity in dBm.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
receiverSensitivity():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Receiver bandwidth in Mhz.
 * Example: /// Example: 15.23
 * Constraints: No constraints specified.
 */
receiverBandwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Transmitter frequency in Mhz.
 * Example: /// Example: 105.9
 * Constraints: No constraints specified.
 */
transmitterFrequency():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Transmitter bandwidth in Mhz.
 * Example: /// Example: 0.125
 * Constraints: No constraints specified.
 */
transmitterBandwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Transmit power in Watts.
 * Example: /// Example: 100.23
 * Constraints: No constraints specified.
 */
transmitPower():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Barrage noise bandwidth in Mhz.
 * Example: /// Example: 5.23
 * Constraints: No constraints specified.
 */
barrageNoiseBandwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Doppler noise value in Mhz.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
dopplerNoise():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Digital Form Radio Memory instantaneous bandwidth in Mhz.
 * Example: /// Example: 20.23
 * Constraints: No constraints specified.
 */
drfmInstantaneousBandwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of channels.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
numChannels():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of bits.
 * Example: /// Example: 256
 * Constraints: No constraints specified.
 */
numBits():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
 * Example: /// Example: [1.1, 2.2]
 * Constraints: No constraints specified.
 */
antennaSize(index: number):string
antennaSize(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
antennaSize(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

antennaSizeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * For parabolic/dish antennas, the diameter of the antenna in meters.
 * Example: /// Example: 20.23
 * Constraints: No constraints specified.
 */
antennaDiameter():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Notes on the RF Emitter.
 * Example: /// Example: NOTES
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Secondary notes on the RF Emitter.
 * Example: /// Example: MORE_NOTES
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
secondaryNotes():string|null
secondaryNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
secondaryNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Detailed description of the RF Emitter.
 * Example: /// Example: DESCRIPTION
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of URLs containing additional information on this RF Emitter.
 * Example: /// Example: ['TAG1', 'TAG2']
 * Constraints: No constraints specified.
 */
urls(index: number):string
urls(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
urls(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

urlsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():RFEmitterDetails_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : RFEmitterDetails_Abridged_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRFEmitterDetails_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(35);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdRfemitter(builder:flatbuffers.Builder, idRfemitterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idRfemitterOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addDesignator(builder:flatbuffers.Builder, designatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, designatorOffset, 0);
}

static addAltName(builder:flatbuffers.Builder, altNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, altNameOffset, 0);
}

static addFamily(builder:flatbuffers.Builder, familyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, familyOffset, 0);
}

static addProductionFacilityName(builder:flatbuffers.Builder, productionFacilityNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, productionFacilityNameOffset, 0);
}

static addAlternateFacilityName(builder:flatbuffers.Builder, alternateFacilityNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, alternateFacilityNameOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, manufacturerOrgIdOffset, 0);
}

static addProductionFacilityLocationId(builder:flatbuffers.Builder, productionFacilityLocationIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, productionFacilityLocationIdOffset, 0);
}

static addSystemSensitivityStart(builder:flatbuffers.Builder, systemSensitivityStart:number) {
  builder.addFieldFloat64(10, systemSensitivityStart, 0.0);
}

static addSystemSensitivityEnd(builder:flatbuffers.Builder, systemSensitivityEnd:number) {
  builder.addFieldFloat64(11, systemSensitivityEnd, 0.0);
}

static addReceiverType(builder:flatbuffers.Builder, receiverTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, receiverTypeOffset, 0);
}

static addReceiverSensitivity(builder:flatbuffers.Builder, receiverSensitivity:number) {
  builder.addFieldFloat64(13, receiverSensitivity, 0.0);
}

static addReceiverBandwidth(builder:flatbuffers.Builder, receiverBandwidth:number) {
  builder.addFieldFloat64(14, receiverBandwidth, 0.0);
}

static addTransmitterFrequency(builder:flatbuffers.Builder, transmitterFrequency:number) {
  builder.addFieldFloat64(15, transmitterFrequency, 0.0);
}

static addTransmitterBandwidth(builder:flatbuffers.Builder, transmitterBandwidth:number) {
  builder.addFieldFloat64(16, transmitterBandwidth, 0.0);
}

static addTransmitPower(builder:flatbuffers.Builder, transmitPower:number) {
  builder.addFieldFloat64(17, transmitPower, 0.0);
}

static addBarrageNoiseBandwidth(builder:flatbuffers.Builder, barrageNoiseBandwidth:number) {
  builder.addFieldFloat64(18, barrageNoiseBandwidth, 0.0);
}

static addDopplerNoise(builder:flatbuffers.Builder, dopplerNoise:number) {
  builder.addFieldFloat64(19, dopplerNoise, 0.0);
}

static addDrfmInstantaneousBandwidth(builder:flatbuffers.Builder, drfmInstantaneousBandwidth:number) {
  builder.addFieldFloat64(20, drfmInstantaneousBandwidth, 0.0);
}

static addNumChannels(builder:flatbuffers.Builder, numChannels:number) {
  builder.addFieldInt32(21, numChannels, 0);
}

static addNumBits(builder:flatbuffers.Builder, numBits:number) {
  builder.addFieldInt32(22, numBits, 0);
}

static addAntennaSize(builder:flatbuffers.Builder, antennaSizeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, antennaSizeOffset, 0);
}

static createAntennaSizeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAntennaSizeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAntennaDiameter(builder:flatbuffers.Builder, antennaDiameter:number) {
  builder.addFieldFloat64(24, antennaDiameter, 0.0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, notesOffset, 0);
}

static addSecondaryNotes(builder:flatbuffers.Builder, secondaryNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, secondaryNotesOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, descriptionOffset, 0);
}

static addUrls(builder:flatbuffers.Builder, urlsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, urlsOffset, 0);
}

static createUrlsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUrlsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:RFEmitterDetails_Abridged_dataMode_Enum) {
  builder.addFieldInt8(32, dataMode, RFEmitterDetails_Abridged_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, createdByOffset, 0);
}

static endRFEmitterDetails_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishRFEmitterDetails_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RFEM');
}

static finishSizePrefixedRFEmitterDetails_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RFEM', true);
}

static createRFEmitterDetails_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idRfemitterOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, designatorOffset:flatbuffers.Offset, altNameOffset:flatbuffers.Offset, familyOffset:flatbuffers.Offset, productionFacilityNameOffset:flatbuffers.Offset, alternateFacilityNameOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, productionFacilityLocationIdOffset:flatbuffers.Offset, systemSensitivityStart:number, systemSensitivityEnd:number, receiverTypeOffset:flatbuffers.Offset, receiverSensitivity:number, receiverBandwidth:number, transmitterFrequency:number, transmitterBandwidth:number, transmitPower:number, barrageNoiseBandwidth:number, dopplerNoise:number, drfmInstantaneousBandwidth:number, numChannels:number, numBits:number, antennaSizeOffset:flatbuffers.Offset, antennaDiameter:number, notesOffset:flatbuffers.Offset, secondaryNotesOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, urlsOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:RFEmitterDetails_Abridged_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset):flatbuffers.Offset {
  RFEmitterDetails_Abridged.startRFEmitterDetails_Abridged(builder);
  RFEmitterDetails_Abridged.addId(builder, idOffset);
  RFEmitterDetails_Abridged.addIdRfemitter(builder, idRfemitterOffset);
  RFEmitterDetails_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  RFEmitterDetails_Abridged.addDesignator(builder, designatorOffset);
  RFEmitterDetails_Abridged.addAltName(builder, altNameOffset);
  RFEmitterDetails_Abridged.addFamily(builder, familyOffset);
  RFEmitterDetails_Abridged.addProductionFacilityName(builder, productionFacilityNameOffset);
  RFEmitterDetails_Abridged.addAlternateFacilityName(builder, alternateFacilityNameOffset);
  RFEmitterDetails_Abridged.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  RFEmitterDetails_Abridged.addProductionFacilityLocationId(builder, productionFacilityLocationIdOffset);
  RFEmitterDetails_Abridged.addSystemSensitivityStart(builder, systemSensitivityStart);
  RFEmitterDetails_Abridged.addSystemSensitivityEnd(builder, systemSensitivityEnd);
  RFEmitterDetails_Abridged.addReceiverType(builder, receiverTypeOffset);
  RFEmitterDetails_Abridged.addReceiverSensitivity(builder, receiverSensitivity);
  RFEmitterDetails_Abridged.addReceiverBandwidth(builder, receiverBandwidth);
  RFEmitterDetails_Abridged.addTransmitterFrequency(builder, transmitterFrequency);
  RFEmitterDetails_Abridged.addTransmitterBandwidth(builder, transmitterBandwidth);
  RFEmitterDetails_Abridged.addTransmitPower(builder, transmitPower);
  RFEmitterDetails_Abridged.addBarrageNoiseBandwidth(builder, barrageNoiseBandwidth);
  RFEmitterDetails_Abridged.addDopplerNoise(builder, dopplerNoise);
  RFEmitterDetails_Abridged.addDrfmInstantaneousBandwidth(builder, drfmInstantaneousBandwidth);
  RFEmitterDetails_Abridged.addNumChannels(builder, numChannels);
  RFEmitterDetails_Abridged.addNumBits(builder, numBits);
  RFEmitterDetails_Abridged.addAntennaSize(builder, antennaSizeOffset);
  RFEmitterDetails_Abridged.addAntennaDiameter(builder, antennaDiameter);
  RFEmitterDetails_Abridged.addNotes(builder, notesOffset);
  RFEmitterDetails_Abridged.addSecondaryNotes(builder, secondaryNotesOffset);
  RFEmitterDetails_Abridged.addDescription(builder, descriptionOffset);
  RFEmitterDetails_Abridged.addUrls(builder, urlsOffset);
  RFEmitterDetails_Abridged.addSource(builder, sourceOffset);
  RFEmitterDetails_Abridged.addOrigin(builder, originOffset);
  RFEmitterDetails_Abridged.addOrigNetwork(builder, origNetworkOffset);
  RFEmitterDetails_Abridged.addDataMode(builder, dataMode);
  RFEmitterDetails_Abridged.addCreatedAt(builder, createdAtOffset);
  RFEmitterDetails_Abridged.addCreatedBy(builder, createdByOffset);
  return RFEmitterDetails_Abridged.endRFEmitterDetails_Abridged(builder);
}

unpack(): RFEmitterDetails_AbridgedT {
  return new RFEmitterDetails_AbridgedT(
    this.id(),
    this.idRfemitter(),
    this.classificationMarking(),
    this.designator(),
    this.altName(),
    this.family(),
    this.productionFacilityName(),
    this.alternateFacilityName(),
    this.manufacturerOrgId(),
    this.productionFacilityLocationId(),
    this.systemSensitivityStart(),
    this.systemSensitivityEnd(),
    this.receiverType(),
    this.receiverSensitivity(),
    this.receiverBandwidth(),
    this.transmitterFrequency(),
    this.transmitterBandwidth(),
    this.transmitPower(),
    this.barrageNoiseBandwidth(),
    this.dopplerNoise(),
    this.drfmInstantaneousBandwidth(),
    this.numChannels(),
    this.numBits(),
    this.bb!.createScalarList<string>(this.antennaSize.bind(this), this.antennaSizeLength()),
    this.antennaDiameter(),
    this.notes(),
    this.secondaryNotes(),
    this.description(),
    this.bb!.createScalarList<string>(this.urls.bind(this), this.urlsLength()),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy()
  );
}


unpackTo(_o: RFEmitterDetails_AbridgedT): void {
  _o.id = this.id();
  _o.idRfemitter = this.idRfemitter();
  _o.classificationMarking = this.classificationMarking();
  _o.designator = this.designator();
  _o.altName = this.altName();
  _o.family = this.family();
  _o.productionFacilityName = this.productionFacilityName();
  _o.alternateFacilityName = this.alternateFacilityName();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.productionFacilityLocationId = this.productionFacilityLocationId();
  _o.systemSensitivityStart = this.systemSensitivityStart();
  _o.systemSensitivityEnd = this.systemSensitivityEnd();
  _o.receiverType = this.receiverType();
  _o.receiverSensitivity = this.receiverSensitivity();
  _o.receiverBandwidth = this.receiverBandwidth();
  _o.transmitterFrequency = this.transmitterFrequency();
  _o.transmitterBandwidth = this.transmitterBandwidth();
  _o.transmitPower = this.transmitPower();
  _o.barrageNoiseBandwidth = this.barrageNoiseBandwidth();
  _o.dopplerNoise = this.dopplerNoise();
  _o.drfmInstantaneousBandwidth = this.drfmInstantaneousBandwidth();
  _o.numChannels = this.numChannels();
  _o.numBits = this.numBits();
  _o.antennaSize = this.bb!.createScalarList<string>(this.antennaSize.bind(this), this.antennaSizeLength());
  _o.antennaDiameter = this.antennaDiameter();
  _o.notes = this.notes();
  _o.secondaryNotes = this.secondaryNotes();
  _o.description = this.description();
  _o.urls = this.bb!.createScalarList<string>(this.urls.bind(this), this.urlsLength());
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
}
}

export class RFEmitterDetails_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idRfemitter: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public designator: string|Uint8Array|null = null,
  public altName: string|Uint8Array|null = null,
  public family: string|Uint8Array|null = null,
  public productionFacilityName: string|Uint8Array|null = null,
  public alternateFacilityName: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public productionFacilityLocationId: string|Uint8Array|null = null,
  public systemSensitivityStart: number = 0.0,
  public systemSensitivityEnd: number = 0.0,
  public receiverType: string|Uint8Array|null = null,
  public receiverSensitivity: number = 0.0,
  public receiverBandwidth: number = 0.0,
  public transmitterFrequency: number = 0.0,
  public transmitterBandwidth: number = 0.0,
  public transmitPower: number = 0.0,
  public barrageNoiseBandwidth: number = 0.0,
  public dopplerNoise: number = 0.0,
  public drfmInstantaneousBandwidth: number = 0.0,
  public numChannels: number = 0,
  public numBits: number = 0,
  public antennaSize: (string)[] = [],
  public antennaDiameter: number = 0.0,
  public notes: string|Uint8Array|null = null,
  public secondaryNotes: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public urls: (string)[] = [],
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: RFEmitterDetails_Abridged_dataMode_Enum = RFEmitterDetails_Abridged_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idRfemitter = (this.idRfemitter !== null ? builder.createString(this.idRfemitter!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const designator = (this.designator !== null ? builder.createString(this.designator!) : 0);
  const altName = (this.altName !== null ? builder.createString(this.altName!) : 0);
  const family = (this.family !== null ? builder.createString(this.family!) : 0);
  const productionFacilityName = (this.productionFacilityName !== null ? builder.createString(this.productionFacilityName!) : 0);
  const alternateFacilityName = (this.alternateFacilityName !== null ? builder.createString(this.alternateFacilityName!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const productionFacilityLocationId = (this.productionFacilityLocationId !== null ? builder.createString(this.productionFacilityLocationId!) : 0);
  const receiverType = (this.receiverType !== null ? builder.createString(this.receiverType!) : 0);
  const antennaSize = RFEmitterDetails_Abridged.createAntennaSizeVector(builder, builder.createObjectOffsetList(this.antennaSize));
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const secondaryNotes = (this.secondaryNotes !== null ? builder.createString(this.secondaryNotes!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const urls = RFEmitterDetails_Abridged.createUrlsVector(builder, builder.createObjectOffsetList(this.urls));
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);

  return RFEmitterDetails_Abridged.createRFEmitterDetails_Abridged(builder,
    id,
    idRfemitter,
    classificationMarking,
    designator,
    altName,
    family,
    productionFacilityName,
    alternateFacilityName,
    manufacturerOrgId,
    productionFacilityLocationId,
    this.systemSensitivityStart,
    this.systemSensitivityEnd,
    receiverType,
    this.receiverSensitivity,
    this.receiverBandwidth,
    this.transmitterFrequency,
    this.transmitterBandwidth,
    this.transmitPower,
    this.barrageNoiseBandwidth,
    this.dopplerNoise,
    this.drfmInstantaneousBandwidth,
    this.numChannels,
    this.numBits,
    antennaSize,
    this.antennaDiameter,
    notes,
    secondaryNotes,
    description,
    urls,
    source,
    origin,
    origNetwork,
    this.dataMode,
    createdAt,
    createdBy
  );
}
}
