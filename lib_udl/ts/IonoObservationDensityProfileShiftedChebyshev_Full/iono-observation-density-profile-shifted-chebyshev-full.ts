// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Coefficients to describe either the E, F1, and bottomside F2 profile shapes or the height uncertainty boundaries.
 */
export class IonoObservationDensityProfileShiftedChebyshev_Full implements flatbuffers.IUnpackableObject<IonoObservationDensityProfileShiftedChebyshev_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IonoObservationDensityProfileShiftedChebyshev_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIonoObservationDensityProfileShiftedChebyshev_Full(bb:flatbuffers.ByteBuffer, obj?:IonoObservationDensityProfileShiftedChebyshev_Full):IonoObservationDensityProfileShiftedChebyshev_Full {
  return (obj || new IonoObservationDensityProfileShiftedChebyshev_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIonoObservationDensityProfileShiftedChebyshev_Full(bb:flatbuffers.ByteBuffer, obj?:IonoObservationDensityProfileShiftedChebyshev_Full):IonoObservationDensityProfileShiftedChebyshev_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IonoObservationDensityProfileShiftedChebyshev_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('IONO');
}

/**
 * Description of the computation technique.
 * Example: /// Example: Best-fit Huang-Reinisch formalism based on shifted Chebyshev expansion.
 * Constraints: No constraints specified.
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Up to 3 groups of coefficients, using “shiftedChebyshev” sub-field, to describe E, F1, and bottomside F2 profile shapes, or up to 6 groups of coefficients to describe height uncertainty boundaries (upper and lower).
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
shiftedChebyshevs(index: number):string
shiftedChebyshevs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
shiftedChebyshevs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

shiftedChebyshevsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startIonoObservationDensityProfileShiftedChebyshev_Full(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, descriptionOffset, 0);
}

static addShiftedChebyshevs(builder:flatbuffers.Builder, shiftedChebyshevsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, shiftedChebyshevsOffset, 0);
}

static createShiftedChebyshevsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startShiftedChebyshevsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endIonoObservationDensityProfileShiftedChebyshev_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishIonoObservationDensityProfileShiftedChebyshev_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO');
}

static finishSizePrefixedIonoObservationDensityProfileShiftedChebyshev_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO', true);
}

static createIonoObservationDensityProfileShiftedChebyshev_Full(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset, shiftedChebyshevsOffset:flatbuffers.Offset):flatbuffers.Offset {
  IonoObservationDensityProfileShiftedChebyshev_Full.startIonoObservationDensityProfileShiftedChebyshev_Full(builder);
  IonoObservationDensityProfileShiftedChebyshev_Full.addDescription(builder, descriptionOffset);
  IonoObservationDensityProfileShiftedChebyshev_Full.addShiftedChebyshevs(builder, shiftedChebyshevsOffset);
  return IonoObservationDensityProfileShiftedChebyshev_Full.endIonoObservationDensityProfileShiftedChebyshev_Full(builder);
}

unpack(): IonoObservationDensityProfileShiftedChebyshev_FullT {
  return new IonoObservationDensityProfileShiftedChebyshev_FullT(
    this.description(),
    this.bb!.createScalarList<string>(this.shiftedChebyshevs.bind(this), this.shiftedChebyshevs_Length())
  );
}


unpackTo(_o: IonoObservationDensityProfileShiftedChebyshev_FullT): void {
  _o.description = this.description();
  _o.shiftedChebyshevs = this.bb!.createScalarList<string>(this.shiftedChebyshevs.bind(this), this.shiftedChebyshevs_Length());
}
}

export class IonoObservationDensityProfileShiftedChebyshev_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public description: string|Uint8Array|null = null,
  public shiftedChebyshevs: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const shiftedChebyshevs = IonoObservationDensityProfileShiftedChebyshev_Full.createShiftedChebyshevsVector(builder, builder.createObjectOffsetList(this.shiftedChebyshevs));

  return IonoObservationDensityProfileShiftedChebyshev_Full.createIonoObservationDensityProfileShiftedChebyshev_Full(builder,
    description,
    shiftedChebyshevs
  );
}
}
