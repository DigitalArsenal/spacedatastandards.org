// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Status_dataMode_Enum } from './status-data-mode-enum.js';
import { Status_opsCap_Enum } from './status-ops-cap-enum.js';
import { Status_state_Enum } from './status-state-enum.js';
import { Status_sysCap_Enum } from './status-sys-cap-enum.js';


/**
 * /// Status for a particular Entity. An entity may have multiple status records collected by various sources.
 */
export class Status implements flatbuffers.IUnpackableObject<StatusT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Status {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStatus(bb:flatbuffers.ByteBuffer, obj?:Status):Status {
  return (obj || new Status()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStatus(bb:flatbuffers.ByteBuffer, obj?:Status):Status {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Status()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('STAT');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: STATUS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The sources or SCG references from which the classification of this data is derived.
 * Example: /// Example: SOME_SOURCE
 * Constraints: Minimum length = 0, Maximum length = 128
 */
derivedFrom():string|null
derivedFrom(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
derivedFrom(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The declassification date of this data, in ISO 8601 UTC format.
 * Example: /// Example: 2021-01-01T01:02:02.123Z
 * Constraints: No constraints specified.
 */
declassificationDate():string|null
declassificationDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
declassificationDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Declassification string of this data.
 * Example: /// Example: U
 * Constraints: Minimum length = 0, Maximum length = 256
 */
declassificationString():string|null
declassificationString(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
declassificationString(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent entity.
 * Example: /// Example: ENTITY-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idEntity():string|null
idEntity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idEntity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).
 * Example: /// Example: ACTIVE
 * Constraints: Minimum length = 0, Maximum length = 16
 */
state():Status_state_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Status_state_Enum.UNKNOWN;
}

/**
 * System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
 * Example: /// Example: FMC
 * Constraints: Minimum length = 0, Maximum length = 3
 */
sysCap():Status_sysCap_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Status_sysCap_Enum.FMC;
}

/**
 * Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
 * Example: /// Example: FMC
 * Constraints: Minimum length = 0, Maximum length = 3
 */
opsCap():Status_opsCap_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Status_opsCap_Enum.FMC;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
subStatusCollection(index: number):string
subStatusCollection(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
subStatusCollection(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

subStatusCollectionLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Status_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Status_dataMode_Enum.REAL;
}

/**
 * Comments describing the status creation and or updates to an entity.
 * Example: /// Example: Example Notes
 * Constraints: No constraints specified.
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was last updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: TST1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startStatus(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addDerivedFrom(builder:flatbuffers.Builder, derivedFromOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, derivedFromOffset, 0);
}

static addDeclassificationDate(builder:flatbuffers.Builder, declassificationDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, declassificationDateOffset, 0);
}

static addDeclassificationString(builder:flatbuffers.Builder, declassificationStringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, declassificationStringOffset, 0);
}

static addIdEntity(builder:flatbuffers.Builder, idEntityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idEntityOffset, 0);
}

static addState(builder:flatbuffers.Builder, state:Status_state_Enum) {
  builder.addFieldInt8(6, state, Status_state_Enum.UNKNOWN);
}

static addSysCap(builder:flatbuffers.Builder, sysCap:Status_sysCap_Enum) {
  builder.addFieldInt8(7, sysCap, Status_sysCap_Enum.FMC);
}

static addOpsCap(builder:flatbuffers.Builder, opsCap:Status_opsCap_Enum) {
  builder.addFieldInt8(8, opsCap, Status_opsCap_Enum.FMC);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, sourceOffset, 0);
}

static addSubStatusCollection(builder:flatbuffers.Builder, subStatusCollectionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, subStatusCollectionOffset, 0);
}

static createSubStatusCollectionVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSubStatusCollectionVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Status_dataMode_Enum) {
  builder.addFieldInt8(11, dataMode, Status_dataMode_Enum.REAL);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, notesOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, updatedByOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, origNetworkOffset, 0);
}

static endStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishStatusBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'STAT');
}

static finishSizePrefixedStatusBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'STAT', true);
}

static createStatus(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, derivedFromOffset:flatbuffers.Offset, declassificationDateOffset:flatbuffers.Offset, declassificationStringOffset:flatbuffers.Offset, idEntityOffset:flatbuffers.Offset, state:Status_state_Enum, sysCap:Status_sysCap_Enum, opsCap:Status_opsCap_Enum, sourceOffset:flatbuffers.Offset, subStatusCollectionOffset:flatbuffers.Offset, dataMode:Status_dataMode_Enum, notesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  Status.startStatus(builder);
  Status.addId(builder, idOffset);
  Status.addClassificationMarking(builder, classificationMarkingOffset);
  Status.addDerivedFrom(builder, derivedFromOffset);
  Status.addDeclassificationDate(builder, declassificationDateOffset);
  Status.addDeclassificationString(builder, declassificationStringOffset);
  Status.addIdEntity(builder, idEntityOffset);
  Status.addState(builder, state);
  Status.addSysCap(builder, sysCap);
  Status.addOpsCap(builder, opsCap);
  Status.addSource(builder, sourceOffset);
  Status.addSubStatusCollection(builder, subStatusCollectionOffset);
  Status.addDataMode(builder, dataMode);
  Status.addNotes(builder, notesOffset);
  Status.addCreatedAt(builder, createdAtOffset);
  Status.addCreatedBy(builder, createdByOffset);
  Status.addUpdatedAt(builder, updatedAtOffset);
  Status.addUpdatedBy(builder, updatedByOffset);
  Status.addOrigin(builder, originOffset);
  Status.addOrigNetwork(builder, origNetworkOffset);
  return Status.endStatus(builder);
}

unpack(): StatusT {
  return new StatusT(
    this.id(),
    this.classificationMarking(),
    this.derivedFrom(),
    this.declassificationDate(),
    this.declassificationString(),
    this.idEntity(),
    this.state(),
    this.sysCap(),
    this.opsCap(),
    this.source(),
    this.bb!.createScalarList<string>(this.subStatusCollection.bind(this), this.subStatusCollection_Length()),
    this.dataMode(),
    this.notes(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.origin(),
    this.origNetwork()
  );
}


unpackTo(_o: StatusT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.derivedFrom = this.derivedFrom();
  _o.declassificationDate = this.declassificationDate();
  _o.declassificationString = this.declassificationString();
  _o.idEntity = this.idEntity();
  _o.state = this.state();
  _o.sysCap = this.sysCap();
  _o.opsCap = this.opsCap();
  _o.source = this.source();
  _o.subStatusCollection = this.bb!.createScalarList<string>(this.subStatusCollection.bind(this), this.subStatusCollection_Length());
  _o.dataMode = this.dataMode();
  _o.notes = this.notes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
}
}

export class StatusT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public derivedFrom: string|Uint8Array|null = null,
  public declassificationDate: string|Uint8Array|null = null,
  public declassificationString: string|Uint8Array|null = null,
  public idEntity: string|Uint8Array|null = null,
  public state: Status_state_Enum = Status_state_Enum.UNKNOWN,
  public sysCap: Status_sysCap_Enum = Status_sysCap_Enum.FMC,
  public opsCap: Status_opsCap_Enum = Status_opsCap_Enum.FMC,
  public source: string|Uint8Array|null = null,
  public subStatusCollection: (string)[] = [],
  public dataMode: Status_dataMode_Enum = Status_dataMode_Enum.REAL,
  public notes: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const derivedFrom = (this.derivedFrom !== null ? builder.createString(this.derivedFrom!) : 0);
  const declassificationDate = (this.declassificationDate !== null ? builder.createString(this.declassificationDate!) : 0);
  const declassificationString = (this.declassificationString !== null ? builder.createString(this.declassificationString!) : 0);
  const idEntity = (this.idEntity !== null ? builder.createString(this.idEntity!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const subStatusCollection = Status.createSubStatusCollectionVector(builder, builder.createObjectOffsetList(this.subStatusCollection));
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Status.createStatus(builder,
    id,
    classificationMarking,
    derivedFrom,
    declassificationDate,
    declassificationString,
    idEntity,
    this.state,
    this.sysCap,
    this.opsCap,
    source,
    subStatusCollection,
    this.dataMode,
    notes,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    origin,
    origNetwork
  );
}
}
