// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Array of point data for this Point Group.
 */
export class FlightPlanPoints_Full implements flatbuffers.IUnpackableObject<FlightPlanPoints_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlightPlanPoints_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlightPlanPoints_Full(bb:flatbuffers.ByteBuffer, obj?:FlightPlanPoints_Full):FlightPlanPoints_Full {
  return (obj || new FlightPlanPoints_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlightPlanPoints_Full(bb:flatbuffers.ByteBuffer, obj?:FlightPlanPoints_Full):FlightPlanPoints_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlightPlanPoints_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('FLIG');
}

/**
 * Name of this point.
 * Example: /// Example: CRUISE ALTITUDE ETP
 * Constraints: Minimum length = 0, Maximum length = 36
 */
pointName():string|null
pointName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pointName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
fppLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 179.1
 * Constraints: No constraints specified.
 */
fppLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with millisecond precision.
 * Example: /// Example: 2023-09-09T01:00:00.123Z
 * Constraints: No constraints specified.
 */
fppEta():string|null
fppEta(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fppEta(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Fuel required at this point to execute an Equal Time Point (ETP) or Extended Operations (ETOPS) plan in pounds.
 * Example: /// Example: 4250.1
 * Constraints: No constraints specified.
 */
fppReqFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startFlightPlanPoints_Full(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addPointName(builder:flatbuffers.Builder, pointNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pointNameOffset, 0);
}

static addFppLat(builder:flatbuffers.Builder, fppLat:number) {
  builder.addFieldFloat64(1, fppLat, 0.0);
}

static addFppLon(builder:flatbuffers.Builder, fppLon:number) {
  builder.addFieldFloat64(2, fppLon, 0.0);
}

static addFppEta(builder:flatbuffers.Builder, fppEtaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, fppEtaOffset, 0);
}

static addFppReqFuel(builder:flatbuffers.Builder, fppReqFuel:number) {
  builder.addFieldFloat64(4, fppReqFuel, 0.0);
}

static endFlightPlanPoints_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFlightPlanPoints_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'FLIG');
}

static finishSizePrefixedFlightPlanPoints_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'FLIG', true);
}

static createFlightPlanPoints_Full(builder:flatbuffers.Builder, pointNameOffset:flatbuffers.Offset, fppLat:number, fppLon:number, fppEtaOffset:flatbuffers.Offset, fppReqFuel:number):flatbuffers.Offset {
  FlightPlanPoints_Full.startFlightPlanPoints_Full(builder);
  FlightPlanPoints_Full.addPointName(builder, pointNameOffset);
  FlightPlanPoints_Full.addFppLat(builder, fppLat);
  FlightPlanPoints_Full.addFppLon(builder, fppLon);
  FlightPlanPoints_Full.addFppEta(builder, fppEtaOffset);
  FlightPlanPoints_Full.addFppReqFuel(builder, fppReqFuel);
  return FlightPlanPoints_Full.endFlightPlanPoints_Full(builder);
}

unpack(): FlightPlanPoints_FullT {
  return new FlightPlanPoints_FullT(
    this.pointName(),
    this.fppLat(),
    this.fppLon(),
    this.fppEta(),
    this.fppReqFuel()
  );
}


unpackTo(_o: FlightPlanPoints_FullT): void {
  _o.pointName = this.pointName();
  _o.fppLat = this.fppLat();
  _o.fppLon = this.fppLon();
  _o.fppEta = this.fppEta();
  _o.fppReqFuel = this.fppReqFuel();
}
}

export class FlightPlanPoints_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public pointName: string|Uint8Array|null = null,
  public fppLat: number = 0.0,
  public fppLon: number = 0.0,
  public fppEta: string|Uint8Array|null = null,
  public fppReqFuel: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const pointName = (this.pointName !== null ? builder.createString(this.pointName!) : 0);
  const fppEta = (this.fppEta !== null ? builder.createString(this.fppEta!) : 0);

  return FlightPlanPoints_Full.createFlightPlanPoints_Full(builder,
    pointName,
    this.fppLat,
    this.fppLon,
    fppEta,
    this.fppReqFuel
  );
}
}
