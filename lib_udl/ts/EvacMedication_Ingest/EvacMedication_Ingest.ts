// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Medication specifics.
 */
export class EvacMedication_Ingest implements flatbuffers.IUnpackableObject<EvacMedication_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EvacMedication_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEvacMedication_Ingest(bb:flatbuffers.ByteBuffer, obj?:EvacMedication_Ingest):EvacMedication_Ingest {
  return (obj || new EvacMedication_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEvacMedication_Ingest(bb:flatbuffers.ByteBuffer, obj?:EvacMedication_Ingest):EvacMedication_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EvacMedication_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EVAC');
}

/**
 * The type of medication administered.   Intended as, but not constrained to, K07.1 Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC, COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL, HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA, PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
 * Example: /// Example: TYLENOL
 * Constraints: Minimum length = 0, Maximum length = 64
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Body part location or body part referenced for medication. Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
 * Example: /// Example: ARM LEFT BACK
 * Constraints: Minimum length = 0, Maximum length = 32
 */
bodyPart():string|null
bodyPart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bodyPart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Quantity of medicine or drug administered or recommended to be taken at a particular time.
 * Example: /// Example: 800mg
 * Constraints: Minimum length = 0, Maximum length = 32
 */
dose():string|null
dose(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dose(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Route of medication delivery (e.g. INJECTION, ORAL, etc.).
 * Example: /// Example: ORAL
 * Constraints: Minimum length = 0, Maximum length = 16
 */
adminRoute():string|null
adminRoute(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
adminRoute(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time that the medication was administered in ISO 8601 UTC format.
 * Example: /// Example: 2021-10-15T16:00:00.123Z
 * Constraints: No constraints specified.
 */
time():string|null
time(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
time(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional comments on the patient's medication information.
 * Example: /// Example: Comments on the patient's medication information.
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
comments():string|null
comments(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
comments(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEvacMedication_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addBodyPart(builder:flatbuffers.Builder, bodyPartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, bodyPartOffset, 0);
}

static addDose(builder:flatbuffers.Builder, doseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, doseOffset, 0);
}

static addAdminRoute(builder:flatbuffers.Builder, adminRouteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, adminRouteOffset, 0);
}

static addTime(builder:flatbuffers.Builder, timeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, timeOffset, 0);
}

static addComments(builder:flatbuffers.Builder, commentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, commentsOffset, 0);
}

static endEvacMedication_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEvacMedication_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC');
}

static finishSizePrefixedEvacMedication_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC', true);
}

static createEvacMedication_Ingest(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, bodyPartOffset:flatbuffers.Offset, doseOffset:flatbuffers.Offset, adminRouteOffset:flatbuffers.Offset, timeOffset:flatbuffers.Offset, commentsOffset:flatbuffers.Offset):flatbuffers.Offset {
  EvacMedication_Ingest.startEvacMedication_Ingest(builder);
  EvacMedication_Ingest.addType(builder, typeOffset);
  EvacMedication_Ingest.addBodyPart(builder, bodyPartOffset);
  EvacMedication_Ingest.addDose(builder, doseOffset);
  EvacMedication_Ingest.addAdminRoute(builder, adminRouteOffset);
  EvacMedication_Ingest.addTime(builder, timeOffset);
  EvacMedication_Ingest.addComments(builder, commentsOffset);
  return EvacMedication_Ingest.endEvacMedication_Ingest(builder);
}

unpack(): EvacMedication_IngestT {
  return new EvacMedication_IngestT(
    this.type(),
    this.bodyPart(),
    this.dose(),
    this.adminRoute(),
    this.time(),
    this.comments()
  );
}


unpackTo(_o: EvacMedication_IngestT): void {
  _o.type = this.type();
  _o.bodyPart = this.bodyPart();
  _o.dose = this.dose();
  _o.adminRoute = this.adminRoute();
  _o.time = this.time();
  _o.comments = this.comments();
}
}

export class EvacMedication_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public type: string|Uint8Array|null = null,
  public bodyPart: string|Uint8Array|null = null,
  public dose: string|Uint8Array|null = null,
  public adminRoute: string|Uint8Array|null = null,
  public time: string|Uint8Array|null = null,
  public comments: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const bodyPart = (this.bodyPart !== null ? builder.createString(this.bodyPart!) : 0);
  const dose = (this.dose !== null ? builder.createString(this.dose!) : 0);
  const adminRoute = (this.adminRoute !== null ? builder.createString(this.adminRoute!) : 0);
  const time = (this.time !== null ? builder.createString(this.time!) : 0);
  const comments = (this.comments !== null ? builder.createString(this.comments!) : 0);

  return EvacMedication_Ingest.createEvacMedication_Ingest(builder,
    type,
    bodyPart,
    dose,
    adminRoute,
    time,
    comments
  );
}
}
