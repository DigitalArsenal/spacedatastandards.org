// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// The means for the platform to pass information pertaining to the sensor job that will be performed and details of the location parameters (terrain elevation model and geoid model) used in the measurement.
 */
export class MtiJobDefinition_Full implements flatbuffers.IUnpackableObject<MtiJobDefinition_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MtiJobDefinition_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMtiJobDefinition_Full(bb:flatbuffers.ByteBuffer, obj?:MtiJobDefinition_Full):MtiJobDefinition_Full {
  return (obj || new MtiJobDefinition_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMtiJobDefinition_Full(bb:flatbuffers.ByteBuffer, obj?:MtiJobDefinition_Full):MtiJobDefinition_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MtiJobDefinition_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MTIJ');
}

/**
 * A platform assigned number identifying the specific request or task to which the specific dwell pertains.
 * Example: /// Example: 1234567890
 * Constraints: No constraints specified.
 */
j1():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

/**
 * The type of sensor or the platform.
 * Example: /// Example: TYPE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
j2():string|null
j2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
j2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the particular variant of the sensor type.
 * Example: /// Example: J3-ID
 * Constraints: Minimum length = 0, Maximum length = 8
 */
j3():string|null
j3(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
j3(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag field indicating whether filtering has been applied to the targets detected within the dwell area.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
j4():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Priority of this tasking request relative to all other active tasking requests scheduled for execution on the specified platform.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
j5():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * North-South position of the first corner (Point A) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
j6():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 *  East-West position of the first corner (Point A) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
j7():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 *  North-South position of the second corner (Point B) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
j8():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * East-West position of the second corner (Point B) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
j9():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * North-South position of the third corner (Point C) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
j10():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * East-West position of the third corner (Point C) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
j11():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * North-South position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
j12():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * East-West position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
j13():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Mode in which the radar will operate for the given job ID.
 * Example: /// Example: MODE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
j14():string|null
j14(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
j14(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The nominal revisit interval for the job ID, expressed in deciseconds.  Value of zero, indicates that the sensor is not revisiting the previous area.
 * Example: /// Example: 100
 * Constraints: No constraints specified.
 */
j15():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Nominal estimate of the standard deviation in the estimated horizontal (along track) sensor location, expressed in decimeters.   measured along the sensor track direction defined in the Dwell segment.
 * Example: /// Example: 100
 * Constraints: No constraints specified.
 */
j16():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Nominal estimate of the standard deviation in the estimated horizontal sensor location, measured orthogonal to the track direction, expressed in decimeters.
 * Example: /// Example: 100
 * Constraints: No constraints specified.
 */
j17():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Nominal estimate of the standard deviation of the measured sensor altitude, expressed in decimeters.
 * Example: /// Example: 100
 * Constraints: No constraints specified.
 */
j18():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Standard deviation of the estimate of sensor track heading, expressed in degrees.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
j19():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Nominal standard deviation of the estimate of sensor speed, expressed in millimeters per second.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
j20():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Nominal standard deviation of the slant range of the reported detection, expressed in centimeters.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
j21():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Nominal standard deviation of the measured cross angle to the reported detection, expressed in degrees.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
j22():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Nominal standard deviation of the velocity line-of-sight component, expressed in centimeters per second.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
j23():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Nominal minimum velocity component along the line of sight, which can be detected by the sensor, expressed in decimeters per second.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
j24():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Nominal probability that an unobscured ten square-meter target will be detected within the given area of surveillance.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
j25():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The expected density of False Alarms (FA), expressed as the negative of the decibel value.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
j26():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The terrain elevation model used for developing the target reports.
 * Example: /// Example: MODEL
 * Constraints: Minimum length = 0, Maximum length = 64
 */
j27():string|null
j27(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
j27(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The geoid model used for developing the target reports.
 * Example: /// Example: MODEL
 * Constraints: Minimum length = 0, Maximum length = 64
 */
j28():string|null
j28(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
j28(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startMtiJobDefinition_Full(builder:flatbuffers.Builder) {
  builder.startObject(28);
}

static addJ1(builder:flatbuffers.Builder, j1:bigint) {
  builder.addFieldInt64(0, j1, BigInt('0'));
}

static addJ2(builder:flatbuffers.Builder, j2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(1, j2Offset, 0);
}

static addJ3(builder:flatbuffers.Builder, j3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(2, j3Offset, 0);
}

static addJ4(builder:flatbuffers.Builder, j4:number) {
  builder.addFieldInt32(3, j4, 0);
}

static addJ5(builder:flatbuffers.Builder, j5:number) {
  builder.addFieldInt32(4, j5, 0);
}

static addJ6(builder:flatbuffers.Builder, j6:number) {
  builder.addFieldFloat64(5, j6, 0.0);
}

static addJ7(builder:flatbuffers.Builder, j7:number) {
  builder.addFieldFloat64(6, j7, 0.0);
}

static addJ8(builder:flatbuffers.Builder, j8:number) {
  builder.addFieldFloat64(7, j8, 0.0);
}

static addJ9(builder:flatbuffers.Builder, j9:number) {
  builder.addFieldFloat64(8, j9, 0.0);
}

static addJ10(builder:flatbuffers.Builder, j10:number) {
  builder.addFieldFloat64(9, j10, 0.0);
}

static addJ11(builder:flatbuffers.Builder, j11:number) {
  builder.addFieldFloat64(10, j11, 0.0);
}

static addJ12(builder:flatbuffers.Builder, j12:number) {
  builder.addFieldFloat64(11, j12, 0.0);
}

static addJ13(builder:flatbuffers.Builder, j13:number) {
  builder.addFieldFloat64(12, j13, 0.0);
}

static addJ14(builder:flatbuffers.Builder, j14Offset:flatbuffers.Offset) {
  builder.addFieldOffset(13, j14Offset, 0);
}

static addJ15(builder:flatbuffers.Builder, j15:number) {
  builder.addFieldInt32(14, j15, 0);
}

static addJ16(builder:flatbuffers.Builder, j16:number) {
  builder.addFieldInt32(15, j16, 0);
}

static addJ17(builder:flatbuffers.Builder, j17:number) {
  builder.addFieldInt32(16, j17, 0);
}

static addJ18(builder:flatbuffers.Builder, j18:number) {
  builder.addFieldInt32(17, j18, 0);
}

static addJ19(builder:flatbuffers.Builder, j19:number) {
  builder.addFieldInt32(18, j19, 0);
}

static addJ20(builder:flatbuffers.Builder, j20:number) {
  builder.addFieldInt32(19, j20, 0);
}

static addJ21(builder:flatbuffers.Builder, j21:number) {
  builder.addFieldInt32(20, j21, 0);
}

static addJ22(builder:flatbuffers.Builder, j22:number) {
  builder.addFieldFloat64(21, j22, 0.0);
}

static addJ23(builder:flatbuffers.Builder, j23:number) {
  builder.addFieldInt32(22, j23, 0);
}

static addJ24(builder:flatbuffers.Builder, j24:number) {
  builder.addFieldInt32(23, j24, 0);
}

static addJ25(builder:flatbuffers.Builder, j25:number) {
  builder.addFieldInt32(24, j25, 0);
}

static addJ26(builder:flatbuffers.Builder, j26:number) {
  builder.addFieldInt32(25, j26, 0);
}

static addJ27(builder:flatbuffers.Builder, j27Offset:flatbuffers.Offset) {
  builder.addFieldOffset(26, j27Offset, 0);
}

static addJ28(builder:flatbuffers.Builder, j28Offset:flatbuffers.Offset) {
  builder.addFieldOffset(27, j28Offset, 0);
}

static endMtiJobDefinition_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMtiJobDefinition_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIJ');
}

static finishSizePrefixedMtiJobDefinition_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIJ', true);
}

static createMtiJobDefinition_Full(builder:flatbuffers.Builder, j1:bigint, j2Offset:flatbuffers.Offset, j3Offset:flatbuffers.Offset, j4:number, j5:number, j6:number, j7:number, j8:number, j9:number, j10:number, j11:number, j12:number, j13:number, j14Offset:flatbuffers.Offset, j15:number, j16:number, j17:number, j18:number, j19:number, j20:number, j21:number, j22:number, j23:number, j24:number, j25:number, j26:number, j27Offset:flatbuffers.Offset, j28Offset:flatbuffers.Offset):flatbuffers.Offset {
  MtiJobDefinition_Full.startMtiJobDefinition_Full(builder);
  MtiJobDefinition_Full.addJ1(builder, j1);
  MtiJobDefinition_Full.addJ2(builder, j2Offset);
  MtiJobDefinition_Full.addJ3(builder, j3Offset);
  MtiJobDefinition_Full.addJ4(builder, j4);
  MtiJobDefinition_Full.addJ5(builder, j5);
  MtiJobDefinition_Full.addJ6(builder, j6);
  MtiJobDefinition_Full.addJ7(builder, j7);
  MtiJobDefinition_Full.addJ8(builder, j8);
  MtiJobDefinition_Full.addJ9(builder, j9);
  MtiJobDefinition_Full.addJ10(builder, j10);
  MtiJobDefinition_Full.addJ11(builder, j11);
  MtiJobDefinition_Full.addJ12(builder, j12);
  MtiJobDefinition_Full.addJ13(builder, j13);
  MtiJobDefinition_Full.addJ14(builder, j14Offset);
  MtiJobDefinition_Full.addJ15(builder, j15);
  MtiJobDefinition_Full.addJ16(builder, j16);
  MtiJobDefinition_Full.addJ17(builder, j17);
  MtiJobDefinition_Full.addJ18(builder, j18);
  MtiJobDefinition_Full.addJ19(builder, j19);
  MtiJobDefinition_Full.addJ20(builder, j20);
  MtiJobDefinition_Full.addJ21(builder, j21);
  MtiJobDefinition_Full.addJ22(builder, j22);
  MtiJobDefinition_Full.addJ23(builder, j23);
  MtiJobDefinition_Full.addJ24(builder, j24);
  MtiJobDefinition_Full.addJ25(builder, j25);
  MtiJobDefinition_Full.addJ26(builder, j26);
  MtiJobDefinition_Full.addJ27(builder, j27Offset);
  MtiJobDefinition_Full.addJ28(builder, j28Offset);
  return MtiJobDefinition_Full.endMtiJobDefinition_Full(builder);
}

unpack(): MtiJobDefinition_FullT {
  return new MtiJobDefinition_FullT(
    this.j1(),
    this.j2(),
    this.j3(),
    this.j4(),
    this.j5(),
    this.j6(),
    this.j7(),
    this.j8(),
    this.j9(),
    this.j10(),
    this.j11(),
    this.j12(),
    this.j13(),
    this.j14(),
    this.j15(),
    this.j16(),
    this.j17(),
    this.j18(),
    this.j19(),
    this.j20(),
    this.j21(),
    this.j22(),
    this.j23(),
    this.j24(),
    this.j25(),
    this.j26(),
    this.j27(),
    this.j28()
  );
}


unpackTo(_o: MtiJobDefinition_FullT): void {
  _o.j1 = this.j1();
  _o.j2 = this.j2();
  _o.j3 = this.j3();
  _o.j4 = this.j4();
  _o.j5 = this.j5();
  _o.j6 = this.j6();
  _o.j7 = this.j7();
  _o.j8 = this.j8();
  _o.j9 = this.j9();
  _o.j10 = this.j10();
  _o.j11 = this.j11();
  _o.j12 = this.j12();
  _o.j13 = this.j13();
  _o.j14 = this.j14();
  _o.j15 = this.j15();
  _o.j16 = this.j16();
  _o.j17 = this.j17();
  _o.j18 = this.j18();
  _o.j19 = this.j19();
  _o.j20 = this.j20();
  _o.j21 = this.j21();
  _o.j22 = this.j22();
  _o.j23 = this.j23();
  _o.j24 = this.j24();
  _o.j25 = this.j25();
  _o.j26 = this.j26();
  _o.j27 = this.j27();
  _o.j28 = this.j28();
}
}

export class MtiJobDefinition_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public j1: bigint = BigInt('0'),
  public j2: string|Uint8Array|null = null,
  public j3: string|Uint8Array|null = null,
  public j4: number = 0,
  public j5: number = 0,
  public j6: number = 0.0,
  public j7: number = 0.0,
  public j8: number = 0.0,
  public j9: number = 0.0,
  public j10: number = 0.0,
  public j11: number = 0.0,
  public j12: number = 0.0,
  public j13: number = 0.0,
  public j14: string|Uint8Array|null = null,
  public j15: number = 0,
  public j16: number = 0,
  public j17: number = 0,
  public j18: number = 0,
  public j19: number = 0,
  public j20: number = 0,
  public j21: number = 0,
  public j22: number = 0.0,
  public j23: number = 0,
  public j24: number = 0,
  public j25: number = 0,
  public j26: number = 0,
  public j27: string|Uint8Array|null = null,
  public j28: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const j2 = (this.j2 !== null ? builder.createString(this.j2!) : 0);
  const j3 = (this.j3 !== null ? builder.createString(this.j3!) : 0);
  const j14 = (this.j14 !== null ? builder.createString(this.j14!) : 0);
  const j27 = (this.j27 !== null ? builder.createString(this.j27!) : 0);
  const j28 = (this.j28 !== null ? builder.createString(this.j28!) : 0);

  return MtiJobDefinition_Full.createMtiJobDefinition_Full(builder,
    this.j1,
    j2,
    j3,
    this.j4,
    this.j5,
    this.j6,
    this.j7,
    this.j8,
    this.j9,
    this.j10,
    this.j11,
    this.j12,
    this.j13,
    j14,
    this.j15,
    this.j16,
    this.j17,
    this.j18,
    this.j19,
    this.j20,
    this.j21,
    this.j22,
    this.j23,
    this.j24,
    this.j25,
    this.j26,
    j27,
    j28
  );
}
}
