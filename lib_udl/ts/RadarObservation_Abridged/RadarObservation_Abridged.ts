// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RadarObservation_Abridged_dataMode_Enum } from './RadarObservation_Abridged_dataMode_Enum.js';
import { RadarObservation_Abridged_senReferenceFrame_Enum } from './RadarObservation_Abridged_senReferenceFrame_Enum.js';


/**
 * /// Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
 */
export class RadarObservation_Abridged implements flatbuffers.IUnpackableObject<RadarObservation_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RadarObservation_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRadarObservation_Abridged(bb:flatbuffers.ByteBuffer, obj?:RadarObservation_Abridged):RadarObservation_Abridged {
  return (obj || new RadarObservation_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRadarObservation_Abridged(bb:flatbuffers.ByteBuffer, obj?:RadarObservation_Abridged):RadarObservation_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RadarObservation_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('RADA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: RADAROBSERVATION-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ob detection time in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
obTime():string|null
obTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the target on-orbit object, if correlated.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the reporting sensor.
 * Example: /// Example: SENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/Catalog number of the target on-orbit object.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier to indicate the specific tasking which produced this observation.
 * Example: /// Example: TASK-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
taskId():string|null
taskId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: TRANSACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier of the track to which this observation belongs.
 * Example: /// Example: TRACK-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
trackId():string|null
trackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
 * Example: /// Example: FIRST
 * Constraints: Minimum length = 0, Maximum length = 8
 */
obPosition():string|null
obPosition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obPosition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
uct():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * azimuth angle in degrees and topocentric frame.
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
azimuth():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
azimuthUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor azimuth angle bias in degrees.
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
azimuthBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of the line of sight azimuth in degrees per second.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
azimuthRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line of sight elevation in degrees and topocentric frame.
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
elevation():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
elevationUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor elevation bias in degrees.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
elevationBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of the line of sight elevation in degrees per second.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
elevationRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Target range in km.
 * Example: /// Example: 100.23
 * Constraints: No constraints specified.
 */
range():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Range accelaration in km/s2.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
rangeAccel():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
rangeAccelUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the range measurement, in kilometers.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
rangeUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor range bias in km.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
rangeBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of the line of sight range in km/sec.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
rangeRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the range rate measurement, in kilometers/second.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
rangeRateUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Corrected doppler measurement in meters per second.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
doppler():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the corrected doppler measurement, in meters/second.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
dopplerUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line of sight right ascension in degrees and J2000 coordinate frame.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
ra():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line of sight declination angle in degrees and J2000 coordinate frame.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
declination():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * X position of target in km in J2000 coordinate frame.
 * Example: /// Example: 50.23
 * Constraints: No constraints specified.
 */
x():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Y position of target in km in J2000 coordinate frame.
 * Example: /// Example: 50.23
 * Constraints: No constraints specified.
 */
y():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Z position of target in km in J2000 coordinate frame.
 * Example: /// Example: 50.23
 * Constraints: No constraints specified.
 */
z():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * X velocity of target in km/sec in J2000 coordinate frame.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
xvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Y velocity of target in km/sec in J2000 coordinate frame.
 * Example: /// Example: 5.23
 * Constraints: No constraints specified.
 */
yvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Z velocity of target in km/sec in J2000 coordinate frame.
 * Example: /// Example: 5.23
 * Constraints: No constraints specified.
 */
zvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
senx():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
 * Example: /// Example: 40.23
 * Constraints: No constraints specified.
 */
seny():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
 * Example: /// Example: 35.23
 * Constraints: No constraints specified.
 */
senz():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Radar cross section in meters squared for polarization principal.
 * Example: /// Example: 100.23
 * Constraints: No constraints specified.
 */
rcs():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
rcsUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Radar cross section in meters squared for orthogonal polarization.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
orthogonalRcs():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
orthogonalRcsUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Signal to noise ratio, in dB.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
snr():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * ID of the beam that produced this observation.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
beam():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor timing bias in seconds.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
timingBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: rawFileURI
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():RadarObservation_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : RadarObservation_Abridged_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
 * Example: /// Example: J2000
 * Constraints: Minimum length = 0, Maximum length = 24
 */
senReferenceFrame():RadarObservation_Abridged_senReferenceFrame_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : RadarObservation_Abridged_senReferenceFrame_Enum.J2000;
}

/**
 * Optional source-provided and searchable metadata or descriptor of the data.
 * Example: /// Example: descriptor
 * Constraints: Minimum length = 0, Maximum length = 64
 */
descriptor():string|null
descriptor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
descriptor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
 * Example: /// Example: RADAR
 * Constraints: No constraints specified.
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRadarObservation_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(59);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addObTime(builder:flatbuffers.Builder, obTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, obTimeOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idOnOrbitOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idSensorOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(5, satNo, 0);
}

static addTaskId(builder:flatbuffers.Builder, taskIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, taskIdOffset, 0);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, transactionIdOffset, 0);
}

static addTrackId(builder:flatbuffers.Builder, trackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, trackIdOffset, 0);
}

static addObPosition(builder:flatbuffers.Builder, obPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, obPositionOffset, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, origObjectIdOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, origSensorIdOffset, 0);
}

static addUct(builder:flatbuffers.Builder, uct:boolean) {
  builder.addFieldInt8(12, +uct, +false);
}

static addAzimuth(builder:flatbuffers.Builder, azimuth:number) {
  builder.addFieldFloat64(13, azimuth, 0.0);
}

static addAzimuthUnc(builder:flatbuffers.Builder, azimuthUnc:number) {
  builder.addFieldFloat64(14, azimuthUnc, 0.0);
}

static addAzimuthBias(builder:flatbuffers.Builder, azimuthBias:number) {
  builder.addFieldFloat64(15, azimuthBias, 0.0);
}

static addAzimuthRate(builder:flatbuffers.Builder, azimuthRate:number) {
  builder.addFieldFloat64(16, azimuthRate, 0.0);
}

static addElevation(builder:flatbuffers.Builder, elevation:number) {
  builder.addFieldFloat64(17, elevation, 0.0);
}

static addElevationUnc(builder:flatbuffers.Builder, elevationUnc:number) {
  builder.addFieldFloat64(18, elevationUnc, 0.0);
}

static addElevationBias(builder:flatbuffers.Builder, elevationBias:number) {
  builder.addFieldFloat64(19, elevationBias, 0.0);
}

static addElevationRate(builder:flatbuffers.Builder, elevationRate:number) {
  builder.addFieldFloat64(20, elevationRate, 0.0);
}

static addRange(builder:flatbuffers.Builder, range:number) {
  builder.addFieldFloat64(21, range, 0.0);
}

static addRangeAccel(builder:flatbuffers.Builder, rangeAccel:number) {
  builder.addFieldFloat64(22, rangeAccel, 0.0);
}

static addRangeAccelUnc(builder:flatbuffers.Builder, rangeAccelUnc:number) {
  builder.addFieldFloat64(23, rangeAccelUnc, 0.0);
}

static addRangeUnc(builder:flatbuffers.Builder, rangeUnc:number) {
  builder.addFieldFloat64(24, rangeUnc, 0.0);
}

static addRangeBias(builder:flatbuffers.Builder, rangeBias:number) {
  builder.addFieldFloat64(25, rangeBias, 0.0);
}

static addRangeRate(builder:flatbuffers.Builder, rangeRate:number) {
  builder.addFieldFloat64(26, rangeRate, 0.0);
}

static addRangeRateUnc(builder:flatbuffers.Builder, rangeRateUnc:number) {
  builder.addFieldFloat64(27, rangeRateUnc, 0.0);
}

static addDoppler(builder:flatbuffers.Builder, doppler:number) {
  builder.addFieldFloat64(28, doppler, 0.0);
}

static addDopplerUnc(builder:flatbuffers.Builder, dopplerUnc:number) {
  builder.addFieldFloat64(29, dopplerUnc, 0.0);
}

static addRa(builder:flatbuffers.Builder, ra:number) {
  builder.addFieldFloat64(30, ra, 0.0);
}

static addDeclination(builder:flatbuffers.Builder, declination:number) {
  builder.addFieldFloat64(31, declination, 0.0);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat64(32, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat64(33, y, 0.0);
}

static addZ(builder:flatbuffers.Builder, z:number) {
  builder.addFieldFloat64(34, z, 0.0);
}

static addXvel(builder:flatbuffers.Builder, xvel:number) {
  builder.addFieldFloat64(35, xvel, 0.0);
}

static addYvel(builder:flatbuffers.Builder, yvel:number) {
  builder.addFieldFloat64(36, yvel, 0.0);
}

static addZvel(builder:flatbuffers.Builder, zvel:number) {
  builder.addFieldFloat64(37, zvel, 0.0);
}

static addSenx(builder:flatbuffers.Builder, senx:number) {
  builder.addFieldFloat64(38, senx, 0.0);
}

static addSeny(builder:flatbuffers.Builder, seny:number) {
  builder.addFieldFloat64(39, seny, 0.0);
}

static addSenz(builder:flatbuffers.Builder, senz:number) {
  builder.addFieldFloat64(40, senz, 0.0);
}

static addRcs(builder:flatbuffers.Builder, rcs:number) {
  builder.addFieldFloat64(41, rcs, 0.0);
}

static addRcsUnc(builder:flatbuffers.Builder, rcsUnc:number) {
  builder.addFieldFloat64(42, rcsUnc, 0.0);
}

static addOrthogonalRcs(builder:flatbuffers.Builder, orthogonalRcs:number) {
  builder.addFieldFloat64(43, orthogonalRcs, 0.0);
}

static addOrthogonalRcsUnc(builder:flatbuffers.Builder, orthogonalRcsUnc:number) {
  builder.addFieldFloat64(44, orthogonalRcsUnc, 0.0);
}

static addSnr(builder:flatbuffers.Builder, snr:number) {
  builder.addFieldFloat64(45, snr, 0.0);
}

static addBeam(builder:flatbuffers.Builder, beam:number) {
  builder.addFieldFloat64(46, beam, 0.0);
}

static addTimingBias(builder:flatbuffers.Builder, timingBias:number) {
  builder.addFieldFloat64(47, timingBias, 0.0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, rawFileUriOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:RadarObservation_Abridged_dataMode_Enum) {
  builder.addFieldInt8(51, dataMode, RadarObservation_Abridged_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, createdByOffset, 0);
}

static addSenReferenceFrame(builder:flatbuffers.Builder, senReferenceFrame:RadarObservation_Abridged_senReferenceFrame_Enum) {
  builder.addFieldInt8(54, senReferenceFrame, RadarObservation_Abridged_senReferenceFrame_Enum.J2000);
}

static addDescriptor(builder:flatbuffers.Builder, descriptorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, descriptorOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, origNetworkOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, sourceDlOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, typeOffset, 0);
}

static endRadarObservation_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishRadarObservation_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RADA');
}

static finishSizePrefixedRadarObservation_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RADA', true);
}

static createRadarObservation_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, obTimeOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, satNo:number, taskIdOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, trackIdOffset:flatbuffers.Offset, obPositionOffset:flatbuffers.Offset, origObjectIdOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, uct:boolean, azimuth:number, azimuthUnc:number, azimuthBias:number, azimuthRate:number, elevation:number, elevationUnc:number, elevationBias:number, elevationRate:number, range:number, rangeAccel:number, rangeAccelUnc:number, rangeUnc:number, rangeBias:number, rangeRate:number, rangeRateUnc:number, doppler:number, dopplerUnc:number, ra:number, declination:number, x:number, y:number, z:number, xvel:number, yvel:number, zvel:number, senx:number, seny:number, senz:number, rcs:number, rcsUnc:number, orthogonalRcs:number, orthogonalRcsUnc:number, snr:number, beam:number, timingBias:number, rawFileUriOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:RadarObservation_Abridged_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, senReferenceFrame:RadarObservation_Abridged_senReferenceFrame_Enum, descriptorOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset):flatbuffers.Offset {
  RadarObservation_Abridged.startRadarObservation_Abridged(builder);
  RadarObservation_Abridged.addId(builder, idOffset);
  RadarObservation_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  RadarObservation_Abridged.addObTime(builder, obTimeOffset);
  RadarObservation_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
  RadarObservation_Abridged.addIdSensor(builder, idSensorOffset);
  RadarObservation_Abridged.addSatNo(builder, satNo);
  RadarObservation_Abridged.addTaskId(builder, taskIdOffset);
  RadarObservation_Abridged.addTransactionId(builder, transactionIdOffset);
  RadarObservation_Abridged.addTrackId(builder, trackIdOffset);
  RadarObservation_Abridged.addObPosition(builder, obPositionOffset);
  RadarObservation_Abridged.addOrigObjectId(builder, origObjectIdOffset);
  RadarObservation_Abridged.addOrigSensorId(builder, origSensorIdOffset);
  RadarObservation_Abridged.addUct(builder, uct);
  RadarObservation_Abridged.addAzimuth(builder, azimuth);
  RadarObservation_Abridged.addAzimuthUnc(builder, azimuthUnc);
  RadarObservation_Abridged.addAzimuthBias(builder, azimuthBias);
  RadarObservation_Abridged.addAzimuthRate(builder, azimuthRate);
  RadarObservation_Abridged.addElevation(builder, elevation);
  RadarObservation_Abridged.addElevationUnc(builder, elevationUnc);
  RadarObservation_Abridged.addElevationBias(builder, elevationBias);
  RadarObservation_Abridged.addElevationRate(builder, elevationRate);
  RadarObservation_Abridged.addRange(builder, range);
  RadarObservation_Abridged.addRangeAccel(builder, rangeAccel);
  RadarObservation_Abridged.addRangeAccelUnc(builder, rangeAccelUnc);
  RadarObservation_Abridged.addRangeUnc(builder, rangeUnc);
  RadarObservation_Abridged.addRangeBias(builder, rangeBias);
  RadarObservation_Abridged.addRangeRate(builder, rangeRate);
  RadarObservation_Abridged.addRangeRateUnc(builder, rangeRateUnc);
  RadarObservation_Abridged.addDoppler(builder, doppler);
  RadarObservation_Abridged.addDopplerUnc(builder, dopplerUnc);
  RadarObservation_Abridged.addRa(builder, ra);
  RadarObservation_Abridged.addDeclination(builder, declination);
  RadarObservation_Abridged.addX(builder, x);
  RadarObservation_Abridged.addY(builder, y);
  RadarObservation_Abridged.addZ(builder, z);
  RadarObservation_Abridged.addXvel(builder, xvel);
  RadarObservation_Abridged.addYvel(builder, yvel);
  RadarObservation_Abridged.addZvel(builder, zvel);
  RadarObservation_Abridged.addSenx(builder, senx);
  RadarObservation_Abridged.addSeny(builder, seny);
  RadarObservation_Abridged.addSenz(builder, senz);
  RadarObservation_Abridged.addRcs(builder, rcs);
  RadarObservation_Abridged.addRcsUnc(builder, rcsUnc);
  RadarObservation_Abridged.addOrthogonalRcs(builder, orthogonalRcs);
  RadarObservation_Abridged.addOrthogonalRcsUnc(builder, orthogonalRcsUnc);
  RadarObservation_Abridged.addSnr(builder, snr);
  RadarObservation_Abridged.addBeam(builder, beam);
  RadarObservation_Abridged.addTimingBias(builder, timingBias);
  RadarObservation_Abridged.addRawFileUri(builder, rawFileUriOffset);
  RadarObservation_Abridged.addSource(builder, sourceOffset);
  RadarObservation_Abridged.addOrigin(builder, originOffset);
  RadarObservation_Abridged.addDataMode(builder, dataMode);
  RadarObservation_Abridged.addCreatedAt(builder, createdAtOffset);
  RadarObservation_Abridged.addCreatedBy(builder, createdByOffset);
  RadarObservation_Abridged.addSenReferenceFrame(builder, senReferenceFrame);
  RadarObservation_Abridged.addDescriptor(builder, descriptorOffset);
  RadarObservation_Abridged.addOrigNetwork(builder, origNetworkOffset);
  RadarObservation_Abridged.addSourceDl(builder, sourceDlOffset);
  RadarObservation_Abridged.addType(builder, typeOffset);
  return RadarObservation_Abridged.endRadarObservation_Abridged(builder);
}

unpack(): RadarObservation_AbridgedT {
  return new RadarObservation_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.obTime(),
    this.idOnOrbit(),
    this.idSensor(),
    this.satNo(),
    this.taskId(),
    this.transactionId(),
    this.trackId(),
    this.obPosition(),
    this.origObjectId(),
    this.origSensorId(),
    this.uct(),
    this.azimuth(),
    this.azimuthUnc(),
    this.azimuthBias(),
    this.azimuthRate(),
    this.elevation(),
    this.elevationUnc(),
    this.elevationBias(),
    this.elevationRate(),
    this.range(),
    this.rangeAccel(),
    this.rangeAccelUnc(),
    this.rangeUnc(),
    this.rangeBias(),
    this.rangeRate(),
    this.rangeRateUnc(),
    this.doppler(),
    this.dopplerUnc(),
    this.ra(),
    this.declination(),
    this.x(),
    this.y(),
    this.z(),
    this.xvel(),
    this.yvel(),
    this.zvel(),
    this.senx(),
    this.seny(),
    this.senz(),
    this.rcs(),
    this.rcsUnc(),
    this.orthogonalRcs(),
    this.orthogonalRcsUnc(),
    this.snr(),
    this.beam(),
    this.timingBias(),
    this.rawFileUri(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.senReferenceFrame(),
    this.descriptor(),
    this.origNetwork(),
    this.sourceDl(),
    this.type()
  );
}


unpackTo(_o: RadarObservation_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.obTime = this.obTime();
  _o.idOnOrbit = this.idOnOrbit();
  _o.idSensor = this.idSensor();
  _o.satNo = this.satNo();
  _o.taskId = this.taskId();
  _o.transactionId = this.transactionId();
  _o.trackId = this.trackId();
  _o.obPosition = this.obPosition();
  _o.origObjectId = this.origObjectId();
  _o.origSensorId = this.origSensorId();
  _o.uct = this.uct();
  _o.azimuth = this.azimuth();
  _o.azimuthUnc = this.azimuthUnc();
  _o.azimuthBias = this.azimuthBias();
  _o.azimuthRate = this.azimuthRate();
  _o.elevation = this.elevation();
  _o.elevationUnc = this.elevationUnc();
  _o.elevationBias = this.elevationBias();
  _o.elevationRate = this.elevationRate();
  _o.range = this.range();
  _o.rangeAccel = this.rangeAccel();
  _o.rangeAccelUnc = this.rangeAccelUnc();
  _o.rangeUnc = this.rangeUnc();
  _o.rangeBias = this.rangeBias();
  _o.rangeRate = this.rangeRate();
  _o.rangeRateUnc = this.rangeRateUnc();
  _o.doppler = this.doppler();
  _o.dopplerUnc = this.dopplerUnc();
  _o.ra = this.ra();
  _o.declination = this.declination();
  _o.x = this.x();
  _o.y = this.y();
  _o.z = this.z();
  _o.xvel = this.xvel();
  _o.yvel = this.yvel();
  _o.zvel = this.zvel();
  _o.senx = this.senx();
  _o.seny = this.seny();
  _o.senz = this.senz();
  _o.rcs = this.rcs();
  _o.rcsUnc = this.rcsUnc();
  _o.orthogonalRcs = this.orthogonalRcs();
  _o.orthogonalRcsUnc = this.orthogonalRcsUnc();
  _o.snr = this.snr();
  _o.beam = this.beam();
  _o.timingBias = this.timingBias();
  _o.rawFileUri = this.rawFileUri();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.senReferenceFrame = this.senReferenceFrame();
  _o.descriptor = this.descriptor();
  _o.origNetwork = this.origNetwork();
  _o.sourceDl = this.sourceDl();
  _o.type = this.type();
}
}

export class RadarObservation_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public obTime: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public satNo: number = 0,
  public taskId: string|Uint8Array|null = null,
  public transactionId: string|Uint8Array|null = null,
  public trackId: string|Uint8Array|null = null,
  public obPosition: string|Uint8Array|null = null,
  public origObjectId: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public uct: boolean = false,
  public azimuth: number = 0.0,
  public azimuthUnc: number = 0.0,
  public azimuthBias: number = 0.0,
  public azimuthRate: number = 0.0,
  public elevation: number = 0.0,
  public elevationUnc: number = 0.0,
  public elevationBias: number = 0.0,
  public elevationRate: number = 0.0,
  public range: number = 0.0,
  public rangeAccel: number = 0.0,
  public rangeAccelUnc: number = 0.0,
  public rangeUnc: number = 0.0,
  public rangeBias: number = 0.0,
  public rangeRate: number = 0.0,
  public rangeRateUnc: number = 0.0,
  public doppler: number = 0.0,
  public dopplerUnc: number = 0.0,
  public ra: number = 0.0,
  public declination: number = 0.0,
  public x: number = 0.0,
  public y: number = 0.0,
  public z: number = 0.0,
  public xvel: number = 0.0,
  public yvel: number = 0.0,
  public zvel: number = 0.0,
  public senx: number = 0.0,
  public seny: number = 0.0,
  public senz: number = 0.0,
  public rcs: number = 0.0,
  public rcsUnc: number = 0.0,
  public orthogonalRcs: number = 0.0,
  public orthogonalRcsUnc: number = 0.0,
  public snr: number = 0.0,
  public beam: number = 0.0,
  public timingBias: number = 0.0,
  public rawFileUri: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: RadarObservation_Abridged_dataMode_Enum = RadarObservation_Abridged_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public senReferenceFrame: RadarObservation_Abridged_senReferenceFrame_Enum = RadarObservation_Abridged_senReferenceFrame_Enum.J2000,
  public descriptor: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const obTime = (this.obTime !== null ? builder.createString(this.obTime!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const taskId = (this.taskId !== null ? builder.createString(this.taskId!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const trackId = (this.trackId !== null ? builder.createString(this.trackId!) : 0);
  const obPosition = (this.obPosition !== null ? builder.createString(this.obPosition!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const rawFileUri = (this.rawFileUri !== null ? builder.createString(this.rawFileUri!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const descriptor = (this.descriptor !== null ? builder.createString(this.descriptor!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);

  return RadarObservation_Abridged.createRadarObservation_Abridged(builder,
    id,
    classificationMarking,
    obTime,
    idOnOrbit,
    idSensor,
    this.satNo,
    taskId,
    transactionId,
    trackId,
    obPosition,
    origObjectId,
    origSensorId,
    this.uct,
    this.azimuth,
    this.azimuthUnc,
    this.azimuthBias,
    this.azimuthRate,
    this.elevation,
    this.elevationUnc,
    this.elevationBias,
    this.elevationRate,
    this.range,
    this.rangeAccel,
    this.rangeAccelUnc,
    this.rangeUnc,
    this.rangeBias,
    this.rangeRate,
    this.rangeRateUnc,
    this.doppler,
    this.dopplerUnc,
    this.ra,
    this.declination,
    this.x,
    this.y,
    this.z,
    this.xvel,
    this.yvel,
    this.zvel,
    this.senx,
    this.seny,
    this.senz,
    this.rcs,
    this.rcsUnc,
    this.orthogonalRcs,
    this.orthogonalRcsUnc,
    this.snr,
    this.beam,
    this.timingBias,
    rawFileUri,
    source,
    origin,
    this.dataMode,
    createdAt,
    createdBy,
    this.senReferenceFrame,
    descriptor,
    origNetwork,
    sourceDl,
    type
  );
}
}
