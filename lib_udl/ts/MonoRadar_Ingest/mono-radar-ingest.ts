// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MonoRadar_Ingest_dataMode_Enum } from './mono-radar-ingest-data-mode-enum.js';


/**
 * /// A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.
 */
export class MonoRadar_Ingest implements flatbuffers.IUnpackableObject<MonoRadar_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MonoRadar_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMonoRadar_Ingest(bb:flatbuffers.ByteBuffer, obj?:MonoRadar_Ingest):MonoRadar_Ingest {
  return (obj || new MonoRadar_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMonoRadar_Ingest(bb:flatbuffers.ByteBuffer, obj?:MonoRadar_Ingest):MonoRadar_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MonoRadar_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MONO');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: MONORADAR-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Test target indicator.
 * Example: /// Example: TTI
 * Constraints: Minimum length = 0, Maximum length = 16
 */
tti():string|null
tti(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tti(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the radar site or station providing the data.
 * Example: /// Example: REF-SENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
senlat():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
senlon():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor altitude, in kilometers, at time of observation (ts).
 * Example: /// Example: 100.23
 * Constraints: No constraints specified.
 */
senalt():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * System Area Code.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
sac():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * System Identification Code.
 * Example: /// Example: 40
 * Constraints: No constraints specified.
 */
sic():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Aircraft identification from an aircraft equipped with a Mode S transponder.
 * Example: /// Example: TGT-ID
 * Constraints: Minimum length = 0, Maximum length = 16
 */
tgtid():string|null
tgtid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tgtid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
 * Example: /// Example: ADDR-ID
 * Constraints: Minimum length = 0, Maximum length = 16
 */
addr():string|null
addr(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
addr(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
 * Example: /// Example: CAT48
 * Constraints: Minimum length = 1, Maximum length = 16
 */
msgfmt():string|null
msgfmt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgfmt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).
 * Example: /// Example: BCN
 * Constraints: Minimum length = 1, Maximum length = 16
 */
msgtyp():string|null
msgtyp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgtyp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating military message.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
af():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating FAA/Civ message.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
faa():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating whether Special Position Indicator (SPI) present in interrogation response.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
spi():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating whether AIMS present.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
aims():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that target was detected using data from an MTI receiver.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
mti():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Number of beacon hits received on the target.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
bcnhits():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Target detection time, in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
ts():string|null
ts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
msgts():string|null
msgts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Measured slant range to target from the observing site, in km.
 * Example: /// Example: 100.23
 * Constraints: No constraints specified.
 */
rng():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
 * Example: /// Example: 100.23
 * Constraints: No constraints specified.
 */
az():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Azimuth Change Pulse count at target detection.
 * Example: /// Example: 100
 * Constraints: No constraints specified.
 */
acp():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Measured height of the target, in km. (for 3D radars).
 * Example: /// Example: 100.23
 * Constraints: No constraints specified.
 */
alt3d():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Mode-C altitude (uncorrected pressure altitude), in km.
 * Example: /// Example: 100.23
 * Constraints: No constraints specified.
 */
mc():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Status of the mode-C validity bit.
 * Example: /// Example: MCV
 * Constraints: Minimum length = 0, Maximum length = 16
 */
mcv():string|null
mcv(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mcv(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator that the mode-C response was garbled.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
mcg():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Mode-1 interrogation response (mission code).
 * Example: /// Example: MISSION_CODE
 * Constraints: Minimum length = 0, Maximum length = 128
 */
m1():string|null
m1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Status of the mode-1 validity bit.
 * Example: /// Example: M1V
 * Constraints: Minimum length = 0, Maximum length = 16
 */
m1v():string|null
m1v(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m1v(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator that the mode-1 response was garbled.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
m1g():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Mode-2 interrogation response (military identification code).
 * Example: /// Example: MILITARY_ID_CODE
 * Constraints: Minimum length = 0, Maximum length = 128
 */
m2():string|null
m2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Status of the mode-2 validity bit.
 * Example: /// Example: M2V
 * Constraints: Minimum length = 0, Maximum length = 16
 */
m2v():string|null
m2v(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m2v(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Status of the mode-2 X-Pulse response validation.
 * Example: /// Example: M2XV
 * Constraints: Minimum length = 0, Maximum length = 16
 */
m2xv():string|null
m2xv(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m2xv(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator that the mode-2 response was garbled.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
m2g():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Mode-3/A interrogation response (aircraft identification).
 * Example: /// Example: AIRCRAFT_ID
 * Constraints: Minimum length = 0, Maximum length = 128
 */
m3a():string|null
m3a(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m3a(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Status of the mode-3/A validity bit.
 * Example: /// Example: M3AV
 * Constraints: Minimum length = 0, Maximum length = 16
 */
m3av():string|null
m3av(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m3av(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator that the mode-3/A response was garbled.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
m3ag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Status of the mode-3 X-Pulse response validation.
 * Example: /// Example: M3AXV
 * Constraints: Minimum length = 0, Maximum length = 16
 */
m3axv():string|null
m3axv(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m3axv(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mode-4 interrogation response (Identification Friend/Foe).
 * Example: /// Example: ID_FRIEND
 * Constraints: Minimum length = 0, Maximum length = 24
 */
m4():string|null
m4(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m4(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Status of the mode-4 validity bit.
 * Example: /// Example: M4V
 * Constraints: Minimum length = 0, Maximum length = 16
 */
m4v():string|null
m4v(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m4v(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mode-4 D1 & D2 response status.
 * Example: /// Example: STATUS
 * Constraints: Minimum length = 0, Maximum length = 8
 */
m4d1d2():string|null
m4d1d2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m4d1d2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mode-S Comm B message data.
 * Example: /// Example: MSCOMMB
 * Constraints: Minimum length = 0, Maximum length = 16
 */
mscommb():string|null
mscommb(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mscommb(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating military emergency.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
milemrgcy():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * 7500 squawk present (hijack).
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
code7500():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * 7600 squawk present (loss of comm).
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
code7600():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * 7700 squawk present (general emergency).
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
code7700():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Target ground speed, in meters/second.
 * Example: /// Example: 30.23
 * Constraints: No constraints specified.
 */
grndspd():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Target heading, in degrees from true North at the target position.
 * Example: /// Example: 30.23
 * Constraints: No constraints specified.
 */
hdng():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.
 * Example: /// Example: 30
 * Constraints: No constraints specified.
 */
trknum():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Type of sensor(s) maintaining track.
 * Example: /// Example: RAD
 * Constraints: Minimum length = 0, Maximum length = 16
 */
rad():string|null
rad(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rad(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indication of Horizontal Maneuver detection.
 * Example: /// Example: MAH
 * Constraints: Minimum length = 0, Maximum length = 16
 */
mah():string|null
mah(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mah(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Climbing/Descending mode indicator.
 * Example: /// Example: CDM
 * Constraints: Minimum length = 0, Maximum length = 24
 */
cdm():string|null
cdm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cdm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of local 2d-cartesian [x, y] coordinates of target, in km.
 * Example: /// Example: [1.2, 2.2]
 * Constraints: No constraints specified.
 */
cartpos(index: number):string
cartpos(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
cartpos(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

cartposLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Runlength of the primary surveillance radar track, in degrees.
 * Example: /// Example: 44.23
 * Constraints: No constraints specified.
 */
psrrl():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Runlength of the secondary surveillance radar track, in degrees.
 * Example: /// Example: 44.23
 * Constraints: No constraints specified.
 */
ssrl():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Target range delta between PSR and SSR (reference PSR-SSR), in km.
 * Example: /// Example: 44.23
 * Constraints: No constraints specified.
 */
rngdelt():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
 * Example: /// Example: 44.23
 * Constraints: No constraints specified.
 */
azdelt():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Warning/Error Conditions and Target Classification.
 * Example: /// Example: ['WARNING', 'WARNING']
 * Constraints: No constraints specified.
 */
wectc(index: number):string
wectc(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
wectc(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

wectcLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
mrgrpt():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * ARTS quality.
 * Example: /// Example: QUALITY
 * Constraints: Minimum length = 0, Maximum length = 64
 */
artsqual():string|null
artsqual(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
artsqual(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Track eligibility flag.
 * Example: /// Example: ELIGIBILITY
 * Constraints: Minimum length = 0, Maximum length = 24
 */
trkelig():string|null
trkelig(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trkelig(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Target confidence.
 * Example: /// Example: CONFIDENCE
 * Constraints: Minimum length = 0, Maximum length = 24
 */
tgtconf():string|null
tgtconf(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tgtconf(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Target correlation flag.
 * Example: /// Example: CORRELATION
 * Constraints: Minimum length = 0, Maximum length = 16
 */
tgtcorr():string|null
tgtcorr(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tgtcorr(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.
 * Example: /// Example: 0.4
 * Constraints: No constraints specified.
 */
tis():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['TAG1', 'TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():MonoRadar_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MonoRadar_Ingest_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startMonoRadar_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(73);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addTti(builder:flatbuffers.Builder, ttiOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, ttiOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idSensorOffset, 0);
}

static addSenlat(builder:flatbuffers.Builder, senlat:number) {
  builder.addFieldFloat64(4, senlat, 0.0);
}

static addSenlon(builder:flatbuffers.Builder, senlon:number) {
  builder.addFieldFloat64(5, senlon, 0.0);
}

static addSenalt(builder:flatbuffers.Builder, senalt:number) {
  builder.addFieldFloat64(6, senalt, 0.0);
}

static addSac(builder:flatbuffers.Builder, sac:number) {
  builder.addFieldInt32(7, sac, 0);
}

static addSic(builder:flatbuffers.Builder, sic:number) {
  builder.addFieldInt32(8, sic, 0);
}

static addTgtid(builder:flatbuffers.Builder, tgtidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, tgtidOffset, 0);
}

static addAddr(builder:flatbuffers.Builder, addrOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, addrOffset, 0);
}

static addMsgfmt(builder:flatbuffers.Builder, msgfmtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, msgfmtOffset, 0);
}

static addMsgtyp(builder:flatbuffers.Builder, msgtypOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, msgtypOffset, 0);
}

static addAf(builder:flatbuffers.Builder, af:boolean) {
  builder.addFieldInt8(13, +af, +false);
}

static addFaa(builder:flatbuffers.Builder, faa:boolean) {
  builder.addFieldInt8(14, +faa, +false);
}

static addSpi(builder:flatbuffers.Builder, spi:boolean) {
  builder.addFieldInt8(15, +spi, +false);
}

static addAims(builder:flatbuffers.Builder, aims:boolean) {
  builder.addFieldInt8(16, +aims, +false);
}

static addMti(builder:flatbuffers.Builder, mti:boolean) {
  builder.addFieldInt8(17, +mti, +false);
}

static addBcnhits(builder:flatbuffers.Builder, bcnhits:number) {
  builder.addFieldInt32(18, bcnhits, 0);
}

static addTs(builder:flatbuffers.Builder, tsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, tsOffset, 0);
}

static addMsgts(builder:flatbuffers.Builder, msgtsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, msgtsOffset, 0);
}

static addRng(builder:flatbuffers.Builder, rng:number) {
  builder.addFieldFloat64(21, rng, 0.0);
}

static addAz(builder:flatbuffers.Builder, az:number) {
  builder.addFieldFloat64(22, az, 0.0);
}

static addAcp(builder:flatbuffers.Builder, acp:number) {
  builder.addFieldInt32(23, acp, 0);
}

static addAlt3d(builder:flatbuffers.Builder, alt3d:number) {
  builder.addFieldFloat64(24, alt3d, 0.0);
}

static addMc(builder:flatbuffers.Builder, mc:number) {
  builder.addFieldFloat64(25, mc, 0.0);
}

static addMcv(builder:flatbuffers.Builder, mcvOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, mcvOffset, 0);
}

static addMcg(builder:flatbuffers.Builder, mcg:boolean) {
  builder.addFieldInt8(27, +mcg, +false);
}

static addM1(builder:flatbuffers.Builder, m1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(28, m1Offset, 0);
}

static addM1v(builder:flatbuffers.Builder, m1vOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, m1vOffset, 0);
}

static addM1g(builder:flatbuffers.Builder, m1g:boolean) {
  builder.addFieldInt8(30, +m1g, +false);
}

static addM2(builder:flatbuffers.Builder, m2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(31, m2Offset, 0);
}

static addM2v(builder:flatbuffers.Builder, m2vOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, m2vOffset, 0);
}

static addM2xv(builder:flatbuffers.Builder, m2xvOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, m2xvOffset, 0);
}

static addM2g(builder:flatbuffers.Builder, m2g:boolean) {
  builder.addFieldInt8(34, +m2g, +false);
}

static addM3a(builder:flatbuffers.Builder, m3aOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, m3aOffset, 0);
}

static addM3av(builder:flatbuffers.Builder, m3avOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, m3avOffset, 0);
}

static addM3ag(builder:flatbuffers.Builder, m3ag:boolean) {
  builder.addFieldInt8(37, +m3ag, +false);
}

static addM3axv(builder:flatbuffers.Builder, m3axvOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, m3axvOffset, 0);
}

static addM4(builder:flatbuffers.Builder, m4Offset:flatbuffers.Offset) {
  builder.addFieldOffset(39, m4Offset, 0);
}

static addM4v(builder:flatbuffers.Builder, m4vOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, m4vOffset, 0);
}

static addM4d1d2(builder:flatbuffers.Builder, m4d1d2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(41, m4d1d2Offset, 0);
}

static addMscommb(builder:flatbuffers.Builder, mscommbOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, mscommbOffset, 0);
}

static addMilemrgcy(builder:flatbuffers.Builder, milemrgcy:boolean) {
  builder.addFieldInt8(43, +milemrgcy, +false);
}

static addCode7500(builder:flatbuffers.Builder, code7500:boolean) {
  builder.addFieldInt8(44, +code7500, +false);
}

static addCode7600(builder:flatbuffers.Builder, code7600:boolean) {
  builder.addFieldInt8(45, +code7600, +false);
}

static addCode7700(builder:flatbuffers.Builder, code7700:boolean) {
  builder.addFieldInt8(46, +code7700, +false);
}

static addGrndspd(builder:flatbuffers.Builder, grndspd:number) {
  builder.addFieldFloat64(47, grndspd, 0.0);
}

static addHdng(builder:flatbuffers.Builder, hdng:number) {
  builder.addFieldFloat64(48, hdng, 0.0);
}

static addTrknum(builder:flatbuffers.Builder, trknum:number) {
  builder.addFieldInt32(49, trknum, 0);
}

static addRad(builder:flatbuffers.Builder, radOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, radOffset, 0);
}

static addMah(builder:flatbuffers.Builder, mahOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, mahOffset, 0);
}

static addCdm(builder:flatbuffers.Builder, cdmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, cdmOffset, 0);
}

static addCartpos(builder:flatbuffers.Builder, cartposOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, cartposOffset, 0);
}

static createCartposVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCartposVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPsrrl(builder:flatbuffers.Builder, psrrl:number) {
  builder.addFieldFloat64(54, psrrl, 0.0);
}

static addSsrl(builder:flatbuffers.Builder, ssrl:number) {
  builder.addFieldFloat64(55, ssrl, 0.0);
}

static addRngdelt(builder:flatbuffers.Builder, rngdelt:number) {
  builder.addFieldFloat64(56, rngdelt, 0.0);
}

static addAzdelt(builder:flatbuffers.Builder, azdelt:number) {
  builder.addFieldFloat64(57, azdelt, 0.0);
}

static addWectc(builder:flatbuffers.Builder, wectcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, wectcOffset, 0);
}

static createWectcVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWectcVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMrgrpt(builder:flatbuffers.Builder, mrgrpt:boolean) {
  builder.addFieldInt8(59, +mrgrpt, +false);
}

static addArtsqual(builder:flatbuffers.Builder, artsqualOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, artsqualOffset, 0);
}

static addTrkelig(builder:flatbuffers.Builder, trkeligOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, trkeligOffset, 0);
}

static addTgtconf(builder:flatbuffers.Builder, tgtconfOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, tgtconfOffset, 0);
}

static addTgtcorr(builder:flatbuffers.Builder, tgtcorrOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, tgtcorrOffset, 0);
}

static addTis(builder:flatbuffers.Builder, tis:number) {
  builder.addFieldFloat64(64, tis, 0.0);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, origSensorIdOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(68, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:MonoRadar_Ingest_dataMode_Enum) {
  builder.addFieldInt8(69, dataMode, MonoRadar_Ingest_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(70, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(71, createdByOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(72, origNetworkOffset, 0);
}

static endMonoRadar_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMonoRadar_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MONO');
}

static finishSizePrefixedMonoRadar_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MONO', true);
}

static createMonoRadar_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, ttiOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, senlat:number, senlon:number, senalt:number, sac:number, sic:number, tgtidOffset:flatbuffers.Offset, addrOffset:flatbuffers.Offset, msgfmtOffset:flatbuffers.Offset, msgtypOffset:flatbuffers.Offset, af:boolean, faa:boolean, spi:boolean, aims:boolean, mti:boolean, bcnhits:number, tsOffset:flatbuffers.Offset, msgtsOffset:flatbuffers.Offset, rng:number, az:number, acp:number, alt3d:number, mc:number, mcvOffset:flatbuffers.Offset, mcg:boolean, m1Offset:flatbuffers.Offset, m1vOffset:flatbuffers.Offset, m1g:boolean, m2Offset:flatbuffers.Offset, m2vOffset:flatbuffers.Offset, m2xvOffset:flatbuffers.Offset, m2g:boolean, m3aOffset:flatbuffers.Offset, m3avOffset:flatbuffers.Offset, m3ag:boolean, m3axvOffset:flatbuffers.Offset, m4Offset:flatbuffers.Offset, m4vOffset:flatbuffers.Offset, m4d1d2Offset:flatbuffers.Offset, mscommbOffset:flatbuffers.Offset, milemrgcy:boolean, code7500:boolean, code7600:boolean, code7700:boolean, grndspd:number, hdng:number, trknum:number, radOffset:flatbuffers.Offset, mahOffset:flatbuffers.Offset, cdmOffset:flatbuffers.Offset, cartposOffset:flatbuffers.Offset, psrrl:number, ssrl:number, rngdelt:number, azdelt:number, wectcOffset:flatbuffers.Offset, mrgrpt:boolean, artsqualOffset:flatbuffers.Offset, trkeligOffset:flatbuffers.Offset, tgtconfOffset:flatbuffers.Offset, tgtcorrOffset:flatbuffers.Offset, tis:number, tagsOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:MonoRadar_Ingest_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  MonoRadar_Ingest.startMonoRadar_Ingest(builder);
  MonoRadar_Ingest.addId(builder, idOffset);
  MonoRadar_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  MonoRadar_Ingest.addTti(builder, ttiOffset);
  MonoRadar_Ingest.addIdSensor(builder, idSensorOffset);
  MonoRadar_Ingest.addSenlat(builder, senlat);
  MonoRadar_Ingest.addSenlon(builder, senlon);
  MonoRadar_Ingest.addSenalt(builder, senalt);
  MonoRadar_Ingest.addSac(builder, sac);
  MonoRadar_Ingest.addSic(builder, sic);
  MonoRadar_Ingest.addTgtid(builder, tgtidOffset);
  MonoRadar_Ingest.addAddr(builder, addrOffset);
  MonoRadar_Ingest.addMsgfmt(builder, msgfmtOffset);
  MonoRadar_Ingest.addMsgtyp(builder, msgtypOffset);
  MonoRadar_Ingest.addAf(builder, af);
  MonoRadar_Ingest.addFaa(builder, faa);
  MonoRadar_Ingest.addSpi(builder, spi);
  MonoRadar_Ingest.addAims(builder, aims);
  MonoRadar_Ingest.addMti(builder, mti);
  MonoRadar_Ingest.addBcnhits(builder, bcnhits);
  MonoRadar_Ingest.addTs(builder, tsOffset);
  MonoRadar_Ingest.addMsgts(builder, msgtsOffset);
  MonoRadar_Ingest.addRng(builder, rng);
  MonoRadar_Ingest.addAz(builder, az);
  MonoRadar_Ingest.addAcp(builder, acp);
  MonoRadar_Ingest.addAlt3d(builder, alt3d);
  MonoRadar_Ingest.addMc(builder, mc);
  MonoRadar_Ingest.addMcv(builder, mcvOffset);
  MonoRadar_Ingest.addMcg(builder, mcg);
  MonoRadar_Ingest.addM1(builder, m1Offset);
  MonoRadar_Ingest.addM1v(builder, m1vOffset);
  MonoRadar_Ingest.addM1g(builder, m1g);
  MonoRadar_Ingest.addM2(builder, m2Offset);
  MonoRadar_Ingest.addM2v(builder, m2vOffset);
  MonoRadar_Ingest.addM2xv(builder, m2xvOffset);
  MonoRadar_Ingest.addM2g(builder, m2g);
  MonoRadar_Ingest.addM3a(builder, m3aOffset);
  MonoRadar_Ingest.addM3av(builder, m3avOffset);
  MonoRadar_Ingest.addM3ag(builder, m3ag);
  MonoRadar_Ingest.addM3axv(builder, m3axvOffset);
  MonoRadar_Ingest.addM4(builder, m4Offset);
  MonoRadar_Ingest.addM4v(builder, m4vOffset);
  MonoRadar_Ingest.addM4d1d2(builder, m4d1d2Offset);
  MonoRadar_Ingest.addMscommb(builder, mscommbOffset);
  MonoRadar_Ingest.addMilemrgcy(builder, milemrgcy);
  MonoRadar_Ingest.addCode7500(builder, code7500);
  MonoRadar_Ingest.addCode7600(builder, code7600);
  MonoRadar_Ingest.addCode7700(builder, code7700);
  MonoRadar_Ingest.addGrndspd(builder, grndspd);
  MonoRadar_Ingest.addHdng(builder, hdng);
  MonoRadar_Ingest.addTrknum(builder, trknum);
  MonoRadar_Ingest.addRad(builder, radOffset);
  MonoRadar_Ingest.addMah(builder, mahOffset);
  MonoRadar_Ingest.addCdm(builder, cdmOffset);
  MonoRadar_Ingest.addCartpos(builder, cartposOffset);
  MonoRadar_Ingest.addPsrrl(builder, psrrl);
  MonoRadar_Ingest.addSsrl(builder, ssrl);
  MonoRadar_Ingest.addRngdelt(builder, rngdelt);
  MonoRadar_Ingest.addAzdelt(builder, azdelt);
  MonoRadar_Ingest.addWectc(builder, wectcOffset);
  MonoRadar_Ingest.addMrgrpt(builder, mrgrpt);
  MonoRadar_Ingest.addArtsqual(builder, artsqualOffset);
  MonoRadar_Ingest.addTrkelig(builder, trkeligOffset);
  MonoRadar_Ingest.addTgtconf(builder, tgtconfOffset);
  MonoRadar_Ingest.addTgtcorr(builder, tgtcorrOffset);
  MonoRadar_Ingest.addTis(builder, tis);
  MonoRadar_Ingest.addTags(builder, tagsOffset);
  MonoRadar_Ingest.addOrigSensorId(builder, origSensorIdOffset);
  MonoRadar_Ingest.addSource(builder, sourceOffset);
  MonoRadar_Ingest.addOrigin(builder, originOffset);
  MonoRadar_Ingest.addDataMode(builder, dataMode);
  MonoRadar_Ingest.addCreatedAt(builder, createdAtOffset);
  MonoRadar_Ingest.addCreatedBy(builder, createdByOffset);
  MonoRadar_Ingest.addOrigNetwork(builder, origNetworkOffset);
  return MonoRadar_Ingest.endMonoRadar_Ingest(builder);
}

unpack(): MonoRadar_IngestT {
  return new MonoRadar_IngestT(
    this.id(),
    this.classificationMarking(),
    this.tti(),
    this.idSensor(),
    this.senlat(),
    this.senlon(),
    this.senalt(),
    this.sac(),
    this.sic(),
    this.tgtid(),
    this.addr(),
    this.msgfmt(),
    this.msgtyp(),
    this.af(),
    this.faa(),
    this.spi(),
    this.aims(),
    this.mti(),
    this.bcnhits(),
    this.ts(),
    this.msgts(),
    this.rng(),
    this.az(),
    this.acp(),
    this.alt3d(),
    this.mc(),
    this.mcv(),
    this.mcg(),
    this.m1(),
    this.m1v(),
    this.m1g(),
    this.m2(),
    this.m2v(),
    this.m2xv(),
    this.m2g(),
    this.m3a(),
    this.m3av(),
    this.m3ag(),
    this.m3axv(),
    this.m4(),
    this.m4v(),
    this.m4d1d2(),
    this.mscommb(),
    this.milemrgcy(),
    this.code7500(),
    this.code7600(),
    this.code7700(),
    this.grndspd(),
    this.hdng(),
    this.trknum(),
    this.rad(),
    this.mah(),
    this.cdm(),
    this.bb!.createScalarList<string>(this.cartpos.bind(this), this.cartpos_Length()),
    this.psrrl(),
    this.ssrl(),
    this.rngdelt(),
    this.azdelt(),
    this.bb!.createScalarList<string>(this.wectc.bind(this), this.wectc_Length()),
    this.mrgrpt(),
    this.artsqual(),
    this.trkelig(),
    this.tgtconf(),
    this.tgtcorr(),
    this.tis(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length()),
    this.origSensorId(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.origNetwork()
  );
}


unpackTo(_o: MonoRadar_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.tti = this.tti();
  _o.idSensor = this.idSensor();
  _o.senlat = this.senlat();
  _o.senlon = this.senlon();
  _o.senalt = this.senalt();
  _o.sac = this.sac();
  _o.sic = this.sic();
  _o.tgtid = this.tgtid();
  _o.addr = this.addr();
  _o.msgfmt = this.msgfmt();
  _o.msgtyp = this.msgtyp();
  _o.af = this.af();
  _o.faa = this.faa();
  _o.spi = this.spi();
  _o.aims = this.aims();
  _o.mti = this.mti();
  _o.bcnhits = this.bcnhits();
  _o.ts = this.ts();
  _o.msgts = this.msgts();
  _o.rng = this.rng();
  _o.az = this.az();
  _o.acp = this.acp();
  _o.alt3d = this.alt3d();
  _o.mc = this.mc();
  _o.mcv = this.mcv();
  _o.mcg = this.mcg();
  _o.m1 = this.m1();
  _o.m1v = this.m1v();
  _o.m1g = this.m1g();
  _o.m2 = this.m2();
  _o.m2v = this.m2v();
  _o.m2xv = this.m2xv();
  _o.m2g = this.m2g();
  _o.m3a = this.m3a();
  _o.m3av = this.m3av();
  _o.m3ag = this.m3ag();
  _o.m3axv = this.m3axv();
  _o.m4 = this.m4();
  _o.m4v = this.m4v();
  _o.m4d1d2 = this.m4d1d2();
  _o.mscommb = this.mscommb();
  _o.milemrgcy = this.milemrgcy();
  _o.code7500 = this.code7500();
  _o.code7600 = this.code7600();
  _o.code7700 = this.code7700();
  _o.grndspd = this.grndspd();
  _o.hdng = this.hdng();
  _o.trknum = this.trknum();
  _o.rad = this.rad();
  _o.mah = this.mah();
  _o.cdm = this.cdm();
  _o.cartpos = this.bb!.createScalarList<string>(this.cartpos.bind(this), this.cartpos_Length());
  _o.psrrl = this.psrrl();
  _o.ssrl = this.ssrl();
  _o.rngdelt = this.rngdelt();
  _o.azdelt = this.azdelt();
  _o.wectc = this.bb!.createScalarList<string>(this.wectc.bind(this), this.wectc_Length());
  _o.mrgrpt = this.mrgrpt();
  _o.artsqual = this.artsqual();
  _o.trkelig = this.trkelig();
  _o.tgtconf = this.tgtconf();
  _o.tgtcorr = this.tgtcorr();
  _o.tis = this.tis();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length());
  _o.origSensorId = this.origSensorId();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.origNetwork = this.origNetwork();
}
}

export class MonoRadar_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public tti: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public senlat: number = 0.0,
  public senlon: number = 0.0,
  public senalt: number = 0.0,
  public sac: number = 0,
  public sic: number = 0,
  public tgtid: string|Uint8Array|null = null,
  public addr: string|Uint8Array|null = null,
  public msgfmt: string|Uint8Array|null = null,
  public msgtyp: string|Uint8Array|null = null,
  public af: boolean = false,
  public faa: boolean = false,
  public spi: boolean = false,
  public aims: boolean = false,
  public mti: boolean = false,
  public bcnhits: number = 0,
  public ts: string|Uint8Array|null = null,
  public msgts: string|Uint8Array|null = null,
  public rng: number = 0.0,
  public az: number = 0.0,
  public acp: number = 0,
  public alt3d: number = 0.0,
  public mc: number = 0.0,
  public mcv: string|Uint8Array|null = null,
  public mcg: boolean = false,
  public m1: string|Uint8Array|null = null,
  public m1v: string|Uint8Array|null = null,
  public m1g: boolean = false,
  public m2: string|Uint8Array|null = null,
  public m2v: string|Uint8Array|null = null,
  public m2xv: string|Uint8Array|null = null,
  public m2g: boolean = false,
  public m3a: string|Uint8Array|null = null,
  public m3av: string|Uint8Array|null = null,
  public m3ag: boolean = false,
  public m3axv: string|Uint8Array|null = null,
  public m4: string|Uint8Array|null = null,
  public m4v: string|Uint8Array|null = null,
  public m4d1d2: string|Uint8Array|null = null,
  public mscommb: string|Uint8Array|null = null,
  public milemrgcy: boolean = false,
  public code7500: boolean = false,
  public code7600: boolean = false,
  public code7700: boolean = false,
  public grndspd: number = 0.0,
  public hdng: number = 0.0,
  public trknum: number = 0,
  public rad: string|Uint8Array|null = null,
  public mah: string|Uint8Array|null = null,
  public cdm: string|Uint8Array|null = null,
  public cartpos: (string)[] = [],
  public psrrl: number = 0.0,
  public ssrl: number = 0.0,
  public rngdelt: number = 0.0,
  public azdelt: number = 0.0,
  public wectc: (string)[] = [],
  public mrgrpt: boolean = false,
  public artsqual: string|Uint8Array|null = null,
  public trkelig: string|Uint8Array|null = null,
  public tgtconf: string|Uint8Array|null = null,
  public tgtcorr: string|Uint8Array|null = null,
  public tis: number = 0.0,
  public tags: (string)[] = [],
  public origSensorId: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: MonoRadar_Ingest_dataMode_Enum = MonoRadar_Ingest_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const tti = (this.tti !== null ? builder.createString(this.tti!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const tgtid = (this.tgtid !== null ? builder.createString(this.tgtid!) : 0);
  const addr = (this.addr !== null ? builder.createString(this.addr!) : 0);
  const msgfmt = (this.msgfmt !== null ? builder.createString(this.msgfmt!) : 0);
  const msgtyp = (this.msgtyp !== null ? builder.createString(this.msgtyp!) : 0);
  const ts = (this.ts !== null ? builder.createString(this.ts!) : 0);
  const msgts = (this.msgts !== null ? builder.createString(this.msgts!) : 0);
  const mcv = (this.mcv !== null ? builder.createString(this.mcv!) : 0);
  const m1 = (this.m1 !== null ? builder.createString(this.m1!) : 0);
  const m1v = (this.m1v !== null ? builder.createString(this.m1v!) : 0);
  const m2 = (this.m2 !== null ? builder.createString(this.m2!) : 0);
  const m2v = (this.m2v !== null ? builder.createString(this.m2v!) : 0);
  const m2xv = (this.m2xv !== null ? builder.createString(this.m2xv!) : 0);
  const m3a = (this.m3a !== null ? builder.createString(this.m3a!) : 0);
  const m3av = (this.m3av !== null ? builder.createString(this.m3av!) : 0);
  const m3axv = (this.m3axv !== null ? builder.createString(this.m3axv!) : 0);
  const m4 = (this.m4 !== null ? builder.createString(this.m4!) : 0);
  const m4v = (this.m4v !== null ? builder.createString(this.m4v!) : 0);
  const m4d1d2 = (this.m4d1d2 !== null ? builder.createString(this.m4d1d2!) : 0);
  const mscommb = (this.mscommb !== null ? builder.createString(this.mscommb!) : 0);
  const rad = (this.rad !== null ? builder.createString(this.rad!) : 0);
  const mah = (this.mah !== null ? builder.createString(this.mah!) : 0);
  const cdm = (this.cdm !== null ? builder.createString(this.cdm!) : 0);
  const cartpos = MonoRadar_Ingest.createCartposVector(builder, builder.createObjectOffsetList(this.cartpos));
  const wectc = MonoRadar_Ingest.createWectcVector(builder, builder.createObjectOffsetList(this.wectc));
  const artsqual = (this.artsqual !== null ? builder.createString(this.artsqual!) : 0);
  const trkelig = (this.trkelig !== null ? builder.createString(this.trkelig!) : 0);
  const tgtconf = (this.tgtconf !== null ? builder.createString(this.tgtconf!) : 0);
  const tgtcorr = (this.tgtcorr !== null ? builder.createString(this.tgtcorr!) : 0);
  const tags = MonoRadar_Ingest.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return MonoRadar_Ingest.createMonoRadar_Ingest(builder,
    id,
    classificationMarking,
    tti,
    idSensor,
    this.senlat,
    this.senlon,
    this.senalt,
    this.sac,
    this.sic,
    tgtid,
    addr,
    msgfmt,
    msgtyp,
    this.af,
    this.faa,
    this.spi,
    this.aims,
    this.mti,
    this.bcnhits,
    ts,
    msgts,
    this.rng,
    this.az,
    this.acp,
    this.alt3d,
    this.mc,
    mcv,
    this.mcg,
    m1,
    m1v,
    this.m1g,
    m2,
    m2v,
    m2xv,
    this.m2g,
    m3a,
    m3av,
    this.m3ag,
    m3axv,
    m4,
    m4v,
    m4d1d2,
    mscommb,
    this.milemrgcy,
    this.code7500,
    this.code7600,
    this.code7700,
    this.grndspd,
    this.hdng,
    this.trknum,
    rad,
    mah,
    cdm,
    cartpos,
    this.psrrl,
    this.ssrl,
    this.rngdelt,
    this.azdelt,
    wectc,
    this.mrgrpt,
    artsqual,
    trkelig,
    tgtconf,
    tgtcorr,
    this.tis,
    tags,
    origSensorId,
    source,
    origin,
    this.dataMode,
    createdAt,
    createdBy,
    origNetwork
  );
}
}
