// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Tasking collection periods.
 */
export class ISRCollectionPeriods_Abridged implements flatbuffers.IUnpackableObject<ISRCollectionPeriods_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ISRCollectionPeriods_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsISRCollectionPeriods_Abridged(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionPeriods_Abridged):ISRCollectionPeriods_Abridged {
  return (obj || new ISRCollectionPeriods_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsISRCollectionPeriods_Abridged(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionPeriods_Abridged):ISRCollectionPeriods_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ISRCollectionPeriods_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ISRC');
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
planned():string|null
planned(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
planned(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Actual start and stop for the collection.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
actual(index: number):string
actual(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
actual(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

actualLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startISRCollectionPeriods_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPlanned(builder:flatbuffers.Builder, plannedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, plannedOffset, 0);
}

static addActual(builder:flatbuffers.Builder, actualOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, actualOffset, 0);
}

static createActualVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startActualVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endISRCollectionPeriods_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishISRCollectionPeriods_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC');
}

static finishSizePrefixedISRCollectionPeriods_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC', true);
}

static createISRCollectionPeriods_Abridged(builder:flatbuffers.Builder, plannedOffset:flatbuffers.Offset, actualOffset:flatbuffers.Offset):flatbuffers.Offset {
  ISRCollectionPeriods_Abridged.startISRCollectionPeriods_Abridged(builder);
  ISRCollectionPeriods_Abridged.addPlanned(builder, plannedOffset);
  ISRCollectionPeriods_Abridged.addActual(builder, actualOffset);
  return ISRCollectionPeriods_Abridged.endISRCollectionPeriods_Abridged(builder);
}

unpack(): ISRCollectionPeriods_AbridgedT {
  return new ISRCollectionPeriods_AbridgedT(
    this.planned(),
    this.bb!.createScalarList<string>(this.actual.bind(this), this.actualLength())
  );
}


unpackTo(_o: ISRCollectionPeriods_AbridgedT): void {
  _o.planned = this.planned();
  _o.actual = this.bb!.createScalarList<string>(this.actual.bind(this), this.actualLength());
}
}

export class ISRCollectionPeriods_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public planned: string|Uint8Array|null = null,
  public actual: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const planned = (this.planned !== null ? builder.createString(this.planned!) : 0);
  const actual = ISRCollectionPeriods_Abridged.createActualVector(builder, builder.createObjectOffsetList(this.actual));

  return ISRCollectionPeriods_Abridged.createISRCollectionPeriods_Abridged(builder,
    planned,
    actual
  );
}
}
