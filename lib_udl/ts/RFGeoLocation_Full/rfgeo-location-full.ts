// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RFGeoLocation_Full_dataMode_Enum } from './rfgeo-location-full-data-mode-enum.js';


/**
 * /// Model representation of geolocation data for a radio frequency (RF) signal or emitter.
 */
export class RFGeoLocation_Full implements flatbuffers.IUnpackableObject<RFGeoLocation_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RFGeoLocation_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRFGeoLocation_Full(bb:flatbuffers.ByteBuffer, obj?:RFGeoLocation_Full):RFGeoLocation_Full {
  return (obj || new RFGeoLocation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRFGeoLocation_Full(bb:flatbuffers.ByteBuffer, obj?:RFGeoLocation_Full):RFGeoLocation_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RFGeoLocation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('RFGE');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The order identifier for this RF Geo Location data set.
 * Example: /// Example: 155240
 * Constraints: Minimum length = 1, Maximum length = 36
 */
orderId():string|null
orderId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
orderId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2024-05-31T23:06:18.123456Z
 * Constraints: No constraints specified.
 */
createdTs():string|null
createdTs(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdTs(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2024-05-31T21:16:58.123456Z
 * Constraints: No constraints specified.
 */
receivedTs():string|null
receivedTs(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receivedTs(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2024-05-31T21:12:12.123456Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2024-05-31T21:16:15.123456Z
 * Constraints: No constraints specified.
 */
endTime():string|null
endTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.
 * Example: /// Example: HawkEye360-7
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the target on-orbit object.
 * Example: /// Example: 101
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the satellite constellation.
 * Example: /// Example: HawkEye360
 * Constraints: Minimum length = 0, Maximum length = 36
 */
constellation():string|null
constellation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
constellation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the signal of interest.
 * Example: /// Example: GPS
 * Constraints: Minimum length = 0, Maximum length = 36
 */
signalOfInterest():string|null
signalOfInterest(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
signalOfInterest(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
 * Example: /// Example: RFEMITTER-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idRfemitter():string|null
idRfemitter(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idRfemitter(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.
 * Example: /// Example: ORIGRFEMITTER-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origRfemitterId():string|null
origRfemitterId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origRfemitterId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The count of single-burst observations used for this geolocation observation.
 * Example: /// Example: 17
 * Constraints: No constraints specified.
 */
numBursts():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The minimum detected frequency in megahertz.
 * Example: /// Example: 1575.42
 * Constraints: No constraints specified.
 */
minFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The maximum detected frequency in megahertz.
 * Example: /// Example: 1575.42
 * Constraints: No constraints specified.
 */
maxFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The detected signal frequency in megahertz.
 * Example: /// Example: 1575.42
 * Constraints: No constraints specified.
 */
centerFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 41.172
 * Constraints: No constraints specified.
 */
detectLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 37.019
 * Constraints: No constraints specified.
 */
detectLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The altitude relative to WGS-84 ellipsoid, in meters.
 * Example: /// Example: 123.456
 * Constraints: No constraints specified.
 */
detectAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.
 * Example: /// Example: 9435.896
 * Constraints: No constraints specified.
 */
confSemiMajor():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.
 * Example: /// Example: 2751.929
 * Constraints: No constraints specified.
 */
confSemiMinor():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.
 * Example: /// Example: 89.852
 * Constraints: No constraints specified.
 */
confOrientation():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.
 * Example: /// Example: 81577480.056
 * Constraints: No constraints specified.
 */
confArea():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Type of region as projected on the ground.
 * Example: /// Example: MultiPolygon
 * Constraints: Minimum length = 0, Maximum length = 128
 */
atype():string|null
atype(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atype(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
 * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
 * Constraints: No constraints specified.
 */
agjson():string|null
agjson(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
agjson(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
 * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
 * Constraints: No constraints specified.
 */
atext():string|null
atext(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atext(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
 * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
 * Constraints: No constraints specified.
 */
area():string|null
area(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
area(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of dimensions of the geometry depicted by region.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
andims():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Geographical spatial_ref_sys for region.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
asrid():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional external identifier referencing the entity used in the calculation of the geolocation.
 * Example: /// Example: 80fd25a8-8b41-448d-888a-91c9dfcd940b
 * Constraints: Minimum length = 0, Maximum length = 36
 */
passGroupId():string|null
passGroupId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
passGroupId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The RFGeo algorithm type and version used in geolocation calculations.
 * Example: /// Example: v1.0-3-gps_nb_3ball
 * Constraints: Minimum length = 0, Maximum length = 36
 */
algVersion():string|null
algVersion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
algVersion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: 780180925
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalId():string|null
externalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['TAG1', 'TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():RFGeoLocation_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : RFGeoLocation_Full_dataMode_Enum.REAL;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
onOrbit():string|null
onOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
onOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRFGeoLocation_Full(builder:flatbuffers.Builder) {
  builder.startObject(43);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addOrderId(builder:flatbuffers.Builder, orderIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, orderIdOffset, 0);
}

static addCreatedTs(builder:flatbuffers.Builder, createdTsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, createdTsOffset, 0);
}

static addReceivedTs(builder:flatbuffers.Builder, receivedTsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, receivedTsOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, startTimeOffset, 0);
}

static addEndTime(builder:flatbuffers.Builder, endTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, endTimeOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(8, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, origObjectIdOffset, 0);
}

static addConstellation(builder:flatbuffers.Builder, constellationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, constellationOffset, 0);
}

static addSignalOfInterest(builder:flatbuffers.Builder, signalOfInterestOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, signalOfInterestOffset, 0);
}

static addIdRfemitter(builder:flatbuffers.Builder, idRfemitterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, idRfemitterOffset, 0);
}

static addOrigRfemitterId(builder:flatbuffers.Builder, origRfemitterIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, origRfemitterIdOffset, 0);
}

static addNumBursts(builder:flatbuffers.Builder, numBursts:number) {
  builder.addFieldInt32(14, numBursts, 0);
}

static addMinFreq(builder:flatbuffers.Builder, minFreq:number) {
  builder.addFieldFloat64(15, minFreq, 0.0);
}

static addMaxFreq(builder:flatbuffers.Builder, maxFreq:number) {
  builder.addFieldFloat64(16, maxFreq, 0.0);
}

static addCenterFreq(builder:flatbuffers.Builder, centerFreq:number) {
  builder.addFieldFloat64(17, centerFreq, 0.0);
}

static addDetectLat(builder:flatbuffers.Builder, detectLat:number) {
  builder.addFieldFloat64(18, detectLat, 0.0);
}

static addDetectLon(builder:flatbuffers.Builder, detectLon:number) {
  builder.addFieldFloat64(19, detectLon, 0.0);
}

static addDetectAlt(builder:flatbuffers.Builder, detectAlt:number) {
  builder.addFieldFloat64(20, detectAlt, 0.0);
}

static addConfSemiMajor(builder:flatbuffers.Builder, confSemiMajor:number) {
  builder.addFieldFloat64(21, confSemiMajor, 0.0);
}

static addConfSemiMinor(builder:flatbuffers.Builder, confSemiMinor:number) {
  builder.addFieldFloat64(22, confSemiMinor, 0.0);
}

static addConfOrientation(builder:flatbuffers.Builder, confOrientation:number) {
  builder.addFieldFloat64(23, confOrientation, 0.0);
}

static addConfArea(builder:flatbuffers.Builder, confArea:number) {
  builder.addFieldFloat64(24, confArea, 0.0);
}

static addAtype(builder:flatbuffers.Builder, atypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, atypeOffset, 0);
}

static addAgjson(builder:flatbuffers.Builder, agjsonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, agjsonOffset, 0);
}

static addAtext(builder:flatbuffers.Builder, atextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, atextOffset, 0);
}

static addArea(builder:flatbuffers.Builder, areaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, areaOffset, 0);
}

static addAndims(builder:flatbuffers.Builder, andims:number) {
  builder.addFieldInt32(29, andims, 0);
}

static addAsrid(builder:flatbuffers.Builder, asrid:number) {
  builder.addFieldInt32(30, asrid, 0);
}

static addPassGroupId(builder:flatbuffers.Builder, passGroupIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, passGroupIdOffset, 0);
}

static addAlgVersion(builder:flatbuffers.Builder, algVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, algVersionOffset, 0);
}

static addExternalId(builder:flatbuffers.Builder, externalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, externalIdOffset, 0);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, origNetworkOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, sourceDlOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:RFGeoLocation_Full_dataMode_Enum) {
  builder.addFieldInt8(41, dataMode, RFGeoLocation_Full_dataMode_Enum.REAL);
}

static addOnOrbit(builder:flatbuffers.Builder, onOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, onOrbitOffset, 0);
}

static endRFGeoLocation_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishRFGeoLocation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RFGE');
}

static finishSizePrefixedRFGeoLocation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RFGE', true);
}

static createRFGeoLocation_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, orderIdOffset:flatbuffers.Offset, createdTsOffset:flatbuffers.Offset, receivedTsOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, endTimeOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, constellationOffset:flatbuffers.Offset, signalOfInterestOffset:flatbuffers.Offset, idRfemitterOffset:flatbuffers.Offset, origRfemitterIdOffset:flatbuffers.Offset, numBursts:number, minFreq:number, maxFreq:number, centerFreq:number, detectLat:number, detectLon:number, detectAlt:number, confSemiMajor:number, confSemiMinor:number, confOrientation:number, confArea:number, atypeOffset:flatbuffers.Offset, agjsonOffset:flatbuffers.Offset, atextOffset:flatbuffers.Offset, areaOffset:flatbuffers.Offset, andims:number, asrid:number, passGroupIdOffset:flatbuffers.Offset, algVersionOffset:flatbuffers.Offset, externalIdOffset:flatbuffers.Offset, tagsOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, dataMode:RFGeoLocation_Full_dataMode_Enum, onOrbitOffset:flatbuffers.Offset):flatbuffers.Offset {
  RFGeoLocation_Full.startRFGeoLocation_Full(builder);
  RFGeoLocation_Full.addId(builder, idOffset);
  RFGeoLocation_Full.addClassificationMarking(builder, classificationMarkingOffset);
  RFGeoLocation_Full.addOrderId(builder, orderIdOffset);
  RFGeoLocation_Full.addCreatedTs(builder, createdTsOffset);
  RFGeoLocation_Full.addReceivedTs(builder, receivedTsOffset);
  RFGeoLocation_Full.addStartTime(builder, startTimeOffset);
  RFGeoLocation_Full.addEndTime(builder, endTimeOffset);
  RFGeoLocation_Full.addIdOnOrbit(builder, idOnOrbitOffset);
  RFGeoLocation_Full.addSatNo(builder, satNo);
  RFGeoLocation_Full.addOrigObjectId(builder, origObjectIdOffset);
  RFGeoLocation_Full.addConstellation(builder, constellationOffset);
  RFGeoLocation_Full.addSignalOfInterest(builder, signalOfInterestOffset);
  RFGeoLocation_Full.addIdRfemitter(builder, idRfemitterOffset);
  RFGeoLocation_Full.addOrigRfemitterId(builder, origRfemitterIdOffset);
  RFGeoLocation_Full.addNumBursts(builder, numBursts);
  RFGeoLocation_Full.addMinFreq(builder, minFreq);
  RFGeoLocation_Full.addMaxFreq(builder, maxFreq);
  RFGeoLocation_Full.addCenterFreq(builder, centerFreq);
  RFGeoLocation_Full.addDetectLat(builder, detectLat);
  RFGeoLocation_Full.addDetectLon(builder, detectLon);
  RFGeoLocation_Full.addDetectAlt(builder, detectAlt);
  RFGeoLocation_Full.addConfSemiMajor(builder, confSemiMajor);
  RFGeoLocation_Full.addConfSemiMinor(builder, confSemiMinor);
  RFGeoLocation_Full.addConfOrientation(builder, confOrientation);
  RFGeoLocation_Full.addConfArea(builder, confArea);
  RFGeoLocation_Full.addAtype(builder, atypeOffset);
  RFGeoLocation_Full.addAgjson(builder, agjsonOffset);
  RFGeoLocation_Full.addAtext(builder, atextOffset);
  RFGeoLocation_Full.addArea(builder, areaOffset);
  RFGeoLocation_Full.addAndims(builder, andims);
  RFGeoLocation_Full.addAsrid(builder, asrid);
  RFGeoLocation_Full.addPassGroupId(builder, passGroupIdOffset);
  RFGeoLocation_Full.addAlgVersion(builder, algVersionOffset);
  RFGeoLocation_Full.addExternalId(builder, externalIdOffset);
  RFGeoLocation_Full.addTags(builder, tagsOffset);
  RFGeoLocation_Full.addCreatedAt(builder, createdAtOffset);
  RFGeoLocation_Full.addCreatedBy(builder, createdByOffset);
  RFGeoLocation_Full.addSource(builder, sourceOffset);
  RFGeoLocation_Full.addOrigin(builder, originOffset);
  RFGeoLocation_Full.addOrigNetwork(builder, origNetworkOffset);
  RFGeoLocation_Full.addSourceDl(builder, sourceDlOffset);
  RFGeoLocation_Full.addDataMode(builder, dataMode);
  RFGeoLocation_Full.addOnOrbit(builder, onOrbitOffset);
  return RFGeoLocation_Full.endRFGeoLocation_Full(builder);
}

unpack(): RFGeoLocation_FullT {
  return new RFGeoLocation_FullT(
    this.id(),
    this.classificationMarking(),
    this.orderId(),
    this.createdTs(),
    this.receivedTs(),
    this.startTime(),
    this.endTime(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.constellation(),
    this.signalOfInterest(),
    this.idRfemitter(),
    this.origRfemitterId(),
    this.numBursts(),
    this.minFreq(),
    this.maxFreq(),
    this.centerFreq(),
    this.detectLat(),
    this.detectLon(),
    this.detectAlt(),
    this.confSemiMajor(),
    this.confSemiMinor(),
    this.confOrientation(),
    this.confArea(),
    this.atype(),
    this.agjson(),
    this.atext(),
    this.area(),
    this.andims(),
    this.asrid(),
    this.passGroupId(),
    this.algVersion(),
    this.externalId(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length()),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.sourceDl(),
    this.dataMode(),
    this.onOrbit()
  );
}


unpackTo(_o: RFGeoLocation_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.orderId = this.orderId();
  _o.createdTs = this.createdTs();
  _o.receivedTs = this.receivedTs();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.constellation = this.constellation();
  _o.signalOfInterest = this.signalOfInterest();
  _o.idRFEmitter = this.idRfemitter();
  _o.origRFEmitterId = this.origRfemitterId();
  _o.numBursts = this.numBursts();
  _o.minFreq = this.minFreq();
  _o.maxFreq = this.maxFreq();
  _o.centerFreq = this.centerFreq();
  _o.detectLat = this.detectLat();
  _o.detectLon = this.detectLon();
  _o.detectAlt = this.detectAlt();
  _o.confSemiMajor = this.confSemiMajor();
  _o.confSemiMinor = this.confSemiMinor();
  _o.confOrientation = this.confOrientation();
  _o.confArea = this.confArea();
  _o.atype = this.atype();
  _o.agjson = this.agjson();
  _o.atext = this.atext();
  _o.area = this.area();
  _o.andims = this.andims();
  _o.asrid = this.asrid();
  _o.passGroupId = this.passGroupId();
  _o.algVersion = this.algVersion();
  _o.externalId = this.externalId();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.sourceDL = this.sourceDl();
  _o.dataMode = this.dataMode();
  _o.onOrbit = this.onOrbit();
}
}

export class RFGeoLocation_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public orderId: string|Uint8Array|null = null,
  public createdTs: string|Uint8Array|null = null,
  public receivedTs: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public endTime: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public constellation: string|Uint8Array|null = null,
  public signalOfInterest: string|Uint8Array|null = null,
  public idRFEmitter: string|Uint8Array|null = null,
  public origRFEmitterId: string|Uint8Array|null = null,
  public numBursts: number = 0,
  public minFreq: number = 0.0,
  public maxFreq: number = 0.0,
  public centerFreq: number = 0.0,
  public detectLat: number = 0.0,
  public detectLon: number = 0.0,
  public detectAlt: number = 0.0,
  public confSemiMajor: number = 0.0,
  public confSemiMinor: number = 0.0,
  public confOrientation: number = 0.0,
  public confArea: number = 0.0,
  public atype: string|Uint8Array|null = null,
  public agjson: string|Uint8Array|null = null,
  public atext: string|Uint8Array|null = null,
  public area: string|Uint8Array|null = null,
  public andims: number = 0,
  public asrid: number = 0,
  public passGroupId: string|Uint8Array|null = null,
  public algVersion: string|Uint8Array|null = null,
  public externalId: string|Uint8Array|null = null,
  public tags: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public dataMode: RFGeoLocation_Full_dataMode_Enum = RFGeoLocation_Full_dataMode_Enum.REAL,
  public onOrbit: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const orderId = (this.orderId !== null ? builder.createString(this.orderId!) : 0);
  const createdTs = (this.createdTs !== null ? builder.createString(this.createdTs!) : 0);
  const receivedTs = (this.receivedTs !== null ? builder.createString(this.receivedTs!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const endTime = (this.endTime !== null ? builder.createString(this.endTime!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const constellation = (this.constellation !== null ? builder.createString(this.constellation!) : 0);
  const signalOfInterest = (this.signalOfInterest !== null ? builder.createString(this.signalOfInterest!) : 0);
  const idRFEmitter = (this.idRFEmitter !== null ? builder.createString(this.idRFEmitter!) : 0);
  const origRFEmitterId = (this.origRFEmitterId !== null ? builder.createString(this.origRFEmitterId!) : 0);
  const atype = (this.atype !== null ? builder.createString(this.atype!) : 0);
  const agjson = (this.agjson !== null ? builder.createString(this.agjson!) : 0);
  const atext = (this.atext !== null ? builder.createString(this.atext!) : 0);
  const area = (this.area !== null ? builder.createString(this.area!) : 0);
  const passGroupId = (this.passGroupId !== null ? builder.createString(this.passGroupId!) : 0);
  const algVersion = (this.algVersion !== null ? builder.createString(this.algVersion!) : 0);
  const externalId = (this.externalId !== null ? builder.createString(this.externalId!) : 0);
  const tags = RFGeoLocation_Full.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const onOrbit = (this.onOrbit !== null ? builder.createString(this.onOrbit!) : 0);

  return RFGeoLocation_Full.createRFGeoLocation_Full(builder,
    id,
    classificationMarking,
    orderId,
    createdTs,
    receivedTs,
    startTime,
    endTime,
    idOnOrbit,
    this.satNo,
    origObjectId,
    constellation,
    signalOfInterest,
    idRFEmitter,
    origRFEmitterId,
    this.numBursts,
    this.minFreq,
    this.maxFreq,
    this.centerFreq,
    this.detectLat,
    this.detectLon,
    this.detectAlt,
    this.confSemiMajor,
    this.confSemiMinor,
    this.confOrientation,
    this.confArea,
    atype,
    agjson,
    atext,
    area,
    this.andims,
    this.asrid,
    passGroupId,
    algVersion,
    externalId,
    tags,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    sourceDL,
    this.dataMode,
    onOrbit
  );
}
}
