// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AirLoadPlan_Abridged_dataMode_Enum } from './AirLoadPlan_Abridged_dataMode_Enum.js';


/**
 * /// Information related to how an aircraft is loaded with cargo, equipment, and passengers.
 */
export class AirLoadPlan_Abridged implements flatbuffers.IUnpackableObject<AirLoadPlan_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirLoadPlan_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirLoadPlan_Abridged(bb:flatbuffers.ByteBuffer, obj?:AirLoadPlan_Abridged):AirLoadPlan_Abridged {
  return (obj || new AirLoadPlan_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirLoadPlan_Abridged(bb:flatbuffers.ByteBuffer, obj?:AirLoadPlan_Abridged):AirLoadPlan_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirLoadPlan_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRL');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
 * Constraints: Minimum length = 1, Maximum length = 64
 */
externalId():string|null
externalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL ID of the mission this record is associated with.
 * Example: /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idMission():string|null
idMission(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idMission(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The mission number of the mission supporting this load plan.
 * Example: /// Example: AJM123456123
 * Constraints: Minimum length = 0, Maximum length = 16
 */
missionNumber():string|null
missionNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL ID of the aircraft sortie this record is associated with.
 * Example: /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSortie():string|null
idSortie(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSortie(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The leg number of the mission supporting this load plan.
 * Example: /// Example: 200
 * Constraints: No constraints specified.
 */
legNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The call sign of the mission supporting this load plan.
 * Example: /// Example: RCH1234
 * Constraints: Minimum length = 0, Maximum length = 24
 */
callSign():string|null
callSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The tail number of the aircraft supporting this load plan.
 * Example: /// Example: 77187
 * Constraints: Minimum length = 0, Maximum length = 16
 */
tailNumber():string|null
tailNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tailNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Model Design Series designation of the aircraft supporting this load plan.
 * Example: /// Example: C17A
 * Constraints: Minimum length = 1, Maximum length = 128
 */
aircraftMds():string|null
aircraftMds(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aircraftMds(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The departure International Civil Organization (ICAO) code of the departure airfield.
 * Example: /// Example: KCHS
 * Constraints: Minimum length = 0, Maximum length = 4
 */
depIcao():string|null
depIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
 * Example: /// Example: W99
 * Constraints: Minimum length = 0, Maximum length = 36
 */
depAirfield():string|null
depAirfield(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depAirfield(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
 * Example: /// Example: 2023-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
estDepTime():string|null
estDepTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
estDepTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The arrival International Civil Organization (ICAO) code of the landing airfield.
 * Example: /// Example: ETAR
 * Constraints: Minimum length = 0, Maximum length = 4
 */
arrIcao():string|null
arrIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
 * Example: /// Example: W99
 * Constraints: Minimum length = 0, Maximum length = 36
 */
arrAirfield():string|null
arrAirfield(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrAirfield(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
estArrTime():string|null
estArrTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
estArrTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of crew members on the aircraft.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
crewSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
 * Example: /// Example: C-1
 * Constraints: Minimum length = 0, Maximum length = 128
 */
cargoConfig():string|null
cargoConfig(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cargoConfig(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
 * Example: /// Example: Standard
 * Constraints: Minimum length = 0, Maximum length = 128
 */
equipConfig():string|null
equipConfig(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
equipConfig(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
 * Example: /// Example: ER
 * Constraints: Minimum length = 0, Maximum length = 128
 */
tankConfig():string|null
tankConfig(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tankConfig(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
 * Example: /// Example: 100.1
 * Constraints: No constraints specified.
 */
basicWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
 * Example: /// Example: 2500.1
 * Constraints: No constraints specified.
 */
basicMoment():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The weight of usable fuel on board the aircraft, in kilograms.
 * Example: /// Example: 100.1
 * Constraints: No constraints specified.
 */
fuelWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
 * Example: /// Example: 2500.1
 * Constraints: No constraints specified.
 */
fuelMoment():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The estimated weight of usable fuel upon landing, in kilograms.
 * Example: /// Example: 100.1
 * Constraints: No constraints specified.
 */
estLandingFuelWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
 * Example: /// Example: 2500.1
 * Constraints: No constraints specified.
 */
estLandingFuelMoment():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The basic weight of the aircraft including passengers and equipment, in kilograms.
 * Example: /// Example: 100.1
 * Constraints: No constraints specified.
 */
operatingWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
 * Example: /// Example: 2500.1
 * Constraints: No constraints specified.
 */
operatingMoment():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The weight of the cargo on board the aircraft, in kilograms.
 * Example: /// Example: 100.1
 * Constraints: No constraints specified.
 */
cargoWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
 * Example: /// Example: 2500.1
 * Constraints: No constraints specified.
 */
cargoMoment():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
 * Example: /// Example: 100.1
 * Constraints: No constraints specified.
 */
zeroFuelWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
 * Example: /// Example: 2500.1
 * Constraints: No constraints specified.
 */
zeroFuelMoment():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
 * Example: /// Example: 39.5
 * Constraints: No constraints specified.
 */
zeroFuelCg():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
 * Example: /// Example: 100.1
 * Constraints: No constraints specified.
 */
grossWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
 * Example: /// Example: 2500.1
 * Constraints: No constraints specified.
 */
grossMoment():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
 * Example: /// Example: 38.8
 * Constraints: No constraints specified.
 */
grossCg():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The gross weight of the aircraft upon landing, in kilograms.
 * Example: /// Example: 100.1
 * Constraints: No constraints specified.
 */
landingWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
 * Example: /// Example: 2500.1
 * Constraints: No constraints specified.
 */
landingMoment():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
 * Example: /// Example: 38.2
 * Constraints: No constraints specified.
 */
landingCg():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
cargoBayFsmin():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
 * Example: /// Example: 20
 * Constraints: No constraints specified.
 */
cargoBayFsmax():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Width of the cargo bay, in meters.
 * Example: /// Example: 3.1
 * Constraints: No constraints specified.
 */
cargoBayWidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2023-03-21T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: source
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AirLoadPlan_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AirLoadPlan_Abridged_dataMode_Enum.REAL;
}

static startAirLoadPlan_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(49);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addExternalId(builder:flatbuffers.Builder, externalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, externalIdOffset, 0);
}

static addIdMission(builder:flatbuffers.Builder, idMissionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idMissionOffset, 0);
}

static addMissionNumber(builder:flatbuffers.Builder, missionNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, missionNumberOffset, 0);
}

static addIdSortie(builder:flatbuffers.Builder, idSortieOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idSortieOffset, 0);
}

static addLegNum(builder:flatbuffers.Builder, legNum:number) {
  builder.addFieldInt32(6, legNum, 0);
}

static addCallSign(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, callSignOffset, 0);
}

static addTailNumber(builder:flatbuffers.Builder, tailNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, tailNumberOffset, 0);
}

static addAircraftMds(builder:flatbuffers.Builder, aircraftMdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, aircraftMdsOffset, 0);
}

static addDepIcao(builder:flatbuffers.Builder, depIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, depIcaoOffset, 0);
}

static addDepAirfield(builder:flatbuffers.Builder, depAirfieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, depAirfieldOffset, 0);
}

static addEstDepTime(builder:flatbuffers.Builder, estDepTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, estDepTimeOffset, 0);
}

static addArrIcao(builder:flatbuffers.Builder, arrIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, arrIcaoOffset, 0);
}

static addArrAirfield(builder:flatbuffers.Builder, arrAirfieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, arrAirfieldOffset, 0);
}

static addEstArrTime(builder:flatbuffers.Builder, estArrTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, estArrTimeOffset, 0);
}

static addCrewSize(builder:flatbuffers.Builder, crewSize:number) {
  builder.addFieldInt32(16, crewSize, 0);
}

static addCargoConfig(builder:flatbuffers.Builder, cargoConfigOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, cargoConfigOffset, 0);
}

static addEquipConfig(builder:flatbuffers.Builder, equipConfigOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, equipConfigOffset, 0);
}

static addTankConfig(builder:flatbuffers.Builder, tankConfigOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, tankConfigOffset, 0);
}

static addBasicWeight(builder:flatbuffers.Builder, basicWeight:number) {
  builder.addFieldFloat64(20, basicWeight, 0.0);
}

static addBasicMoment(builder:flatbuffers.Builder, basicMoment:number) {
  builder.addFieldFloat64(21, basicMoment, 0.0);
}

static addFuelWeight(builder:flatbuffers.Builder, fuelWeight:number) {
  builder.addFieldFloat64(22, fuelWeight, 0.0);
}

static addFuelMoment(builder:flatbuffers.Builder, fuelMoment:number) {
  builder.addFieldFloat64(23, fuelMoment, 0.0);
}

static addEstLandingFuelWeight(builder:flatbuffers.Builder, estLandingFuelWeight:number) {
  builder.addFieldFloat64(24, estLandingFuelWeight, 0.0);
}

static addEstLandingFuelMoment(builder:flatbuffers.Builder, estLandingFuelMoment:number) {
  builder.addFieldFloat64(25, estLandingFuelMoment, 0.0);
}

static addOperatingWeight(builder:flatbuffers.Builder, operatingWeight:number) {
  builder.addFieldFloat64(26, operatingWeight, 0.0);
}

static addOperatingMoment(builder:flatbuffers.Builder, operatingMoment:number) {
  builder.addFieldFloat64(27, operatingMoment, 0.0);
}

static addCargoWeight(builder:flatbuffers.Builder, cargoWeight:number) {
  builder.addFieldFloat64(28, cargoWeight, 0.0);
}

static addCargoMoment(builder:flatbuffers.Builder, cargoMoment:number) {
  builder.addFieldFloat64(29, cargoMoment, 0.0);
}

static addZeroFuelWeight(builder:flatbuffers.Builder, zeroFuelWeight:number) {
  builder.addFieldFloat64(30, zeroFuelWeight, 0.0);
}

static addZeroFuelMoment(builder:flatbuffers.Builder, zeroFuelMoment:number) {
  builder.addFieldFloat64(31, zeroFuelMoment, 0.0);
}

static addZeroFuelCg(builder:flatbuffers.Builder, zeroFuelCg:number) {
  builder.addFieldFloat64(32, zeroFuelCg, 0.0);
}

static addGrossWeight(builder:flatbuffers.Builder, grossWeight:number) {
  builder.addFieldFloat64(33, grossWeight, 0.0);
}

static addGrossMoment(builder:flatbuffers.Builder, grossMoment:number) {
  builder.addFieldFloat64(34, grossMoment, 0.0);
}

static addGrossCg(builder:flatbuffers.Builder, grossCg:number) {
  builder.addFieldFloat64(35, grossCg, 0.0);
}

static addLandingWeight(builder:flatbuffers.Builder, landingWeight:number) {
  builder.addFieldFloat64(36, landingWeight, 0.0);
}

static addLandingMoment(builder:flatbuffers.Builder, landingMoment:number) {
  builder.addFieldFloat64(37, landingMoment, 0.0);
}

static addLandingCg(builder:flatbuffers.Builder, landingCg:number) {
  builder.addFieldFloat64(38, landingCg, 0.0);
}

static addCargoBayFsmin(builder:flatbuffers.Builder, cargoBayFsmin:number) {
  builder.addFieldInt32(39, cargoBayFsmin, 0);
}

static addCargoBayFsmax(builder:flatbuffers.Builder, cargoBayFsmax:number) {
  builder.addFieldInt32(40, cargoBayFsmax, 0);
}

static addCargoBayWidth(builder:flatbuffers.Builder, cargoBayWidth:number) {
  builder.addFieldFloat64(41, cargoBayWidth, 0.0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, createdByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AirLoadPlan_Abridged_dataMode_Enum) {
  builder.addFieldInt8(48, dataMode, AirLoadPlan_Abridged_dataMode_Enum.REAL);
}

static endAirLoadPlan_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirLoadPlan_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRL');
}

static finishSizePrefixedAirLoadPlan_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRL', true);
}

static createAirLoadPlan_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, externalIdOffset:flatbuffers.Offset, idMissionOffset:flatbuffers.Offset, missionNumberOffset:flatbuffers.Offset, idSortieOffset:flatbuffers.Offset, legNum:number, callSignOffset:flatbuffers.Offset, tailNumberOffset:flatbuffers.Offset, aircraftMdsOffset:flatbuffers.Offset, depIcaoOffset:flatbuffers.Offset, depAirfieldOffset:flatbuffers.Offset, estDepTimeOffset:flatbuffers.Offset, arrIcaoOffset:flatbuffers.Offset, arrAirfieldOffset:flatbuffers.Offset, estArrTimeOffset:flatbuffers.Offset, crewSize:number, cargoConfigOffset:flatbuffers.Offset, equipConfigOffset:flatbuffers.Offset, tankConfigOffset:flatbuffers.Offset, basicWeight:number, basicMoment:number, fuelWeight:number, fuelMoment:number, estLandingFuelWeight:number, estLandingFuelMoment:number, operatingWeight:number, operatingMoment:number, cargoWeight:number, cargoMoment:number, zeroFuelWeight:number, zeroFuelMoment:number, zeroFuelCg:number, grossWeight:number, grossMoment:number, grossCg:number, landingWeight:number, landingMoment:number, landingCg:number, cargoBayFsmin:number, cargoBayFsmax:number, cargoBayWidth:number, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:AirLoadPlan_Abridged_dataMode_Enum):flatbuffers.Offset {
  AirLoadPlan_Abridged.startAirLoadPlan_Abridged(builder);
  AirLoadPlan_Abridged.addId(builder, idOffset);
  AirLoadPlan_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  AirLoadPlan_Abridged.addExternalId(builder, externalIdOffset);
  AirLoadPlan_Abridged.addIdMission(builder, idMissionOffset);
  AirLoadPlan_Abridged.addMissionNumber(builder, missionNumberOffset);
  AirLoadPlan_Abridged.addIdSortie(builder, idSortieOffset);
  AirLoadPlan_Abridged.addLegNum(builder, legNum);
  AirLoadPlan_Abridged.addCallSign(builder, callSignOffset);
  AirLoadPlan_Abridged.addTailNumber(builder, tailNumberOffset);
  AirLoadPlan_Abridged.addAircraftMds(builder, aircraftMdsOffset);
  AirLoadPlan_Abridged.addDepIcao(builder, depIcaoOffset);
  AirLoadPlan_Abridged.addDepAirfield(builder, depAirfieldOffset);
  AirLoadPlan_Abridged.addEstDepTime(builder, estDepTimeOffset);
  AirLoadPlan_Abridged.addArrIcao(builder, arrIcaoOffset);
  AirLoadPlan_Abridged.addArrAirfield(builder, arrAirfieldOffset);
  AirLoadPlan_Abridged.addEstArrTime(builder, estArrTimeOffset);
  AirLoadPlan_Abridged.addCrewSize(builder, crewSize);
  AirLoadPlan_Abridged.addCargoConfig(builder, cargoConfigOffset);
  AirLoadPlan_Abridged.addEquipConfig(builder, equipConfigOffset);
  AirLoadPlan_Abridged.addTankConfig(builder, tankConfigOffset);
  AirLoadPlan_Abridged.addBasicWeight(builder, basicWeight);
  AirLoadPlan_Abridged.addBasicMoment(builder, basicMoment);
  AirLoadPlan_Abridged.addFuelWeight(builder, fuelWeight);
  AirLoadPlan_Abridged.addFuelMoment(builder, fuelMoment);
  AirLoadPlan_Abridged.addEstLandingFuelWeight(builder, estLandingFuelWeight);
  AirLoadPlan_Abridged.addEstLandingFuelMoment(builder, estLandingFuelMoment);
  AirLoadPlan_Abridged.addOperatingWeight(builder, operatingWeight);
  AirLoadPlan_Abridged.addOperatingMoment(builder, operatingMoment);
  AirLoadPlan_Abridged.addCargoWeight(builder, cargoWeight);
  AirLoadPlan_Abridged.addCargoMoment(builder, cargoMoment);
  AirLoadPlan_Abridged.addZeroFuelWeight(builder, zeroFuelWeight);
  AirLoadPlan_Abridged.addZeroFuelMoment(builder, zeroFuelMoment);
  AirLoadPlan_Abridged.addZeroFuelCg(builder, zeroFuelCg);
  AirLoadPlan_Abridged.addGrossWeight(builder, grossWeight);
  AirLoadPlan_Abridged.addGrossMoment(builder, grossMoment);
  AirLoadPlan_Abridged.addGrossCg(builder, grossCg);
  AirLoadPlan_Abridged.addLandingWeight(builder, landingWeight);
  AirLoadPlan_Abridged.addLandingMoment(builder, landingMoment);
  AirLoadPlan_Abridged.addLandingCg(builder, landingCg);
  AirLoadPlan_Abridged.addCargoBayFsmin(builder, cargoBayFsmin);
  AirLoadPlan_Abridged.addCargoBayFsmax(builder, cargoBayFsmax);
  AirLoadPlan_Abridged.addCargoBayWidth(builder, cargoBayWidth);
  AirLoadPlan_Abridged.addCreatedAt(builder, createdAtOffset);
  AirLoadPlan_Abridged.addCreatedBy(builder, createdByOffset);
  AirLoadPlan_Abridged.addSourceDl(builder, sourceDlOffset);
  AirLoadPlan_Abridged.addSource(builder, sourceOffset);
  AirLoadPlan_Abridged.addOrigin(builder, originOffset);
  AirLoadPlan_Abridged.addOrigNetwork(builder, origNetworkOffset);
  AirLoadPlan_Abridged.addDataMode(builder, dataMode);
  return AirLoadPlan_Abridged.endAirLoadPlan_Abridged(builder);
}

unpack(): AirLoadPlan_AbridgedT {
  return new AirLoadPlan_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.externalId(),
    this.idMission(),
    this.missionNumber(),
    this.idSortie(),
    this.legNum(),
    this.callSign(),
    this.tailNumber(),
    this.aircraftMds(),
    this.depIcao(),
    this.depAirfield(),
    this.estDepTime(),
    this.arrIcao(),
    this.arrAirfield(),
    this.estArrTime(),
    this.crewSize(),
    this.cargoConfig(),
    this.equipConfig(),
    this.tankConfig(),
    this.basicWeight(),
    this.basicMoment(),
    this.fuelWeight(),
    this.fuelMoment(),
    this.estLandingFuelWeight(),
    this.estLandingFuelMoment(),
    this.operatingWeight(),
    this.operatingMoment(),
    this.cargoWeight(),
    this.cargoMoment(),
    this.zeroFuelWeight(),
    this.zeroFuelMoment(),
    this.zeroFuelCg(),
    this.grossWeight(),
    this.grossMoment(),
    this.grossCg(),
    this.landingWeight(),
    this.landingMoment(),
    this.landingCg(),
    this.cargoBayFsmin(),
    this.cargoBayFsmax(),
    this.cargoBayWidth(),
    this.createdAt(),
    this.createdBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: AirLoadPlan_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.externalId = this.externalId();
  _o.idMission = this.idMission();
  _o.missionNumber = this.missionNumber();
  _o.idSortie = this.idSortie();
  _o.legNum = this.legNum();
  _o.callSign = this.callSign();
  _o.tailNumber = this.tailNumber();
  _o.aircraftMds = this.aircraftMds();
  _o.depIcao = this.depIcao();
  _o.depAirfield = this.depAirfield();
  _o.estDepTime = this.estDepTime();
  _o.arrIcao = this.arrIcao();
  _o.arrAirfield = this.arrAirfield();
  _o.estArrTime = this.estArrTime();
  _o.crewSize = this.crewSize();
  _o.cargoConfig = this.cargoConfig();
  _o.equipConfig = this.equipConfig();
  _o.tankConfig = this.tankConfig();
  _o.basicWeight = this.basicWeight();
  _o.basicMoment = this.basicMoment();
  _o.fuelWeight = this.fuelWeight();
  _o.fuelMoment = this.fuelMoment();
  _o.estLandingFuelWeight = this.estLandingFuelWeight();
  _o.estLandingFuelMoment = this.estLandingFuelMoment();
  _o.operatingWeight = this.operatingWeight();
  _o.operatingMoment = this.operatingMoment();
  _o.cargoWeight = this.cargoWeight();
  _o.cargoMoment = this.cargoMoment();
  _o.zeroFuelWeight = this.zeroFuelWeight();
  _o.zeroFuelMoment = this.zeroFuelMoment();
  _o.zeroFuelCg = this.zeroFuelCg();
  _o.grossWeight = this.grossWeight();
  _o.grossMoment = this.grossMoment();
  _o.grossCg = this.grossCg();
  _o.landingWeight = this.landingWeight();
  _o.landingMoment = this.landingMoment();
  _o.landingCg = this.landingCg();
  _o.cargoBayFsmin = this.cargoBayFsmin();
  _o.cargoBayFsmax = this.cargoBayFsmax();
  _o.cargoBayWidth = this.cargoBayWidth();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.sourceDl = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class AirLoadPlan_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public externalId: string|Uint8Array|null = null,
  public idMission: string|Uint8Array|null = null,
  public missionNumber: string|Uint8Array|null = null,
  public idSortie: string|Uint8Array|null = null,
  public legNum: number = 0,
  public callSign: string|Uint8Array|null = null,
  public tailNumber: string|Uint8Array|null = null,
  public aircraftMds: string|Uint8Array|null = null,
  public depIcao: string|Uint8Array|null = null,
  public depAirfield: string|Uint8Array|null = null,
  public estDepTime: string|Uint8Array|null = null,
  public arrIcao: string|Uint8Array|null = null,
  public arrAirfield: string|Uint8Array|null = null,
  public estArrTime: string|Uint8Array|null = null,
  public crewSize: number = 0,
  public cargoConfig: string|Uint8Array|null = null,
  public equipConfig: string|Uint8Array|null = null,
  public tankConfig: string|Uint8Array|null = null,
  public basicWeight: number = 0.0,
  public basicMoment: number = 0.0,
  public fuelWeight: number = 0.0,
  public fuelMoment: number = 0.0,
  public estLandingFuelWeight: number = 0.0,
  public estLandingFuelMoment: number = 0.0,
  public operatingWeight: number = 0.0,
  public operatingMoment: number = 0.0,
  public cargoWeight: number = 0.0,
  public cargoMoment: number = 0.0,
  public zeroFuelWeight: number = 0.0,
  public zeroFuelMoment: number = 0.0,
  public zeroFuelCg: number = 0.0,
  public grossWeight: number = 0.0,
  public grossMoment: number = 0.0,
  public grossCg: number = 0.0,
  public landingWeight: number = 0.0,
  public landingMoment: number = 0.0,
  public landingCg: number = 0.0,
  public cargoBayFsmin: number = 0,
  public cargoBayFsmax: number = 0,
  public cargoBayWidth: number = 0.0,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: AirLoadPlan_Abridged_dataMode_Enum = AirLoadPlan_Abridged_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const externalId = (this.externalId !== null ? builder.createString(this.externalId!) : 0);
  const idMission = (this.idMission !== null ? builder.createString(this.idMission!) : 0);
  const missionNumber = (this.missionNumber !== null ? builder.createString(this.missionNumber!) : 0);
  const idSortie = (this.idSortie !== null ? builder.createString(this.idSortie!) : 0);
  const callSign = (this.callSign !== null ? builder.createString(this.callSign!) : 0);
  const tailNumber = (this.tailNumber !== null ? builder.createString(this.tailNumber!) : 0);
  const aircraftMds = (this.aircraftMds !== null ? builder.createString(this.aircraftMds!) : 0);
  const depIcao = (this.depIcao !== null ? builder.createString(this.depIcao!) : 0);
  const depAirfield = (this.depAirfield !== null ? builder.createString(this.depAirfield!) : 0);
  const estDepTime = (this.estDepTime !== null ? builder.createString(this.estDepTime!) : 0);
  const arrIcao = (this.arrIcao !== null ? builder.createString(this.arrIcao!) : 0);
  const arrAirfield = (this.arrAirfield !== null ? builder.createString(this.arrAirfield!) : 0);
  const estArrTime = (this.estArrTime !== null ? builder.createString(this.estArrTime!) : 0);
  const cargoConfig = (this.cargoConfig !== null ? builder.createString(this.cargoConfig!) : 0);
  const equipConfig = (this.equipConfig !== null ? builder.createString(this.equipConfig!) : 0);
  const tankConfig = (this.tankConfig !== null ? builder.createString(this.tankConfig!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return AirLoadPlan_Abridged.createAirLoadPlan_Abridged(builder,
    id,
    classificationMarking,
    externalId,
    idMission,
    missionNumber,
    idSortie,
    this.legNum,
    callSign,
    tailNumber,
    aircraftMds,
    depIcao,
    depAirfield,
    estDepTime,
    arrIcao,
    arrAirfield,
    estArrTime,
    this.crewSize,
    cargoConfig,
    equipConfig,
    tankConfig,
    this.basicWeight,
    this.basicMoment,
    this.fuelWeight,
    this.fuelMoment,
    this.estLandingFuelWeight,
    this.estLandingFuelMoment,
    this.operatingWeight,
    this.operatingMoment,
    this.cargoWeight,
    this.cargoMoment,
    this.zeroFuelWeight,
    this.zeroFuelMoment,
    this.zeroFuelCg,
    this.grossWeight,
    this.grossMoment,
    this.grossCg,
    this.landingWeight,
    this.landingMoment,
    this.landingCg,
    this.cargoBayFsmin,
    this.cargoBayFsmax,
    this.cargoBayWidth,
    createdAt,
    createdBy,
    sourceDl,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
