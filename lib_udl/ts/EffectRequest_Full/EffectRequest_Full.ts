// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { EffectRequest_Full_dataMode_Enum } from './EffectRequest_Full_dataMode_Enum.js';


/**
 * /// A request for various effects on a target.
 */
export class EffectRequest_Full implements flatbuffers.IUnpackableObject<EffectRequest_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EffectRequest_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEffectRequest_Full(bb:flatbuffers.ByteBuffer, obj?:EffectRequest_Full):EffectRequest_Full {
  return (obj || new EffectRequest_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEffectRequest_Full(bb:flatbuffers.ByteBuffer, obj?:EffectRequest_Full):EffectRequest_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EffectRequest_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EFFE');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: EFFECTREQUEST-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The extenal system identifier of this request. A human readable unique id.
 * Example: /// Example: EXTERNALREQUEST-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalRequestId():string|null
externalRequestId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalRequestId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.
 * Example: /// Example: ['COVER', 'DECEIVE']
 * Constraints: No constraints specified.
 */
effectList(index: number):string
effectList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
effectList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

effectListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).
 * Example: /// Example: CREATED
 * Constraints: Minimum length = 0, Maximum length = 24
 */
state():string|null
state(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
state(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specific descriptive instantiation of the effect, e.g., playbook to be used.
 * Example: /// Example: Example Notes
 * Constraints: Minimum length = 0, Maximum length = 256
 */
context():string|null
context(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
context(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time the effect should start, in ISO8601 UTC format.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time the effect should end, in ISO8601 UTC format.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
endTime():string|null
endTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):
 * BETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late
 * IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
 * NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later
 * NOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.
 * Example: /// Example: NoLaterThan
 * Constraints: Minimum length = 0, Maximum length = 24
 */
deadlineType():string|null
deadlineType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
deadlineType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source type of the targetId identifier (POI, TRACK).
 * Example: /// Example: POI
 * Constraints: Minimum length = 0, Maximum length = 24
 */
targetSrcType():string|null
targetSrcType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
targetSrcType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
 * Example: /// Example: TARGETSRC-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
targetSrcId():string|null
targetSrcId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
targetSrcId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The priority (LOW, MEDIUM, HIGH) of this request.
 * Example: /// Example: LOW
 * Constraints: Minimum length = 0, Maximum length = 24
 */
priority():string|null
priority(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
priority(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type or class of the preference model used to evaluate this offer.
 * Example: /// Example: Preference model
 * Constraints: Minimum length = 0, Maximum length = 256
 */
modelClass():string|null
modelClass(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modelClass(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.
 * Example: /// Example: ['COST', 'RISK']
 * Constraints: No constraints specified.
 */
metricTypes(index: number):string
metricTypes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
metricTypes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

metricTypesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.
 * Example: /// Example: [0.5, 0.6]
 * Constraints: No constraints specified.
 */
metricWeights(index: number):string
metricWeights(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
metricWeights(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

metricWeightsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():EffectRequest_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : EffectRequest_Full_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEffectRequest_Full(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addExternalRequestId(builder:flatbuffers.Builder, externalRequestIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, externalRequestIdOffset, 0);
}

static addEffectList(builder:flatbuffers.Builder, effectListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, effectListOffset, 0);
}

static createEffectListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEffectListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, stateOffset, 0);
}

static addContext(builder:flatbuffers.Builder, contextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, contextOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, startTimeOffset, 0);
}

static addEndTime(builder:flatbuffers.Builder, endTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, endTimeOffset, 0);
}

static addDeadlineType(builder:flatbuffers.Builder, deadlineTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, deadlineTypeOffset, 0);
}

static addTargetSrcType(builder:flatbuffers.Builder, targetSrcTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, targetSrcTypeOffset, 0);
}

static addTargetSrcId(builder:flatbuffers.Builder, targetSrcIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, targetSrcIdOffset, 0);
}

static addPriority(builder:flatbuffers.Builder, priorityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, priorityOffset, 0);
}

static addModelClass(builder:flatbuffers.Builder, modelClassOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, modelClassOffset, 0);
}

static addMetricTypes(builder:flatbuffers.Builder, metricTypesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, metricTypesOffset, 0);
}

static createMetricTypesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMetricTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMetricWeights(builder:flatbuffers.Builder, metricWeightsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, metricWeightsOffset, 0);
}

static createMetricWeightsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMetricWeightsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:EffectRequest_Full_dataMode_Enum) {
  builder.addFieldInt8(19, dataMode, EffectRequest_Full_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, origNetworkOffset, 0);
}

static endEffectRequest_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEffectRequest_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EFFE');
}

static finishSizePrefixedEffectRequest_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EFFE', true);
}

static createEffectRequest_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, externalRequestIdOffset:flatbuffers.Offset, effectListOffset:flatbuffers.Offset, stateOffset:flatbuffers.Offset, contextOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, endTimeOffset:flatbuffers.Offset, deadlineTypeOffset:flatbuffers.Offset, targetSrcTypeOffset:flatbuffers.Offset, targetSrcIdOffset:flatbuffers.Offset, priorityOffset:flatbuffers.Offset, modelClassOffset:flatbuffers.Offset, metricTypesOffset:flatbuffers.Offset, metricWeightsOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:EffectRequest_Full_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  EffectRequest_Full.startEffectRequest_Full(builder);
  EffectRequest_Full.addId(builder, idOffset);
  EffectRequest_Full.addClassificationMarking(builder, classificationMarkingOffset);
  EffectRequest_Full.addExternalRequestId(builder, externalRequestIdOffset);
  EffectRequest_Full.addEffectList(builder, effectListOffset);
  EffectRequest_Full.addState(builder, stateOffset);
  EffectRequest_Full.addContext(builder, contextOffset);
  EffectRequest_Full.addStartTime(builder, startTimeOffset);
  EffectRequest_Full.addEndTime(builder, endTimeOffset);
  EffectRequest_Full.addDeadlineType(builder, deadlineTypeOffset);
  EffectRequest_Full.addTargetSrcType(builder, targetSrcTypeOffset);
  EffectRequest_Full.addTargetSrcId(builder, targetSrcIdOffset);
  EffectRequest_Full.addPriority(builder, priorityOffset);
  EffectRequest_Full.addModelClass(builder, modelClassOffset);
  EffectRequest_Full.addMetricTypes(builder, metricTypesOffset);
  EffectRequest_Full.addMetricWeights(builder, metricWeightsOffset);
  EffectRequest_Full.addCreatedAt(builder, createdAtOffset);
  EffectRequest_Full.addCreatedBy(builder, createdByOffset);
  EffectRequest_Full.addSource(builder, sourceOffset);
  EffectRequest_Full.addOrigin(builder, originOffset);
  EffectRequest_Full.addDataMode(builder, dataMode);
  EffectRequest_Full.addOrigNetwork(builder, origNetworkOffset);
  return EffectRequest_Full.endEffectRequest_Full(builder);
}

unpack(): EffectRequest_FullT {
  return new EffectRequest_FullT(
    this.id(),
    this.classificationMarking(),
    this.externalRequestId(),
    this.bb!.createScalarList<string>(this.effectList.bind(this), this.effectListLength()),
    this.state(),
    this.context(),
    this.startTime(),
    this.endTime(),
    this.deadlineType(),
    this.targetSrcType(),
    this.targetSrcId(),
    this.priority(),
    this.modelClass(),
    this.bb!.createScalarList<string>(this.metricTypes.bind(this), this.metricTypesLength()),
    this.bb!.createScalarList<string>(this.metricWeights.bind(this), this.metricWeightsLength()),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: EffectRequest_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.externalRequestId = this.externalRequestId();
  _o.effectList = this.bb!.createScalarList<string>(this.effectList.bind(this), this.effectListLength());
  _o.state = this.state();
  _o.context = this.context();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.deadlineType = this.deadlineType();
  _o.targetSrcType = this.targetSrcType();
  _o.targetSrcId = this.targetSrcId();
  _o.priority = this.priority();
  _o.modelClass = this.modelClass();
  _o.metricTypes = this.bb!.createScalarList<string>(this.metricTypes.bind(this), this.metricTypesLength());
  _o.metricWeights = this.bb!.createScalarList<string>(this.metricWeights.bind(this), this.metricWeightsLength());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class EffectRequest_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public externalRequestId: string|Uint8Array|null = null,
  public effectList: (string)[] = [],
  public state: string|Uint8Array|null = null,
  public context: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public endTime: string|Uint8Array|null = null,
  public deadlineType: string|Uint8Array|null = null,
  public targetSrcType: string|Uint8Array|null = null,
  public targetSrcId: string|Uint8Array|null = null,
  public priority: string|Uint8Array|null = null,
  public modelClass: string|Uint8Array|null = null,
  public metricTypes: (string)[] = [],
  public metricWeights: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: EffectRequest_Full_dataMode_Enum = EffectRequest_Full_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const externalRequestId = (this.externalRequestId !== null ? builder.createString(this.externalRequestId!) : 0);
  const effectList = EffectRequest_Full.createEffectListVector(builder, builder.createObjectOffsetList(this.effectList));
  const state = (this.state !== null ? builder.createString(this.state!) : 0);
  const context = (this.context !== null ? builder.createString(this.context!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const endTime = (this.endTime !== null ? builder.createString(this.endTime!) : 0);
  const deadlineType = (this.deadlineType !== null ? builder.createString(this.deadlineType!) : 0);
  const targetSrcType = (this.targetSrcType !== null ? builder.createString(this.targetSrcType!) : 0);
  const targetSrcId = (this.targetSrcId !== null ? builder.createString(this.targetSrcId!) : 0);
  const priority = (this.priority !== null ? builder.createString(this.priority!) : 0);
  const modelClass = (this.modelClass !== null ? builder.createString(this.modelClass!) : 0);
  const metricTypes = EffectRequest_Full.createMetricTypesVector(builder, builder.createObjectOffsetList(this.metricTypes));
  const metricWeights = EffectRequest_Full.createMetricWeightsVector(builder, builder.createObjectOffsetList(this.metricWeights));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return EffectRequest_Full.createEffectRequest_Full(builder,
    id,
    classificationMarking,
    externalRequestId,
    effectList,
    state,
    context,
    startTime,
    endTime,
    deadlineType,
    targetSrcType,
    targetSrcId,
    priority,
    modelClass,
    metricTypes,
    metricWeights,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
