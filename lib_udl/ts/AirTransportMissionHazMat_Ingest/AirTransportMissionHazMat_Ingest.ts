// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of Hazardous Material information associated with this Air Transport Mission.
 */
export class AirTransportMissionHazMat_Ingest implements flatbuffers.IUnpackableObject<AirTransportMissionHazMat_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirTransportMissionHazMat_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirTransportMissionHazMat_Ingest(bb:flatbuffers.ByteBuffer, obj?:AirTransportMissionHazMat_Ingest):AirTransportMissionHazMat_Ingest {
  return (obj || new AirTransportMissionHazMat_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirTransportMissionHazMat_Ingest(bb:flatbuffers.ByteBuffer, obj?:AirTransportMissionHazMat_Ingest):AirTransportMissionHazMat_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirTransportMissionHazMat_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRT');
}

/**
 * The hazMat identifier provided by the originating source.
 * Example: /// Example: cb6289e0f38534e01291ab6421d42724
 * Constraints: Minimum length = 0, Maximum length = 36
 */
extHazMatId():string|null
extHazMatId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
extHazMatId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * United Nations proper shipping name of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
 * Example: /// Example: LITHIUM METAL BATTERIES
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
itemName():string|null
itemName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
itemName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * United Nations number or North America number that identifies hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
 * Example: /// Example: 0181
 * Constraints: Minimum length = 0, Maximum length = 4
 */
unNum():string|null
unNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of pieces of hazardous cargo.
 * Example: /// Example: 29
 * Constraints: No constraints specified.
 */
pieces():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Total weight of hazardous cargo, including non-explosive parts, in kilograms.
 * Example: /// Example: 22.1
 * Constraints: No constraints specified.
 */
weight():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Net explosive weight of the hazardous material, in kilograms.
 * Example: /// Example: 12.1
 * Constraints: No constraints specified.
 */
netExpWt():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Class and division of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
classDiv():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Compatibility group code used to specify the controls for the transportation and storage of hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
 * Example: /// Example: A
 * Constraints: Minimum length = 0, Maximum length = 2
 */
cgc():string|null
cgc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cgc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Comma delimited list of Note IDs for compatibility groups, specific to GDSS systems.
 * Example: /// Example: 4,5,7,8
 * Constraints: Minimum length = 0, Maximum length = 100
 */
cgn():string|null
cgn(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cgn(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Comma delimited list of Note IDs for Item Class Segregation groups, specific to GDSS systems.
 * Example: /// Example: 11,12
 * Constraints: Minimum length = 0, Maximum length = 100
 */
applicableNotes():string|null
applicableNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
applicableNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Itinerary number that identifies where the hazardous material is loaded.
 * Example: /// Example: 50
 * Constraints: No constraints specified.
 */
onItin():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is loaded.
 * Example: /// Example: LIRQ
 * Constraints: Minimum length = 0, Maximum length = 4
 */
onIcao():string|null
onIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
onIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Itinerary number that identifies where the hazardous material is unloaded.
 * Example: /// Example: 300
 * Constraints: No constraints specified.
 */
offItin():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is unloaded.
 * Example: /// Example: MBPV
 * Constraints: Minimum length = 0, Maximum length = 4
 */
offIcao():string|null
offIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
offIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating if hazardous material is associated with this air transport mission. Possible values are P (planned to be associated with the mission) or A (actually associated with the mission). Enum: [P, A].
 * Example: /// Example: P
 * Constraints: Minimum length = 0, Maximum length = 1
 */
planned():string|null
planned(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
planned(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAirTransportMissionHazMat_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(15);
}

static addExtHazMatId(builder:flatbuffers.Builder, extHazMatIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, extHazMatIdOffset, 0);
}

static addItemName(builder:flatbuffers.Builder, itemNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, itemNameOffset, 0);
}

static addUnNum(builder:flatbuffers.Builder, unNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, unNumOffset, 0);
}

static addPieces(builder:flatbuffers.Builder, pieces:number) {
  builder.addFieldInt32(3, pieces, 0);
}

static addWeight(builder:flatbuffers.Builder, weight:number) {
  builder.addFieldFloat64(4, weight, 0.0);
}

static addNetExpWt(builder:flatbuffers.Builder, netExpWt:number) {
  builder.addFieldFloat64(5, netExpWt, 0.0);
}

static addClassDiv(builder:flatbuffers.Builder, classDiv:number) {
  builder.addFieldFloat64(6, classDiv, 0.0);
}

static addCgc(builder:flatbuffers.Builder, cgcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, cgcOffset, 0);
}

static addCgn(builder:flatbuffers.Builder, cgnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, cgnOffset, 0);
}

static addApplicableNotes(builder:flatbuffers.Builder, applicableNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, applicableNotesOffset, 0);
}

static addOnItin(builder:flatbuffers.Builder, onItin:number) {
  builder.addFieldInt32(10, onItin, 0);
}

static addOnIcao(builder:flatbuffers.Builder, onIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, onIcaoOffset, 0);
}

static addOffItin(builder:flatbuffers.Builder, offItin:number) {
  builder.addFieldInt32(12, offItin, 0);
}

static addOffIcao(builder:flatbuffers.Builder, offIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, offIcaoOffset, 0);
}

static addPlanned(builder:flatbuffers.Builder, plannedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, plannedOffset, 0);
}

static endAirTransportMissionHazMat_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirTransportMissionHazMat_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRT');
}

static finishSizePrefixedAirTransportMissionHazMat_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRT', true);
}

static createAirTransportMissionHazMat_Ingest(builder:flatbuffers.Builder, extHazMatIdOffset:flatbuffers.Offset, itemNameOffset:flatbuffers.Offset, unNumOffset:flatbuffers.Offset, pieces:number, weight:number, netExpWt:number, classDiv:number, cgcOffset:flatbuffers.Offset, cgnOffset:flatbuffers.Offset, applicableNotesOffset:flatbuffers.Offset, onItin:number, onIcaoOffset:flatbuffers.Offset, offItin:number, offIcaoOffset:flatbuffers.Offset, plannedOffset:flatbuffers.Offset):flatbuffers.Offset {
  AirTransportMissionHazMat_Ingest.startAirTransportMissionHazMat_Ingest(builder);
  AirTransportMissionHazMat_Ingest.addExtHazMatId(builder, extHazMatIdOffset);
  AirTransportMissionHazMat_Ingest.addItemName(builder, itemNameOffset);
  AirTransportMissionHazMat_Ingest.addUnNum(builder, unNumOffset);
  AirTransportMissionHazMat_Ingest.addPieces(builder, pieces);
  AirTransportMissionHazMat_Ingest.addWeight(builder, weight);
  AirTransportMissionHazMat_Ingest.addNetExpWt(builder, netExpWt);
  AirTransportMissionHazMat_Ingest.addClassDiv(builder, classDiv);
  AirTransportMissionHazMat_Ingest.addCgc(builder, cgcOffset);
  AirTransportMissionHazMat_Ingest.addCgn(builder, cgnOffset);
  AirTransportMissionHazMat_Ingest.addApplicableNotes(builder, applicableNotesOffset);
  AirTransportMissionHazMat_Ingest.addOnItin(builder, onItin);
  AirTransportMissionHazMat_Ingest.addOnIcao(builder, onIcaoOffset);
  AirTransportMissionHazMat_Ingest.addOffItin(builder, offItin);
  AirTransportMissionHazMat_Ingest.addOffIcao(builder, offIcaoOffset);
  AirTransportMissionHazMat_Ingest.addPlanned(builder, plannedOffset);
  return AirTransportMissionHazMat_Ingest.endAirTransportMissionHazMat_Ingest(builder);
}

unpack(): AirTransportMissionHazMat_IngestT {
  return new AirTransportMissionHazMat_IngestT(
    this.extHazMatId(),
    this.itemName(),
    this.unNum(),
    this.pieces(),
    this.weight(),
    this.netExpWt(),
    this.classDiv(),
    this.cgc(),
    this.cgn(),
    this.applicableNotes(),
    this.onItin(),
    this.onIcao(),
    this.offItin(),
    this.offIcao(),
    this.planned()
  );
}


unpackTo(_o: AirTransportMissionHazMat_IngestT): void {
  _o.extHazMatId = this.extHazMatId();
  _o.itemName = this.itemName();
  _o.unNum = this.unNum();
  _o.pieces = this.pieces();
  _o.weight = this.weight();
  _o.netExpWt = this.netExpWt();
  _o.classDiv = this.classDiv();
  _o.cgc = this.cgc();
  _o.cgn = this.cgn();
  _o.applicableNotes = this.applicableNotes();
  _o.onItin = this.onItin();
  _o.onIcao = this.onIcao();
  _o.offItin = this.offItin();
  _o.offIcao = this.offIcao();
  _o.planned = this.planned();
}
}

export class AirTransportMissionHazMat_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public extHazMatId: string|Uint8Array|null = null,
  public itemName: string|Uint8Array|null = null,
  public unNum: string|Uint8Array|null = null,
  public pieces: number = 0,
  public weight: number = 0.0,
  public netExpWt: number = 0.0,
  public classDiv: number = 0.0,
  public cgc: string|Uint8Array|null = null,
  public cgn: string|Uint8Array|null = null,
  public applicableNotes: string|Uint8Array|null = null,
  public onItin: number = 0,
  public onIcao: string|Uint8Array|null = null,
  public offItin: number = 0,
  public offIcao: string|Uint8Array|null = null,
  public planned: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const extHazMatId = (this.extHazMatId !== null ? builder.createString(this.extHazMatId!) : 0);
  const itemName = (this.itemName !== null ? builder.createString(this.itemName!) : 0);
  const unNum = (this.unNum !== null ? builder.createString(this.unNum!) : 0);
  const cgc = (this.cgc !== null ? builder.createString(this.cgc!) : 0);
  const cgn = (this.cgn !== null ? builder.createString(this.cgn!) : 0);
  const applicableNotes = (this.applicableNotes !== null ? builder.createString(this.applicableNotes!) : 0);
  const onIcao = (this.onIcao !== null ? builder.createString(this.onIcao!) : 0);
  const offIcao = (this.offIcao !== null ? builder.createString(this.offIcao!) : 0);
  const planned = (this.planned !== null ? builder.createString(this.planned!) : 0);

  return AirTransportMissionHazMat_Ingest.createAirTransportMissionHazMat_Ingest(builder,
    extHazMatId,
    itemName,
    unNum,
    this.pieces,
    this.weight,
    this.netExpWt,
    this.classDiv,
    cgc,
    cgn,
    applicableNotes,
    this.onItin,
    onIcao,
    this.offItin,
    offIcao,
    planned
  );
}
}
