// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FlightPlan_Full_dataMode_Enum } from './flight-plan-full-data-mode-enum.js';


/**
 * /// Flight Plan contains data specifying the details of an intended flight including schedule and expected route.
 */
export class FlightPlan_Full implements flatbuffers.IUnpackableObject<FlightPlan_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlightPlan_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlightPlan_Full(bb:flatbuffers.ByteBuffer, obj?:FlightPlan_Full):FlightPlan_Full {
  return (obj || new FlightPlan_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlightPlan_Full(bb:flatbuffers.ByteBuffer, obj?:FlightPlan_Full):FlightPlan_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlightPlan_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('FLIG');
}

/**
 * Unique identifier of the record, auto-generated by the system if not provided on create operations.
 * Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) encode/decode procedures.
 * Example: /// Example: AJM7939B1123
 * Constraints: Minimum length = 0, Maximum length = 36
 */
amcMissionId():string|null
amcMissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
amcMissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL unique identifier of the aircraft sortie associated with this flight plan.
 * Example: /// Example: 9d60c1b1-10b1-b2a7-e403-84c5d7eeb170
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSortie():string|null
idSortie(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSortie(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL unique identifier of the aircraft associated with this flight plan.
 * Example: /// Example: 4f4a67c6-40fd-11ee-be56-0242ac120002
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idAircraft():string|null
idAircraft(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idAircraft(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The leg number of this flight plan.
 * Example: /// Example: 100
 * Constraints: No constraints specified.
 */
legNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The UDL unique identifier of the departure airfield associated with this flight plan.
 * Example: /// Example: 2a9020f6-40fd-11ee-be56-0242ac120002
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idDepAirfield():string|null
idDepAirfield(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idDepAirfield(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The airfield identifier of the departure location, International Civil Aviation Organization (ICAO) code preferred.
 * Example: /// Example: KSLV
 * Constraints: Minimum length = 1, Maximum length = 36
 */
depAirfield():string|null
depAirfield(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depAirfield(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The UDL unique identifier of the arrival airfield associated with this flight plan.
 * Example: /// Example: 363080c2-40fd-11ee-be56-0242ac120002
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idArrAirfield():string|null
idArrAirfield(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idArrAirfield(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The airfield identifier of the arrival location, International Civil Aviation Organization (ICAO) code preferred.
 * Example: /// Example: KCHS
 * Constraints: Minimum length = 1, Maximum length = 36
 */
arrAirfield():string|null
arrAirfield(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrAirfield(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source ID of the flight plan from the generating system.
 * Example: /// Example: AFMAPP20322347140001
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalId():string|null
externalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The generation time of this flight plan in ISO 8601 UTC format, with millisecond precision.
 * Example: /// Example: 2023-05-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
genTs():string|null
genTs(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
genTs(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
 * Example: /// Example: KC-130 HERCULES
 * Constraints: Minimum length = 0, Maximum length = 128
 */
aircraftMds():string|null
aircraftMds(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aircraftMds(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The tail number of the aircraft associated with this flight plan.
 * Example: /// Example: 77187
 * Constraints: Minimum length = 0, Maximum length = 16
 */
tailNumber():string|null
tailNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tailNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The call sign assigned to the aircraft for this flight plan.
 * Example: /// Example: HKY629
 * Constraints: Minimum length = 0, Maximum length = 8
 */
callSign():string|null
callSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The date and time the weather valid period begins in ISO 8601 UTC format, with millisecond precision.
 * Example: /// Example: 2023-05-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
wxValidStart():string|null
wxValidStart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
wxValidStart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The date and time the weather valid period ends in ISO 8601 UTC format, with millisecond precision.
 * Example: /// Example: 2023-05-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
wxValidEnd():string|null
wxValidEnd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
wxValidEnd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The estimated time of departure for the aircraft, in ISO 8601 UTC format, with millisecond precision.
 * Example: /// Example: 2023-05-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
estDepTime():string|null
estDepTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
estDepTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The percent degrade due to drag for this aircraft.
 * Example: /// Example: 16.9
 * Constraints: No constraints specified.
 */
dragIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The fuel degrade percentage used for this mission.
 * Example: /// Example: 10.3
 * Constraints: No constraints specified.
 */
fuelDegrade():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Operating weight of the aircraft in pounds.
 * Example: /// Example: 251830.5
 * Constraints: No constraints specified.
 */
opWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The mission index value for this mission. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
 * Example: /// Example: 44.1
 * Constraints: No constraints specified.
 */
msnIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total of all fuel required to complete the flight in pounds, including fuel to be dispensed on a refueling mission.
 * Example: /// Example: 180000.1
 * Constraints: No constraints specified.
 */
rampFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel required to start engines and taxi to the end of the runway in pounds.
 * Example: /// Example: 1500.1
 * Constraints: No constraints specified.
 */
taxiFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in pounds.
 * Example: /// Example: 178500.1
 * Constraints: No constraints specified.
 */
takeoffFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel required from brake release to Top of Climb in pounds.
 * Example: /// Example: 7000.1
 * Constraints: No constraints specified.
 */
climbFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time required from brake release to Top of Climb expressed as HH:MM.
 * Example: /// Example: 00:13
 * Constraints: Minimum length = 0, Maximum length = 6
 */
climbTime():string|null
climbTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
climbTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional fuel burned at Top of Climb in pounds.
 * Example: /// Example: 500.1
 * Constraints: No constraints specified.
 */
holdDownFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Additional fuel burned at Top of Climb for icing in pounds.
 * Example: /// Example: 1000.1
 * Constraints: No constraints specified.
 */
tocIceFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel remaining at Top of Climb in pounds.
 * Example: /// Example: 160000.1
 * Constraints: No constraints specified.
 */
tocFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel required to fly from Top of Climb to Top of Descent in pounds.
 * Example: /// Example: 155000.1
 * Constraints: No constraints specified.
 */
enrouteFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
 * Example: /// Example: 06:30
 * Constraints: Minimum length = 0, Maximum length = 6
 */
enrouteTime():string|null
enrouteTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enrouteTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
 * Example: /// Example: 1000.1
 * Constraints: No constraints specified.
 */
thunderAvoidFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Additional fuel burned at Top of Descent for icing in pounds.
 * Example: /// Example: 2000.1
 * Constraints: No constraints specified.
 */
todIceFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Additional fuel burned at Top of Descent for the operational condition in pounds.
 * Example: /// Example: 5000.1
 * Constraints: No constraints specified.
 */
opConditionFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel remaining at Top of Descent in pounds.
 * Example: /// Example: 32000.1
 * Constraints: No constraints specified.
 */
todFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Additional fuel burned at landing/missed approach for an early descent in pounds.
 * Example: /// Example: 500.1
 * Constraints: No constraints specified.
 */
earlyDescentFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Additional fuel burned at landing/missed approach for icing during arrival in pounds.
 * Example: /// Example: 1000.1
 * Constraints: No constraints specified.
 */
arrIceFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Additional fuel burned at the destination for holding in pounds.
 * Example: /// Example: 6000.1
 * Constraints: No constraints specified.
 */
holdFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Additional time for holding at the destination expressed as HH:MM.
 * Example: /// Example: 01:00
 * Constraints: Minimum length = 0, Maximum length = 6
 */
holdTime():string|null
holdTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
holdTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Fuel burned from the initial approach point to landing in pounds.
 * Example: /// Example: 3000.1
 * Constraints: No constraints specified.
 */
appLandingFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel planned to be burned during the flight in pounds.
 * Example: /// Example: 145000.1
 * Constraints: No constraints specified.
 */
burnedFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel planned to be remaining on the airplane at landing in pounds.
 * Example: /// Example: 19000.1
 * Constraints: No constraints specified.
 */
landingFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The minimum fuel on board required to divert in pounds.
 * Example: /// Example: 25000.1
 * Constraints: No constraints specified.
 */
minDivertFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel required to fly to alternate landing site 1 and land in pounds.
 * Example: /// Example: 6000.1
 * Constraints: No constraints specified.
 */
arrAlternate1Fuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel required to fly to alternate landing site 2 and land in pounds.
 * Example: /// Example: 6000.1
 * Constraints: No constraints specified.
 */
arrAlternate2Fuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The amount of contingency fuel in pounds.
 * Example: /// Example: 3000.1
 * Constraints: No constraints specified.
 */
contingencyFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The amount of reserve fuel in pounds.
 * Example: /// Example: 10000.1
 * Constraints: No constraints specified.
 */
reserveFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The depressurization fuel required to fly from the Equal Time Point to the Last Suitable/First Suitable airfield at depressurization altitude in pounds.
 * Example: /// Example: 20000.1
 * Constraints: No constraints specified.
 */
depressFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The amount of unusable fuel in pounds.
 * Example: /// Example: 2300.1
 * Constraints: No constraints specified.
 */
unusableFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The amount of unidentified extra fuel required to get to min landing in pounds.
 * Example: /// Example: 5000.1
 * Constraints: No constraints specified.
 */
unidentExtraFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The amount of identified extra fuel carried and not available in the burn plan in pounds.
 * Example: /// Example: 5000.1
 * Constraints: No constraints specified.
 */
identExtraFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total fuel remaining at alternate landing site 1 in pounds.
 * Example: /// Example: 18000.1
 * Constraints: No constraints specified.
 */
remAlternate1Fuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total fuel remaining at alternate landing site 2 in pounds.
 * Example: /// Example: 18000.1
 * Constraints: No constraints specified.
 */
remAlternate2Fuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total endurance time based on the fuel on board expressed as HH:MM.
 * Example: /// Example: 08:45
 * Constraints: Minimum length = 0, Maximum length = 6
 */
enduranceTime():string|null
enduranceTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enduranceTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the planned Standard Instrument Departure (SID) procedure.
 * Example: /// Example: RENV3B
 * Constraints: Minimum length = 0, Maximum length = 32
 */
sid():string|null
sid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the planned Standard Terminal Arrival (STAR) procedure.
 * Example: /// Example: ADANA
 * Constraints: Minimum length = 0, Maximum length = 32
 */
star():string|null
star(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
star(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system assesses the integrity of the GPS signals. This system predicts outages for a specified geographical area. These predictions are based on the location, path, and scheduled GPS satellite outages.
 * Example: /// Example: Failed by FAA SAPT 184022AUG2022
 * Constraints: Minimum length = 0, Maximum length = 128
 */
gpsRaim():string|null
gpsRaim(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gpsRaim(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The departure runway for this flight.
 * Example: /// Example: 05L
 * Constraints: Minimum length = 0, Maximum length = 8
 */
depRunway():string|null
depRunway(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depRunway(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The arrival runway for this flight.
 * Example: /// Example: 05L
 * Constraints: Minimum length = 0, Maximum length = 8
 */
arrRunway():string|null
arrRunway(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrRunway(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The 1801 fileable route of flight string for this flight. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
 * Example: /// Example: RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT
 * GORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177
 * ESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
routeString():string|null
routeString(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
routeString(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of country codes for the countries overflown during this flight in ISO 3166-1 Alpha-2 format.
 * Example: /// Example: ['US', 'CA', 'UK']
 * Constraints: No constraints specified.
 */
countryCodes(index: number):string
countryCodes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
countryCodes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

countryCodesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The Extended Operations (ETOPS) rating used to calculate this flight plan.
 * Example: /// Example: 85 MINUTES
 * Constraints: Minimum length = 0, Maximum length = 16
 */
etopsRating():string|null
etopsRating(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
etopsRating(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of Extended Operations (ETOPS) adequate landing airfields that are within the mission region.
 * Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
 * Constraints: No constraints specified.
 */
etopsAirfields(index: number):string
etopsAirfields(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
etopsAirfields(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

etopsAirfieldsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of Extended Operations (ETOPS) alternate suitable landing airfields that are within the mission region.
 * Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
 * Constraints: No constraints specified.
 */
etopsAltAirfields(index: number):string
etopsAltAirfields(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
etopsAltAirfields(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

etopsAltAirfieldsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The Extended Operations (ETOPS) validity window for the alternate airfield.
 * Example: /// Example: LPLA: 0317Z-0722Z
 * Constraints: Minimum length = 0, Maximum length = 64
 */
etopsValWindow():string|null
etopsValWindow(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
etopsValWindow(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Remarks from the planners concerning this flight plan.
 * Example: /// Example: Flight plan is good for 2 days before airspace closes over the UK.
 * Constraints: Minimum length = 0, Maximum length = 512
 */
plannerRemark():string|null
plannerRemark(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
plannerRemark(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Remarks about the planned cargo associated with this flight plan.
 * Example: /// Example: Expecting 55,000 lbs. If different, call us.
 * Constraints: Minimum length = 0, Maximum length = 512
 */
cargoRemark():string|null
cargoRemark(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cargoRemark(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Wind factor for the first half of the route. This is the average wind factor from first Top of Climb to the mid-time of the entire route in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
 * Example: /// Example: -1.1
 * Constraints: No constraints specified.
 */
windFac1():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Wind factor for the second half of the route. This is the average wind factor from the mid-time of the entire route to last Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
windFac2():number {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average wind factor from Top of Climb to Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
 * Example: /// Example: 5.1
 * Constraints: No constraints specified.
 */
windFacAvg():number {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average temperature deviation of the primary, divert, and alternate path for the route between first Top of Climb and last Top of Descent in degrees Celsius.
 * Example: /// Example: 16.1
 * Constraints: No constraints specified.
 */
avgTempDev():number {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Array of Air Traffic Control (ATC) addresses.
 * Example: /// Example: ['EYCBZMFO', 'EUCHZMFP', 'ETARYXYX', 'EDUUZVZI']
 * Constraints: No constraints specified.
 */
atcAddresses(index: number):string
atcAddresses(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
atcAddresses(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

atcAddressesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Air Traffic Control address filing the flight plan.
 * Example: /// Example: ETARYXYX
 * Constraints: Minimum length = 0, Maximum length = 24
 */
originator():string|null
originator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of aircraft flying this flight plan.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numAircraft():number {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The flight rules this flight plan is being filed under.
 * Example: /// Example: l
 * Constraints: Minimum length = 0, Maximum length = 8
 */
flightRules():string|null
flightRules(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
flightRules(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of flight (MILITARY, CIVILIAN, etc).
 * Example: /// Example: MILITARY
 * Constraints: Minimum length = 0, Maximum length = 16
 */
flightType():string|null
flightType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
flightType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A character string representation of the initial filed cruise speed for this flight (prepended values of K, N, and M represent kilometers per hour, knots, and Mach, respectively).
 * Example: /// Example: N0305
 * Constraints: Minimum length = 0, Maximum length = 8
 */
initialCruiseSpeed():string|null
initialCruiseSpeed(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
initialCruiseSpeed(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A character string representation of the initial filed altitude level for this flight (prepended values of F, S, A, and M represent flight level in hundreds of feet, standard metric level in tens of meters, altitude in hundreds of feet, and altitude in tens of meters, respectively).
 * Example: /// Example: F270
 * Constraints: Minimum length = 0, Maximum length = 8
 */
initialFlightLevel():string|null
initialFlightLevel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
initialFlightLevel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The first designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
 * Example: /// Example: EDDS
 * Constraints: Minimum length = 0, Maximum length = 36
 */
arrAlternate1():string|null
arrAlternate1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrAlternate1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The second designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
 * Example: /// Example: EDDM
 * Constraints: Minimum length = 0, Maximum length = 36
 */
arrAlternate2():string|null
arrAlternate2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arrAlternate2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The designated alternate departure airfield, International Civil Aviation Organization (ICAO) code preferred.
 * Example: /// Example: LFPO
 * Constraints: Minimum length = 0, Maximum length = 36
 */
depAlternate():string|null
depAlternate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
depAlternate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The wake turbulence category for this flight. The categories are assigned by the International Civil Aviation Organization (ICAO) and are based on maximum certified takeoff mass for the purpose of separating aircraft in flight due to wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
 * Example: /// Example: MEDIUM
 * Constraints: Minimum length = 0, Maximum length = 8
 */
wakeTurbCat():string|null
wakeTurbCat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
wakeTurbCat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The list of equipment on the aircraft as defined in the Flight Information Publications (FLIP) General Planning (GP) manual.
 * Example: /// Example: SDFGHIRTUWXYZ/H
 * Constraints: Minimum length = 0, Maximum length = 36
 */
equipment():string|null
equipment(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
equipment(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional remarks for air traffic control for this flight.
 * Example: /// Example: STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED
 * Constraints: Minimum length = 0, Maximum length = 64
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 176);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 178);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 180);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 182);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 184);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():FlightPlan_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 186);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : FlightPlan_Full_dataMode_Enum.REAL;
}

/**
 * Collection of air refueling events occurring on this flight.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
airRefuelEvents(index: number):string
airRefuelEvents(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
airRefuelEvents(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 188);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

airRefuelEventsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 188);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
flightPlanMessages(index: number):string
flightPlanMessages(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
flightPlanMessages(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 190);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

flightPlanMessagesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 190);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Collection of waypoints associated with this flight plan.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
flightPlanWaypoints(index: number):string
flightPlanWaypoints(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
flightPlanWaypoints(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 192);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

flightPlanWaypointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 192);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
flightPlanPointGroups(index: number):string
flightPlanPointGroups(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
flightPlanPointGroups(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 194);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

flightPlanPointGroupsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 194);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFlightPlan_Full(builder:flatbuffers.Builder) {
  builder.startObject(96);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addAmcMissionId(builder:flatbuffers.Builder, amcMissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, amcMissionIdOffset, 0);
}

static addIdSortie(builder:flatbuffers.Builder, idSortieOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idSortieOffset, 0);
}

static addIdAircraft(builder:flatbuffers.Builder, idAircraftOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idAircraftOffset, 0);
}

static addLegNum(builder:flatbuffers.Builder, legNum:number) {
  builder.addFieldInt32(5, legNum, 0);
}

static addIdDepAirfield(builder:flatbuffers.Builder, idDepAirfieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, idDepAirfieldOffset, 0);
}

static addDepAirfield(builder:flatbuffers.Builder, depAirfieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, depAirfieldOffset, 0);
}

static addIdArrAirfield(builder:flatbuffers.Builder, idArrAirfieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, idArrAirfieldOffset, 0);
}

static addArrAirfield(builder:flatbuffers.Builder, arrAirfieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, arrAirfieldOffset, 0);
}

static addExternalId(builder:flatbuffers.Builder, externalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, externalIdOffset, 0);
}

static addGenTs(builder:flatbuffers.Builder, genTsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, genTsOffset, 0);
}

static addAircraftMds(builder:flatbuffers.Builder, aircraftMdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, aircraftMdsOffset, 0);
}

static addTailNumber(builder:flatbuffers.Builder, tailNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, tailNumberOffset, 0);
}

static addCallSign(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, callSignOffset, 0);
}

static addWxValidStart(builder:flatbuffers.Builder, wxValidStartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, wxValidStartOffset, 0);
}

static addWxValidEnd(builder:flatbuffers.Builder, wxValidEndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, wxValidEndOffset, 0);
}

static addEstDepTime(builder:flatbuffers.Builder, estDepTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, estDepTimeOffset, 0);
}

static addDragIndex(builder:flatbuffers.Builder, dragIndex:number) {
  builder.addFieldFloat64(18, dragIndex, 0.0);
}

static addFuelDegrade(builder:flatbuffers.Builder, fuelDegrade:number) {
  builder.addFieldFloat64(19, fuelDegrade, 0.0);
}

static addOpWeight(builder:flatbuffers.Builder, opWeight:number) {
  builder.addFieldFloat64(20, opWeight, 0.0);
}

static addMsnIndex(builder:flatbuffers.Builder, msnIndex:number) {
  builder.addFieldFloat64(21, msnIndex, 0.0);
}

static addRampFuel(builder:flatbuffers.Builder, rampFuel:number) {
  builder.addFieldFloat64(22, rampFuel, 0.0);
}

static addTaxiFuel(builder:flatbuffers.Builder, taxiFuel:number) {
  builder.addFieldFloat64(23, taxiFuel, 0.0);
}

static addTakeoffFuel(builder:flatbuffers.Builder, takeoffFuel:number) {
  builder.addFieldFloat64(24, takeoffFuel, 0.0);
}

static addClimbFuel(builder:flatbuffers.Builder, climbFuel:number) {
  builder.addFieldFloat64(25, climbFuel, 0.0);
}

static addClimbTime(builder:flatbuffers.Builder, climbTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, climbTimeOffset, 0);
}

static addHoldDownFuel(builder:flatbuffers.Builder, holdDownFuel:number) {
  builder.addFieldFloat64(27, holdDownFuel, 0.0);
}

static addTocIceFuel(builder:flatbuffers.Builder, tocIceFuel:number) {
  builder.addFieldFloat64(28, tocIceFuel, 0.0);
}

static addTocFuel(builder:flatbuffers.Builder, tocFuel:number) {
  builder.addFieldFloat64(29, tocFuel, 0.0);
}

static addEnrouteFuel(builder:flatbuffers.Builder, enrouteFuel:number) {
  builder.addFieldFloat64(30, enrouteFuel, 0.0);
}

static addEnrouteTime(builder:flatbuffers.Builder, enrouteTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, enrouteTimeOffset, 0);
}

static addThunderAvoidFuel(builder:flatbuffers.Builder, thunderAvoidFuel:number) {
  builder.addFieldFloat64(32, thunderAvoidFuel, 0.0);
}

static addTodIceFuel(builder:flatbuffers.Builder, todIceFuel:number) {
  builder.addFieldFloat64(33, todIceFuel, 0.0);
}

static addOpConditionFuel(builder:flatbuffers.Builder, opConditionFuel:number) {
  builder.addFieldFloat64(34, opConditionFuel, 0.0);
}

static addTodFuel(builder:flatbuffers.Builder, todFuel:number) {
  builder.addFieldFloat64(35, todFuel, 0.0);
}

static addEarlyDescentFuel(builder:flatbuffers.Builder, earlyDescentFuel:number) {
  builder.addFieldFloat64(36, earlyDescentFuel, 0.0);
}

static addArrIceFuel(builder:flatbuffers.Builder, arrIceFuel:number) {
  builder.addFieldFloat64(37, arrIceFuel, 0.0);
}

static addHoldFuel(builder:flatbuffers.Builder, holdFuel:number) {
  builder.addFieldFloat64(38, holdFuel, 0.0);
}

static addHoldTime(builder:flatbuffers.Builder, holdTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, holdTimeOffset, 0);
}

static addAppLandingFuel(builder:flatbuffers.Builder, appLandingFuel:number) {
  builder.addFieldFloat64(40, appLandingFuel, 0.0);
}

static addBurnedFuel(builder:flatbuffers.Builder, burnedFuel:number) {
  builder.addFieldFloat64(41, burnedFuel, 0.0);
}

static addLandingFuel(builder:flatbuffers.Builder, landingFuel:number) {
  builder.addFieldFloat64(42, landingFuel, 0.0);
}

static addMinDivertFuel(builder:flatbuffers.Builder, minDivertFuel:number) {
  builder.addFieldFloat64(43, minDivertFuel, 0.0);
}

static addArrAlternate1Fuel(builder:flatbuffers.Builder, arrAlternate1Fuel:number) {
  builder.addFieldFloat64(44, arrAlternate1Fuel, 0.0);
}

static addArrAlternate2Fuel(builder:flatbuffers.Builder, arrAlternate2Fuel:number) {
  builder.addFieldFloat64(45, arrAlternate2Fuel, 0.0);
}

static addContingencyFuel(builder:flatbuffers.Builder, contingencyFuel:number) {
  builder.addFieldFloat64(46, contingencyFuel, 0.0);
}

static addReserveFuel(builder:flatbuffers.Builder, reserveFuel:number) {
  builder.addFieldFloat64(47, reserveFuel, 0.0);
}

static addDepressFuel(builder:flatbuffers.Builder, depressFuel:number) {
  builder.addFieldFloat64(48, depressFuel, 0.0);
}

static addUnusableFuel(builder:flatbuffers.Builder, unusableFuel:number) {
  builder.addFieldFloat64(49, unusableFuel, 0.0);
}

static addUnidentExtraFuel(builder:flatbuffers.Builder, unidentExtraFuel:number) {
  builder.addFieldFloat64(50, unidentExtraFuel, 0.0);
}

static addIdentExtraFuel(builder:flatbuffers.Builder, identExtraFuel:number) {
  builder.addFieldFloat64(51, identExtraFuel, 0.0);
}

static addRemAlternate1Fuel(builder:flatbuffers.Builder, remAlternate1Fuel:number) {
  builder.addFieldFloat64(52, remAlternate1Fuel, 0.0);
}

static addRemAlternate2Fuel(builder:flatbuffers.Builder, remAlternate2Fuel:number) {
  builder.addFieldFloat64(53, remAlternate2Fuel, 0.0);
}

static addEnduranceTime(builder:flatbuffers.Builder, enduranceTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, enduranceTimeOffset, 0);
}

static addSid(builder:flatbuffers.Builder, sidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, sidOffset, 0);
}

static addStar(builder:flatbuffers.Builder, starOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, starOffset, 0);
}

static addGpsRaim(builder:flatbuffers.Builder, gpsRaimOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, gpsRaimOffset, 0);
}

static addDepRunway(builder:flatbuffers.Builder, depRunwayOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, depRunwayOffset, 0);
}

static addArrRunway(builder:flatbuffers.Builder, arrRunwayOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, arrRunwayOffset, 0);
}

static addRouteString(builder:flatbuffers.Builder, routeStringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, routeStringOffset, 0);
}

static addCountryCodes(builder:flatbuffers.Builder, countryCodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, countryCodesOffset, 0);
}

static createCountryCodesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCountryCodesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEtopsRating(builder:flatbuffers.Builder, etopsRatingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, etopsRatingOffset, 0);
}

static addEtopsAirfields(builder:flatbuffers.Builder, etopsAirfieldsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, etopsAirfieldsOffset, 0);
}

static createEtopsAirfieldsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEtopsAirfieldsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEtopsAltAirfields(builder:flatbuffers.Builder, etopsAltAirfieldsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, etopsAltAirfieldsOffset, 0);
}

static createEtopsAltAirfieldsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEtopsAltAirfieldsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEtopsValWindow(builder:flatbuffers.Builder, etopsValWindowOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, etopsValWindowOffset, 0);
}

static addPlannerRemark(builder:flatbuffers.Builder, plannerRemarkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, plannerRemarkOffset, 0);
}

static addCargoRemark(builder:flatbuffers.Builder, cargoRemarkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, cargoRemarkOffset, 0);
}

static addWindFac1(builder:flatbuffers.Builder, windFac1:number) {
  builder.addFieldFloat64(68, windFac1, 0.0);
}

static addWindFac2(builder:flatbuffers.Builder, windFac2:number) {
  builder.addFieldFloat64(69, windFac2, 0.0);
}

static addWindFacAvg(builder:flatbuffers.Builder, windFacAvg:number) {
  builder.addFieldFloat64(70, windFacAvg, 0.0);
}

static addAvgTempDev(builder:flatbuffers.Builder, avgTempDev:number) {
  builder.addFieldFloat64(71, avgTempDev, 0.0);
}

static addAtcAddresses(builder:flatbuffers.Builder, atcAddressesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(72, atcAddressesOffset, 0);
}

static createAtcAddressesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAtcAddressesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOriginator(builder:flatbuffers.Builder, originatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(73, originatorOffset, 0);
}

static addNumAircraft(builder:flatbuffers.Builder, numAircraft:number) {
  builder.addFieldInt32(74, numAircraft, 0);
}

static addFlightRules(builder:flatbuffers.Builder, flightRulesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(75, flightRulesOffset, 0);
}

static addFlightType(builder:flatbuffers.Builder, flightTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(76, flightTypeOffset, 0);
}

static addInitialCruiseSpeed(builder:flatbuffers.Builder, initialCruiseSpeedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(77, initialCruiseSpeedOffset, 0);
}

static addInitialFlightLevel(builder:flatbuffers.Builder, initialFlightLevelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(78, initialFlightLevelOffset, 0);
}

static addArrAlternate1(builder:flatbuffers.Builder, arrAlternate1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(79, arrAlternate1Offset, 0);
}

static addArrAlternate2(builder:flatbuffers.Builder, arrAlternate2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(80, arrAlternate2Offset, 0);
}

static addDepAlternate(builder:flatbuffers.Builder, depAlternateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(81, depAlternateOffset, 0);
}

static addWakeTurbCat(builder:flatbuffers.Builder, wakeTurbCatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(82, wakeTurbCatOffset, 0);
}

static addEquipment(builder:flatbuffers.Builder, equipmentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(83, equipmentOffset, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(84, notesOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(85, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(86, createdByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(87, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(88, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(89, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(90, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:FlightPlan_Full_dataMode_Enum) {
  builder.addFieldInt8(91, dataMode, FlightPlan_Full_dataMode_Enum.REAL);
}

static addAirRefuelEvents(builder:flatbuffers.Builder, airRefuelEventsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(92, airRefuelEventsOffset, 0);
}

static createAirRefuelEventsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAirRefuelEventsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFlightPlanMessages(builder:flatbuffers.Builder, flightPlanMessagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(93, flightPlanMessagesOffset, 0);
}

static createFlightPlanMessagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFlightPlanMessagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFlightPlanWaypoints(builder:flatbuffers.Builder, flightPlanWaypointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(94, flightPlanWaypointsOffset, 0);
}

static createFlightPlanWaypointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFlightPlanWaypointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFlightPlanPointGroups(builder:flatbuffers.Builder, flightPlanPointGroupsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(95, flightPlanPointGroupsOffset, 0);
}

static createFlightPlanPointGroupsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFlightPlanPointGroupsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFlightPlan_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFlightPlan_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'FLIG');
}

static finishSizePrefixedFlightPlan_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'FLIG', true);
}

static createFlightPlan_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, amcMissionIdOffset:flatbuffers.Offset, idSortieOffset:flatbuffers.Offset, idAircraftOffset:flatbuffers.Offset, legNum:number, idDepAirfieldOffset:flatbuffers.Offset, depAirfieldOffset:flatbuffers.Offset, idArrAirfieldOffset:flatbuffers.Offset, arrAirfieldOffset:flatbuffers.Offset, externalIdOffset:flatbuffers.Offset, genTsOffset:flatbuffers.Offset, aircraftMdsOffset:flatbuffers.Offset, tailNumberOffset:flatbuffers.Offset, callSignOffset:flatbuffers.Offset, wxValidStartOffset:flatbuffers.Offset, wxValidEndOffset:flatbuffers.Offset, estDepTimeOffset:flatbuffers.Offset, dragIndex:number, fuelDegrade:number, opWeight:number, msnIndex:number, rampFuel:number, taxiFuel:number, takeoffFuel:number, climbFuel:number, climbTimeOffset:flatbuffers.Offset, holdDownFuel:number, tocIceFuel:number, tocFuel:number, enrouteFuel:number, enrouteTimeOffset:flatbuffers.Offset, thunderAvoidFuel:number, todIceFuel:number, opConditionFuel:number, todFuel:number, earlyDescentFuel:number, arrIceFuel:number, holdFuel:number, holdTimeOffset:flatbuffers.Offset, appLandingFuel:number, burnedFuel:number, landingFuel:number, minDivertFuel:number, arrAlternate1Fuel:number, arrAlternate2Fuel:number, contingencyFuel:number, reserveFuel:number, depressFuel:number, unusableFuel:number, unidentExtraFuel:number, identExtraFuel:number, remAlternate1Fuel:number, remAlternate2Fuel:number, enduranceTimeOffset:flatbuffers.Offset, sidOffset:flatbuffers.Offset, starOffset:flatbuffers.Offset, gpsRaimOffset:flatbuffers.Offset, depRunwayOffset:flatbuffers.Offset, arrRunwayOffset:flatbuffers.Offset, routeStringOffset:flatbuffers.Offset, countryCodesOffset:flatbuffers.Offset, etopsRatingOffset:flatbuffers.Offset, etopsAirfieldsOffset:flatbuffers.Offset, etopsAltAirfieldsOffset:flatbuffers.Offset, etopsValWindowOffset:flatbuffers.Offset, plannerRemarkOffset:flatbuffers.Offset, cargoRemarkOffset:flatbuffers.Offset, windFac1:number, windFac2:number, windFacAvg:number, avgTempDev:number, atcAddressesOffset:flatbuffers.Offset, originatorOffset:flatbuffers.Offset, numAircraft:number, flightRulesOffset:flatbuffers.Offset, flightTypeOffset:flatbuffers.Offset, initialCruiseSpeedOffset:flatbuffers.Offset, initialFlightLevelOffset:flatbuffers.Offset, arrAlternate1Offset:flatbuffers.Offset, arrAlternate2Offset:flatbuffers.Offset, depAlternateOffset:flatbuffers.Offset, wakeTurbCatOffset:flatbuffers.Offset, equipmentOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:FlightPlan_Full_dataMode_Enum, airRefuelEventsOffset:flatbuffers.Offset, flightPlanMessagesOffset:flatbuffers.Offset, flightPlanWaypointsOffset:flatbuffers.Offset, flightPlanPointGroupsOffset:flatbuffers.Offset):flatbuffers.Offset {
  FlightPlan_Full.startFlightPlan_Full(builder);
  FlightPlan_Full.addId(builder, idOffset);
  FlightPlan_Full.addClassificationMarking(builder, classificationMarkingOffset);
  FlightPlan_Full.addAmcMissionId(builder, amcMissionIdOffset);
  FlightPlan_Full.addIdSortie(builder, idSortieOffset);
  FlightPlan_Full.addIdAircraft(builder, idAircraftOffset);
  FlightPlan_Full.addLegNum(builder, legNum);
  FlightPlan_Full.addIdDepAirfield(builder, idDepAirfieldOffset);
  FlightPlan_Full.addDepAirfield(builder, depAirfieldOffset);
  FlightPlan_Full.addIdArrAirfield(builder, idArrAirfieldOffset);
  FlightPlan_Full.addArrAirfield(builder, arrAirfieldOffset);
  FlightPlan_Full.addExternalId(builder, externalIdOffset);
  FlightPlan_Full.addGenTs(builder, genTsOffset);
  FlightPlan_Full.addAircraftMds(builder, aircraftMdsOffset);
  FlightPlan_Full.addTailNumber(builder, tailNumberOffset);
  FlightPlan_Full.addCallSign(builder, callSignOffset);
  FlightPlan_Full.addWxValidStart(builder, wxValidStartOffset);
  FlightPlan_Full.addWxValidEnd(builder, wxValidEndOffset);
  FlightPlan_Full.addEstDepTime(builder, estDepTimeOffset);
  FlightPlan_Full.addDragIndex(builder, dragIndex);
  FlightPlan_Full.addFuelDegrade(builder, fuelDegrade);
  FlightPlan_Full.addOpWeight(builder, opWeight);
  FlightPlan_Full.addMsnIndex(builder, msnIndex);
  FlightPlan_Full.addRampFuel(builder, rampFuel);
  FlightPlan_Full.addTaxiFuel(builder, taxiFuel);
  FlightPlan_Full.addTakeoffFuel(builder, takeoffFuel);
  FlightPlan_Full.addClimbFuel(builder, climbFuel);
  FlightPlan_Full.addClimbTime(builder, climbTimeOffset);
  FlightPlan_Full.addHoldDownFuel(builder, holdDownFuel);
  FlightPlan_Full.addTocIceFuel(builder, tocIceFuel);
  FlightPlan_Full.addTocFuel(builder, tocFuel);
  FlightPlan_Full.addEnrouteFuel(builder, enrouteFuel);
  FlightPlan_Full.addEnrouteTime(builder, enrouteTimeOffset);
  FlightPlan_Full.addThunderAvoidFuel(builder, thunderAvoidFuel);
  FlightPlan_Full.addTodIceFuel(builder, todIceFuel);
  FlightPlan_Full.addOpConditionFuel(builder, opConditionFuel);
  FlightPlan_Full.addTodFuel(builder, todFuel);
  FlightPlan_Full.addEarlyDescentFuel(builder, earlyDescentFuel);
  FlightPlan_Full.addArrIceFuel(builder, arrIceFuel);
  FlightPlan_Full.addHoldFuel(builder, holdFuel);
  FlightPlan_Full.addHoldTime(builder, holdTimeOffset);
  FlightPlan_Full.addAppLandingFuel(builder, appLandingFuel);
  FlightPlan_Full.addBurnedFuel(builder, burnedFuel);
  FlightPlan_Full.addLandingFuel(builder, landingFuel);
  FlightPlan_Full.addMinDivertFuel(builder, minDivertFuel);
  FlightPlan_Full.addArrAlternate1Fuel(builder, arrAlternate1Fuel);
  FlightPlan_Full.addArrAlternate2Fuel(builder, arrAlternate2Fuel);
  FlightPlan_Full.addContingencyFuel(builder, contingencyFuel);
  FlightPlan_Full.addReserveFuel(builder, reserveFuel);
  FlightPlan_Full.addDepressFuel(builder, depressFuel);
  FlightPlan_Full.addUnusableFuel(builder, unusableFuel);
  FlightPlan_Full.addUnidentExtraFuel(builder, unidentExtraFuel);
  FlightPlan_Full.addIdentExtraFuel(builder, identExtraFuel);
  FlightPlan_Full.addRemAlternate1Fuel(builder, remAlternate1Fuel);
  FlightPlan_Full.addRemAlternate2Fuel(builder, remAlternate2Fuel);
  FlightPlan_Full.addEnduranceTime(builder, enduranceTimeOffset);
  FlightPlan_Full.addSid(builder, sidOffset);
  FlightPlan_Full.addStar(builder, starOffset);
  FlightPlan_Full.addGpsRaim(builder, gpsRaimOffset);
  FlightPlan_Full.addDepRunway(builder, depRunwayOffset);
  FlightPlan_Full.addArrRunway(builder, arrRunwayOffset);
  FlightPlan_Full.addRouteString(builder, routeStringOffset);
  FlightPlan_Full.addCountryCodes(builder, countryCodesOffset);
  FlightPlan_Full.addEtopsRating(builder, etopsRatingOffset);
  FlightPlan_Full.addEtopsAirfields(builder, etopsAirfieldsOffset);
  FlightPlan_Full.addEtopsAltAirfields(builder, etopsAltAirfieldsOffset);
  FlightPlan_Full.addEtopsValWindow(builder, etopsValWindowOffset);
  FlightPlan_Full.addPlannerRemark(builder, plannerRemarkOffset);
  FlightPlan_Full.addCargoRemark(builder, cargoRemarkOffset);
  FlightPlan_Full.addWindFac1(builder, windFac1);
  FlightPlan_Full.addWindFac2(builder, windFac2);
  FlightPlan_Full.addWindFacAvg(builder, windFacAvg);
  FlightPlan_Full.addAvgTempDev(builder, avgTempDev);
  FlightPlan_Full.addAtcAddresses(builder, atcAddressesOffset);
  FlightPlan_Full.addOriginator(builder, originatorOffset);
  FlightPlan_Full.addNumAircraft(builder, numAircraft);
  FlightPlan_Full.addFlightRules(builder, flightRulesOffset);
  FlightPlan_Full.addFlightType(builder, flightTypeOffset);
  FlightPlan_Full.addInitialCruiseSpeed(builder, initialCruiseSpeedOffset);
  FlightPlan_Full.addInitialFlightLevel(builder, initialFlightLevelOffset);
  FlightPlan_Full.addArrAlternate1(builder, arrAlternate1Offset);
  FlightPlan_Full.addArrAlternate2(builder, arrAlternate2Offset);
  FlightPlan_Full.addDepAlternate(builder, depAlternateOffset);
  FlightPlan_Full.addWakeTurbCat(builder, wakeTurbCatOffset);
  FlightPlan_Full.addEquipment(builder, equipmentOffset);
  FlightPlan_Full.addNotes(builder, notesOffset);
  FlightPlan_Full.addCreatedAt(builder, createdAtOffset);
  FlightPlan_Full.addCreatedBy(builder, createdByOffset);
  FlightPlan_Full.addSourceDl(builder, sourceDlOffset);
  FlightPlan_Full.addSource(builder, sourceOffset);
  FlightPlan_Full.addOrigin(builder, originOffset);
  FlightPlan_Full.addOrigNetwork(builder, origNetworkOffset);
  FlightPlan_Full.addDataMode(builder, dataMode);
  FlightPlan_Full.addAirRefuelEvents(builder, airRefuelEventsOffset);
  FlightPlan_Full.addFlightPlanMessages(builder, flightPlanMessagesOffset);
  FlightPlan_Full.addFlightPlanWaypoints(builder, flightPlanWaypointsOffset);
  FlightPlan_Full.addFlightPlanPointGroups(builder, flightPlanPointGroupsOffset);
  return FlightPlan_Full.endFlightPlan_Full(builder);
}

unpack(): FlightPlan_FullT {
  return new FlightPlan_FullT(
    this.id(),
    this.classificationMarking(),
    this.amcMissionId(),
    this.idSortie(),
    this.idAircraft(),
    this.legNum(),
    this.idDepAirfield(),
    this.depAirfield(),
    this.idArrAirfield(),
    this.arrAirfield(),
    this.externalId(),
    this.genTs(),
    this.aircraftMds(),
    this.tailNumber(),
    this.callSign(),
    this.wxValidStart(),
    this.wxValidEnd(),
    this.estDepTime(),
    this.dragIndex(),
    this.fuelDegrade(),
    this.opWeight(),
    this.msnIndex(),
    this.rampFuel(),
    this.taxiFuel(),
    this.takeoffFuel(),
    this.climbFuel(),
    this.climbTime(),
    this.holdDownFuel(),
    this.tocIceFuel(),
    this.tocFuel(),
    this.enrouteFuel(),
    this.enrouteTime(),
    this.thunderAvoidFuel(),
    this.todIceFuel(),
    this.opConditionFuel(),
    this.todFuel(),
    this.earlyDescentFuel(),
    this.arrIceFuel(),
    this.holdFuel(),
    this.holdTime(),
    this.appLandingFuel(),
    this.burnedFuel(),
    this.landingFuel(),
    this.minDivertFuel(),
    this.arrAlternate1Fuel(),
    this.arrAlternate2Fuel(),
    this.contingencyFuel(),
    this.reserveFuel(),
    this.depressFuel(),
    this.unusableFuel(),
    this.unidentExtraFuel(),
    this.identExtraFuel(),
    this.remAlternate1Fuel(),
    this.remAlternate2Fuel(),
    this.enduranceTime(),
    this.sid(),
    this.star(),
    this.gpsRaim(),
    this.depRunway(),
    this.arrRunway(),
    this.routeString(),
    this.bb!.createScalarList<string>(this.countryCodes.bind(this), this.countryCodes_Length()),
    this.etopsRating(),
    this.bb!.createScalarList<string>(this.etopsAirfields.bind(this), this.etopsAirfields_Length()),
    this.bb!.createScalarList<string>(this.etopsAltAirfields.bind(this), this.etopsAltAirfields_Length()),
    this.etopsValWindow(),
    this.plannerRemark(),
    this.cargoRemark(),
    this.windFac1(),
    this.windFac2(),
    this.windFacAvg(),
    this.avgTempDev(),
    this.bb!.createScalarList<string>(this.atcAddresses.bind(this), this.atcAddresses_Length()),
    this.originator(),
    this.numAircraft(),
    this.flightRules(),
    this.flightType(),
    this.initialCruiseSpeed(),
    this.initialFlightLevel(),
    this.arrAlternate1(),
    this.arrAlternate2(),
    this.depAlternate(),
    this.wakeTurbCat(),
    this.equipment(),
    this.notes(),
    this.createdAt(),
    this.createdBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.bb!.createScalarList<string>(this.airRefuelEvents.bind(this), this.airRefuelEvents_Length()),
    this.bb!.createScalarList<string>(this.flightPlanMessages.bind(this), this.flightPlanMessages_Length()),
    this.bb!.createScalarList<string>(this.flightPlanWaypoints.bind(this), this.flightPlanWaypoints_Length()),
    this.bb!.createScalarList<string>(this.flightPlanPointGroups.bind(this), this.flightPlanPointGroups_Length())
  );
}


unpackTo(_o: FlightPlan_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.amcMissionId = this.amcMissionId();
  _o.idSortie = this.idSortie();
  _o.idAircraft = this.idAircraft();
  _o.legNum = this.legNum();
  _o.idDepAirfield = this.idDepAirfield();
  _o.depAirfield = this.depAirfield();
  _o.idArrAirfield = this.idArrAirfield();
  _o.arrAirfield = this.arrAirfield();
  _o.externalId = this.externalId();
  _o.genTS = this.genTs();
  _o.aircraftMDS = this.aircraftMds();
  _o.tailNumber = this.tailNumber();
  _o.callSign = this.callSign();
  _o.wxValidStart = this.wxValidStart();
  _o.wxValidEnd = this.wxValidEnd();
  _o.estDepTime = this.estDepTime();
  _o.dragIndex = this.dragIndex();
  _o.fuelDegrade = this.fuelDegrade();
  _o.opWeight = this.opWeight();
  _o.msnIndex = this.msnIndex();
  _o.rampFuel = this.rampFuel();
  _o.taxiFuel = this.taxiFuel();
  _o.takeoffFuel = this.takeoffFuel();
  _o.climbFuel = this.climbFuel();
  _o.climbTime = this.climbTime();
  _o.holdDownFuel = this.holdDownFuel();
  _o.tocIceFuel = this.tocIceFuel();
  _o.tocFuel = this.tocFuel();
  _o.enrouteFuel = this.enrouteFuel();
  _o.enrouteTime = this.enrouteTime();
  _o.thunderAvoidFuel = this.thunderAvoidFuel();
  _o.todIceFuel = this.todIceFuel();
  _o.opConditionFuel = this.opConditionFuel();
  _o.todFuel = this.todFuel();
  _o.earlyDescentFuel = this.earlyDescentFuel();
  _o.arrIceFuel = this.arrIceFuel();
  _o.holdFuel = this.holdFuel();
  _o.holdTime = this.holdTime();
  _o.appLandingFuel = this.appLandingFuel();
  _o.burnedFuel = this.burnedFuel();
  _o.landingFuel = this.landingFuel();
  _o.minDivertFuel = this.minDivertFuel();
  _o.arrAlternate1Fuel = this.arrAlternate1Fuel();
  _o.arrAlternate2Fuel = this.arrAlternate2Fuel();
  _o.contingencyFuel = this.contingencyFuel();
  _o.reserveFuel = this.reserveFuel();
  _o.depressFuel = this.depressFuel();
  _o.unusableFuel = this.unusableFuel();
  _o.unidentExtraFuel = this.unidentExtraFuel();
  _o.identExtraFuel = this.identExtraFuel();
  _o.remAlternate1Fuel = this.remAlternate1Fuel();
  _o.remAlternate2Fuel = this.remAlternate2Fuel();
  _o.enduranceTime = this.enduranceTime();
  _o.sid = this.sid();
  _o.star = this.star();
  _o.gpsRAIM = this.gpsRaim();
  _o.depRunway = this.depRunway();
  _o.arrRunway = this.arrRunway();
  _o.routeString = this.routeString();
  _o.countryCodes = this.bb!.createScalarList<string>(this.countryCodes.bind(this), this.countryCodes_Length());
  _o.etopsRating = this.etopsRating();
  _o.etopsAirfields = this.bb!.createScalarList<string>(this.etopsAirfields.bind(this), this.etopsAirfields_Length());
  _o.etopsAltAirfields = this.bb!.createScalarList<string>(this.etopsAltAirfields.bind(this), this.etopsAltAirfields_Length());
  _o.etopsValWindow = this.etopsValWindow();
  _o.plannerRemark = this.plannerRemark();
  _o.cargoRemark = this.cargoRemark();
  _o.windFac1 = this.windFac1();
  _o.windFac2 = this.windFac2();
  _o.windFacAvg = this.windFacAvg();
  _o.avgTempDev = this.avgTempDev();
  _o.atcAddresses = this.bb!.createScalarList<string>(this.atcAddresses.bind(this), this.atcAddresses_Length());
  _o.originator = this.originator();
  _o.numAircraft = this.numAircraft();
  _o.flightRules = this.flightRules();
  _o.flightType = this.flightType();
  _o.initialCruiseSpeed = this.initialCruiseSpeed();
  _o.initialFlightLevel = this.initialFlightLevel();
  _o.arrAlternate1 = this.arrAlternate1();
  _o.arrAlternate2 = this.arrAlternate2();
  _o.depAlternate = this.depAlternate();
  _o.wakeTurbCat = this.wakeTurbCat();
  _o.equipment = this.equipment();
  _o.notes = this.notes();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.airRefuelEvents = this.bb!.createScalarList<string>(this.airRefuelEvents.bind(this), this.airRefuelEvents_Length());
  _o.flightPlanMessages = this.bb!.createScalarList<string>(this.flightPlanMessages.bind(this), this.flightPlanMessages_Length());
  _o.flightPlanWaypoints = this.bb!.createScalarList<string>(this.flightPlanWaypoints.bind(this), this.flightPlanWaypoints_Length());
  _o.flightPlanPointGroups = this.bb!.createScalarList<string>(this.flightPlanPointGroups.bind(this), this.flightPlanPointGroups_Length());
}
}

export class FlightPlan_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public amcMissionId: string|Uint8Array|null = null,
  public idSortie: string|Uint8Array|null = null,
  public idAircraft: string|Uint8Array|null = null,
  public legNum: number = 0,
  public idDepAirfield: string|Uint8Array|null = null,
  public depAirfield: string|Uint8Array|null = null,
  public idArrAirfield: string|Uint8Array|null = null,
  public arrAirfield: string|Uint8Array|null = null,
  public externalId: string|Uint8Array|null = null,
  public genTS: string|Uint8Array|null = null,
  public aircraftMDS: string|Uint8Array|null = null,
  public tailNumber: string|Uint8Array|null = null,
  public callSign: string|Uint8Array|null = null,
  public wxValidStart: string|Uint8Array|null = null,
  public wxValidEnd: string|Uint8Array|null = null,
  public estDepTime: string|Uint8Array|null = null,
  public dragIndex: number = 0.0,
  public fuelDegrade: number = 0.0,
  public opWeight: number = 0.0,
  public msnIndex: number = 0.0,
  public rampFuel: number = 0.0,
  public taxiFuel: number = 0.0,
  public takeoffFuel: number = 0.0,
  public climbFuel: number = 0.0,
  public climbTime: string|Uint8Array|null = null,
  public holdDownFuel: number = 0.0,
  public tocIceFuel: number = 0.0,
  public tocFuel: number = 0.0,
  public enrouteFuel: number = 0.0,
  public enrouteTime: string|Uint8Array|null = null,
  public thunderAvoidFuel: number = 0.0,
  public todIceFuel: number = 0.0,
  public opConditionFuel: number = 0.0,
  public todFuel: number = 0.0,
  public earlyDescentFuel: number = 0.0,
  public arrIceFuel: number = 0.0,
  public holdFuel: number = 0.0,
  public holdTime: string|Uint8Array|null = null,
  public appLandingFuel: number = 0.0,
  public burnedFuel: number = 0.0,
  public landingFuel: number = 0.0,
  public minDivertFuel: number = 0.0,
  public arrAlternate1Fuel: number = 0.0,
  public arrAlternate2Fuel: number = 0.0,
  public contingencyFuel: number = 0.0,
  public reserveFuel: number = 0.0,
  public depressFuel: number = 0.0,
  public unusableFuel: number = 0.0,
  public unidentExtraFuel: number = 0.0,
  public identExtraFuel: number = 0.0,
  public remAlternate1Fuel: number = 0.0,
  public remAlternate2Fuel: number = 0.0,
  public enduranceTime: string|Uint8Array|null = null,
  public sid: string|Uint8Array|null = null,
  public star: string|Uint8Array|null = null,
  public gpsRAIM: string|Uint8Array|null = null,
  public depRunway: string|Uint8Array|null = null,
  public arrRunway: string|Uint8Array|null = null,
  public routeString: string|Uint8Array|null = null,
  public countryCodes: (string)[] = [],
  public etopsRating: string|Uint8Array|null = null,
  public etopsAirfields: (string)[] = [],
  public etopsAltAirfields: (string)[] = [],
  public etopsValWindow: string|Uint8Array|null = null,
  public plannerRemark: string|Uint8Array|null = null,
  public cargoRemark: string|Uint8Array|null = null,
  public windFac1: number = 0.0,
  public windFac2: number = 0.0,
  public windFacAvg: number = 0.0,
  public avgTempDev: number = 0.0,
  public atcAddresses: (string)[] = [],
  public originator: string|Uint8Array|null = null,
  public numAircraft: number = 0,
  public flightRules: string|Uint8Array|null = null,
  public flightType: string|Uint8Array|null = null,
  public initialCruiseSpeed: string|Uint8Array|null = null,
  public initialFlightLevel: string|Uint8Array|null = null,
  public arrAlternate1: string|Uint8Array|null = null,
  public arrAlternate2: string|Uint8Array|null = null,
  public depAlternate: string|Uint8Array|null = null,
  public wakeTurbCat: string|Uint8Array|null = null,
  public equipment: string|Uint8Array|null = null,
  public notes: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: FlightPlan_Full_dataMode_Enum = FlightPlan_Full_dataMode_Enum.REAL,
  public airRefuelEvents: (string)[] = [],
  public flightPlanMessages: (string)[] = [],
  public flightPlanWaypoints: (string)[] = [],
  public flightPlanPointGroups: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const amcMissionId = (this.amcMissionId !== null ? builder.createString(this.amcMissionId!) : 0);
  const idSortie = (this.idSortie !== null ? builder.createString(this.idSortie!) : 0);
  const idAircraft = (this.idAircraft !== null ? builder.createString(this.idAircraft!) : 0);
  const idDepAirfield = (this.idDepAirfield !== null ? builder.createString(this.idDepAirfield!) : 0);
  const depAirfield = (this.depAirfield !== null ? builder.createString(this.depAirfield!) : 0);
  const idArrAirfield = (this.idArrAirfield !== null ? builder.createString(this.idArrAirfield!) : 0);
  const arrAirfield = (this.arrAirfield !== null ? builder.createString(this.arrAirfield!) : 0);
  const externalId = (this.externalId !== null ? builder.createString(this.externalId!) : 0);
  const genTS = (this.genTS !== null ? builder.createString(this.genTS!) : 0);
  const aircraftMDS = (this.aircraftMDS !== null ? builder.createString(this.aircraftMDS!) : 0);
  const tailNumber = (this.tailNumber !== null ? builder.createString(this.tailNumber!) : 0);
  const callSign = (this.callSign !== null ? builder.createString(this.callSign!) : 0);
  const wxValidStart = (this.wxValidStart !== null ? builder.createString(this.wxValidStart!) : 0);
  const wxValidEnd = (this.wxValidEnd !== null ? builder.createString(this.wxValidEnd!) : 0);
  const estDepTime = (this.estDepTime !== null ? builder.createString(this.estDepTime!) : 0);
  const climbTime = (this.climbTime !== null ? builder.createString(this.climbTime!) : 0);
  const enrouteTime = (this.enrouteTime !== null ? builder.createString(this.enrouteTime!) : 0);
  const holdTime = (this.holdTime !== null ? builder.createString(this.holdTime!) : 0);
  const enduranceTime = (this.enduranceTime !== null ? builder.createString(this.enduranceTime!) : 0);
  const sid = (this.sid !== null ? builder.createString(this.sid!) : 0);
  const star = (this.star !== null ? builder.createString(this.star!) : 0);
  const gpsRAIM = (this.gpsRAIM !== null ? builder.createString(this.gpsRAIM!) : 0);
  const depRunway = (this.depRunway !== null ? builder.createString(this.depRunway!) : 0);
  const arrRunway = (this.arrRunway !== null ? builder.createString(this.arrRunway!) : 0);
  const routeString = (this.routeString !== null ? builder.createString(this.routeString!) : 0);
  const countryCodes = FlightPlan_Full.createCountryCodesVector(builder, builder.createObjectOffsetList(this.countryCodes));
  const etopsRating = (this.etopsRating !== null ? builder.createString(this.etopsRating!) : 0);
  const etopsAirfields = FlightPlan_Full.createEtopsAirfieldsVector(builder, builder.createObjectOffsetList(this.etopsAirfields));
  const etopsAltAirfields = FlightPlan_Full.createEtopsAltAirfieldsVector(builder, builder.createObjectOffsetList(this.etopsAltAirfields));
  const etopsValWindow = (this.etopsValWindow !== null ? builder.createString(this.etopsValWindow!) : 0);
  const plannerRemark = (this.plannerRemark !== null ? builder.createString(this.plannerRemark!) : 0);
  const cargoRemark = (this.cargoRemark !== null ? builder.createString(this.cargoRemark!) : 0);
  const atcAddresses = FlightPlan_Full.createAtcAddressesVector(builder, builder.createObjectOffsetList(this.atcAddresses));
  const originator = (this.originator !== null ? builder.createString(this.originator!) : 0);
  const flightRules = (this.flightRules !== null ? builder.createString(this.flightRules!) : 0);
  const flightType = (this.flightType !== null ? builder.createString(this.flightType!) : 0);
  const initialCruiseSpeed = (this.initialCruiseSpeed !== null ? builder.createString(this.initialCruiseSpeed!) : 0);
  const initialFlightLevel = (this.initialFlightLevel !== null ? builder.createString(this.initialFlightLevel!) : 0);
  const arrAlternate1 = (this.arrAlternate1 !== null ? builder.createString(this.arrAlternate1!) : 0);
  const arrAlternate2 = (this.arrAlternate2 !== null ? builder.createString(this.arrAlternate2!) : 0);
  const depAlternate = (this.depAlternate !== null ? builder.createString(this.depAlternate!) : 0);
  const wakeTurbCat = (this.wakeTurbCat !== null ? builder.createString(this.wakeTurbCat!) : 0);
  const equipment = (this.equipment !== null ? builder.createString(this.equipment!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const airRefuelEvents = FlightPlan_Full.createAirRefuelEventsVector(builder, builder.createObjectOffsetList(this.airRefuelEvents));
  const flightPlanMessages = FlightPlan_Full.createFlightPlanMessagesVector(builder, builder.createObjectOffsetList(this.flightPlanMessages));
  const flightPlanWaypoints = FlightPlan_Full.createFlightPlanWaypointsVector(builder, builder.createObjectOffsetList(this.flightPlanWaypoints));
  const flightPlanPointGroups = FlightPlan_Full.createFlightPlanPointGroupsVector(builder, builder.createObjectOffsetList(this.flightPlanPointGroups));

  return FlightPlan_Full.createFlightPlan_Full(builder,
    id,
    classificationMarking,
    amcMissionId,
    idSortie,
    idAircraft,
    this.legNum,
    idDepAirfield,
    depAirfield,
    idArrAirfield,
    arrAirfield,
    externalId,
    genTS,
    aircraftMDS,
    tailNumber,
    callSign,
    wxValidStart,
    wxValidEnd,
    estDepTime,
    this.dragIndex,
    this.fuelDegrade,
    this.opWeight,
    this.msnIndex,
    this.rampFuel,
    this.taxiFuel,
    this.takeoffFuel,
    this.climbFuel,
    climbTime,
    this.holdDownFuel,
    this.tocIceFuel,
    this.tocFuel,
    this.enrouteFuel,
    enrouteTime,
    this.thunderAvoidFuel,
    this.todIceFuel,
    this.opConditionFuel,
    this.todFuel,
    this.earlyDescentFuel,
    this.arrIceFuel,
    this.holdFuel,
    holdTime,
    this.appLandingFuel,
    this.burnedFuel,
    this.landingFuel,
    this.minDivertFuel,
    this.arrAlternate1Fuel,
    this.arrAlternate2Fuel,
    this.contingencyFuel,
    this.reserveFuel,
    this.depressFuel,
    this.unusableFuel,
    this.unidentExtraFuel,
    this.identExtraFuel,
    this.remAlternate1Fuel,
    this.remAlternate2Fuel,
    enduranceTime,
    sid,
    star,
    gpsRAIM,
    depRunway,
    arrRunway,
    routeString,
    countryCodes,
    etopsRating,
    etopsAirfields,
    etopsAltAirfields,
    etopsValWindow,
    plannerRemark,
    cargoRemark,
    this.windFac1,
    this.windFac2,
    this.windFacAvg,
    this.avgTempDev,
    atcAddresses,
    originator,
    this.numAircraft,
    flightRules,
    flightType,
    initialCruiseSpeed,
    initialFlightLevel,
    arrAlternate1,
    arrAlternate2,
    depAlternate,
    wakeTurbCat,
    equipment,
    notes,
    createdAt,
    createdBy,
    sourceDL,
    source,
    origin,
    origNetwork,
    this.dataMode,
    airRefuelEvents,
    flightPlanMessages,
    flightPlanWaypoints,
    flightPlanPointGroups
  );
}
}
