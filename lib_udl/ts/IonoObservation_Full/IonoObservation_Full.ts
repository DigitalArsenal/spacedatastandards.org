// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum } from './IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum.js';
import { IonoObservation_Full_dataMode_Enum } from './IonoObservation_Full_dataMode_Enum.js';
import { IonoObservation_Full_receiveSensorType_Enum } from './IonoObservation_Full_receiveSensorType_Enum.js';
import { IonoObservation_Full_transmitSensorType_Enum } from './IonoObservation_Full_transmitSensorType_Enum.js';


/**
 * /// These services provide operations for posting and querying ionospheric observation data. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
 */
export class IonoObservation_Full implements flatbuffers.IUnpackableObject<IonoObservation_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IonoObservation_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIonoObservation_Full(bb:flatbuffers.ByteBuffer, obj?:IonoObservation_Full):IonoObservation_Full {
  return (obj || new IonoObservation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIonoObservation_Full(bb:flatbuffers.ByteBuffer, obj?:IonoObservation_Full):IonoObservation_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IonoObservation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('IONO');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: IONOOBSERVATION-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the reporting sensor.
 * Example: /// Example: SENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ionosonde hardware type or data collection type together with possible additional descriptors.
 * Example: /// Example: Example hardware type
 * Constraints: Minimum length = 1, Maximum length = 64
 */
system():string|null
system(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
system(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the algorithm used for the electron density profile.
 * Example: /// Example: NH
 * Constraints: Minimum length = 0, Maximum length = 64
 */
neProfileName():string|null
neProfileName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
neProfileName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Version of the algorithm used for the electron density profile.
 * Example: /// Example: 4.32
 * Constraints: No constraints specified.
 */
neProfileVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
scalerInfo():string|null
scalerInfo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scalerInfo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
densityProfile():string|null
densityProfile(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
densityProfile(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * URSI code for station or stations producing the ionosonde.
 * Example: /// Example: STATION-ID
 * Constraints: Minimum length = 1, Maximum length = 64
 */
stationId():string|null
stationId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stationId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sounding Start time in ISO8601 UTC format.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
startTimeUtc():string|null
startTimeUtc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTimeUtc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Names of settings.
 * Example: /// Example: Example settings
 * Constraints: Minimum length = 1, Maximum length = 1024
 */
systemInfo():string|null
systemInfo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
systemInfo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
systemNotes():string|null
systemNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
systemNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
 * Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
 * Constraints: No constraints specified.
 */
transmitCoordinates(index: number):string
transmitCoordinates(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
transmitCoordinates(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

transmitCoordinatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Enums: Mobile, Static.
 * Example: /// Example: Mobile
 * Constraints: Minimum length = 0, Maximum length = 16
 */
transmitSensorType():IonoObservation_Full_transmitSensorType_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : IonoObservation_Full_transmitSensorType_Enum.MOBILE;
}

/**
 * List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
 * Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
 * Constraints: No constraints specified.
 */
receiveCoordinates(index: number):string
receiveCoordinates(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
receiveCoordinates(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

receiveCoordinatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Enums: Mobile, Static.
 * Example: /// Example: Mobile
 * Constraints: Minimum length = 0, Maximum length = 16
 */
receiveSensorType():IonoObservation_Full_receiveSensorType_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : IonoObservation_Full_receiveSensorType_Enum.MOBILE;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
antennaElementPosition():string|null
antennaElementPosition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
antennaElementPosition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).
 * Example: /// Example: J2000
 * Constraints: Minimum length = 0, Maximum length = 32
 */
antennaElementPositionCoordinateSystem():IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum.J2000;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
power():string|null
power(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
power(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
range():string|null
range(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
range(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
frequency():string|null
frequency(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
frequency(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
polarization():string|null
polarization(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
polarization(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
azimuth():string|null
azimuth(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
azimuth(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
elevation():string|null
elevation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
elevation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of restricted frequencies.
 * Example: /// Example: [12.5, 34.5, 45.3]
 * Constraints: No constraints specified.
 */
restrictedFrequency(index: number):string
restrictedFrequency(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
restrictedFrequency(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

restrictedFrequencyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Notes for the restrictedFrequency data.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 512
 */
restrictedFrequencyNotes():string|null
restrictedFrequencyNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
restrictedFrequencyNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
doppler():string|null
doppler(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
doppler(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
time():string|null
time(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
time(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
stokes():string|null
stokes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stokes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
amplitude():string|null
amplitude(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
amplitude(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
phase():string|null
phase(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
phase(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.
 * Example: /// Example: 6.75
 * Constraints: No constraints specified.
 */
foF2():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.
 * Example: /// Example: 8.2
 * Constraints: No constraints specified.
 */
foF1():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.
 * Example: /// Example: 4.5
 * Constraints: No constraints specified.
 */
fxF2():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.
 * Example: /// Example: 4.2
 * Constraints: No constraints specified.
 */
fxF1():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * MUF(D)/foF2.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
md():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Lowest usable frequency.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
luf():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum Usable Frequency for ground distance D in MHz.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
mufd():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.
 * Example: /// Example: 2.025
 * Constraints: No constraints specified.
 */
fmin():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.
 * Example: /// Example: 2.35
 * Constraints: No constraints specified.
 */
foEs():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum frequency of F layer echoes in MHz. URSI ID: 80.
 * Example: /// Example: 2.7
 * Constraints: No constraints specified.
 */
fminF():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum frequency of E layer echoes in MHz. URSI ID: 81.
 * Example: /// Example: 2.025
 * Constraints: No constraints specified.
 */
fminE():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
foE():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The extraordinary wave E critical frequency, in MHz. URSI ID: 21.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
fxE():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.
 * Example: /// Example: 7.525
 * Constraints: No constraints specified.
 */
fxI():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.
 * Example: /// Example: 238.5
 * Constraints: No constraints specified.
 */
hprimeF():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.
 * Example: /// Example: 238.5
 * Constraints: No constraints specified.
 */
hprimeF2():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.
 * Example: /// Example: 230.1
 * Constraints: No constraints specified.
 */
hprimeF1():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The minimum virtual height of the normal E layer trace in km. URSI ID: 24.
 * Example: /// Example: 98.47
 * Constraints: No constraints specified.
 */
hprimeE():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The minimum height of the trace used to give foEs in km. URSI ID: 34.
 * Example: /// Example: 95
 * Constraints: No constraints specified.
 */
hprimeEs():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Peak height of E-layer in km. URSI ID: 90.
 * Example: /// Example: 91.744
 * Constraints: No constraints specified.
 */
zmE():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Parabolic E layer semi-thickness in km. URSI ID: 83.
 * Example: /// Example: 1.722
 * Constraints: No constraints specified.
 */
yE():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average range spread of F layer in km. URSI ID: 84.
 * Example: /// Example: 1.83
 * Constraints: No constraints specified.
 */
qf():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average range spread of E layer in km. URSI ID: 85.
 * Example: /// Example: 0.95
 * Constraints: No constraints specified.
 */
qe():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Lowering of F trace to the leading edge in km.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
downF():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Lowering of E trace to the leading edge in km.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
downE():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Lowering of Es trace to the leading edge in km.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
downEs():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.
 * Example: /// Example: 0.075
 * Constraints: No constraints specified.
 */
ff():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Frequency spread beyond foE in MHz. URSI ID: 87.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
fe():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Distance for MUF calculation in km.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
d():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * MUF/OblFactor in MHz.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
fmuf():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Virtual height at MUF/OblFactor frequency in MHz.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
hprimefMuf():number {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Adjustment to the scaled foF2 during profile inversion in MHz.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
deltafoF2():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Predicted value of foE in MHz.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
foEp():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The frequency at which hprimeF is measured in MHz. URSI ID: 61.
 * Example: /// Example: 2.5
 * Constraints: No constraints specified.
 */
fhprimeF():number {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.
 * Example: /// Example: 2.5
 * Constraints: No constraints specified.
 */
fhprimeF2():number {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Predicted value of foF1 in MHz.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
foF1p():number {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Predicted value of foF2 in MHz.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
foF2p():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * True height of the F2 peak in km. URSI ID: AE.
 * Example: /// Example: 240.498
 * Constraints: No constraints specified.
 */
hmF2():number {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * True height of the F1 peak in km. URSI ID: BE.
 * Example: /// Example: 230.128
 * Constraints: No constraints specified.
 */
hmF1():number {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * True height of the E peak in km. URSI ID: CE.
 * Example: /// Example: 215.643
 * Constraints: No constraints specified.
 */
hmE():number {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * True height at half peak electron density in the F2 layer in km. URSI ID: 93.
 * Example: /// Example: 240.498
 * Constraints: No constraints specified.
 */
zhalfNm():number {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum frequency of Es layer in MHz.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
fminEs():number {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Parabolic F2 layer semi-thickness in km. URSI ID: 94.
 * Example: /// Example: 62.178
 * Constraints: No constraints specified.
 */
yF2():number {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Parabolic F1 layer semi-thickness in km. URSI ID: 95.
 * Example: /// Example: 55.645
 * Constraints: No constraints specified.
 */
yF1():number {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.
 * Example: /// Example: 24.673
 * Constraints: No constraints specified.
 */
tec():number {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.
 * Example: /// Example: 35.613
 * Constraints: No constraints specified.
 */
scaleHeightF2Peak():number {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * IRI thickness parameter in km. URSI ID: D0.
 * Example: /// Example: 68.07
 * Constraints: No constraints specified.
 */
b0():number {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * IRI profile shape parameter. URSI ID: D1.
 * Example: /// Example: 1.87
 * Constraints: No constraints specified.
 */
b1():number {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * IRI profile shape parameter, F1 layer. URSI ID: D2.
 * Example: /// Example: 1.94
 * Constraints: No constraints specified.
 */
d1():number {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Critical frequency of night time auroral E layer in MHz. URSI ID: 23.
 * Example: /// Example: 45.764
 * Constraints: No constraints specified.
 */
foEa():number {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.
 * Example: /// Example: 102.6
 * Constraints: No constraints specified.
 */
hprimeEa():number {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.
 * Example: /// Example: 87.21
 * Constraints: No constraints specified.
 */
foP():number {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.
 * Example: /// Example: 89.45
 * Constraints: No constraints specified.
 */
hprimeP():number {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.
 * Example: /// Example: 34.867
 * Constraints: No constraints specified.
 */
fbEs():number {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Characterization of the shape of Es trace. URSI ID: 36.
 * Example: /// Example: Auroral
 * Constraints: Minimum length = 0, Maximum length = 25
 */
typeEs():string|null
typeEs(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
typeEs(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 176);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. 
 * Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
charAtts(index: number):string
charAtts(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
charAtts(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 178);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

charAttsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 178);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
height(index: number):string
height(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
height(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 180);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

heightLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 180);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
plasmaFrequency(index: number):string
plasmaFrequency(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
plasmaFrequency(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 182);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

plasmaFrequencyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 182);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).
 * Example: /// Example: [0.8, 0.2, 0.5]
 * Constraints: No constraints specified.
 */
plasmaFrequencyUncertainty(index: number):string
plasmaFrequencyUncertainty(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
plasmaFrequencyUncertainty(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 184);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

plasmaFrequencyUncertaintyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 184);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
electronDensity(index: number):string
electronDensity(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
electronDensity(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 186);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

electronDensityLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 186);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).
 * Example: /// Example: [0.8, 0.2, 0.5]
 * Constraints: No constraints specified.
 */
electronDensityUncertainty(index: number):string
electronDensityUncertainty(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
electronDensityUncertainty(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 188);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

electronDensityUncertaintyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 188);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of Legacy Artist Flags.
 * Example: /// Example: [1, 2, 3]
 * Constraints: No constraints specified.
 */
artistFlags(index: number):string
artistFlags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
artistFlags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 190);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

artistFlagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 190);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
traceGeneric():string|null
traceGeneric(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
traceGeneric(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 192);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of speed in m/s at which the disturbance travels through the ionosphere.
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
tidPhaseSpeeds(index: number):string
tidPhaseSpeeds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tidPhaseSpeeds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 194);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tidPhaseSpeedsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 194);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of degrees clockwise from true North of the TID.
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
tidAzimuth(index: number):string
tidAzimuth(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tidAzimuth(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 196);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tidAzimuthLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 196);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of 1/frequency of the TID wave.
 * Example: /// Example: [1.1, 2.1, 3.1]
 * Constraints: No constraints specified.
 */
tidPeriods(index: number):string
tidPeriods(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tidPeriods(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 198);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tidPeriodsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 198);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
datum():string|null
datum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
datum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 200);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Equipment location.
 * Example: /// Example: Millstone Hill
 * Constraints: Minimum length = 0, Maximum length = 512
 */
platformName():string|null
platformName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
platformName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 202);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 204);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 206);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 208);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 210);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 212);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 214);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():IonoObservation_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 216);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : IonoObservation_Full_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 218);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startIonoObservation_Full(builder:flatbuffers.Builder) {
  builder.startObject(108);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idSensorOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, origSensorIdOffset, 0);
}

static addSystem(builder:flatbuffers.Builder, systemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, systemOffset, 0);
}

static addNeProfileName(builder:flatbuffers.Builder, neProfileNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, neProfileNameOffset, 0);
}

static addNeProfileVersion(builder:flatbuffers.Builder, neProfileVersion:number) {
  builder.addFieldFloat64(6, neProfileVersion, 0.0);
}

static addScalerInfo(builder:flatbuffers.Builder, scalerInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, scalerInfoOffset, 0);
}

static addDensityProfile(builder:flatbuffers.Builder, densityProfileOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, densityProfileOffset, 0);
}

static addStationId(builder:flatbuffers.Builder, stationIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, stationIdOffset, 0);
}

static addStartTimeUtc(builder:flatbuffers.Builder, startTimeUtcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, startTimeUtcOffset, 0);
}

static addSystemInfo(builder:flatbuffers.Builder, systemInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, systemInfoOffset, 0);
}

static addSystemNotes(builder:flatbuffers.Builder, systemNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, systemNotesOffset, 0);
}

static addTransmitCoordinates(builder:flatbuffers.Builder, transmitCoordinatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, transmitCoordinatesOffset, 0);
}

static createTransmitCoordinatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTransmitCoordinatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTransmitSensorType(builder:flatbuffers.Builder, transmitSensorType:IonoObservation_Full_transmitSensorType_Enum) {
  builder.addFieldInt8(14, transmitSensorType, IonoObservation_Full_transmitSensorType_Enum.MOBILE);
}

static addReceiveCoordinates(builder:flatbuffers.Builder, receiveCoordinatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, receiveCoordinatesOffset, 0);
}

static createReceiveCoordinatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startReceiveCoordinatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addReceiveSensorType(builder:flatbuffers.Builder, receiveSensorType:IonoObservation_Full_receiveSensorType_Enum) {
  builder.addFieldInt8(16, receiveSensorType, IonoObservation_Full_receiveSensorType_Enum.MOBILE);
}

static addAntennaElementPosition(builder:flatbuffers.Builder, antennaElementPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, antennaElementPositionOffset, 0);
}

static addAntennaElementPositionCoordinateSystem(builder:flatbuffers.Builder, antennaElementPositionCoordinateSystem:IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum) {
  builder.addFieldInt8(18, antennaElementPositionCoordinateSystem, IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum.J2000);
}

static addPower(builder:flatbuffers.Builder, powerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, powerOffset, 0);
}

static addRange(builder:flatbuffers.Builder, rangeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, rangeOffset, 0);
}

static addFrequency(builder:flatbuffers.Builder, frequencyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, frequencyOffset, 0);
}

static addPolarization(builder:flatbuffers.Builder, polarizationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, polarizationOffset, 0);
}

static addAzimuth(builder:flatbuffers.Builder, azimuthOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, azimuthOffset, 0);
}

static addElevation(builder:flatbuffers.Builder, elevationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, elevationOffset, 0);
}

static addRestrictedFrequency(builder:flatbuffers.Builder, restrictedFrequencyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, restrictedFrequencyOffset, 0);
}

static createRestrictedFrequencyVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRestrictedFrequencyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRestrictedFrequencyNotes(builder:flatbuffers.Builder, restrictedFrequencyNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, restrictedFrequencyNotesOffset, 0);
}

static addDoppler(builder:flatbuffers.Builder, dopplerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, dopplerOffset, 0);
}

static addTime(builder:flatbuffers.Builder, timeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, timeOffset, 0);
}

static addStokes(builder:flatbuffers.Builder, stokesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, stokesOffset, 0);
}

static addAmplitude(builder:flatbuffers.Builder, amplitudeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, amplitudeOffset, 0);
}

static addPhase(builder:flatbuffers.Builder, phaseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, phaseOffset, 0);
}

static addFoF2(builder:flatbuffers.Builder, foF2:number) {
  builder.addFieldFloat64(32, foF2, 0.0);
}

static addFoF1(builder:flatbuffers.Builder, foF1:number) {
  builder.addFieldFloat64(33, foF1, 0.0);
}

static addFxF2(builder:flatbuffers.Builder, fxF2:number) {
  builder.addFieldFloat64(34, fxF2, 0.0);
}

static addFxF1(builder:flatbuffers.Builder, fxF1:number) {
  builder.addFieldFloat64(35, fxF1, 0.0);
}

static addMd(builder:flatbuffers.Builder, md:number) {
  builder.addFieldFloat64(36, md, 0.0);
}

static addLuf(builder:flatbuffers.Builder, luf:number) {
  builder.addFieldFloat64(37, luf, 0.0);
}

static addMufd(builder:flatbuffers.Builder, mufd:number) {
  builder.addFieldFloat64(38, mufd, 0.0);
}

static addFmin(builder:flatbuffers.Builder, fmin:number) {
  builder.addFieldFloat64(39, fmin, 0.0);
}

static addFoEs(builder:flatbuffers.Builder, foEs:number) {
  builder.addFieldFloat64(40, foEs, 0.0);
}

static addFminF(builder:flatbuffers.Builder, fminF:number) {
  builder.addFieldFloat64(41, fminF, 0.0);
}

static addFminE(builder:flatbuffers.Builder, fminE:number) {
  builder.addFieldFloat64(42, fminE, 0.0);
}

static addFoE(builder:flatbuffers.Builder, foE:number) {
  builder.addFieldFloat64(43, foE, 0.0);
}

static addFxE(builder:flatbuffers.Builder, fxE:number) {
  builder.addFieldFloat64(44, fxE, 0.0);
}

static addFxI(builder:flatbuffers.Builder, fxI:number) {
  builder.addFieldFloat64(45, fxI, 0.0);
}

static addHprimeF(builder:flatbuffers.Builder, hprimeF:number) {
  builder.addFieldFloat64(46, hprimeF, 0.0);
}

static addHprimeF2(builder:flatbuffers.Builder, hprimeF2:number) {
  builder.addFieldFloat64(47, hprimeF2, 0.0);
}

static addHprimeF1(builder:flatbuffers.Builder, hprimeF1:number) {
  builder.addFieldFloat64(48, hprimeF1, 0.0);
}

static addHprimeE(builder:flatbuffers.Builder, hprimeE:number) {
  builder.addFieldFloat64(49, hprimeE, 0.0);
}

static addHprimeEs(builder:flatbuffers.Builder, hprimeEs:number) {
  builder.addFieldFloat64(50, hprimeEs, 0.0);
}

static addZmE(builder:flatbuffers.Builder, zmE:number) {
  builder.addFieldFloat64(51, zmE, 0.0);
}

static addYE(builder:flatbuffers.Builder, yE:number) {
  builder.addFieldFloat64(52, yE, 0.0);
}

static addQf(builder:flatbuffers.Builder, qf:number) {
  builder.addFieldFloat64(53, qf, 0.0);
}

static addQe(builder:flatbuffers.Builder, qe:number) {
  builder.addFieldFloat64(54, qe, 0.0);
}

static addDownF(builder:flatbuffers.Builder, downF:number) {
  builder.addFieldFloat64(55, downF, 0.0);
}

static addDownE(builder:flatbuffers.Builder, downE:number) {
  builder.addFieldFloat64(56, downE, 0.0);
}

static addDownEs(builder:flatbuffers.Builder, downEs:number) {
  builder.addFieldFloat64(57, downEs, 0.0);
}

static addFf(builder:flatbuffers.Builder, ff:number) {
  builder.addFieldFloat64(58, ff, 0.0);
}

static addFe(builder:flatbuffers.Builder, fe:number) {
  builder.addFieldFloat64(59, fe, 0.0);
}

static addD(builder:flatbuffers.Builder, d:number) {
  builder.addFieldFloat64(60, d, 0.0);
}

static addFmuf(builder:flatbuffers.Builder, fmuf:number) {
  builder.addFieldFloat64(61, fmuf, 0.0);
}

static addHprimefMuf(builder:flatbuffers.Builder, hprimefMuf:number) {
  builder.addFieldFloat64(62, hprimefMuf, 0.0);
}

static addDeltafoF2(builder:flatbuffers.Builder, deltafoF2:number) {
  builder.addFieldFloat64(63, deltafoF2, 0.0);
}

static addFoEp(builder:flatbuffers.Builder, foEp:number) {
  builder.addFieldFloat64(64, foEp, 0.0);
}

static addFhprimeF(builder:flatbuffers.Builder, fhprimeF:number) {
  builder.addFieldFloat64(65, fhprimeF, 0.0);
}

static addFhprimeF2(builder:flatbuffers.Builder, fhprimeF2:number) {
  builder.addFieldFloat64(66, fhprimeF2, 0.0);
}

static addFoF1p(builder:flatbuffers.Builder, foF1p:number) {
  builder.addFieldFloat64(67, foF1p, 0.0);
}

static addFoF2p(builder:flatbuffers.Builder, foF2p:number) {
  builder.addFieldFloat64(68, foF2p, 0.0);
}

static addHmF2(builder:flatbuffers.Builder, hmF2:number) {
  builder.addFieldFloat64(69, hmF2, 0.0);
}

static addHmF1(builder:flatbuffers.Builder, hmF1:number) {
  builder.addFieldFloat64(70, hmF1, 0.0);
}

static addHmE(builder:flatbuffers.Builder, hmE:number) {
  builder.addFieldFloat64(71, hmE, 0.0);
}

static addZhalfNm(builder:flatbuffers.Builder, zhalfNm:number) {
  builder.addFieldFloat64(72, zhalfNm, 0.0);
}

static addFminEs(builder:flatbuffers.Builder, fminEs:number) {
  builder.addFieldFloat64(73, fminEs, 0.0);
}

static addYF2(builder:flatbuffers.Builder, yF2:number) {
  builder.addFieldFloat64(74, yF2, 0.0);
}

static addYF1(builder:flatbuffers.Builder, yF1:number) {
  builder.addFieldFloat64(75, yF1, 0.0);
}

static addTec(builder:flatbuffers.Builder, tec:number) {
  builder.addFieldFloat64(76, tec, 0.0);
}

static addScaleHeightF2Peak(builder:flatbuffers.Builder, scaleHeightF2Peak:number) {
  builder.addFieldFloat64(77, scaleHeightF2Peak, 0.0);
}

static addB0(builder:flatbuffers.Builder, b0:number) {
  builder.addFieldFloat64(78, b0, 0.0);
}

static addB1(builder:flatbuffers.Builder, b1:number) {
  builder.addFieldFloat64(79, b1, 0.0);
}

static addD1(builder:flatbuffers.Builder, d1:number) {
  builder.addFieldFloat64(80, d1, 0.0);
}

static addFoEa(builder:flatbuffers.Builder, foEa:number) {
  builder.addFieldFloat64(81, foEa, 0.0);
}

static addHprimeEa(builder:flatbuffers.Builder, hprimeEa:number) {
  builder.addFieldFloat64(82, hprimeEa, 0.0);
}

static addFoP(builder:flatbuffers.Builder, foP:number) {
  builder.addFieldFloat64(83, foP, 0.0);
}

static addHprimeP(builder:flatbuffers.Builder, hprimeP:number) {
  builder.addFieldFloat64(84, hprimeP, 0.0);
}

static addFbEs(builder:flatbuffers.Builder, fbEs:number) {
  builder.addFieldFloat64(85, fbEs, 0.0);
}

static addTypeEs(builder:flatbuffers.Builder, typeEsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(86, typeEsOffset, 0);
}

static addCharAtts(builder:flatbuffers.Builder, charAttsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(87, charAttsOffset, 0);
}

static createCharAttsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCharAttsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addHeight(builder:flatbuffers.Builder, heightOffset:flatbuffers.Offset) {
  builder.addFieldOffset(88, heightOffset, 0);
}

static createHeightVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startHeightVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPlasmaFrequency(builder:flatbuffers.Builder, plasmaFrequencyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(89, plasmaFrequencyOffset, 0);
}

static createPlasmaFrequencyVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlasmaFrequencyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPlasmaFrequencyUncertainty(builder:flatbuffers.Builder, plasmaFrequencyUncertaintyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(90, plasmaFrequencyUncertaintyOffset, 0);
}

static createPlasmaFrequencyUncertaintyVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlasmaFrequencyUncertaintyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addElectronDensity(builder:flatbuffers.Builder, electronDensityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(91, electronDensityOffset, 0);
}

static createElectronDensityVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startElectronDensityVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addElectronDensityUncertainty(builder:flatbuffers.Builder, electronDensityUncertaintyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(92, electronDensityUncertaintyOffset, 0);
}

static createElectronDensityUncertaintyVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startElectronDensityUncertaintyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addArtistFlags(builder:flatbuffers.Builder, artistFlagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(93, artistFlagsOffset, 0);
}

static createArtistFlagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startArtistFlagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTraceGeneric(builder:flatbuffers.Builder, traceGenericOffset:flatbuffers.Offset) {
  builder.addFieldOffset(94, traceGenericOffset, 0);
}

static addTidPhaseSpeeds(builder:flatbuffers.Builder, tidPhaseSpeedsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(95, tidPhaseSpeedsOffset, 0);
}

static createTidPhaseSpeedsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTidPhaseSpeedsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTidAzimuth(builder:flatbuffers.Builder, tidAzimuthOffset:flatbuffers.Offset) {
  builder.addFieldOffset(96, tidAzimuthOffset, 0);
}

static createTidAzimuthVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTidAzimuthVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTidPeriods(builder:flatbuffers.Builder, tidPeriodsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(97, tidPeriodsOffset, 0);
}

static createTidPeriodsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTidPeriodsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDatum(builder:flatbuffers.Builder, datumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(98, datumOffset, 0);
}

static addPlatformName(builder:flatbuffers.Builder, platformNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(99, platformNameOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(100, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(101, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(102, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(103, updatedByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(104, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(105, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:IonoObservation_Full_dataMode_Enum) {
  builder.addFieldInt8(106, dataMode, IonoObservation_Full_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(107, origNetworkOffset, 0);
}

static endIonoObservation_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishIonoObservation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO');
}

static finishSizePrefixedIonoObservation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO', true);
}

static createIonoObservation_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, systemOffset:flatbuffers.Offset, neProfileNameOffset:flatbuffers.Offset, neProfileVersion:number, scalerInfoOffset:flatbuffers.Offset, densityProfileOffset:flatbuffers.Offset, stationIdOffset:flatbuffers.Offset, startTimeUtcOffset:flatbuffers.Offset, systemInfoOffset:flatbuffers.Offset, systemNotesOffset:flatbuffers.Offset, transmitCoordinatesOffset:flatbuffers.Offset, transmitSensorType:IonoObservation_Full_transmitSensorType_Enum, receiveCoordinatesOffset:flatbuffers.Offset, receiveSensorType:IonoObservation_Full_receiveSensorType_Enum, antennaElementPositionOffset:flatbuffers.Offset, antennaElementPositionCoordinateSystem:IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum, powerOffset:flatbuffers.Offset, rangeOffset:flatbuffers.Offset, frequencyOffset:flatbuffers.Offset, polarizationOffset:flatbuffers.Offset, azimuthOffset:flatbuffers.Offset, elevationOffset:flatbuffers.Offset, restrictedFrequencyOffset:flatbuffers.Offset, restrictedFrequencyNotesOffset:flatbuffers.Offset, dopplerOffset:flatbuffers.Offset, timeOffset:flatbuffers.Offset, stokesOffset:flatbuffers.Offset, amplitudeOffset:flatbuffers.Offset, phaseOffset:flatbuffers.Offset, foF2:number, foF1:number, fxF2:number, fxF1:number, md:number, luf:number, mufd:number, fmin:number, foEs:number, fminF:number, fminE:number, foE:number, fxE:number, fxI:number, hprimeF:number, hprimeF2:number, hprimeF1:number, hprimeE:number, hprimeEs:number, zmE:number, yE:number, qf:number, qe:number, downF:number, downE:number, downEs:number, ff:number, fe:number, d:number, fmuf:number, hprimefMuf:number, deltafoF2:number, foEp:number, fhprimeF:number, fhprimeF2:number, foF1p:number, foF2p:number, hmF2:number, hmF1:number, hmE:number, zhalfNm:number, fminEs:number, yF2:number, yF1:number, tec:number, scaleHeightF2Peak:number, b0:number, b1:number, d1:number, foEa:number, hprimeEa:number, foP:number, hprimeP:number, fbEs:number, typeEsOffset:flatbuffers.Offset, charAttsOffset:flatbuffers.Offset, heightOffset:flatbuffers.Offset, plasmaFrequencyOffset:flatbuffers.Offset, plasmaFrequencyUncertaintyOffset:flatbuffers.Offset, electronDensityOffset:flatbuffers.Offset, electronDensityUncertaintyOffset:flatbuffers.Offset, artistFlagsOffset:flatbuffers.Offset, traceGenericOffset:flatbuffers.Offset, tidPhaseSpeedsOffset:flatbuffers.Offset, tidAzimuthOffset:flatbuffers.Offset, tidPeriodsOffset:flatbuffers.Offset, datumOffset:flatbuffers.Offset, platformNameOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:IonoObservation_Full_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  IonoObservation_Full.startIonoObservation_Full(builder);
  IonoObservation_Full.addId(builder, idOffset);
  IonoObservation_Full.addClassificationMarking(builder, classificationMarkingOffset);
  IonoObservation_Full.addIdSensor(builder, idSensorOffset);
  IonoObservation_Full.addOrigSensorId(builder, origSensorIdOffset);
  IonoObservation_Full.addSystem(builder, systemOffset);
  IonoObservation_Full.addNeProfileName(builder, neProfileNameOffset);
  IonoObservation_Full.addNeProfileVersion(builder, neProfileVersion);
  IonoObservation_Full.addScalerInfo(builder, scalerInfoOffset);
  IonoObservation_Full.addDensityProfile(builder, densityProfileOffset);
  IonoObservation_Full.addStationId(builder, stationIdOffset);
  IonoObservation_Full.addStartTimeUtc(builder, startTimeUtcOffset);
  IonoObservation_Full.addSystemInfo(builder, systemInfoOffset);
  IonoObservation_Full.addSystemNotes(builder, systemNotesOffset);
  IonoObservation_Full.addTransmitCoordinates(builder, transmitCoordinatesOffset);
  IonoObservation_Full.addTransmitSensorType(builder, transmitSensorType);
  IonoObservation_Full.addReceiveCoordinates(builder, receiveCoordinatesOffset);
  IonoObservation_Full.addReceiveSensorType(builder, receiveSensorType);
  IonoObservation_Full.addAntennaElementPosition(builder, antennaElementPositionOffset);
  IonoObservation_Full.addAntennaElementPositionCoordinateSystem(builder, antennaElementPositionCoordinateSystem);
  IonoObservation_Full.addPower(builder, powerOffset);
  IonoObservation_Full.addRange(builder, rangeOffset);
  IonoObservation_Full.addFrequency(builder, frequencyOffset);
  IonoObservation_Full.addPolarization(builder, polarizationOffset);
  IonoObservation_Full.addAzimuth(builder, azimuthOffset);
  IonoObservation_Full.addElevation(builder, elevationOffset);
  IonoObservation_Full.addRestrictedFrequency(builder, restrictedFrequencyOffset);
  IonoObservation_Full.addRestrictedFrequencyNotes(builder, restrictedFrequencyNotesOffset);
  IonoObservation_Full.addDoppler(builder, dopplerOffset);
  IonoObservation_Full.addTime(builder, timeOffset);
  IonoObservation_Full.addStokes(builder, stokesOffset);
  IonoObservation_Full.addAmplitude(builder, amplitudeOffset);
  IonoObservation_Full.addPhase(builder, phaseOffset);
  IonoObservation_Full.addFoF2(builder, foF2);
  IonoObservation_Full.addFoF1(builder, foF1);
  IonoObservation_Full.addFxF2(builder, fxF2);
  IonoObservation_Full.addFxF1(builder, fxF1);
  IonoObservation_Full.addMd(builder, md);
  IonoObservation_Full.addLuf(builder, luf);
  IonoObservation_Full.addMufd(builder, mufd);
  IonoObservation_Full.addFmin(builder, fmin);
  IonoObservation_Full.addFoEs(builder, foEs);
  IonoObservation_Full.addFminF(builder, fminF);
  IonoObservation_Full.addFminE(builder, fminE);
  IonoObservation_Full.addFoE(builder, foE);
  IonoObservation_Full.addFxE(builder, fxE);
  IonoObservation_Full.addFxI(builder, fxI);
  IonoObservation_Full.addHprimeF(builder, hprimeF);
  IonoObservation_Full.addHprimeF2(builder, hprimeF2);
  IonoObservation_Full.addHprimeF1(builder, hprimeF1);
  IonoObservation_Full.addHprimeE(builder, hprimeE);
  IonoObservation_Full.addHprimeEs(builder, hprimeEs);
  IonoObservation_Full.addZmE(builder, zmE);
  IonoObservation_Full.addYE(builder, yE);
  IonoObservation_Full.addQf(builder, qf);
  IonoObservation_Full.addQe(builder, qe);
  IonoObservation_Full.addDownF(builder, downF);
  IonoObservation_Full.addDownE(builder, downE);
  IonoObservation_Full.addDownEs(builder, downEs);
  IonoObservation_Full.addFf(builder, ff);
  IonoObservation_Full.addFe(builder, fe);
  IonoObservation_Full.addD(builder, d);
  IonoObservation_Full.addFmuf(builder, fmuf);
  IonoObservation_Full.addHprimefMuf(builder, hprimefMuf);
  IonoObservation_Full.addDeltafoF2(builder, deltafoF2);
  IonoObservation_Full.addFoEp(builder, foEp);
  IonoObservation_Full.addFhprimeF(builder, fhprimeF);
  IonoObservation_Full.addFhprimeF2(builder, fhprimeF2);
  IonoObservation_Full.addFoF1p(builder, foF1p);
  IonoObservation_Full.addFoF2p(builder, foF2p);
  IonoObservation_Full.addHmF2(builder, hmF2);
  IonoObservation_Full.addHmF1(builder, hmF1);
  IonoObservation_Full.addHmE(builder, hmE);
  IonoObservation_Full.addZhalfNm(builder, zhalfNm);
  IonoObservation_Full.addFminEs(builder, fminEs);
  IonoObservation_Full.addYF2(builder, yF2);
  IonoObservation_Full.addYF1(builder, yF1);
  IonoObservation_Full.addTec(builder, tec);
  IonoObservation_Full.addScaleHeightF2Peak(builder, scaleHeightF2Peak);
  IonoObservation_Full.addB0(builder, b0);
  IonoObservation_Full.addB1(builder, b1);
  IonoObservation_Full.addD1(builder, d1);
  IonoObservation_Full.addFoEa(builder, foEa);
  IonoObservation_Full.addHprimeEa(builder, hprimeEa);
  IonoObservation_Full.addFoP(builder, foP);
  IonoObservation_Full.addHprimeP(builder, hprimeP);
  IonoObservation_Full.addFbEs(builder, fbEs);
  IonoObservation_Full.addTypeEs(builder, typeEsOffset);
  IonoObservation_Full.addCharAtts(builder, charAttsOffset);
  IonoObservation_Full.addHeight(builder, heightOffset);
  IonoObservation_Full.addPlasmaFrequency(builder, plasmaFrequencyOffset);
  IonoObservation_Full.addPlasmaFrequencyUncertainty(builder, plasmaFrequencyUncertaintyOffset);
  IonoObservation_Full.addElectronDensity(builder, electronDensityOffset);
  IonoObservation_Full.addElectronDensityUncertainty(builder, electronDensityUncertaintyOffset);
  IonoObservation_Full.addArtistFlags(builder, artistFlagsOffset);
  IonoObservation_Full.addTraceGeneric(builder, traceGenericOffset);
  IonoObservation_Full.addTidPhaseSpeeds(builder, tidPhaseSpeedsOffset);
  IonoObservation_Full.addTidAzimuth(builder, tidAzimuthOffset);
  IonoObservation_Full.addTidPeriods(builder, tidPeriodsOffset);
  IonoObservation_Full.addDatum(builder, datumOffset);
  IonoObservation_Full.addPlatformName(builder, platformNameOffset);
  IonoObservation_Full.addCreatedAt(builder, createdAtOffset);
  IonoObservation_Full.addCreatedBy(builder, createdByOffset);
  IonoObservation_Full.addUpdatedAt(builder, updatedAtOffset);
  IonoObservation_Full.addUpdatedBy(builder, updatedByOffset);
  IonoObservation_Full.addSource(builder, sourceOffset);
  IonoObservation_Full.addOrigin(builder, originOffset);
  IonoObservation_Full.addDataMode(builder, dataMode);
  IonoObservation_Full.addOrigNetwork(builder, origNetworkOffset);
  return IonoObservation_Full.endIonoObservation_Full(builder);
}

unpack(): IonoObservation_FullT {
  return new IonoObservation_FullT(
    this.id(),
    this.classificationMarking(),
    this.idSensor(),
    this.origSensorId(),
    this.system(),
    this.neProfileName(),
    this.neProfileVersion(),
    this.scalerInfo(),
    this.densityProfile(),
    this.stationId(),
    this.startTimeUtc(),
    this.systemInfo(),
    this.systemNotes(),
    this.bb!.createScalarList<string>(this.transmitCoordinates.bind(this), this.transmitCoordinatesLength()),
    this.transmitSensorType(),
    this.bb!.createScalarList<string>(this.receiveCoordinates.bind(this), this.receiveCoordinatesLength()),
    this.receiveSensorType(),
    this.antennaElementPosition(),
    this.antennaElementPositionCoordinateSystem(),
    this.power(),
    this.range(),
    this.frequency(),
    this.polarization(),
    this.azimuth(),
    this.elevation(),
    this.bb!.createScalarList<string>(this.restrictedFrequency.bind(this), this.restrictedFrequencyLength()),
    this.restrictedFrequencyNotes(),
    this.doppler(),
    this.time(),
    this.stokes(),
    this.amplitude(),
    this.phase(),
    this.foF2(),
    this.foF1(),
    this.fxF2(),
    this.fxF1(),
    this.md(),
    this.luf(),
    this.mufd(),
    this.fmin(),
    this.foEs(),
    this.fminF(),
    this.fminE(),
    this.foE(),
    this.fxE(),
    this.fxI(),
    this.hprimeF(),
    this.hprimeF2(),
    this.hprimeF1(),
    this.hprimeE(),
    this.hprimeEs(),
    this.zmE(),
    this.yE(),
    this.qf(),
    this.qe(),
    this.downF(),
    this.downE(),
    this.downEs(),
    this.ff(),
    this.fe(),
    this.d(),
    this.fmuf(),
    this.hprimefMuf(),
    this.deltafoF2(),
    this.foEp(),
    this.fhprimeF(),
    this.fhprimeF2(),
    this.foF1p(),
    this.foF2p(),
    this.hmF2(),
    this.hmF1(),
    this.hmE(),
    this.zhalfNm(),
    this.fminEs(),
    this.yF2(),
    this.yF1(),
    this.tec(),
    this.scaleHeightF2Peak(),
    this.b0(),
    this.b1(),
    this.d1(),
    this.foEa(),
    this.hprimeEa(),
    this.foP(),
    this.hprimeP(),
    this.fbEs(),
    this.typeEs(),
    this.bb!.createScalarList<string>(this.charAtts.bind(this), this.charAttsLength()),
    this.bb!.createScalarList<string>(this.height.bind(this), this.heightLength()),
    this.bb!.createScalarList<string>(this.plasmaFrequency.bind(this), this.plasmaFrequencyLength()),
    this.bb!.createScalarList<string>(this.plasmaFrequencyUncertainty.bind(this), this.plasmaFrequencyUncertaintyLength()),
    this.bb!.createScalarList<string>(this.electronDensity.bind(this), this.electronDensityLength()),
    this.bb!.createScalarList<string>(this.electronDensityUncertainty.bind(this), this.electronDensityUncertaintyLength()),
    this.bb!.createScalarList<string>(this.artistFlags.bind(this), this.artistFlagsLength()),
    this.traceGeneric(),
    this.bb!.createScalarList<string>(this.tidPhaseSpeeds.bind(this), this.tidPhaseSpeedsLength()),
    this.bb!.createScalarList<string>(this.tidAzimuth.bind(this), this.tidAzimuthLength()),
    this.bb!.createScalarList<string>(this.tidPeriods.bind(this), this.tidPeriodsLength()),
    this.datum(),
    this.platformName(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: IonoObservation_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idSensor = this.idSensor();
  _o.origSensorId = this.origSensorId();
  _o.system = this.system();
  _o.neProfileName = this.neProfileName();
  _o.neProfileVersion = this.neProfileVersion();
  _o.scalerInfo = this.scalerInfo();
  _o.densityProfile = this.densityProfile();
  _o.stationId = this.stationId();
  _o.startTimeUtc = this.startTimeUtc();
  _o.systemInfo = this.systemInfo();
  _o.systemNotes = this.systemNotes();
  _o.transmitCoordinates = this.bb!.createScalarList<string>(this.transmitCoordinates.bind(this), this.transmitCoordinatesLength());
  _o.transmitSensorType = this.transmitSensorType();
  _o.receiveCoordinates = this.bb!.createScalarList<string>(this.receiveCoordinates.bind(this), this.receiveCoordinatesLength());
  _o.receiveSensorType = this.receiveSensorType();
  _o.antennaElementPosition = this.antennaElementPosition();
  _o.antennaElementPositionCoordinateSystem = this.antennaElementPositionCoordinateSystem();
  _o.power = this.power();
  _o.range = this.range();
  _o.frequency = this.frequency();
  _o.polarization = this.polarization();
  _o.azimuth = this.azimuth();
  _o.elevation = this.elevation();
  _o.restrictedFrequency = this.bb!.createScalarList<string>(this.restrictedFrequency.bind(this), this.restrictedFrequencyLength());
  _o.restrictedFrequencyNotes = this.restrictedFrequencyNotes();
  _o.doppler = this.doppler();
  _o.time = this.time();
  _o.stokes = this.stokes();
  _o.amplitude = this.amplitude();
  _o.phase = this.phase();
  _o.foF2 = this.foF2();
  _o.foF1 = this.foF1();
  _o.fxF2 = this.fxF2();
  _o.fxF1 = this.fxF1();
  _o.md = this.md();
  _o.luf = this.luf();
  _o.mufd = this.mufd();
  _o.fmin = this.fmin();
  _o.foEs = this.foEs();
  _o.fminF = this.fminF();
  _o.fminE = this.fminE();
  _o.foE = this.foE();
  _o.fxE = this.fxE();
  _o.fxI = this.fxI();
  _o.hprimeF = this.hprimeF();
  _o.hprimeF2 = this.hprimeF2();
  _o.hprimeF1 = this.hprimeF1();
  _o.hprimeE = this.hprimeE();
  _o.hprimeEs = this.hprimeEs();
  _o.zmE = this.zmE();
  _o.yE = this.yE();
  _o.qf = this.qf();
  _o.qe = this.qe();
  _o.downF = this.downF();
  _o.downE = this.downE();
  _o.downEs = this.downEs();
  _o.ff = this.ff();
  _o.fe = this.fe();
  _o.d = this.d();
  _o.fmuf = this.fmuf();
  _o.hprimefMuf = this.hprimefMuf();
  _o.deltafoF2 = this.deltafoF2();
  _o.foEp = this.foEp();
  _o.fhprimeF = this.fhprimeF();
  _o.fhprimeF2 = this.fhprimeF2();
  _o.foF1p = this.foF1p();
  _o.foF2p = this.foF2p();
  _o.hmF2 = this.hmF2();
  _o.hmF1 = this.hmF1();
  _o.hmE = this.hmE();
  _o.zhalfNm = this.zhalfNm();
  _o.fminEs = this.fminEs();
  _o.yF2 = this.yF2();
  _o.yF1 = this.yF1();
  _o.tec = this.tec();
  _o.scaleHeightF2Peak = this.scaleHeightF2Peak();
  _o.b0 = this.b0();
  _o.b1 = this.b1();
  _o.d1 = this.d1();
  _o.foEa = this.foEa();
  _o.hprimeEa = this.hprimeEa();
  _o.foP = this.foP();
  _o.hprimeP = this.hprimeP();
  _o.fbEs = this.fbEs();
  _o.typeEs = this.typeEs();
  _o.charAtts = this.bb!.createScalarList<string>(this.charAtts.bind(this), this.charAttsLength());
  _o.height = this.bb!.createScalarList<string>(this.height.bind(this), this.heightLength());
  _o.plasmaFrequency = this.bb!.createScalarList<string>(this.plasmaFrequency.bind(this), this.plasmaFrequencyLength());
  _o.plasmaFrequencyUncertainty = this.bb!.createScalarList<string>(this.plasmaFrequencyUncertainty.bind(this), this.plasmaFrequencyUncertaintyLength());
  _o.electronDensity = this.bb!.createScalarList<string>(this.electronDensity.bind(this), this.electronDensityLength());
  _o.electronDensityUncertainty = this.bb!.createScalarList<string>(this.electronDensityUncertainty.bind(this), this.electronDensityUncertaintyLength());
  _o.artistFlags = this.bb!.createScalarList<string>(this.artistFlags.bind(this), this.artistFlagsLength());
  _o.traceGeneric = this.traceGeneric();
  _o.tidPhaseSpeeds = this.bb!.createScalarList<string>(this.tidPhaseSpeeds.bind(this), this.tidPhaseSpeedsLength());
  _o.tidAzimuth = this.bb!.createScalarList<string>(this.tidAzimuth.bind(this), this.tidAzimuthLength());
  _o.tidPeriods = this.bb!.createScalarList<string>(this.tidPeriods.bind(this), this.tidPeriodsLength());
  _o.datum = this.datum();
  _o.platformName = this.platformName();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class IonoObservation_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public system: string|Uint8Array|null = null,
  public neProfileName: string|Uint8Array|null = null,
  public neProfileVersion: number = 0.0,
  public scalerInfo: string|Uint8Array|null = null,
  public densityProfile: string|Uint8Array|null = null,
  public stationId: string|Uint8Array|null = null,
  public startTimeUtc: string|Uint8Array|null = null,
  public systemInfo: string|Uint8Array|null = null,
  public systemNotes: string|Uint8Array|null = null,
  public transmitCoordinates: (string)[] = [],
  public transmitSensorType: IonoObservation_Full_transmitSensorType_Enum = IonoObservation_Full_transmitSensorType_Enum.MOBILE,
  public receiveCoordinates: (string)[] = [],
  public receiveSensorType: IonoObservation_Full_receiveSensorType_Enum = IonoObservation_Full_receiveSensorType_Enum.MOBILE,
  public antennaElementPosition: string|Uint8Array|null = null,
  public antennaElementPositionCoordinateSystem: IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum = IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum.J2000,
  public power: string|Uint8Array|null = null,
  public range: string|Uint8Array|null = null,
  public frequency: string|Uint8Array|null = null,
  public polarization: string|Uint8Array|null = null,
  public azimuth: string|Uint8Array|null = null,
  public elevation: string|Uint8Array|null = null,
  public restrictedFrequency: (string)[] = [],
  public restrictedFrequencyNotes: string|Uint8Array|null = null,
  public doppler: string|Uint8Array|null = null,
  public time: string|Uint8Array|null = null,
  public stokes: string|Uint8Array|null = null,
  public amplitude: string|Uint8Array|null = null,
  public phase: string|Uint8Array|null = null,
  public foF2: number = 0.0,
  public foF1: number = 0.0,
  public fxF2: number = 0.0,
  public fxF1: number = 0.0,
  public md: number = 0.0,
  public luf: number = 0.0,
  public mufd: number = 0.0,
  public fmin: number = 0.0,
  public foEs: number = 0.0,
  public fminF: number = 0.0,
  public fminE: number = 0.0,
  public foE: number = 0.0,
  public fxE: number = 0.0,
  public fxI: number = 0.0,
  public hprimeF: number = 0.0,
  public hprimeF2: number = 0.0,
  public hprimeF1: number = 0.0,
  public hprimeE: number = 0.0,
  public hprimeEs: number = 0.0,
  public zmE: number = 0.0,
  public yE: number = 0.0,
  public qf: number = 0.0,
  public qe: number = 0.0,
  public downF: number = 0.0,
  public downE: number = 0.0,
  public downEs: number = 0.0,
  public ff: number = 0.0,
  public fe: number = 0.0,
  public d: number = 0.0,
  public fmuf: number = 0.0,
  public hprimefMuf: number = 0.0,
  public deltafoF2: number = 0.0,
  public foEp: number = 0.0,
  public fhprimeF: number = 0.0,
  public fhprimeF2: number = 0.0,
  public foF1p: number = 0.0,
  public foF2p: number = 0.0,
  public hmF2: number = 0.0,
  public hmF1: number = 0.0,
  public hmE: number = 0.0,
  public zhalfNm: number = 0.0,
  public fminEs: number = 0.0,
  public yF2: number = 0.0,
  public yF1: number = 0.0,
  public tec: number = 0.0,
  public scaleHeightF2Peak: number = 0.0,
  public b0: number = 0.0,
  public b1: number = 0.0,
  public d1: number = 0.0,
  public foEa: number = 0.0,
  public hprimeEa: number = 0.0,
  public foP: number = 0.0,
  public hprimeP: number = 0.0,
  public fbEs: number = 0.0,
  public typeEs: string|Uint8Array|null = null,
  public charAtts: (string)[] = [],
  public height: (string)[] = [],
  public plasmaFrequency: (string)[] = [],
  public plasmaFrequencyUncertainty: (string)[] = [],
  public electronDensity: (string)[] = [],
  public electronDensityUncertainty: (string)[] = [],
  public artistFlags: (string)[] = [],
  public traceGeneric: string|Uint8Array|null = null,
  public tidPhaseSpeeds: (string)[] = [],
  public tidAzimuth: (string)[] = [],
  public tidPeriods: (string)[] = [],
  public datum: string|Uint8Array|null = null,
  public platformName: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: IonoObservation_Full_dataMode_Enum = IonoObservation_Full_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const system = (this.system !== null ? builder.createString(this.system!) : 0);
  const neProfileName = (this.neProfileName !== null ? builder.createString(this.neProfileName!) : 0);
  const scalerInfo = (this.scalerInfo !== null ? builder.createString(this.scalerInfo!) : 0);
  const densityProfile = (this.densityProfile !== null ? builder.createString(this.densityProfile!) : 0);
  const stationId = (this.stationId !== null ? builder.createString(this.stationId!) : 0);
  const startTimeUtc = (this.startTimeUtc !== null ? builder.createString(this.startTimeUtc!) : 0);
  const systemInfo = (this.systemInfo !== null ? builder.createString(this.systemInfo!) : 0);
  const systemNotes = (this.systemNotes !== null ? builder.createString(this.systemNotes!) : 0);
  const transmitCoordinates = IonoObservation_Full.createTransmitCoordinatesVector(builder, builder.createObjectOffsetList(this.transmitCoordinates));
  const receiveCoordinates = IonoObservation_Full.createReceiveCoordinatesVector(builder, builder.createObjectOffsetList(this.receiveCoordinates));
  const antennaElementPosition = (this.antennaElementPosition !== null ? builder.createString(this.antennaElementPosition!) : 0);
  const power = (this.power !== null ? builder.createString(this.power!) : 0);
  const range = (this.range !== null ? builder.createString(this.range!) : 0);
  const frequency = (this.frequency !== null ? builder.createString(this.frequency!) : 0);
  const polarization = (this.polarization !== null ? builder.createString(this.polarization!) : 0);
  const azimuth = (this.azimuth !== null ? builder.createString(this.azimuth!) : 0);
  const elevation = (this.elevation !== null ? builder.createString(this.elevation!) : 0);
  const restrictedFrequency = IonoObservation_Full.createRestrictedFrequencyVector(builder, builder.createObjectOffsetList(this.restrictedFrequency));
  const restrictedFrequencyNotes = (this.restrictedFrequencyNotes !== null ? builder.createString(this.restrictedFrequencyNotes!) : 0);
  const doppler = (this.doppler !== null ? builder.createString(this.doppler!) : 0);
  const time = (this.time !== null ? builder.createString(this.time!) : 0);
  const stokes = (this.stokes !== null ? builder.createString(this.stokes!) : 0);
  const amplitude = (this.amplitude !== null ? builder.createString(this.amplitude!) : 0);
  const phase = (this.phase !== null ? builder.createString(this.phase!) : 0);
  const typeEs = (this.typeEs !== null ? builder.createString(this.typeEs!) : 0);
  const charAtts = IonoObservation_Full.createCharAttsVector(builder, builder.createObjectOffsetList(this.charAtts));
  const height = IonoObservation_Full.createHeightVector(builder, builder.createObjectOffsetList(this.height));
  const plasmaFrequency = IonoObservation_Full.createPlasmaFrequencyVector(builder, builder.createObjectOffsetList(this.plasmaFrequency));
  const plasmaFrequencyUncertainty = IonoObservation_Full.createPlasmaFrequencyUncertaintyVector(builder, builder.createObjectOffsetList(this.plasmaFrequencyUncertainty));
  const electronDensity = IonoObservation_Full.createElectronDensityVector(builder, builder.createObjectOffsetList(this.electronDensity));
  const electronDensityUncertainty = IonoObservation_Full.createElectronDensityUncertaintyVector(builder, builder.createObjectOffsetList(this.electronDensityUncertainty));
  const artistFlags = IonoObservation_Full.createArtistFlagsVector(builder, builder.createObjectOffsetList(this.artistFlags));
  const traceGeneric = (this.traceGeneric !== null ? builder.createString(this.traceGeneric!) : 0);
  const tidPhaseSpeeds = IonoObservation_Full.createTidPhaseSpeedsVector(builder, builder.createObjectOffsetList(this.tidPhaseSpeeds));
  const tidAzimuth = IonoObservation_Full.createTidAzimuthVector(builder, builder.createObjectOffsetList(this.tidAzimuth));
  const tidPeriods = IonoObservation_Full.createTidPeriodsVector(builder, builder.createObjectOffsetList(this.tidPeriods));
  const datum = (this.datum !== null ? builder.createString(this.datum!) : 0);
  const platformName = (this.platformName !== null ? builder.createString(this.platformName!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return IonoObservation_Full.createIonoObservation_Full(builder,
    id,
    classificationMarking,
    idSensor,
    origSensorId,
    system,
    neProfileName,
    this.neProfileVersion,
    scalerInfo,
    densityProfile,
    stationId,
    startTimeUtc,
    systemInfo,
    systemNotes,
    transmitCoordinates,
    this.transmitSensorType,
    receiveCoordinates,
    this.receiveSensorType,
    antennaElementPosition,
    this.antennaElementPositionCoordinateSystem,
    power,
    range,
    frequency,
    polarization,
    azimuth,
    elevation,
    restrictedFrequency,
    restrictedFrequencyNotes,
    doppler,
    time,
    stokes,
    amplitude,
    phase,
    this.foF2,
    this.foF1,
    this.fxF2,
    this.fxF1,
    this.md,
    this.luf,
    this.mufd,
    this.fmin,
    this.foEs,
    this.fminF,
    this.fminE,
    this.foE,
    this.fxE,
    this.fxI,
    this.hprimeF,
    this.hprimeF2,
    this.hprimeF1,
    this.hprimeE,
    this.hprimeEs,
    this.zmE,
    this.yE,
    this.qf,
    this.qe,
    this.downF,
    this.downE,
    this.downEs,
    this.ff,
    this.fe,
    this.d,
    this.fmuf,
    this.hprimefMuf,
    this.deltafoF2,
    this.foEp,
    this.fhprimeF,
    this.fhprimeF2,
    this.foF1p,
    this.foF2p,
    this.hmF2,
    this.hmF1,
    this.hmE,
    this.zhalfNm,
    this.fminEs,
    this.yF2,
    this.yF1,
    this.tec,
    this.scaleHeightF2Peak,
    this.b0,
    this.b1,
    this.d1,
    this.foEa,
    this.hprimeEa,
    this.foP,
    this.hprimeP,
    this.fbEs,
    typeEs,
    charAtts,
    height,
    plasmaFrequency,
    plasmaFrequencyUncertainty,
    electronDensity,
    electronDensityUncertainty,
    artistFlags,
    traceGeneric,
    tidPhaseSpeeds,
    tidAzimuth,
    tidPeriods,
    datum,
    platformName,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
