// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Planned start and stop for the collection.
 */
export class ISRCollectionPlanned_Ingest implements flatbuffers.IUnpackableObject<ISRCollectionPlanned_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ISRCollectionPlanned_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsISRCollectionPlanned_Ingest(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionPlanned_Ingest):ISRCollectionPlanned_Ingest {
  return (obj || new ISRCollectionPlanned_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsISRCollectionPlanned_Ingest(bb:flatbuffers.ByteBuffer, obj?:ISRCollectionPlanned_Ingest):ISRCollectionPlanned_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ISRCollectionPlanned_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ISRC');
}

/**
 * Start time of collection, in ISO 8601 UTC format.
 * Example: /// Example: 2021-01-19T01:01:15.001Z
 * Constraints: No constraints specified.
 */
start():string|null
start(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
start(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Stop time of collection, in ISO 8601 UTC format.
 * Example: /// Example: 2021-01-19T01:01:15.001Z
 * Constraints: No constraints specified.
 */
stop():string|null
stop(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stop(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional start and stop for the collection.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
additional(index: number):string
additional(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
additional(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

additionalLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startISRCollectionPlanned_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addStart(builder:flatbuffers.Builder, startOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, startOffset, 0);
}

static addStop(builder:flatbuffers.Builder, stopOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stopOffset, 0);
}

static addAdditional(builder:flatbuffers.Builder, additionalOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, additionalOffset, 0);
}

static createAdditionalVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAdditionalVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endISRCollectionPlanned_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishISRCollectionPlanned_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC');
}

static finishSizePrefixedISRCollectionPlanned_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ISRC', true);
}

static createISRCollectionPlanned_Ingest(builder:flatbuffers.Builder, startOffset:flatbuffers.Offset, stopOffset:flatbuffers.Offset, additionalOffset:flatbuffers.Offset):flatbuffers.Offset {
  ISRCollectionPlanned_Ingest.startISRCollectionPlanned_Ingest(builder);
  ISRCollectionPlanned_Ingest.addStart(builder, startOffset);
  ISRCollectionPlanned_Ingest.addStop(builder, stopOffset);
  ISRCollectionPlanned_Ingest.addAdditional(builder, additionalOffset);
  return ISRCollectionPlanned_Ingest.endISRCollectionPlanned_Ingest(builder);
}

unpack(): ISRCollectionPlanned_IngestT {
  return new ISRCollectionPlanned_IngestT(
    this.start(),
    this.stop(),
    this.bb!.createScalarList<string>(this.additional.bind(this), this.additionalLength())
  );
}


unpackTo(_o: ISRCollectionPlanned_IngestT): void {
  _o.start = this.start();
  _o.stop = this.stop();
  _o.additional = this.bb!.createScalarList<string>(this.additional.bind(this), this.additionalLength());
}
}

export class ISRCollectionPlanned_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public start: string|Uint8Array|null = null,
  public stop: string|Uint8Array|null = null,
  public additional: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const start = (this.start !== null ? builder.createString(this.start!) : 0);
  const stop = (this.stop !== null ? builder.createString(this.stop!) : 0);
  const additional = ISRCollectionPlanned_Ingest.createAdditionalVector(builder, builder.createObjectOffsetList(this.additional));

  return ISRCollectionPlanned_Ingest.createISRCollectionPlanned_Ingest(builder,
    start,
    stop,
    additional
  );
}
}
