// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RFBand_dataMode_Enum } from './RFBand_dataMode_Enum.js';
import { RFBand_mode_Enum } from './RFBand_mode_Enum.js';
import { RFBand_polarization_Enum } from './RFBand_polarization_Enum.js';
import { RFBand_purpose_Enum } from './RFBand_purpose_Enum.js';


/**
 * /// Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.
 */
export class RFBand implements flatbuffers.IUnpackableObject<RFBandT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RFBand {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRFBand(bb:flatbuffers.ByteBuffer, obj?:RFBand):RFBand {
  return (obj || new RFBand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRFBand(bb:flatbuffers.ByteBuffer, obj?:RFBand):RFBand {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RFBand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('RFBA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: RFBAND-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent Entity which uses this band.
 * Example: /// Example: ENTITY-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idEntity():string|null
idEntity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idEntity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * RF Band name.
 * Example: /// Example: BAND_NAME
 * Constraints: Minimum length = 1, Maximum length = 128
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
 * Example: /// Example: Ku
 * Constraints: Minimum length = 0, Maximum length = 5
 */
band():string|null
band(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
band(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * RF Band mode (e.g. TX, RX).
 * Example: /// Example: TX
 * Constraints: Minimum length = 0, Maximum length = 4
 */
mode():RFBand_mode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : RFBand_mode_Enum.TX;
}

/**
 * Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
 * Example: /// Example: TTC
 * Constraints: Minimum length = 0, Maximum length = 16
 */
purpose():RFBand_purpose_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : RFBand_purpose_Enum.COMM;
}

/**
 * Start/minimum of transmit RF frequency range, if applicable, in Mhz.
 * Example: /// Example: 50.23
 * Constraints: No constraints specified.
 */
freqMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * End/maximum of transmit RF frequency range, if applicable, in Mhz.
 * Example: /// Example: 2000.23
 * Constraints: No constraints specified.
 */
freqMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Center frequency of RF frequency range, if applicable, in Mhz.
 * Example: /// Example: 1000.23
 * Constraints: No constraints specified.
 */
centerFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * RF Range maximum gain, in dBi.
 * Example: /// Example: 120.23
 * Constraints: No constraints specified.
 */
peakGain():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * RF Range edge gain, in dBi.
 * Example: /// Example: 100.23
 * Constraints: No constraints specified.
 */
edgeGain():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * RF Band frequency range bandwidth in Mhz.
 * Example: /// Example: 100.23
 * Constraints: No constraints specified.
 */
bandwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
beamwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.
 * Example: /// Example: H
 * Constraints: Minimum length = 0, Maximum length = 4
 */
polarization():RFBand_polarization_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : RFBand_polarization_Enum.H;
}

/**
 * Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
 * Example: /// Example: 2.23
 * Constraints: No constraints specified.
 */
erp():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
 * Example: /// Example: 2.23
 * Constraints: No constraints specified.
 */
eirp():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():RFBand_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : RFBand_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was last updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRFBand(builder:flatbuffers.Builder) {
  builder.startObject(25);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdEntity(builder:flatbuffers.Builder, idEntityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idEntityOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addBand(builder:flatbuffers.Builder, bandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, bandOffset, 0);
}

static addMode(builder:flatbuffers.Builder, mode:RFBand_mode_Enum) {
  builder.addFieldInt8(5, mode, RFBand_mode_Enum.TX);
}

static addPurpose(builder:flatbuffers.Builder, purpose:RFBand_purpose_Enum) {
  builder.addFieldInt8(6, purpose, RFBand_purpose_Enum.COMM);
}

static addFreqMin(builder:flatbuffers.Builder, freqMin:number) {
  builder.addFieldFloat64(7, freqMin, 0.0);
}

static addFreqMax(builder:flatbuffers.Builder, freqMax:number) {
  builder.addFieldFloat64(8, freqMax, 0.0);
}

static addCenterFreq(builder:flatbuffers.Builder, centerFreq:number) {
  builder.addFieldFloat64(9, centerFreq, 0.0);
}

static addPeakGain(builder:flatbuffers.Builder, peakGain:number) {
  builder.addFieldFloat64(10, peakGain, 0.0);
}

static addEdgeGain(builder:flatbuffers.Builder, edgeGain:number) {
  builder.addFieldFloat64(11, edgeGain, 0.0);
}

static addBandwidth(builder:flatbuffers.Builder, bandwidth:number) {
  builder.addFieldFloat64(12, bandwidth, 0.0);
}

static addBeamwidth(builder:flatbuffers.Builder, beamwidth:number) {
  builder.addFieldFloat64(13, beamwidth, 0.0);
}

static addPolarization(builder:flatbuffers.Builder, polarization:RFBand_polarization_Enum) {
  builder.addFieldInt8(14, polarization, RFBand_polarization_Enum.H);
}

static addErp(builder:flatbuffers.Builder, erp:number) {
  builder.addFieldFloat64(15, erp, 0.0);
}

static addEirp(builder:flatbuffers.Builder, eirp:number) {
  builder.addFieldFloat64(16, eirp, 0.0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:RFBand_dataMode_Enum) {
  builder.addFieldInt8(19, dataMode, RFBand_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, updatedByOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, origNetworkOffset, 0);
}

static endRFBand(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishRFBandBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RFBA');
}

static finishSizePrefixedRFBandBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RFBA', true);
}

static createRFBand(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idEntityOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, bandOffset:flatbuffers.Offset, mode:RFBand_mode_Enum, purpose:RFBand_purpose_Enum, freqMin:number, freqMax:number, centerFreq:number, peakGain:number, edgeGain:number, bandwidth:number, beamwidth:number, polarization:RFBand_polarization_Enum, erp:number, eirp:number, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:RFBand_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  RFBand.startRFBand(builder);
  RFBand.addId(builder, idOffset);
  RFBand.addIdEntity(builder, idEntityOffset);
  RFBand.addClassificationMarking(builder, classificationMarkingOffset);
  RFBand.addName(builder, nameOffset);
  RFBand.addBand(builder, bandOffset);
  RFBand.addMode(builder, mode);
  RFBand.addPurpose(builder, purpose);
  RFBand.addFreqMin(builder, freqMin);
  RFBand.addFreqMax(builder, freqMax);
  RFBand.addCenterFreq(builder, centerFreq);
  RFBand.addPeakGain(builder, peakGain);
  RFBand.addEdgeGain(builder, edgeGain);
  RFBand.addBandwidth(builder, bandwidth);
  RFBand.addBeamwidth(builder, beamwidth);
  RFBand.addPolarization(builder, polarization);
  RFBand.addErp(builder, erp);
  RFBand.addEirp(builder, eirp);
  RFBand.addSource(builder, sourceOffset);
  RFBand.addOrigin(builder, originOffset);
  RFBand.addDataMode(builder, dataMode);
  RFBand.addCreatedAt(builder, createdAtOffset);
  RFBand.addCreatedBy(builder, createdByOffset);
  RFBand.addUpdatedAt(builder, updatedAtOffset);
  RFBand.addUpdatedBy(builder, updatedByOffset);
  RFBand.addOrigNetwork(builder, origNetworkOffset);
  return RFBand.endRFBand(builder);
}

unpack(): RFBandT {
  return new RFBandT(
    this.id(),
    this.idEntity(),
    this.classificationMarking(),
    this.name(),
    this.band(),
    this.mode(),
    this.purpose(),
    this.freqMin(),
    this.freqMax(),
    this.centerFreq(),
    this.peakGain(),
    this.edgeGain(),
    this.bandwidth(),
    this.beamwidth(),
    this.polarization(),
    this.erp(),
    this.eirp(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.origNetwork()
  );
}


unpackTo(_o: RFBandT): void {
  _o.id = this.id();
  _o.idEntity = this.idEntity();
  _o.classificationMarking = this.classificationMarking();
  _o.name = this.name();
  _o.band = this.band();
  _o.mode = this.mode();
  _o.purpose = this.purpose();
  _o.freqMin = this.freqMin();
  _o.freqMax = this.freqMax();
  _o.centerFreq = this.centerFreq();
  _o.peakGain = this.peakGain();
  _o.edgeGain = this.edgeGain();
  _o.bandwidth = this.bandwidth();
  _o.beamwidth = this.beamwidth();
  _o.polarization = this.polarization();
  _o.erp = this.erp();
  _o.eirp = this.eirp();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.origNetwork = this.origNetwork();
}
}

export class RFBandT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idEntity: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public band: string|Uint8Array|null = null,
  public mode: RFBand_mode_Enum = RFBand_mode_Enum.TX,
  public purpose: RFBand_purpose_Enum = RFBand_purpose_Enum.COMM,
  public freqMin: number = 0.0,
  public freqMax: number = 0.0,
  public centerFreq: number = 0.0,
  public peakGain: number = 0.0,
  public edgeGain: number = 0.0,
  public bandwidth: number = 0.0,
  public beamwidth: number = 0.0,
  public polarization: RFBand_polarization_Enum = RFBand_polarization_Enum.H,
  public erp: number = 0.0,
  public eirp: number = 0.0,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: RFBand_dataMode_Enum = RFBand_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idEntity = (this.idEntity !== null ? builder.createString(this.idEntity!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const band = (this.band !== null ? builder.createString(this.band!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return RFBand.createRFBand(builder,
    id,
    idEntity,
    classificationMarking,
    name,
    band,
    this.mode,
    this.purpose,
    this.freqMin,
    this.freqMax,
    this.centerFreq,
    this.peakGain,
    this.edgeGain,
    this.bandwidth,
    this.beamwidth,
    this.polarization,
    this.erp,
    this.eirp,
    source,
    origin,
    this.dataMode,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    origNetwork
  );
}
}
