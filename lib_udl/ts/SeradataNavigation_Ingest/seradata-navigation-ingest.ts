// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SeradataNavigation_Ingest_dataMode_Enum } from './seradata-navigation-ingest-data-mode-enum.js';


/**
 * /// Details for a navigation payload from  Seradata.
 */
export class SeradataNavigation_Ingest implements flatbuffers.IUnpackableObject<SeradataNavigation_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SeradataNavigation_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSeradataNavigation_Ingest(bb:flatbuffers.ByteBuffer, obj?:SeradataNavigation_Ingest):SeradataNavigation_Ingest {
  return (obj || new SeradataNavigation_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSeradataNavigation_Ingest(bb:flatbuffers.ByteBuffer, obj?:SeradataNavigation_Ingest):SeradataNavigation_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SeradataNavigation_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SERA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SERADATANAVIGATION-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID of the parent Navigation record.
 * Example: /// Example: idNavigation
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idNavigation():string|null
idNavigation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idNavigation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
 * Example: /// Example: spacecraftId
 * Constraints: Minimum length = 1, Maximum length = 36
 */
spacecraftId():string|null
spacecraftId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spacecraftId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Hosted for company/Organization Id.
 * Example: /// Example: hostedForCompanyOrgId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
hostedForCompanyOrgId():string|null
hostedForCompanyOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hostedForCompanyOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Manufacturer Organization Id.
 * Example: /// Example: manufacturerOrgId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Navigation payload type, e.g. WAAS, GAGAN, etc.
 * Example: /// Example: WAAS
 * Constraints: Minimum length = 0, Maximum length = 100
 */
payloadType():string|null
payloadType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
payloadType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Modes of operation.
 * Example: /// Example: Military
 * Constraints: Minimum length = 0, Maximum length = 100
 */
modes():string|null
modes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Frequency for this payload.
 * Example: /// Example: 1234
 * Constraints: Minimum length = 0, Maximum length = 100
 */
modeFrequency():string|null
modeFrequency(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeFrequency(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Location accuracy in meters.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
locationAccuracy():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
 * Example: /// Example: partnerSpacecraftId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
partnerSpacecraftId():string|null
partnerSpacecraftId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
partnerSpacecraftId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Area of coverage, e.g. Worldwide, India, etc.
 * Example: /// Example: Worldwide
 * Constraints: Minimum length = 0, Maximum length = 50
 */
areaCoverage():string|null
areaCoverage(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
areaCoverage(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Payload notes.
 * Example: /// Example: Sample Notes
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
notes():string|null
notes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sensor name from Seradata, e.g. WAAS GEO-5, etc.
 * Example: /// Example: WAAS GEO-5
 * Constraints: Minimum length = 0, Maximum length = 50
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of clock, e.g. Rubidium, Hydrogen Maser, etc.
 * Example: /// Example: Rubidium
 * Constraints: Minimum length = 0, Maximum length = 20
 */
clockType():string|null
clockType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
clockType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SeradataNavigation_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SeradataNavigation_Ingest_dataMode_Enum.REAL;
}

static startSeradataNavigation_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdNavigation(builder:flatbuffers.Builder, idNavigationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idNavigationOffset, 0);
}

static addSpacecraftId(builder:flatbuffers.Builder, spacecraftIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, spacecraftIdOffset, 0);
}

static addHostedForCompanyOrgId(builder:flatbuffers.Builder, hostedForCompanyOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, hostedForCompanyOrgIdOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, manufacturerOrgIdOffset, 0);
}

static addPayloadType(builder:flatbuffers.Builder, payloadTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, payloadTypeOffset, 0);
}

static addModes(builder:flatbuffers.Builder, modesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, modesOffset, 0);
}

static addModeFrequency(builder:flatbuffers.Builder, modeFrequencyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, modeFrequencyOffset, 0);
}

static addLocationAccuracy(builder:flatbuffers.Builder, locationAccuracy:number) {
  builder.addFieldFloat64(9, locationAccuracy, 0.0);
}

static addPartnerSpacecraftId(builder:flatbuffers.Builder, partnerSpacecraftIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, partnerSpacecraftIdOffset, 0);
}

static addAreaCoverage(builder:flatbuffers.Builder, areaCoverageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, areaCoverageOffset, 0);
}

static addNotes(builder:flatbuffers.Builder, notesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, notesOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, nameOffset, 0);
}

static addClockType(builder:flatbuffers.Builder, clockTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, clockTypeOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SeradataNavigation_Ingest_dataMode_Enum) {
  builder.addFieldInt8(20, dataMode, SeradataNavigation_Ingest_dataMode_Enum.REAL);
}

static endSeradataNavigation_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSeradataNavigation_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SERA');
}

static finishSizePrefixedSeradataNavigation_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SERA', true);
}

static createSeradataNavigation_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idNavigationOffset:flatbuffers.Offset, spacecraftIdOffset:flatbuffers.Offset, hostedForCompanyOrgIdOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, payloadTypeOffset:flatbuffers.Offset, modesOffset:flatbuffers.Offset, modeFrequencyOffset:flatbuffers.Offset, locationAccuracy:number, partnerSpacecraftIdOffset:flatbuffers.Offset, areaCoverageOffset:flatbuffers.Offset, notesOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, clockTypeOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:SeradataNavigation_Ingest_dataMode_Enum):flatbuffers.Offset {
  SeradataNavigation_Ingest.startSeradataNavigation_Ingest(builder);
  SeradataNavigation_Ingest.addId(builder, idOffset);
  SeradataNavigation_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  SeradataNavigation_Ingest.addIdNavigation(builder, idNavigationOffset);
  SeradataNavigation_Ingest.addSpacecraftId(builder, spacecraftIdOffset);
  SeradataNavigation_Ingest.addHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset);
  SeradataNavigation_Ingest.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  SeradataNavigation_Ingest.addPayloadType(builder, payloadTypeOffset);
  SeradataNavigation_Ingest.addModes(builder, modesOffset);
  SeradataNavigation_Ingest.addModeFrequency(builder, modeFrequencyOffset);
  SeradataNavigation_Ingest.addLocationAccuracy(builder, locationAccuracy);
  SeradataNavigation_Ingest.addPartnerSpacecraftId(builder, partnerSpacecraftIdOffset);
  SeradataNavigation_Ingest.addAreaCoverage(builder, areaCoverageOffset);
  SeradataNavigation_Ingest.addNotes(builder, notesOffset);
  SeradataNavigation_Ingest.addName(builder, nameOffset);
  SeradataNavigation_Ingest.addClockType(builder, clockTypeOffset);
  SeradataNavigation_Ingest.addCreatedAt(builder, createdAtOffset);
  SeradataNavigation_Ingest.addCreatedBy(builder, createdByOffset);
  SeradataNavigation_Ingest.addSource(builder, sourceOffset);
  SeradataNavigation_Ingest.addOrigin(builder, originOffset);
  SeradataNavigation_Ingest.addOrigNetwork(builder, origNetworkOffset);
  SeradataNavigation_Ingest.addDataMode(builder, dataMode);
  return SeradataNavigation_Ingest.endSeradataNavigation_Ingest(builder);
}

unpack(): SeradataNavigation_IngestT {
  return new SeradataNavigation_IngestT(
    this.id(),
    this.classificationMarking(),
    this.idNavigation(),
    this.spacecraftId(),
    this.hostedForCompanyOrgId(),
    this.manufacturerOrgId(),
    this.payloadType(),
    this.modes(),
    this.modeFrequency(),
    this.locationAccuracy(),
    this.partnerSpacecraftId(),
    this.areaCoverage(),
    this.notes(),
    this.name(),
    this.clockType(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: SeradataNavigation_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idNavigation = this.idNavigation();
  _o.spacecraftId = this.spacecraftId();
  _o.hostedForCompanyOrgId = this.hostedForCompanyOrgId();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.payloadType = this.payloadType();
  _o.modes = this.modes();
  _o.modeFrequency = this.modeFrequency();
  _o.locationAccuracy = this.locationAccuracy();
  _o.partnerSpacecraftId = this.partnerSpacecraftId();
  _o.areaCoverage = this.areaCoverage();
  _o.notes = this.notes();
  _o.name = this.name();
  _o.clockType = this.clockType();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class SeradataNavigation_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idNavigation: string|Uint8Array|null = null,
  public spacecraftId: string|Uint8Array|null = null,
  public hostedForCompanyOrgId: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public payloadType: string|Uint8Array|null = null,
  public modes: string|Uint8Array|null = null,
  public modeFrequency: string|Uint8Array|null = null,
  public locationAccuracy: number = 0.0,
  public partnerSpacecraftId: string|Uint8Array|null = null,
  public areaCoverage: string|Uint8Array|null = null,
  public notes: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public clockType: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: SeradataNavigation_Ingest_dataMode_Enum = SeradataNavigation_Ingest_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idNavigation = (this.idNavigation !== null ? builder.createString(this.idNavigation!) : 0);
  const spacecraftId = (this.spacecraftId !== null ? builder.createString(this.spacecraftId!) : 0);
  const hostedForCompanyOrgId = (this.hostedForCompanyOrgId !== null ? builder.createString(this.hostedForCompanyOrgId!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const payloadType = (this.payloadType !== null ? builder.createString(this.payloadType!) : 0);
  const modes = (this.modes !== null ? builder.createString(this.modes!) : 0);
  const modeFrequency = (this.modeFrequency !== null ? builder.createString(this.modeFrequency!) : 0);
  const partnerSpacecraftId = (this.partnerSpacecraftId !== null ? builder.createString(this.partnerSpacecraftId!) : 0);
  const areaCoverage = (this.areaCoverage !== null ? builder.createString(this.areaCoverage!) : 0);
  const notes = (this.notes !== null ? builder.createString(this.notes!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const clockType = (this.clockType !== null ? builder.createString(this.clockType!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return SeradataNavigation_Ingest.createSeradataNavigation_Ingest(builder,
    id,
    classificationMarking,
    idNavigation,
    spacecraftId,
    hostedForCompanyOrgId,
    manufacturerOrgId,
    payloadType,
    modes,
    modeFrequency,
    this.locationAccuracy,
    partnerSpacecraftId,
    areaCoverage,
    notes,
    name,
    clockType,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
