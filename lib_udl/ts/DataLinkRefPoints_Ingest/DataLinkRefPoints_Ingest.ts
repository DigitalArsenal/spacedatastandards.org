// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
 */
export class DataLinkRefPoints_Ingest implements flatbuffers.IUnpackableObject<DataLinkRefPoints_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataLinkRefPoints_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataLinkRefPoints_Ingest(bb:flatbuffers.ByteBuffer, obj?:DataLinkRefPoints_Ingest):DataLinkRefPoints_Ingest {
  return (obj || new DataLinkRefPoints_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataLinkRefPoints_Ingest(bb:flatbuffers.ByteBuffer, obj?:DataLinkRefPoints_Ingest):DataLinkRefPoints_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataLinkRefPoints_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DATA');
}

/**
 * Type of data link reference point or grid origin.
 * Example: /// Example: DLRP
 * Constraints: Minimum length = 0, Maximum length = 7
 */
refPointType():string|null
refPointType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
refPointType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier to designate a reference point.
 * Example: /// Example: L5
 * Constraints: Minimum length = 0, Maximum length = 20
 */
refDes():string|null
refDes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
refDes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The location name of the point of reference for this data link message.
 * Example: /// Example: FORT BRAGG
 * Constraints: Minimum length = 0, Maximum length = 20
 */
refLocName():string|null
refLocName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
refLocName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS84 latitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
refLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS84 longitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 179.1
 * Constraints: No constraints specified.
 */
refLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Indicates when a particular event or nickname becomes effective or the old event or nickname is deleted, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-08T13:55:43.123Z
 * Constraints: No constraints specified.
 */
effEventTime():string|null
effEventTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effEventTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDataLinkRefPoints_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addRefPointType(builder:flatbuffers.Builder, refPointTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, refPointTypeOffset, 0);
}

static addRefDes(builder:flatbuffers.Builder, refDesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, refDesOffset, 0);
}

static addRefLocName(builder:flatbuffers.Builder, refLocNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, refLocNameOffset, 0);
}

static addRefLat(builder:flatbuffers.Builder, refLat:number) {
  builder.addFieldFloat64(3, refLat, 0.0);
}

static addRefLon(builder:flatbuffers.Builder, refLon:number) {
  builder.addFieldFloat64(4, refLon, 0.0);
}

static addEffEventTime(builder:flatbuffers.Builder, effEventTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, effEventTimeOffset, 0);
}

static endDataLinkRefPoints_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDataLinkRefPoints_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA');
}

static finishSizePrefixedDataLinkRefPoints_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA', true);
}

static createDataLinkRefPoints_Ingest(builder:flatbuffers.Builder, refPointTypeOffset:flatbuffers.Offset, refDesOffset:flatbuffers.Offset, refLocNameOffset:flatbuffers.Offset, refLat:number, refLon:number, effEventTimeOffset:flatbuffers.Offset):flatbuffers.Offset {
  DataLinkRefPoints_Ingest.startDataLinkRefPoints_Ingest(builder);
  DataLinkRefPoints_Ingest.addRefPointType(builder, refPointTypeOffset);
  DataLinkRefPoints_Ingest.addRefDes(builder, refDesOffset);
  DataLinkRefPoints_Ingest.addRefLocName(builder, refLocNameOffset);
  DataLinkRefPoints_Ingest.addRefLat(builder, refLat);
  DataLinkRefPoints_Ingest.addRefLon(builder, refLon);
  DataLinkRefPoints_Ingest.addEffEventTime(builder, effEventTimeOffset);
  return DataLinkRefPoints_Ingest.endDataLinkRefPoints_Ingest(builder);
}

unpack(): DataLinkRefPoints_IngestT {
  return new DataLinkRefPoints_IngestT(
    this.refPointType(),
    this.refDes(),
    this.refLocName(),
    this.refLat(),
    this.refLon(),
    this.effEventTime()
  );
}


unpackTo(_o: DataLinkRefPoints_IngestT): void {
  _o.refPointType = this.refPointType();
  _o.refDes = this.refDes();
  _o.refLocName = this.refLocName();
  _o.refLat = this.refLat();
  _o.refLon = this.refLon();
  _o.effEventTime = this.effEventTime();
}
}

export class DataLinkRefPoints_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public refPointType: string|Uint8Array|null = null,
  public refDes: string|Uint8Array|null = null,
  public refLocName: string|Uint8Array|null = null,
  public refLat: number = 0.0,
  public refLon: number = 0.0,
  public effEventTime: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const refPointType = (this.refPointType !== null ? builder.createString(this.refPointType!) : 0);
  const refDes = (this.refDes !== null ? builder.createString(this.refDes!) : 0);
  const refLocName = (this.refLocName !== null ? builder.createString(this.refLocName!) : 0);
  const effEventTime = (this.effEventTime !== null ? builder.createString(this.effEventTime!) : 0);

  return DataLinkRefPoints_Ingest.createDataLinkRefPoints_Ingest(builder,
    refPointType,
    refDes,
    refLocName,
    this.refLat,
    this.refLon,
    effEventTime
  );
}
}
