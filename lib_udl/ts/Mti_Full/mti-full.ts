// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Mti_Full_dataMode_Enum } from './mti-full-data-mode-enum.js';


/**
 * /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
 */
export class Mti_Full implements flatbuffers.IUnpackableObject<Mti_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Mti_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMti_Full(bb:flatbuffers.ByteBuffer, obj?:Mti_Full):Mti_Full {
  return (obj || new Mti_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMti_Full(bb:flatbuffers.ByteBuffer, obj?:Mti_Full):Mti_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Mti_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MTIF');
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: MTI-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Mti_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Mti_Full_dataMode_Enum.REAL;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Nationality of the platform providing the data.
 * Example: /// Example: NATIONALITY
 * Constraints: Minimum length = 0, Maximum length = 32
 */
p3():string|null
p3(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
p3(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Control / handling marking.
 * Example: /// Example: MARKING
 * Constraints: Minimum length = 0, Maximum length = 128
 */
p6():string|null
p6(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
p6(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Data record exercise indicator.
 * Example: /// Example: INDICATOR
 * Constraints: Minimum length = 0, Maximum length = 32
 */
p7():string|null
p7(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
p7(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the platform providing the data (tail number for air platform, name and numerical designator for space-based platforms).
 * Example: /// Example: P8-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
p8():string|null
p8(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
p8(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Integer field, assigned by the platform, that uniquely identifies the mission for the platform.
 * Example: /// Example: 45
 * Constraints: No constraints specified.
 */
p9():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
 * Example: /// Example: 45
 * Constraints: No constraints specified.
 */
p10():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
missions(index: number):string
missions(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
missions(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

missionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
dwells(index: number):string
dwells(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
dwells(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dwellsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
hrrs(index: number):string
hrrs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
hrrs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

hrrsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
jobDefs(index: number):string
jobDefs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
jobDefs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

jobDefsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
freeTexts(index: number):string
freeTexts(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
freeTexts(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

freeTextsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
platformLocs(index: number):string
platformLocs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
platformLocs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

platformLocsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
jobRequests(index: number):string
jobRequests(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
jobRequests(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

jobRequestsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startMti_Full(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, classificationMarkingOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, originOffset, 0);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, idOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Mti_Full_dataMode_Enum) {
  builder.addFieldInt8(4, dataMode, Mti_Full_dataMode_Enum.REAL);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, createdByOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, createdAtOffset, 0);
}

static addP3(builder:flatbuffers.Builder, p3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(7, p3Offset, 0);
}

static addP6(builder:flatbuffers.Builder, p6Offset:flatbuffers.Offset) {
  builder.addFieldOffset(8, p6Offset, 0);
}

static addP7(builder:flatbuffers.Builder, p7Offset:flatbuffers.Offset) {
  builder.addFieldOffset(9, p7Offset, 0);
}

static addP8(builder:flatbuffers.Builder, p8Offset:flatbuffers.Offset) {
  builder.addFieldOffset(10, p8Offset, 0);
}

static addP9(builder:flatbuffers.Builder, p9:number) {
  builder.addFieldInt32(11, p9, 0);
}

static addP10(builder:flatbuffers.Builder, p10:number) {
  builder.addFieldInt32(12, p10, 0);
}

static addMissions(builder:flatbuffers.Builder, missionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, missionsOffset, 0);
}

static createMissionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMissionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDwells(builder:flatbuffers.Builder, dwellsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, dwellsOffset, 0);
}

static createDwellsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDwellsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addHrrs(builder:flatbuffers.Builder, hrrsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, hrrsOffset, 0);
}

static createHrrsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startHrrsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addJobDefs(builder:flatbuffers.Builder, jobDefsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, jobDefsOffset, 0);
}

static createJobDefsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startJobDefsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFreeTexts(builder:flatbuffers.Builder, freeTextsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, freeTextsOffset, 0);
}

static createFreeTextsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFreeTextsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPlatformLocs(builder:flatbuffers.Builder, platformLocsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, platformLocsOffset, 0);
}

static createPlatformLocsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlatformLocsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addJobRequests(builder:flatbuffers.Builder, jobRequestsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, jobRequestsOffset, 0);
}

static createJobRequestsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startJobRequestsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, origNetworkOffset, 0);
}

static endMti_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMti_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIF');
}

static finishSizePrefixedMti_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIF', true);
}

static createMti_Full(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, idOffset:flatbuffers.Offset, dataMode:Mti_Full_dataMode_Enum, createdByOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, p3Offset:flatbuffers.Offset, p6Offset:flatbuffers.Offset, p7Offset:flatbuffers.Offset, p8Offset:flatbuffers.Offset, p9:number, p10:number, missionsOffset:flatbuffers.Offset, dwellsOffset:flatbuffers.Offset, hrrsOffset:flatbuffers.Offset, jobDefsOffset:flatbuffers.Offset, freeTextsOffset:flatbuffers.Offset, platformLocsOffset:flatbuffers.Offset, jobRequestsOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  Mti_Full.startMti_Full(builder);
  Mti_Full.addClassificationMarking(builder, classificationMarkingOffset);
  Mti_Full.addSource(builder, sourceOffset);
  Mti_Full.addOrigin(builder, originOffset);
  Mti_Full.addId(builder, idOffset);
  Mti_Full.addDataMode(builder, dataMode);
  Mti_Full.addCreatedBy(builder, createdByOffset);
  Mti_Full.addCreatedAt(builder, createdAtOffset);
  Mti_Full.addP3(builder, p3Offset);
  Mti_Full.addP6(builder, p6Offset);
  Mti_Full.addP7(builder, p7Offset);
  Mti_Full.addP8(builder, p8Offset);
  Mti_Full.addP9(builder, p9);
  Mti_Full.addP10(builder, p10);
  Mti_Full.addMissions(builder, missionsOffset);
  Mti_Full.addDwells(builder, dwellsOffset);
  Mti_Full.addHrrs(builder, hrrsOffset);
  Mti_Full.addJobDefs(builder, jobDefsOffset);
  Mti_Full.addFreeTexts(builder, freeTextsOffset);
  Mti_Full.addPlatformLocs(builder, platformLocsOffset);
  Mti_Full.addJobRequests(builder, jobRequestsOffset);
  Mti_Full.addOrigNetwork(builder, origNetworkOffset);
  return Mti_Full.endMti_Full(builder);
}

unpack(): Mti_FullT {
  return new Mti_FullT(
    this.classificationMarking(),
    this.source(),
    this.origin(),
    this.id(),
    this.dataMode(),
    this.createdBy(),
    this.createdAt(),
    this.p3(),
    this.p6(),
    this.p7(),
    this.p8(),
    this.p9(),
    this.p10(),
    this.bb!.createScalarList<string>(this.missions.bind(this), this.missions_Length()),
    this.bb!.createScalarList<string>(this.dwells.bind(this), this.dwells_Length()),
    this.bb!.createScalarList<string>(this.hrrs.bind(this), this.hrrs_Length()),
    this.bb!.createScalarList<string>(this.jobDefs.bind(this), this.jobDefs_Length()),
    this.bb!.createScalarList<string>(this.freeTexts.bind(this), this.freeTexts_Length()),
    this.bb!.createScalarList<string>(this.platformLocs.bind(this), this.platformLocs_Length()),
    this.bb!.createScalarList<string>(this.jobRequests.bind(this), this.jobRequests_Length()),
    this.origNetwork()
  );
}


unpackTo(_o: Mti_FullT): void {
  _o.classificationMarking = this.classificationMarking();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.id = this.id();
  _o.dataMode = this.dataMode();
  _o.createdBy = this.createdBy();
  _o.createdAt = this.createdAt();
  _o.p3 = this.p3();
  _o.p6 = this.p6();
  _o.p7 = this.p7();
  _o.p8 = this.p8();
  _o.p9 = this.p9();
  _o.p10 = this.p10();
  _o.missions = this.bb!.createScalarList<string>(this.missions.bind(this), this.missions_Length());
  _o.dwells = this.bb!.createScalarList<string>(this.dwells.bind(this), this.dwells_Length());
  _o.hrrs = this.bb!.createScalarList<string>(this.hrrs.bind(this), this.hrrs_Length());
  _o.jobDefs = this.bb!.createScalarList<string>(this.jobDefs.bind(this), this.jobDefs_Length());
  _o.freeTexts = this.bb!.createScalarList<string>(this.freeTexts.bind(this), this.freeTexts_Length());
  _o.platformLocs = this.bb!.createScalarList<string>(this.platformLocs.bind(this), this.platformLocs_Length());
  _o.jobRequests = this.bb!.createScalarList<string>(this.jobRequests.bind(this), this.jobRequests_Length());
  _o.origNetwork = this.origNetwork();
}
}

export class Mti_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public classificationMarking: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public id: string|Uint8Array|null = null,
  public dataMode: Mti_Full_dataMode_Enum = Mti_Full_dataMode_Enum.REAL,
  public createdBy: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public p3: string|Uint8Array|null = null,
  public p6: string|Uint8Array|null = null,
  public p7: string|Uint8Array|null = null,
  public p8: string|Uint8Array|null = null,
  public p9: number = 0,
  public p10: number = 0,
  public missions: (string)[] = [],
  public dwells: (string)[] = [],
  public hrrs: (string)[] = [],
  public jobDefs: (string)[] = [],
  public freeTexts: (string)[] = [],
  public platformLocs: (string)[] = [],
  public jobRequests: (string)[] = [],
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const p3 = (this.p3 !== null ? builder.createString(this.p3!) : 0);
  const p6 = (this.p6 !== null ? builder.createString(this.p6!) : 0);
  const p7 = (this.p7 !== null ? builder.createString(this.p7!) : 0);
  const p8 = (this.p8 !== null ? builder.createString(this.p8!) : 0);
  const missions = Mti_Full.createMissionsVector(builder, builder.createObjectOffsetList(this.missions));
  const dwells = Mti_Full.createDwellsVector(builder, builder.createObjectOffsetList(this.dwells));
  const hrrs = Mti_Full.createHrrsVector(builder, builder.createObjectOffsetList(this.hrrs));
  const jobDefs = Mti_Full.createJobDefsVector(builder, builder.createObjectOffsetList(this.jobDefs));
  const freeTexts = Mti_Full.createFreeTextsVector(builder, builder.createObjectOffsetList(this.freeTexts));
  const platformLocs = Mti_Full.createPlatformLocsVector(builder, builder.createObjectOffsetList(this.platformLocs));
  const jobRequests = Mti_Full.createJobRequestsVector(builder, builder.createObjectOffsetList(this.jobRequests));
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Mti_Full.createMti_Full(builder,
    classificationMarking,
    source,
    origin,
    id,
    this.dataMode,
    createdBy,
    createdAt,
    p3,
    p6,
    p7,
    p8,
    this.p9,
    this.p10,
    missions,
    dwells,
    hrrs,
    jobDefs,
    freeTexts,
    platformLocs,
    jobRequests,
    origNetwork
  );
}
}
