// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MissionAssignment_Ingest_dataMode_Enum } from './MissionAssignment_Ingest_dataMode_Enum.js';


/**
 * /// Platform mission assignment data.
 */
export class MissionAssignment_Ingest implements flatbuffers.IUnpackableObject<MissionAssignment_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MissionAssignment_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMissionAssignment_Ingest(bb:flatbuffers.ByteBuffer, obj?:MissionAssignment_Ingest):MissionAssignment_Ingest {
  return (obj || new MissionAssignment_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMissionAssignment_Ingest(bb:flatbuffers.ByteBuffer, obj?:MissionAssignment_Ingest):MissionAssignment_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MissionAssignment_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MISS');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: MISSIONASSIGNMENT-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The track ID that the status is referencing, addressee.
 * Example: /// Example: TRK-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
trkId():string|null
trkId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trkId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The timestamp of the mission data, in ISO 8601 UTC format.
 * Example: /// Example: 2021-01-01T01:01:01.123456Z
 * Constraints: No constraints specified.
 */
ts():string|null
ts(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ts(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The mission assignment discrete value.
 * Example: /// Example: MAD
 * Constraints: Minimum length = 1, Maximum length = 16
 */
mad():string|null
mad(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mad(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Receipt/Compliance, values from TABLE B-9.
 * Example: /// Example: RC-123
 * Constraints: Minimum length = 0, Maximum length = 16
 */
rc():string|null
rc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Recurrence rate, receipt/compliance.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
rr():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Track number objective.
 * Example: /// Example: TRACK_NUMBER
 * Constraints: No constraints specified.
 */
tno():string|null
tno(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tno(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Threat warning environment.
 * Example: /// Example: THREAT_WARNING
 * Constraints: Minimum length = 0, Maximum length = 16
 */
twenv():string|null
twenv(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
twenv(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Origin of index number.
 * Example: /// Example: ORIGIN
 * Constraints: Minimum length = 0, Maximum length = 16
 */
orginx():string|null
orginx(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
orginx(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Environment.
 * Example: /// Example: ENV
 * Constraints: Minimum length = 0, Maximum length = 16
 */
env():string|null
env(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
env(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Strength.
 * Example: /// Example: STRENGTH
 * Constraints: Minimum length = 0, Maximum length = 16
 */
sz():string|null
sz(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sz(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Index number.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
index():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * TARGET POSITION CONTINUATION WORD - number of associated dmpis.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
c1associateddmpis():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
 * Example: /// Example: C2SPC
 * Constraints: No constraints specified.
 */
c2spc():string|null
c2spc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c2spc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
 * Example: /// Example: C2AIR
 * Constraints: No constraints specified.
 */
c2air():string|null
c2air(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c2air(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
 * Example: /// Example: C2SUR
 * Constraints: No constraints specified.
 */
c2sur():string|null
c2sur(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c2sur(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
 * Example: /// Example: C2LND
 * Constraints: No constraints specified.
 */
c2lnd():string|null
c2lnd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c2lnd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TARGET DATA CONTINUATION WORD - identity.
 * Example: /// Example: C2ID
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c2id():string|null
c2id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c2id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
 * Example: /// Example: C2IDAMP
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c2idamplifyingdescriptor():string|null
c2idamplifyingdescriptor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c2idamplifyingdescriptor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
c2alt():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
c2crs():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
c2spd():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * TARGET DATA CONTINUATION WORD - special interest indicator.
 * Example: /// Example: C2SPECIAL
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c2specialinterestindicator():string|null
c2specialinterestindicator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c2specialinterestindicator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TARGET DATA CONTINUATION WORD - exercise indicator.
 * Example: /// Example: C2EXERCISE
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c2exerciseindicator():string|null
c2exerciseindicator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c2exerciseindicator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TARGET DATA CONTINUATION WORD - method of fire.
 * Example: /// Example: MOF
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c2exercisemof():string|null
c2exercisemof(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c2exercisemof(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
c3lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
c3lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
c3elv():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * TARGET DATA CONTINUATION WORD - point type 1.
 * Example: /// Example: C3PTL
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c3ptl():string|null
c3ptl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c3ptl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TARGET DATA CONTINUATION WORD - point number.
 * Example: /// Example: C3PTNUM
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c3ptnum():string|null
c3ptnum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c3ptnum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
 * Example: /// Example: C4TGT
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c4tgt():string|null
c4tgt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c4tgt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SURFACE ATTACK CONTINUATION WORD - target defenses.
 * Example: /// Example: C4DEF
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c4def():string|null
c4def(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c4def(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
c4runin():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
 * Example: /// Example: 4
 * Constraints: No constraints specified.
 */
c4egress():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
c4numberofstores():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * SURFACE ATTACK CONTINUATION WORD - type of stores.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
c4typeofstores():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * SURFACE ATTACK CONTINUATION WORD - time discrete.
 * Example: /// Example: C4TIMED
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c4timediscrete():string|null
c4timediscrete(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c4timediscrete(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SURFACE ATTACK CONTINUATION WORD - hour.
 * Example: /// Example: 4
 * Constraints: No constraints specified.
 */
c4tm():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * SURFACE ATTACK CONTINUATION WORD - minute.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
c4colon():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * SURFACE ATTACK CONTINUATION WORD - mode of delivery.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
c4mod():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
c5haeadj():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * CONTINUATION WORD - time window.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
c5tw():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * CONTINUATION WORD - target bearing.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
c5tgtbrng():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
c5latlsb():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
c5lonlsb():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
c5elevationlsbs():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
c5colon():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * TARGETING CONTINUATION WORD - laser illuminator code.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
c6laser():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * TARGETING CONTINUATION WORD - index number, related, 0=NS.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
c6intel():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * TARGETING CONTINUATION WORD - track number, related to 3.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
c6tnr3():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * TARGETING CONTINUATION WORD - designator/seeker pulse code type.
 * Example: /// Example: C6DSPCT
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c6dspct():string|null
c6dspct(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c6dspct(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TARGETING CONTINUATION WORD - designator/seeker pulse code.
 * Example: /// Example: C6DSPC
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c6dspc():string|null
c6dspc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c6dspc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TARGETING CONTINUATION WORD - first pulse/last pulse mode.
 * Example: /// Example: C6FPLPM
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c6fplpm():string|null
c6fplpm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c6fplpm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TARGETING CONTINUATION WORD - long pulse mode.
 * Example: /// Example: C6LONGPM
 * Constraints: Minimum length = 0, Maximum length = 16
 */
c6longpm():string|null
c6longpm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c6longpm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * THIRD PARTY CONTINUATION WORD  - track number, index originator.
 * Example: /// Example: C7TNOR
 * Constraints: No constraints specified.
 */
c7tnor():string|null
c7tnor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
c7tnor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * THIRD PARTY CONTINUATION WORD  - index number, third party.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
c7in3p():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * THIRD PARTY CONTINUATION WORD  - elevation angle, 2.
 * Example: /// Example: 5.23
 * Constraints: No constraints specified.
 */
c7elang2():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():MissionAssignment_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MissionAssignment_Ingest_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startMissionAssignment_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(66);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addTrkId(builder:flatbuffers.Builder, trkIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, trkIdOffset, 0);
}

static addTs(builder:flatbuffers.Builder, tsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, tsOffset, 0);
}

static addMad(builder:flatbuffers.Builder, madOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, madOffset, 0);
}

static addRc(builder:flatbuffers.Builder, rcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, rcOffset, 0);
}

static addRr(builder:flatbuffers.Builder, rr:number) {
  builder.addFieldInt32(6, rr, 0);
}

static addTno(builder:flatbuffers.Builder, tnoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, tnoOffset, 0);
}

static addTwenv(builder:flatbuffers.Builder, twenvOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, twenvOffset, 0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(9, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(10, lon, 0.0);
}

static addOrginx(builder:flatbuffers.Builder, orginxOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, orginxOffset, 0);
}

static addEnv(builder:flatbuffers.Builder, envOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, envOffset, 0);
}

static addSz(builder:flatbuffers.Builder, szOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, szOffset, 0);
}

static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt32(14, index, 0);
}

static addC1associateddmpis(builder:flatbuffers.Builder, c1associateddmpis:number) {
  builder.addFieldInt32(15, c1associateddmpis, 0);
}

static addC2spc(builder:flatbuffers.Builder, c2spcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, c2spcOffset, 0);
}

static addC2air(builder:flatbuffers.Builder, c2airOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, c2airOffset, 0);
}

static addC2sur(builder:flatbuffers.Builder, c2surOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, c2surOffset, 0);
}

static addC2lnd(builder:flatbuffers.Builder, c2lndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, c2lndOffset, 0);
}

static addC2id(builder:flatbuffers.Builder, c2idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, c2idOffset, 0);
}

static addC2idamplifyingdescriptor(builder:flatbuffers.Builder, c2idamplifyingdescriptorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, c2idamplifyingdescriptorOffset, 0);
}

static addC2alt(builder:flatbuffers.Builder, c2alt:number) {
  builder.addFieldInt32(22, c2alt, 0);
}

static addC2crs(builder:flatbuffers.Builder, c2crs:number) {
  builder.addFieldInt32(23, c2crs, 0);
}

static addC2spd(builder:flatbuffers.Builder, c2spd:number) {
  builder.addFieldInt32(24, c2spd, 0);
}

static addC2specialinterestindicator(builder:flatbuffers.Builder, c2specialinterestindicatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, c2specialinterestindicatorOffset, 0);
}

static addC2exerciseindicator(builder:flatbuffers.Builder, c2exerciseindicatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, c2exerciseindicatorOffset, 0);
}

static addC2exercisemof(builder:flatbuffers.Builder, c2exercisemofOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, c2exercisemofOffset, 0);
}

static addC3lat(builder:flatbuffers.Builder, c3lat:number) {
  builder.addFieldFloat64(28, c3lat, 0.0);
}

static addC3lon(builder:flatbuffers.Builder, c3lon:number) {
  builder.addFieldFloat64(29, c3lon, 0.0);
}

static addC3elv(builder:flatbuffers.Builder, c3elv:number) {
  builder.addFieldFloat64(30, c3elv, 0.0);
}

static addC3ptl(builder:flatbuffers.Builder, c3ptlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, c3ptlOffset, 0);
}

static addC3ptnum(builder:flatbuffers.Builder, c3ptnumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, c3ptnumOffset, 0);
}

static addC4tgt(builder:flatbuffers.Builder, c4tgtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, c4tgtOffset, 0);
}

static addC4def(builder:flatbuffers.Builder, c4defOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, c4defOffset, 0);
}

static addC4runin(builder:flatbuffers.Builder, c4runin:number) {
  builder.addFieldInt32(35, c4runin, 0);
}

static addC4egress(builder:flatbuffers.Builder, c4egress:number) {
  builder.addFieldInt32(36, c4egress, 0);
}

static addC4numberofstores(builder:flatbuffers.Builder, c4numberofstores:number) {
  builder.addFieldInt32(37, c4numberofstores, 0);
}

static addC4typeofstores(builder:flatbuffers.Builder, c4typeofstores:number) {
  builder.addFieldInt32(38, c4typeofstores, 0);
}

static addC4timediscrete(builder:flatbuffers.Builder, c4timediscreteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, c4timediscreteOffset, 0);
}

static addC4tm(builder:flatbuffers.Builder, c4tm:number) {
  builder.addFieldInt32(40, c4tm, 0);
}

static addC4colon(builder:flatbuffers.Builder, c4colon:number) {
  builder.addFieldInt32(41, c4colon, 0);
}

static addC4mod(builder:flatbuffers.Builder, c4mod:number) {
  builder.addFieldInt32(42, c4mod, 0);
}

static addC5haeadj(builder:flatbuffers.Builder, c5haeadj:number) {
  builder.addFieldInt32(43, c5haeadj, 0);
}

static addC5tw(builder:flatbuffers.Builder, c5tw:number) {
  builder.addFieldInt32(44, c5tw, 0);
}

static addC5tgtbrng(builder:flatbuffers.Builder, c5tgtbrng:number) {
  builder.addFieldInt32(45, c5tgtbrng, 0);
}

static addC5latlsb(builder:flatbuffers.Builder, c5latlsb:number) {
  builder.addFieldInt32(46, c5latlsb, 0);
}

static addC5lonlsb(builder:flatbuffers.Builder, c5lonlsb:number) {
  builder.addFieldInt32(47, c5lonlsb, 0);
}

static addC5elevationlsbs(builder:flatbuffers.Builder, c5elevationlsbs:number) {
  builder.addFieldInt32(48, c5elevationlsbs, 0);
}

static addC5colon(builder:flatbuffers.Builder, c5colon:number) {
  builder.addFieldInt32(49, c5colon, 0);
}

static addC6laser(builder:flatbuffers.Builder, c6laser:number) {
  builder.addFieldInt32(50, c6laser, 0);
}

static addC6intel(builder:flatbuffers.Builder, c6intel:number) {
  builder.addFieldInt32(51, c6intel, 0);
}

static addC6tnr3(builder:flatbuffers.Builder, c6tnr3:number) {
  builder.addFieldInt32(52, c6tnr3, 0);
}

static addC6dspct(builder:flatbuffers.Builder, c6dspctOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, c6dspctOffset, 0);
}

static addC6dspc(builder:flatbuffers.Builder, c6dspcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, c6dspcOffset, 0);
}

static addC6fplpm(builder:flatbuffers.Builder, c6fplpmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, c6fplpmOffset, 0);
}

static addC6longpm(builder:flatbuffers.Builder, c6longpmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, c6longpmOffset, 0);
}

static addC7tnor(builder:flatbuffers.Builder, c7tnorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, c7tnorOffset, 0);
}

static addC7in3p(builder:flatbuffers.Builder, c7in3p:number) {
  builder.addFieldInt32(58, c7in3p, 0);
}

static addC7elang2(builder:flatbuffers.Builder, c7elang2:number) {
  builder.addFieldFloat64(59, c7elang2, 0.0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:MissionAssignment_Ingest_dataMode_Enum) {
  builder.addFieldInt8(64, dataMode, MissionAssignment_Ingest_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, origNetworkOffset, 0);
}

static endMissionAssignment_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMissionAssignment_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MISS');
}

static finishSizePrefixedMissionAssignment_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MISS', true);
}

static createMissionAssignment_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, trkIdOffset:flatbuffers.Offset, tsOffset:flatbuffers.Offset, madOffset:flatbuffers.Offset, rcOffset:flatbuffers.Offset, rr:number, tnoOffset:flatbuffers.Offset, twenvOffset:flatbuffers.Offset, lat:number, lon:number, orginxOffset:flatbuffers.Offset, envOffset:flatbuffers.Offset, szOffset:flatbuffers.Offset, index:number, c1associateddmpis:number, c2spcOffset:flatbuffers.Offset, c2airOffset:flatbuffers.Offset, c2surOffset:flatbuffers.Offset, c2lndOffset:flatbuffers.Offset, c2idOffset:flatbuffers.Offset, c2idamplifyingdescriptorOffset:flatbuffers.Offset, c2alt:number, c2crs:number, c2spd:number, c2specialinterestindicatorOffset:flatbuffers.Offset, c2exerciseindicatorOffset:flatbuffers.Offset, c2exercisemofOffset:flatbuffers.Offset, c3lat:number, c3lon:number, c3elv:number, c3ptlOffset:flatbuffers.Offset, c3ptnumOffset:flatbuffers.Offset, c4tgtOffset:flatbuffers.Offset, c4defOffset:flatbuffers.Offset, c4runin:number, c4egress:number, c4numberofstores:number, c4typeofstores:number, c4timediscreteOffset:flatbuffers.Offset, c4tm:number, c4colon:number, c4mod:number, c5haeadj:number, c5tw:number, c5tgtbrng:number, c5latlsb:number, c5lonlsb:number, c5elevationlsbs:number, c5colon:number, c6laser:number, c6intel:number, c6tnr3:number, c6dspctOffset:flatbuffers.Offset, c6dspcOffset:flatbuffers.Offset, c6fplpmOffset:flatbuffers.Offset, c6longpmOffset:flatbuffers.Offset, c7tnorOffset:flatbuffers.Offset, c7in3p:number, c7elang2:number, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:MissionAssignment_Ingest_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  MissionAssignment_Ingest.startMissionAssignment_Ingest(builder);
  MissionAssignment_Ingest.addId(builder, idOffset);
  MissionAssignment_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  MissionAssignment_Ingest.addTrkId(builder, trkIdOffset);
  MissionAssignment_Ingest.addTs(builder, tsOffset);
  MissionAssignment_Ingest.addMad(builder, madOffset);
  MissionAssignment_Ingest.addRc(builder, rcOffset);
  MissionAssignment_Ingest.addRr(builder, rr);
  MissionAssignment_Ingest.addTno(builder, tnoOffset);
  MissionAssignment_Ingest.addTwenv(builder, twenvOffset);
  MissionAssignment_Ingest.addLat(builder, lat);
  MissionAssignment_Ingest.addLon(builder, lon);
  MissionAssignment_Ingest.addOrginx(builder, orginxOffset);
  MissionAssignment_Ingest.addEnv(builder, envOffset);
  MissionAssignment_Ingest.addSz(builder, szOffset);
  MissionAssignment_Ingest.addIndex(builder, index);
  MissionAssignment_Ingest.addC1associateddmpis(builder, c1associateddmpis);
  MissionAssignment_Ingest.addC2spc(builder, c2spcOffset);
  MissionAssignment_Ingest.addC2air(builder, c2airOffset);
  MissionAssignment_Ingest.addC2sur(builder, c2surOffset);
  MissionAssignment_Ingest.addC2lnd(builder, c2lndOffset);
  MissionAssignment_Ingest.addC2id(builder, c2idOffset);
  MissionAssignment_Ingest.addC2idamplifyingdescriptor(builder, c2idamplifyingdescriptorOffset);
  MissionAssignment_Ingest.addC2alt(builder, c2alt);
  MissionAssignment_Ingest.addC2crs(builder, c2crs);
  MissionAssignment_Ingest.addC2spd(builder, c2spd);
  MissionAssignment_Ingest.addC2specialinterestindicator(builder, c2specialinterestindicatorOffset);
  MissionAssignment_Ingest.addC2exerciseindicator(builder, c2exerciseindicatorOffset);
  MissionAssignment_Ingest.addC2exercisemof(builder, c2exercisemofOffset);
  MissionAssignment_Ingest.addC3lat(builder, c3lat);
  MissionAssignment_Ingest.addC3lon(builder, c3lon);
  MissionAssignment_Ingest.addC3elv(builder, c3elv);
  MissionAssignment_Ingest.addC3ptl(builder, c3ptlOffset);
  MissionAssignment_Ingest.addC3ptnum(builder, c3ptnumOffset);
  MissionAssignment_Ingest.addC4tgt(builder, c4tgtOffset);
  MissionAssignment_Ingest.addC4def(builder, c4defOffset);
  MissionAssignment_Ingest.addC4runin(builder, c4runin);
  MissionAssignment_Ingest.addC4egress(builder, c4egress);
  MissionAssignment_Ingest.addC4numberofstores(builder, c4numberofstores);
  MissionAssignment_Ingest.addC4typeofstores(builder, c4typeofstores);
  MissionAssignment_Ingest.addC4timediscrete(builder, c4timediscreteOffset);
  MissionAssignment_Ingest.addC4tm(builder, c4tm);
  MissionAssignment_Ingest.addC4colon(builder, c4colon);
  MissionAssignment_Ingest.addC4mod(builder, c4mod);
  MissionAssignment_Ingest.addC5haeadj(builder, c5haeadj);
  MissionAssignment_Ingest.addC5tw(builder, c5tw);
  MissionAssignment_Ingest.addC5tgtbrng(builder, c5tgtbrng);
  MissionAssignment_Ingest.addC5latlsb(builder, c5latlsb);
  MissionAssignment_Ingest.addC5lonlsb(builder, c5lonlsb);
  MissionAssignment_Ingest.addC5elevationlsbs(builder, c5elevationlsbs);
  MissionAssignment_Ingest.addC5colon(builder, c5colon);
  MissionAssignment_Ingest.addC6laser(builder, c6laser);
  MissionAssignment_Ingest.addC6intel(builder, c6intel);
  MissionAssignment_Ingest.addC6tnr3(builder, c6tnr3);
  MissionAssignment_Ingest.addC6dspct(builder, c6dspctOffset);
  MissionAssignment_Ingest.addC6dspc(builder, c6dspcOffset);
  MissionAssignment_Ingest.addC6fplpm(builder, c6fplpmOffset);
  MissionAssignment_Ingest.addC6longpm(builder, c6longpmOffset);
  MissionAssignment_Ingest.addC7tnor(builder, c7tnorOffset);
  MissionAssignment_Ingest.addC7in3p(builder, c7in3p);
  MissionAssignment_Ingest.addC7elang2(builder, c7elang2);
  MissionAssignment_Ingest.addCreatedAt(builder, createdAtOffset);
  MissionAssignment_Ingest.addCreatedBy(builder, createdByOffset);
  MissionAssignment_Ingest.addSource(builder, sourceOffset);
  MissionAssignment_Ingest.addOrigin(builder, originOffset);
  MissionAssignment_Ingest.addDataMode(builder, dataMode);
  MissionAssignment_Ingest.addOrigNetwork(builder, origNetworkOffset);
  return MissionAssignment_Ingest.endMissionAssignment_Ingest(builder);
}

unpack(): MissionAssignment_IngestT {
  return new MissionAssignment_IngestT(
    this.id(),
    this.classificationMarking(),
    this.trkId(),
    this.ts(),
    this.mad(),
    this.rc(),
    this.rr(),
    this.tno(),
    this.twenv(),
    this.lat(),
    this.lon(),
    this.orginx(),
    this.env(),
    this.sz(),
    this.index(),
    this.c1associateddmpis(),
    this.c2spc(),
    this.c2air(),
    this.c2sur(),
    this.c2lnd(),
    this.c2id(),
    this.c2idamplifyingdescriptor(),
    this.c2alt(),
    this.c2crs(),
    this.c2spd(),
    this.c2specialinterestindicator(),
    this.c2exerciseindicator(),
    this.c2exercisemof(),
    this.c3lat(),
    this.c3lon(),
    this.c3elv(),
    this.c3ptl(),
    this.c3ptnum(),
    this.c4tgt(),
    this.c4def(),
    this.c4runin(),
    this.c4egress(),
    this.c4numberofstores(),
    this.c4typeofstores(),
    this.c4timediscrete(),
    this.c4tm(),
    this.c4colon(),
    this.c4mod(),
    this.c5haeadj(),
    this.c5tw(),
    this.c5tgtbrng(),
    this.c5latlsb(),
    this.c5lonlsb(),
    this.c5elevationlsbs(),
    this.c5colon(),
    this.c6laser(),
    this.c6intel(),
    this.c6tnr3(),
    this.c6dspct(),
    this.c6dspc(),
    this.c6fplpm(),
    this.c6longpm(),
    this.c7tnor(),
    this.c7in3p(),
    this.c7elang2(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: MissionAssignment_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.trkId = this.trkId();
  _o.ts = this.ts();
  _o.mad = this.mad();
  _o.rc = this.rc();
  _o.rr = this.rr();
  _o.tno = this.tno();
  _o.twenv = this.twenv();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.orginx = this.orginx();
  _o.env = this.env();
  _o.sz = this.sz();
  _o.index = this.index();
  _o.c1associateddmpis = this.c1associateddmpis();
  _o.c2spc = this.c2spc();
  _o.c2air = this.c2air();
  _o.c2sur = this.c2sur();
  _o.c2lnd = this.c2lnd();
  _o.c2id = this.c2id();
  _o.c2idamplifyingdescriptor = this.c2idamplifyingdescriptor();
  _o.c2alt = this.c2alt();
  _o.c2crs = this.c2crs();
  _o.c2spd = this.c2spd();
  _o.c2specialinterestindicator = this.c2specialinterestindicator();
  _o.c2exerciseindicator = this.c2exerciseindicator();
  _o.c2exercisemof = this.c2exercisemof();
  _o.c3lat = this.c3lat();
  _o.c3lon = this.c3lon();
  _o.c3elv = this.c3elv();
  _o.c3ptl = this.c3ptl();
  _o.c3ptnum = this.c3ptnum();
  _o.c4tgt = this.c4tgt();
  _o.c4def = this.c4def();
  _o.c4runin = this.c4runin();
  _o.c4egress = this.c4egress();
  _o.c4numberofstores = this.c4numberofstores();
  _o.c4typeofstores = this.c4typeofstores();
  _o.c4timediscrete = this.c4timediscrete();
  _o.c4tm = this.c4tm();
  _o.c4colon = this.c4colon();
  _o.c4mod = this.c4mod();
  _o.c5haeadj = this.c5haeadj();
  _o.c5tw = this.c5tw();
  _o.c5tgtbrng = this.c5tgtbrng();
  _o.c5latlsb = this.c5latlsb();
  _o.c5lonlsb = this.c5lonlsb();
  _o.c5elevationlsbs = this.c5elevationlsbs();
  _o.c5colon = this.c5colon();
  _o.c6laser = this.c6laser();
  _o.c6intel = this.c6intel();
  _o.c6tnr3 = this.c6tnr3();
  _o.c6dspct = this.c6dspct();
  _o.c6dspc = this.c6dspc();
  _o.c6fplpm = this.c6fplpm();
  _o.c6longpm = this.c6longpm();
  _o.c7tnor = this.c7tnor();
  _o.c7in3p = this.c7in3p();
  _o.c7elang2 = this.c7elang2();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class MissionAssignment_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public trkId: string|Uint8Array|null = null,
  public ts: string|Uint8Array|null = null,
  public mad: string|Uint8Array|null = null,
  public rc: string|Uint8Array|null = null,
  public rr: number = 0,
  public tno: string|Uint8Array|null = null,
  public twenv: string|Uint8Array|null = null,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public orginx: string|Uint8Array|null = null,
  public env: string|Uint8Array|null = null,
  public sz: string|Uint8Array|null = null,
  public index: number = 0,
  public c1associateddmpis: number = 0,
  public c2spc: string|Uint8Array|null = null,
  public c2air: string|Uint8Array|null = null,
  public c2sur: string|Uint8Array|null = null,
  public c2lnd: string|Uint8Array|null = null,
  public c2id: string|Uint8Array|null = null,
  public c2idamplifyingdescriptor: string|Uint8Array|null = null,
  public c2alt: number = 0,
  public c2crs: number = 0,
  public c2spd: number = 0,
  public c2specialinterestindicator: string|Uint8Array|null = null,
  public c2exerciseindicator: string|Uint8Array|null = null,
  public c2exercisemof: string|Uint8Array|null = null,
  public c3lat: number = 0.0,
  public c3lon: number = 0.0,
  public c3elv: number = 0.0,
  public c3ptl: string|Uint8Array|null = null,
  public c3ptnum: string|Uint8Array|null = null,
  public c4tgt: string|Uint8Array|null = null,
  public c4def: string|Uint8Array|null = null,
  public c4runin: number = 0,
  public c4egress: number = 0,
  public c4numberofstores: number = 0,
  public c4typeofstores: number = 0,
  public c4timediscrete: string|Uint8Array|null = null,
  public c4tm: number = 0,
  public c4colon: number = 0,
  public c4mod: number = 0,
  public c5haeadj: number = 0,
  public c5tw: number = 0,
  public c5tgtbrng: number = 0,
  public c5latlsb: number = 0,
  public c5lonlsb: number = 0,
  public c5elevationlsbs: number = 0,
  public c5colon: number = 0,
  public c6laser: number = 0,
  public c6intel: number = 0,
  public c6tnr3: number = 0,
  public c6dspct: string|Uint8Array|null = null,
  public c6dspc: string|Uint8Array|null = null,
  public c6fplpm: string|Uint8Array|null = null,
  public c6longpm: string|Uint8Array|null = null,
  public c7tnor: string|Uint8Array|null = null,
  public c7in3p: number = 0,
  public c7elang2: number = 0.0,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: MissionAssignment_Ingest_dataMode_Enum = MissionAssignment_Ingest_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const trkId = (this.trkId !== null ? builder.createString(this.trkId!) : 0);
  const ts = (this.ts !== null ? builder.createString(this.ts!) : 0);
  const mad = (this.mad !== null ? builder.createString(this.mad!) : 0);
  const rc = (this.rc !== null ? builder.createString(this.rc!) : 0);
  const tno = (this.tno !== null ? builder.createString(this.tno!) : 0);
  const twenv = (this.twenv !== null ? builder.createString(this.twenv!) : 0);
  const orginx = (this.orginx !== null ? builder.createString(this.orginx!) : 0);
  const env = (this.env !== null ? builder.createString(this.env!) : 0);
  const sz = (this.sz !== null ? builder.createString(this.sz!) : 0);
  const c2spc = (this.c2spc !== null ? builder.createString(this.c2spc!) : 0);
  const c2air = (this.c2air !== null ? builder.createString(this.c2air!) : 0);
  const c2sur = (this.c2sur !== null ? builder.createString(this.c2sur!) : 0);
  const c2lnd = (this.c2lnd !== null ? builder.createString(this.c2lnd!) : 0);
  const c2id = (this.c2id !== null ? builder.createString(this.c2id!) : 0);
  const c2idamplifyingdescriptor = (this.c2idamplifyingdescriptor !== null ? builder.createString(this.c2idamplifyingdescriptor!) : 0);
  const c2specialinterestindicator = (this.c2specialinterestindicator !== null ? builder.createString(this.c2specialinterestindicator!) : 0);
  const c2exerciseindicator = (this.c2exerciseindicator !== null ? builder.createString(this.c2exerciseindicator!) : 0);
  const c2exercisemof = (this.c2exercisemof !== null ? builder.createString(this.c2exercisemof!) : 0);
  const c3ptl = (this.c3ptl !== null ? builder.createString(this.c3ptl!) : 0);
  const c3ptnum = (this.c3ptnum !== null ? builder.createString(this.c3ptnum!) : 0);
  const c4tgt = (this.c4tgt !== null ? builder.createString(this.c4tgt!) : 0);
  const c4def = (this.c4def !== null ? builder.createString(this.c4def!) : 0);
  const c4timediscrete = (this.c4timediscrete !== null ? builder.createString(this.c4timediscrete!) : 0);
  const c6dspct = (this.c6dspct !== null ? builder.createString(this.c6dspct!) : 0);
  const c6dspc = (this.c6dspc !== null ? builder.createString(this.c6dspc!) : 0);
  const c6fplpm = (this.c6fplpm !== null ? builder.createString(this.c6fplpm!) : 0);
  const c6longpm = (this.c6longpm !== null ? builder.createString(this.c6longpm!) : 0);
  const c7tnor = (this.c7tnor !== null ? builder.createString(this.c7tnor!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return MissionAssignment_Ingest.createMissionAssignment_Ingest(builder,
    id,
    classificationMarking,
    trkId,
    ts,
    mad,
    rc,
    this.rr,
    tno,
    twenv,
    this.lat,
    this.lon,
    orginx,
    env,
    sz,
    this.index,
    this.c1associateddmpis,
    c2spc,
    c2air,
    c2sur,
    c2lnd,
    c2id,
    c2idamplifyingdescriptor,
    this.c2alt,
    this.c2crs,
    this.c2spd,
    c2specialinterestindicator,
    c2exerciseindicator,
    c2exercisemof,
    this.c3lat,
    this.c3lon,
    this.c3elv,
    c3ptl,
    c3ptnum,
    c4tgt,
    c4def,
    this.c4runin,
    this.c4egress,
    this.c4numberofstores,
    this.c4typeofstores,
    c4timediscrete,
    this.c4tm,
    this.c4colon,
    this.c4mod,
    this.c5haeadj,
    this.c5tw,
    this.c5tgtbrng,
    this.c5latlsb,
    this.c5lonlsb,
    this.c5elevationlsbs,
    this.c5colon,
    this.c6laser,
    this.c6intel,
    this.c6tnr3,
    c6dspct,
    c6dspc,
    c6fplpm,
    c6longpm,
    c7tnor,
    this.c7in3p,
    this.c7elang2,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
