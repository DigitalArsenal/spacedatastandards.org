// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AirfieldSlotConsumption_Abridged_dataMode_Enum } from './AirfieldSlotConsumption_Abridged_dataMode_Enum.js';
import { AirfieldSlotConsumption_Abridged_status_Enum } from './AirfieldSlotConsumption_Abridged_status_Enum.js';


/**
 * /// Airfield slot use data. Contains the dynamic data associated with the status and use of specific airfield slots.
 */
export class AirfieldSlotConsumption_Abridged implements flatbuffers.IUnpackableObject<AirfieldSlotConsumption_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AirfieldSlotConsumption_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAirfieldSlotConsumption_Abridged(bb:flatbuffers.ByteBuffer, obj?:AirfieldSlotConsumption_Abridged):AirfieldSlotConsumption_Abridged {
  return (obj || new AirfieldSlotConsumption_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAirfieldSlotConsumption_Abridged(bb:flatbuffers.ByteBuffer, obj?:AirfieldSlotConsumption_Abridged):AirfieldSlotConsumption_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AirfieldSlotConsumption_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRF');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the airfield slot for which this slot consumption record is referencing.
 * Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idAirfieldSlot():string|null
idAirfieldSlot(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idAirfieldSlot(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
 * Example: /// Example: APPROVED
 * Constraints: Minimum length = 0, Maximum length = 9
 */
status():AirfieldSlotConsumption_Abridged_status_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AirfieldSlotConsumption_Abridged_status_Enum.REQUESTED;
}

/**
 * Flag indicating if the slot is occupied.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
occupied():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.
 * Example: /// Example: APRON1-230401001
 * Constraints: Minimum length = 0, Maximum length = 64
 */
consumer():string|null
consumer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
consumer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The aircraft Model Design Series designation of the aircraft occupying this slot.
 * Example: /// Example: C017A
 * Constraints: Minimum length = 0, Maximum length = 36
 */
occAircraftMds():string|null
occAircraftMds(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
occAircraftMds(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The tail number of the aircraft occupying this slot.
 * Example: /// Example: N702JG
 * Constraints: Minimum length = 0, Maximum length = 16
 */
occTailNumber():string|null
occTailNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
occTailNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of call signs of the aircraft using this slot.
 * Example: /// Example: ['RCH123', 'ABC123', 'LLS442']
 * Constraints: No constraints specified.
 */
callSigns(index: number):string
callSigns(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
callSigns(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

callSignsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
 * Example: /// Example: AJM123456123
 * Constraints: Minimum length = 0, Maximum length = 36
 */
missionId():string|null
missionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of aircraft using this slot for this time.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numAircraft():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-01-01T01:01:03.123Z
 * Constraints: No constraints specified.
 */
occStartTime():string|null
occStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
occStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The aircraft Model Design Series designation of the aircraft this slot is reserved for.
 * Example: /// Example: C017A
 * Constraints: Minimum length = 0, Maximum length = 36
 */
resAircraftMds():string|null
resAircraftMds(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
resAircraftMds(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The tail number of the aircraft this slot is reserved for.
 * Example: /// Example: N702JG
 * Constraints: Minimum length = 0, Maximum length = 16
 */
resTailNumber():string|null
resTailNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
resTailNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).
 * Example: /// Example: M
 * Constraints: Minimum length = 0, Maximum length = 2
 */
resType():string|null
resType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
resType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reason the slot reservation was made.
 * Example: /// Example: Maintenance needed
 * Constraints: Minimum length = 0, Maximum length = 256
 */
resReason():string|null
resReason(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
resReason(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
 * Example: /// Example: AJM123456123
 * Constraints: Minimum length = 0, Maximum length = 36
 */
resMissionId():string|null
resMissionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
resMissionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The start of the slot window, in ISO 8601 UTC format.
 * Example: /// Example: 2023-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The end of the slot window, in ISO 8601 UTC format.
 * Example: /// Example: 2023-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
endTime():string|null
endTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.
 * Example: /// Example: 2023-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
targetTime():string|null
targetTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
targetTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the sortie arriving at the slot start time.
 * Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idArrSortie():string|null
idArrSortie(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idArrSortie(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the sortie departing at the slot end time.
 * Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idDepSortie():string|null
idDepSortie(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idDepSortie(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate identifier of the sortie arriving at the slot start time provided by the source.
 * Example: /// Example: ALT-SORTIE-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
altArrSortieId():string|null
altArrSortieId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altArrSortieId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate identifier of the sortie departing at the slot end time provided by the source.
 * Example: /// Example: ALT-SORTIE-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
altDepSortieId():string|null
altDepSortieId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altDepSortieId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Comments from the requester.
 * Example: /// Example: Sorry for the late notice.
 * Constraints: Minimum length = 0, Maximum length = 128
 */
reqComment():string|null
reqComment(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reqComment(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Comments from the approver.
 * Example: /// Example: The request was denied due to inoperable fuel pumps.
 * Constraints: Minimum length = 0, Maximum length = 128
 */
appComment():string|null
appComment(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
appComment(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Short name of the organization requesting use of this slot.
 * Example: /// Example: TACC
 * Constraints: Minimum length = 0, Maximum length = 32
 */
reqOrg():string|null
reqOrg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reqOrg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.
 * Example: /// Example: CB
 * Constraints: Minimum length = 0, Maximum length = 8
 */
reqInitials():string|null
reqInitials(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reqInitials(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Short name of the organization approving the use of this slot.
 * Example: /// Example: KCHS/BOPS
 * Constraints: Minimum length = 0, Maximum length = 32
 */
appOrg():string|null
appOrg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
appOrg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.
 * Example: /// Example: CB
 * Constraints: Minimum length = 0, Maximum length = 8
 */
appInitials():string|null
appInitials(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
appInitials(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AirfieldSlotConsumption_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AirfieldSlotConsumption_Abridged_dataMode_Enum.REAL;
}

static startAirfieldSlotConsumption_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(37);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdAirfieldSlot(builder:flatbuffers.Builder, idAirfieldSlotOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idAirfieldSlotOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, status:AirfieldSlotConsumption_Abridged_status_Enum) {
  builder.addFieldInt8(3, status, AirfieldSlotConsumption_Abridged_status_Enum.REQUESTED);
}

static addOccupied(builder:flatbuffers.Builder, occupied:boolean) {
  builder.addFieldInt8(4, +occupied, +false);
}

static addConsumer(builder:flatbuffers.Builder, consumerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, consumerOffset, 0);
}

static addOccAircraftMds(builder:flatbuffers.Builder, occAircraftMdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, occAircraftMdsOffset, 0);
}

static addOccTailNumber(builder:flatbuffers.Builder, occTailNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, occTailNumberOffset, 0);
}

static addCallSigns(builder:flatbuffers.Builder, callSignsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, callSignsOffset, 0);
}

static createCallSignsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCallSignsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMissionId(builder:flatbuffers.Builder, missionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, missionIdOffset, 0);
}

static addNumAircraft(builder:flatbuffers.Builder, numAircraft:number) {
  builder.addFieldInt32(10, numAircraft, 0);
}

static addOccStartTime(builder:flatbuffers.Builder, occStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, occStartTimeOffset, 0);
}

static addResAircraftMds(builder:flatbuffers.Builder, resAircraftMdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, resAircraftMdsOffset, 0);
}

static addResTailNumber(builder:flatbuffers.Builder, resTailNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, resTailNumberOffset, 0);
}

static addResType(builder:flatbuffers.Builder, resTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, resTypeOffset, 0);
}

static addResReason(builder:flatbuffers.Builder, resReasonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, resReasonOffset, 0);
}

static addResMissionId(builder:flatbuffers.Builder, resMissionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, resMissionIdOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, startTimeOffset, 0);
}

static addEndTime(builder:flatbuffers.Builder, endTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, endTimeOffset, 0);
}

static addTargetTime(builder:flatbuffers.Builder, targetTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, targetTimeOffset, 0);
}

static addIdArrSortie(builder:flatbuffers.Builder, idArrSortieOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, idArrSortieOffset, 0);
}

static addIdDepSortie(builder:flatbuffers.Builder, idDepSortieOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, idDepSortieOffset, 0);
}

static addAltArrSortieId(builder:flatbuffers.Builder, altArrSortieIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, altArrSortieIdOffset, 0);
}

static addAltDepSortieId(builder:flatbuffers.Builder, altDepSortieIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, altDepSortieIdOffset, 0);
}

static addReqComment(builder:flatbuffers.Builder, reqCommentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, reqCommentOffset, 0);
}

static addAppComment(builder:flatbuffers.Builder, appCommentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, appCommentOffset, 0);
}

static addReqOrg(builder:flatbuffers.Builder, reqOrgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, reqOrgOffset, 0);
}

static addReqInitials(builder:flatbuffers.Builder, reqInitialsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, reqInitialsOffset, 0);
}

static addAppOrg(builder:flatbuffers.Builder, appOrgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, appOrgOffset, 0);
}

static addAppInitials(builder:flatbuffers.Builder, appInitialsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, appInitialsOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, createdByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AirfieldSlotConsumption_Abridged_dataMode_Enum) {
  builder.addFieldInt8(36, dataMode, AirfieldSlotConsumption_Abridged_dataMode_Enum.REAL);
}

static endAirfieldSlotConsumption_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAirfieldSlotConsumption_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRF');
}

static finishSizePrefixedAirfieldSlotConsumption_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRF', true);
}

static createAirfieldSlotConsumption_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idAirfieldSlotOffset:flatbuffers.Offset, status:AirfieldSlotConsumption_Abridged_status_Enum, occupied:boolean, consumerOffset:flatbuffers.Offset, occAircraftMdsOffset:flatbuffers.Offset, occTailNumberOffset:flatbuffers.Offset, callSignsOffset:flatbuffers.Offset, missionIdOffset:flatbuffers.Offset, numAircraft:number, occStartTimeOffset:flatbuffers.Offset, resAircraftMdsOffset:flatbuffers.Offset, resTailNumberOffset:flatbuffers.Offset, resTypeOffset:flatbuffers.Offset, resReasonOffset:flatbuffers.Offset, resMissionIdOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, endTimeOffset:flatbuffers.Offset, targetTimeOffset:flatbuffers.Offset, idArrSortieOffset:flatbuffers.Offset, idDepSortieOffset:flatbuffers.Offset, altArrSortieIdOffset:flatbuffers.Offset, altDepSortieIdOffset:flatbuffers.Offset, reqCommentOffset:flatbuffers.Offset, appCommentOffset:flatbuffers.Offset, reqOrgOffset:flatbuffers.Offset, reqInitialsOffset:flatbuffers.Offset, appOrgOffset:flatbuffers.Offset, appInitialsOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:AirfieldSlotConsumption_Abridged_dataMode_Enum):flatbuffers.Offset {
  AirfieldSlotConsumption_Abridged.startAirfieldSlotConsumption_Abridged(builder);
  AirfieldSlotConsumption_Abridged.addId(builder, idOffset);
  AirfieldSlotConsumption_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  AirfieldSlotConsumption_Abridged.addIdAirfieldSlot(builder, idAirfieldSlotOffset);
  AirfieldSlotConsumption_Abridged.addStatus(builder, status);
  AirfieldSlotConsumption_Abridged.addOccupied(builder, occupied);
  AirfieldSlotConsumption_Abridged.addConsumer(builder, consumerOffset);
  AirfieldSlotConsumption_Abridged.addOccAircraftMds(builder, occAircraftMdsOffset);
  AirfieldSlotConsumption_Abridged.addOccTailNumber(builder, occTailNumberOffset);
  AirfieldSlotConsumption_Abridged.addCallSigns(builder, callSignsOffset);
  AirfieldSlotConsumption_Abridged.addMissionId(builder, missionIdOffset);
  AirfieldSlotConsumption_Abridged.addNumAircraft(builder, numAircraft);
  AirfieldSlotConsumption_Abridged.addOccStartTime(builder, occStartTimeOffset);
  AirfieldSlotConsumption_Abridged.addResAircraftMds(builder, resAircraftMdsOffset);
  AirfieldSlotConsumption_Abridged.addResTailNumber(builder, resTailNumberOffset);
  AirfieldSlotConsumption_Abridged.addResType(builder, resTypeOffset);
  AirfieldSlotConsumption_Abridged.addResReason(builder, resReasonOffset);
  AirfieldSlotConsumption_Abridged.addResMissionId(builder, resMissionIdOffset);
  AirfieldSlotConsumption_Abridged.addStartTime(builder, startTimeOffset);
  AirfieldSlotConsumption_Abridged.addEndTime(builder, endTimeOffset);
  AirfieldSlotConsumption_Abridged.addTargetTime(builder, targetTimeOffset);
  AirfieldSlotConsumption_Abridged.addIdArrSortie(builder, idArrSortieOffset);
  AirfieldSlotConsumption_Abridged.addIdDepSortie(builder, idDepSortieOffset);
  AirfieldSlotConsumption_Abridged.addAltArrSortieId(builder, altArrSortieIdOffset);
  AirfieldSlotConsumption_Abridged.addAltDepSortieId(builder, altDepSortieIdOffset);
  AirfieldSlotConsumption_Abridged.addReqComment(builder, reqCommentOffset);
  AirfieldSlotConsumption_Abridged.addAppComment(builder, appCommentOffset);
  AirfieldSlotConsumption_Abridged.addReqOrg(builder, reqOrgOffset);
  AirfieldSlotConsumption_Abridged.addReqInitials(builder, reqInitialsOffset);
  AirfieldSlotConsumption_Abridged.addAppOrg(builder, appOrgOffset);
  AirfieldSlotConsumption_Abridged.addAppInitials(builder, appInitialsOffset);
  AirfieldSlotConsumption_Abridged.addCreatedAt(builder, createdAtOffset);
  AirfieldSlotConsumption_Abridged.addCreatedBy(builder, createdByOffset);
  AirfieldSlotConsumption_Abridged.addSourceDl(builder, sourceDlOffset);
  AirfieldSlotConsumption_Abridged.addSource(builder, sourceOffset);
  AirfieldSlotConsumption_Abridged.addOrigin(builder, originOffset);
  AirfieldSlotConsumption_Abridged.addOrigNetwork(builder, origNetworkOffset);
  AirfieldSlotConsumption_Abridged.addDataMode(builder, dataMode);
  return AirfieldSlotConsumption_Abridged.endAirfieldSlotConsumption_Abridged(builder);
}

unpack(): AirfieldSlotConsumption_AbridgedT {
  return new AirfieldSlotConsumption_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.idAirfieldSlot(),
    this.status(),
    this.occupied(),
    this.consumer(),
    this.occAircraftMds(),
    this.occTailNumber(),
    this.bb!.createScalarList<string>(this.callSigns.bind(this), this.callSignsLength()),
    this.missionId(),
    this.numAircraft(),
    this.occStartTime(),
    this.resAircraftMds(),
    this.resTailNumber(),
    this.resType(),
    this.resReason(),
    this.resMissionId(),
    this.startTime(),
    this.endTime(),
    this.targetTime(),
    this.idArrSortie(),
    this.idDepSortie(),
    this.altArrSortieId(),
    this.altDepSortieId(),
    this.reqComment(),
    this.appComment(),
    this.reqOrg(),
    this.reqInitials(),
    this.appOrg(),
    this.appInitials(),
    this.createdAt(),
    this.createdBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: AirfieldSlotConsumption_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idAirfieldSlot = this.idAirfieldSlot();
  _o.status = this.status();
  _o.occupied = this.occupied();
  _o.consumer = this.consumer();
  _o.occAircraftMds = this.occAircraftMds();
  _o.occTailNumber = this.occTailNumber();
  _o.callSigns = this.bb!.createScalarList<string>(this.callSigns.bind(this), this.callSignsLength());
  _o.missionId = this.missionId();
  _o.numAircraft = this.numAircraft();
  _o.occStartTime = this.occStartTime();
  _o.resAircraftMds = this.resAircraftMds();
  _o.resTailNumber = this.resTailNumber();
  _o.resType = this.resType();
  _o.resReason = this.resReason();
  _o.resMissionId = this.resMissionId();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.targetTime = this.targetTime();
  _o.idArrSortie = this.idArrSortie();
  _o.idDepSortie = this.idDepSortie();
  _o.altArrSortieId = this.altArrSortieId();
  _o.altDepSortieId = this.altDepSortieId();
  _o.reqComment = this.reqComment();
  _o.appComment = this.appComment();
  _o.reqOrg = this.reqOrg();
  _o.reqInitials = this.reqInitials();
  _o.appOrg = this.appOrg();
  _o.appInitials = this.appInitials();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.sourceDl = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class AirfieldSlotConsumption_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idAirfieldSlot: string|Uint8Array|null = null,
  public status: AirfieldSlotConsumption_Abridged_status_Enum = AirfieldSlotConsumption_Abridged_status_Enum.REQUESTED,
  public occupied: boolean = false,
  public consumer: string|Uint8Array|null = null,
  public occAircraftMds: string|Uint8Array|null = null,
  public occTailNumber: string|Uint8Array|null = null,
  public callSigns: (string)[] = [],
  public missionId: string|Uint8Array|null = null,
  public numAircraft: number = 0,
  public occStartTime: string|Uint8Array|null = null,
  public resAircraftMds: string|Uint8Array|null = null,
  public resTailNumber: string|Uint8Array|null = null,
  public resType: string|Uint8Array|null = null,
  public resReason: string|Uint8Array|null = null,
  public resMissionId: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public endTime: string|Uint8Array|null = null,
  public targetTime: string|Uint8Array|null = null,
  public idArrSortie: string|Uint8Array|null = null,
  public idDepSortie: string|Uint8Array|null = null,
  public altArrSortieId: string|Uint8Array|null = null,
  public altDepSortieId: string|Uint8Array|null = null,
  public reqComment: string|Uint8Array|null = null,
  public appComment: string|Uint8Array|null = null,
  public reqOrg: string|Uint8Array|null = null,
  public reqInitials: string|Uint8Array|null = null,
  public appOrg: string|Uint8Array|null = null,
  public appInitials: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: AirfieldSlotConsumption_Abridged_dataMode_Enum = AirfieldSlotConsumption_Abridged_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idAirfieldSlot = (this.idAirfieldSlot !== null ? builder.createString(this.idAirfieldSlot!) : 0);
  const consumer = (this.consumer !== null ? builder.createString(this.consumer!) : 0);
  const occAircraftMds = (this.occAircraftMds !== null ? builder.createString(this.occAircraftMds!) : 0);
  const occTailNumber = (this.occTailNumber !== null ? builder.createString(this.occTailNumber!) : 0);
  const callSigns = AirfieldSlotConsumption_Abridged.createCallSignsVector(builder, builder.createObjectOffsetList(this.callSigns));
  const missionId = (this.missionId !== null ? builder.createString(this.missionId!) : 0);
  const occStartTime = (this.occStartTime !== null ? builder.createString(this.occStartTime!) : 0);
  const resAircraftMds = (this.resAircraftMds !== null ? builder.createString(this.resAircraftMds!) : 0);
  const resTailNumber = (this.resTailNumber !== null ? builder.createString(this.resTailNumber!) : 0);
  const resType = (this.resType !== null ? builder.createString(this.resType!) : 0);
  const resReason = (this.resReason !== null ? builder.createString(this.resReason!) : 0);
  const resMissionId = (this.resMissionId !== null ? builder.createString(this.resMissionId!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const endTime = (this.endTime !== null ? builder.createString(this.endTime!) : 0);
  const targetTime = (this.targetTime !== null ? builder.createString(this.targetTime!) : 0);
  const idArrSortie = (this.idArrSortie !== null ? builder.createString(this.idArrSortie!) : 0);
  const idDepSortie = (this.idDepSortie !== null ? builder.createString(this.idDepSortie!) : 0);
  const altArrSortieId = (this.altArrSortieId !== null ? builder.createString(this.altArrSortieId!) : 0);
  const altDepSortieId = (this.altDepSortieId !== null ? builder.createString(this.altDepSortieId!) : 0);
  const reqComment = (this.reqComment !== null ? builder.createString(this.reqComment!) : 0);
  const appComment = (this.appComment !== null ? builder.createString(this.appComment!) : 0);
  const reqOrg = (this.reqOrg !== null ? builder.createString(this.reqOrg!) : 0);
  const reqInitials = (this.reqInitials !== null ? builder.createString(this.reqInitials!) : 0);
  const appOrg = (this.appOrg !== null ? builder.createString(this.appOrg!) : 0);
  const appInitials = (this.appInitials !== null ? builder.createString(this.appInitials!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return AirfieldSlotConsumption_Abridged.createAirfieldSlotConsumption_Abridged(builder,
    id,
    classificationMarking,
    idAirfieldSlot,
    this.status,
    this.occupied,
    consumer,
    occAircraftMds,
    occTailNumber,
    callSigns,
    missionId,
    this.numAircraft,
    occStartTime,
    resAircraftMds,
    resTailNumber,
    resType,
    resReason,
    resMissionId,
    startTime,
    endTime,
    targetTime,
    idArrSortie,
    idDepSortie,
    altArrSortieId,
    altDepSortieId,
    reqComment,
    appComment,
    reqOrg,
    reqInitials,
    appOrg,
    appInitials,
    createdAt,
    createdBy,
    sourceDl,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
