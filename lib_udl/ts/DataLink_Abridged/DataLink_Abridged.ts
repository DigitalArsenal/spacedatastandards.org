// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DataLink_Abridged_dataMode_Enum } from './DataLink_Abridged_dataMode_Enum.js';


/**
 * /// Beta Version DataLink: Detailed instructions regarding the operations of data links.
 */
export class DataLink_Abridged implements flatbuffers.IUnpackableObject<DataLink_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataLink_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataLink_Abridged(bb:flatbuffers.ByteBuffer, obj?:DataLink_Abridged):DataLink_Abridged {
  return (obj || new DataLink_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataLink_Abridged(bb:flatbuffers.ByteBuffer, obj?:DataLink_Abridged):DataLink_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataLink_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DATA');
}

/**
 * Unique identifier of the record, auto-generated by the system if not provided on create operations.
 * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
 * Example: /// Example: DESERT WIND
 * Constraints: Minimum length = 1, Maximum length = 64
 */
opExName():string|null
opExName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
opExName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The identifier of the originator of this message.
 * Example: /// Example: USCENTCOM
 * Constraints: Minimum length = 1, Maximum length = 36
 */
originator():string|null
originator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The start of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-07T13:55:43.123Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The end of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision. This may be a relative stop time if used with stopTimeMod.
 * Example: /// Example: 2024-01-08T13:55:43.123Z
 * Constraints: No constraints specified.
 */
stopTime():string|null
stopTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stopTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A qualifier for the end of the effective time period of this data link message, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
 * Example: /// Example: AFTER
 * Constraints: Minimum length = 0, Maximum length = 8
 */
stopTimeMod():string|null
stopTimeMod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stopTimeMod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
 * Example: /// Example: SACEUR 106
 * Constraints: Minimum length = 0, Maximum length = 36
 */
planOrigNum():string|null
planOrigNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
planOrigNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Provides an additional caveat further identifying the exercise or modifies the exercise nickname.
 * Example: /// Example: CONTROL
 * Constraints: Minimum length = 0, Maximum length = 32
 */
opExInfo():string|null
opExInfo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
opExInfo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The secondary nickname of the option or the alternative of the operational plan or order.
 * Example: /// Example: ORANGE
 * Constraints: Minimum length = 0, Maximum length = 24
 */
opExInfoAlt():string|null
opExInfoAlt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
opExInfoAlt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The unique message identifier assigned by the originator.
 * Example: /// Example: 1201003
 * Constraints: Minimum length = 0, Maximum length = 16
 */
serialNum():string|null
serialNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
serialNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The month in which this message originated.
 * Example: /// Example: OCT
 * Constraints: Minimum length = 0, Maximum length = 12
 */
month():string|null
month(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
month(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The qualifier which caveats the message status such as AMP (Amplification), CHG (Change), etc.
 * Example: /// Example: CHG
 * Constraints: Minimum length = 0, Maximum length = 8
 */
qualifier():string|null
qualifier(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
qualifier(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The serial number associated with the message qualifier.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
qualSn():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
references(index: number):string
references(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
references(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

referencesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The identifier for this data link message cancellation.
 * Example: /// Example: ABSTAT
 * Constraints: Minimum length = 0, Maximum length = 20
 */
canxId():string|null
canxId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
canxId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originator of this data link message cancellation.
 * Example: /// Example: 505 AOC
 * Constraints: Minimum length = 0, Maximum length = 30
 */
canxOriginator():string|null
canxOriginator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
canxOriginator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Timestamp of the data link message cancellation, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-07T13:55:43.123Z
 * Constraints: No constraints specified.
 */
canxTs():string|null
canxTs(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
canxTs(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Serial number assigned to this data link message cancellation.
 * Example: /// Example: ABC1234567
 * Constraints: Minimum length = 0, Maximum length = 10
 */
canxSerialNum():string|null
canxSerialNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
canxSerialNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates any special actions, restrictions, guidance, or information relating to this data link message cancellation.
 * Example: /// Example: PASEP
 * Constraints: Minimum length = 0, Maximum length = 5
 */
canxSpecialNotation():string|null
canxSpecialNotation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
canxSpecialNotation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of NATO Subject Indicator Codes (SIC) or filing numbers of this data link message or document being cancelled.
 * Example: /// Example: ['RDU', 'X234BS']
 * Constraints: No constraints specified.
 */
canxSics(index: number):string
canxSics(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
canxSics(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

canxSicsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The name of the point of contact for this data link message.
 * Example: /// Example: F. BURNS
 * Constraints: Minimum length = 0, Maximum length = 32
 */
pocName():string|null
pocName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pocName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The rank or position of the point of contact for this data link message in a military or civilian organization.
 * Example: /// Example: MAJ
 * Constraints: Minimum length = 0, Maximum length = 16
 */
pocRank():string|null
pocRank(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pocRank(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The unit identifier or call sign of the point of contact for this data link message.
 * Example: /// Example: 4077 MASH
 * Constraints: Minimum length = 0, Maximum length = 38
 */
pocCallSign():string|null
pocCallSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pocCallSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The location name of the point of contact for this data link message.
 * Example: /// Example: CAMP SWAMPY
 * Constraints: Minimum length = 0, Maximum length = 20
 */
pocLocName():string|null
pocLocName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pocLocName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS84 latitude of the point of contact for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
pocLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS84 longitude of the point of contact for this data link message, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 179.1
 * Constraints: No constraints specified.
 */
pocLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Array of telephone numbers, radio frequency values, or email addresses of the point of contact for this data link message.
 * Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
 * Constraints: No constraints specified.
 */
pocNums(index: number):string
pocNums(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
pocNums(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

pocNumsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The code for the point of reference from which the coordinates and networks are computed.
 * Example: /// Example: EUR-T
 * Constraints: Minimum length = 0, Maximum length = 5
 */
geoDatum():string|null
geoDatum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geoDatum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
refPoints(index: number):string
refPoints(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
refPoints(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

refPointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
voiceCoord(index: number):string
voiceCoord(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
voiceCoord(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

voiceCoordLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Indicates the data terminal settings the system defaults to, either automatic correlation/decorrelation (AUTO) or manual (MAN).
 * Example: /// Example: MAN
 * Constraints: Minimum length = 0, Maximum length = 4
 */
sysDefaultCode():string|null
sysDefaultCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sysDefaultCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The correlation window size multiplier to stretch or reduce the window size. Required if sysDefaultCode field is "MAN". Allowable entries are 0.5 to 3.0 in increments of 0.1.
 * Example: /// Example: 2.1
 * Constraints: No constraints specified.
 */
winSizeMult():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number added to the basic window calculated from track qualities to ensure that windows still allow valid correlations. Required if sysDefaultCode field is "MAN". Allowable entries are 0.0 to 2.0 in increments of 0.25.
 * Example: /// Example: 1.25
 * Constraints: No constraints specified.
 */
winSizeMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Track quality to prevent correlation windows from being unrealistically large. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 3 to 7.
 * Example: /// Example: 6
 * Constraints: No constraints specified.
 */
minTrackQual():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Track quality to prevent correlation windows from being unrealistically small. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 8 to 15.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
maxTrackQual():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Track quality to enter if too many duals involving low track quality tracks are occurring. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 2 to 6.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
resTrackQual():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Maximum difference between the reported course of the remote track and the calculated course of the local track. Required if sysDefaultCode field is "MAN". Allowable entries are 15 to 90 in increments of 15 degrees.
 * Example: /// Example: 60
 * Constraints: No constraints specified.
 */
courseDiff():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Maximum percentage the faster track speed may differ from the slower track speed. Required if sysDefaultCode field is "MAN". Allowable entries are 10 to 100 in increments of 10.
 * Example: /// Example: 50
 * Constraints: No constraints specified.
 */
speedDiff():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Maximum altitude difference between two air tracks, in thousands of feet. Required if sysDefaultCode field is "MAN". Allowable entires are 5 to 50 in increments of 5000 feet.
 * Example: /// Example: 20
 * Constraints: No constraints specified.
 */
altDiff():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number used for minimum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
minGeoPosQual():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number used for maximum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entires are integers from 1 to 15.
 * Example: /// Example: 12
 * Constraints: No constraints specified.
 */
maxGeoPosQual():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Distance between the common and remote track is to exceed the applicable correlation window for the two tracks in order to be decorrelated. Required if sysDefaultCode field is "MAN". Allowable entries are 1.0 to 2.0 in increments of 0.1.
 * Example: /// Example: 1.7
 * Constraints: No constraints specified.
 */
decorrWinMult():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of consecutive remote track reports that must meet the decorrelation criteria before the decorrelation is executed. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
consecDecorr():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
multiDuty(index: number):string
multiDuty(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
multiDuty(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

multiDutyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
ops(index: number):string
ops(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ops(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

opsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Designator of the unit for Joint Range Extension (JRE).
 * Example: /// Example: CVN-72
 * Constraints: Minimum length = 0, Maximum length = 30
 */
jreUnitDes():string|null
jreUnitDes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
jreUnitDes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Call sign which identifies one or more communications facilities, commands, authorities, or activities for Joint Range Extension (JRE) units.
 * Example: /// Example: CHARLIE ONE
 * Constraints: Minimum length = 0, Maximum length = 38
 */
jreCallSign():string|null
jreCallSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
jreCallSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Link-16 octal track number assigned as the primary JTIDS unit address.
 * Example: /// Example: 71777
 * Constraints: No constraints specified.
 */
jrePriAdd():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Link-16 octal track number assigned as the secondary JTIDS unit address.
 * Example: /// Example: 77771
 * Constraints: No constraints specified.
 */
jreSecAdd():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Joint Range Extension (JRE) unit details.
 * Example: /// Example: JRE details
 * Constraints: Minimum length = 0, Maximum length = 3000
 */
jreDetails():string|null
jreDetails(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
jreDetails(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
specTracks(index: number):string
specTracks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
specTracks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

specTracksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of non-link specific data unit designators.
 * Example: /// Example: ['CS:GRAY GHOST', 'CS:WHITE WHALE']
 * Constraints: No constraints specified.
 */
nonLinkUnitDes(index: number):string
nonLinkUnitDes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
nonLinkUnitDes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

nonLinkUnitDesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of Link-16 octal track numbers used as the lower limit of a track block.
 * Example: /// Example: [1234, 2345]
 * Constraints: No constraints specified.
 */
trackNumBlockLls(index: number):string
trackNumBlockLls(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
trackNumBlockLls(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

trackNumBlockLlsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of defined ranges of Link-11/11B track numbers assigned to a participating unit or reporting unit.
 * Example: /// Example: ['0200-0300', '0400-4412']
 * Constraints: No constraints specified.
 */
trackNumBlocks(index: number):string
trackNumBlocks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
trackNumBlocks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

trackNumBlocksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Data link management code word.
 * Example: /// Example: VICTOR
 * Constraints: Minimum length = 0, Maximum length = 15
 */
mgmtCode():string|null
mgmtCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mgmtCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Data link management code word meaning.
 * Example: /// Example: ORBIT AT POINT BRAVO
 * Constraints: Minimum length = 0, Maximum length = 50
 */
mgmtCodeMeaning():string|null
mgmtCodeMeaning(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mgmtCodeMeaning(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag Indicating if formal acknowledgement is required for the particular data link message being sent.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
ackReq():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Array of instructions for acknowledging and the force or units required to acknowledge the data link message being sent.
 * Example: /// Example: ['AOC EXT 2345', '317 AW']
 * Constraints: No constraints specified.
 */
ackInstUnits(index: number):string
ackInstUnits(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ackInstUnits(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

ackInstUnitsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Markings that define the source material or the original classification authority for this data link message.
 * Example: /// Example: USJFCOM EXORD SOLID WASTE 98
 * Constraints: Minimum length = 0, Maximum length = 55
 */
classSource():string|null
classSource(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classSource(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of codes that indicate the reasons material is classified.
 * Example: /// Example: ['15C', '15D']
 * Constraints: No constraints specified.
 */
classReasons(index: number):string
classReasons(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
classReasons(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

classReasonsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of markings that provide the literal guidance or dates for the downgrading or declassification of this data link message.
 * Example: /// Example: ['AT EXERCISE ENDEX', 'DATE:25NOV1997']
 * Constraints: No constraints specified.
 */
decInstDates(index: number):string
decInstDates(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
decInstDates(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

decInstDatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of codes that provide justification for exemption from automatic downgrading or declassification.
 * Example: /// Example: ['X1', 'X2']
 * Constraints: No constraints specified.
 */
decExemptCodes(index: number):string
decExemptCodes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
decExemptCodes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

decExemptCodesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Collection of remarks associated with this data link message.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
remarks(index: number):string
remarks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
remarks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

remarksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: Example URI
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():DataLink_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DataLink_Abridged_dataMode_Enum.REAL;
}

static startDataLink_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(74);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addOpExName(builder:flatbuffers.Builder, opExNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, opExNameOffset, 0);
}

static addOriginator(builder:flatbuffers.Builder, originatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, originatorOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, startTimeOffset, 0);
}

static addStopTime(builder:flatbuffers.Builder, stopTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, stopTimeOffset, 0);
}

static addStopTimeMod(builder:flatbuffers.Builder, stopTimeModOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, stopTimeModOffset, 0);
}

static addPlanOrigNum(builder:flatbuffers.Builder, planOrigNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, planOrigNumOffset, 0);
}

static addOpExInfo(builder:flatbuffers.Builder, opExInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, opExInfoOffset, 0);
}

static addOpExInfoAlt(builder:flatbuffers.Builder, opExInfoAltOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, opExInfoAltOffset, 0);
}

static addSerialNum(builder:flatbuffers.Builder, serialNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, serialNumOffset, 0);
}

static addMonth(builder:flatbuffers.Builder, monthOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, monthOffset, 0);
}

static addQualifier(builder:flatbuffers.Builder, qualifierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, qualifierOffset, 0);
}

static addQualSn(builder:flatbuffers.Builder, qualSn:number) {
  builder.addFieldInt32(13, qualSn, 0);
}

static addReferences(builder:flatbuffers.Builder, referencesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, referencesOffset, 0);
}

static createReferencesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startReferencesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCanxId(builder:flatbuffers.Builder, canxIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, canxIdOffset, 0);
}

static addCanxOriginator(builder:flatbuffers.Builder, canxOriginatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, canxOriginatorOffset, 0);
}

static addCanxTs(builder:flatbuffers.Builder, canxTsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, canxTsOffset, 0);
}

static addCanxSerialNum(builder:flatbuffers.Builder, canxSerialNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, canxSerialNumOffset, 0);
}

static addCanxSpecialNotation(builder:flatbuffers.Builder, canxSpecialNotationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, canxSpecialNotationOffset, 0);
}

static addCanxSics(builder:flatbuffers.Builder, canxSicsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, canxSicsOffset, 0);
}

static createCanxSicsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCanxSicsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPocName(builder:flatbuffers.Builder, pocNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, pocNameOffset, 0);
}

static addPocRank(builder:flatbuffers.Builder, pocRankOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, pocRankOffset, 0);
}

static addPocCallSign(builder:flatbuffers.Builder, pocCallSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, pocCallSignOffset, 0);
}

static addPocLocName(builder:flatbuffers.Builder, pocLocNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, pocLocNameOffset, 0);
}

static addPocLat(builder:flatbuffers.Builder, pocLat:number) {
  builder.addFieldFloat64(25, pocLat, 0.0);
}

static addPocLon(builder:flatbuffers.Builder, pocLon:number) {
  builder.addFieldFloat64(26, pocLon, 0.0);
}

static addPocNums(builder:flatbuffers.Builder, pocNumsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, pocNumsOffset, 0);
}

static createPocNumsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPocNumsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGeoDatum(builder:flatbuffers.Builder, geoDatumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, geoDatumOffset, 0);
}

static addRefPoints(builder:flatbuffers.Builder, refPointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, refPointsOffset, 0);
}

static createRefPointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRefPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addVoiceCoord(builder:flatbuffers.Builder, voiceCoordOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, voiceCoordOffset, 0);
}

static createVoiceCoordVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVoiceCoordVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSysDefaultCode(builder:flatbuffers.Builder, sysDefaultCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, sysDefaultCodeOffset, 0);
}

static addWinSizeMult(builder:flatbuffers.Builder, winSizeMult:number) {
  builder.addFieldFloat64(32, winSizeMult, 0.0);
}

static addWinSizeMin(builder:flatbuffers.Builder, winSizeMin:number) {
  builder.addFieldFloat64(33, winSizeMin, 0.0);
}

static addMinTrackQual(builder:flatbuffers.Builder, minTrackQual:number) {
  builder.addFieldInt32(34, minTrackQual, 0);
}

static addMaxTrackQual(builder:flatbuffers.Builder, maxTrackQual:number) {
  builder.addFieldInt32(35, maxTrackQual, 0);
}

static addResTrackQual(builder:flatbuffers.Builder, resTrackQual:number) {
  builder.addFieldInt32(36, resTrackQual, 0);
}

static addCourseDiff(builder:flatbuffers.Builder, courseDiff:number) {
  builder.addFieldInt32(37, courseDiff, 0);
}

static addSpeedDiff(builder:flatbuffers.Builder, speedDiff:number) {
  builder.addFieldInt32(38, speedDiff, 0);
}

static addAltDiff(builder:flatbuffers.Builder, altDiff:number) {
  builder.addFieldInt32(39, altDiff, 0);
}

static addMinGeoPosQual(builder:flatbuffers.Builder, minGeoPosQual:number) {
  builder.addFieldInt32(40, minGeoPosQual, 0);
}

static addMaxGeoPosQual(builder:flatbuffers.Builder, maxGeoPosQual:number) {
  builder.addFieldInt32(41, maxGeoPosQual, 0);
}

static addDecorrWinMult(builder:flatbuffers.Builder, decorrWinMult:number) {
  builder.addFieldFloat64(42, decorrWinMult, 0.0);
}

static addConsecDecorr(builder:flatbuffers.Builder, consecDecorr:number) {
  builder.addFieldInt32(43, consecDecorr, 0);
}

static addMultiDuty(builder:flatbuffers.Builder, multiDutyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, multiDutyOffset, 0);
}

static createMultiDutyVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMultiDutyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOps(builder:flatbuffers.Builder, opsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, opsOffset, 0);
}

static createOpsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOpsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addJreUnitDes(builder:flatbuffers.Builder, jreUnitDesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, jreUnitDesOffset, 0);
}

static addJreCallSign(builder:flatbuffers.Builder, jreCallSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, jreCallSignOffset, 0);
}

static addJrePriAdd(builder:flatbuffers.Builder, jrePriAdd:number) {
  builder.addFieldInt32(48, jrePriAdd, 0);
}

static addJreSecAdd(builder:flatbuffers.Builder, jreSecAdd:number) {
  builder.addFieldInt32(49, jreSecAdd, 0);
}

static addJreDetails(builder:flatbuffers.Builder, jreDetailsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, jreDetailsOffset, 0);
}

static addSpecTracks(builder:flatbuffers.Builder, specTracksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, specTracksOffset, 0);
}

static createSpecTracksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSpecTracksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNonLinkUnitDes(builder:flatbuffers.Builder, nonLinkUnitDesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, nonLinkUnitDesOffset, 0);
}

static createNonLinkUnitDesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNonLinkUnitDesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrackNumBlockLls(builder:flatbuffers.Builder, trackNumBlockLlsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, trackNumBlockLlsOffset, 0);
}

static createTrackNumBlockLlsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrackNumBlockLlsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrackNumBlocks(builder:flatbuffers.Builder, trackNumBlocksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, trackNumBlocksOffset, 0);
}

static createTrackNumBlocksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrackNumBlocksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMgmtCode(builder:flatbuffers.Builder, mgmtCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, mgmtCodeOffset, 0);
}

static addMgmtCodeMeaning(builder:flatbuffers.Builder, mgmtCodeMeaningOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, mgmtCodeMeaningOffset, 0);
}

static addAckReq(builder:flatbuffers.Builder, ackReq:boolean) {
  builder.addFieldInt8(57, +ackReq, +false);
}

static addAckInstUnits(builder:flatbuffers.Builder, ackInstUnitsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, ackInstUnitsOffset, 0);
}

static createAckInstUnitsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAckInstUnitsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addClassSource(builder:flatbuffers.Builder, classSourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, classSourceOffset, 0);
}

static addClassReasons(builder:flatbuffers.Builder, classReasonsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, classReasonsOffset, 0);
}

static createClassReasonsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startClassReasonsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDecInstDates(builder:flatbuffers.Builder, decInstDatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, decInstDatesOffset, 0);
}

static createDecInstDatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDecInstDatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDecExemptCodes(builder:flatbuffers.Builder, decExemptCodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, decExemptCodesOffset, 0);
}

static createDecExemptCodesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDecExemptCodesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRemarks(builder:flatbuffers.Builder, remarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, remarksOffset, 0);
}

static createRemarksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRemarksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, rawFileUriOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(68, updatedByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(69, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(70, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(71, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(72, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:DataLink_Abridged_dataMode_Enum) {
  builder.addFieldInt8(73, dataMode, DataLink_Abridged_dataMode_Enum.REAL);
}

static endDataLink_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDataLink_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA');
}

static finishSizePrefixedDataLink_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA', true);
}

static createDataLink_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, opExNameOffset:flatbuffers.Offset, originatorOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, stopTimeOffset:flatbuffers.Offset, stopTimeModOffset:flatbuffers.Offset, planOrigNumOffset:flatbuffers.Offset, opExInfoOffset:flatbuffers.Offset, opExInfoAltOffset:flatbuffers.Offset, serialNumOffset:flatbuffers.Offset, monthOffset:flatbuffers.Offset, qualifierOffset:flatbuffers.Offset, qualSn:number, referencesOffset:flatbuffers.Offset, canxIdOffset:flatbuffers.Offset, canxOriginatorOffset:flatbuffers.Offset, canxTsOffset:flatbuffers.Offset, canxSerialNumOffset:flatbuffers.Offset, canxSpecialNotationOffset:flatbuffers.Offset, canxSicsOffset:flatbuffers.Offset, pocNameOffset:flatbuffers.Offset, pocRankOffset:flatbuffers.Offset, pocCallSignOffset:flatbuffers.Offset, pocLocNameOffset:flatbuffers.Offset, pocLat:number, pocLon:number, pocNumsOffset:flatbuffers.Offset, geoDatumOffset:flatbuffers.Offset, refPointsOffset:flatbuffers.Offset, voiceCoordOffset:flatbuffers.Offset, sysDefaultCodeOffset:flatbuffers.Offset, winSizeMult:number, winSizeMin:number, minTrackQual:number, maxTrackQual:number, resTrackQual:number, courseDiff:number, speedDiff:number, altDiff:number, minGeoPosQual:number, maxGeoPosQual:number, decorrWinMult:number, consecDecorr:number, multiDutyOffset:flatbuffers.Offset, opsOffset:flatbuffers.Offset, jreUnitDesOffset:flatbuffers.Offset, jreCallSignOffset:flatbuffers.Offset, jrePriAdd:number, jreSecAdd:number, jreDetailsOffset:flatbuffers.Offset, specTracksOffset:flatbuffers.Offset, nonLinkUnitDesOffset:flatbuffers.Offset, trackNumBlockLlsOffset:flatbuffers.Offset, trackNumBlocksOffset:flatbuffers.Offset, mgmtCodeOffset:flatbuffers.Offset, mgmtCodeMeaningOffset:flatbuffers.Offset, ackReq:boolean, ackInstUnitsOffset:flatbuffers.Offset, classSourceOffset:flatbuffers.Offset, classReasonsOffset:flatbuffers.Offset, decInstDatesOffset:flatbuffers.Offset, decExemptCodesOffset:flatbuffers.Offset, remarksOffset:flatbuffers.Offset, rawFileUriOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:DataLink_Abridged_dataMode_Enum):flatbuffers.Offset {
  DataLink_Abridged.startDataLink_Abridged(builder);
  DataLink_Abridged.addId(builder, idOffset);
  DataLink_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  DataLink_Abridged.addOpExName(builder, opExNameOffset);
  DataLink_Abridged.addOriginator(builder, originatorOffset);
  DataLink_Abridged.addStartTime(builder, startTimeOffset);
  DataLink_Abridged.addStopTime(builder, stopTimeOffset);
  DataLink_Abridged.addStopTimeMod(builder, stopTimeModOffset);
  DataLink_Abridged.addPlanOrigNum(builder, planOrigNumOffset);
  DataLink_Abridged.addOpExInfo(builder, opExInfoOffset);
  DataLink_Abridged.addOpExInfoAlt(builder, opExInfoAltOffset);
  DataLink_Abridged.addSerialNum(builder, serialNumOffset);
  DataLink_Abridged.addMonth(builder, monthOffset);
  DataLink_Abridged.addQualifier(builder, qualifierOffset);
  DataLink_Abridged.addQualSn(builder, qualSn);
  DataLink_Abridged.addReferences(builder, referencesOffset);
  DataLink_Abridged.addCanxId(builder, canxIdOffset);
  DataLink_Abridged.addCanxOriginator(builder, canxOriginatorOffset);
  DataLink_Abridged.addCanxTs(builder, canxTsOffset);
  DataLink_Abridged.addCanxSerialNum(builder, canxSerialNumOffset);
  DataLink_Abridged.addCanxSpecialNotation(builder, canxSpecialNotationOffset);
  DataLink_Abridged.addCanxSics(builder, canxSicsOffset);
  DataLink_Abridged.addPocName(builder, pocNameOffset);
  DataLink_Abridged.addPocRank(builder, pocRankOffset);
  DataLink_Abridged.addPocCallSign(builder, pocCallSignOffset);
  DataLink_Abridged.addPocLocName(builder, pocLocNameOffset);
  DataLink_Abridged.addPocLat(builder, pocLat);
  DataLink_Abridged.addPocLon(builder, pocLon);
  DataLink_Abridged.addPocNums(builder, pocNumsOffset);
  DataLink_Abridged.addGeoDatum(builder, geoDatumOffset);
  DataLink_Abridged.addRefPoints(builder, refPointsOffset);
  DataLink_Abridged.addVoiceCoord(builder, voiceCoordOffset);
  DataLink_Abridged.addSysDefaultCode(builder, sysDefaultCodeOffset);
  DataLink_Abridged.addWinSizeMult(builder, winSizeMult);
  DataLink_Abridged.addWinSizeMin(builder, winSizeMin);
  DataLink_Abridged.addMinTrackQual(builder, minTrackQual);
  DataLink_Abridged.addMaxTrackQual(builder, maxTrackQual);
  DataLink_Abridged.addResTrackQual(builder, resTrackQual);
  DataLink_Abridged.addCourseDiff(builder, courseDiff);
  DataLink_Abridged.addSpeedDiff(builder, speedDiff);
  DataLink_Abridged.addAltDiff(builder, altDiff);
  DataLink_Abridged.addMinGeoPosQual(builder, minGeoPosQual);
  DataLink_Abridged.addMaxGeoPosQual(builder, maxGeoPosQual);
  DataLink_Abridged.addDecorrWinMult(builder, decorrWinMult);
  DataLink_Abridged.addConsecDecorr(builder, consecDecorr);
  DataLink_Abridged.addMultiDuty(builder, multiDutyOffset);
  DataLink_Abridged.addOps(builder, opsOffset);
  DataLink_Abridged.addJreUnitDes(builder, jreUnitDesOffset);
  DataLink_Abridged.addJreCallSign(builder, jreCallSignOffset);
  DataLink_Abridged.addJrePriAdd(builder, jrePriAdd);
  DataLink_Abridged.addJreSecAdd(builder, jreSecAdd);
  DataLink_Abridged.addJreDetails(builder, jreDetailsOffset);
  DataLink_Abridged.addSpecTracks(builder, specTracksOffset);
  DataLink_Abridged.addNonLinkUnitDes(builder, nonLinkUnitDesOffset);
  DataLink_Abridged.addTrackNumBlockLls(builder, trackNumBlockLlsOffset);
  DataLink_Abridged.addTrackNumBlocks(builder, trackNumBlocksOffset);
  DataLink_Abridged.addMgmtCode(builder, mgmtCodeOffset);
  DataLink_Abridged.addMgmtCodeMeaning(builder, mgmtCodeMeaningOffset);
  DataLink_Abridged.addAckReq(builder, ackReq);
  DataLink_Abridged.addAckInstUnits(builder, ackInstUnitsOffset);
  DataLink_Abridged.addClassSource(builder, classSourceOffset);
  DataLink_Abridged.addClassReasons(builder, classReasonsOffset);
  DataLink_Abridged.addDecInstDates(builder, decInstDatesOffset);
  DataLink_Abridged.addDecExemptCodes(builder, decExemptCodesOffset);
  DataLink_Abridged.addRemarks(builder, remarksOffset);
  DataLink_Abridged.addRawFileUri(builder, rawFileUriOffset);
  DataLink_Abridged.addCreatedAt(builder, createdAtOffset);
  DataLink_Abridged.addCreatedBy(builder, createdByOffset);
  DataLink_Abridged.addUpdatedAt(builder, updatedAtOffset);
  DataLink_Abridged.addUpdatedBy(builder, updatedByOffset);
  DataLink_Abridged.addSourceDl(builder, sourceDlOffset);
  DataLink_Abridged.addSource(builder, sourceOffset);
  DataLink_Abridged.addOrigin(builder, originOffset);
  DataLink_Abridged.addOrigNetwork(builder, origNetworkOffset);
  DataLink_Abridged.addDataMode(builder, dataMode);
  return DataLink_Abridged.endDataLink_Abridged(builder);
}

unpack(): DataLink_AbridgedT {
  return new DataLink_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.opExName(),
    this.originator(),
    this.startTime(),
    this.stopTime(),
    this.stopTimeMod(),
    this.planOrigNum(),
    this.opExInfo(),
    this.opExInfoAlt(),
    this.serialNum(),
    this.month(),
    this.qualifier(),
    this.qualSn(),
    this.bb!.createScalarList<string>(this.references.bind(this), this.referencesLength()),
    this.canxId(),
    this.canxOriginator(),
    this.canxTs(),
    this.canxSerialNum(),
    this.canxSpecialNotation(),
    this.bb!.createScalarList<string>(this.canxSics.bind(this), this.canxSicsLength()),
    this.pocName(),
    this.pocRank(),
    this.pocCallSign(),
    this.pocLocName(),
    this.pocLat(),
    this.pocLon(),
    this.bb!.createScalarList<string>(this.pocNums.bind(this), this.pocNumsLength()),
    this.geoDatum(),
    this.bb!.createScalarList<string>(this.refPoints.bind(this), this.refPointsLength()),
    this.bb!.createScalarList<string>(this.voiceCoord.bind(this), this.voiceCoordLength()),
    this.sysDefaultCode(),
    this.winSizeMult(),
    this.winSizeMin(),
    this.minTrackQual(),
    this.maxTrackQual(),
    this.resTrackQual(),
    this.courseDiff(),
    this.speedDiff(),
    this.altDiff(),
    this.minGeoPosQual(),
    this.maxGeoPosQual(),
    this.decorrWinMult(),
    this.consecDecorr(),
    this.bb!.createScalarList<string>(this.multiDuty.bind(this), this.multiDutyLength()),
    this.bb!.createScalarList<string>(this.ops.bind(this), this.opsLength()),
    this.jreUnitDes(),
    this.jreCallSign(),
    this.jrePriAdd(),
    this.jreSecAdd(),
    this.jreDetails(),
    this.bb!.createScalarList<string>(this.specTracks.bind(this), this.specTracksLength()),
    this.bb!.createScalarList<string>(this.nonLinkUnitDes.bind(this), this.nonLinkUnitDesLength()),
    this.bb!.createScalarList<string>(this.trackNumBlockLls.bind(this), this.trackNumBlockLlsLength()),
    this.bb!.createScalarList<string>(this.trackNumBlocks.bind(this), this.trackNumBlocksLength()),
    this.mgmtCode(),
    this.mgmtCodeMeaning(),
    this.ackReq(),
    this.bb!.createScalarList<string>(this.ackInstUnits.bind(this), this.ackInstUnitsLength()),
    this.classSource(),
    this.bb!.createScalarList<string>(this.classReasons.bind(this), this.classReasonsLength()),
    this.bb!.createScalarList<string>(this.decInstDates.bind(this), this.decInstDatesLength()),
    this.bb!.createScalarList<string>(this.decExemptCodes.bind(this), this.decExemptCodesLength()),
    this.bb!.createScalarList<string>(this.remarks.bind(this), this.remarksLength()),
    this.rawFileUri(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: DataLink_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.opExName = this.opExName();
  _o.originator = this.originator();
  _o.startTime = this.startTime();
  _o.stopTime = this.stopTime();
  _o.stopTimeMod = this.stopTimeMod();
  _o.planOrigNum = this.planOrigNum();
  _o.opExInfo = this.opExInfo();
  _o.opExInfoAlt = this.opExInfoAlt();
  _o.serialNum = this.serialNum();
  _o.month = this.month();
  _o.qualifier = this.qualifier();
  _o.qualSn = this.qualSn();
  _o.references = this.bb!.createScalarList<string>(this.references.bind(this), this.referencesLength());
  _o.canxId = this.canxId();
  _o.canxOriginator = this.canxOriginator();
  _o.canxTs = this.canxTs();
  _o.canxSerialNum = this.canxSerialNum();
  _o.canxSpecialNotation = this.canxSpecialNotation();
  _o.canxSics = this.bb!.createScalarList<string>(this.canxSics.bind(this), this.canxSicsLength());
  _o.pocName = this.pocName();
  _o.pocRank = this.pocRank();
  _o.pocCallSign = this.pocCallSign();
  _o.pocLocName = this.pocLocName();
  _o.pocLat = this.pocLat();
  _o.pocLon = this.pocLon();
  _o.pocNums = this.bb!.createScalarList<string>(this.pocNums.bind(this), this.pocNumsLength());
  _o.geoDatum = this.geoDatum();
  _o.refPoints = this.bb!.createScalarList<string>(this.refPoints.bind(this), this.refPointsLength());
  _o.voiceCoord = this.bb!.createScalarList<string>(this.voiceCoord.bind(this), this.voiceCoordLength());
  _o.sysDefaultCode = this.sysDefaultCode();
  _o.winSizeMult = this.winSizeMult();
  _o.winSizeMin = this.winSizeMin();
  _o.minTrackQual = this.minTrackQual();
  _o.maxTrackQual = this.maxTrackQual();
  _o.resTrackQual = this.resTrackQual();
  _o.courseDiff = this.courseDiff();
  _o.speedDiff = this.speedDiff();
  _o.altDiff = this.altDiff();
  _o.minGeoPosQual = this.minGeoPosQual();
  _o.maxGeoPosQual = this.maxGeoPosQual();
  _o.decorrWinMult = this.decorrWinMult();
  _o.consecDecorr = this.consecDecorr();
  _o.multiDuty = this.bb!.createScalarList<string>(this.multiDuty.bind(this), this.multiDutyLength());
  _o.ops = this.bb!.createScalarList<string>(this.ops.bind(this), this.opsLength());
  _o.jreUnitDes = this.jreUnitDes();
  _o.jreCallSign = this.jreCallSign();
  _o.jrePriAdd = this.jrePriAdd();
  _o.jreSecAdd = this.jreSecAdd();
  _o.jreDetails = this.jreDetails();
  _o.specTracks = this.bb!.createScalarList<string>(this.specTracks.bind(this), this.specTracksLength());
  _o.nonLinkUnitDes = this.bb!.createScalarList<string>(this.nonLinkUnitDes.bind(this), this.nonLinkUnitDesLength());
  _o.trackNumBlockLls = this.bb!.createScalarList<string>(this.trackNumBlockLls.bind(this), this.trackNumBlockLlsLength());
  _o.trackNumBlocks = this.bb!.createScalarList<string>(this.trackNumBlocks.bind(this), this.trackNumBlocksLength());
  _o.mgmtCode = this.mgmtCode();
  _o.mgmtCodeMeaning = this.mgmtCodeMeaning();
  _o.ackReq = this.ackReq();
  _o.ackInstUnits = this.bb!.createScalarList<string>(this.ackInstUnits.bind(this), this.ackInstUnitsLength());
  _o.classSource = this.classSource();
  _o.classReasons = this.bb!.createScalarList<string>(this.classReasons.bind(this), this.classReasonsLength());
  _o.decInstDates = this.bb!.createScalarList<string>(this.decInstDates.bind(this), this.decInstDatesLength());
  _o.decExemptCodes = this.bb!.createScalarList<string>(this.decExemptCodes.bind(this), this.decExemptCodesLength());
  _o.remarks = this.bb!.createScalarList<string>(this.remarks.bind(this), this.remarksLength());
  _o.rawFileUri = this.rawFileUri();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.sourceDl = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class DataLink_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public opExName: string|Uint8Array|null = null,
  public originator: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public stopTime: string|Uint8Array|null = null,
  public stopTimeMod: string|Uint8Array|null = null,
  public planOrigNum: string|Uint8Array|null = null,
  public opExInfo: string|Uint8Array|null = null,
  public opExInfoAlt: string|Uint8Array|null = null,
  public serialNum: string|Uint8Array|null = null,
  public month: string|Uint8Array|null = null,
  public qualifier: string|Uint8Array|null = null,
  public qualSn: number = 0,
  public references: (string)[] = [],
  public canxId: string|Uint8Array|null = null,
  public canxOriginator: string|Uint8Array|null = null,
  public canxTs: string|Uint8Array|null = null,
  public canxSerialNum: string|Uint8Array|null = null,
  public canxSpecialNotation: string|Uint8Array|null = null,
  public canxSics: (string)[] = [],
  public pocName: string|Uint8Array|null = null,
  public pocRank: string|Uint8Array|null = null,
  public pocCallSign: string|Uint8Array|null = null,
  public pocLocName: string|Uint8Array|null = null,
  public pocLat: number = 0.0,
  public pocLon: number = 0.0,
  public pocNums: (string)[] = [],
  public geoDatum: string|Uint8Array|null = null,
  public refPoints: (string)[] = [],
  public voiceCoord: (string)[] = [],
  public sysDefaultCode: string|Uint8Array|null = null,
  public winSizeMult: number = 0.0,
  public winSizeMin: number = 0.0,
  public minTrackQual: number = 0,
  public maxTrackQual: number = 0,
  public resTrackQual: number = 0,
  public courseDiff: number = 0,
  public speedDiff: number = 0,
  public altDiff: number = 0,
  public minGeoPosQual: number = 0,
  public maxGeoPosQual: number = 0,
  public decorrWinMult: number = 0.0,
  public consecDecorr: number = 0,
  public multiDuty: (string)[] = [],
  public ops: (string)[] = [],
  public jreUnitDes: string|Uint8Array|null = null,
  public jreCallSign: string|Uint8Array|null = null,
  public jrePriAdd: number = 0,
  public jreSecAdd: number = 0,
  public jreDetails: string|Uint8Array|null = null,
  public specTracks: (string)[] = [],
  public nonLinkUnitDes: (string)[] = [],
  public trackNumBlockLls: (string)[] = [],
  public trackNumBlocks: (string)[] = [],
  public mgmtCode: string|Uint8Array|null = null,
  public mgmtCodeMeaning: string|Uint8Array|null = null,
  public ackReq: boolean = false,
  public ackInstUnits: (string)[] = [],
  public classSource: string|Uint8Array|null = null,
  public classReasons: (string)[] = [],
  public decInstDates: (string)[] = [],
  public decExemptCodes: (string)[] = [],
  public remarks: (string)[] = [],
  public rawFileUri: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: DataLink_Abridged_dataMode_Enum = DataLink_Abridged_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const opExName = (this.opExName !== null ? builder.createString(this.opExName!) : 0);
  const originator = (this.originator !== null ? builder.createString(this.originator!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const stopTime = (this.stopTime !== null ? builder.createString(this.stopTime!) : 0);
  const stopTimeMod = (this.stopTimeMod !== null ? builder.createString(this.stopTimeMod!) : 0);
  const planOrigNum = (this.planOrigNum !== null ? builder.createString(this.planOrigNum!) : 0);
  const opExInfo = (this.opExInfo !== null ? builder.createString(this.opExInfo!) : 0);
  const opExInfoAlt = (this.opExInfoAlt !== null ? builder.createString(this.opExInfoAlt!) : 0);
  const serialNum = (this.serialNum !== null ? builder.createString(this.serialNum!) : 0);
  const month = (this.month !== null ? builder.createString(this.month!) : 0);
  const qualifier = (this.qualifier !== null ? builder.createString(this.qualifier!) : 0);
  const references = DataLink_Abridged.createReferencesVector(builder, builder.createObjectOffsetList(this.references));
  const canxId = (this.canxId !== null ? builder.createString(this.canxId!) : 0);
  const canxOriginator = (this.canxOriginator !== null ? builder.createString(this.canxOriginator!) : 0);
  const canxTs = (this.canxTs !== null ? builder.createString(this.canxTs!) : 0);
  const canxSerialNum = (this.canxSerialNum !== null ? builder.createString(this.canxSerialNum!) : 0);
  const canxSpecialNotation = (this.canxSpecialNotation !== null ? builder.createString(this.canxSpecialNotation!) : 0);
  const canxSics = DataLink_Abridged.createCanxSicsVector(builder, builder.createObjectOffsetList(this.canxSics));
  const pocName = (this.pocName !== null ? builder.createString(this.pocName!) : 0);
  const pocRank = (this.pocRank !== null ? builder.createString(this.pocRank!) : 0);
  const pocCallSign = (this.pocCallSign !== null ? builder.createString(this.pocCallSign!) : 0);
  const pocLocName = (this.pocLocName !== null ? builder.createString(this.pocLocName!) : 0);
  const pocNums = DataLink_Abridged.createPocNumsVector(builder, builder.createObjectOffsetList(this.pocNums));
  const geoDatum = (this.geoDatum !== null ? builder.createString(this.geoDatum!) : 0);
  const refPoints = DataLink_Abridged.createRefPointsVector(builder, builder.createObjectOffsetList(this.refPoints));
  const voiceCoord = DataLink_Abridged.createVoiceCoordVector(builder, builder.createObjectOffsetList(this.voiceCoord));
  const sysDefaultCode = (this.sysDefaultCode !== null ? builder.createString(this.sysDefaultCode!) : 0);
  const multiDuty = DataLink_Abridged.createMultiDutyVector(builder, builder.createObjectOffsetList(this.multiDuty));
  const ops = DataLink_Abridged.createOpsVector(builder, builder.createObjectOffsetList(this.ops));
  const jreUnitDes = (this.jreUnitDes !== null ? builder.createString(this.jreUnitDes!) : 0);
  const jreCallSign = (this.jreCallSign !== null ? builder.createString(this.jreCallSign!) : 0);
  const jreDetails = (this.jreDetails !== null ? builder.createString(this.jreDetails!) : 0);
  const specTracks = DataLink_Abridged.createSpecTracksVector(builder, builder.createObjectOffsetList(this.specTracks));
  const nonLinkUnitDes = DataLink_Abridged.createNonLinkUnitDesVector(builder, builder.createObjectOffsetList(this.nonLinkUnitDes));
  const trackNumBlockLls = DataLink_Abridged.createTrackNumBlockLlsVector(builder, builder.createObjectOffsetList(this.trackNumBlockLls));
  const trackNumBlocks = DataLink_Abridged.createTrackNumBlocksVector(builder, builder.createObjectOffsetList(this.trackNumBlocks));
  const mgmtCode = (this.mgmtCode !== null ? builder.createString(this.mgmtCode!) : 0);
  const mgmtCodeMeaning = (this.mgmtCodeMeaning !== null ? builder.createString(this.mgmtCodeMeaning!) : 0);
  const ackInstUnits = DataLink_Abridged.createAckInstUnitsVector(builder, builder.createObjectOffsetList(this.ackInstUnits));
  const classSource = (this.classSource !== null ? builder.createString(this.classSource!) : 0);
  const classReasons = DataLink_Abridged.createClassReasonsVector(builder, builder.createObjectOffsetList(this.classReasons));
  const decInstDates = DataLink_Abridged.createDecInstDatesVector(builder, builder.createObjectOffsetList(this.decInstDates));
  const decExemptCodes = DataLink_Abridged.createDecExemptCodesVector(builder, builder.createObjectOffsetList(this.decExemptCodes));
  const remarks = DataLink_Abridged.createRemarksVector(builder, builder.createObjectOffsetList(this.remarks));
  const rawFileUri = (this.rawFileUri !== null ? builder.createString(this.rawFileUri!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return DataLink_Abridged.createDataLink_Abridged(builder,
    id,
    classificationMarking,
    opExName,
    originator,
    startTime,
    stopTime,
    stopTimeMod,
    planOrigNum,
    opExInfo,
    opExInfoAlt,
    serialNum,
    month,
    qualifier,
    this.qualSn,
    references,
    canxId,
    canxOriginator,
    canxTs,
    canxSerialNum,
    canxSpecialNotation,
    canxSics,
    pocName,
    pocRank,
    pocCallSign,
    pocLocName,
    this.pocLat,
    this.pocLon,
    pocNums,
    geoDatum,
    refPoints,
    voiceCoord,
    sysDefaultCode,
    this.winSizeMult,
    this.winSizeMin,
    this.minTrackQual,
    this.maxTrackQual,
    this.resTrackQual,
    this.courseDiff,
    this.speedDiff,
    this.altDiff,
    this.minGeoPosQual,
    this.maxGeoPosQual,
    this.decorrWinMult,
    this.consecDecorr,
    multiDuty,
    ops,
    jreUnitDes,
    jreCallSign,
    this.jrePriAdd,
    this.jreSecAdd,
    jreDetails,
    specTracks,
    nonLinkUnitDes,
    trackNumBlockLls,
    trackNumBlocks,
    mgmtCode,
    mgmtCodeMeaning,
    this.ackReq,
    ackInstUnits,
    classSource,
    classReasons,
    decInstDates,
    decExemptCodes,
    remarks,
    rawFileUri,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    sourceDl,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
