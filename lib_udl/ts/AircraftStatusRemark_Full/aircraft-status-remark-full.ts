// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AircraftStatusRemark_Full_dataMode_Enum } from './aircraft-status-remark-full-data-mode-enum.js';


/**
 * /// Properties and characteristics of a remark that is associated with an aircraft status.
 */
export class AircraftStatusRemark_Full implements flatbuffers.IUnpackableObject<AircraftStatusRemark_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AircraftStatusRemark_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAircraftStatusRemark_Full(bb:flatbuffers.ByteBuffer, obj?:AircraftStatusRemark_Full):AircraftStatusRemark_Full {
  return (obj || new AircraftStatusRemark_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAircraftStatusRemark_Full(bb:flatbuffers.ByteBuffer, obj?:AircraftStatusRemark_Full):AircraftStatusRemark_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AircraftStatusRemark_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRC');
}

/**
 * Unique identifier of the record, auto-generated by the system if not provided on create operations.
 * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The ID of the Aircraft Status to which this remark applies.
 * Example: /// Example: 388b1f64-ccff-4113-b049-3cf5542c2a42
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idAircraftStatus():string|null
idAircraftStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idAircraftStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Aircraft Status Remark record from the originating system.
 * Example: /// Example: GDSSBL022307131714250077
 * Constraints: Minimum length = 0, Maximum length = 36
 */
altRmkId():string|null
altRmkId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altRmkId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the remark.
 * Example: /// Example: DISCREPANCY - 202297501
 * Constraints: Minimum length = 0, Maximum length = 64
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The text of the remark.
 * Example: /// Example: Remark text
 * Constraints: Minimum length = 1, Maximum length = 1024
 */
text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the remark was created in the originating system in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-01T15:00:00.123Z
 * Constraints: No constraints specified.
 */
timestamp():string|null
timestamp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
timestamp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name or ID of the external user that updated this remark in the originating system.
 * Example: /// Example: JOHN SMITH
 * Constraints: Minimum length = 0, Maximum length = 36
 */
lastUpdatedBy():string|null
lastUpdatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastUpdatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the remark was last updated in the originating system in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2024-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
lastUpdatedAt():string|null
lastUpdatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastUpdatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():AircraftStatusRemark_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AircraftStatusRemark_Full_dataMode_Enum.REAL;
}

static startAircraftStatusRemark_Full(builder:flatbuffers.Builder) {
  builder.startObject(18);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdAircraftStatus(builder:flatbuffers.Builder, idAircraftStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idAircraftStatusOffset, 0);
}

static addAltRmkId(builder:flatbuffers.Builder, altRmkIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, altRmkIdOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, nameOffset, 0);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, textOffset, 0);
}

static addTimestamp(builder:flatbuffers.Builder, timestampOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, timestampOffset, 0);
}

static addLastUpdatedBy(builder:flatbuffers.Builder, lastUpdatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, lastUpdatedByOffset, 0);
}

static addLastUpdatedAt(builder:flatbuffers.Builder, lastUpdatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, lastUpdatedAtOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, updatedByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:AircraftStatusRemark_Full_dataMode_Enum) {
  builder.addFieldInt8(17, dataMode, AircraftStatusRemark_Full_dataMode_Enum.REAL);
}

static endAircraftStatusRemark_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAircraftStatusRemark_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC');
}

static finishSizePrefixedAircraftStatusRemark_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC', true);
}

static createAircraftStatusRemark_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idAircraftStatusOffset:flatbuffers.Offset, altRmkIdOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, textOffset:flatbuffers.Offset, timestampOffset:flatbuffers.Offset, lastUpdatedByOffset:flatbuffers.Offset, lastUpdatedAtOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:AircraftStatusRemark_Full_dataMode_Enum):flatbuffers.Offset {
  AircraftStatusRemark_Full.startAircraftStatusRemark_Full(builder);
  AircraftStatusRemark_Full.addId(builder, idOffset);
  AircraftStatusRemark_Full.addClassificationMarking(builder, classificationMarkingOffset);
  AircraftStatusRemark_Full.addIdAircraftStatus(builder, idAircraftStatusOffset);
  AircraftStatusRemark_Full.addAltRmkId(builder, altRmkIdOffset);
  AircraftStatusRemark_Full.addName(builder, nameOffset);
  AircraftStatusRemark_Full.addText(builder, textOffset);
  AircraftStatusRemark_Full.addTimestamp(builder, timestampOffset);
  AircraftStatusRemark_Full.addLastUpdatedBy(builder, lastUpdatedByOffset);
  AircraftStatusRemark_Full.addLastUpdatedAt(builder, lastUpdatedAtOffset);
  AircraftStatusRemark_Full.addCreatedAt(builder, createdAtOffset);
  AircraftStatusRemark_Full.addCreatedBy(builder, createdByOffset);
  AircraftStatusRemark_Full.addUpdatedAt(builder, updatedAtOffset);
  AircraftStatusRemark_Full.addUpdatedBy(builder, updatedByOffset);
  AircraftStatusRemark_Full.addSourceDl(builder, sourceDlOffset);
  AircraftStatusRemark_Full.addSource(builder, sourceOffset);
  AircraftStatusRemark_Full.addOrigin(builder, originOffset);
  AircraftStatusRemark_Full.addOrigNetwork(builder, origNetworkOffset);
  AircraftStatusRemark_Full.addDataMode(builder, dataMode);
  return AircraftStatusRemark_Full.endAircraftStatusRemark_Full(builder);
}

unpack(): AircraftStatusRemark_FullT {
  return new AircraftStatusRemark_FullT(
    this.id(),
    this.classificationMarking(),
    this.idAircraftStatus(),
    this.altRmkId(),
    this.name(),
    this.text(),
    this.timestamp(),
    this.lastUpdatedBy(),
    this.lastUpdatedAt(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: AircraftStatusRemark_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idAircraftStatus = this.idAircraftStatus();
  _o.altRmkId = this.altRmkId();
  _o.name = this.name();
  _o.text = this.text();
  _o.timestamp = this.timestamp();
  _o.lastUpdatedBy = this.lastUpdatedBy();
  _o.lastUpdatedAt = this.lastUpdatedAt();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.sourceDL = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class AircraftStatusRemark_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idAircraftStatus: string|Uint8Array|null = null,
  public altRmkId: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public text: string|Uint8Array|null = null,
  public timestamp: string|Uint8Array|null = null,
  public lastUpdatedBy: string|Uint8Array|null = null,
  public lastUpdatedAt: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: AircraftStatusRemark_Full_dataMode_Enum = AircraftStatusRemark_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idAircraftStatus = (this.idAircraftStatus !== null ? builder.createString(this.idAircraftStatus!) : 0);
  const altRmkId = (this.altRmkId !== null ? builder.createString(this.altRmkId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const text = (this.text !== null ? builder.createString(this.text!) : 0);
  const timestamp = (this.timestamp !== null ? builder.createString(this.timestamp!) : 0);
  const lastUpdatedBy = (this.lastUpdatedBy !== null ? builder.createString(this.lastUpdatedBy!) : 0);
  const lastUpdatedAt = (this.lastUpdatedAt !== null ? builder.createString(this.lastUpdatedAt!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return AircraftStatusRemark_Full.createAircraftStatusRemark_Full(builder,
    id,
    classificationMarking,
    idAircraftStatus,
    altRmkId,
    name,
    text,
    timestamp,
    lastUpdatedBy,
    lastUpdatedAt,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    sourceDL,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
