// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { EOObservation_Full_dataMode_Enum } from './EOObservation_Full_dataMode_Enum.js';
import { EOObservation_Full_referenceFrame_Enum } from './EOObservation_Full_referenceFrame_Enum.js';
import { EOObservation_Full_senReferenceFrame_Enum } from './EOObservation_Full_senReferenceFrame_Enum.js';


/**
 * /// Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.
 */
export class EOObservation_Full implements flatbuffers.IUnpackableObject<EOObservation_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EOObservation_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEOObservation_Full(bb:flatbuffers.ByteBuffer, obj?:EOObservation_Full):EOObservation_Full {
  return (obj || new EOObservation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEOObservation_Full(bb:flatbuffers.ByteBuffer, obj?:EOObservation_Full):EOObservation_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EOObservation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EOOB');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: EOOBSERVATION-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ob detection time in ISO 8601 UTC with microsecond precision.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
obTime():string|null
obTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Object Correlation Quality value (non-standardized). Users should consult data providers regarding the expected range of values.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
corrQuality():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Unique identifier of the target on-orbit object, if correlated.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the reporting sensor.
 * Example: /// Example: SENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Sky Imagery.
 * Example: /// Example: SKYIMAGERY-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSkyImagery():string|null
idSkyImagery(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSkyImagery(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
 * Example: /// Example: AUTOTRACK
 * Constraints: Minimum length = 0, Maximum length = 24
 */
collectMethod():string|null
collectMethod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collectMethod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/Catalog number of the target on-orbit object.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier to indicate the specific tasking which produced this observation.
 * Example: /// Example: TASK-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
taskId():string|null
taskId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: TRANSACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier of the track to which this observation belongs.
 * Example: /// Example: TRACK-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
trackId():string|null
trackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
 * Example: /// Example: FIRST
 * Constraints: Minimum length = 0, Maximum length = 8
 */
obPosition():string|null
obPosition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obPosition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
uct():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Line of sight azimuth angle in degrees and topocentric frame.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
azimuth():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the line of sight azimuth angle, in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
azimuthUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor line of sight azimuth angle bias in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
azimuthBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of the line of sight azimuth in degrees per second.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
azimuthRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line of sight elevation in degrees and topocentric frame.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
elevation():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the line of sight elevation angle, in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
elevationUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor line of sight elevation bias in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
elevationBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of the line of sight elevation in degrees per second.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
elevationRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line of sight range in km.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
range():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the line of sight range, in kilometers.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
rangeUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor line of sight range bias in km.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
rangeBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of the line of sight range in km/sec.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
rangeRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the line of sight range rate, in kilometers/second.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
rangeRateUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line of sight right ascension, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
ra():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
raRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the line of sight right ascension angle, in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
raUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor line of sight right ascension bias in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
raBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line of sight declination, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
declination():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
declinationRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the line of sight declination angle, in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
declinationUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor line of sight declination angle bias in degrees.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
declinationBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
losx():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
losy():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
losz():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * One sigma uncertainty in the line of sight pointing in micro-radians.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
losUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
losxvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
losyvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
loszvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.1
 * Constraints: No constraints specified.
 */
senlat():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 179.1
 * Constraints: No constraints specified.
 */
senlon():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor altitude at obTime (if mobile/onorbit) in km.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senalt():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senx():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
seny():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senz():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senvelx():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senvely():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senvelz():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).
 * Example: /// Example: [0.4492, 0.02, 0.8765, 0.2213]
 * Constraints: No constraints specified.
 */
senQuat(index: number):string
senQuat(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
senQuat(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

senQuatLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The number of RSOs detected in the sensor field of view.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
fovCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Image exposure duration in seconds.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
expDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Formula: 2.5 * log_10 (zero_mag_counts / expDuration).
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
zeroptd():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Net object signature = counts / expDuration.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
netObjSig():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Net object signature uncertainty = counts uncertainty / expDuration.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
netObjSigUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Calibrated magnitude in units of magnitudes.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
mag():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty of calibrated magnitude in units of magnitudes.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
magUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Formula: mag - 5.0 * log_10(geo_range / 1000000.0).
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
magNormRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * For GEO detections, the latitude in degrees north.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
geolat():number {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * For GEO detections, the longitude in degrees east.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
geolon():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * For GEO detections, the altitude in km.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
geoalt():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * For GEO detections, the range in km.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
georange():number {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
skyBkgrnd():number {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
primaryExtinction():number {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Primary Extinction Coefficient Uncertainty, in Magnitudes.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
primaryExtinctionUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
solarPhaseAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing and positive when opening.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
solarEqPhaseAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Angle from the sun to the equatorial plane.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
solarDecAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Shutter delay in seconds.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
shutterDelay():number {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor timing bias in seconds.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
timingBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: Example URI
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Intensity of the target for IR observations, in kw/sr/um.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
intensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Background intensity for IR observations, in kw/sr/um.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
bgIntensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional source-provided and searchable metadata or descriptor of the data.
 * Example: /// Example: PROVIDED_DATA1
 * Constraints: Minimum length = 0, Maximum length = 64
 */
descriptor():string|null
descriptor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
descriptor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():EOObservation_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : EOObservation_Full_dataMode_Enum.REAL;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
zeroPtdUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
eoobservationDetails():string|null
eoobservationDetails(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eoobservationDetails(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
onOrbit():string|null
onOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
onOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 176);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.
 * Example: /// Example: J2000
 * Constraints: Minimum length = 0, Maximum length = 24
 */
referenceFrame():EOObservation_Full_referenceFrame_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 178);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : EOObservation_Full_referenceFrame_Enum.J2000;
}

/**
 * The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
 * Example: /// Example: J2000
 * Constraints: Minimum length = 0, Maximum length = 24
 */
senReferenceFrame():EOObservation_Full_senReferenceFrame_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 180);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : EOObservation_Full_senReferenceFrame_Enum.J2000;
}

/**
 * Boolean indicating that the target object was in umbral eclipse at the time of this observation.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
umbra():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 182);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
penumbra():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 184);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 186);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 188);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
 * Example: /// Example: OPTICAL
 * Constraints: No constraints specified.
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 190);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEOObservation_Full(builder:flatbuffers.Builder) {
  builder.startObject(94);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addObTime(builder:flatbuffers.Builder, obTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, obTimeOffset, 0);
}

static addCorrQuality(builder:flatbuffers.Builder, corrQuality:number) {
  builder.addFieldFloat64(3, corrQuality, 0.0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idOnOrbitOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idSensorOffset, 0);
}

static addIdSkyImagery(builder:flatbuffers.Builder, idSkyImageryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, idSkyImageryOffset, 0);
}

static addCollectMethod(builder:flatbuffers.Builder, collectMethodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, collectMethodOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(8, satNo, 0);
}

static addTaskId(builder:flatbuffers.Builder, taskIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, taskIdOffset, 0);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, transactionIdOffset, 0);
}

static addTrackId(builder:flatbuffers.Builder, trackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, trackIdOffset, 0);
}

static addObPosition(builder:flatbuffers.Builder, obPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, obPositionOffset, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, origObjectIdOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, origSensorIdOffset, 0);
}

static addUct(builder:flatbuffers.Builder, uct:boolean) {
  builder.addFieldInt8(15, +uct, +false);
}

static addAzimuth(builder:flatbuffers.Builder, azimuth:number) {
  builder.addFieldFloat64(16, azimuth, 0.0);
}

static addAzimuthUnc(builder:flatbuffers.Builder, azimuthUnc:number) {
  builder.addFieldFloat64(17, azimuthUnc, 0.0);
}

static addAzimuthBias(builder:flatbuffers.Builder, azimuthBias:number) {
  builder.addFieldFloat64(18, azimuthBias, 0.0);
}

static addAzimuthRate(builder:flatbuffers.Builder, azimuthRate:number) {
  builder.addFieldFloat64(19, azimuthRate, 0.0);
}

static addElevation(builder:flatbuffers.Builder, elevation:number) {
  builder.addFieldFloat64(20, elevation, 0.0);
}

static addElevationUnc(builder:flatbuffers.Builder, elevationUnc:number) {
  builder.addFieldFloat64(21, elevationUnc, 0.0);
}

static addElevationBias(builder:flatbuffers.Builder, elevationBias:number) {
  builder.addFieldFloat64(22, elevationBias, 0.0);
}

static addElevationRate(builder:flatbuffers.Builder, elevationRate:number) {
  builder.addFieldFloat64(23, elevationRate, 0.0);
}

static addRange(builder:flatbuffers.Builder, range:number) {
  builder.addFieldFloat64(24, range, 0.0);
}

static addRangeUnc(builder:flatbuffers.Builder, rangeUnc:number) {
  builder.addFieldFloat64(25, rangeUnc, 0.0);
}

static addRangeBias(builder:flatbuffers.Builder, rangeBias:number) {
  builder.addFieldFloat64(26, rangeBias, 0.0);
}

static addRangeRate(builder:flatbuffers.Builder, rangeRate:number) {
  builder.addFieldFloat64(27, rangeRate, 0.0);
}

static addRangeRateUnc(builder:flatbuffers.Builder, rangeRateUnc:number) {
  builder.addFieldFloat64(28, rangeRateUnc, 0.0);
}

static addRa(builder:flatbuffers.Builder, ra:number) {
  builder.addFieldFloat64(29, ra, 0.0);
}

static addRaRate(builder:flatbuffers.Builder, raRate:number) {
  builder.addFieldFloat64(30, raRate, 0.0);
}

static addRaUnc(builder:flatbuffers.Builder, raUnc:number) {
  builder.addFieldFloat64(31, raUnc, 0.0);
}

static addRaBias(builder:flatbuffers.Builder, raBias:number) {
  builder.addFieldFloat64(32, raBias, 0.0);
}

static addDeclination(builder:flatbuffers.Builder, declination:number) {
  builder.addFieldFloat64(33, declination, 0.0);
}

static addDeclinationRate(builder:flatbuffers.Builder, declinationRate:number) {
  builder.addFieldFloat64(34, declinationRate, 0.0);
}

static addDeclinationUnc(builder:flatbuffers.Builder, declinationUnc:number) {
  builder.addFieldFloat64(35, declinationUnc, 0.0);
}

static addDeclinationBias(builder:flatbuffers.Builder, declinationBias:number) {
  builder.addFieldFloat64(36, declinationBias, 0.0);
}

static addLosx(builder:flatbuffers.Builder, losx:number) {
  builder.addFieldFloat64(37, losx, 0.0);
}

static addLosy(builder:flatbuffers.Builder, losy:number) {
  builder.addFieldFloat64(38, losy, 0.0);
}

static addLosz(builder:flatbuffers.Builder, losz:number) {
  builder.addFieldFloat64(39, losz, 0.0);
}

static addLosUnc(builder:flatbuffers.Builder, losUnc:number) {
  builder.addFieldFloat64(40, losUnc, 0.0);
}

static addLosxvel(builder:flatbuffers.Builder, losxvel:number) {
  builder.addFieldFloat64(41, losxvel, 0.0);
}

static addLosyvel(builder:flatbuffers.Builder, losyvel:number) {
  builder.addFieldFloat64(42, losyvel, 0.0);
}

static addLoszvel(builder:flatbuffers.Builder, loszvel:number) {
  builder.addFieldFloat64(43, loszvel, 0.0);
}

static addSenlat(builder:flatbuffers.Builder, senlat:number) {
  builder.addFieldFloat64(44, senlat, 0.0);
}

static addSenlon(builder:flatbuffers.Builder, senlon:number) {
  builder.addFieldFloat64(45, senlon, 0.0);
}

static addSenalt(builder:flatbuffers.Builder, senalt:number) {
  builder.addFieldFloat64(46, senalt, 0.0);
}

static addSenx(builder:flatbuffers.Builder, senx:number) {
  builder.addFieldFloat64(47, senx, 0.0);
}

static addSeny(builder:flatbuffers.Builder, seny:number) {
  builder.addFieldFloat64(48, seny, 0.0);
}

static addSenz(builder:flatbuffers.Builder, senz:number) {
  builder.addFieldFloat64(49, senz, 0.0);
}

static addSenvelx(builder:flatbuffers.Builder, senvelx:number) {
  builder.addFieldFloat64(50, senvelx, 0.0);
}

static addSenvely(builder:flatbuffers.Builder, senvely:number) {
  builder.addFieldFloat64(51, senvely, 0.0);
}

static addSenvelz(builder:flatbuffers.Builder, senvelz:number) {
  builder.addFieldFloat64(52, senvelz, 0.0);
}

static addSenQuat(builder:flatbuffers.Builder, senQuatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, senQuatOffset, 0);
}

static createSenQuatVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSenQuatVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFovCount(builder:flatbuffers.Builder, fovCount:number) {
  builder.addFieldInt32(54, fovCount, 0);
}

static addExpDuration(builder:flatbuffers.Builder, expDuration:number) {
  builder.addFieldFloat64(55, expDuration, 0.0);
}

static addZeroptd(builder:flatbuffers.Builder, zeroptd:number) {
  builder.addFieldFloat64(56, zeroptd, 0.0);
}

static addNetObjSig(builder:flatbuffers.Builder, netObjSig:number) {
  builder.addFieldFloat64(57, netObjSig, 0.0);
}

static addNetObjSigUnc(builder:flatbuffers.Builder, netObjSigUnc:number) {
  builder.addFieldFloat64(58, netObjSigUnc, 0.0);
}

static addMag(builder:flatbuffers.Builder, mag:number) {
  builder.addFieldFloat64(59, mag, 0.0);
}

static addMagUnc(builder:flatbuffers.Builder, magUnc:number) {
  builder.addFieldFloat64(60, magUnc, 0.0);
}

static addMagNormRange(builder:flatbuffers.Builder, magNormRange:number) {
  builder.addFieldFloat64(61, magNormRange, 0.0);
}

static addGeolat(builder:flatbuffers.Builder, geolat:number) {
  builder.addFieldFloat64(62, geolat, 0.0);
}

static addGeolon(builder:flatbuffers.Builder, geolon:number) {
  builder.addFieldFloat64(63, geolon, 0.0);
}

static addGeoalt(builder:flatbuffers.Builder, geoalt:number) {
  builder.addFieldFloat64(64, geoalt, 0.0);
}

static addGeorange(builder:flatbuffers.Builder, georange:number) {
  builder.addFieldFloat64(65, georange, 0.0);
}

static addSkyBkgrnd(builder:flatbuffers.Builder, skyBkgrnd:number) {
  builder.addFieldFloat64(66, skyBkgrnd, 0.0);
}

static addPrimaryExtinction(builder:flatbuffers.Builder, primaryExtinction:number) {
  builder.addFieldFloat64(67, primaryExtinction, 0.0);
}

static addPrimaryExtinctionUnc(builder:flatbuffers.Builder, primaryExtinctionUnc:number) {
  builder.addFieldFloat64(68, primaryExtinctionUnc, 0.0);
}

static addSolarPhaseAngle(builder:flatbuffers.Builder, solarPhaseAngle:number) {
  builder.addFieldFloat64(69, solarPhaseAngle, 0.0);
}

static addSolarEqPhaseAngle(builder:flatbuffers.Builder, solarEqPhaseAngle:number) {
  builder.addFieldFloat64(70, solarEqPhaseAngle, 0.0);
}

static addSolarDecAngle(builder:flatbuffers.Builder, solarDecAngle:number) {
  builder.addFieldFloat64(71, solarDecAngle, 0.0);
}

static addShutterDelay(builder:flatbuffers.Builder, shutterDelay:number) {
  builder.addFieldFloat64(72, shutterDelay, 0.0);
}

static addTimingBias(builder:flatbuffers.Builder, timingBias:number) {
  builder.addFieldFloat64(73, timingBias, 0.0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(74, rawFileUriOffset, 0);
}

static addIntensity(builder:flatbuffers.Builder, intensity:number) {
  builder.addFieldFloat64(75, intensity, 0.0);
}

static addBgIntensity(builder:flatbuffers.Builder, bgIntensity:number) {
  builder.addFieldFloat64(76, bgIntensity, 0.0);
}

static addDescriptor(builder:flatbuffers.Builder, descriptorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(77, descriptorOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(78, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(79, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:EOObservation_Full_dataMode_Enum) {
  builder.addFieldInt8(80, dataMode, EOObservation_Full_dataMode_Enum.REAL);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(81, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(82, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(83, createdByOffset, 0);
}

static addZeroPtdUnc(builder:flatbuffers.Builder, zeroPtdUnc:number) {
  builder.addFieldFloat64(84, zeroPtdUnc, 0.0);
}

static addEoobservationDetails(builder:flatbuffers.Builder, eoobservationDetailsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(85, eoobservationDetailsOffset, 0);
}

static addOnOrbit(builder:flatbuffers.Builder, onOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(86, onOrbitOffset, 0);
}

static addReferenceFrame(builder:flatbuffers.Builder, referenceFrame:EOObservation_Full_referenceFrame_Enum) {
  builder.addFieldInt8(87, referenceFrame, EOObservation_Full_referenceFrame_Enum.J2000);
}

static addSenReferenceFrame(builder:flatbuffers.Builder, senReferenceFrame:EOObservation_Full_senReferenceFrame_Enum) {
  builder.addFieldInt8(88, senReferenceFrame, EOObservation_Full_senReferenceFrame_Enum.J2000);
}

static addUmbra(builder:flatbuffers.Builder, umbra:boolean) {
  builder.addFieldInt8(89, +umbra, +false);
}

static addPenumbra(builder:flatbuffers.Builder, penumbra:boolean) {
  builder.addFieldInt8(90, +penumbra, +false);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(91, origNetworkOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(92, sourceDlOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(93, typeOffset, 0);
}

static endEOObservation_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEOObservation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EOOB');
}

static finishSizePrefixedEOObservation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EOOB', true);
}

static createEOObservation_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, obTimeOffset:flatbuffers.Offset, corrQuality:number, idOnOrbitOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, idSkyImageryOffset:flatbuffers.Offset, collectMethodOffset:flatbuffers.Offset, satNo:number, taskIdOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, trackIdOffset:flatbuffers.Offset, obPositionOffset:flatbuffers.Offset, origObjectIdOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, uct:boolean, azimuth:number, azimuthUnc:number, azimuthBias:number, azimuthRate:number, elevation:number, elevationUnc:number, elevationBias:number, elevationRate:number, range:number, rangeUnc:number, rangeBias:number, rangeRate:number, rangeRateUnc:number, ra:number, raRate:number, raUnc:number, raBias:number, declination:number, declinationRate:number, declinationUnc:number, declinationBias:number, losx:number, losy:number, losz:number, losUnc:number, losxvel:number, losyvel:number, loszvel:number, senlat:number, senlon:number, senalt:number, senx:number, seny:number, senz:number, senvelx:number, senvely:number, senvelz:number, senQuatOffset:flatbuffers.Offset, fovCount:number, expDuration:number, zeroptd:number, netObjSig:number, netObjSigUnc:number, mag:number, magUnc:number, magNormRange:number, geolat:number, geolon:number, geoalt:number, georange:number, skyBkgrnd:number, primaryExtinction:number, primaryExtinctionUnc:number, solarPhaseAngle:number, solarEqPhaseAngle:number, solarDecAngle:number, shutterDelay:number, timingBias:number, rawFileUriOffset:flatbuffers.Offset, intensity:number, bgIntensity:number, descriptorOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:EOObservation_Full_dataMode_Enum, tagsOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, zeroPtdUnc:number, eoobservationDetailsOffset:flatbuffers.Offset, onOrbitOffset:flatbuffers.Offset, referenceFrame:EOObservation_Full_referenceFrame_Enum, senReferenceFrame:EOObservation_Full_senReferenceFrame_Enum, umbra:boolean, penumbra:boolean, origNetworkOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset):flatbuffers.Offset {
  EOObservation_Full.startEOObservation_Full(builder);
  EOObservation_Full.addId(builder, idOffset);
  EOObservation_Full.addClassificationMarking(builder, classificationMarkingOffset);
  EOObservation_Full.addObTime(builder, obTimeOffset);
  EOObservation_Full.addCorrQuality(builder, corrQuality);
  EOObservation_Full.addIdOnOrbit(builder, idOnOrbitOffset);
  EOObservation_Full.addIdSensor(builder, idSensorOffset);
  EOObservation_Full.addIdSkyImagery(builder, idSkyImageryOffset);
  EOObservation_Full.addCollectMethod(builder, collectMethodOffset);
  EOObservation_Full.addSatNo(builder, satNo);
  EOObservation_Full.addTaskId(builder, taskIdOffset);
  EOObservation_Full.addTransactionId(builder, transactionIdOffset);
  EOObservation_Full.addTrackId(builder, trackIdOffset);
  EOObservation_Full.addObPosition(builder, obPositionOffset);
  EOObservation_Full.addOrigObjectId(builder, origObjectIdOffset);
  EOObservation_Full.addOrigSensorId(builder, origSensorIdOffset);
  EOObservation_Full.addUct(builder, uct);
  EOObservation_Full.addAzimuth(builder, azimuth);
  EOObservation_Full.addAzimuthUnc(builder, azimuthUnc);
  EOObservation_Full.addAzimuthBias(builder, azimuthBias);
  EOObservation_Full.addAzimuthRate(builder, azimuthRate);
  EOObservation_Full.addElevation(builder, elevation);
  EOObservation_Full.addElevationUnc(builder, elevationUnc);
  EOObservation_Full.addElevationBias(builder, elevationBias);
  EOObservation_Full.addElevationRate(builder, elevationRate);
  EOObservation_Full.addRange(builder, range);
  EOObservation_Full.addRangeUnc(builder, rangeUnc);
  EOObservation_Full.addRangeBias(builder, rangeBias);
  EOObservation_Full.addRangeRate(builder, rangeRate);
  EOObservation_Full.addRangeRateUnc(builder, rangeRateUnc);
  EOObservation_Full.addRa(builder, ra);
  EOObservation_Full.addRaRate(builder, raRate);
  EOObservation_Full.addRaUnc(builder, raUnc);
  EOObservation_Full.addRaBias(builder, raBias);
  EOObservation_Full.addDeclination(builder, declination);
  EOObservation_Full.addDeclinationRate(builder, declinationRate);
  EOObservation_Full.addDeclinationUnc(builder, declinationUnc);
  EOObservation_Full.addDeclinationBias(builder, declinationBias);
  EOObservation_Full.addLosx(builder, losx);
  EOObservation_Full.addLosy(builder, losy);
  EOObservation_Full.addLosz(builder, losz);
  EOObservation_Full.addLosUnc(builder, losUnc);
  EOObservation_Full.addLosxvel(builder, losxvel);
  EOObservation_Full.addLosyvel(builder, losyvel);
  EOObservation_Full.addLoszvel(builder, loszvel);
  EOObservation_Full.addSenlat(builder, senlat);
  EOObservation_Full.addSenlon(builder, senlon);
  EOObservation_Full.addSenalt(builder, senalt);
  EOObservation_Full.addSenx(builder, senx);
  EOObservation_Full.addSeny(builder, seny);
  EOObservation_Full.addSenz(builder, senz);
  EOObservation_Full.addSenvelx(builder, senvelx);
  EOObservation_Full.addSenvely(builder, senvely);
  EOObservation_Full.addSenvelz(builder, senvelz);
  EOObservation_Full.addSenQuat(builder, senQuatOffset);
  EOObservation_Full.addFovCount(builder, fovCount);
  EOObservation_Full.addExpDuration(builder, expDuration);
  EOObservation_Full.addZeroptd(builder, zeroptd);
  EOObservation_Full.addNetObjSig(builder, netObjSig);
  EOObservation_Full.addNetObjSigUnc(builder, netObjSigUnc);
  EOObservation_Full.addMag(builder, mag);
  EOObservation_Full.addMagUnc(builder, magUnc);
  EOObservation_Full.addMagNormRange(builder, magNormRange);
  EOObservation_Full.addGeolat(builder, geolat);
  EOObservation_Full.addGeolon(builder, geolon);
  EOObservation_Full.addGeoalt(builder, geoalt);
  EOObservation_Full.addGeorange(builder, georange);
  EOObservation_Full.addSkyBkgrnd(builder, skyBkgrnd);
  EOObservation_Full.addPrimaryExtinction(builder, primaryExtinction);
  EOObservation_Full.addPrimaryExtinctionUnc(builder, primaryExtinctionUnc);
  EOObservation_Full.addSolarPhaseAngle(builder, solarPhaseAngle);
  EOObservation_Full.addSolarEqPhaseAngle(builder, solarEqPhaseAngle);
  EOObservation_Full.addSolarDecAngle(builder, solarDecAngle);
  EOObservation_Full.addShutterDelay(builder, shutterDelay);
  EOObservation_Full.addTimingBias(builder, timingBias);
  EOObservation_Full.addRawFileUri(builder, rawFileUriOffset);
  EOObservation_Full.addIntensity(builder, intensity);
  EOObservation_Full.addBgIntensity(builder, bgIntensity);
  EOObservation_Full.addDescriptor(builder, descriptorOffset);
  EOObservation_Full.addSource(builder, sourceOffset);
  EOObservation_Full.addOrigin(builder, originOffset);
  EOObservation_Full.addDataMode(builder, dataMode);
  EOObservation_Full.addTags(builder, tagsOffset);
  EOObservation_Full.addCreatedAt(builder, createdAtOffset);
  EOObservation_Full.addCreatedBy(builder, createdByOffset);
  EOObservation_Full.addZeroPtdUnc(builder, zeroPtdUnc);
  EOObservation_Full.addEoobservationDetails(builder, eoobservationDetailsOffset);
  EOObservation_Full.addOnOrbit(builder, onOrbitOffset);
  EOObservation_Full.addReferenceFrame(builder, referenceFrame);
  EOObservation_Full.addSenReferenceFrame(builder, senReferenceFrame);
  EOObservation_Full.addUmbra(builder, umbra);
  EOObservation_Full.addPenumbra(builder, penumbra);
  EOObservation_Full.addOrigNetwork(builder, origNetworkOffset);
  EOObservation_Full.addSourceDl(builder, sourceDlOffset);
  EOObservation_Full.addType(builder, typeOffset);
  return EOObservation_Full.endEOObservation_Full(builder);
}

unpack(): EOObservation_FullT {
  return new EOObservation_FullT(
    this.id(),
    this.classificationMarking(),
    this.obTime(),
    this.corrQuality(),
    this.idOnOrbit(),
    this.idSensor(),
    this.idSkyImagery(),
    this.collectMethod(),
    this.satNo(),
    this.taskId(),
    this.transactionId(),
    this.trackId(),
    this.obPosition(),
    this.origObjectId(),
    this.origSensorId(),
    this.uct(),
    this.azimuth(),
    this.azimuthUnc(),
    this.azimuthBias(),
    this.azimuthRate(),
    this.elevation(),
    this.elevationUnc(),
    this.elevationBias(),
    this.elevationRate(),
    this.range(),
    this.rangeUnc(),
    this.rangeBias(),
    this.rangeRate(),
    this.rangeRateUnc(),
    this.ra(),
    this.raRate(),
    this.raUnc(),
    this.raBias(),
    this.declination(),
    this.declinationRate(),
    this.declinationUnc(),
    this.declinationBias(),
    this.losx(),
    this.losy(),
    this.losz(),
    this.losUnc(),
    this.losxvel(),
    this.losyvel(),
    this.loszvel(),
    this.senlat(),
    this.senlon(),
    this.senalt(),
    this.senx(),
    this.seny(),
    this.senz(),
    this.senvelx(),
    this.senvely(),
    this.senvelz(),
    this.bb!.createScalarList<string>(this.senQuat.bind(this), this.senQuatLength()),
    this.fovCount(),
    this.expDuration(),
    this.zeroptd(),
    this.netObjSig(),
    this.netObjSigUnc(),
    this.mag(),
    this.magUnc(),
    this.magNormRange(),
    this.geolat(),
    this.geolon(),
    this.geoalt(),
    this.georange(),
    this.skyBkgrnd(),
    this.primaryExtinction(),
    this.primaryExtinctionUnc(),
    this.solarPhaseAngle(),
    this.solarEqPhaseAngle(),
    this.solarDecAngle(),
    this.shutterDelay(),
    this.timingBias(),
    this.rawFileUri(),
    this.intensity(),
    this.bgIntensity(),
    this.descriptor(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength()),
    this.createdAt(),
    this.createdBy(),
    this.zeroPtdUnc(),
    this.eoobservationDetails(),
    this.onOrbit(),
    this.referenceFrame(),
    this.senReferenceFrame(),
    this.umbra(),
    this.penumbra(),
    this.origNetwork(),
    this.sourceDl(),
    this.type()
  );
}


unpackTo(_o: EOObservation_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.obTime = this.obTime();
  _o.corrQuality = this.corrQuality();
  _o.idOnOrbit = this.idOnOrbit();
  _o.idSensor = this.idSensor();
  _o.idSkyImagery = this.idSkyImagery();
  _o.collectMethod = this.collectMethod();
  _o.satNo = this.satNo();
  _o.taskId = this.taskId();
  _o.transactionId = this.transactionId();
  _o.trackId = this.trackId();
  _o.obPosition = this.obPosition();
  _o.origObjectId = this.origObjectId();
  _o.origSensorId = this.origSensorId();
  _o.uct = this.uct();
  _o.azimuth = this.azimuth();
  _o.azimuthUnc = this.azimuthUnc();
  _o.azimuthBias = this.azimuthBias();
  _o.azimuthRate = this.azimuthRate();
  _o.elevation = this.elevation();
  _o.elevationUnc = this.elevationUnc();
  _o.elevationBias = this.elevationBias();
  _o.elevationRate = this.elevationRate();
  _o.range = this.range();
  _o.rangeUnc = this.rangeUnc();
  _o.rangeBias = this.rangeBias();
  _o.rangeRate = this.rangeRate();
  _o.rangeRateUnc = this.rangeRateUnc();
  _o.ra = this.ra();
  _o.raRate = this.raRate();
  _o.raUnc = this.raUnc();
  _o.raBias = this.raBias();
  _o.declination = this.declination();
  _o.declinationRate = this.declinationRate();
  _o.declinationUnc = this.declinationUnc();
  _o.declinationBias = this.declinationBias();
  _o.losx = this.losx();
  _o.losy = this.losy();
  _o.losz = this.losz();
  _o.losUnc = this.losUnc();
  _o.losxvel = this.losxvel();
  _o.losyvel = this.losyvel();
  _o.loszvel = this.loszvel();
  _o.senlat = this.senlat();
  _o.senlon = this.senlon();
  _o.senalt = this.senalt();
  _o.senx = this.senx();
  _o.seny = this.seny();
  _o.senz = this.senz();
  _o.senvelx = this.senvelx();
  _o.senvely = this.senvely();
  _o.senvelz = this.senvelz();
  _o.senQuat = this.bb!.createScalarList<string>(this.senQuat.bind(this), this.senQuatLength());
  _o.fovCount = this.fovCount();
  _o.expDuration = this.expDuration();
  _o.zeroptd = this.zeroptd();
  _o.netObjSig = this.netObjSig();
  _o.netObjSigUnc = this.netObjSigUnc();
  _o.mag = this.mag();
  _o.magUnc = this.magUnc();
  _o.magNormRange = this.magNormRange();
  _o.geolat = this.geolat();
  _o.geolon = this.geolon();
  _o.geoalt = this.geoalt();
  _o.georange = this.georange();
  _o.skyBkgrnd = this.skyBkgrnd();
  _o.primaryExtinction = this.primaryExtinction();
  _o.primaryExtinctionUnc = this.primaryExtinctionUnc();
  _o.solarPhaseAngle = this.solarPhaseAngle();
  _o.solarEqPhaseAngle = this.solarEqPhaseAngle();
  _o.solarDecAngle = this.solarDecAngle();
  _o.shutterDelay = this.shutterDelay();
  _o.timingBias = this.timingBias();
  _o.rawFileUri = this.rawFileUri();
  _o.intensity = this.intensity();
  _o.bgIntensity = this.bgIntensity();
  _o.descriptor = this.descriptor();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tagsLength());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.zeroPtdUnc = this.zeroPtdUnc();
  _o.eoobservationDetails = this.eoobservationDetails();
  _o.onOrbit = this.onOrbit();
  _o.referenceFrame = this.referenceFrame();
  _o.senReferenceFrame = this.senReferenceFrame();
  _o.umbra = this.umbra();
  _o.penumbra = this.penumbra();
  _o.origNetwork = this.origNetwork();
  _o.sourceDl = this.sourceDl();
  _o.type = this.type();
}
}

export class EOObservation_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public obTime: string|Uint8Array|null = null,
  public corrQuality: number = 0.0,
  public idOnOrbit: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public idSkyImagery: string|Uint8Array|null = null,
  public collectMethod: string|Uint8Array|null = null,
  public satNo: number = 0,
  public taskId: string|Uint8Array|null = null,
  public transactionId: string|Uint8Array|null = null,
  public trackId: string|Uint8Array|null = null,
  public obPosition: string|Uint8Array|null = null,
  public origObjectId: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public uct: boolean = false,
  public azimuth: number = 0.0,
  public azimuthUnc: number = 0.0,
  public azimuthBias: number = 0.0,
  public azimuthRate: number = 0.0,
  public elevation: number = 0.0,
  public elevationUnc: number = 0.0,
  public elevationBias: number = 0.0,
  public elevationRate: number = 0.0,
  public range: number = 0.0,
  public rangeUnc: number = 0.0,
  public rangeBias: number = 0.0,
  public rangeRate: number = 0.0,
  public rangeRateUnc: number = 0.0,
  public ra: number = 0.0,
  public raRate: number = 0.0,
  public raUnc: number = 0.0,
  public raBias: number = 0.0,
  public declination: number = 0.0,
  public declinationRate: number = 0.0,
  public declinationUnc: number = 0.0,
  public declinationBias: number = 0.0,
  public losx: number = 0.0,
  public losy: number = 0.0,
  public losz: number = 0.0,
  public losUnc: number = 0.0,
  public losxvel: number = 0.0,
  public losyvel: number = 0.0,
  public loszvel: number = 0.0,
  public senlat: number = 0.0,
  public senlon: number = 0.0,
  public senalt: number = 0.0,
  public senx: number = 0.0,
  public seny: number = 0.0,
  public senz: number = 0.0,
  public senvelx: number = 0.0,
  public senvely: number = 0.0,
  public senvelz: number = 0.0,
  public senQuat: (string)[] = [],
  public fovCount: number = 0,
  public expDuration: number = 0.0,
  public zeroptd: number = 0.0,
  public netObjSig: number = 0.0,
  public netObjSigUnc: number = 0.0,
  public mag: number = 0.0,
  public magUnc: number = 0.0,
  public magNormRange: number = 0.0,
  public geolat: number = 0.0,
  public geolon: number = 0.0,
  public geoalt: number = 0.0,
  public georange: number = 0.0,
  public skyBkgrnd: number = 0.0,
  public primaryExtinction: number = 0.0,
  public primaryExtinctionUnc: number = 0.0,
  public solarPhaseAngle: number = 0.0,
  public solarEqPhaseAngle: number = 0.0,
  public solarDecAngle: number = 0.0,
  public shutterDelay: number = 0.0,
  public timingBias: number = 0.0,
  public rawFileUri: string|Uint8Array|null = null,
  public intensity: number = 0.0,
  public bgIntensity: number = 0.0,
  public descriptor: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: EOObservation_Full_dataMode_Enum = EOObservation_Full_dataMode_Enum.REAL,
  public tags: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public zeroPtdUnc: number = 0.0,
  public eoobservationDetails: string|Uint8Array|null = null,
  public onOrbit: string|Uint8Array|null = null,
  public referenceFrame: EOObservation_Full_referenceFrame_Enum = EOObservation_Full_referenceFrame_Enum.J2000,
  public senReferenceFrame: EOObservation_Full_senReferenceFrame_Enum = EOObservation_Full_senReferenceFrame_Enum.J2000,
  public umbra: boolean = false,
  public penumbra: boolean = false,
  public origNetwork: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const obTime = (this.obTime !== null ? builder.createString(this.obTime!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const idSkyImagery = (this.idSkyImagery !== null ? builder.createString(this.idSkyImagery!) : 0);
  const collectMethod = (this.collectMethod !== null ? builder.createString(this.collectMethod!) : 0);
  const taskId = (this.taskId !== null ? builder.createString(this.taskId!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const trackId = (this.trackId !== null ? builder.createString(this.trackId!) : 0);
  const obPosition = (this.obPosition !== null ? builder.createString(this.obPosition!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const senQuat = EOObservation_Full.createSenQuatVector(builder, builder.createObjectOffsetList(this.senQuat));
  const rawFileUri = (this.rawFileUri !== null ? builder.createString(this.rawFileUri!) : 0);
  const descriptor = (this.descriptor !== null ? builder.createString(this.descriptor!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const tags = EOObservation_Full.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const eoobservationDetails = (this.eoobservationDetails !== null ? builder.createString(this.eoobservationDetails!) : 0);
  const onOrbit = (this.onOrbit !== null ? builder.createString(this.onOrbit!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);

  return EOObservation_Full.createEOObservation_Full(builder,
    id,
    classificationMarking,
    obTime,
    this.corrQuality,
    idOnOrbit,
    idSensor,
    idSkyImagery,
    collectMethod,
    this.satNo,
    taskId,
    transactionId,
    trackId,
    obPosition,
    origObjectId,
    origSensorId,
    this.uct,
    this.azimuth,
    this.azimuthUnc,
    this.azimuthBias,
    this.azimuthRate,
    this.elevation,
    this.elevationUnc,
    this.elevationBias,
    this.elevationRate,
    this.range,
    this.rangeUnc,
    this.rangeBias,
    this.rangeRate,
    this.rangeRateUnc,
    this.ra,
    this.raRate,
    this.raUnc,
    this.raBias,
    this.declination,
    this.declinationRate,
    this.declinationUnc,
    this.declinationBias,
    this.losx,
    this.losy,
    this.losz,
    this.losUnc,
    this.losxvel,
    this.losyvel,
    this.loszvel,
    this.senlat,
    this.senlon,
    this.senalt,
    this.senx,
    this.seny,
    this.senz,
    this.senvelx,
    this.senvely,
    this.senvelz,
    senQuat,
    this.fovCount,
    this.expDuration,
    this.zeroptd,
    this.netObjSig,
    this.netObjSigUnc,
    this.mag,
    this.magUnc,
    this.magNormRange,
    this.geolat,
    this.geolon,
    this.geoalt,
    this.georange,
    this.skyBkgrnd,
    this.primaryExtinction,
    this.primaryExtinctionUnc,
    this.solarPhaseAngle,
    this.solarEqPhaseAngle,
    this.solarDecAngle,
    this.shutterDelay,
    this.timingBias,
    rawFileUri,
    this.intensity,
    this.bgIntensity,
    descriptor,
    source,
    origin,
    this.dataMode,
    tags,
    createdAt,
    createdBy,
    this.zeroPtdUnc,
    eoobservationDetails,
    onOrbit,
    this.referenceFrame,
    this.senReferenceFrame,
    this.umbra,
    this.penumbra,
    origNetwork,
    sourceDl,
    type
  );
}
}
