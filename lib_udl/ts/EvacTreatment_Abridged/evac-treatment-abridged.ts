// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Treatment information.
 */
export class EvacTreatment_Abridged implements flatbuffers.IUnpackableObject<EvacTreatment_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EvacTreatment_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEvacTreatment_Abridged(bb:flatbuffers.ByteBuffer, obj?:EvacTreatment_Abridged):EvacTreatment_Abridged {
  return (obj || new EvacTreatment_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEvacTreatment_Abridged(bb:flatbuffers.ByteBuffer, obj?:EvacTreatment_Abridged):EvacTreatment_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EvacTreatment_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EVAC');
}

/**
 * Type of treatment administered or to be administered.  Intended as, but not constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED, AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC, BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).
 * Example: /// Example: BREATHING CHEST TUBE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Body part location or body part treated or to be treated.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
 * Example: /// Example: CHEST
 * Constraints: Minimum length = 0, Maximum length = 32
 */
bodyPart():string|null
bodyPart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bodyPart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Datetime of the treatment in ISO 8601 UTC format.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
time():string|null
time(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
time(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional comments on the patient's treatment information.
 * Example: /// Example: Comments on the treatment info.
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
comments():string|null
comments(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
comments(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEvacTreatment_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addBodyPart(builder:flatbuffers.Builder, bodyPartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, bodyPartOffset, 0);
}

static addTime(builder:flatbuffers.Builder, timeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, timeOffset, 0);
}

static addComments(builder:flatbuffers.Builder, commentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, commentsOffset, 0);
}

static endEvacTreatment_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEvacTreatment_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC');
}

static finishSizePrefixedEvacTreatment_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC', true);
}

static createEvacTreatment_Abridged(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, bodyPartOffset:flatbuffers.Offset, timeOffset:flatbuffers.Offset, commentsOffset:flatbuffers.Offset):flatbuffers.Offset {
  EvacTreatment_Abridged.startEvacTreatment_Abridged(builder);
  EvacTreatment_Abridged.addType(builder, typeOffset);
  EvacTreatment_Abridged.addBodyPart(builder, bodyPartOffset);
  EvacTreatment_Abridged.addTime(builder, timeOffset);
  EvacTreatment_Abridged.addComments(builder, commentsOffset);
  return EvacTreatment_Abridged.endEvacTreatment_Abridged(builder);
}

unpack(): EvacTreatment_AbridgedT {
  return new EvacTreatment_AbridgedT(
    this.type(),
    this.bodyPart(),
    this.time(),
    this.comments()
  );
}


unpackTo(_o: EvacTreatment_AbridgedT): void {
  _o.type = this.type();
  _o.bodyPart = this.bodyPart();
  _o.time = this.time();
  _o.comments = this.comments();
}
}

export class EvacTreatment_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public type: string|Uint8Array|null = null,
  public bodyPart: string|Uint8Array|null = null,
  public time: string|Uint8Array|null = null,
  public comments: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const bodyPart = (this.bodyPart !== null ? builder.createString(this.bodyPart!) : 0);
  const time = (this.time !== null ? builder.createString(this.time!) : 0);
  const comments = (this.comments !== null ? builder.createString(this.comments!) : 0);

  return EvacTreatment_Abridged.createEvacTreatment_Abridged(builder,
    type,
    bodyPart,
    time,
    comments
  );
}
}
