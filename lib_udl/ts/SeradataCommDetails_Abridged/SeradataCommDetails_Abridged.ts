// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SeradataCommDetails_Abridged_dataMode_Enum } from './SeradataCommDetails_Abridged_dataMode_Enum.js';


/**
 * /// Seradata-compiled information on communications payloads.
 */
export class SeradataCommDetails_Abridged implements flatbuffers.IUnpackableObject<SeradataCommDetails_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SeradataCommDetails_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSeradataCommDetails_Abridged(bb:flatbuffers.ByteBuffer, obj?:SeradataCommDetails_Abridged):SeradataCommDetails_Abridged {
  return (obj || new SeradataCommDetails_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSeradataCommDetails_Abridged(bb:flatbuffers.ByteBuffer, obj?:SeradataCommDetails_Abridged):SeradataCommDetails_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SeradataCommDetails_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SERA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SERADATACOMMDETAILS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID of the parent Comm record.
 * Example: /// Example: idComm
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idComm():string|null
idComm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idComm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
 * Example: /// Example: spacecraftId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
spacecraftId():string|null
spacecraftId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spacecraftId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
 * Example: /// Example: X
 * Constraints: Minimum length = 0, Maximum length = 5
 */
band():string|null
band(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
band(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Solid state power amplifier, in Watts.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
solidStatePowerAmp():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm travelingWaveTubeAmplifier in Watts.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
travelingWaveTubeAmplifier():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm gatewayUplinkFrom in Ghz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
gatewayUplinkFrom():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm gatewayUplinkTo in Ghz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
gatewayUplinkTo():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm gatewayDownlinkFrom in Ghz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
gatewayDownlinkFrom():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm gatewayDownlinkTo in Ghz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
gatewayDownlinkTo():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm polarization.
 * Example: /// Example: polarization
 * Constraints: Minimum length = 0, Maximum length = 64
 */
polarization():string|null
polarization(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
polarization(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Effective isotropic radiated power in dB.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
eirp():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm bandwidth in Mhz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
bandwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm numOperationalTransponders.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numOperationalTransponders():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Comm numSpareTransponders.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
numSpareTransponders():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Comm hostedForCompanyOrgId.
 * Example: /// Example: hostedForCompanyOrgId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
hostedForCompanyOrgId():string|null
hostedForCompanyOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hostedForCompanyOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Comm manufacturerOrgId.
 * Example: /// Example: manufacturerOrgId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Comm tradeLeaseOrgId.
 * Example: /// Example: tradeLeaseOrgId
 * Constraints: Minimum length = 0, Maximum length = 36
 */
tradeLeaseOrgId():string|null
tradeLeaseOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tradeLeaseOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Comm num36MhzEquivalentTransponders.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
num36MhzEquivalentTransponders():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Comm htsNumUserSpotBeams.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
htsNumUserSpotBeams():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Comm htsUserDownlinkBandwidthPerBeam in Mhz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
htsUserDownlinkBandwidthPerBeam():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm htsUserUplinkBandwidthPerBeam in Mhz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
htsUserUplinkBandwidthPerBeam():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
estHtsTotalUserDownlinkBandwidthPerBeam():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
estHtsTotalUserUplinkBandwidthPerBeam():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm estimated HtsTotalCapacity in Gbps.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
estHtsTotalCapacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm userDownlinkFrom in Ghz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
userDownlinkFrom():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm userDownlinkTo in Ghz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
userDownlinkTo():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm userUplinkFrom in Ghz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
userUplinkFrom():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Comm userUplinkTo in Ghz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
userUplinkTo():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Payload notes.
 * Example: /// Example: Sample Notes
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
payloadNotes():string|null
payloadNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
payloadNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SeradataCommDetails_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SeradataCommDetails_Abridged_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSeradataCommDetails_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(37);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdComm(builder:flatbuffers.Builder, idCommOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idCommOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addSpacecraftId(builder:flatbuffers.Builder, spacecraftIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, spacecraftIdOffset, 0);
}

static addBand(builder:flatbuffers.Builder, bandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, bandOffset, 0);
}

static addSolidStatePowerAmp(builder:flatbuffers.Builder, solidStatePowerAmp:number) {
  builder.addFieldFloat64(5, solidStatePowerAmp, 0.0);
}

static addTravelingWaveTubeAmplifier(builder:flatbuffers.Builder, travelingWaveTubeAmplifier:number) {
  builder.addFieldFloat64(6, travelingWaveTubeAmplifier, 0.0);
}

static addGatewayUplinkFrom(builder:flatbuffers.Builder, gatewayUplinkFrom:number) {
  builder.addFieldFloat64(7, gatewayUplinkFrom, 0.0);
}

static addGatewayUplinkTo(builder:flatbuffers.Builder, gatewayUplinkTo:number) {
  builder.addFieldFloat64(8, gatewayUplinkTo, 0.0);
}

static addGatewayDownlinkFrom(builder:flatbuffers.Builder, gatewayDownlinkFrom:number) {
  builder.addFieldFloat64(9, gatewayDownlinkFrom, 0.0);
}

static addGatewayDownlinkTo(builder:flatbuffers.Builder, gatewayDownlinkTo:number) {
  builder.addFieldFloat64(10, gatewayDownlinkTo, 0.0);
}

static addPolarization(builder:flatbuffers.Builder, polarizationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, polarizationOffset, 0);
}

static addEirp(builder:flatbuffers.Builder, eirp:number) {
  builder.addFieldFloat64(12, eirp, 0.0);
}

static addBandwidth(builder:flatbuffers.Builder, bandwidth:number) {
  builder.addFieldFloat64(13, bandwidth, 0.0);
}

static addNumOperationalTransponders(builder:flatbuffers.Builder, numOperationalTransponders:number) {
  builder.addFieldInt32(14, numOperationalTransponders, 0);
}

static addNumSpareTransponders(builder:flatbuffers.Builder, numSpareTransponders:number) {
  builder.addFieldInt32(15, numSpareTransponders, 0);
}

static addHostedForCompanyOrgId(builder:flatbuffers.Builder, hostedForCompanyOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, hostedForCompanyOrgIdOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, manufacturerOrgIdOffset, 0);
}

static addTradeLeaseOrgId(builder:flatbuffers.Builder, tradeLeaseOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, tradeLeaseOrgIdOffset, 0);
}

static addNum36MhzEquivalentTransponders(builder:flatbuffers.Builder, num36MhzEquivalentTransponders:number) {
  builder.addFieldInt32(19, num36MhzEquivalentTransponders, 0);
}

static addHtsNumUserSpotBeams(builder:flatbuffers.Builder, htsNumUserSpotBeams:number) {
  builder.addFieldInt32(20, htsNumUserSpotBeams, 0);
}

static addHtsUserDownlinkBandwidthPerBeam(builder:flatbuffers.Builder, htsUserDownlinkBandwidthPerBeam:number) {
  builder.addFieldFloat64(21, htsUserDownlinkBandwidthPerBeam, 0.0);
}

static addHtsUserUplinkBandwidthPerBeam(builder:flatbuffers.Builder, htsUserUplinkBandwidthPerBeam:number) {
  builder.addFieldFloat64(22, htsUserUplinkBandwidthPerBeam, 0.0);
}

static addEstHtsTotalUserDownlinkBandwidthPerBeam(builder:flatbuffers.Builder, estHtsTotalUserDownlinkBandwidthPerBeam:number) {
  builder.addFieldFloat64(23, estHtsTotalUserDownlinkBandwidthPerBeam, 0.0);
}

static addEstHtsTotalUserUplinkBandwidthPerBeam(builder:flatbuffers.Builder, estHtsTotalUserUplinkBandwidthPerBeam:number) {
  builder.addFieldFloat64(24, estHtsTotalUserUplinkBandwidthPerBeam, 0.0);
}

static addEstHtsTotalCapacity(builder:flatbuffers.Builder, estHtsTotalCapacity:number) {
  builder.addFieldFloat64(25, estHtsTotalCapacity, 0.0);
}

static addUserDownlinkFrom(builder:flatbuffers.Builder, userDownlinkFrom:number) {
  builder.addFieldFloat64(26, userDownlinkFrom, 0.0);
}

static addUserDownlinkTo(builder:flatbuffers.Builder, userDownlinkTo:number) {
  builder.addFieldFloat64(27, userDownlinkTo, 0.0);
}

static addUserUplinkFrom(builder:flatbuffers.Builder, userUplinkFrom:number) {
  builder.addFieldFloat64(28, userUplinkFrom, 0.0);
}

static addUserUplinkTo(builder:flatbuffers.Builder, userUplinkTo:number) {
  builder.addFieldFloat64(29, userUplinkTo, 0.0);
}

static addPayloadNotes(builder:flatbuffers.Builder, payloadNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, payloadNotesOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SeradataCommDetails_Abridged_dataMode_Enum) {
  builder.addFieldInt8(34, dataMode, SeradataCommDetails_Abridged_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, createdByOffset, 0);
}

static endSeradataCommDetails_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSeradataCommDetails_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SERA');
}

static finishSizePrefixedSeradataCommDetails_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SERA', true);
}

static createSeradataCommDetails_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idCommOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, spacecraftIdOffset:flatbuffers.Offset, bandOffset:flatbuffers.Offset, solidStatePowerAmp:number, travelingWaveTubeAmplifier:number, gatewayUplinkFrom:number, gatewayUplinkTo:number, gatewayDownlinkFrom:number, gatewayDownlinkTo:number, polarizationOffset:flatbuffers.Offset, eirp:number, bandwidth:number, numOperationalTransponders:number, numSpareTransponders:number, hostedForCompanyOrgIdOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, tradeLeaseOrgIdOffset:flatbuffers.Offset, num36MhzEquivalentTransponders:number, htsNumUserSpotBeams:number, htsUserDownlinkBandwidthPerBeam:number, htsUserUplinkBandwidthPerBeam:number, estHtsTotalUserDownlinkBandwidthPerBeam:number, estHtsTotalUserUplinkBandwidthPerBeam:number, estHtsTotalCapacity:number, userDownlinkFrom:number, userDownlinkTo:number, userUplinkFrom:number, userUplinkTo:number, payloadNotesOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:SeradataCommDetails_Abridged_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset):flatbuffers.Offset {
  SeradataCommDetails_Abridged.startSeradataCommDetails_Abridged(builder);
  SeradataCommDetails_Abridged.addId(builder, idOffset);
  SeradataCommDetails_Abridged.addIdComm(builder, idCommOffset);
  SeradataCommDetails_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  SeradataCommDetails_Abridged.addSpacecraftId(builder, spacecraftIdOffset);
  SeradataCommDetails_Abridged.addBand(builder, bandOffset);
  SeradataCommDetails_Abridged.addSolidStatePowerAmp(builder, solidStatePowerAmp);
  SeradataCommDetails_Abridged.addTravelingWaveTubeAmplifier(builder, travelingWaveTubeAmplifier);
  SeradataCommDetails_Abridged.addGatewayUplinkFrom(builder, gatewayUplinkFrom);
  SeradataCommDetails_Abridged.addGatewayUplinkTo(builder, gatewayUplinkTo);
  SeradataCommDetails_Abridged.addGatewayDownlinkFrom(builder, gatewayDownlinkFrom);
  SeradataCommDetails_Abridged.addGatewayDownlinkTo(builder, gatewayDownlinkTo);
  SeradataCommDetails_Abridged.addPolarization(builder, polarizationOffset);
  SeradataCommDetails_Abridged.addEirp(builder, eirp);
  SeradataCommDetails_Abridged.addBandwidth(builder, bandwidth);
  SeradataCommDetails_Abridged.addNumOperationalTransponders(builder, numOperationalTransponders);
  SeradataCommDetails_Abridged.addNumSpareTransponders(builder, numSpareTransponders);
  SeradataCommDetails_Abridged.addHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset);
  SeradataCommDetails_Abridged.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  SeradataCommDetails_Abridged.addTradeLeaseOrgId(builder, tradeLeaseOrgIdOffset);
  SeradataCommDetails_Abridged.addNum36MhzEquivalentTransponders(builder, num36MhzEquivalentTransponders);
  SeradataCommDetails_Abridged.addHtsNumUserSpotBeams(builder, htsNumUserSpotBeams);
  SeradataCommDetails_Abridged.addHtsUserDownlinkBandwidthPerBeam(builder, htsUserDownlinkBandwidthPerBeam);
  SeradataCommDetails_Abridged.addHtsUserUplinkBandwidthPerBeam(builder, htsUserUplinkBandwidthPerBeam);
  SeradataCommDetails_Abridged.addEstHtsTotalUserDownlinkBandwidthPerBeam(builder, estHtsTotalUserDownlinkBandwidthPerBeam);
  SeradataCommDetails_Abridged.addEstHtsTotalUserUplinkBandwidthPerBeam(builder, estHtsTotalUserUplinkBandwidthPerBeam);
  SeradataCommDetails_Abridged.addEstHtsTotalCapacity(builder, estHtsTotalCapacity);
  SeradataCommDetails_Abridged.addUserDownlinkFrom(builder, userDownlinkFrom);
  SeradataCommDetails_Abridged.addUserDownlinkTo(builder, userDownlinkTo);
  SeradataCommDetails_Abridged.addUserUplinkFrom(builder, userUplinkFrom);
  SeradataCommDetails_Abridged.addUserUplinkTo(builder, userUplinkTo);
  SeradataCommDetails_Abridged.addPayloadNotes(builder, payloadNotesOffset);
  SeradataCommDetails_Abridged.addSource(builder, sourceOffset);
  SeradataCommDetails_Abridged.addOrigin(builder, originOffset);
  SeradataCommDetails_Abridged.addOrigNetwork(builder, origNetworkOffset);
  SeradataCommDetails_Abridged.addDataMode(builder, dataMode);
  SeradataCommDetails_Abridged.addCreatedAt(builder, createdAtOffset);
  SeradataCommDetails_Abridged.addCreatedBy(builder, createdByOffset);
  return SeradataCommDetails_Abridged.endSeradataCommDetails_Abridged(builder);
}

unpack(): SeradataCommDetails_AbridgedT {
  return new SeradataCommDetails_AbridgedT(
    this.id(),
    this.idComm(),
    this.classificationMarking(),
    this.spacecraftId(),
    this.band(),
    this.solidStatePowerAmp(),
    this.travelingWaveTubeAmplifier(),
    this.gatewayUplinkFrom(),
    this.gatewayUplinkTo(),
    this.gatewayDownlinkFrom(),
    this.gatewayDownlinkTo(),
    this.polarization(),
    this.eirp(),
    this.bandwidth(),
    this.numOperationalTransponders(),
    this.numSpareTransponders(),
    this.hostedForCompanyOrgId(),
    this.manufacturerOrgId(),
    this.tradeLeaseOrgId(),
    this.num36MhzEquivalentTransponders(),
    this.htsNumUserSpotBeams(),
    this.htsUserDownlinkBandwidthPerBeam(),
    this.htsUserUplinkBandwidthPerBeam(),
    this.estHtsTotalUserDownlinkBandwidthPerBeam(),
    this.estHtsTotalUserUplinkBandwidthPerBeam(),
    this.estHtsTotalCapacity(),
    this.userDownlinkFrom(),
    this.userDownlinkTo(),
    this.userUplinkFrom(),
    this.userUplinkTo(),
    this.payloadNotes(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy()
  );
}


unpackTo(_o: SeradataCommDetails_AbridgedT): void {
  _o.id = this.id();
  _o.idComm = this.idComm();
  _o.classificationMarking = this.classificationMarking();
  _o.spacecraftId = this.spacecraftId();
  _o.band = this.band();
  _o.solidStatePowerAmp = this.solidStatePowerAmp();
  _o.travelingWaveTubeAmplifier = this.travelingWaveTubeAmplifier();
  _o.gatewayUplinkFrom = this.gatewayUplinkFrom();
  _o.gatewayUplinkTo = this.gatewayUplinkTo();
  _o.gatewayDownlinkFrom = this.gatewayDownlinkFrom();
  _o.gatewayDownlinkTo = this.gatewayDownlinkTo();
  _o.polarization = this.polarization();
  _o.eirp = this.eirp();
  _o.bandwidth = this.bandwidth();
  _o.numOperationalTransponders = this.numOperationalTransponders();
  _o.numSpareTransponders = this.numSpareTransponders();
  _o.hostedForCompanyOrgId = this.hostedForCompanyOrgId();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.tradeLeaseOrgId = this.tradeLeaseOrgId();
  _o.num36MhzEquivalentTransponders = this.num36MhzEquivalentTransponders();
  _o.htsNumUserSpotBeams = this.htsNumUserSpotBeams();
  _o.htsUserDownlinkBandwidthPerBeam = this.htsUserDownlinkBandwidthPerBeam();
  _o.htsUserUplinkBandwidthPerBeam = this.htsUserUplinkBandwidthPerBeam();
  _o.estHtsTotalUserDownlinkBandwidthPerBeam = this.estHtsTotalUserDownlinkBandwidthPerBeam();
  _o.estHtsTotalUserUplinkBandwidthPerBeam = this.estHtsTotalUserUplinkBandwidthPerBeam();
  _o.estHtsTotalCapacity = this.estHtsTotalCapacity();
  _o.userDownlinkFrom = this.userDownlinkFrom();
  _o.userDownlinkTo = this.userDownlinkTo();
  _o.userUplinkFrom = this.userUplinkFrom();
  _o.userUplinkTo = this.userUplinkTo();
  _o.payloadNotes = this.payloadNotes();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
}
}

export class SeradataCommDetails_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idComm: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public spacecraftId: string|Uint8Array|null = null,
  public band: string|Uint8Array|null = null,
  public solidStatePowerAmp: number = 0.0,
  public travelingWaveTubeAmplifier: number = 0.0,
  public gatewayUplinkFrom: number = 0.0,
  public gatewayUplinkTo: number = 0.0,
  public gatewayDownlinkFrom: number = 0.0,
  public gatewayDownlinkTo: number = 0.0,
  public polarization: string|Uint8Array|null = null,
  public eirp: number = 0.0,
  public bandwidth: number = 0.0,
  public numOperationalTransponders: number = 0,
  public numSpareTransponders: number = 0,
  public hostedForCompanyOrgId: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public tradeLeaseOrgId: string|Uint8Array|null = null,
  public num36MhzEquivalentTransponders: number = 0,
  public htsNumUserSpotBeams: number = 0,
  public htsUserDownlinkBandwidthPerBeam: number = 0.0,
  public htsUserUplinkBandwidthPerBeam: number = 0.0,
  public estHtsTotalUserDownlinkBandwidthPerBeam: number = 0.0,
  public estHtsTotalUserUplinkBandwidthPerBeam: number = 0.0,
  public estHtsTotalCapacity: number = 0.0,
  public userDownlinkFrom: number = 0.0,
  public userDownlinkTo: number = 0.0,
  public userUplinkFrom: number = 0.0,
  public userUplinkTo: number = 0.0,
  public payloadNotes: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: SeradataCommDetails_Abridged_dataMode_Enum = SeradataCommDetails_Abridged_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idComm = (this.idComm !== null ? builder.createString(this.idComm!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const spacecraftId = (this.spacecraftId !== null ? builder.createString(this.spacecraftId!) : 0);
  const band = (this.band !== null ? builder.createString(this.band!) : 0);
  const polarization = (this.polarization !== null ? builder.createString(this.polarization!) : 0);
  const hostedForCompanyOrgId = (this.hostedForCompanyOrgId !== null ? builder.createString(this.hostedForCompanyOrgId!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const tradeLeaseOrgId = (this.tradeLeaseOrgId !== null ? builder.createString(this.tradeLeaseOrgId!) : 0);
  const payloadNotes = (this.payloadNotes !== null ? builder.createString(this.payloadNotes!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);

  return SeradataCommDetails_Abridged.createSeradataCommDetails_Abridged(builder,
    id,
    idComm,
    classificationMarking,
    spacecraftId,
    band,
    this.solidStatePowerAmp,
    this.travelingWaveTubeAmplifier,
    this.gatewayUplinkFrom,
    this.gatewayUplinkTo,
    this.gatewayDownlinkFrom,
    this.gatewayDownlinkTo,
    polarization,
    this.eirp,
    this.bandwidth,
    this.numOperationalTransponders,
    this.numSpareTransponders,
    hostedForCompanyOrgId,
    manufacturerOrgId,
    tradeLeaseOrgId,
    this.num36MhzEquivalentTransponders,
    this.htsNumUserSpotBeams,
    this.htsUserDownlinkBandwidthPerBeam,
    this.htsUserUplinkBandwidthPerBeam,
    this.estHtsTotalUserDownlinkBandwidthPerBeam,
    this.estHtsTotalUserUplinkBandwidthPerBeam,
    this.estHtsTotalCapacity,
    this.userDownlinkFrom,
    this.userDownlinkTo,
    this.userUplinkFrom,
    this.userUplinkTo,
    payloadNotes,
    source,
    origin,
    origNetwork,
    this.dataMode,
    createdAt,
    createdBy
  );
}
}
