// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
 */
export class MtiMission_Ingest implements flatbuffers.IUnpackableObject<MtiMission_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MtiMission_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMtiMission_Ingest(bb:flatbuffers.ByteBuffer, obj?:MtiMission_Ingest):MtiMission_Ingest {
  return (obj || new MtiMission_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMtiMission_Ingest(bb:flatbuffers.ByteBuffer, obj?:MtiMission_Ingest):MtiMission_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MtiMission_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MTIM');
}

/**
 * The mission plan id.
 * Example: /// Example: M1-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
m1():string|null
m1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identification of the flight plan.
 * Example: /// Example: M2-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
m2():string|null
m2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Platform type that originated the data.
 * Example: /// Example: PLATFORM
 * Constraints: Minimum length = 0, Maximum length = 64
 */
m3():string|null
m3(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m3(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identification of the platform variant, modifications, etc.
 * Example: /// Example: IDENT
 * Constraints: Minimum length = 0, Maximum length = 16
 */
m4():string|null
m4(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
m4(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mission origination date.
 * Example: /// Example: 2018-01-01
 * Constraints: No constraints specified.
 */
msnRefTs():string|null
msnRefTs(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msnRefTs(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startMtiMission_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addM1(builder:flatbuffers.Builder, m1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(0, m1Offset, 0);
}

static addM2(builder:flatbuffers.Builder, m2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(1, m2Offset, 0);
}

static addM3(builder:flatbuffers.Builder, m3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(2, m3Offset, 0);
}

static addM4(builder:flatbuffers.Builder, m4Offset:flatbuffers.Offset) {
  builder.addFieldOffset(3, m4Offset, 0);
}

static addMsnRefTs(builder:flatbuffers.Builder, msnRefTsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, msnRefTsOffset, 0);
}

static endMtiMission_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMtiMission_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIM');
}

static finishSizePrefixedMtiMission_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIM', true);
}

static createMtiMission_Ingest(builder:flatbuffers.Builder, m1Offset:flatbuffers.Offset, m2Offset:flatbuffers.Offset, m3Offset:flatbuffers.Offset, m4Offset:flatbuffers.Offset, msnRefTsOffset:flatbuffers.Offset):flatbuffers.Offset {
  MtiMission_Ingest.startMtiMission_Ingest(builder);
  MtiMission_Ingest.addM1(builder, m1Offset);
  MtiMission_Ingest.addM2(builder, m2Offset);
  MtiMission_Ingest.addM3(builder, m3Offset);
  MtiMission_Ingest.addM4(builder, m4Offset);
  MtiMission_Ingest.addMsnRefTs(builder, msnRefTsOffset);
  return MtiMission_Ingest.endMtiMission_Ingest(builder);
}

unpack(): MtiMission_IngestT {
  return new MtiMission_IngestT(
    this.m1(),
    this.m2(),
    this.m3(),
    this.m4(),
    this.msnRefTs()
  );
}


unpackTo(_o: MtiMission_IngestT): void {
  _o.m1 = this.m1();
  _o.m2 = this.m2();
  _o.m3 = this.m3();
  _o.m4 = this.m4();
  _o.msnRefTs = this.msnRefTs();
}
}

export class MtiMission_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public m1: string|Uint8Array|null = null,
  public m2: string|Uint8Array|null = null,
  public m3: string|Uint8Array|null = null,
  public m4: string|Uint8Array|null = null,
  public msnRefTs: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const m1 = (this.m1 !== null ? builder.createString(this.m1!) : 0);
  const m2 = (this.m2 !== null ? builder.createString(this.m2!) : 0);
  const m3 = (this.m3 !== null ? builder.createString(this.m3!) : 0);
  const m4 = (this.m4 !== null ? builder.createString(this.m4!) : 0);
  const msnRefTs = (this.msnRefTs !== null ? builder.createString(this.msnRefTs!) : 0);

  return MtiMission_Ingest.createMtiMission_Ingest(builder,
    m1,
    m2,
    m3,
    m4,
    msnRefTs
  );
}
}
