// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
 */
export class GenText_Ingest implements flatbuffers.IUnpackableObject<GenText_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GenText_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGenText_Ingest(bb:flatbuffers.ByteBuffer, obj?:GenText_Ingest):GenText_Ingest {
  return (obj || new GenText_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGenText_Ingest(bb:flatbuffers.ByteBuffer, obj?:GenText_Ingest):GenText_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GenText_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('GENT');
}

/**
 * The indicator for the general text block. Examples include "OPENING REMARKS" and "GENERAL SPINS INFORMATION".
 * Example: /// Example: OPENING REMARKS
 * Constraints: Minimum length = 0, Maximum length = 64
 */
textInd():string|null
textInd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
textInd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The free text that describes the information specific to the text indicator.
 * Example: /// Example: FREE-TEXT
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startGenText_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTextInd(builder:flatbuffers.Builder, textIndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, textIndOffset, 0);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, textOffset, 0);
}

static endGenText_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishGenText_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'GENT');
}

static finishSizePrefixedGenText_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'GENT', true);
}

static createGenText_Ingest(builder:flatbuffers.Builder, textIndOffset:flatbuffers.Offset, textOffset:flatbuffers.Offset):flatbuffers.Offset {
  GenText_Ingest.startGenText_Ingest(builder);
  GenText_Ingest.addTextInd(builder, textIndOffset);
  GenText_Ingest.addText(builder, textOffset);
  return GenText_Ingest.endGenText_Ingest(builder);
}

unpack(): GenText_IngestT {
  return new GenText_IngestT(
    this.textInd(),
    this.text()
  );
}


unpackTo(_o: GenText_IngestT): void {
  _o.textInd = this.textInd();
  _o.text = this.text();
}
}

export class GenText_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public textInd: string|Uint8Array|null = null,
  public text: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const textInd = (this.textInd !== null ? builder.createString(this.textInd!) : 0);
  const text = (this.text !== null ? builder.createString(this.text!) : 0);

  return GenText_Ingest.createGenText_Ingest(builder,
    textInd,
    text
  );
}
}
