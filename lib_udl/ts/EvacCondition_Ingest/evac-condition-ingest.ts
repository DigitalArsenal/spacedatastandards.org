// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// The group path from transmitter to receiver.
 */
export class EvacCondition_Ingest implements flatbuffers.IUnpackableObject<EvacCondition_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EvacCondition_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEvacCondition_Ingest(bb:flatbuffers.ByteBuffer, obj?:EvacCondition_Ingest):EvacCondition_Ingest {
  return (obj || new EvacCondition_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEvacCondition_Ingest(bb:flatbuffers.ByteBuffer, obj?:EvacCondition_Ingest):EvacCondition_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EvacCondition_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EVAC');
}

/**
 * Health condition assessment.  Intended as, but not constrained to, K07.1 Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM, ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU UNRESPONSIVE, etc.).
 * Example: /// Example: ACTIVITY LOW
 * Constraints: Minimum length = 0, Maximum length = 64
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Body part location or body part referenced in condition.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
 * Example: /// Example: ANKLE LEFT FRONT
 * Constraints: Minimum length = 0, Maximum length = 32
 */
bodyPart():string|null
bodyPart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bodyPart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Datetime of the condition diagnosis in ISO 8601 UTC datetime format.
 * Example: /// Example: 2021-10-15T16:00:00.123Z
 * Constraints: No constraints specified.
 */
time():string|null
time(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
time(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional comments on the patient's condition.
 * Example: /// Example: Comments on the patient's condition.
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
comments():string|null
comments(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
comments(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEvacCondition_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addBodyPart(builder:flatbuffers.Builder, bodyPartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, bodyPartOffset, 0);
}

static addTime(builder:flatbuffers.Builder, timeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, timeOffset, 0);
}

static addComments(builder:flatbuffers.Builder, commentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, commentsOffset, 0);
}

static endEvacCondition_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEvacCondition_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC');
}

static finishSizePrefixedEvacCondition_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC', true);
}

static createEvacCondition_Ingest(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, bodyPartOffset:flatbuffers.Offset, timeOffset:flatbuffers.Offset, commentsOffset:flatbuffers.Offset):flatbuffers.Offset {
  EvacCondition_Ingest.startEvacCondition_Ingest(builder);
  EvacCondition_Ingest.addType(builder, typeOffset);
  EvacCondition_Ingest.addBodyPart(builder, bodyPartOffset);
  EvacCondition_Ingest.addTime(builder, timeOffset);
  EvacCondition_Ingest.addComments(builder, commentsOffset);
  return EvacCondition_Ingest.endEvacCondition_Ingest(builder);
}

unpack(): EvacCondition_IngestT {
  return new EvacCondition_IngestT(
    this.type(),
    this.bodyPart(),
    this.time(),
    this.comments()
  );
}


unpackTo(_o: EvacCondition_IngestT): void {
  _o.type = this.type();
  _o.bodyPart = this.bodyPart();
  _o.time = this.time();
  _o.comments = this.comments();
}
}

export class EvacCondition_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public type: string|Uint8Array|null = null,
  public bodyPart: string|Uint8Array|null = null,
  public time: string|Uint8Array|null = null,
  public comments: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const bodyPart = (this.bodyPart !== null ? builder.createString(this.bodyPart!) : 0);
  const time = (this.time !== null ? builder.createString(this.time!) : 0);
  const comments = (this.comments !== null ? builder.createString(this.comments!) : 0);

  return EvacCondition_Ingest.createEvacCondition_Ingest(builder,
    type,
    bodyPart,
    time,
    comments
  );
}
}
