// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SiteStatus_Abridged_cat_Enum } from './SiteStatus_Abridged_cat_Enum.js';
import { SiteStatus_Abridged_cpcon_Enum } from './SiteStatus_Abridged_cpcon_Enum.js';
import { SiteStatus_Abridged_dataMode_Enum } from './SiteStatus_Abridged_dataMode_Enum.js';
import { SiteStatus_Abridged_eoc_Enum } from './SiteStatus_Abridged_eoc_Enum.js';
import { SiteStatus_Abridged_fpcon_Enum } from './SiteStatus_Abridged_fpcon_Enum.js';
import { SiteStatus_Abridged_hpcon_Enum } from './SiteStatus_Abridged_hpcon_Enum.js';
import { SiteStatus_Abridged_instStatus_Enum } from './SiteStatus_Abridged_instStatus_Enum.js';


/**
 * /// No description available.
 */
export class SiteStatus_Abridged implements flatbuffers.IUnpackableObject<SiteStatus_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SiteStatus_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSiteStatus_Abridged(bb:flatbuffers.ByteBuffer, obj?:SiteStatus_Abridged):SiteStatus_Abridged {
  return (obj || new SiteStatus_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSiteStatus_Abridged(bb:flatbuffers.ByteBuffer, obj?:SiteStatus_Abridged):SiteStatus_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SiteStatus_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SITE');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SITESTATUS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The ID of the site, if this status is associated with a fixed site or platform.
 * Example: /// Example: 41e3e554-9790-40b9-bd7b-f30d864dcad8
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idSite():string|null
idSite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
 * Example: /// Example: ADOC
 * Constraints: Minimum length = 0, Maximum length = 36
 */
siteType():string|null
siteType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
siteType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate Identifier for a mobile or transportable platform provided by source.
 * Example: /// Example: MOBILEALT-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
mobileAltId():string|null
mobileAltId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mobileAltId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The POI (point of interest) ID related to this platform, if available.
 * Example: /// Example: d4a91864-6140-4b8d-67cd-45421c75f696
 * Constraints: Minimum length = 0, Maximum length = 36
 */
poiid():string|null
poiid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
poiid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The track ID related to this platform (if mobile or transportable), if available.
 * Example: /// Example: PCM4923-1656174732-4-1-257
 * Constraints: Minimum length = 0, Maximum length = 36
 */
trackId():string|null
trackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Link-16 specific reference track number.
 * Example: /// Example: TrkNm
 * Constraints: Minimum length = 0, Maximum length = 5
 */
trackRefL16():string|null
trackRefL16(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trackRefL16(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).
 * Example: /// Example: Fully Operational
 * Constraints: Minimum length = 0, Maximum length = 24
 */
opsCapability():string|null
opsCapability(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
opsCapability(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The status of the installation.
 * FMC - Fully Mission Capable
 *  PMC - Partially Mission Capable
 * NMC - Non Mission Capable
 * UNK - Unknown.
 * Example: /// Example: PMC
 * Constraints: Minimum length = 0, Maximum length = 3
 */
instStatus():SiteStatus_Abridged_instStatus_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SiteStatus_Abridged_instStatus_Enum.FMC;
}

/**
 * Force Protection Condition (FPCON).
 * NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.
 * ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.
 * BRAVO - Applies when an increased or predictable threat of terrorist activity exists.
 * CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.
 * DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
 * Example: /// Example: BRAVO
 * Constraints: Minimum length = 0, Maximum length = 7
 */
fpcon():SiteStatus_Abridged_fpcon_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SiteStatus_Abridged_fpcon_Enum.NORMAL;
}

/**
 * Health Protection Condition (HPCON).
 * 0 - Routine, no community transmission.
 * ALPHA - Limited, community transmission beginning.
 * BRAVO - Moderate, increased community transmission.
 * CHARLIE - Substantial, sustained community transmission.
 * DELTA - Severe, widespread community transmission.
 * Example: /// Example: CHARLIE
 * Constraints: Minimum length = 0, Maximum length = 7
 */
hpcon():SiteStatus_Abridged_hpcon_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SiteStatus_Abridged_hpcon_Enum.E0;
}

/**
 * Cyberspace Protection Condition (CPCON).
 * 1 - VERY HIGH - Critical functions.
 * 2 - HIGH - Critical and essential functions.
 * 3 - MEDIUM - Critical, essential, and support functions.
 * 4 - LOW - All functions.
 * 5 - VERY LOW - All functions.
 * Example: /// Example: 4
 * Constraints: Minimum length = 0, Maximum length = 1
 */
cpcon():SiteStatus_Abridged_cpcon_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SiteStatus_Abridged_cpcon_Enum.E1;
}

/**
 * Time of report, in ISO8601 UTC format.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
reportTime():string|null
reportTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reportTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.
 * Example: /// Example: Activation
 * Constraints: Minimum length = 0, Maximum length = 24
 */
timeFunction():string|null
timeFunction(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
timeFunction(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the current weather conditions over a site.
 * Example: /// Example: Heavy rain
 * Constraints: Minimum length = 0, Maximum length = 512
 */
weatherMessage():string|null
weatherMessage(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
weatherMessage(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
pes():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Estimated number of hot missiles of all types remaining in weapons system inventory.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
hotInventory():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Estimated number of cold missiles of all types remaining in weapons system inventory.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
coldInventory():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
 * Example: /// Example: Initialization
 * Constraints: Minimum length = 0, Maximum length = 48
 */
samMode():string|null
samMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
samMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SAM sensor radar surveillance mode (Active, Passive, Off).
 * Example: /// Example: Active
 * Constraints: Minimum length = 0, Maximum length = 24
 */
radiateMode():string|null
radiateMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
radiateMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The primary component degrading the operational capability of the platform or system.
 * Example: /// Example: opsImpairment
 * Constraints: Minimum length = 0, Maximum length = 48
 */
opsImpairment():string|null
opsImpairment(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
opsImpairment(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The communications component causing the platform or system to be less than fully operational.
 * Example: /// Example: commImpairment
 * Constraints: Minimum length = 0, Maximum length = 24
 */
commImpairment():string|null
commImpairment(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
commImpairment(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Crisis Action Team (CAT).
 * COLD - Not in use.
 * WARM - Facility prepped/possible skeleton crew.
 * HOT - Fully active.
 * Example: /// Example: COLD
 * Constraints: Minimum length = 0, Maximum length = 4
 */
cat():SiteStatus_Abridged_cat_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SiteStatus_Abridged_cat_Enum.COLD;
}

/**
 * Emergency Operations Center (EOC) status.
 * COLD - Not in use.
 * WARM - Facility prepped/possible skeleton crew.
 * HOT - Fully active.
 * Example: /// Example: WARM
 * Constraints: Minimum length = 0, Maximum length = 4
 */
eoc():SiteStatus_Abridged_eoc_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SiteStatus_Abridged_eoc_Enum.COLD;
}

/**
 * Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.
 * Example: /// Example: ['ATDL', 'IJMS', 'LINK-1']
 * Constraints: No constraints specified.
 */
link(index: number):string
link(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
link(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

linkLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.
 * Example: /// Example: ['AVAILABLE', 'DEGRADED', 'NOT AVAILABLE']
 * Constraints: No constraints specified.
 */
linkStatus(index: number):string
linkStatus(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
linkStatus(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

linkStatusLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.
 * Example: /// Example: ['ILLUMINATING', 'MODE-4', 'MODE-3']
 * Constraints: No constraints specified.
 */
radarSystem(index: number):string
radarSystem(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
radarSystem(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

radarSystemLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.
 * Example: /// Example: ['OPERATIONAL', 'OFF', 'NON-OPERATIONAL']
 * Constraints: No constraints specified.
 */
radarStatus(index: number):string
radarStatus(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
radarStatus(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

radarStatusLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.
 * Example: /// Example: ['GMD', 'HARPOON', 'JAVELIN']
 * Constraints: No constraints specified.
 */
missile(index: number):string
missile(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
missile(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

missileLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.
 * Example: /// Example: [5, 10, 100]
 * Constraints: No constraints specified.
 */
missileInventory(index: number):string
missileInventory(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
missileInventory(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

missileInventoryLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SiteStatus_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SiteStatus_Abridged_dataMode_Enum.REAL;
}

static startSiteStatus_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(37);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdSite(builder:flatbuffers.Builder, idSiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idSiteOffset, 0);
}

static addSiteType(builder:flatbuffers.Builder, siteTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, siteTypeOffset, 0);
}

static addMobileAltId(builder:flatbuffers.Builder, mobileAltIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, mobileAltIdOffset, 0);
}

static addPoiid(builder:flatbuffers.Builder, poiidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, poiidOffset, 0);
}

static addTrackId(builder:flatbuffers.Builder, trackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, trackIdOffset, 0);
}

static addTrackRefL16(builder:flatbuffers.Builder, trackRefL16Offset:flatbuffers.Offset) {
  builder.addFieldOffset(7, trackRefL16Offset, 0);
}

static addOpsCapability(builder:flatbuffers.Builder, opsCapabilityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, opsCapabilityOffset, 0);
}

static addInstStatus(builder:flatbuffers.Builder, instStatus:SiteStatus_Abridged_instStatus_Enum) {
  builder.addFieldInt8(9, instStatus, SiteStatus_Abridged_instStatus_Enum.FMC);
}

static addFpcon(builder:flatbuffers.Builder, fpcon:SiteStatus_Abridged_fpcon_Enum) {
  builder.addFieldInt8(10, fpcon, SiteStatus_Abridged_fpcon_Enum.NORMAL);
}

static addHpcon(builder:flatbuffers.Builder, hpcon:SiteStatus_Abridged_hpcon_Enum) {
  builder.addFieldInt8(11, hpcon, SiteStatus_Abridged_hpcon_Enum.E0);
}

static addCpcon(builder:flatbuffers.Builder, cpcon:SiteStatus_Abridged_cpcon_Enum) {
  builder.addFieldInt8(12, cpcon, SiteStatus_Abridged_cpcon_Enum.E1);
}

static addReportTime(builder:flatbuffers.Builder, reportTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, reportTimeOffset, 0);
}

static addTimeFunction(builder:flatbuffers.Builder, timeFunctionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, timeFunctionOffset, 0);
}

static addWeatherMessage(builder:flatbuffers.Builder, weatherMessageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, weatherMessageOffset, 0);
}

static addPes(builder:flatbuffers.Builder, pes:boolean) {
  builder.addFieldInt8(16, +pes, +false);
}

static addHotInventory(builder:flatbuffers.Builder, hotInventory:number) {
  builder.addFieldInt32(17, hotInventory, 0);
}

static addColdInventory(builder:flatbuffers.Builder, coldInventory:number) {
  builder.addFieldInt32(18, coldInventory, 0);
}

static addSamMode(builder:flatbuffers.Builder, samModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, samModeOffset, 0);
}

static addRadiateMode(builder:flatbuffers.Builder, radiateModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, radiateModeOffset, 0);
}

static addOpsImpairment(builder:flatbuffers.Builder, opsImpairmentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, opsImpairmentOffset, 0);
}

static addCommImpairment(builder:flatbuffers.Builder, commImpairmentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, commImpairmentOffset, 0);
}

static addCat(builder:flatbuffers.Builder, cat:SiteStatus_Abridged_cat_Enum) {
  builder.addFieldInt8(23, cat, SiteStatus_Abridged_cat_Enum.COLD);
}

static addEoc(builder:flatbuffers.Builder, eoc:SiteStatus_Abridged_eoc_Enum) {
  builder.addFieldInt8(24, eoc, SiteStatus_Abridged_eoc_Enum.COLD);
}

static addLink(builder:flatbuffers.Builder, linkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, linkOffset, 0);
}

static createLinkVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLinkVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLinkStatus(builder:flatbuffers.Builder, linkStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, linkStatusOffset, 0);
}

static createLinkStatusVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLinkStatusVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRadarSystem(builder:flatbuffers.Builder, radarSystemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, radarSystemOffset, 0);
}

static createRadarSystemVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRadarSystemVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRadarStatus(builder:flatbuffers.Builder, radarStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, radarStatusOffset, 0);
}

static createRadarStatusVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRadarStatusVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMissile(builder:flatbuffers.Builder, missileOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, missileOffset, 0);
}

static createMissileVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMissileVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMissileInventory(builder:flatbuffers.Builder, missileInventoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, missileInventoryOffset, 0);
}

static createMissileInventoryVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMissileInventoryVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SiteStatus_Abridged_dataMode_Enum) {
  builder.addFieldInt8(36, dataMode, SiteStatus_Abridged_dataMode_Enum.REAL);
}

static endSiteStatus_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSiteStatus_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SITE');
}

static finishSizePrefixedSiteStatus_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SITE', true);
}

static createSiteStatus_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idSiteOffset:flatbuffers.Offset, siteTypeOffset:flatbuffers.Offset, mobileAltIdOffset:flatbuffers.Offset, poiidOffset:flatbuffers.Offset, trackIdOffset:flatbuffers.Offset, trackRefL16Offset:flatbuffers.Offset, opsCapabilityOffset:flatbuffers.Offset, instStatus:SiteStatus_Abridged_instStatus_Enum, fpcon:SiteStatus_Abridged_fpcon_Enum, hpcon:SiteStatus_Abridged_hpcon_Enum, cpcon:SiteStatus_Abridged_cpcon_Enum, reportTimeOffset:flatbuffers.Offset, timeFunctionOffset:flatbuffers.Offset, weatherMessageOffset:flatbuffers.Offset, pes:boolean, hotInventory:number, coldInventory:number, samModeOffset:flatbuffers.Offset, radiateModeOffset:flatbuffers.Offset, opsImpairmentOffset:flatbuffers.Offset, commImpairmentOffset:flatbuffers.Offset, cat:SiteStatus_Abridged_cat_Enum, eoc:SiteStatus_Abridged_eoc_Enum, linkOffset:flatbuffers.Offset, linkStatusOffset:flatbuffers.Offset, radarSystemOffset:flatbuffers.Offset, radarStatusOffset:flatbuffers.Offset, missileOffset:flatbuffers.Offset, missileInventoryOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:SiteStatus_Abridged_dataMode_Enum):flatbuffers.Offset {
  SiteStatus_Abridged.startSiteStatus_Abridged(builder);
  SiteStatus_Abridged.addId(builder, idOffset);
  SiteStatus_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  SiteStatus_Abridged.addIdSite(builder, idSiteOffset);
  SiteStatus_Abridged.addSiteType(builder, siteTypeOffset);
  SiteStatus_Abridged.addMobileAltId(builder, mobileAltIdOffset);
  SiteStatus_Abridged.addPoiid(builder, poiidOffset);
  SiteStatus_Abridged.addTrackId(builder, trackIdOffset);
  SiteStatus_Abridged.addTrackRefL16(builder, trackRefL16Offset);
  SiteStatus_Abridged.addOpsCapability(builder, opsCapabilityOffset);
  SiteStatus_Abridged.addInstStatus(builder, instStatus);
  SiteStatus_Abridged.addFpcon(builder, fpcon);
  SiteStatus_Abridged.addHpcon(builder, hpcon);
  SiteStatus_Abridged.addCpcon(builder, cpcon);
  SiteStatus_Abridged.addReportTime(builder, reportTimeOffset);
  SiteStatus_Abridged.addTimeFunction(builder, timeFunctionOffset);
  SiteStatus_Abridged.addWeatherMessage(builder, weatherMessageOffset);
  SiteStatus_Abridged.addPes(builder, pes);
  SiteStatus_Abridged.addHotInventory(builder, hotInventory);
  SiteStatus_Abridged.addColdInventory(builder, coldInventory);
  SiteStatus_Abridged.addSamMode(builder, samModeOffset);
  SiteStatus_Abridged.addRadiateMode(builder, radiateModeOffset);
  SiteStatus_Abridged.addOpsImpairment(builder, opsImpairmentOffset);
  SiteStatus_Abridged.addCommImpairment(builder, commImpairmentOffset);
  SiteStatus_Abridged.addCat(builder, cat);
  SiteStatus_Abridged.addEoc(builder, eoc);
  SiteStatus_Abridged.addLink(builder, linkOffset);
  SiteStatus_Abridged.addLinkStatus(builder, linkStatusOffset);
  SiteStatus_Abridged.addRadarSystem(builder, radarSystemOffset);
  SiteStatus_Abridged.addRadarStatus(builder, radarStatusOffset);
  SiteStatus_Abridged.addMissile(builder, missileOffset);
  SiteStatus_Abridged.addMissileInventory(builder, missileInventoryOffset);
  SiteStatus_Abridged.addCreatedAt(builder, createdAtOffset);
  SiteStatus_Abridged.addCreatedBy(builder, createdByOffset);
  SiteStatus_Abridged.addSource(builder, sourceOffset);
  SiteStatus_Abridged.addOrigin(builder, originOffset);
  SiteStatus_Abridged.addOrigNetwork(builder, origNetworkOffset);
  SiteStatus_Abridged.addDataMode(builder, dataMode);
  return SiteStatus_Abridged.endSiteStatus_Abridged(builder);
}

unpack(): SiteStatus_AbridgedT {
  return new SiteStatus_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.idSite(),
    this.siteType(),
    this.mobileAltId(),
    this.poiid(),
    this.trackId(),
    this.trackRefL16(),
    this.opsCapability(),
    this.instStatus(),
    this.fpcon(),
    this.hpcon(),
    this.cpcon(),
    this.reportTime(),
    this.timeFunction(),
    this.weatherMessage(),
    this.pes(),
    this.hotInventory(),
    this.coldInventory(),
    this.samMode(),
    this.radiateMode(),
    this.opsImpairment(),
    this.commImpairment(),
    this.cat(),
    this.eoc(),
    this.bb!.createScalarList<string>(this.link.bind(this), this.linkLength()),
    this.bb!.createScalarList<string>(this.linkStatus.bind(this), this.linkStatusLength()),
    this.bb!.createScalarList<string>(this.radarSystem.bind(this), this.radarSystemLength()),
    this.bb!.createScalarList<string>(this.radarStatus.bind(this), this.radarStatusLength()),
    this.bb!.createScalarList<string>(this.missile.bind(this), this.missileLength()),
    this.bb!.createScalarList<string>(this.missileInventory.bind(this), this.missileInventoryLength()),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: SiteStatus_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idSite = this.idSite();
  _o.siteType = this.siteType();
  _o.mobileAltId = this.mobileAltId();
  _o.poiid = this.poiid();
  _o.trackId = this.trackId();
  _o.trackRefL16 = this.trackRefL16();
  _o.opsCapability = this.opsCapability();
  _o.instStatus = this.instStatus();
  _o.fpcon = this.fpcon();
  _o.hpcon = this.hpcon();
  _o.cpcon = this.cpcon();
  _o.reportTime = this.reportTime();
  _o.timeFunction = this.timeFunction();
  _o.weatherMessage = this.weatherMessage();
  _o.pes = this.pes();
  _o.hotInventory = this.hotInventory();
  _o.coldInventory = this.coldInventory();
  _o.samMode = this.samMode();
  _o.radiateMode = this.radiateMode();
  _o.opsImpairment = this.opsImpairment();
  _o.commImpairment = this.commImpairment();
  _o.cat = this.cat();
  _o.eoc = this.eoc();
  _o.link = this.bb!.createScalarList<string>(this.link.bind(this), this.linkLength());
  _o.linkStatus = this.bb!.createScalarList<string>(this.linkStatus.bind(this), this.linkStatusLength());
  _o.radarSystem = this.bb!.createScalarList<string>(this.radarSystem.bind(this), this.radarSystemLength());
  _o.radarStatus = this.bb!.createScalarList<string>(this.radarStatus.bind(this), this.radarStatusLength());
  _o.missile = this.bb!.createScalarList<string>(this.missile.bind(this), this.missileLength());
  _o.missileInventory = this.bb!.createScalarList<string>(this.missileInventory.bind(this), this.missileInventoryLength());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class SiteStatus_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idSite: string|Uint8Array|null = null,
  public siteType: string|Uint8Array|null = null,
  public mobileAltId: string|Uint8Array|null = null,
  public poiid: string|Uint8Array|null = null,
  public trackId: string|Uint8Array|null = null,
  public trackRefL16: string|Uint8Array|null = null,
  public opsCapability: string|Uint8Array|null = null,
  public instStatus: SiteStatus_Abridged_instStatus_Enum = SiteStatus_Abridged_instStatus_Enum.FMC,
  public fpcon: SiteStatus_Abridged_fpcon_Enum = SiteStatus_Abridged_fpcon_Enum.NORMAL,
  public hpcon: SiteStatus_Abridged_hpcon_Enum = SiteStatus_Abridged_hpcon_Enum.E0,
  public cpcon: SiteStatus_Abridged_cpcon_Enum = SiteStatus_Abridged_cpcon_Enum.E1,
  public reportTime: string|Uint8Array|null = null,
  public timeFunction: string|Uint8Array|null = null,
  public weatherMessage: string|Uint8Array|null = null,
  public pes: boolean = false,
  public hotInventory: number = 0,
  public coldInventory: number = 0,
  public samMode: string|Uint8Array|null = null,
  public radiateMode: string|Uint8Array|null = null,
  public opsImpairment: string|Uint8Array|null = null,
  public commImpairment: string|Uint8Array|null = null,
  public cat: SiteStatus_Abridged_cat_Enum = SiteStatus_Abridged_cat_Enum.COLD,
  public eoc: SiteStatus_Abridged_eoc_Enum = SiteStatus_Abridged_eoc_Enum.COLD,
  public link: (string)[] = [],
  public linkStatus: (string)[] = [],
  public radarSystem: (string)[] = [],
  public radarStatus: (string)[] = [],
  public missile: (string)[] = [],
  public missileInventory: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: SiteStatus_Abridged_dataMode_Enum = SiteStatus_Abridged_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idSite = (this.idSite !== null ? builder.createString(this.idSite!) : 0);
  const siteType = (this.siteType !== null ? builder.createString(this.siteType!) : 0);
  const mobileAltId = (this.mobileAltId !== null ? builder.createString(this.mobileAltId!) : 0);
  const poiid = (this.poiid !== null ? builder.createString(this.poiid!) : 0);
  const trackId = (this.trackId !== null ? builder.createString(this.trackId!) : 0);
  const trackRefL16 = (this.trackRefL16 !== null ? builder.createString(this.trackRefL16!) : 0);
  const opsCapability = (this.opsCapability !== null ? builder.createString(this.opsCapability!) : 0);
  const reportTime = (this.reportTime !== null ? builder.createString(this.reportTime!) : 0);
  const timeFunction = (this.timeFunction !== null ? builder.createString(this.timeFunction!) : 0);
  const weatherMessage = (this.weatherMessage !== null ? builder.createString(this.weatherMessage!) : 0);
  const samMode = (this.samMode !== null ? builder.createString(this.samMode!) : 0);
  const radiateMode = (this.radiateMode !== null ? builder.createString(this.radiateMode!) : 0);
  const opsImpairment = (this.opsImpairment !== null ? builder.createString(this.opsImpairment!) : 0);
  const commImpairment = (this.commImpairment !== null ? builder.createString(this.commImpairment!) : 0);
  const link = SiteStatus_Abridged.createLinkVector(builder, builder.createObjectOffsetList(this.link));
  const linkStatus = SiteStatus_Abridged.createLinkStatusVector(builder, builder.createObjectOffsetList(this.linkStatus));
  const radarSystem = SiteStatus_Abridged.createRadarSystemVector(builder, builder.createObjectOffsetList(this.radarSystem));
  const radarStatus = SiteStatus_Abridged.createRadarStatusVector(builder, builder.createObjectOffsetList(this.radarStatus));
  const missile = SiteStatus_Abridged.createMissileVector(builder, builder.createObjectOffsetList(this.missile));
  const missileInventory = SiteStatus_Abridged.createMissileInventoryVector(builder, builder.createObjectOffsetList(this.missileInventory));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return SiteStatus_Abridged.createSiteStatus_Abridged(builder,
    id,
    classificationMarking,
    idSite,
    siteType,
    mobileAltId,
    poiid,
    trackId,
    trackRefL16,
    opsCapability,
    this.instStatus,
    this.fpcon,
    this.hpcon,
    this.cpcon,
    reportTime,
    timeFunction,
    weatherMessage,
    this.pes,
    this.hotInventory,
    this.coldInventory,
    samMode,
    radiateMode,
    opsImpairment,
    commImpairment,
    this.cat,
    this.eoc,
    link,
    linkStatus,
    radarSystem,
    radarStatus,
    missile,
    missileInventory,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
