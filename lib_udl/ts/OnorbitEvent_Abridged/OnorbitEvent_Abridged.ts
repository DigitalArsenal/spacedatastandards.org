// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OnorbitEvent_Abridged_dataMode_Enum } from './OnorbitEvent_Abridged_dataMode_Enum.js';


/**
 * /// No description available.
 */
export class OnorbitEvent_Abridged implements flatbuffers.IUnpackableObject<OnorbitEvent_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OnorbitEvent_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOnorbitEvent_Abridged(bb:flatbuffers.ByteBuffer, obj?:OnorbitEvent_Abridged):OnorbitEvent_Abridged {
  return (obj || new OnorbitEvent_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOnorbitEvent_Abridged(bb:flatbuffers.ByteBuffer, obj?:OnorbitEvent_Abridged):OnorbitEvent_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OnorbitEvent_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ONOR');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: ONORBITEVENT-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The sources or SCG references from which the classification of this data is derived.
 * Example: /// Example: DERIVED_SOURCE
 * Constraints: Minimum length = 0, Maximum length = 128
 */
derivedFrom():string|null
derivedFrom(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
derivedFrom(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The declassification date of this data, in ISO 8601 UTC format.
 * Example: /// Example: 2021-01-01T01:02:02.123Z
 * Constraints: No constraints specified.
 */
declassificationDate():string|null
declassificationDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
declassificationDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Declassification string of this data.
 * Example: /// Example: DECLASS_STRING
 * Constraints: Minimum length = 0, Maximum length = 256
 */
declassificationString():string|null
declassificationString(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
declassificationString(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the on-orbit object for this event.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/Catalog number of the target on-orbit object.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
eventTime():string|null
eventTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Notes/remarks on the validity/accuracy of the eventTime.
 * Example: /// Example: Notes on validity
 * Constraints: Minimum length = 0, Maximum length = 128
 */
eventTimeNotes():string|null
eventTimeNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventTimeNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Organization ID of the operator of the on-orbit spacecraft at the time of the event.
 * Example: /// Example: OPERATORORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
operatorOrgId():string|null
operatorOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operatorOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Organization ID of the owner of the on-orbit spacecraft at the time of the event.
 * Example: /// Example: OWNERORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
ownerOrgId():string|null
ownerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ownerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the organization which leases this on-orbit spacecraft.
 * Example: /// Example: LESSEEORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
lesseeOrgId():string|null
lesseeOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lesseeOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
 * Example: /// Example: OPERATEDONBEHALFOFORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
operatedOnBehalfOfOrgId():string|null
operatedOnBehalfOfOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operatedOnBehalfOfOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * GEO position longitude at event time if applicable. Negative values are west.
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
geoPosition():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * GEO plane slot of the spacecraft at event time.
 * Example: /// Example: example_slot
 * Constraints: Minimum length = 0, Maximum length = 16
 */
planeSlot():string|null
planeSlot(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
planeSlot(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * GEO slot plane number/designator of the spacecraft at event time.
 * Example: /// Example: PL_1
 * Constraints: Minimum length = 0, Maximum length = 4
 */
planeNumber():string|null
planeNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
planeNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
 * Example: /// Example: Stable
 * Constraints: Minimum length = 0, Maximum length = 128
 */
positionStatus():string|null
positionStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
positionStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Maximum validity time of the event.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
untilTime():string|null
untilTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
untilTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Date time of official loss of the spacecraft.
 * Example: /// Example: 2021-01-01T01:01:01.123Z
 * Constraints: No constraints specified.
 */
officialLossDate():string|null
officialLossDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
officialLossDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Net amount of the insurance claim for the event, in USD.
 * Example: /// Example: 10000.23
 * Constraints: No constraints specified.
 */
netAmount():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Underlying cause of the event.
 * Example: /// Example: CAUSE_EXAMPLE
 * Constraints: Minimum length = 0, Maximum length = 128
 */
underlyingCause():string|null
underlyingCause(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
underlyingCause(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Spacecraft capability loss incurred, as a fraction of 1.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
capabilityLoss():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft capacity loss incurred, as a fraction of 1.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
capacityLoss():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Insurance loss incurred, as a fraction of 1.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
insuranceLoss():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Insurance loss incurred by 3rd party insurance, in USD.
 * Example: /// Example: 10000.23
 * Constraints: No constraints specified.
 */
thirdPartyInsuranceLoss():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of humans injured in the event.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
injured():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of humans killed in the event.
 * Example: /// Example: 23
 * Constraints: No constraints specified.
 */
killed():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Spacecraft life lost due to the event as a percent/fraction of 1.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
lifeLost():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft age at the event in years.
 * Example: /// Example: 5.23
 * Constraints: No constraints specified.
 */
ageAtEvent():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Achieved phase of flight prior to the event.
 * Example: /// Example: Phase 2
 * Constraints: Minimum length = 0, Maximum length = 64
 */
achievedFlightPhase():string|null
achievedFlightPhase(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
achievedFlightPhase(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Phase of flight during which the event occurred.
 * Example: /// Example: Phase 2
 * Constraints: Minimum length = 0, Maximum length = 64
 */
occurrenceFlightPhase():string|null
occurrenceFlightPhase(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
occurrenceFlightPhase(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Faulty stage of flight for the event.
 * Example: /// Example: Phase 2
 * Constraints: Minimum length = 0, Maximum length = 64
 */
stageAtFault():string|null
stageAtFault(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stageAtFault(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Equipment on the spacecraft which caused the event.
 * Example: /// Example: Example Equipment
 * Constraints: Minimum length = 0, Maximum length = 64
 */
equipmentAtFault():string|null
equipmentAtFault(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
equipmentAtFault(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of the equipment on the spacecraft which caused the event.
 * Example: /// Example: Example Equipment
 * Constraints: Minimum length = 0, Maximum length = 64
 */
equipmentTypeAtFault():string|null
equipmentTypeAtFault(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
equipmentTypeAtFault(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specific part of the equipment on the spacecraft which caused the event.
 * Example: /// Example: Example Equipment
 * Constraints: Minimum length = 0, Maximum length = 64
 */
equipmentPartAtFault():string|null
equipmentPartAtFault(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
equipmentPartAtFault(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
 * Example: /// Example: Example Equipment
 * Constraints: Minimum length = 0, Maximum length = 64
 */
consequentialEquipmentFailure():string|null
consequentialEquipmentFailure(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
consequentialEquipmentFailure(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Boolean indicating if the spacecraft is inclined.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
inclined():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Notes/description of the event.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 256
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional remarks on the event description.
 * Example: /// Example: Example remarks
 * Constraints: Minimum length = 0, Maximum length = 512
 */
remarks():string|null
remarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
remarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional insurance notes if the event is an official loss.
 * Example: /// Example: Insurance notes
 * Constraints: Minimum length = 0, Maximum length = 512
 */
insuranceLossNotes():string|null
insuranceLossNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
insuranceLossNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Notes on capability loss at the time of event.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 512
 */
capabilityLossNotes():string|null
capabilityLossNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
capabilityLossNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional insurance notes on coverages at the time of event.
 * Example: /// Example: Insurance notes
 * Constraints: Minimum length = 0, Maximum length = 512
 */
insuranceCarriedNotes():string|null
insuranceCarriedNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
insuranceCarriedNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional notes on the equipment causing the event/loss.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 512
 */
equipmentCausingLossNotes():string|null
equipmentCausingLossNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
equipmentCausingLossNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of on-orbit event being reported.
 * Example: /// Example: Type1
 * Constraints: Minimum length = 0, Maximum length = 128
 */
eventType():string|null
eventType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The result of the reported event.
 * Example: /// Example: Example results
 * Constraints: Minimum length = 0, Maximum length = 128
 */
eventResult():string|null
eventResult(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventResult(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The status of the on-orbit object.
 * Example: /// Example: Status1
 * Constraints: Minimum length = 0, Maximum length = 128
 */
objectStatus():string|null
objectStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the satellite orbital position or regime.
 * Example: /// Example: Example description
 * Constraints: Minimum length = 0, Maximum length = 128
 */
satellitePosition():string|null
satellitePosition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
satellitePosition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():OnorbitEvent_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OnorbitEvent_Abridged_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startOnorbitEvent_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(54);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addDerivedFrom(builder:flatbuffers.Builder, derivedFromOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, derivedFromOffset, 0);
}

static addDeclassificationDate(builder:flatbuffers.Builder, declassificationDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, declassificationDateOffset, 0);
}

static addDeclassificationString(builder:flatbuffers.Builder, declassificationStringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, declassificationStringOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(6, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, origObjectIdOffset, 0);
}

static addEventTime(builder:flatbuffers.Builder, eventTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, eventTimeOffset, 0);
}

static addEventTimeNotes(builder:flatbuffers.Builder, eventTimeNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, eventTimeNotesOffset, 0);
}

static addOperatorOrgId(builder:flatbuffers.Builder, operatorOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, operatorOrgIdOffset, 0);
}

static addOwnerOrgId(builder:flatbuffers.Builder, ownerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, ownerOrgIdOffset, 0);
}

static addLesseeOrgId(builder:flatbuffers.Builder, lesseeOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, lesseeOrgIdOffset, 0);
}

static addOperatedOnBehalfOfOrgId(builder:flatbuffers.Builder, operatedOnBehalfOfOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, operatedOnBehalfOfOrgIdOffset, 0);
}

static addGeoPosition(builder:flatbuffers.Builder, geoPosition:number) {
  builder.addFieldFloat64(14, geoPosition, 0.0);
}

static addPlaneSlot(builder:flatbuffers.Builder, planeSlotOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, planeSlotOffset, 0);
}

static addPlaneNumber(builder:flatbuffers.Builder, planeNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, planeNumberOffset, 0);
}

static addPositionStatus(builder:flatbuffers.Builder, positionStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, positionStatusOffset, 0);
}

static addUntilTime(builder:flatbuffers.Builder, untilTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, untilTimeOffset, 0);
}

static addOfficialLossDate(builder:flatbuffers.Builder, officialLossDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, officialLossDateOffset, 0);
}

static addNetAmount(builder:flatbuffers.Builder, netAmount:number) {
  builder.addFieldFloat64(20, netAmount, 0.0);
}

static addUnderlyingCause(builder:flatbuffers.Builder, underlyingCauseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, underlyingCauseOffset, 0);
}

static addCapabilityLoss(builder:flatbuffers.Builder, capabilityLoss:number) {
  builder.addFieldFloat64(22, capabilityLoss, 0.0);
}

static addCapacityLoss(builder:flatbuffers.Builder, capacityLoss:number) {
  builder.addFieldFloat64(23, capacityLoss, 0.0);
}

static addInsuranceLoss(builder:flatbuffers.Builder, insuranceLoss:number) {
  builder.addFieldFloat64(24, insuranceLoss, 0.0);
}

static addThirdPartyInsuranceLoss(builder:flatbuffers.Builder, thirdPartyInsuranceLoss:number) {
  builder.addFieldFloat64(25, thirdPartyInsuranceLoss, 0.0);
}

static addInjured(builder:flatbuffers.Builder, injured:number) {
  builder.addFieldInt32(26, injured, 0);
}

static addKilled(builder:flatbuffers.Builder, killed:number) {
  builder.addFieldInt32(27, killed, 0);
}

static addLifeLost(builder:flatbuffers.Builder, lifeLost:number) {
  builder.addFieldFloat64(28, lifeLost, 0.0);
}

static addAgeAtEvent(builder:flatbuffers.Builder, ageAtEvent:number) {
  builder.addFieldFloat64(29, ageAtEvent, 0.0);
}

static addAchievedFlightPhase(builder:flatbuffers.Builder, achievedFlightPhaseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, achievedFlightPhaseOffset, 0);
}

static addOccurrenceFlightPhase(builder:flatbuffers.Builder, occurrenceFlightPhaseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, occurrenceFlightPhaseOffset, 0);
}

static addStageAtFault(builder:flatbuffers.Builder, stageAtFaultOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, stageAtFaultOffset, 0);
}

static addEquipmentAtFault(builder:flatbuffers.Builder, equipmentAtFaultOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, equipmentAtFaultOffset, 0);
}

static addEquipmentTypeAtFault(builder:flatbuffers.Builder, equipmentTypeAtFaultOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, equipmentTypeAtFaultOffset, 0);
}

static addEquipmentPartAtFault(builder:flatbuffers.Builder, equipmentPartAtFaultOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, equipmentPartAtFaultOffset, 0);
}

static addConsequentialEquipmentFailure(builder:flatbuffers.Builder, consequentialEquipmentFailureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, consequentialEquipmentFailureOffset, 0);
}

static addInclined(builder:flatbuffers.Builder, inclined:boolean) {
  builder.addFieldInt8(37, +inclined, +false);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, descriptionOffset, 0);
}

static addRemarks(builder:flatbuffers.Builder, remarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, remarksOffset, 0);
}

static addInsuranceLossNotes(builder:flatbuffers.Builder, insuranceLossNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, insuranceLossNotesOffset, 0);
}

static addCapabilityLossNotes(builder:flatbuffers.Builder, capabilityLossNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, capabilityLossNotesOffset, 0);
}

static addInsuranceCarriedNotes(builder:flatbuffers.Builder, insuranceCarriedNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, insuranceCarriedNotesOffset, 0);
}

static addEquipmentCausingLossNotes(builder:flatbuffers.Builder, equipmentCausingLossNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, equipmentCausingLossNotesOffset, 0);
}

static addEventType(builder:flatbuffers.Builder, eventTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, eventTypeOffset, 0);
}

static addEventResult(builder:flatbuffers.Builder, eventResultOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, eventResultOffset, 0);
}

static addObjectStatus(builder:flatbuffers.Builder, objectStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, objectStatusOffset, 0);
}

static addSatellitePosition(builder:flatbuffers.Builder, satellitePositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, satellitePositionOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:OnorbitEvent_Abridged_dataMode_Enum) {
  builder.addFieldInt8(50, dataMode, OnorbitEvent_Abridged_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, createdByOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, origNetworkOffset, 0);
}

static endOnorbitEvent_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOnorbitEvent_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ONOR');
}

static finishSizePrefixedOnorbitEvent_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ONOR', true);
}

static createOnorbitEvent_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, derivedFromOffset:flatbuffers.Offset, declassificationDateOffset:flatbuffers.Offset, declassificationStringOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, eventTimeOffset:flatbuffers.Offset, eventTimeNotesOffset:flatbuffers.Offset, operatorOrgIdOffset:flatbuffers.Offset, ownerOrgIdOffset:flatbuffers.Offset, lesseeOrgIdOffset:flatbuffers.Offset, operatedOnBehalfOfOrgIdOffset:flatbuffers.Offset, geoPosition:number, planeSlotOffset:flatbuffers.Offset, planeNumberOffset:flatbuffers.Offset, positionStatusOffset:flatbuffers.Offset, untilTimeOffset:flatbuffers.Offset, officialLossDateOffset:flatbuffers.Offset, netAmount:number, underlyingCauseOffset:flatbuffers.Offset, capabilityLoss:number, capacityLoss:number, insuranceLoss:number, thirdPartyInsuranceLoss:number, injured:number, killed:number, lifeLost:number, ageAtEvent:number, achievedFlightPhaseOffset:flatbuffers.Offset, occurrenceFlightPhaseOffset:flatbuffers.Offset, stageAtFaultOffset:flatbuffers.Offset, equipmentAtFaultOffset:flatbuffers.Offset, equipmentTypeAtFaultOffset:flatbuffers.Offset, equipmentPartAtFaultOffset:flatbuffers.Offset, consequentialEquipmentFailureOffset:flatbuffers.Offset, inclined:boolean, descriptionOffset:flatbuffers.Offset, remarksOffset:flatbuffers.Offset, insuranceLossNotesOffset:flatbuffers.Offset, capabilityLossNotesOffset:flatbuffers.Offset, insuranceCarriedNotesOffset:flatbuffers.Offset, equipmentCausingLossNotesOffset:flatbuffers.Offset, eventTypeOffset:flatbuffers.Offset, eventResultOffset:flatbuffers.Offset, objectStatusOffset:flatbuffers.Offset, satellitePositionOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:OnorbitEvent_Abridged_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  OnorbitEvent_Abridged.startOnorbitEvent_Abridged(builder);
  OnorbitEvent_Abridged.addId(builder, idOffset);
  OnorbitEvent_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  OnorbitEvent_Abridged.addDerivedFrom(builder, derivedFromOffset);
  OnorbitEvent_Abridged.addDeclassificationDate(builder, declassificationDateOffset);
  OnorbitEvent_Abridged.addDeclassificationString(builder, declassificationStringOffset);
  OnorbitEvent_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
  OnorbitEvent_Abridged.addSatNo(builder, satNo);
  OnorbitEvent_Abridged.addOrigObjectId(builder, origObjectIdOffset);
  OnorbitEvent_Abridged.addEventTime(builder, eventTimeOffset);
  OnorbitEvent_Abridged.addEventTimeNotes(builder, eventTimeNotesOffset);
  OnorbitEvent_Abridged.addOperatorOrgId(builder, operatorOrgIdOffset);
  OnorbitEvent_Abridged.addOwnerOrgId(builder, ownerOrgIdOffset);
  OnorbitEvent_Abridged.addLesseeOrgId(builder, lesseeOrgIdOffset);
  OnorbitEvent_Abridged.addOperatedOnBehalfOfOrgId(builder, operatedOnBehalfOfOrgIdOffset);
  OnorbitEvent_Abridged.addGeoPosition(builder, geoPosition);
  OnorbitEvent_Abridged.addPlaneSlot(builder, planeSlotOffset);
  OnorbitEvent_Abridged.addPlaneNumber(builder, planeNumberOffset);
  OnorbitEvent_Abridged.addPositionStatus(builder, positionStatusOffset);
  OnorbitEvent_Abridged.addUntilTime(builder, untilTimeOffset);
  OnorbitEvent_Abridged.addOfficialLossDate(builder, officialLossDateOffset);
  OnorbitEvent_Abridged.addNetAmount(builder, netAmount);
  OnorbitEvent_Abridged.addUnderlyingCause(builder, underlyingCauseOffset);
  OnorbitEvent_Abridged.addCapabilityLoss(builder, capabilityLoss);
  OnorbitEvent_Abridged.addCapacityLoss(builder, capacityLoss);
  OnorbitEvent_Abridged.addInsuranceLoss(builder, insuranceLoss);
  OnorbitEvent_Abridged.addThirdPartyInsuranceLoss(builder, thirdPartyInsuranceLoss);
  OnorbitEvent_Abridged.addInjured(builder, injured);
  OnorbitEvent_Abridged.addKilled(builder, killed);
  OnorbitEvent_Abridged.addLifeLost(builder, lifeLost);
  OnorbitEvent_Abridged.addAgeAtEvent(builder, ageAtEvent);
  OnorbitEvent_Abridged.addAchievedFlightPhase(builder, achievedFlightPhaseOffset);
  OnorbitEvent_Abridged.addOccurrenceFlightPhase(builder, occurrenceFlightPhaseOffset);
  OnorbitEvent_Abridged.addStageAtFault(builder, stageAtFaultOffset);
  OnorbitEvent_Abridged.addEquipmentAtFault(builder, equipmentAtFaultOffset);
  OnorbitEvent_Abridged.addEquipmentTypeAtFault(builder, equipmentTypeAtFaultOffset);
  OnorbitEvent_Abridged.addEquipmentPartAtFault(builder, equipmentPartAtFaultOffset);
  OnorbitEvent_Abridged.addConsequentialEquipmentFailure(builder, consequentialEquipmentFailureOffset);
  OnorbitEvent_Abridged.addInclined(builder, inclined);
  OnorbitEvent_Abridged.addDescription(builder, descriptionOffset);
  OnorbitEvent_Abridged.addRemarks(builder, remarksOffset);
  OnorbitEvent_Abridged.addInsuranceLossNotes(builder, insuranceLossNotesOffset);
  OnorbitEvent_Abridged.addCapabilityLossNotes(builder, capabilityLossNotesOffset);
  OnorbitEvent_Abridged.addInsuranceCarriedNotes(builder, insuranceCarriedNotesOffset);
  OnorbitEvent_Abridged.addEquipmentCausingLossNotes(builder, equipmentCausingLossNotesOffset);
  OnorbitEvent_Abridged.addEventType(builder, eventTypeOffset);
  OnorbitEvent_Abridged.addEventResult(builder, eventResultOffset);
  OnorbitEvent_Abridged.addObjectStatus(builder, objectStatusOffset);
  OnorbitEvent_Abridged.addSatellitePosition(builder, satellitePositionOffset);
  OnorbitEvent_Abridged.addSource(builder, sourceOffset);
  OnorbitEvent_Abridged.addOrigin(builder, originOffset);
  OnorbitEvent_Abridged.addDataMode(builder, dataMode);
  OnorbitEvent_Abridged.addCreatedAt(builder, createdAtOffset);
  OnorbitEvent_Abridged.addCreatedBy(builder, createdByOffset);
  OnorbitEvent_Abridged.addOrigNetwork(builder, origNetworkOffset);
  return OnorbitEvent_Abridged.endOnorbitEvent_Abridged(builder);
}

unpack(): OnorbitEvent_AbridgedT {
  return new OnorbitEvent_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.derivedFrom(),
    this.declassificationDate(),
    this.declassificationString(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.eventTime(),
    this.eventTimeNotes(),
    this.operatorOrgId(),
    this.ownerOrgId(),
    this.lesseeOrgId(),
    this.operatedOnBehalfOfOrgId(),
    this.geoPosition(),
    this.planeSlot(),
    this.planeNumber(),
    this.positionStatus(),
    this.untilTime(),
    this.officialLossDate(),
    this.netAmount(),
    this.underlyingCause(),
    this.capabilityLoss(),
    this.capacityLoss(),
    this.insuranceLoss(),
    this.thirdPartyInsuranceLoss(),
    this.injured(),
    this.killed(),
    this.lifeLost(),
    this.ageAtEvent(),
    this.achievedFlightPhase(),
    this.occurrenceFlightPhase(),
    this.stageAtFault(),
    this.equipmentAtFault(),
    this.equipmentTypeAtFault(),
    this.equipmentPartAtFault(),
    this.consequentialEquipmentFailure(),
    this.inclined(),
    this.description(),
    this.remarks(),
    this.insuranceLossNotes(),
    this.capabilityLossNotes(),
    this.insuranceCarriedNotes(),
    this.equipmentCausingLossNotes(),
    this.eventType(),
    this.eventResult(),
    this.objectStatus(),
    this.satellitePosition(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.origNetwork()
  );
}


unpackTo(_o: OnorbitEvent_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.derivedFrom = this.derivedFrom();
  _o.declassificationDate = this.declassificationDate();
  _o.declassificationString = this.declassificationString();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.eventTime = this.eventTime();
  _o.eventTimeNotes = this.eventTimeNotes();
  _o.operatorOrgId = this.operatorOrgId();
  _o.ownerOrgId = this.ownerOrgId();
  _o.lesseeOrgId = this.lesseeOrgId();
  _o.operatedOnBehalfOfOrgId = this.operatedOnBehalfOfOrgId();
  _o.geoPosition = this.geoPosition();
  _o.planeSlot = this.planeSlot();
  _o.planeNumber = this.planeNumber();
  _o.positionStatus = this.positionStatus();
  _o.untilTime = this.untilTime();
  _o.officialLossDate = this.officialLossDate();
  _o.netAmount = this.netAmount();
  _o.underlyingCause = this.underlyingCause();
  _o.capabilityLoss = this.capabilityLoss();
  _o.capacityLoss = this.capacityLoss();
  _o.insuranceLoss = this.insuranceLoss();
  _o.thirdPartyInsuranceLoss = this.thirdPartyInsuranceLoss();
  _o.injured = this.injured();
  _o.killed = this.killed();
  _o.lifeLost = this.lifeLost();
  _o.ageAtEvent = this.ageAtEvent();
  _o.achievedFlightPhase = this.achievedFlightPhase();
  _o.occurrenceFlightPhase = this.occurrenceFlightPhase();
  _o.stageAtFault = this.stageAtFault();
  _o.equipmentAtFault = this.equipmentAtFault();
  _o.equipmentTypeAtFault = this.equipmentTypeAtFault();
  _o.equipmentPartAtFault = this.equipmentPartAtFault();
  _o.consequentialEquipmentFailure = this.consequentialEquipmentFailure();
  _o.inclined = this.inclined();
  _o.description = this.description();
  _o.remarks = this.remarks();
  _o.insuranceLossNotes = this.insuranceLossNotes();
  _o.capabilityLossNotes = this.capabilityLossNotes();
  _o.insuranceCarriedNotes = this.insuranceCarriedNotes();
  _o.equipmentCausingLossNotes = this.equipmentCausingLossNotes();
  _o.eventType = this.eventType();
  _o.eventResult = this.eventResult();
  _o.objectStatus = this.objectStatus();
  _o.satellitePosition = this.satellitePosition();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.origNetwork = this.origNetwork();
}
}

export class OnorbitEvent_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public derivedFrom: string|Uint8Array|null = null,
  public declassificationDate: string|Uint8Array|null = null,
  public declassificationString: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public eventTime: string|Uint8Array|null = null,
  public eventTimeNotes: string|Uint8Array|null = null,
  public operatorOrgId: string|Uint8Array|null = null,
  public ownerOrgId: string|Uint8Array|null = null,
  public lesseeOrgId: string|Uint8Array|null = null,
  public operatedOnBehalfOfOrgId: string|Uint8Array|null = null,
  public geoPosition: number = 0.0,
  public planeSlot: string|Uint8Array|null = null,
  public planeNumber: string|Uint8Array|null = null,
  public positionStatus: string|Uint8Array|null = null,
  public untilTime: string|Uint8Array|null = null,
  public officialLossDate: string|Uint8Array|null = null,
  public netAmount: number = 0.0,
  public underlyingCause: string|Uint8Array|null = null,
  public capabilityLoss: number = 0.0,
  public capacityLoss: number = 0.0,
  public insuranceLoss: number = 0.0,
  public thirdPartyInsuranceLoss: number = 0.0,
  public injured: number = 0,
  public killed: number = 0,
  public lifeLost: number = 0.0,
  public ageAtEvent: number = 0.0,
  public achievedFlightPhase: string|Uint8Array|null = null,
  public occurrenceFlightPhase: string|Uint8Array|null = null,
  public stageAtFault: string|Uint8Array|null = null,
  public equipmentAtFault: string|Uint8Array|null = null,
  public equipmentTypeAtFault: string|Uint8Array|null = null,
  public equipmentPartAtFault: string|Uint8Array|null = null,
  public consequentialEquipmentFailure: string|Uint8Array|null = null,
  public inclined: boolean = false,
  public description: string|Uint8Array|null = null,
  public remarks: string|Uint8Array|null = null,
  public insuranceLossNotes: string|Uint8Array|null = null,
  public capabilityLossNotes: string|Uint8Array|null = null,
  public insuranceCarriedNotes: string|Uint8Array|null = null,
  public equipmentCausingLossNotes: string|Uint8Array|null = null,
  public eventType: string|Uint8Array|null = null,
  public eventResult: string|Uint8Array|null = null,
  public objectStatus: string|Uint8Array|null = null,
  public satellitePosition: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: OnorbitEvent_Abridged_dataMode_Enum = OnorbitEvent_Abridged_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const derivedFrom = (this.derivedFrom !== null ? builder.createString(this.derivedFrom!) : 0);
  const declassificationDate = (this.declassificationDate !== null ? builder.createString(this.declassificationDate!) : 0);
  const declassificationString = (this.declassificationString !== null ? builder.createString(this.declassificationString!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const eventTime = (this.eventTime !== null ? builder.createString(this.eventTime!) : 0);
  const eventTimeNotes = (this.eventTimeNotes !== null ? builder.createString(this.eventTimeNotes!) : 0);
  const operatorOrgId = (this.operatorOrgId !== null ? builder.createString(this.operatorOrgId!) : 0);
  const ownerOrgId = (this.ownerOrgId !== null ? builder.createString(this.ownerOrgId!) : 0);
  const lesseeOrgId = (this.lesseeOrgId !== null ? builder.createString(this.lesseeOrgId!) : 0);
  const operatedOnBehalfOfOrgId = (this.operatedOnBehalfOfOrgId !== null ? builder.createString(this.operatedOnBehalfOfOrgId!) : 0);
  const planeSlot = (this.planeSlot !== null ? builder.createString(this.planeSlot!) : 0);
  const planeNumber = (this.planeNumber !== null ? builder.createString(this.planeNumber!) : 0);
  const positionStatus = (this.positionStatus !== null ? builder.createString(this.positionStatus!) : 0);
  const untilTime = (this.untilTime !== null ? builder.createString(this.untilTime!) : 0);
  const officialLossDate = (this.officialLossDate !== null ? builder.createString(this.officialLossDate!) : 0);
  const underlyingCause = (this.underlyingCause !== null ? builder.createString(this.underlyingCause!) : 0);
  const achievedFlightPhase = (this.achievedFlightPhase !== null ? builder.createString(this.achievedFlightPhase!) : 0);
  const occurrenceFlightPhase = (this.occurrenceFlightPhase !== null ? builder.createString(this.occurrenceFlightPhase!) : 0);
  const stageAtFault = (this.stageAtFault !== null ? builder.createString(this.stageAtFault!) : 0);
  const equipmentAtFault = (this.equipmentAtFault !== null ? builder.createString(this.equipmentAtFault!) : 0);
  const equipmentTypeAtFault = (this.equipmentTypeAtFault !== null ? builder.createString(this.equipmentTypeAtFault!) : 0);
  const equipmentPartAtFault = (this.equipmentPartAtFault !== null ? builder.createString(this.equipmentPartAtFault!) : 0);
  const consequentialEquipmentFailure = (this.consequentialEquipmentFailure !== null ? builder.createString(this.consequentialEquipmentFailure!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const remarks = (this.remarks !== null ? builder.createString(this.remarks!) : 0);
  const insuranceLossNotes = (this.insuranceLossNotes !== null ? builder.createString(this.insuranceLossNotes!) : 0);
  const capabilityLossNotes = (this.capabilityLossNotes !== null ? builder.createString(this.capabilityLossNotes!) : 0);
  const insuranceCarriedNotes = (this.insuranceCarriedNotes !== null ? builder.createString(this.insuranceCarriedNotes!) : 0);
  const equipmentCausingLossNotes = (this.equipmentCausingLossNotes !== null ? builder.createString(this.equipmentCausingLossNotes!) : 0);
  const eventType = (this.eventType !== null ? builder.createString(this.eventType!) : 0);
  const eventResult = (this.eventResult !== null ? builder.createString(this.eventResult!) : 0);
  const objectStatus = (this.objectStatus !== null ? builder.createString(this.objectStatus!) : 0);
  const satellitePosition = (this.satellitePosition !== null ? builder.createString(this.satellitePosition!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return OnorbitEvent_Abridged.createOnorbitEvent_Abridged(builder,
    id,
    classificationMarking,
    derivedFrom,
    declassificationDate,
    declassificationString,
    idOnOrbit,
    this.satNo,
    origObjectId,
    eventTime,
    eventTimeNotes,
    operatorOrgId,
    ownerOrgId,
    lesseeOrgId,
    operatedOnBehalfOfOrgId,
    this.geoPosition,
    planeSlot,
    planeNumber,
    positionStatus,
    untilTime,
    officialLossDate,
    this.netAmount,
    underlyingCause,
    this.capabilityLoss,
    this.capacityLoss,
    this.insuranceLoss,
    this.thirdPartyInsuranceLoss,
    this.injured,
    this.killed,
    this.lifeLost,
    this.ageAtEvent,
    achievedFlightPhase,
    occurrenceFlightPhase,
    stageAtFault,
    equipmentAtFault,
    equipmentTypeAtFault,
    equipmentPartAtFault,
    consequentialEquipmentFailure,
    this.inclined,
    description,
    remarks,
    insuranceLossNotes,
    capabilityLossNotes,
    insuranceCarriedNotes,
    equipmentCausingLossNotes,
    eventType,
    eventResult,
    objectStatus,
    satellitePosition,
    source,
    origin,
    this.dataMode,
    createdAt,
    createdBy,
    origNetwork
  );
}
}
