// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of air refueling events occurring on this flight.
 */
export class FlightPlanAirRefuelEvents_Full implements flatbuffers.IUnpackableObject<FlightPlanAirRefuelEvents_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlightPlanAirRefuelEvents_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlightPlanAirRefuelEvents_Full(bb:flatbuffers.ByteBuffer, obj?:FlightPlanAirRefuelEvents_Full):FlightPlanAirRefuelEvents_Full {
  return (obj || new FlightPlanAirRefuelEvents_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlightPlanAirRefuelEvents_Full(bb:flatbuffers.ByteBuffer, obj?:FlightPlanAirRefuelEvents_Full):FlightPlanAirRefuelEvents_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlightPlanAirRefuelEvents_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('FLIG');
}

/**
 * Additional degrade for air refueling, cumulative with fuelDegrade field percent.
 * Example: /// Example: 3.1
 * Constraints: No constraints specified.
 */
arDegrade():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The number of this air refueling event within the flight plan.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
arNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in pounds.
 * Example: /// Example: 1500.1
 * Constraints: No constraints specified.
 */
arExchangedFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel required to fly from air refueling exit point to air refueling divert alternate airfield in pounds.
 * Example: /// Example: 143000.1
 * Constraints: No constraints specified.
 */
divertFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fuel remaining at the air refueling exit in pounds.
 * Example: /// Example: 160000.1
 * Constraints: No constraints specified.
 */
exitFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startFlightPlanAirRefuelEvents_Full(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addArDegrade(builder:flatbuffers.Builder, arDegrade:number) {
  builder.addFieldFloat64(0, arDegrade, 0.0);
}

static addArNum(builder:flatbuffers.Builder, arNum:number) {
  builder.addFieldInt32(1, arNum, 0);
}

static addArExchangedFuel(builder:flatbuffers.Builder, arExchangedFuel:number) {
  builder.addFieldFloat64(2, arExchangedFuel, 0.0);
}

static addDivertFuel(builder:flatbuffers.Builder, divertFuel:number) {
  builder.addFieldFloat64(3, divertFuel, 0.0);
}

static addExitFuel(builder:flatbuffers.Builder, exitFuel:number) {
  builder.addFieldFloat64(4, exitFuel, 0.0);
}

static endFlightPlanAirRefuelEvents_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFlightPlanAirRefuelEvents_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'FLIG');
}

static finishSizePrefixedFlightPlanAirRefuelEvents_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'FLIG', true);
}

static createFlightPlanAirRefuelEvents_Full(builder:flatbuffers.Builder, arDegrade:number, arNum:number, arExchangedFuel:number, divertFuel:number, exitFuel:number):flatbuffers.Offset {
  FlightPlanAirRefuelEvents_Full.startFlightPlanAirRefuelEvents_Full(builder);
  FlightPlanAirRefuelEvents_Full.addArDegrade(builder, arDegrade);
  FlightPlanAirRefuelEvents_Full.addArNum(builder, arNum);
  FlightPlanAirRefuelEvents_Full.addArExchangedFuel(builder, arExchangedFuel);
  FlightPlanAirRefuelEvents_Full.addDivertFuel(builder, divertFuel);
  FlightPlanAirRefuelEvents_Full.addExitFuel(builder, exitFuel);
  return FlightPlanAirRefuelEvents_Full.endFlightPlanAirRefuelEvents_Full(builder);
}

unpack(): FlightPlanAirRefuelEvents_FullT {
  return new FlightPlanAirRefuelEvents_FullT(
    this.arDegrade(),
    this.arNum(),
    this.arExchangedFuel(),
    this.divertFuel(),
    this.exitFuel()
  );
}


unpackTo(_o: FlightPlanAirRefuelEvents_FullT): void {
  _o.arDegrade = this.arDegrade();
  _o.arNum = this.arNum();
  _o.arExchangedFuel = this.arExchangedFuel();
  _o.divertFuel = this.divertFuel();
  _o.exitFuel = this.exitFuel();
}
}

export class FlightPlanAirRefuelEvents_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public arDegrade: number = 0.0,
  public arNum: number = 0,
  public arExchangedFuel: number = 0.0,
  public divertFuel: number = 0.0,
  public exitFuel: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return FlightPlanAirRefuelEvents_Full.createFlightPlanAirRefuelEvents_Full(builder,
    this.arDegrade,
    this.arNum,
    this.arExchangedFuel,
    this.divertFuel,
    this.exitFuel
  );
}
}
