// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SolarArrayDetails_Abridged_dataMode_Enum } from './SolarArrayDetails_Abridged_dataMode_Enum.js';


/**
 * /// Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.
 */
export class SolarArrayDetails_Abridged implements flatbuffers.IUnpackableObject<SolarArrayDetails_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SolarArrayDetails_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSolarArrayDetails_Abridged(bb:flatbuffers.ByteBuffer, obj?:SolarArrayDetails_Abridged):SolarArrayDetails_Abridged {
  return (obj || new SolarArrayDetails_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSolarArrayDetails_Abridged(bb:flatbuffers.ByteBuffer, obj?:SolarArrayDetails_Abridged):SolarArrayDetails_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SolarArrayDetails_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SOLA');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SOLARARRAYDETAILS-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the parent SolarArray.
 * Example: /// Example: SOLARARRAY-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idSolarArray():string|null
idSolarArray(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSolarArray(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of solar array (e.g. U Shaped).
 * Example: /// Example: U Shaped
 * Constraints: Minimum length = 0, Maximum length = 64
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Solar array technology (e.g. Ga-As).
 * Example: /// Example: Ga-As
 * Constraints: Minimum length = 0, Maximum length = 64
 */
technology():string|null
technology(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
technology(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Solar array junction technology (e.g. Triple).
 * Example: /// Example: Triple
 * Constraints: Minimum length = 0, Maximum length = 64
 */
junctionTechnology():string|null
junctionTechnology(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
junctionTechnology(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the organization that manufactures the solar array.
 * Example: /// Example: MANUFACTURERORG-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
manufacturerOrgId():string|null
manufacturerOrgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturerOrgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Solar Array span in meters.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
span():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Solar Array area in square meters.
 * Example: /// Example: 123.4
 * Constraints: No constraints specified.
 */
area():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Solar array description/notes.
 * Example: /// Example: Example notes
 * Constraints: Minimum length = 0, Maximum length = 2147483647
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SolarArrayDetails_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SolarArrayDetails_Abridged_dataMode_Enum.REAL;
}

static startSolarArrayDetails_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(16);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdSolarArray(builder:flatbuffers.Builder, idSolarArrayOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idSolarArrayOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationMarkingOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, typeOffset, 0);
}

static addTechnology(builder:flatbuffers.Builder, technologyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, technologyOffset, 0);
}

static addJunctionTechnology(builder:flatbuffers.Builder, junctionTechnologyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, junctionTechnologyOffset, 0);
}

static addManufacturerOrgId(builder:flatbuffers.Builder, manufacturerOrgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, manufacturerOrgIdOffset, 0);
}

static addSpan(builder:flatbuffers.Builder, span:number) {
  builder.addFieldFloat64(7, span, 0.0);
}

static addArea(builder:flatbuffers.Builder, area:number) {
  builder.addFieldFloat64(8, area, 0.0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, descriptionOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SolarArrayDetails_Abridged_dataMode_Enum) {
  builder.addFieldInt8(15, dataMode, SolarArrayDetails_Abridged_dataMode_Enum.REAL);
}

static endSolarArrayDetails_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSolarArrayDetails_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SOLA');
}

static finishSizePrefixedSolarArrayDetails_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SOLA', true);
}

static createSolarArrayDetails_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idSolarArrayOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, technologyOffset:flatbuffers.Offset, junctionTechnologyOffset:flatbuffers.Offset, manufacturerOrgIdOffset:flatbuffers.Offset, span:number, area:number, descriptionOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:SolarArrayDetails_Abridged_dataMode_Enum):flatbuffers.Offset {
  SolarArrayDetails_Abridged.startSolarArrayDetails_Abridged(builder);
  SolarArrayDetails_Abridged.addId(builder, idOffset);
  SolarArrayDetails_Abridged.addIdSolarArray(builder, idSolarArrayOffset);
  SolarArrayDetails_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  SolarArrayDetails_Abridged.addType(builder, typeOffset);
  SolarArrayDetails_Abridged.addTechnology(builder, technologyOffset);
  SolarArrayDetails_Abridged.addJunctionTechnology(builder, junctionTechnologyOffset);
  SolarArrayDetails_Abridged.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
  SolarArrayDetails_Abridged.addSpan(builder, span);
  SolarArrayDetails_Abridged.addArea(builder, area);
  SolarArrayDetails_Abridged.addDescription(builder, descriptionOffset);
  SolarArrayDetails_Abridged.addCreatedAt(builder, createdAtOffset);
  SolarArrayDetails_Abridged.addCreatedBy(builder, createdByOffset);
  SolarArrayDetails_Abridged.addSource(builder, sourceOffset);
  SolarArrayDetails_Abridged.addOrigin(builder, originOffset);
  SolarArrayDetails_Abridged.addOrigNetwork(builder, origNetworkOffset);
  SolarArrayDetails_Abridged.addDataMode(builder, dataMode);
  return SolarArrayDetails_Abridged.endSolarArrayDetails_Abridged(builder);
}

unpack(): SolarArrayDetails_AbridgedT {
  return new SolarArrayDetails_AbridgedT(
    this.id(),
    this.idSolarArray(),
    this.classificationMarking(),
    this.type(),
    this.technology(),
    this.junctionTechnology(),
    this.manufacturerOrgId(),
    this.span(),
    this.area(),
    this.description(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: SolarArrayDetails_AbridgedT): void {
  _o.id = this.id();
  _o.idSolarArray = this.idSolarArray();
  _o.classificationMarking = this.classificationMarking();
  _o.type = this.type();
  _o.technology = this.technology();
  _o.junctionTechnology = this.junctionTechnology();
  _o.manufacturerOrgId = this.manufacturerOrgId();
  _o.span = this.span();
  _o.area = this.area();
  _o.description = this.description();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class SolarArrayDetails_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idSolarArray: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public technology: string|Uint8Array|null = null,
  public junctionTechnology: string|Uint8Array|null = null,
  public manufacturerOrgId: string|Uint8Array|null = null,
  public span: number = 0.0,
  public area: number = 0.0,
  public description: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: SolarArrayDetails_Abridged_dataMode_Enum = SolarArrayDetails_Abridged_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idSolarArray = (this.idSolarArray !== null ? builder.createString(this.idSolarArray!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const technology = (this.technology !== null ? builder.createString(this.technology!) : 0);
  const junctionTechnology = (this.junctionTechnology !== null ? builder.createString(this.junctionTechnology!) : 0);
  const manufacturerOrgId = (this.manufacturerOrgId !== null ? builder.createString(this.manufacturerOrgId!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return SolarArrayDetails_Abridged.createSolarArrayDetails_Abridged(builder,
    id,
    idSolarArray,
    classificationMarking,
    type,
    technology,
    junctionTechnology,
    manufacturerOrgId,
    this.span,
    this.area,
    description,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
