// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SARObservation_Full_dataMode_Enum } from './sarobservation-full-data-mode-enum.js';


/**
 * /// Model representation of observation data for SAR based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
 */
export class SARObservation_Full implements flatbuffers.IUnpackableObject<SARObservation_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SARObservation_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSARObservation_Full(bb:flatbuffers.ByteBuffer, obj?:SARObservation_Full):SARObservation_Full {
  return (obj || new SARObservation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSARObservation_Full(bb:flatbuffers.ByteBuffer, obj?:SARObservation_Full):SARObservation_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SARObservation_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SARO');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SAROBSERVATION-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the spacecraft hosting the sensor associated with this collection.
 * Example: /// Example: 36036
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.
 * Example: /// Example: 36036
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.
 * Example: /// Example: 36036
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the reporting sensor.
 * Example: /// Example: 36036-1L
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: SMOS-1L
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: EXTERNAL-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalId():string|null
externalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier to indicate the specific collection tasking which produced this observation.
 * Example: /// Example: COLLECTION-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
collectionId():string|null
collectionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collectionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the specific detection within a collection which produced this observation.
 * Example: /// Example: DETECTION-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
detectionId():string|null
detectionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
detectionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Collection start time in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2023-04-22T17:35:00.123456Z
 * Constraints: No constraints specified.
 */
collectionStart():string|null
collectionStart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collectionStart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Collection end time in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2023-04-22T17:38:10.20177Z
 * Constraints: No constraints specified.
 */
collectionEnd():string|null
collectionEnd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collectionEnd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.
 * Example: /// Example: 2023-04-22T17:36:35.100885Z
 * Constraints: No constraints specified.
 */
centerTime():string|null
centerTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
centerTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The detection start time in ISO 8601 UTC format, with microsecond precision.
 * Example: /// Example: 2023-07-08T17:35:01.615396Z
 * Constraints: No constraints specified.
 */
detectionStart():string|null
detectionStart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
detectionStart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The detection end time in ISO 8601 UTC format, with microsecond precision.
 * Example: /// Example: 2023-07-08T17:35:20.77219Z
 * Constraints: No constraints specified.
 */
detectionEnd():string|null
detectionEnd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
detectionEnd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The duration, in seconds, of this detection.
 * Example: /// Example: 79.156794
 * Constraints: No constraints specified.
 */
dwellTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.
 * Example: /// Example: ASCENDING
 * Constraints: Minimum length = 0, Maximum length = 16
 */
orbitState():string|null
orbitState(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
orbitState(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).
 * Example: /// Example: SPOTLIGHT
 * Constraints: Minimum length = 1, Maximum length = 36
 */
sarMode():string|null
sarMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sarMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.
 * Example: /// Example: L
 * Constraints: Minimum length = 0, Maximum length = 5
 */
operatingBand():string|null
operatingBand(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operatingBand(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The operating frequency, in Mhz, for the collection.
 * Example: /// Example: 2345.6
 * Constraints: No constraints specified.
 */
operatingFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Signal to noise ratio, in dB.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
snr():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
 * Example: /// Example: H
 * Constraints: Minimum length = 0, Maximum length = 4
 */
txPolarization():string|null
txPolarization(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
txPolarization(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
 * Example: /// Example: H
 * Constraints: Minimum length = 0, Maximum length = 4
 */
rxPolarization():string|null
rxPolarization(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rxPolarization(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The graze angle (also referred to as look angle) for the collection in degrees.
 * Example: /// Example: 45.1
 * Constraints: No constraints specified.
 */
grazeAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The center incidence angle in degrees.
 * Example: /// Example: 45.1
 * Constraints: No constraints specified.
 */
incidenceAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The squint angle for the collection in degrees.
 * Example: /// Example: 1.2
 * Constraints: No constraints specified.
 */
squintAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The bandwidth frequency of the pulse in Mhz.
 * Example: /// Example: 500.1
 * Constraints: No constraints specified.
 */
pulseBandwidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The duration of a pulse in seconds.
 * Example: /// Example: 1.1e-05
 * Constraints: No constraints specified.
 */
pulseDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Required sweep angle for the continuous spot scene in degrees.
 * Example: /// Example: 45.1
 * Constraints: No constraints specified.
 */
continuousSpotAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Slant distance from sensor to center point of imaging event in kilometers.
 * Example: /// Example: 60.1
 * Constraints: No constraints specified.
 */
slantRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Specifies the closest range, in kilometers, from the flight path to target during the collection.
 * Example: /// Example: 12.1
 * Constraints: No constraints specified.
 */
nearRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Specifies the farthest range, in kilometers, from the flight path to target during the collection.
 * Example: /// Example: 34.1
 * Constraints: No constraints specified.
 */
farRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The length of the collection as projected on the ground in kilometers.
 * Example: /// Example: 12.1
 * Constraints: No constraints specified.
 */
swathLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional geographical region or polygon (lat/lon pairs) of the area surrounding the image event as projected on the ground.
 * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
 * Constraints: No constraints specified.
 */
area():string|null
area(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
area(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
 * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
 * Constraints: No constraints specified.
 */
atext():string|null
atext(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atext(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
 * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
 * Constraints: No constraints specified.
 */
agjson():string|null
agjson(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
agjson(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of region as projected on the ground (POLYGON, POINT, LINE).
 * Example: /// Example: POLYGON
 * Constraints: Minimum length = 0, Maximum length = 128
 */
atype():string|null
atype(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atype(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of dimensions of the geometry depicted by region.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
andims():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Geographical spatial_ref_sys for region.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
asrid():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The pixel spacing in the range direction measured in meters.
 * Example: /// Example: 0.123
 * Constraints: No constraints specified.
 */
spacingRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The pixel spacing in the azimuth direction measured in meters.
 * Example: /// Example: 0.123
 * Constraints: No constraints specified.
 */
spacingAzimuth():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The number of looks in the azimuth direction.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
looksAzimuth():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The number of looks in the range direction.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
looksRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The resolution in the range direction measured in meters.
 * Example: /// Example: 0.123
 * Constraints: No constraints specified.
 */
resolutionRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The resolution in the azimuth direction measured in meters.
 * Example: /// Example: 0.123
 * Constraints: No constraints specified.
 */
resolutionAzimuth():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The antenna pointing direction (LEFT, RIGHT).
 * Example: /// Example: RIGHT
 * Constraints: Minimum length = 0, Maximum length = 16
 */
obDirection():string|null
obDirection(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obDirection(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The coordinate system used for the sensor velocity and target position vectors for the collection.
 * Example: /// Example: ECEF
 * Constraints: Minimum length = 0, Maximum length = 16
 */
coordSys():string|null
coordSys(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
coordSys(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The collection target X position in kilometers.
 * Example: /// Example: 50.23
 * Constraints: No constraints specified.
 */
targetposx():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The collection target Y position in kilometers.
 * Example: /// Example: 50.23
 * Constraints: No constraints specified.
 */
targetposy():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The collection target Z position in kilometers.
 * Example: /// Example: 50.23
 * Constraints: No constraints specified.
 */
targetposz():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor altitude during collection in kilometers.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senalt():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor platform X-velocity during collection in kilometers/second.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senvelx():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor platform Y-velocity during collection in kilometers/second.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senvely():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Sensor platform Z-velocity during collection in kilometers/second.
 * Example: /// Example: 1.1
 * Constraints: No constraints specified.
 */
senvelz():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.1
 * Constraints: No constraints specified.
 */
senlatStart():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 179.1
 * Constraints: No constraints specified.
 */
senlonStart():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.1
 * Constraints: No constraints specified.
 */
senlatEnd():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 179.1
 * Constraints: No constraints specified.
 */
senlonEnd():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: TRANSACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
 * Example: /// Example: ['ESID', 'GROUNDIMAGE']
 * Constraints: No constraints specified.
 */
srcTyps(index: number):string
srcTyps(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcTyps(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcTypsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).
 * Example: /// Example: ['f7e01cd4-626b-441f-a423-17b160eb78ba', '223833c4-be0d-4fdb-a2e4-325a48eccced']
 * Constraints: No constraints specified.
 */
srcIds(index: number):string
srcIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
onOrbit():string|null
onOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
onOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2023-04-22T17:51:40.854Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SARObservation_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SARObservation_Full_dataMode_Enum.REAL;
}

static startSARObservation_Full(builder:flatbuffers.Builder) {
  builder.startObject(70);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(3, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, origObjectIdOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idSensorOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, origSensorIdOffset, 0);
}

static addExternalId(builder:flatbuffers.Builder, externalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, externalIdOffset, 0);
}

static addCollectionId(builder:flatbuffers.Builder, collectionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, collectionIdOffset, 0);
}

static addDetectionId(builder:flatbuffers.Builder, detectionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, detectionIdOffset, 0);
}

static addCollectionStart(builder:flatbuffers.Builder, collectionStartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, collectionStartOffset, 0);
}

static addCollectionEnd(builder:flatbuffers.Builder, collectionEndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, collectionEndOffset, 0);
}

static addCenterTime(builder:flatbuffers.Builder, centerTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, centerTimeOffset, 0);
}

static addDetectionStart(builder:flatbuffers.Builder, detectionStartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, detectionStartOffset, 0);
}

static addDetectionEnd(builder:flatbuffers.Builder, detectionEndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, detectionEndOffset, 0);
}

static addDwellTime(builder:flatbuffers.Builder, dwellTime:number) {
  builder.addFieldFloat64(15, dwellTime, 0.0);
}

static addOrbitState(builder:flatbuffers.Builder, orbitStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, orbitStateOffset, 0);
}

static addSarMode(builder:flatbuffers.Builder, sarModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, sarModeOffset, 0);
}

static addOperatingBand(builder:flatbuffers.Builder, operatingBandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, operatingBandOffset, 0);
}

static addOperatingFreq(builder:flatbuffers.Builder, operatingFreq:number) {
  builder.addFieldFloat64(19, operatingFreq, 0.0);
}

static addSnr(builder:flatbuffers.Builder, snr:number) {
  builder.addFieldFloat64(20, snr, 0.0);
}

static addTxPolarization(builder:flatbuffers.Builder, txPolarizationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, txPolarizationOffset, 0);
}

static addRxPolarization(builder:flatbuffers.Builder, rxPolarizationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, rxPolarizationOffset, 0);
}

static addGrazeAngle(builder:flatbuffers.Builder, grazeAngle:number) {
  builder.addFieldFloat64(23, grazeAngle, 0.0);
}

static addIncidenceAngle(builder:flatbuffers.Builder, incidenceAngle:number) {
  builder.addFieldFloat64(24, incidenceAngle, 0.0);
}

static addSquintAngle(builder:flatbuffers.Builder, squintAngle:number) {
  builder.addFieldFloat64(25, squintAngle, 0.0);
}

static addPulseBandwidth(builder:flatbuffers.Builder, pulseBandwidth:number) {
  builder.addFieldFloat64(26, pulseBandwidth, 0.0);
}

static addPulseDuration(builder:flatbuffers.Builder, pulseDuration:number) {
  builder.addFieldFloat64(27, pulseDuration, 0.0);
}

static addContinuousSpotAngle(builder:flatbuffers.Builder, continuousSpotAngle:number) {
  builder.addFieldFloat64(28, continuousSpotAngle, 0.0);
}

static addSlantRange(builder:flatbuffers.Builder, slantRange:number) {
  builder.addFieldFloat64(29, slantRange, 0.0);
}

static addNearRange(builder:flatbuffers.Builder, nearRange:number) {
  builder.addFieldFloat64(30, nearRange, 0.0);
}

static addFarRange(builder:flatbuffers.Builder, farRange:number) {
  builder.addFieldFloat64(31, farRange, 0.0);
}

static addSwathLength(builder:flatbuffers.Builder, swathLength:number) {
  builder.addFieldFloat64(32, swathLength, 0.0);
}

static addArea(builder:flatbuffers.Builder, areaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, areaOffset, 0);
}

static addAtext(builder:flatbuffers.Builder, atextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, atextOffset, 0);
}

static addAgjson(builder:flatbuffers.Builder, agjsonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, agjsonOffset, 0);
}

static addAtype(builder:flatbuffers.Builder, atypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, atypeOffset, 0);
}

static addAndims(builder:flatbuffers.Builder, andims:number) {
  builder.addFieldInt32(37, andims, 0);
}

static addAsrid(builder:flatbuffers.Builder, asrid:number) {
  builder.addFieldInt32(38, asrid, 0);
}

static addSpacingRange(builder:flatbuffers.Builder, spacingRange:number) {
  builder.addFieldFloat64(39, spacingRange, 0.0);
}

static addSpacingAzimuth(builder:flatbuffers.Builder, spacingAzimuth:number) {
  builder.addFieldFloat64(40, spacingAzimuth, 0.0);
}

static addLooksAzimuth(builder:flatbuffers.Builder, looksAzimuth:number) {
  builder.addFieldInt32(41, looksAzimuth, 0);
}

static addLooksRange(builder:flatbuffers.Builder, looksRange:number) {
  builder.addFieldInt32(42, looksRange, 0);
}

static addResolutionRange(builder:flatbuffers.Builder, resolutionRange:number) {
  builder.addFieldFloat64(43, resolutionRange, 0.0);
}

static addResolutionAzimuth(builder:flatbuffers.Builder, resolutionAzimuth:number) {
  builder.addFieldFloat64(44, resolutionAzimuth, 0.0);
}

static addObDirection(builder:flatbuffers.Builder, obDirectionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, obDirectionOffset, 0);
}

static addCoordSys(builder:flatbuffers.Builder, coordSysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, coordSysOffset, 0);
}

static addTargetposx(builder:flatbuffers.Builder, targetposx:number) {
  builder.addFieldFloat64(47, targetposx, 0.0);
}

static addTargetposy(builder:flatbuffers.Builder, targetposy:number) {
  builder.addFieldFloat64(48, targetposy, 0.0);
}

static addTargetposz(builder:flatbuffers.Builder, targetposz:number) {
  builder.addFieldFloat64(49, targetposz, 0.0);
}

static addSenalt(builder:flatbuffers.Builder, senalt:number) {
  builder.addFieldFloat64(50, senalt, 0.0);
}

static addSenvelx(builder:flatbuffers.Builder, senvelx:number) {
  builder.addFieldFloat64(51, senvelx, 0.0);
}

static addSenvely(builder:flatbuffers.Builder, senvely:number) {
  builder.addFieldFloat64(52, senvely, 0.0);
}

static addSenvelz(builder:flatbuffers.Builder, senvelz:number) {
  builder.addFieldFloat64(53, senvelz, 0.0);
}

static addSenlatStart(builder:flatbuffers.Builder, senlatStart:number) {
  builder.addFieldFloat64(54, senlatStart, 0.0);
}

static addSenlonStart(builder:flatbuffers.Builder, senlonStart:number) {
  builder.addFieldFloat64(55, senlonStart, 0.0);
}

static addSenlatEnd(builder:flatbuffers.Builder, senlatEnd:number) {
  builder.addFieldFloat64(56, senlatEnd, 0.0);
}

static addSenlonEnd(builder:flatbuffers.Builder, senlonEnd:number) {
  builder.addFieldFloat64(57, senlonEnd, 0.0);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, transactionIdOffset, 0);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSrcTyps(builder:flatbuffers.Builder, srcTypsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, srcTypsOffset, 0);
}

static createSrcTypsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcTypsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSrcIds(builder:flatbuffers.Builder, srcIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, srcIdsOffset, 0);
}

static createSrcIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOnOrbit(builder:flatbuffers.Builder, onOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, onOrbitOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, origNetworkOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(68, sourceDlOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SARObservation_Full_dataMode_Enum) {
  builder.addFieldInt8(69, dataMode, SARObservation_Full_dataMode_Enum.REAL);
}

static endSARObservation_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSARObservation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SARO');
}

static finishSizePrefixedSARObservation_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SARO', true);
}

static createSARObservation_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, externalIdOffset:flatbuffers.Offset, collectionIdOffset:flatbuffers.Offset, detectionIdOffset:flatbuffers.Offset, collectionStartOffset:flatbuffers.Offset, collectionEndOffset:flatbuffers.Offset, centerTimeOffset:flatbuffers.Offset, detectionStartOffset:flatbuffers.Offset, detectionEndOffset:flatbuffers.Offset, dwellTime:number, orbitStateOffset:flatbuffers.Offset, sarModeOffset:flatbuffers.Offset, operatingBandOffset:flatbuffers.Offset, operatingFreq:number, snr:number, txPolarizationOffset:flatbuffers.Offset, rxPolarizationOffset:flatbuffers.Offset, grazeAngle:number, incidenceAngle:number, squintAngle:number, pulseBandwidth:number, pulseDuration:number, continuousSpotAngle:number, slantRange:number, nearRange:number, farRange:number, swathLength:number, areaOffset:flatbuffers.Offset, atextOffset:flatbuffers.Offset, agjsonOffset:flatbuffers.Offset, atypeOffset:flatbuffers.Offset, andims:number, asrid:number, spacingRange:number, spacingAzimuth:number, looksAzimuth:number, looksRange:number, resolutionRange:number, resolutionAzimuth:number, obDirectionOffset:flatbuffers.Offset, coordSysOffset:flatbuffers.Offset, targetposx:number, targetposy:number, targetposz:number, senalt:number, senvelx:number, senvely:number, senvelz:number, senlatStart:number, senlonStart:number, senlatEnd:number, senlonEnd:number, transactionIdOffset:flatbuffers.Offset, tagsOffset:flatbuffers.Offset, srcTypsOffset:flatbuffers.Offset, srcIdsOffset:flatbuffers.Offset, onOrbitOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, dataMode:SARObservation_Full_dataMode_Enum):flatbuffers.Offset {
  SARObservation_Full.startSARObservation_Full(builder);
  SARObservation_Full.addId(builder, idOffset);
  SARObservation_Full.addClassificationMarking(builder, classificationMarkingOffset);
  SARObservation_Full.addIdOnOrbit(builder, idOnOrbitOffset);
  SARObservation_Full.addSatNo(builder, satNo);
  SARObservation_Full.addOrigObjectId(builder, origObjectIdOffset);
  SARObservation_Full.addIdSensor(builder, idSensorOffset);
  SARObservation_Full.addOrigSensorId(builder, origSensorIdOffset);
  SARObservation_Full.addExternalId(builder, externalIdOffset);
  SARObservation_Full.addCollectionId(builder, collectionIdOffset);
  SARObservation_Full.addDetectionId(builder, detectionIdOffset);
  SARObservation_Full.addCollectionStart(builder, collectionStartOffset);
  SARObservation_Full.addCollectionEnd(builder, collectionEndOffset);
  SARObservation_Full.addCenterTime(builder, centerTimeOffset);
  SARObservation_Full.addDetectionStart(builder, detectionStartOffset);
  SARObservation_Full.addDetectionEnd(builder, detectionEndOffset);
  SARObservation_Full.addDwellTime(builder, dwellTime);
  SARObservation_Full.addOrbitState(builder, orbitStateOffset);
  SARObservation_Full.addSarMode(builder, sarModeOffset);
  SARObservation_Full.addOperatingBand(builder, operatingBandOffset);
  SARObservation_Full.addOperatingFreq(builder, operatingFreq);
  SARObservation_Full.addSnr(builder, snr);
  SARObservation_Full.addTxPolarization(builder, txPolarizationOffset);
  SARObservation_Full.addRxPolarization(builder, rxPolarizationOffset);
  SARObservation_Full.addGrazeAngle(builder, grazeAngle);
  SARObservation_Full.addIncidenceAngle(builder, incidenceAngle);
  SARObservation_Full.addSquintAngle(builder, squintAngle);
  SARObservation_Full.addPulseBandwidth(builder, pulseBandwidth);
  SARObservation_Full.addPulseDuration(builder, pulseDuration);
  SARObservation_Full.addContinuousSpotAngle(builder, continuousSpotAngle);
  SARObservation_Full.addSlantRange(builder, slantRange);
  SARObservation_Full.addNearRange(builder, nearRange);
  SARObservation_Full.addFarRange(builder, farRange);
  SARObservation_Full.addSwathLength(builder, swathLength);
  SARObservation_Full.addArea(builder, areaOffset);
  SARObservation_Full.addAtext(builder, atextOffset);
  SARObservation_Full.addAgjson(builder, agjsonOffset);
  SARObservation_Full.addAtype(builder, atypeOffset);
  SARObservation_Full.addAndims(builder, andims);
  SARObservation_Full.addAsrid(builder, asrid);
  SARObservation_Full.addSpacingRange(builder, spacingRange);
  SARObservation_Full.addSpacingAzimuth(builder, spacingAzimuth);
  SARObservation_Full.addLooksAzimuth(builder, looksAzimuth);
  SARObservation_Full.addLooksRange(builder, looksRange);
  SARObservation_Full.addResolutionRange(builder, resolutionRange);
  SARObservation_Full.addResolutionAzimuth(builder, resolutionAzimuth);
  SARObservation_Full.addObDirection(builder, obDirectionOffset);
  SARObservation_Full.addCoordSys(builder, coordSysOffset);
  SARObservation_Full.addTargetposx(builder, targetposx);
  SARObservation_Full.addTargetposy(builder, targetposy);
  SARObservation_Full.addTargetposz(builder, targetposz);
  SARObservation_Full.addSenalt(builder, senalt);
  SARObservation_Full.addSenvelx(builder, senvelx);
  SARObservation_Full.addSenvely(builder, senvely);
  SARObservation_Full.addSenvelz(builder, senvelz);
  SARObservation_Full.addSenlatStart(builder, senlatStart);
  SARObservation_Full.addSenlonStart(builder, senlonStart);
  SARObservation_Full.addSenlatEnd(builder, senlatEnd);
  SARObservation_Full.addSenlonEnd(builder, senlonEnd);
  SARObservation_Full.addTransactionId(builder, transactionIdOffset);
  SARObservation_Full.addTags(builder, tagsOffset);
  SARObservation_Full.addSrcTyps(builder, srcTypsOffset);
  SARObservation_Full.addSrcIds(builder, srcIdsOffset);
  SARObservation_Full.addOnOrbit(builder, onOrbitOffset);
  SARObservation_Full.addCreatedAt(builder, createdAtOffset);
  SARObservation_Full.addCreatedBy(builder, createdByOffset);
  SARObservation_Full.addSource(builder, sourceOffset);
  SARObservation_Full.addOrigin(builder, originOffset);
  SARObservation_Full.addOrigNetwork(builder, origNetworkOffset);
  SARObservation_Full.addSourceDl(builder, sourceDlOffset);
  SARObservation_Full.addDataMode(builder, dataMode);
  return SARObservation_Full.endSARObservation_Full(builder);
}

unpack(): SARObservation_FullT {
  return new SARObservation_FullT(
    this.id(),
    this.classificationMarking(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.idSensor(),
    this.origSensorId(),
    this.externalId(),
    this.collectionId(),
    this.detectionId(),
    this.collectionStart(),
    this.collectionEnd(),
    this.centerTime(),
    this.detectionStart(),
    this.detectionEnd(),
    this.dwellTime(),
    this.orbitState(),
    this.sarMode(),
    this.operatingBand(),
    this.operatingFreq(),
    this.snr(),
    this.txPolarization(),
    this.rxPolarization(),
    this.grazeAngle(),
    this.incidenceAngle(),
    this.squintAngle(),
    this.pulseBandwidth(),
    this.pulseDuration(),
    this.continuousSpotAngle(),
    this.slantRange(),
    this.nearRange(),
    this.farRange(),
    this.swathLength(),
    this.area(),
    this.atext(),
    this.agjson(),
    this.atype(),
    this.andims(),
    this.asrid(),
    this.spacingRange(),
    this.spacingAzimuth(),
    this.looksAzimuth(),
    this.looksRange(),
    this.resolutionRange(),
    this.resolutionAzimuth(),
    this.obDirection(),
    this.coordSys(),
    this.targetposx(),
    this.targetposy(),
    this.targetposz(),
    this.senalt(),
    this.senvelx(),
    this.senvely(),
    this.senvelz(),
    this.senlatStart(),
    this.senlonStart(),
    this.senlatEnd(),
    this.senlonEnd(),
    this.transactionId(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length()),
    this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTyps_Length()),
    this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIds_Length()),
    this.onOrbit(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.sourceDl(),
    this.dataMode()
  );
}


unpackTo(_o: SARObservation_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.idSensor = this.idSensor();
  _o.origSensorId = this.origSensorId();
  _o.externalId = this.externalId();
  _o.collectionId = this.collectionId();
  _o.detectionId = this.detectionId();
  _o.collectionStart = this.collectionStart();
  _o.collectionEnd = this.collectionEnd();
  _o.centerTime = this.centerTime();
  _o.detectionStart = this.detectionStart();
  _o.detectionEnd = this.detectionEnd();
  _o.dwellTime = this.dwellTime();
  _o.orbitState = this.orbitState();
  _o.sarMode = this.sarMode();
  _o.operatingBand = this.operatingBand();
  _o.operatingFreq = this.operatingFreq();
  _o.snr = this.snr();
  _o.txPolarization = this.txPolarization();
  _o.rxPolarization = this.rxPolarization();
  _o.grazeAngle = this.grazeAngle();
  _o.incidenceAngle = this.incidenceAngle();
  _o.squintAngle = this.squintAngle();
  _o.pulseBandwidth = this.pulseBandwidth();
  _o.pulseDuration = this.pulseDuration();
  _o.continuousSpotAngle = this.continuousSpotAngle();
  _o.slantRange = this.slantRange();
  _o.nearRange = this.nearRange();
  _o.farRange = this.farRange();
  _o.swathLength = this.swathLength();
  _o.area = this.area();
  _o.atext = this.atext();
  _o.agjson = this.agjson();
  _o.atype = this.atype();
  _o.andims = this.andims();
  _o.asrid = this.asrid();
  _o.spacingRange = this.spacingRange();
  _o.spacingAzimuth = this.spacingAzimuth();
  _o.looksAzimuth = this.looksAzimuth();
  _o.looksRange = this.looksRange();
  _o.resolutionRange = this.resolutionRange();
  _o.resolutionAzimuth = this.resolutionAzimuth();
  _o.obDirection = this.obDirection();
  _o.coordSys = this.coordSys();
  _o.targetposx = this.targetposx();
  _o.targetposy = this.targetposy();
  _o.targetposz = this.targetposz();
  _o.senalt = this.senalt();
  _o.senvelx = this.senvelx();
  _o.senvely = this.senvely();
  _o.senvelz = this.senvelz();
  _o.senlatStart = this.senlatStart();
  _o.senlonStart = this.senlonStart();
  _o.senlatEnd = this.senlatEnd();
  _o.senlonEnd = this.senlonEnd();
  _o.transactionId = this.transactionId();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length());
  _o.srcTyps = this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTyps_Length());
  _o.srcIds = this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIds_Length());
  _o.onOrbit = this.onOrbit();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.sourceDL = this.sourceDl();
  _o.dataMode = this.dataMode();
}
}

export class SARObservation_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public externalId: string|Uint8Array|null = null,
  public collectionId: string|Uint8Array|null = null,
  public detectionId: string|Uint8Array|null = null,
  public collectionStart: string|Uint8Array|null = null,
  public collectionEnd: string|Uint8Array|null = null,
  public centerTime: string|Uint8Array|null = null,
  public detectionStart: string|Uint8Array|null = null,
  public detectionEnd: string|Uint8Array|null = null,
  public dwellTime: number = 0.0,
  public orbitState: string|Uint8Array|null = null,
  public sarMode: string|Uint8Array|null = null,
  public operatingBand: string|Uint8Array|null = null,
  public operatingFreq: number = 0.0,
  public snr: number = 0.0,
  public txPolarization: string|Uint8Array|null = null,
  public rxPolarization: string|Uint8Array|null = null,
  public grazeAngle: number = 0.0,
  public incidenceAngle: number = 0.0,
  public squintAngle: number = 0.0,
  public pulseBandwidth: number = 0.0,
  public pulseDuration: number = 0.0,
  public continuousSpotAngle: number = 0.0,
  public slantRange: number = 0.0,
  public nearRange: number = 0.0,
  public farRange: number = 0.0,
  public swathLength: number = 0.0,
  public area: string|Uint8Array|null = null,
  public atext: string|Uint8Array|null = null,
  public agjson: string|Uint8Array|null = null,
  public atype: string|Uint8Array|null = null,
  public andims: number = 0,
  public asrid: number = 0,
  public spacingRange: number = 0.0,
  public spacingAzimuth: number = 0.0,
  public looksAzimuth: number = 0,
  public looksRange: number = 0,
  public resolutionRange: number = 0.0,
  public resolutionAzimuth: number = 0.0,
  public obDirection: string|Uint8Array|null = null,
  public coordSys: string|Uint8Array|null = null,
  public targetposx: number = 0.0,
  public targetposy: number = 0.0,
  public targetposz: number = 0.0,
  public senalt: number = 0.0,
  public senvelx: number = 0.0,
  public senvely: number = 0.0,
  public senvelz: number = 0.0,
  public senlatStart: number = 0.0,
  public senlonStart: number = 0.0,
  public senlatEnd: number = 0.0,
  public senlonEnd: number = 0.0,
  public transactionId: string|Uint8Array|null = null,
  public tags: (string)[] = [],
  public srcTyps: (string)[] = [],
  public srcIds: (string)[] = [],
  public onOrbit: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public sourceDL: string|Uint8Array|null = null,
  public dataMode: SARObservation_Full_dataMode_Enum = SARObservation_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const externalId = (this.externalId !== null ? builder.createString(this.externalId!) : 0);
  const collectionId = (this.collectionId !== null ? builder.createString(this.collectionId!) : 0);
  const detectionId = (this.detectionId !== null ? builder.createString(this.detectionId!) : 0);
  const collectionStart = (this.collectionStart !== null ? builder.createString(this.collectionStart!) : 0);
  const collectionEnd = (this.collectionEnd !== null ? builder.createString(this.collectionEnd!) : 0);
  const centerTime = (this.centerTime !== null ? builder.createString(this.centerTime!) : 0);
  const detectionStart = (this.detectionStart !== null ? builder.createString(this.detectionStart!) : 0);
  const detectionEnd = (this.detectionEnd !== null ? builder.createString(this.detectionEnd!) : 0);
  const orbitState = (this.orbitState !== null ? builder.createString(this.orbitState!) : 0);
  const sarMode = (this.sarMode !== null ? builder.createString(this.sarMode!) : 0);
  const operatingBand = (this.operatingBand !== null ? builder.createString(this.operatingBand!) : 0);
  const txPolarization = (this.txPolarization !== null ? builder.createString(this.txPolarization!) : 0);
  const rxPolarization = (this.rxPolarization !== null ? builder.createString(this.rxPolarization!) : 0);
  const area = (this.area !== null ? builder.createString(this.area!) : 0);
  const atext = (this.atext !== null ? builder.createString(this.atext!) : 0);
  const agjson = (this.agjson !== null ? builder.createString(this.agjson!) : 0);
  const atype = (this.atype !== null ? builder.createString(this.atype!) : 0);
  const obDirection = (this.obDirection !== null ? builder.createString(this.obDirection!) : 0);
  const coordSys = (this.coordSys !== null ? builder.createString(this.coordSys!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const tags = SARObservation_Full.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const srcTyps = SARObservation_Full.createSrcTypsVector(builder, builder.createObjectOffsetList(this.srcTyps));
  const srcIds = SARObservation_Full.createSrcIdsVector(builder, builder.createObjectOffsetList(this.srcIds));
  const onOrbit = (this.onOrbit !== null ? builder.createString(this.onOrbit!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const sourceDL = (this.sourceDL !== null ? builder.createString(this.sourceDL!) : 0);

  return SARObservation_Full.createSARObservation_Full(builder,
    id,
    classificationMarking,
    idOnOrbit,
    this.satNo,
    origObjectId,
    idSensor,
    origSensorId,
    externalId,
    collectionId,
    detectionId,
    collectionStart,
    collectionEnd,
    centerTime,
    detectionStart,
    detectionEnd,
    this.dwellTime,
    orbitState,
    sarMode,
    operatingBand,
    this.operatingFreq,
    this.snr,
    txPolarization,
    rxPolarization,
    this.grazeAngle,
    this.incidenceAngle,
    this.squintAngle,
    this.pulseBandwidth,
    this.pulseDuration,
    this.continuousSpotAngle,
    this.slantRange,
    this.nearRange,
    this.farRange,
    this.swathLength,
    area,
    atext,
    agjson,
    atype,
    this.andims,
    this.asrid,
    this.spacingRange,
    this.spacingAzimuth,
    this.looksAzimuth,
    this.looksRange,
    this.resolutionRange,
    this.resolutionAzimuth,
    obDirection,
    coordSys,
    this.targetposx,
    this.targetposy,
    this.targetposz,
    this.senalt,
    this.senvelx,
    this.senvely,
    this.senvelz,
    this.senlatStart,
    this.senlonStart,
    this.senlatEnd,
    this.senlonEnd,
    transactionId,
    tags,
    srcTyps,
    srcIds,
    onOrbit,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    sourceDL,
    this.dataMode
  );
}
}
