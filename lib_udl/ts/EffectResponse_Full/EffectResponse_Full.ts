// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { EffectResponse_Full_dataMode_Enum } from './EffectResponse_Full_dataMode_Enum.js';


/**
 * /// A response for various effects on a target.
 */
export class EffectResponse_Full implements flatbuffers.IUnpackableObject<EffectResponse_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EffectResponse_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEffectResponse_Full(bb:flatbuffers.ByteBuffer, obj?:EffectResponse_Full):EffectResponse_Full {
  return (obj || new EffectResponse_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEffectResponse_Full(bb:flatbuffers.ByteBuffer, obj?:EffectResponse_Full):EffectResponse_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EffectResponse_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EFFE');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: EFFECTRESPONSE-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the EffectRequest associated with this response.
 * Example: /// Example: EFFECTREQUEST-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idEffectRequest():string|null
idEffectRequest(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idEffectRequest(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The external system identifier of the associated effect request. A human readable unique id.
 * Example: /// Example: EXTERNALREQUEST-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
externalRequestId():string|null
externalRequestId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalRequestId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of response in this record (e.g. COA, SCORECARD, etc.).
 * Example: /// Example: COA
 * Constraints: Minimum length = 1, Maximum length = 24
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
 * Example: /// Example: AIRCRAFT
 * Constraints: Minimum length = 0, Maximum length = 64
 */
actorSrcType():string|null
actorSrcType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actorSrcType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The record ID, depending on the type identified in actorSrcType, of the requested asset.
 * Example: /// Example: RC-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
actorSrcId():string|null
actorSrcId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actorSrcId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of munition being fired.
 * Example: /// Example: Dummy
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
munitionType():string|null
munitionType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
munitionType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the munition.
 * Example: /// Example: MUNITION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
munitionId():string|null
munitionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
munitionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of shots required to destroy target.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
shotsRequired():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The probability of kill (0-1) of the target being destroyed.
 * Example: /// Example: 0.7
 * Constraints: No constraints specified.
 */
probabilityOfKill():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The collateral damage estimate (CDE) of the munition being fired.
 * Example: /// Example: 0.5
 * Constraints: No constraints specified.
 */
collateralDamageEst():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * List of actions associated with this effect response.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
actionsList(index: number):string
actionsList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
actionsList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

actionsListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * List of external actions to be executed as part of this task.
 * Example: /// Example: ['ACTION1', 'ACTION2']
 * Constraints: No constraints specified.
 */
externalActions(index: number):string
externalActions(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
externalActions(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

externalActionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * List of COA metrics associated with this effect response.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
coaMetrics(index: number):string
coaMetrics(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
coaMetrics(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

coaMetricsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The time to overhead for the red force to be over their target, in ISO8601 UTC format.
 * Example: /// Example: 2021-01-01T00:00:00.123456Z
 * Constraints: No constraints specified.
 */
redTimeToOverhead():string|null
redTimeToOverhead(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
redTimeToOverhead(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.
 * Example: /// Example: 2021-01-01T00:00:00.123456Z
 * Constraints: No constraints specified.
 */
decisionDeadline():string|null
decisionDeadline(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
decisionDeadline(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source type of the targetId identifier (POI, SITE, TRACK).
 * Example: /// Example: POI
 * Constraints: Minimum length = 0, Maximum length = 64
 */
redTargetSrcType():string|null
redTargetSrcType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
redTargetSrcType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
 * Example: /// Example: REDTARGETSRC-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
redTargetSrcId():string|null
redTargetSrcId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
redTargetSrcId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2021-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():EffectResponse_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : EffectResponse_Full_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEffectResponse_Full(builder:flatbuffers.Builder) {
  builder.startObject(25);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdEffectRequest(builder:flatbuffers.Builder, idEffectRequestOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idEffectRequestOffset, 0);
}

static addExternalRequestId(builder:flatbuffers.Builder, externalRequestIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, externalRequestIdOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, typeOffset, 0);
}

static addActorSrcType(builder:flatbuffers.Builder, actorSrcTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, actorSrcTypeOffset, 0);
}

static addActorSrcId(builder:flatbuffers.Builder, actorSrcIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, actorSrcIdOffset, 0);
}

static addMunitionType(builder:flatbuffers.Builder, munitionTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, munitionTypeOffset, 0);
}

static addMunitionId(builder:flatbuffers.Builder, munitionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, munitionIdOffset, 0);
}

static addShotsRequired(builder:flatbuffers.Builder, shotsRequired:number) {
  builder.addFieldInt32(9, shotsRequired, 0);
}

static addProbabilityOfKill(builder:flatbuffers.Builder, probabilityOfKill:number) {
  builder.addFieldFloat64(10, probabilityOfKill, 0.0);
}

static addCollateralDamageEst(builder:flatbuffers.Builder, collateralDamageEst:number) {
  builder.addFieldFloat64(11, collateralDamageEst, 0.0);
}

static addActionsList(builder:flatbuffers.Builder, actionsListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, actionsListOffset, 0);
}

static createActionsListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startActionsListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addExternalActions(builder:flatbuffers.Builder, externalActionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, externalActionsOffset, 0);
}

static createExternalActionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExternalActionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCoaMetrics(builder:flatbuffers.Builder, coaMetricsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, coaMetricsOffset, 0);
}

static createCoaMetricsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCoaMetricsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRedTimeToOverhead(builder:flatbuffers.Builder, redTimeToOverheadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, redTimeToOverheadOffset, 0);
}

static addDecisionDeadline(builder:flatbuffers.Builder, decisionDeadlineOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, decisionDeadlineOffset, 0);
}

static addRedTargetSrcType(builder:flatbuffers.Builder, redTargetSrcTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, redTargetSrcTypeOffset, 0);
}

static addRedTargetSrcId(builder:flatbuffers.Builder, redTargetSrcIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, redTargetSrcIdOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:EffectResponse_Full_dataMode_Enum) {
  builder.addFieldInt8(23, dataMode, EffectResponse_Full_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, origNetworkOffset, 0);
}

static endEffectResponse_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEffectResponse_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EFFE');
}

static finishSizePrefixedEffectResponse_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EFFE', true);
}

static createEffectResponse_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idEffectRequestOffset:flatbuffers.Offset, externalRequestIdOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, actorSrcTypeOffset:flatbuffers.Offset, actorSrcIdOffset:flatbuffers.Offset, munitionTypeOffset:flatbuffers.Offset, munitionIdOffset:flatbuffers.Offset, shotsRequired:number, probabilityOfKill:number, collateralDamageEst:number, actionsListOffset:flatbuffers.Offset, externalActionsOffset:flatbuffers.Offset, coaMetricsOffset:flatbuffers.Offset, redTimeToOverheadOffset:flatbuffers.Offset, decisionDeadlineOffset:flatbuffers.Offset, redTargetSrcTypeOffset:flatbuffers.Offset, redTargetSrcIdOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:EffectResponse_Full_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  EffectResponse_Full.startEffectResponse_Full(builder);
  EffectResponse_Full.addId(builder, idOffset);
  EffectResponse_Full.addClassificationMarking(builder, classificationMarkingOffset);
  EffectResponse_Full.addIdEffectRequest(builder, idEffectRequestOffset);
  EffectResponse_Full.addExternalRequestId(builder, externalRequestIdOffset);
  EffectResponse_Full.addType(builder, typeOffset);
  EffectResponse_Full.addActorSrcType(builder, actorSrcTypeOffset);
  EffectResponse_Full.addActorSrcId(builder, actorSrcIdOffset);
  EffectResponse_Full.addMunitionType(builder, munitionTypeOffset);
  EffectResponse_Full.addMunitionId(builder, munitionIdOffset);
  EffectResponse_Full.addShotsRequired(builder, shotsRequired);
  EffectResponse_Full.addProbabilityOfKill(builder, probabilityOfKill);
  EffectResponse_Full.addCollateralDamageEst(builder, collateralDamageEst);
  EffectResponse_Full.addActionsList(builder, actionsListOffset);
  EffectResponse_Full.addExternalActions(builder, externalActionsOffset);
  EffectResponse_Full.addCoaMetrics(builder, coaMetricsOffset);
  EffectResponse_Full.addRedTimeToOverhead(builder, redTimeToOverheadOffset);
  EffectResponse_Full.addDecisionDeadline(builder, decisionDeadlineOffset);
  EffectResponse_Full.addRedTargetSrcType(builder, redTargetSrcTypeOffset);
  EffectResponse_Full.addRedTargetSrcId(builder, redTargetSrcIdOffset);
  EffectResponse_Full.addCreatedAt(builder, createdAtOffset);
  EffectResponse_Full.addCreatedBy(builder, createdByOffset);
  EffectResponse_Full.addSource(builder, sourceOffset);
  EffectResponse_Full.addOrigin(builder, originOffset);
  EffectResponse_Full.addDataMode(builder, dataMode);
  EffectResponse_Full.addOrigNetwork(builder, origNetworkOffset);
  return EffectResponse_Full.endEffectResponse_Full(builder);
}

unpack(): EffectResponse_FullT {
  return new EffectResponse_FullT(
    this.id(),
    this.classificationMarking(),
    this.idEffectRequest(),
    this.externalRequestId(),
    this.type(),
    this.actorSrcType(),
    this.actorSrcId(),
    this.munitionType(),
    this.munitionId(),
    this.shotsRequired(),
    this.probabilityOfKill(),
    this.collateralDamageEst(),
    this.bb!.createScalarList<string>(this.actionsList.bind(this), this.actionsListLength()),
    this.bb!.createScalarList<string>(this.externalActions.bind(this), this.externalActionsLength()),
    this.bb!.createScalarList<string>(this.coaMetrics.bind(this), this.coaMetricsLength()),
    this.redTimeToOverhead(),
    this.decisionDeadline(),
    this.redTargetSrcType(),
    this.redTargetSrcId(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: EffectResponse_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idEffectRequest = this.idEffectRequest();
  _o.externalRequestId = this.externalRequestId();
  _o.type = this.type();
  _o.actorSrcType = this.actorSrcType();
  _o.actorSrcId = this.actorSrcId();
  _o.munitionType = this.munitionType();
  _o.munitionId = this.munitionId();
  _o.shotsRequired = this.shotsRequired();
  _o.probabilityOfKill = this.probabilityOfKill();
  _o.collateralDamageEst = this.collateralDamageEst();
  _o.actionsList = this.bb!.createScalarList<string>(this.actionsList.bind(this), this.actionsListLength());
  _o.externalActions = this.bb!.createScalarList<string>(this.externalActions.bind(this), this.externalActionsLength());
  _o.coaMetrics = this.bb!.createScalarList<string>(this.coaMetrics.bind(this), this.coaMetricsLength());
  _o.redTimeToOverhead = this.redTimeToOverhead();
  _o.decisionDeadline = this.decisionDeadline();
  _o.redTargetSrcType = this.redTargetSrcType();
  _o.redTargetSrcId = this.redTargetSrcId();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class EffectResponse_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idEffectRequest: string|Uint8Array|null = null,
  public externalRequestId: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public actorSrcType: string|Uint8Array|null = null,
  public actorSrcId: string|Uint8Array|null = null,
  public munitionType: string|Uint8Array|null = null,
  public munitionId: string|Uint8Array|null = null,
  public shotsRequired: number = 0,
  public probabilityOfKill: number = 0.0,
  public collateralDamageEst: number = 0.0,
  public actionsList: (string)[] = [],
  public externalActions: (string)[] = [],
  public coaMetrics: (string)[] = [],
  public redTimeToOverhead: string|Uint8Array|null = null,
  public decisionDeadline: string|Uint8Array|null = null,
  public redTargetSrcType: string|Uint8Array|null = null,
  public redTargetSrcId: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: EffectResponse_Full_dataMode_Enum = EffectResponse_Full_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idEffectRequest = (this.idEffectRequest !== null ? builder.createString(this.idEffectRequest!) : 0);
  const externalRequestId = (this.externalRequestId !== null ? builder.createString(this.externalRequestId!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const actorSrcType = (this.actorSrcType !== null ? builder.createString(this.actorSrcType!) : 0);
  const actorSrcId = (this.actorSrcId !== null ? builder.createString(this.actorSrcId!) : 0);
  const munitionType = (this.munitionType !== null ? builder.createString(this.munitionType!) : 0);
  const munitionId = (this.munitionId !== null ? builder.createString(this.munitionId!) : 0);
  const actionsList = EffectResponse_Full.createActionsListVector(builder, builder.createObjectOffsetList(this.actionsList));
  const externalActions = EffectResponse_Full.createExternalActionsVector(builder, builder.createObjectOffsetList(this.externalActions));
  const coaMetrics = EffectResponse_Full.createCoaMetricsVector(builder, builder.createObjectOffsetList(this.coaMetrics));
  const redTimeToOverhead = (this.redTimeToOverhead !== null ? builder.createString(this.redTimeToOverhead!) : 0);
  const decisionDeadline = (this.decisionDeadline !== null ? builder.createString(this.decisionDeadline!) : 0);
  const redTargetSrcType = (this.redTargetSrcType !== null ? builder.createString(this.redTargetSrcType!) : 0);
  const redTargetSrcId = (this.redTargetSrcId !== null ? builder.createString(this.redTargetSrcId!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return EffectResponse_Full.createEffectResponse_Full(builder,
    id,
    classificationMarking,
    idEffectRequest,
    externalRequestId,
    type,
    actorSrcType,
    actorSrcId,
    munitionType,
    munitionId,
    this.shotsRequired,
    this.probabilityOfKill,
    this.collateralDamageEst,
    actionsList,
    externalActions,
    coaMetrics,
    redTimeToOverhead,
    decisionDeadline,
    redTargetSrcType,
    redTargetSrcId,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
