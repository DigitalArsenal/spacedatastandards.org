// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { StarCatalog_Full_astrometryOrigin_Enum } from './StarCatalog_Full_astrometryOrigin_Enum.js';
import { StarCatalog_Full_dataMode_Enum } from './StarCatalog_Full_dataMode_Enum.js';


/**
 * /// The star catalog provides the position, proper motion, parallax, and photometric magnitudes at various bandpasses of a star.
 */
export class StarCatalog_Full implements flatbuffers.IUnpackableObject<StarCatalog_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StarCatalog_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStarCatalog_Full(bb:flatbuffers.ByteBuffer, obj?:StarCatalog_Full):StarCatalog_Full {
  return (obj || new StarCatalog_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStarCatalog_Full(bb:flatbuffers.ByteBuffer, obj?:StarCatalog_Full):StarCatalog_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StarCatalog_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('STAR');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: STAR-CAT-DATASET-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The ID of this object in the specific catalog associated with this record.
 * Example: /// Example: 12345
 * Constraints: No constraints specified.
 */
csId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

/**
 * The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
 * Example: /// Example: 12345
 * Constraints: No constraints specified.
 */
gncCatId():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The ID of this object in the Gaia DR3 Catalog.
 * Example: /// Example: 89012345678901
 * Constraints: No constraints specified.
 */
gaiadr3CatId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

/**
 * The ID of this object in the Hipparcos Catalog.
 * Example: /// Example: 12345
 * Constraints: No constraints specified.
 */
hipCatId():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The version of the catalog associated with this object.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
catVersion():string|null
catVersion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
catVersion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.
 * Example: /// Example: 14.43
 * Constraints: No constraints specified.
 */
ra():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.
 * Example: /// Example: 509.466
 * Constraints: No constraints specified.
 */
raUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.
 * Example: /// Example: 21.8
 * Constraints: No constraints specified.
 */
dec():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.
 * Example: /// Example: 40.996
 * Constraints: No constraints specified.
 */
decUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
posUncFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Absolute stellar parallax of the source, in milliarcseconds.
 * Example: /// Example: -6.8
 * Constraints: No constraints specified.
 */
parallax():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty of the stellar parallax, in milliarcseconds.
 * Example: /// Example: 82.35
 * Constraints: No constraints specified.
 */
parallaxUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.
 * Example: /// Example: 1000.45
 * Constraints: No constraints specified.
 */
pmra():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty of proper motion in right ascension, in milliarcseconds/year.
 * Example: /// Example: 5.6
 * Constraints: No constraints specified.
 */
pmraUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.
 * Example: /// Example: -970.1003
 * Constraints: No constraints specified.
 */
pmdec():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty of proper motion in declination, in milliarcseconds/year.
 * Example: /// Example: 1.22
 * Constraints: No constraints specified.
 */
pmdecUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
pmUncFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].
 * Example: /// Example: GAIADR3
 * Constraints: Minimum length = 1, Maximum length = 16
 */
astrometryOrigin():StarCatalog_Full_astrometryOrigin_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : StarCatalog_Full_astrometryOrigin_Enum.GAIADR3;
}

/**
 * Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).
 * Example: /// Example: 2016
 * Constraints: No constraints specified.
 */
starEpoch():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Gaia DR3 optical photometric G-band magnitude in the Vega scale.
 * Example: /// Example: 0.0046
 * Constraints: No constraints specified.
 */
gmag():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
 * Example: /// Example: 0.00292
 * Constraints: No constraints specified.
 */
gmagUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
 * Example: /// Example: 0.04559
 * Constraints: No constraints specified.
 */
bpmag():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
 * Example: /// Example: 0.2227
 * Constraints: No constraints specified.
 */
bpmagUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Gaia DR3 optical Rp-band magnitude in the Vega scale.
 * Example: /// Example: 8.0047
 * Constraints: No constraints specified.
 */
rpmag():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
 * Example: /// Example: 1.233
 * Constraints: No constraints specified.
 */
rpmagUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.
 * Example: /// Example: 9.515
 * Constraints: No constraints specified.
 */
jmag():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.
 * Example: /// Example: 7.559
 * Constraints: No constraints specified.
 */
jmagUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.
 * Example: /// Example: 13.545
 * Constraints: No constraints specified.
 */
kmag():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.
 * Example: /// Example: 0.052
 * Constraints: No constraints specified.
 */
kmagUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.
 * Example: /// Example: 12.126
 * Constraints: No constraints specified.
 */
hmag():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.
 * Example: /// Example: 5.722
 * Constraints: No constraints specified.
 */
hmagUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating that the source exhibits variable magnitude.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
varFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this is a multiple object source.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
multFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The catalog ID of the nearest neighbor to this source.
 * Example: /// Example: 2456
 * Constraints: No constraints specified.
 */
neighborId():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
neighborFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Distance between source and nearest neighbor, in arcseconds.
 * Example: /// Example: 201.406
 * Constraints: No constraints specified.
 */
neighborDistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
shiftFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Photocentric shift caused by neighbors, in arcseconds.
 * Example: /// Example: 4.548
 * Constraints: No constraints specified.
 */
shift():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 4
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():StarCatalog_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : StarCatalog_Full_dataMode_Enum.REAL;
}

static startStarCatalog_Full(builder:flatbuffers.Builder) {
  builder.startObject(48);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addCsId(builder:flatbuffers.Builder, csId:bigint) {
  builder.addFieldInt64(2, csId, BigInt('0'));
}

static addGncCatId(builder:flatbuffers.Builder, gncCatId:number) {
  builder.addFieldInt32(3, gncCatId, 0);
}

static addGaiadr3CatId(builder:flatbuffers.Builder, gaiadr3CatId:bigint) {
  builder.addFieldInt64(4, gaiadr3CatId, BigInt('0'));
}

static addHipCatId(builder:flatbuffers.Builder, hipCatId:number) {
  builder.addFieldInt32(5, hipCatId, 0);
}

static addCatVersion(builder:flatbuffers.Builder, catVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, catVersionOffset, 0);
}

static addRa(builder:flatbuffers.Builder, ra:number) {
  builder.addFieldFloat64(7, ra, 0.0);
}

static addRaUnc(builder:flatbuffers.Builder, raUnc:number) {
  builder.addFieldFloat64(8, raUnc, 0.0);
}

static addDec(builder:flatbuffers.Builder, dec:number) {
  builder.addFieldFloat64(9, dec, 0.0);
}

static addDecUnc(builder:flatbuffers.Builder, decUnc:number) {
  builder.addFieldFloat64(10, decUnc, 0.0);
}

static addPosUncFlag(builder:flatbuffers.Builder, posUncFlag:boolean) {
  builder.addFieldInt8(11, +posUncFlag, +false);
}

static addParallax(builder:flatbuffers.Builder, parallax:number) {
  builder.addFieldFloat64(12, parallax, 0.0);
}

static addParallaxUnc(builder:flatbuffers.Builder, parallaxUnc:number) {
  builder.addFieldFloat64(13, parallaxUnc, 0.0);
}

static addPmra(builder:flatbuffers.Builder, pmra:number) {
  builder.addFieldFloat64(14, pmra, 0.0);
}

static addPmraUnc(builder:flatbuffers.Builder, pmraUnc:number) {
  builder.addFieldFloat64(15, pmraUnc, 0.0);
}

static addPmdec(builder:flatbuffers.Builder, pmdec:number) {
  builder.addFieldFloat64(16, pmdec, 0.0);
}

static addPmdecUnc(builder:flatbuffers.Builder, pmdecUnc:number) {
  builder.addFieldFloat64(17, pmdecUnc, 0.0);
}

static addPmUncFlag(builder:flatbuffers.Builder, pmUncFlag:boolean) {
  builder.addFieldInt8(18, +pmUncFlag, +false);
}

static addAstrometryOrigin(builder:flatbuffers.Builder, astrometryOrigin:StarCatalog_Full_astrometryOrigin_Enum) {
  builder.addFieldInt8(19, astrometryOrigin, StarCatalog_Full_astrometryOrigin_Enum.GAIADR3);
}

static addStarEpoch(builder:flatbuffers.Builder, starEpoch:number) {
  builder.addFieldFloat64(20, starEpoch, 0.0);
}

static addGmag(builder:flatbuffers.Builder, gmag:number) {
  builder.addFieldFloat64(21, gmag, 0.0);
}

static addGmagUnc(builder:flatbuffers.Builder, gmagUnc:number) {
  builder.addFieldFloat64(22, gmagUnc, 0.0);
}

static addBpmag(builder:flatbuffers.Builder, bpmag:number) {
  builder.addFieldFloat64(23, bpmag, 0.0);
}

static addBpmagUnc(builder:flatbuffers.Builder, bpmagUnc:number) {
  builder.addFieldFloat64(24, bpmagUnc, 0.0);
}

static addRpmag(builder:flatbuffers.Builder, rpmag:number) {
  builder.addFieldFloat64(25, rpmag, 0.0);
}

static addRpmagUnc(builder:flatbuffers.Builder, rpmagUnc:number) {
  builder.addFieldFloat64(26, rpmagUnc, 0.0);
}

static addJmag(builder:flatbuffers.Builder, jmag:number) {
  builder.addFieldFloat64(27, jmag, 0.0);
}

static addJmagUnc(builder:flatbuffers.Builder, jmagUnc:number) {
  builder.addFieldFloat64(28, jmagUnc, 0.0);
}

static addKmag(builder:flatbuffers.Builder, kmag:number) {
  builder.addFieldFloat64(29, kmag, 0.0);
}

static addKmagUnc(builder:flatbuffers.Builder, kmagUnc:number) {
  builder.addFieldFloat64(30, kmagUnc, 0.0);
}

static addHmag(builder:flatbuffers.Builder, hmag:number) {
  builder.addFieldFloat64(31, hmag, 0.0);
}

static addHmagUnc(builder:flatbuffers.Builder, hmagUnc:number) {
  builder.addFieldFloat64(32, hmagUnc, 0.0);
}

static addVarFlag(builder:flatbuffers.Builder, varFlag:boolean) {
  builder.addFieldInt8(33, +varFlag, +false);
}

static addMultFlag(builder:flatbuffers.Builder, multFlag:boolean) {
  builder.addFieldInt8(34, +multFlag, +false);
}

static addNeighborId(builder:flatbuffers.Builder, neighborId:number) {
  builder.addFieldInt32(35, neighborId, 0);
}

static addNeighborFlag(builder:flatbuffers.Builder, neighborFlag:boolean) {
  builder.addFieldInt8(36, +neighborFlag, +false);
}

static addNeighborDistance(builder:flatbuffers.Builder, neighborDistance:number) {
  builder.addFieldFloat64(37, neighborDistance, 0.0);
}

static addShiftFlag(builder:flatbuffers.Builder, shiftFlag:boolean) {
  builder.addFieldInt8(38, +shiftFlag, +false);
}

static addShift(builder:flatbuffers.Builder, shift:number) {
  builder.addFieldFloat64(39, shift, 0.0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, updatedByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:StarCatalog_Full_dataMode_Enum) {
  builder.addFieldInt8(47, dataMode, StarCatalog_Full_dataMode_Enum.REAL);
}

static endStarCatalog_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishStarCatalog_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'STAR');
}

static finishSizePrefixedStarCatalog_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'STAR', true);
}

static createStarCatalog_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, csId:bigint, gncCatId:number, gaiadr3CatId:bigint, hipCatId:number, catVersionOffset:flatbuffers.Offset, ra:number, raUnc:number, dec:number, decUnc:number, posUncFlag:boolean, parallax:number, parallaxUnc:number, pmra:number, pmraUnc:number, pmdec:number, pmdecUnc:number, pmUncFlag:boolean, astrometryOrigin:StarCatalog_Full_astrometryOrigin_Enum, starEpoch:number, gmag:number, gmagUnc:number, bpmag:number, bpmagUnc:number, rpmag:number, rpmagUnc:number, jmag:number, jmagUnc:number, kmag:number, kmagUnc:number, hmag:number, hmagUnc:number, varFlag:boolean, multFlag:boolean, neighborId:number, neighborFlag:boolean, neighborDistance:number, shiftFlag:boolean, shift:number, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:StarCatalog_Full_dataMode_Enum):flatbuffers.Offset {
  StarCatalog_Full.startStarCatalog_Full(builder);
  StarCatalog_Full.addId(builder, idOffset);
  StarCatalog_Full.addClassificationMarking(builder, classificationMarkingOffset);
  StarCatalog_Full.addCsId(builder, csId);
  StarCatalog_Full.addGncCatId(builder, gncCatId);
  StarCatalog_Full.addGaiadr3CatId(builder, gaiadr3CatId);
  StarCatalog_Full.addHipCatId(builder, hipCatId);
  StarCatalog_Full.addCatVersion(builder, catVersionOffset);
  StarCatalog_Full.addRa(builder, ra);
  StarCatalog_Full.addRaUnc(builder, raUnc);
  StarCatalog_Full.addDec(builder, dec);
  StarCatalog_Full.addDecUnc(builder, decUnc);
  StarCatalog_Full.addPosUncFlag(builder, posUncFlag);
  StarCatalog_Full.addParallax(builder, parallax);
  StarCatalog_Full.addParallaxUnc(builder, parallaxUnc);
  StarCatalog_Full.addPmra(builder, pmra);
  StarCatalog_Full.addPmraUnc(builder, pmraUnc);
  StarCatalog_Full.addPmdec(builder, pmdec);
  StarCatalog_Full.addPmdecUnc(builder, pmdecUnc);
  StarCatalog_Full.addPmUncFlag(builder, pmUncFlag);
  StarCatalog_Full.addAstrometryOrigin(builder, astrometryOrigin);
  StarCatalog_Full.addStarEpoch(builder, starEpoch);
  StarCatalog_Full.addGmag(builder, gmag);
  StarCatalog_Full.addGmagUnc(builder, gmagUnc);
  StarCatalog_Full.addBpmag(builder, bpmag);
  StarCatalog_Full.addBpmagUnc(builder, bpmagUnc);
  StarCatalog_Full.addRpmag(builder, rpmag);
  StarCatalog_Full.addRpmagUnc(builder, rpmagUnc);
  StarCatalog_Full.addJmag(builder, jmag);
  StarCatalog_Full.addJmagUnc(builder, jmagUnc);
  StarCatalog_Full.addKmag(builder, kmag);
  StarCatalog_Full.addKmagUnc(builder, kmagUnc);
  StarCatalog_Full.addHmag(builder, hmag);
  StarCatalog_Full.addHmagUnc(builder, hmagUnc);
  StarCatalog_Full.addVarFlag(builder, varFlag);
  StarCatalog_Full.addMultFlag(builder, multFlag);
  StarCatalog_Full.addNeighborId(builder, neighborId);
  StarCatalog_Full.addNeighborFlag(builder, neighborFlag);
  StarCatalog_Full.addNeighborDistance(builder, neighborDistance);
  StarCatalog_Full.addShiftFlag(builder, shiftFlag);
  StarCatalog_Full.addShift(builder, shift);
  StarCatalog_Full.addCreatedAt(builder, createdAtOffset);
  StarCatalog_Full.addCreatedBy(builder, createdByOffset);
  StarCatalog_Full.addUpdatedAt(builder, updatedAtOffset);
  StarCatalog_Full.addUpdatedBy(builder, updatedByOffset);
  StarCatalog_Full.addSource(builder, sourceOffset);
  StarCatalog_Full.addOrigin(builder, originOffset);
  StarCatalog_Full.addOrigNetwork(builder, origNetworkOffset);
  StarCatalog_Full.addDataMode(builder, dataMode);
  return StarCatalog_Full.endStarCatalog_Full(builder);
}

unpack(): StarCatalog_FullT {
  return new StarCatalog_FullT(
    this.id(),
    this.classificationMarking(),
    this.csId(),
    this.gncCatId(),
    this.gaiadr3CatId(),
    this.hipCatId(),
    this.catVersion(),
    this.ra(),
    this.raUnc(),
    this.dec(),
    this.decUnc(),
    this.posUncFlag(),
    this.parallax(),
    this.parallaxUnc(),
    this.pmra(),
    this.pmraUnc(),
    this.pmdec(),
    this.pmdecUnc(),
    this.pmUncFlag(),
    this.astrometryOrigin(),
    this.starEpoch(),
    this.gmag(),
    this.gmagUnc(),
    this.bpmag(),
    this.bpmagUnc(),
    this.rpmag(),
    this.rpmagUnc(),
    this.jmag(),
    this.jmagUnc(),
    this.kmag(),
    this.kmagUnc(),
    this.hmag(),
    this.hmagUnc(),
    this.varFlag(),
    this.multFlag(),
    this.neighborId(),
    this.neighborFlag(),
    this.neighborDistance(),
    this.shiftFlag(),
    this.shift(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: StarCatalog_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.csId = this.csId();
  _o.gncCatId = this.gncCatId();
  _o.gaiadr3CatId = this.gaiadr3CatId();
  _o.hipCatId = this.hipCatId();
  _o.catVersion = this.catVersion();
  _o.ra = this.ra();
  _o.raUnc = this.raUnc();
  _o.dec = this.dec();
  _o.decUnc = this.decUnc();
  _o.posUncFlag = this.posUncFlag();
  _o.parallax = this.parallax();
  _o.parallaxUnc = this.parallaxUnc();
  _o.pmra = this.pmra();
  _o.pmraUnc = this.pmraUnc();
  _o.pmdec = this.pmdec();
  _o.pmdecUnc = this.pmdecUnc();
  _o.pmUncFlag = this.pmUncFlag();
  _o.astrometryOrigin = this.astrometryOrigin();
  _o.starEpoch = this.starEpoch();
  _o.gmag = this.gmag();
  _o.gmagUnc = this.gmagUnc();
  _o.bpmag = this.bpmag();
  _o.bpmagUnc = this.bpmagUnc();
  _o.rpmag = this.rpmag();
  _o.rpmagUnc = this.rpmagUnc();
  _o.jmag = this.jmag();
  _o.jmagUnc = this.jmagUnc();
  _o.kmag = this.kmag();
  _o.kmagUnc = this.kmagUnc();
  _o.hmag = this.hmag();
  _o.hmagUnc = this.hmagUnc();
  _o.varFlag = this.varFlag();
  _o.multFlag = this.multFlag();
  _o.neighborId = this.neighborId();
  _o.neighborFlag = this.neighborFlag();
  _o.neighborDistance = this.neighborDistance();
  _o.shiftFlag = this.shiftFlag();
  _o.shift = this.shift();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class StarCatalog_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public csId: bigint = BigInt('0'),
  public gncCatId: number = 0,
  public gaiadr3CatId: bigint = BigInt('0'),
  public hipCatId: number = 0,
  public catVersion: string|Uint8Array|null = null,
  public ra: number = 0.0,
  public raUnc: number = 0.0,
  public dec: number = 0.0,
  public decUnc: number = 0.0,
  public posUncFlag: boolean = false,
  public parallax: number = 0.0,
  public parallaxUnc: number = 0.0,
  public pmra: number = 0.0,
  public pmraUnc: number = 0.0,
  public pmdec: number = 0.0,
  public pmdecUnc: number = 0.0,
  public pmUncFlag: boolean = false,
  public astrometryOrigin: StarCatalog_Full_astrometryOrigin_Enum = StarCatalog_Full_astrometryOrigin_Enum.GAIADR3,
  public starEpoch: number = 0.0,
  public gmag: number = 0.0,
  public gmagUnc: number = 0.0,
  public bpmag: number = 0.0,
  public bpmagUnc: number = 0.0,
  public rpmag: number = 0.0,
  public rpmagUnc: number = 0.0,
  public jmag: number = 0.0,
  public jmagUnc: number = 0.0,
  public kmag: number = 0.0,
  public kmagUnc: number = 0.0,
  public hmag: number = 0.0,
  public hmagUnc: number = 0.0,
  public varFlag: boolean = false,
  public multFlag: boolean = false,
  public neighborId: number = 0,
  public neighborFlag: boolean = false,
  public neighborDistance: number = 0.0,
  public shiftFlag: boolean = false,
  public shift: number = 0.0,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: StarCatalog_Full_dataMode_Enum = StarCatalog_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const catVersion = (this.catVersion !== null ? builder.createString(this.catVersion!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return StarCatalog_Full.createStarCatalog_Full(builder,
    id,
    classificationMarking,
    this.csId,
    this.gncCatId,
    this.gaiadr3CatId,
    this.hipCatId,
    catVersion,
    this.ra,
    this.raUnc,
    this.dec,
    this.decUnc,
    this.posUncFlag,
    this.parallax,
    this.parallaxUnc,
    this.pmra,
    this.pmraUnc,
    this.pmdec,
    this.pmdecUnc,
    this.pmUncFlag,
    this.astrometryOrigin,
    this.starEpoch,
    this.gmag,
    this.gmagUnc,
    this.bpmag,
    this.bpmagUnc,
    this.rpmag,
    this.rpmagUnc,
    this.jmag,
    this.jmagUnc,
    this.kmag,
    this.kmagUnc,
    this.hmag,
    this.hmagUnc,
    this.varFlag,
    this.multFlag,
    this.neighborId,
    this.neighborFlag,
    this.neighborDistance,
    this.shiftFlag,
    this.shift,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
