// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Discrepancy information associated with this LogisticsSupport record.
 */
export class LogisticsDiscrepancyInfos_Full implements flatbuffers.IUnpackableObject<LogisticsDiscrepancyInfos_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LogisticsDiscrepancyInfos_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLogisticsDiscrepancyInfos_Full(bb:flatbuffers.ByteBuffer, obj?:LogisticsDiscrepancyInfos_Full):LogisticsDiscrepancyInfos_Full {
  return (obj || new LogisticsDiscrepancyInfos_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLogisticsDiscrepancyInfos_Full(bb:flatbuffers.ByteBuffer, obj?:LogisticsDiscrepancyInfos_Full):LogisticsDiscrepancyInfos_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LogisticsDiscrepancyInfos_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('LOGI');
}

/**
 * Job Control Number of the discrepancy.
 * Example: /// Example: 231942400
 * Constraints: Minimum length = 0, Maximum length = 12
 */
jcn():string|null
jcn(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
jcn(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The aircraft discrepancy description.
 * Example: /// Example: PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10
 * Constraints: Minimum length = 0, Maximum length = 680
 */
discrepancyInfo():string|null
discrepancyInfo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
discrepancyInfo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The job start time, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-17T10:30:00.123Z
 * Constraints: No constraints specified.
 */
jobStTime():string|null
jobStTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
jobStTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The discrepancy closure time, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-17T10:30:00.123Z
 * Constraints: No constraints specified.
 */
closureTime():string|null
closureTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
closureTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startLogisticsDiscrepancyInfos_Full(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addJcn(builder:flatbuffers.Builder, jcnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, jcnOffset, 0);
}

static addDiscrepancyInfo(builder:flatbuffers.Builder, discrepancyInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, discrepancyInfoOffset, 0);
}

static addJobStTime(builder:flatbuffers.Builder, jobStTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, jobStTimeOffset, 0);
}

static addClosureTime(builder:flatbuffers.Builder, closureTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, closureTimeOffset, 0);
}

static endLogisticsDiscrepancyInfos_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLogisticsDiscrepancyInfos_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI');
}

static finishSizePrefixedLogisticsDiscrepancyInfos_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI', true);
}

static createLogisticsDiscrepancyInfos_Full(builder:flatbuffers.Builder, jcnOffset:flatbuffers.Offset, discrepancyInfoOffset:flatbuffers.Offset, jobStTimeOffset:flatbuffers.Offset, closureTimeOffset:flatbuffers.Offset):flatbuffers.Offset {
  LogisticsDiscrepancyInfos_Full.startLogisticsDiscrepancyInfos_Full(builder);
  LogisticsDiscrepancyInfos_Full.addJcn(builder, jcnOffset);
  LogisticsDiscrepancyInfos_Full.addDiscrepancyInfo(builder, discrepancyInfoOffset);
  LogisticsDiscrepancyInfos_Full.addJobStTime(builder, jobStTimeOffset);
  LogisticsDiscrepancyInfos_Full.addClosureTime(builder, closureTimeOffset);
  return LogisticsDiscrepancyInfos_Full.endLogisticsDiscrepancyInfos_Full(builder);
}

unpack(): LogisticsDiscrepancyInfos_FullT {
  return new LogisticsDiscrepancyInfos_FullT(
    this.jcn(),
    this.discrepancyInfo(),
    this.jobStTime(),
    this.closureTime()
  );
}


unpackTo(_o: LogisticsDiscrepancyInfos_FullT): void {
  _o.jcn = this.jcn();
  _o.discrepancyInfo = this.discrepancyInfo();
  _o.jobStTime = this.jobStTime();
  _o.closureTime = this.closureTime();
}
}

export class LogisticsDiscrepancyInfos_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public jcn: string|Uint8Array|null = null,
  public discrepancyInfo: string|Uint8Array|null = null,
  public jobStTime: string|Uint8Array|null = null,
  public closureTime: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const jcn = (this.jcn !== null ? builder.createString(this.jcn!) : 0);
  const discrepancyInfo = (this.discrepancyInfo !== null ? builder.createString(this.discrepancyInfo!) : 0);
  const jobStTime = (this.jobStTime !== null ? builder.createString(this.jobStTime!) : 0);
  const closureTime = (this.closureTime !== null ? builder.createString(this.closureTime!) : 0);

  return LogisticsDiscrepancyInfos_Full.createLogisticsDiscrepancyInfos_Full(builder,
    jcn,
    discrepancyInfo,
    jobStTime,
    closureTime
  );
}
}
