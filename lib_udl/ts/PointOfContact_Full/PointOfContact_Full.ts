// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Point of contacts for scheduling or modifying the route.
 */
export class PointOfContact_Full implements flatbuffers.IUnpackableObject<PointOfContact_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PointOfContact_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPointOfContact_Full(bb:flatbuffers.ByteBuffer, obj?:PointOfContact_Full):PointOfContact_Full {
  return (obj || new PointOfContact_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPointOfContact_Full(bb:flatbuffers.ByteBuffer, obj?:PointOfContact_Full):PointOfContact_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PointOfContact_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('POIN');
}

/**
 * Sequencing field for point of contact.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
pocSequenceId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * A code or name that represents the contact's role in association to the track route (ex. Originator, Scheduler, Maintainer, etc.).
 * Example: /// Example: Originator
 * Constraints: Minimum length = 0, Maximum length = 36
 */
pocTypeName():string|null
pocTypeName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pocTypeName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the contact.
 * Example: /// Example: Fred Smith
 * Constraints: Minimum length = 0, Maximum length = 36
 */
pocName():string|null
pocName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pocName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Office name for which the contact belongs.
 * Example: /// Example: A34
 * Constraints: Minimum length = 0, Maximum length = 36
 */
office():string|null
office(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
office(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The username of the contact.
 * Example: /// Example: fgsmith
 * Constraints: Minimum length = 0, Maximum length = 64
 */
username():string|null
username(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
username(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The rank of contact.
 * Example: /// Example: Capt
 * Constraints: Minimum length = 0, Maximum length = 32
 */
rank():string|null
rank(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rank(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Organization name for which the contact belongs.
 * Example: /// Example: HQAF
 * Constraints: Minimum length = 0, Maximum length = 36
 */
pocOrg():string|null
pocOrg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pocOrg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Phone number of the contact.
 * Example: /// Example: 8675309
 * Constraints: Minimum length = 0, Maximum length = 45
 */
phone():string|null
phone(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
phone(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Text of the remark.
 * Example: /// Example: POC remark.
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
remark():string|null
remark(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
remark(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPointOfContact_Full(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addPocSequenceId(builder:flatbuffers.Builder, pocSequenceId:number) {
  builder.addFieldInt32(0, pocSequenceId, 0);
}

static addPocTypeName(builder:flatbuffers.Builder, pocTypeNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, pocTypeNameOffset, 0);
}

static addPocName(builder:flatbuffers.Builder, pocNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, pocNameOffset, 0);
}

static addOffice(builder:flatbuffers.Builder, officeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, officeOffset, 0);
}

static addUsername(builder:flatbuffers.Builder, usernameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, usernameOffset, 0);
}

static addRank(builder:flatbuffers.Builder, rankOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, rankOffset, 0);
}

static addPocOrg(builder:flatbuffers.Builder, pocOrgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, pocOrgOffset, 0);
}

static addPhone(builder:flatbuffers.Builder, phoneOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, phoneOffset, 0);
}

static addRemark(builder:flatbuffers.Builder, remarkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, remarkOffset, 0);
}

static endPointOfContact_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPointOfContact_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'POIN');
}

static finishSizePrefixedPointOfContact_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'POIN', true);
}

static createPointOfContact_Full(builder:flatbuffers.Builder, pocSequenceId:number, pocTypeNameOffset:flatbuffers.Offset, pocNameOffset:flatbuffers.Offset, officeOffset:flatbuffers.Offset, usernameOffset:flatbuffers.Offset, rankOffset:flatbuffers.Offset, pocOrgOffset:flatbuffers.Offset, phoneOffset:flatbuffers.Offset, remarkOffset:flatbuffers.Offset):flatbuffers.Offset {
  PointOfContact_Full.startPointOfContact_Full(builder);
  PointOfContact_Full.addPocSequenceId(builder, pocSequenceId);
  PointOfContact_Full.addPocTypeName(builder, pocTypeNameOffset);
  PointOfContact_Full.addPocName(builder, pocNameOffset);
  PointOfContact_Full.addOffice(builder, officeOffset);
  PointOfContact_Full.addUsername(builder, usernameOffset);
  PointOfContact_Full.addRank(builder, rankOffset);
  PointOfContact_Full.addPocOrg(builder, pocOrgOffset);
  PointOfContact_Full.addPhone(builder, phoneOffset);
  PointOfContact_Full.addRemark(builder, remarkOffset);
  return PointOfContact_Full.endPointOfContact_Full(builder);
}

unpack(): PointOfContact_FullT {
  return new PointOfContact_FullT(
    this.pocSequenceId(),
    this.pocTypeName(),
    this.pocName(),
    this.office(),
    this.username(),
    this.rank(),
    this.pocOrg(),
    this.phone(),
    this.remark()
  );
}


unpackTo(_o: PointOfContact_FullT): void {
  _o.pocSequenceId = this.pocSequenceId();
  _o.pocTypeName = this.pocTypeName();
  _o.pocName = this.pocName();
  _o.office = this.office();
  _o.username = this.username();
  _o.rank = this.rank();
  _o.pocOrg = this.pocOrg();
  _o.phone = this.phone();
  _o.remark = this.remark();
}
}

export class PointOfContact_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public pocSequenceId: number = 0,
  public pocTypeName: string|Uint8Array|null = null,
  public pocName: string|Uint8Array|null = null,
  public office: string|Uint8Array|null = null,
  public username: string|Uint8Array|null = null,
  public rank: string|Uint8Array|null = null,
  public pocOrg: string|Uint8Array|null = null,
  public phone: string|Uint8Array|null = null,
  public remark: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const pocTypeName = (this.pocTypeName !== null ? builder.createString(this.pocTypeName!) : 0);
  const pocName = (this.pocName !== null ? builder.createString(this.pocName!) : 0);
  const office = (this.office !== null ? builder.createString(this.office!) : 0);
  const username = (this.username !== null ? builder.createString(this.username!) : 0);
  const rank = (this.rank !== null ? builder.createString(this.rank!) : 0);
  const pocOrg = (this.pocOrg !== null ? builder.createString(this.pocOrg!) : 0);
  const phone = (this.phone !== null ? builder.createString(this.phone!) : 0);
  const remark = (this.remark !== null ? builder.createString(this.remark!) : 0);

  return PointOfContact_Full.createPointOfContact_Full(builder,
    this.pocSequenceId,
    pocTypeName,
    pocName,
    office,
    username,
    rank,
    pocOrg,
    phone,
    remark
  );
}
}
