// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OnorbitAntenna_Ingest_dataMode_Enum } from './OnorbitAntenna_Ingest_dataMode_Enum.js';


/**
 * /// No description available.
 */
export class OnorbitAntenna_Ingest implements flatbuffers.IUnpackableObject<OnorbitAntenna_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OnorbitAntenna_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOnorbitAntenna_Ingest(bb:flatbuffers.ByteBuffer, obj?:OnorbitAntenna_Ingest):OnorbitAntenna_Ingest {
  return (obj || new OnorbitAntenna_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOnorbitAntenna_Ingest(bb:flatbuffers.ByteBuffer, obj?:OnorbitAntenna_Ingest):OnorbitAntenna_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OnorbitAntenna_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ONOR');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: ONORBITANTENNA-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the on-orbit object.
 * Example: /// Example: ONORBIT-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID of the antenna.
 * Example: /// Example: ANTENNA-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idAntenna():string|null
idAntenna(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idAntenna(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():OnorbitAntenna_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OnorbitAntenna_Ingest_dataMode_Enum.REAL;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
antenna():string|null
antenna(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
antenna(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startOnorbitAntenna_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idOnOrbitOffset, 0);
}

static addIdAntenna(builder:flatbuffers.Builder, idAntennaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idAntennaOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, classificationMarkingOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:OnorbitAntenna_Ingest_dataMode_Enum) {
  builder.addFieldInt8(8, dataMode, OnorbitAntenna_Ingest_dataMode_Enum.REAL);
}

static addAntenna(builder:flatbuffers.Builder, antennaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, antennaOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, origNetworkOffset, 0);
}

static endOnorbitAntenna_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOnorbitAntenna_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ONOR');
}

static finishSizePrefixedOnorbitAntenna_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ONOR', true);
}

static createOnorbitAntenna_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, idAntennaOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:OnorbitAntenna_Ingest_dataMode_Enum, antennaOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  OnorbitAntenna_Ingest.startOnorbitAntenna_Ingest(builder);
  OnorbitAntenna_Ingest.addId(builder, idOffset);
  OnorbitAntenna_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
  OnorbitAntenna_Ingest.addIdAntenna(builder, idAntennaOffset);
  OnorbitAntenna_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  OnorbitAntenna_Ingest.addCreatedAt(builder, createdAtOffset);
  OnorbitAntenna_Ingest.addCreatedBy(builder, createdByOffset);
  OnorbitAntenna_Ingest.addSource(builder, sourceOffset);
  OnorbitAntenna_Ingest.addOrigin(builder, originOffset);
  OnorbitAntenna_Ingest.addDataMode(builder, dataMode);
  OnorbitAntenna_Ingest.addAntenna(builder, antennaOffset);
  OnorbitAntenna_Ingest.addOrigNetwork(builder, origNetworkOffset);
  return OnorbitAntenna_Ingest.endOnorbitAntenna_Ingest(builder);
}

unpack(): OnorbitAntenna_IngestT {
  return new OnorbitAntenna_IngestT(
    this.id(),
    this.idOnOrbit(),
    this.idAntenna(),
    this.classificationMarking(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.antenna(),
    this.origNetwork()
  );
}


unpackTo(_o: OnorbitAntenna_IngestT): void {
  _o.id = this.id();
  _o.idOnOrbit = this.idOnOrbit();
  _o.idAntenna = this.idAntenna();
  _o.classificationMarking = this.classificationMarking();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.antenna = this.antenna();
  _o.origNetwork = this.origNetwork();
}
}

export class OnorbitAntenna_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public idAntenna: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: OnorbitAntenna_Ingest_dataMode_Enum = OnorbitAntenna_Ingest_dataMode_Enum.REAL,
  public antenna: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const idAntenna = (this.idAntenna !== null ? builder.createString(this.idAntenna!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const antenna = (this.antenna !== null ? builder.createString(this.antenna!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return OnorbitAntenna_Ingest.createOnorbitAntenna_Ingest(builder,
    id,
    idOnOrbit,
    idAntenna,
    classificationMarking,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    antenna,
    origNetwork
  );
}
}
