// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
 */
export class MtiJobRequest_Full implements flatbuffers.IUnpackableObject<MtiJobRequest_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MtiJobRequest_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMtiJobRequest_Full(bb:flatbuffers.ByteBuffer, obj?:MtiJobRequest_Full):MtiJobRequest_Full {
  return (obj || new MtiJobRequest_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMtiJobRequest_Full(bb:flatbuffers.ByteBuffer, obj?:MtiJobRequest_Full):MtiJobRequest_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MtiJobRequest_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MTIJ');
}

/**
 * The requestor of the sensor service.
 * Example: /// Example: REQUESTER
 * Constraints: Minimum length = 0, Maximum length = 10
 */
r1():string|null
r1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
r1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier for the tasking message sent by the requesting station.
 * Example: /// Example: IDENTIFIER
 * Constraints: Minimum length = 0, Maximum length = 10
 */
r2():string|null
r2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
r2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The priority of the request relative to other requests originated by the requesting station.
 * Example: /// Example: 15
 * Constraints: No constraints specified.
 */
r3():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * North-South position of the first corner (Point A) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
r4():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * East-West position of the first corner (Point A) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
r5():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * North-South position of the second corner (Point B) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
r6():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * East-West position of the second corner (Point B) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
r7():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * North-South position of the third corner (Point C) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
r8():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * East-West position of the third corner (Point C) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
r9():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * North-South position of the fourth corner (Point D) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
r10():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * East-West position of the fourth corner (Point D) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
 * Example: /// Example: 10.23
 * Constraints: No constraints specified.
 */
r11():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Identifies the radar mode requested by the requestor.
 * Example: /// Example: MODE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
r12():string|null
r12(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
r12(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies the radar range resolution requested by the requestor, expressed in centimeters.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
r13():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Specifies the radar cross-range resolution requested by the requestor, expressed in decimeters.
 * Example: /// Example: 100
 * Constraints: No constraints specified.
 */
r14():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Specifies the Earliest Start Time for which the service is requested.  Composite of fields R15-R20.
 * Example: /// Example: 2018-01-01T16:00:00.123456Z
 * Constraints: No constraints specified.
 */
jobReqEst():string|null
jobReqEst(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
jobReqEst(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specifies the maximum time from the requested start time after which the request is to be abandoned, expressed in seconds.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
r21():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Specifies the time duration for the radar job, measured from the actual start of the job, expressed in seconds.
 * Example: /// Example: 10
 * Constraints: No constraints specified.
 */
r22():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Specifies the revisit interval for the radar job, expressed in deciseconds.
 * Example: /// Example: 100
 * Constraints: No constraints specified.
 */
r23():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * the type of sensor or the platform.
 * Example: /// Example: TYPE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
r24():string|null
r24(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
r24(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The particular variant of the sensor type.
 * Example: /// Example: VARIANT
 * Constraints: Minimum length = 0, Maximum length = 8
 */
r25():string|null
r25(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
r25(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag field indicating that it is an initial request (flag = 0) or the desire of the requestor to cancel (flag = 1) the requested job.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
r26():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startMtiJobRequest_Full(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addR1(builder:flatbuffers.Builder, r1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(0, r1Offset, 0);
}

static addR2(builder:flatbuffers.Builder, r2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(1, r2Offset, 0);
}

static addR3(builder:flatbuffers.Builder, r3:number) {
  builder.addFieldInt32(2, r3, 0);
}

static addR4(builder:flatbuffers.Builder, r4:number) {
  builder.addFieldFloat64(3, r4, 0.0);
}

static addR5(builder:flatbuffers.Builder, r5:number) {
  builder.addFieldFloat64(4, r5, 0.0);
}

static addR6(builder:flatbuffers.Builder, r6:number) {
  builder.addFieldFloat64(5, r6, 0.0);
}

static addR7(builder:flatbuffers.Builder, r7:number) {
  builder.addFieldFloat64(6, r7, 0.0);
}

static addR8(builder:flatbuffers.Builder, r8:number) {
  builder.addFieldFloat64(7, r8, 0.0);
}

static addR9(builder:flatbuffers.Builder, r9:number) {
  builder.addFieldFloat64(8, r9, 0.0);
}

static addR10(builder:flatbuffers.Builder, r10:number) {
  builder.addFieldFloat64(9, r10, 0.0);
}

static addR11(builder:flatbuffers.Builder, r11:number) {
  builder.addFieldFloat64(10, r11, 0.0);
}

static addR12(builder:flatbuffers.Builder, r12Offset:flatbuffers.Offset) {
  builder.addFieldOffset(11, r12Offset, 0);
}

static addR13(builder:flatbuffers.Builder, r13:number) {
  builder.addFieldInt32(12, r13, 0);
}

static addR14(builder:flatbuffers.Builder, r14:number) {
  builder.addFieldInt32(13, r14, 0);
}

static addJobReqEst(builder:flatbuffers.Builder, jobReqEstOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, jobReqEstOffset, 0);
}

static addR21(builder:flatbuffers.Builder, r21:number) {
  builder.addFieldInt32(15, r21, 0);
}

static addR22(builder:flatbuffers.Builder, r22:number) {
  builder.addFieldInt32(16, r22, 0);
}

static addR23(builder:flatbuffers.Builder, r23:number) {
  builder.addFieldInt32(17, r23, 0);
}

static addR24(builder:flatbuffers.Builder, r24Offset:flatbuffers.Offset) {
  builder.addFieldOffset(18, r24Offset, 0);
}

static addR25(builder:flatbuffers.Builder, r25Offset:flatbuffers.Offset) {
  builder.addFieldOffset(19, r25Offset, 0);
}

static addR26(builder:flatbuffers.Builder, r26:boolean) {
  builder.addFieldInt8(20, +r26, +false);
}

static endMtiJobRequest_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMtiJobRequest_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIJ');
}

static finishSizePrefixedMtiJobRequest_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MTIJ', true);
}

static createMtiJobRequest_Full(builder:flatbuffers.Builder, r1Offset:flatbuffers.Offset, r2Offset:flatbuffers.Offset, r3:number, r4:number, r5:number, r6:number, r7:number, r8:number, r9:number, r10:number, r11:number, r12Offset:flatbuffers.Offset, r13:number, r14:number, jobReqEstOffset:flatbuffers.Offset, r21:number, r22:number, r23:number, r24Offset:flatbuffers.Offset, r25Offset:flatbuffers.Offset, r26:boolean):flatbuffers.Offset {
  MtiJobRequest_Full.startMtiJobRequest_Full(builder);
  MtiJobRequest_Full.addR1(builder, r1Offset);
  MtiJobRequest_Full.addR2(builder, r2Offset);
  MtiJobRequest_Full.addR3(builder, r3);
  MtiJobRequest_Full.addR4(builder, r4);
  MtiJobRequest_Full.addR5(builder, r5);
  MtiJobRequest_Full.addR6(builder, r6);
  MtiJobRequest_Full.addR7(builder, r7);
  MtiJobRequest_Full.addR8(builder, r8);
  MtiJobRequest_Full.addR9(builder, r9);
  MtiJobRequest_Full.addR10(builder, r10);
  MtiJobRequest_Full.addR11(builder, r11);
  MtiJobRequest_Full.addR12(builder, r12Offset);
  MtiJobRequest_Full.addR13(builder, r13);
  MtiJobRequest_Full.addR14(builder, r14);
  MtiJobRequest_Full.addJobReqEst(builder, jobReqEstOffset);
  MtiJobRequest_Full.addR21(builder, r21);
  MtiJobRequest_Full.addR22(builder, r22);
  MtiJobRequest_Full.addR23(builder, r23);
  MtiJobRequest_Full.addR24(builder, r24Offset);
  MtiJobRequest_Full.addR25(builder, r25Offset);
  MtiJobRequest_Full.addR26(builder, r26);
  return MtiJobRequest_Full.endMtiJobRequest_Full(builder);
}

unpack(): MtiJobRequest_FullT {
  return new MtiJobRequest_FullT(
    this.r1(),
    this.r2(),
    this.r3(),
    this.r4(),
    this.r5(),
    this.r6(),
    this.r7(),
    this.r8(),
    this.r9(),
    this.r10(),
    this.r11(),
    this.r12(),
    this.r13(),
    this.r14(),
    this.jobReqEst(),
    this.r21(),
    this.r22(),
    this.r23(),
    this.r24(),
    this.r25(),
    this.r26()
  );
}


unpackTo(_o: MtiJobRequest_FullT): void {
  _o.r1 = this.r1();
  _o.r2 = this.r2();
  _o.r3 = this.r3();
  _o.r4 = this.r4();
  _o.r5 = this.r5();
  _o.r6 = this.r6();
  _o.r7 = this.r7();
  _o.r8 = this.r8();
  _o.r9 = this.r9();
  _o.r10 = this.r10();
  _o.r11 = this.r11();
  _o.r12 = this.r12();
  _o.r13 = this.r13();
  _o.r14 = this.r14();
  _o.jobReqEst = this.jobReqEst();
  _o.r21 = this.r21();
  _o.r22 = this.r22();
  _o.r23 = this.r23();
  _o.r24 = this.r24();
  _o.r25 = this.r25();
  _o.r26 = this.r26();
}
}

export class MtiJobRequest_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public r1: string|Uint8Array|null = null,
  public r2: string|Uint8Array|null = null,
  public r3: number = 0,
  public r4: number = 0.0,
  public r5: number = 0.0,
  public r6: number = 0.0,
  public r7: number = 0.0,
  public r8: number = 0.0,
  public r9: number = 0.0,
  public r10: number = 0.0,
  public r11: number = 0.0,
  public r12: string|Uint8Array|null = null,
  public r13: number = 0,
  public r14: number = 0,
  public jobReqEst: string|Uint8Array|null = null,
  public r21: number = 0,
  public r22: number = 0,
  public r23: number = 0,
  public r24: string|Uint8Array|null = null,
  public r25: string|Uint8Array|null = null,
  public r26: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const r1 = (this.r1 !== null ? builder.createString(this.r1!) : 0);
  const r2 = (this.r2 !== null ? builder.createString(this.r2!) : 0);
  const r12 = (this.r12 !== null ? builder.createString(this.r12!) : 0);
  const jobReqEst = (this.jobReqEst !== null ? builder.createString(this.jobReqEst!) : 0);
  const r24 = (this.r24 !== null ? builder.createString(this.r24!) : 0);
  const r25 = (this.r25 !== null ? builder.createString(this.r25!) : 0);

  return MtiJobRequest_Full.createMtiJobRequest_Full(builder,
    r1,
    r2,
    this.r3,
    this.r4,
    this.r5,
    this.r6,
    this.r7,
    this.r8,
    this.r9,
    this.r10,
    this.r11,
    r12,
    this.r13,
    this.r14,
    jobReqEst,
    this.r21,
    this.r22,
    this.r23,
    r24,
    r25,
    this.r26
  );
}
}
