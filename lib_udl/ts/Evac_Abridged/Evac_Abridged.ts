// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Evac_Abridged_dataMode_Enum } from './Evac_Abridged_dataMode_Enum.js';
import { Evac_Abridged_type_Enum } from './Evac_Abridged_type_Enum.js';


/**
 * /// Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.
 */
export class Evac_Abridged implements flatbuffers.IUnpackableObject<Evac_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Evac_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEvac_Abridged(bb:flatbuffers.ByteBuffer, obj?:Evac_Abridged):Evac_Abridged {
  return (obj || new Evac_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEvac_Abridged(bb:flatbuffers.ByteBuffer, obj?:Evac_Abridged):Evac_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Evac_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EVAC');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: MEDEVACEVENT-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.
 * Example: /// Example: MedEvac-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
medevacId():string|null
medevacId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
medevacId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of this medevac record (REQUEST, RESPONSE).
 * Example: /// Example: REQUEST
 * Constraints: Minimum length = 1, Maximum length = 8
 */
type():Evac_Abridged_type_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Evac_Abridged_type_Enum.REQUEST;
}

/**
 * The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
 * Example: /// Example: GROUND
 * Constraints: Minimum length = 0, Maximum length = 8
 */
missionType():string|null
missionType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of a weather report associated with this evacuation.
 * Example: /// Example: WeatherReport-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idWeatherReport():string|null
idWeatherReport(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idWeatherReport(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of people Killed In Action.
 * Example: /// Example: 0
 * Constraints: No constraints specified.
 */
numKia():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of people Wounded In Action.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
numWia():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of littered personnel requiring evacuation.
 * Example: /// Example: 0
 * Constraints: No constraints specified.
 */
numLitter():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of ambulatory personnel requiring evacuation.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
numAmbulatory():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Flag indicating whether the mission requires medical personnel.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
medicReq():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Externally provided Medevac request number (e.g. MED.1.223908).
 * Example: /// Example: MED.1.234567
 * Constraints: Minimum length = 0, Maximum length = 36
 */
reqNum():string|null
reqNum(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reqNum(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The request time, in ISO 8601 UTC format.
 * Example: /// Example: 2021-10-15T16:00:00.123Z
 * Constraints: No constraints specified.
 */
reqTime():string|null
reqTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reqTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The call sign of this medevac requestor.
 * Example: /// Example: Bravo
 * Constraints: Minimum length = 0, Maximum length = 36
 */
reqCallSign():string|null
reqCallSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reqCallSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The expected pickup time, in ISO 8601 UTC format.
 * Example: /// Example: 2021-10-20T16:00:00.123Z
 * Constraints: No constraints specified.
 */
pickupTime():string|null
pickupTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pickupTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 75.1234
 * Constraints: No constraints specified.
 */
pickupLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 175.1234
 * Constraints: No constraints specified.
 */
pickupLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.
 * Example: /// Example: 30.1234
 * Constraints: No constraints specified.
 */
pickupAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
 * Example: /// Example: 10.1234
 * Constraints: No constraints specified.
 */
ce():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Height above lat/lon point, in meters (1-sigma, if representing linear error).
 * Example: /// Example: 5.1234
 * Constraints: No constraints specified.
 */
le():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
 * Example: /// Example: ROCKY
 * Constraints: Minimum length = 0, Maximum length = 32
 */
terrain():string|null
terrain(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
terrain(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Amplifying data for the terrain describing important obstacles in or around the zone.
 * Example: /// Example: N/A
 * Constraints: Minimum length = 0, Maximum length = 64
 */
obstaclesRemarks():string|null
obstaclesRemarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obstaclesRemarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Amplifying data for the terrain describing any notable additional terrain features.
 * Example: /// Example: N/A
 * Constraints: Minimum length = 0, Maximum length = 64
 */
terrainRemarks():string|null
terrainRemarks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
terrainRemarks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the zone.
 * Example: /// Example: example-zone
 * Constraints: Minimum length = 0, Maximum length = 128
 */
zoneName():string|null
zoneName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
zoneName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).
 * Example: /// Example: ILLUMINATION
 * Constraints: Minimum length = 0, Maximum length = 64
 */
zoneMarking():string|null
zoneMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
zoneMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
 * Example: /// Example: NO ENEMY
 * Constraints: Minimum length = 0, Maximum length = 64
 */
zoneSecurity():string|null
zoneSecurity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
zoneSecurity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
 * Example: /// Example: RED
 * Constraints: Minimum length = 0, Maximum length = 32
 */
zoneMarkingColor():string|null
zoneMarkingColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
zoneMarkingColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating that the pickup site is hot and hostiles are in the area.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
zoneHot():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The contact frequency, in Hz, of the agency or zone controller.
 * Example: /// Example: 3.11
 * Constraints: No constraints specified.
 */
cntctFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The call sign of the zone controller.
 * Example: /// Example: Tango
 * Constraints: Minimum length = 0, Maximum length = 128
 */
zoneContrCallSign():string|null
zoneContrCallSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
zoneContrCallSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The count of people requiring medevac.
 * Example: /// Example: 5
 * Constraints: No constraints specified.
 */
numCasualties():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Additional comments for the medevac mission.
 * Example: /// Example: Comments concerning mission
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
comments():string|null
comments(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
comments(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
casualtyInfo(index: number):string
casualtyInfo(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
casualtyInfo(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

casualtyInfoLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
enemyData(index: number):string
enemyData(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
enemyData(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

enemyDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Evac_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Evac_Abridged_dataMode_Enum.REAL;
}

static startEvac_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(40);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addMedevacId(builder:flatbuffers.Builder, medevacIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, medevacIdOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:Evac_Abridged_type_Enum) {
  builder.addFieldInt8(3, type, Evac_Abridged_type_Enum.REQUEST);
}

static addMissionType(builder:flatbuffers.Builder, missionTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, missionTypeOffset, 0);
}

static addIdWeatherReport(builder:flatbuffers.Builder, idWeatherReportOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, idWeatherReportOffset, 0);
}

static addNumKia(builder:flatbuffers.Builder, numKia:number) {
  builder.addFieldInt32(6, numKia, 0);
}

static addNumWia(builder:flatbuffers.Builder, numWia:number) {
  builder.addFieldInt32(7, numWia, 0);
}

static addNumLitter(builder:flatbuffers.Builder, numLitter:number) {
  builder.addFieldInt32(8, numLitter, 0);
}

static addNumAmbulatory(builder:flatbuffers.Builder, numAmbulatory:number) {
  builder.addFieldInt32(9, numAmbulatory, 0);
}

static addMedicReq(builder:flatbuffers.Builder, medicReq:boolean) {
  builder.addFieldInt8(10, +medicReq, +false);
}

static addReqNum(builder:flatbuffers.Builder, reqNumOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, reqNumOffset, 0);
}

static addReqTime(builder:flatbuffers.Builder, reqTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, reqTimeOffset, 0);
}

static addReqCallSign(builder:flatbuffers.Builder, reqCallSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, reqCallSignOffset, 0);
}

static addPickupTime(builder:flatbuffers.Builder, pickupTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, pickupTimeOffset, 0);
}

static addPickupLat(builder:flatbuffers.Builder, pickupLat:number) {
  builder.addFieldFloat64(15, pickupLat, 0.0);
}

static addPickupLon(builder:flatbuffers.Builder, pickupLon:number) {
  builder.addFieldFloat64(16, pickupLon, 0.0);
}

static addPickupAlt(builder:flatbuffers.Builder, pickupAlt:number) {
  builder.addFieldFloat64(17, pickupAlt, 0.0);
}

static addCe(builder:flatbuffers.Builder, ce:number) {
  builder.addFieldFloat64(18, ce, 0.0);
}

static addLe(builder:flatbuffers.Builder, le:number) {
  builder.addFieldFloat64(19, le, 0.0);
}

static addTerrain(builder:flatbuffers.Builder, terrainOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, terrainOffset, 0);
}

static addObstaclesRemarks(builder:flatbuffers.Builder, obstaclesRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, obstaclesRemarksOffset, 0);
}

static addTerrainRemarks(builder:flatbuffers.Builder, terrainRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, terrainRemarksOffset, 0);
}

static addZoneName(builder:flatbuffers.Builder, zoneNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, zoneNameOffset, 0);
}

static addZoneMarking(builder:flatbuffers.Builder, zoneMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, zoneMarkingOffset, 0);
}

static addZoneSecurity(builder:flatbuffers.Builder, zoneSecurityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, zoneSecurityOffset, 0);
}

static addZoneMarkingColor(builder:flatbuffers.Builder, zoneMarkingColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, zoneMarkingColorOffset, 0);
}

static addZoneHot(builder:flatbuffers.Builder, zoneHot:boolean) {
  builder.addFieldInt8(27, +zoneHot, +false);
}

static addCntctFreq(builder:flatbuffers.Builder, cntctFreq:number) {
  builder.addFieldFloat64(28, cntctFreq, 0.0);
}

static addZoneContrCallSign(builder:flatbuffers.Builder, zoneContrCallSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, zoneContrCallSignOffset, 0);
}

static addNumCasualties(builder:flatbuffers.Builder, numCasualties:number) {
  builder.addFieldInt32(30, numCasualties, 0);
}

static addComments(builder:flatbuffers.Builder, commentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, commentsOffset, 0);
}

static addCasualtyInfo(builder:flatbuffers.Builder, casualtyInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, casualtyInfoOffset, 0);
}

static createCasualtyInfoVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCasualtyInfoVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEnemyData(builder:flatbuffers.Builder, enemyDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, enemyDataOffset, 0);
}

static createEnemyDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEnemyDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, origNetworkOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Evac_Abridged_dataMode_Enum) {
  builder.addFieldInt8(39, dataMode, Evac_Abridged_dataMode_Enum.REAL);
}

static endEvac_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEvac_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC');
}

static finishSizePrefixedEvac_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC', true);
}

static createEvac_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, medevacIdOffset:flatbuffers.Offset, type:Evac_Abridged_type_Enum, missionTypeOffset:flatbuffers.Offset, idWeatherReportOffset:flatbuffers.Offset, numKia:number, numWia:number, numLitter:number, numAmbulatory:number, medicReq:boolean, reqNumOffset:flatbuffers.Offset, reqTimeOffset:flatbuffers.Offset, reqCallSignOffset:flatbuffers.Offset, pickupTimeOffset:flatbuffers.Offset, pickupLat:number, pickupLon:number, pickupAlt:number, ce:number, le:number, terrainOffset:flatbuffers.Offset, obstaclesRemarksOffset:flatbuffers.Offset, terrainRemarksOffset:flatbuffers.Offset, zoneNameOffset:flatbuffers.Offset, zoneMarkingOffset:flatbuffers.Offset, zoneSecurityOffset:flatbuffers.Offset, zoneMarkingColorOffset:flatbuffers.Offset, zoneHot:boolean, cntctFreq:number, zoneContrCallSignOffset:flatbuffers.Offset, numCasualties:number, commentsOffset:flatbuffers.Offset, casualtyInfoOffset:flatbuffers.Offset, enemyDataOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:Evac_Abridged_dataMode_Enum):flatbuffers.Offset {
  Evac_Abridged.startEvac_Abridged(builder);
  Evac_Abridged.addId(builder, idOffset);
  Evac_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  Evac_Abridged.addMedevacId(builder, medevacIdOffset);
  Evac_Abridged.addType(builder, type);
  Evac_Abridged.addMissionType(builder, missionTypeOffset);
  Evac_Abridged.addIdWeatherReport(builder, idWeatherReportOffset);
  Evac_Abridged.addNumKia(builder, numKia);
  Evac_Abridged.addNumWia(builder, numWia);
  Evac_Abridged.addNumLitter(builder, numLitter);
  Evac_Abridged.addNumAmbulatory(builder, numAmbulatory);
  Evac_Abridged.addMedicReq(builder, medicReq);
  Evac_Abridged.addReqNum(builder, reqNumOffset);
  Evac_Abridged.addReqTime(builder, reqTimeOffset);
  Evac_Abridged.addReqCallSign(builder, reqCallSignOffset);
  Evac_Abridged.addPickupTime(builder, pickupTimeOffset);
  Evac_Abridged.addPickupLat(builder, pickupLat);
  Evac_Abridged.addPickupLon(builder, pickupLon);
  Evac_Abridged.addPickupAlt(builder, pickupAlt);
  Evac_Abridged.addCe(builder, ce);
  Evac_Abridged.addLe(builder, le);
  Evac_Abridged.addTerrain(builder, terrainOffset);
  Evac_Abridged.addObstaclesRemarks(builder, obstaclesRemarksOffset);
  Evac_Abridged.addTerrainRemarks(builder, terrainRemarksOffset);
  Evac_Abridged.addZoneName(builder, zoneNameOffset);
  Evac_Abridged.addZoneMarking(builder, zoneMarkingOffset);
  Evac_Abridged.addZoneSecurity(builder, zoneSecurityOffset);
  Evac_Abridged.addZoneMarkingColor(builder, zoneMarkingColorOffset);
  Evac_Abridged.addZoneHot(builder, zoneHot);
  Evac_Abridged.addCntctFreq(builder, cntctFreq);
  Evac_Abridged.addZoneContrCallSign(builder, zoneContrCallSignOffset);
  Evac_Abridged.addNumCasualties(builder, numCasualties);
  Evac_Abridged.addComments(builder, commentsOffset);
  Evac_Abridged.addCasualtyInfo(builder, casualtyInfoOffset);
  Evac_Abridged.addEnemyData(builder, enemyDataOffset);
  Evac_Abridged.addOrigNetwork(builder, origNetworkOffset);
  Evac_Abridged.addCreatedAt(builder, createdAtOffset);
  Evac_Abridged.addCreatedBy(builder, createdByOffset);
  Evac_Abridged.addSource(builder, sourceOffset);
  Evac_Abridged.addOrigin(builder, originOffset);
  Evac_Abridged.addDataMode(builder, dataMode);
  return Evac_Abridged.endEvac_Abridged(builder);
}

unpack(): Evac_AbridgedT {
  return new Evac_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.medevacId(),
    this.type(),
    this.missionType(),
    this.idWeatherReport(),
    this.numKia(),
    this.numWia(),
    this.numLitter(),
    this.numAmbulatory(),
    this.medicReq(),
    this.reqNum(),
    this.reqTime(),
    this.reqCallSign(),
    this.pickupTime(),
    this.pickupLat(),
    this.pickupLon(),
    this.pickupAlt(),
    this.ce(),
    this.le(),
    this.terrain(),
    this.obstaclesRemarks(),
    this.terrainRemarks(),
    this.zoneName(),
    this.zoneMarking(),
    this.zoneSecurity(),
    this.zoneMarkingColor(),
    this.zoneHot(),
    this.cntctFreq(),
    this.zoneContrCallSign(),
    this.numCasualties(),
    this.comments(),
    this.bb!.createScalarList<string>(this.casualtyInfo.bind(this), this.casualtyInfoLength()),
    this.bb!.createScalarList<string>(this.enemyData.bind(this), this.enemyDataLength()),
    this.origNetwork(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode()
  );
}


unpackTo(_o: Evac_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.medevacId = this.medevacId();
  _o.type = this.type();
  _o.missionType = this.missionType();
  _o.idWeatherReport = this.idWeatherReport();
  _o.numKia = this.numKia();
  _o.numWia = this.numWia();
  _o.numLitter = this.numLitter();
  _o.numAmbulatory = this.numAmbulatory();
  _o.medicReq = this.medicReq();
  _o.reqNum = this.reqNum();
  _o.reqTime = this.reqTime();
  _o.reqCallSign = this.reqCallSign();
  _o.pickupTime = this.pickupTime();
  _o.pickupLat = this.pickupLat();
  _o.pickupLon = this.pickupLon();
  _o.pickupAlt = this.pickupAlt();
  _o.ce = this.ce();
  _o.le = this.le();
  _o.terrain = this.terrain();
  _o.obstaclesRemarks = this.obstaclesRemarks();
  _o.terrainRemarks = this.terrainRemarks();
  _o.zoneName = this.zoneName();
  _o.zoneMarking = this.zoneMarking();
  _o.zoneSecurity = this.zoneSecurity();
  _o.zoneMarkingColor = this.zoneMarkingColor();
  _o.zoneHot = this.zoneHot();
  _o.cntctFreq = this.cntctFreq();
  _o.zoneContrCallSign = this.zoneContrCallSign();
  _o.numCasualties = this.numCasualties();
  _o.comments = this.comments();
  _o.casualtyInfo = this.bb!.createScalarList<string>(this.casualtyInfo.bind(this), this.casualtyInfoLength());
  _o.enemyData = this.bb!.createScalarList<string>(this.enemyData.bind(this), this.enemyDataLength());
  _o.origNetwork = this.origNetwork();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
}
}

export class Evac_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public medevacId: string|Uint8Array|null = null,
  public type: Evac_Abridged_type_Enum = Evac_Abridged_type_Enum.REQUEST,
  public missionType: string|Uint8Array|null = null,
  public idWeatherReport: string|Uint8Array|null = null,
  public numKia: number = 0,
  public numWia: number = 0,
  public numLitter: number = 0,
  public numAmbulatory: number = 0,
  public medicReq: boolean = false,
  public reqNum: string|Uint8Array|null = null,
  public reqTime: string|Uint8Array|null = null,
  public reqCallSign: string|Uint8Array|null = null,
  public pickupTime: string|Uint8Array|null = null,
  public pickupLat: number = 0.0,
  public pickupLon: number = 0.0,
  public pickupAlt: number = 0.0,
  public ce: number = 0.0,
  public le: number = 0.0,
  public terrain: string|Uint8Array|null = null,
  public obstaclesRemarks: string|Uint8Array|null = null,
  public terrainRemarks: string|Uint8Array|null = null,
  public zoneName: string|Uint8Array|null = null,
  public zoneMarking: string|Uint8Array|null = null,
  public zoneSecurity: string|Uint8Array|null = null,
  public zoneMarkingColor: string|Uint8Array|null = null,
  public zoneHot: boolean = false,
  public cntctFreq: number = 0.0,
  public zoneContrCallSign: string|Uint8Array|null = null,
  public numCasualties: number = 0,
  public comments: string|Uint8Array|null = null,
  public casualtyInfo: (string)[] = [],
  public enemyData: (string)[] = [],
  public origNetwork: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: Evac_Abridged_dataMode_Enum = Evac_Abridged_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const medevacId = (this.medevacId !== null ? builder.createString(this.medevacId!) : 0);
  const missionType = (this.missionType !== null ? builder.createString(this.missionType!) : 0);
  const idWeatherReport = (this.idWeatherReport !== null ? builder.createString(this.idWeatherReport!) : 0);
  const reqNum = (this.reqNum !== null ? builder.createString(this.reqNum!) : 0);
  const reqTime = (this.reqTime !== null ? builder.createString(this.reqTime!) : 0);
  const reqCallSign = (this.reqCallSign !== null ? builder.createString(this.reqCallSign!) : 0);
  const pickupTime = (this.pickupTime !== null ? builder.createString(this.pickupTime!) : 0);
  const terrain = (this.terrain !== null ? builder.createString(this.terrain!) : 0);
  const obstaclesRemarks = (this.obstaclesRemarks !== null ? builder.createString(this.obstaclesRemarks!) : 0);
  const terrainRemarks = (this.terrainRemarks !== null ? builder.createString(this.terrainRemarks!) : 0);
  const zoneName = (this.zoneName !== null ? builder.createString(this.zoneName!) : 0);
  const zoneMarking = (this.zoneMarking !== null ? builder.createString(this.zoneMarking!) : 0);
  const zoneSecurity = (this.zoneSecurity !== null ? builder.createString(this.zoneSecurity!) : 0);
  const zoneMarkingColor = (this.zoneMarkingColor !== null ? builder.createString(this.zoneMarkingColor!) : 0);
  const zoneContrCallSign = (this.zoneContrCallSign !== null ? builder.createString(this.zoneContrCallSign!) : 0);
  const comments = (this.comments !== null ? builder.createString(this.comments!) : 0);
  const casualtyInfo = Evac_Abridged.createCasualtyInfoVector(builder, builder.createObjectOffsetList(this.casualtyInfo));
  const enemyData = Evac_Abridged.createEnemyDataVector(builder, builder.createObjectOffsetList(this.enemyData));
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);

  return Evac_Abridged.createEvac_Abridged(builder,
    id,
    classificationMarking,
    medevacId,
    this.type,
    missionType,
    idWeatherReport,
    this.numKia,
    this.numWia,
    this.numLitter,
    this.numAmbulatory,
    this.medicReq,
    reqNum,
    reqTime,
    reqCallSign,
    pickupTime,
    this.pickupLat,
    this.pickupLon,
    this.pickupAlt,
    this.ce,
    this.le,
    terrain,
    obstaclesRemarks,
    terrainRemarks,
    zoneName,
    zoneMarking,
    zoneSecurity,
    zoneMarkingColor,
    this.zoneHot,
    this.cntctFreq,
    zoneContrCallSign,
    this.numCasualties,
    comments,
    casualtyInfo,
    enemyData,
    origNetwork,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode
  );
}
}
