// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Identity and medical information on the patient to be evacuated.
 */
export class EvacCasualtyInfo_Full implements flatbuffers.IUnpackableObject<EvacCasualtyInfo_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EvacCasualtyInfo_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEvacCasualtyInfo_Full(bb:flatbuffers.ByteBuffer, obj?:EvacCasualtyInfo_Full):EvacCasualtyInfo_Full {
  return (obj || new EvacCasualtyInfo_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEvacCasualtyInfo_Full(bb:flatbuffers.ByteBuffer, obj?:EvacCasualtyInfo_Full):EvacCasualtyInfo_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EvacCasualtyInfo_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('EVAC');
}

/**
 * The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).
 * Example: /// Example: ROUTINE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
priority():string|null
priority(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
priority(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
 * Example: /// Example: GROUND
 * Constraints: Minimum length = 0, Maximum length = 64
 */
evacType():string|null
evacType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
evacType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).
 * Example: /// Example: DENTAL
 * Constraints: Minimum length = 0, Maximum length = 32
 */
casualtyType():string|null
casualtyType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
casualtyType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).
 * Example: /// Example: FACE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
bodyPart():string|null
bodyPart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bodyPart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).
 * Example: /// Example: NONE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
contamType():string|null
contamType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
contamType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
 * Example: /// Example: ['OXYGEN', 'HOIST']
 * Constraints: No constraints specified.
 */
specMedEquip(index: number):string
specMedEquip(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
specMedEquip(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

specMedEquipLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional casualty key.
 * Example: /// Example: casualty-007
 * Constraints: Minimum length = 0, Maximum length = 36
 */
casualtyKey():string|null
casualtyKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
casualtyKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).
 * Example: /// Example: US CIVILIAN
 * Constraints: Minimum length = 0, Maximum length = 32
 */
patientStatus():string|null
patientStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
patientStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
 * Example: /// Example: FRIEND CIVILIAN
 * Constraints: Minimum length = 0, Maximum length = 32
 */
patientIdentity():string|null
patientIdentity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
patientIdentity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The country code indicating the citizenship of the patient.
 * Example: /// Example: US
 * Constraints: Minimum length = 0, Maximum length = 4
 */
nationality():string|null
nationality(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nationality(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).
 * Example: /// Example: CIVILIAN
 * Constraints: Minimum length = 0, Maximum length = 16
 */
payGrade():string|null
payGrade(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
payGrade(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The patient common or legal name.
 * Example: /// Example: John Smith
 * Constraints: Minimum length = 0, Maximum length = 64
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The patient age, in years.
 * Example: /// Example: 35
 * Constraints: No constraints specified.
 */
age():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The patient sex (MALE, FEMALE).
 * Example: /// Example: MALE
 * Constraints: Minimum length = 0, Maximum length = 8
 */
gender():string|null
gender(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gender(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Last 4 characters of the patient social security code, or equivalent.
 * Example: /// Example: 1234
 * Constraints: Minimum length = 0, Maximum length = 4
 */
last4Ssn():string|null
last4Ssn(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
last4Ssn(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).
 * Example: /// Example: O NEG
 * Constraints: Minimum length = 0, Maximum length = 6
 */
bloodType():string|null
bloodType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bloodType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).
 * Example: /// Example: CIV
 * Constraints: Minimum length = 0, Maximum length = 32
 */
service():string|null
service(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
service(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The call sign of this patient.
 * Example: /// Example: SHARK
 * Constraints: Minimum length = 0, Maximum length = 128
 */
callSign():string|null
callSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
callSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The career field of this patient.
 * Example: /// Example: Healthcare
 * Constraints: Minimum length = 0, Maximum length = 128
 */
occSpeciality():string|null
occSpeciality(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
occSpeciality(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
 * Example: /// Example: [-33.123, 150.33, 0.24]
 * Constraints: No constraints specified.
 */
burialLocation(index: number):string
burialLocation(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
burialLocation(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

burialLocationLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
 * Example: /// Example: [12.44, 122.55, 0.98]
 * Constraints: No constraints specified.
 */
collectionPoint(index: number):string
collectionPoint(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
collectionPoint(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

collectionPointLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Unique identifier for the patient care provider.
 * Example: /// Example: CARE_PROVIDER-1
 * Constraints: Minimum length = 0, Maximum length = 64
 */
careProviderUrn():string|null
careProviderUrn(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
careProviderUrn(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
 * Example: /// Example: EVACUATE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
dispositionType():string|null
dispositionType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dispositionType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).
 * Example: /// Example: EVACUATE WOUNDED
 * Constraints: Minimum length = 0, Maximum length = 32
 */
disposition():string|null
disposition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
disposition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
 * Example: /// Example: DEVICE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
reportGen():string|null
reportGen(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reportGen(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.
 * Example: /// Example: 2021-10-15T16:00:00.123Z
 * Constraints: No constraints specified.
 */
reportTime():string|null
reportTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reportTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional comments on the  patient's casualty information.
 * Example: /// Example: Comments relating to this casualty info.
 * Constraints: Minimum length = 0, Maximum length = 1024
 */
comments():string|null
comments(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
comments(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Medical condition causation information.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
etiology(index: number):string
etiology(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
etiology(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

etiologyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Treatment information.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
treatment(index: number):string
treatment(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
treatment(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

treatmentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Information obtained for vital signs.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
vitalSignData(index: number):string
vitalSignData(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
vitalSignData(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

vitalSignDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Health state information.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
healthState(index: number):string
healthState(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
healthState(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

healthStateLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Health condition information.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
condition(index: number):string
condition(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
condition(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

conditionLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Medication specifics.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
medication(index: number):string
medication(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
medication(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

medicationLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Injury specifics.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
injury(index: number):string
injury(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
injury(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

injuryLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Allergy information.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
allergy(index: number):string
allergy(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
allergy(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

allergyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startEvacCasualtyInfo_Full(builder:flatbuffers.Builder) {
  builder.startObject(35);
}

static addPriority(builder:flatbuffers.Builder, priorityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, priorityOffset, 0);
}

static addEvacType(builder:flatbuffers.Builder, evacTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, evacTypeOffset, 0);
}

static addCasualtyType(builder:flatbuffers.Builder, casualtyTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, casualtyTypeOffset, 0);
}

static addBodyPart(builder:flatbuffers.Builder, bodyPartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, bodyPartOffset, 0);
}

static addContamType(builder:flatbuffers.Builder, contamTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, contamTypeOffset, 0);
}

static addSpecMedEquip(builder:flatbuffers.Builder, specMedEquipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, specMedEquipOffset, 0);
}

static createSpecMedEquipVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSpecMedEquipVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCasualtyKey(builder:flatbuffers.Builder, casualtyKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, casualtyKeyOffset, 0);
}

static addPatientStatus(builder:flatbuffers.Builder, patientStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, patientStatusOffset, 0);
}

static addPatientIdentity(builder:flatbuffers.Builder, patientIdentityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, patientIdentityOffset, 0);
}

static addNationality(builder:flatbuffers.Builder, nationalityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, nationalityOffset, 0);
}

static addPayGrade(builder:flatbuffers.Builder, payGradeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, payGradeOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, nameOffset, 0);
}

static addAge(builder:flatbuffers.Builder, age:number) {
  builder.addFieldInt32(12, age, 0);
}

static addGender(builder:flatbuffers.Builder, genderOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, genderOffset, 0);
}

static addLast4Ssn(builder:flatbuffers.Builder, last4SsnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, last4SsnOffset, 0);
}

static addBloodType(builder:flatbuffers.Builder, bloodTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, bloodTypeOffset, 0);
}

static addService(builder:flatbuffers.Builder, serviceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, serviceOffset, 0);
}

static addCallSign(builder:flatbuffers.Builder, callSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, callSignOffset, 0);
}

static addOccSpeciality(builder:flatbuffers.Builder, occSpecialityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, occSpecialityOffset, 0);
}

static addBurialLocation(builder:flatbuffers.Builder, burialLocationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, burialLocationOffset, 0);
}

static createBurialLocationVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBurialLocationVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCollectionPoint(builder:flatbuffers.Builder, collectionPointOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, collectionPointOffset, 0);
}

static createCollectionPointVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCollectionPointVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCareProviderUrn(builder:flatbuffers.Builder, careProviderUrnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, careProviderUrnOffset, 0);
}

static addDispositionType(builder:flatbuffers.Builder, dispositionTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, dispositionTypeOffset, 0);
}

static addDisposition(builder:flatbuffers.Builder, dispositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, dispositionOffset, 0);
}

static addReportGen(builder:flatbuffers.Builder, reportGenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, reportGenOffset, 0);
}

static addReportTime(builder:flatbuffers.Builder, reportTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, reportTimeOffset, 0);
}

static addComments(builder:flatbuffers.Builder, commentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, commentsOffset, 0);
}

static addEtiology(builder:flatbuffers.Builder, etiologyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, etiologyOffset, 0);
}

static createEtiologyVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEtiologyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTreatment(builder:flatbuffers.Builder, treatmentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, treatmentOffset, 0);
}

static createTreatmentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTreatmentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addVitalSignData(builder:flatbuffers.Builder, vitalSignDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, vitalSignDataOffset, 0);
}

static createVitalSignDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVitalSignDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addHealthState(builder:flatbuffers.Builder, healthStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, healthStateOffset, 0);
}

static createHealthStateVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startHealthStateVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCondition(builder:flatbuffers.Builder, conditionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, conditionOffset, 0);
}

static createConditionVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startConditionVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMedication(builder:flatbuffers.Builder, medicationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, medicationOffset, 0);
}

static createMedicationVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMedicationVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addInjury(builder:flatbuffers.Builder, injuryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, injuryOffset, 0);
}

static createInjuryVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInjuryVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAllergy(builder:flatbuffers.Builder, allergyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, allergyOffset, 0);
}

static createAllergyVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAllergyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endEvacCasualtyInfo_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEvacCasualtyInfo_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC');
}

static finishSizePrefixedEvacCasualtyInfo_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'EVAC', true);
}

static createEvacCasualtyInfo_Full(builder:flatbuffers.Builder, priorityOffset:flatbuffers.Offset, evacTypeOffset:flatbuffers.Offset, casualtyTypeOffset:flatbuffers.Offset, bodyPartOffset:flatbuffers.Offset, contamTypeOffset:flatbuffers.Offset, specMedEquipOffset:flatbuffers.Offset, casualtyKeyOffset:flatbuffers.Offset, patientStatusOffset:flatbuffers.Offset, patientIdentityOffset:flatbuffers.Offset, nationalityOffset:flatbuffers.Offset, payGradeOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, age:number, genderOffset:flatbuffers.Offset, last4SsnOffset:flatbuffers.Offset, bloodTypeOffset:flatbuffers.Offset, serviceOffset:flatbuffers.Offset, callSignOffset:flatbuffers.Offset, occSpecialityOffset:flatbuffers.Offset, burialLocationOffset:flatbuffers.Offset, collectionPointOffset:flatbuffers.Offset, careProviderUrnOffset:flatbuffers.Offset, dispositionTypeOffset:flatbuffers.Offset, dispositionOffset:flatbuffers.Offset, reportGenOffset:flatbuffers.Offset, reportTimeOffset:flatbuffers.Offset, commentsOffset:flatbuffers.Offset, etiologyOffset:flatbuffers.Offset, treatmentOffset:flatbuffers.Offset, vitalSignDataOffset:flatbuffers.Offset, healthStateOffset:flatbuffers.Offset, conditionOffset:flatbuffers.Offset, medicationOffset:flatbuffers.Offset, injuryOffset:flatbuffers.Offset, allergyOffset:flatbuffers.Offset):flatbuffers.Offset {
  EvacCasualtyInfo_Full.startEvacCasualtyInfo_Full(builder);
  EvacCasualtyInfo_Full.addPriority(builder, priorityOffset);
  EvacCasualtyInfo_Full.addEvacType(builder, evacTypeOffset);
  EvacCasualtyInfo_Full.addCasualtyType(builder, casualtyTypeOffset);
  EvacCasualtyInfo_Full.addBodyPart(builder, bodyPartOffset);
  EvacCasualtyInfo_Full.addContamType(builder, contamTypeOffset);
  EvacCasualtyInfo_Full.addSpecMedEquip(builder, specMedEquipOffset);
  EvacCasualtyInfo_Full.addCasualtyKey(builder, casualtyKeyOffset);
  EvacCasualtyInfo_Full.addPatientStatus(builder, patientStatusOffset);
  EvacCasualtyInfo_Full.addPatientIdentity(builder, patientIdentityOffset);
  EvacCasualtyInfo_Full.addNationality(builder, nationalityOffset);
  EvacCasualtyInfo_Full.addPayGrade(builder, payGradeOffset);
  EvacCasualtyInfo_Full.addName(builder, nameOffset);
  EvacCasualtyInfo_Full.addAge(builder, age);
  EvacCasualtyInfo_Full.addGender(builder, genderOffset);
  EvacCasualtyInfo_Full.addLast4Ssn(builder, last4SsnOffset);
  EvacCasualtyInfo_Full.addBloodType(builder, bloodTypeOffset);
  EvacCasualtyInfo_Full.addService(builder, serviceOffset);
  EvacCasualtyInfo_Full.addCallSign(builder, callSignOffset);
  EvacCasualtyInfo_Full.addOccSpeciality(builder, occSpecialityOffset);
  EvacCasualtyInfo_Full.addBurialLocation(builder, burialLocationOffset);
  EvacCasualtyInfo_Full.addCollectionPoint(builder, collectionPointOffset);
  EvacCasualtyInfo_Full.addCareProviderUrn(builder, careProviderUrnOffset);
  EvacCasualtyInfo_Full.addDispositionType(builder, dispositionTypeOffset);
  EvacCasualtyInfo_Full.addDisposition(builder, dispositionOffset);
  EvacCasualtyInfo_Full.addReportGen(builder, reportGenOffset);
  EvacCasualtyInfo_Full.addReportTime(builder, reportTimeOffset);
  EvacCasualtyInfo_Full.addComments(builder, commentsOffset);
  EvacCasualtyInfo_Full.addEtiology(builder, etiologyOffset);
  EvacCasualtyInfo_Full.addTreatment(builder, treatmentOffset);
  EvacCasualtyInfo_Full.addVitalSignData(builder, vitalSignDataOffset);
  EvacCasualtyInfo_Full.addHealthState(builder, healthStateOffset);
  EvacCasualtyInfo_Full.addCondition(builder, conditionOffset);
  EvacCasualtyInfo_Full.addMedication(builder, medicationOffset);
  EvacCasualtyInfo_Full.addInjury(builder, injuryOffset);
  EvacCasualtyInfo_Full.addAllergy(builder, allergyOffset);
  return EvacCasualtyInfo_Full.endEvacCasualtyInfo_Full(builder);
}

unpack(): EvacCasualtyInfo_FullT {
  return new EvacCasualtyInfo_FullT(
    this.priority(),
    this.evacType(),
    this.casualtyType(),
    this.bodyPart(),
    this.contamType(),
    this.bb!.createScalarList<string>(this.specMedEquip.bind(this), this.specMedEquipLength()),
    this.casualtyKey(),
    this.patientStatus(),
    this.patientIdentity(),
    this.nationality(),
    this.payGrade(),
    this.name(),
    this.age(),
    this.gender(),
    this.last4Ssn(),
    this.bloodType(),
    this.service(),
    this.callSign(),
    this.occSpeciality(),
    this.bb!.createScalarList<string>(this.burialLocation.bind(this), this.burialLocationLength()),
    this.bb!.createScalarList<string>(this.collectionPoint.bind(this), this.collectionPointLength()),
    this.careProviderUrn(),
    this.dispositionType(),
    this.disposition(),
    this.reportGen(),
    this.reportTime(),
    this.comments(),
    this.bb!.createScalarList<string>(this.etiology.bind(this), this.etiologyLength()),
    this.bb!.createScalarList<string>(this.treatment.bind(this), this.treatmentLength()),
    this.bb!.createScalarList<string>(this.vitalSignData.bind(this), this.vitalSignDataLength()),
    this.bb!.createScalarList<string>(this.healthState.bind(this), this.healthStateLength()),
    this.bb!.createScalarList<string>(this.condition.bind(this), this.conditionLength()),
    this.bb!.createScalarList<string>(this.medication.bind(this), this.medicationLength()),
    this.bb!.createScalarList<string>(this.injury.bind(this), this.injuryLength()),
    this.bb!.createScalarList<string>(this.allergy.bind(this), this.allergyLength())
  );
}


unpackTo(_o: EvacCasualtyInfo_FullT): void {
  _o.priority = this.priority();
  _o.evacType = this.evacType();
  _o.casualtyType = this.casualtyType();
  _o.bodyPart = this.bodyPart();
  _o.contamType = this.contamType();
  _o.specMedEquip = this.bb!.createScalarList<string>(this.specMedEquip.bind(this), this.specMedEquipLength());
  _o.casualtyKey = this.casualtyKey();
  _o.patientStatus = this.patientStatus();
  _o.patientIdentity = this.patientIdentity();
  _o.nationality = this.nationality();
  _o.payGrade = this.payGrade();
  _o.name = this.name();
  _o.age = this.age();
  _o.gender = this.gender();
  _o.last4Ssn = this.last4Ssn();
  _o.bloodType = this.bloodType();
  _o.service = this.service();
  _o.callSign = this.callSign();
  _o.occSpeciality = this.occSpeciality();
  _o.burialLocation = this.bb!.createScalarList<string>(this.burialLocation.bind(this), this.burialLocationLength());
  _o.collectionPoint = this.bb!.createScalarList<string>(this.collectionPoint.bind(this), this.collectionPointLength());
  _o.careProviderUrn = this.careProviderUrn();
  _o.dispositionType = this.dispositionType();
  _o.disposition = this.disposition();
  _o.reportGen = this.reportGen();
  _o.reportTime = this.reportTime();
  _o.comments = this.comments();
  _o.etiology = this.bb!.createScalarList<string>(this.etiology.bind(this), this.etiologyLength());
  _o.treatment = this.bb!.createScalarList<string>(this.treatment.bind(this), this.treatmentLength());
  _o.vitalSignData = this.bb!.createScalarList<string>(this.vitalSignData.bind(this), this.vitalSignDataLength());
  _o.healthState = this.bb!.createScalarList<string>(this.healthState.bind(this), this.healthStateLength());
  _o.condition = this.bb!.createScalarList<string>(this.condition.bind(this), this.conditionLength());
  _o.medication = this.bb!.createScalarList<string>(this.medication.bind(this), this.medicationLength());
  _o.injury = this.bb!.createScalarList<string>(this.injury.bind(this), this.injuryLength());
  _o.allergy = this.bb!.createScalarList<string>(this.allergy.bind(this), this.allergyLength());
}
}

export class EvacCasualtyInfo_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public priority: string|Uint8Array|null = null,
  public evacType: string|Uint8Array|null = null,
  public casualtyType: string|Uint8Array|null = null,
  public bodyPart: string|Uint8Array|null = null,
  public contamType: string|Uint8Array|null = null,
  public specMedEquip: (string)[] = [],
  public casualtyKey: string|Uint8Array|null = null,
  public patientStatus: string|Uint8Array|null = null,
  public patientIdentity: string|Uint8Array|null = null,
  public nationality: string|Uint8Array|null = null,
  public payGrade: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public age: number = 0,
  public gender: string|Uint8Array|null = null,
  public last4Ssn: string|Uint8Array|null = null,
  public bloodType: string|Uint8Array|null = null,
  public service: string|Uint8Array|null = null,
  public callSign: string|Uint8Array|null = null,
  public occSpeciality: string|Uint8Array|null = null,
  public burialLocation: (string)[] = [],
  public collectionPoint: (string)[] = [],
  public careProviderUrn: string|Uint8Array|null = null,
  public dispositionType: string|Uint8Array|null = null,
  public disposition: string|Uint8Array|null = null,
  public reportGen: string|Uint8Array|null = null,
  public reportTime: string|Uint8Array|null = null,
  public comments: string|Uint8Array|null = null,
  public etiology: (string)[] = [],
  public treatment: (string)[] = [],
  public vitalSignData: (string)[] = [],
  public healthState: (string)[] = [],
  public condition: (string)[] = [],
  public medication: (string)[] = [],
  public injury: (string)[] = [],
  public allergy: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const priority = (this.priority !== null ? builder.createString(this.priority!) : 0);
  const evacType = (this.evacType !== null ? builder.createString(this.evacType!) : 0);
  const casualtyType = (this.casualtyType !== null ? builder.createString(this.casualtyType!) : 0);
  const bodyPart = (this.bodyPart !== null ? builder.createString(this.bodyPart!) : 0);
  const contamType = (this.contamType !== null ? builder.createString(this.contamType!) : 0);
  const specMedEquip = EvacCasualtyInfo_Full.createSpecMedEquipVector(builder, builder.createObjectOffsetList(this.specMedEquip));
  const casualtyKey = (this.casualtyKey !== null ? builder.createString(this.casualtyKey!) : 0);
  const patientStatus = (this.patientStatus !== null ? builder.createString(this.patientStatus!) : 0);
  const patientIdentity = (this.patientIdentity !== null ? builder.createString(this.patientIdentity!) : 0);
  const nationality = (this.nationality !== null ? builder.createString(this.nationality!) : 0);
  const payGrade = (this.payGrade !== null ? builder.createString(this.payGrade!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const gender = (this.gender !== null ? builder.createString(this.gender!) : 0);
  const last4Ssn = (this.last4Ssn !== null ? builder.createString(this.last4Ssn!) : 0);
  const bloodType = (this.bloodType !== null ? builder.createString(this.bloodType!) : 0);
  const service = (this.service !== null ? builder.createString(this.service!) : 0);
  const callSign = (this.callSign !== null ? builder.createString(this.callSign!) : 0);
  const occSpeciality = (this.occSpeciality !== null ? builder.createString(this.occSpeciality!) : 0);
  const burialLocation = EvacCasualtyInfo_Full.createBurialLocationVector(builder, builder.createObjectOffsetList(this.burialLocation));
  const collectionPoint = EvacCasualtyInfo_Full.createCollectionPointVector(builder, builder.createObjectOffsetList(this.collectionPoint));
  const careProviderUrn = (this.careProviderUrn !== null ? builder.createString(this.careProviderUrn!) : 0);
  const dispositionType = (this.dispositionType !== null ? builder.createString(this.dispositionType!) : 0);
  const disposition = (this.disposition !== null ? builder.createString(this.disposition!) : 0);
  const reportGen = (this.reportGen !== null ? builder.createString(this.reportGen!) : 0);
  const reportTime = (this.reportTime !== null ? builder.createString(this.reportTime!) : 0);
  const comments = (this.comments !== null ? builder.createString(this.comments!) : 0);
  const etiology = EvacCasualtyInfo_Full.createEtiologyVector(builder, builder.createObjectOffsetList(this.etiology));
  const treatment = EvacCasualtyInfo_Full.createTreatmentVector(builder, builder.createObjectOffsetList(this.treatment));
  const vitalSignData = EvacCasualtyInfo_Full.createVitalSignDataVector(builder, builder.createObjectOffsetList(this.vitalSignData));
  const healthState = EvacCasualtyInfo_Full.createHealthStateVector(builder, builder.createObjectOffsetList(this.healthState));
  const condition = EvacCasualtyInfo_Full.createConditionVector(builder, builder.createObjectOffsetList(this.condition));
  const medication = EvacCasualtyInfo_Full.createMedicationVector(builder, builder.createObjectOffsetList(this.medication));
  const injury = EvacCasualtyInfo_Full.createInjuryVector(builder, builder.createObjectOffsetList(this.injury));
  const allergy = EvacCasualtyInfo_Full.createAllergyVector(builder, builder.createObjectOffsetList(this.allergy));

  return EvacCasualtyInfo_Full.createEvacCasualtyInfo_Full(builder,
    priority,
    evacType,
    casualtyType,
    bodyPart,
    contamType,
    specMedEquip,
    casualtyKey,
    patientStatus,
    patientIdentity,
    nationality,
    payGrade,
    name,
    this.age,
    gender,
    last4Ssn,
    bloodType,
    service,
    callSign,
    occSpeciality,
    burialLocation,
    collectionPoint,
    careProviderUrn,
    dispositionType,
    disposition,
    reportGen,
    reportTime,
    comments,
    etiology,
    treatment,
    vitalSignData,
    healthState,
    condition,
    medication,
    injury,
    allergy
  );
}
}
