// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
 */
export class DataLinkVoiceCoord_Abridged implements flatbuffers.IUnpackableObject<DataLinkVoiceCoord_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataLinkVoiceCoord_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataLinkVoiceCoord_Abridged(bb:flatbuffers.ByteBuffer, obj?:DataLinkVoiceCoord_Abridged):DataLinkVoiceCoord_Abridged {
  return (obj || new DataLinkVoiceCoord_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataLinkVoiceCoord_Abridged(bb:flatbuffers.ByteBuffer, obj?:DataLinkVoiceCoord_Abridged):DataLinkVoiceCoord_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataLinkVoiceCoord_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DATA');
}

/**
 * Designator assigned to a voice interface control and coordination net for this data link message (e.g. ADCCN, DCN, VPN, etc.).
 * Example: /// Example: VPN
 * Constraints: Minimum length = 0, Maximum length = 5
 */
voiceNetDes():string|null
voiceNetDes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
voiceNetDes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Designator used in nonsecure communications to refer to a radio frequency for this data link message.
 * Example: /// Example: ST300A
 * Constraints: Minimum length = 0, Maximum length = 8
 */
freqDes():string|null
freqDes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
freqDes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Priority of a communication circuit, channel or frequency for this data link message such as P (Primary), M (Monitor), etc.
 * Example: /// Example: P
 * Constraints: Minimum length = 0, Maximum length = 1
 */
commPri():string|null
commPri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
commPri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of telephone numbers or contact frequencies used for interface control for this data link message.
 * Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
 * Constraints: No constraints specified.
 */
teleFreqNums(index: number):string
teleFreqNums(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
teleFreqNums(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

teleFreqNumsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDataLinkVoiceCoord_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addVoiceNetDes(builder:flatbuffers.Builder, voiceNetDesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, voiceNetDesOffset, 0);
}

static addFreqDes(builder:flatbuffers.Builder, freqDesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, freqDesOffset, 0);
}

static addCommPri(builder:flatbuffers.Builder, commPriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, commPriOffset, 0);
}

static addTeleFreqNums(builder:flatbuffers.Builder, teleFreqNumsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, teleFreqNumsOffset, 0);
}

static createTeleFreqNumsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTeleFreqNumsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDataLinkVoiceCoord_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDataLinkVoiceCoord_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA');
}

static finishSizePrefixedDataLinkVoiceCoord_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DATA', true);
}

static createDataLinkVoiceCoord_Abridged(builder:flatbuffers.Builder, voiceNetDesOffset:flatbuffers.Offset, freqDesOffset:flatbuffers.Offset, commPriOffset:flatbuffers.Offset, teleFreqNumsOffset:flatbuffers.Offset):flatbuffers.Offset {
  DataLinkVoiceCoord_Abridged.startDataLinkVoiceCoord_Abridged(builder);
  DataLinkVoiceCoord_Abridged.addVoiceNetDes(builder, voiceNetDesOffset);
  DataLinkVoiceCoord_Abridged.addFreqDes(builder, freqDesOffset);
  DataLinkVoiceCoord_Abridged.addCommPri(builder, commPriOffset);
  DataLinkVoiceCoord_Abridged.addTeleFreqNums(builder, teleFreqNumsOffset);
  return DataLinkVoiceCoord_Abridged.endDataLinkVoiceCoord_Abridged(builder);
}

unpack(): DataLinkVoiceCoord_AbridgedT {
  return new DataLinkVoiceCoord_AbridgedT(
    this.voiceNetDes(),
    this.freqDes(),
    this.commPri(),
    this.bb!.createScalarList<string>(this.teleFreqNums.bind(this), this.teleFreqNums_Length())
  );
}


unpackTo(_o: DataLinkVoiceCoord_AbridgedT): void {
  _o.voiceNetDes = this.voiceNetDes();
  _o.freqDes = this.freqDes();
  _o.commPri = this.commPri();
  _o.teleFreqNums = this.bb!.createScalarList<string>(this.teleFreqNums.bind(this), this.teleFreqNums_Length());
}
}

export class DataLinkVoiceCoord_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public voiceNetDes: string|Uint8Array|null = null,
  public freqDes: string|Uint8Array|null = null,
  public commPri: string|Uint8Array|null = null,
  public teleFreqNums: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const voiceNetDes = (this.voiceNetDes !== null ? builder.createString(this.voiceNetDes!) : 0);
  const freqDes = (this.freqDes !== null ? builder.createString(this.freqDes!) : 0);
  const commPri = (this.commPri !== null ? builder.createString(this.commPri!) : 0);
  const teleFreqNums = DataLinkVoiceCoord_Abridged.createTeleFreqNumsVector(builder, builder.createObjectOffsetList(this.teleFreqNums));

  return DataLinkVoiceCoord_Abridged.createDataLinkVoiceCoord_Abridged(builder,
    voiceNetDes,
    freqDes,
    commPri,
    teleFreqNums
  );
}
}
