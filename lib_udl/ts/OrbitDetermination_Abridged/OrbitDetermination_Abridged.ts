// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OrbitDetermination_Abridged_dataMode_Enum } from './OrbitDetermination_Abridged_dataMode_Enum.js';


/**
 * /// Model representation of orbit determination algorithm results describing General Perturbations or Special Perturbations orbital updates.
 */
export class OrbitDetermination_Abridged implements flatbuffers.IUnpackableObject<OrbitDetermination_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OrbitDetermination_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOrbitDetermination_Abridged(bb:flatbuffers.ByteBuffer, obj?:OrbitDetermination_Abridged):OrbitDetermination_Abridged {
  return (obj || new OrbitDetermination_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOrbitDetermination_Abridged(bb:flatbuffers.ByteBuffer, obj?:OrbitDetermination_Abridged):OrbitDetermination_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OrbitDetermination_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ORBI');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
 * Example: /// Example: 2023-08-28T11:20:21.247192Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * End time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
 * Example: /// Example: 2023-08-28T15:20:21.247192Z
 * Constraints: No constraints specified.
 */
endTime():string|null
endTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
 * Example: /// Example: 54741
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by the OD source to indicate the target on-orbit object of this OD solution. This may be an internal identifier and not necessarily map to a valid satellite number.
 * Example: /// Example: ORIGOBJECT-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/Catalog number of the target on-orbit object.
 * Example: /// Example: 54741
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Identifier of the element set used to seed this OD solution. This ID can be used to obtain additional information on an Elset object using the 'get by ID' operation (e.g. /udl/elset/{id}). For example, the Elset with idElset = abc would be queried as /udl/elset/abc.
 * Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
 * Constraints: Minimum length = 0, Maximum length = 36
 */
aprioriIdElset():string|null
aprioriIdElset(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aprioriIdElset(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
aprioriElset():string|null
aprioriElset(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aprioriElset(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the state vector used to seed this OD solution. This ID can be used to obtain additional information on a StateVector object using the 'get by ID' operation (e.g. /udl/statevector/{id}). For example, the StateVector with idStateVector = abc would be queried as /udl/statevector/abc.
 * Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
 * Constraints: Minimum length = 0, Maximum length = 36
 */
aprioriIdStateVector():string|null
aprioriIdStateVector(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aprioriIdStateVector(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * No description provided.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
aprioriStateVector():string|null
aprioriStateVector(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aprioriStateVector(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating whether this is an initial orbit determination.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
initialOd():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
 * Example: /// Example: 2023-08-28T11:20:21.247192Z
 * Constraints: No constraints specified.
 */
lastObStart():string|null
lastObStart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastObStart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
 * Example: /// Example: 2023-08-28T11:20:21.247192Z
 * Constraints: No constraints specified.
 */
lastObEnd():string|null
lastObEnd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastObEnd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time span used for the OD of the object, in days.
 * Example: /// Example: 3.5
 * Constraints: No constraints specified.
 */
timeSpan():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Optional start time at which this OD solution is accurate, in ISO 8601 UTC datetime format with microsecond precision.
 * Example: /// Example: 2023-08-28T11:20:21.247192Z
 * Constraints: No constraints specified.
 */
effectiveFrom():string|null
effectiveFrom(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectiveFrom(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional end time at which this OD solution may no longer be accurate, in ISO 8601 UTC datetime format with microsecond precision.
 * Example: /// Example: 2023-08-30T08:15:00.123456Z
 * Constraints: No constraints specified.
 */
effectiveUntil():string|null
effectiveUntil(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectiveUntil(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The Weighted Root Mean Squared (RMS) of the differential correction of the target object that produced this OD state. WRMS is a quality indicator of the OD update, with a value of 1.00 being optimal. WRMS applies to batch least squares (BLS) processes.
 * Example: /// Example: 0.991
 * Constraints: No constraints specified.
 */
wrms():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Weighted Root Mean Squared (RMS) of the differential correction from the previous overhead pass of the satellite. Provides a point of comparison for assessing changes in the quality of the OD solution between consecutive passes.
 * Example: /// Example: 1.02
 * Constraints: No constraints specified.
 */
previousWrms():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Weighted Root Mean Squared (RMS) calculated for the first satellite pass in the observation span. Serves as the initial quality metric for the beginning of the observation period.
 * Example: /// Example: 0.985
 * Constraints: No constraints specified.
 */
firstPassWrms():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Lowest Weighted Root Mean Squared (RMS) value achieved for any single satellite pass during the observation span, indicating the pass with the highest quality OD solution.
 * Example: /// Example: 0.975
 * Constraints: No constraints specified.
 */
bestPassWrms():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Error growth rate of the OD solution in kilometers per day.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
errorGrowthRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Model parameter value for energy dissipation rate (EDR) in watts per kilogram.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
edr():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Orbit determination method used to produce this record (e.g. BLS, KF, UKF, etc.).
 * Example: /// Example: BLS
 * Constraints: Minimum length = 1, Maximum length = 64
 */
method():string|null
method(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
method(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of orbit determination method used to produce this record (e.g. ASW, ACTRAC, FreeFlyer, GEODYNE, GDTS, etc.).
 * Example: /// Example: ASW
 * Constraints: Minimum length = 0, Maximum length = 64
 */
methodSource():string|null
methodSource(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
methodSource(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The fit span, in days, used in a Batch Least Squares (BLS) OD.
 * Example: /// Example: 0.6
 * Constraints: No constraints specified.
 */
fitSpan():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Flag indicating whether the ballistic coefficient was estimated during this OD solution.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
ballisticCoeffEst():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Model used to estimate the ballistic coefficient.
 * Example: /// Example: GaussMarkov
 * Constraints: Minimum length = 0, Maximum length = 64
 */
ballisticCoeffModel():string|null
ballisticCoeffModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ballisticCoeffModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating whether the AGOM was estimated during this OD solution.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
agomEst():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Model used to estimate the AGOM.
 * Example: /// Example: RandomWalk
 * Constraints: Minimum length = 0, Maximum length = 64
 */
agomModel():string|null
agomModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
agomModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * OD parameter value for the Root Mean Square (RMS) convergence criteria to successfully close the OD solution.
 * Example: /// Example: 0.001
 * Constraints: No constraints specified.
 */
rmsConvergenceCriteria():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The number of iterations taken for the algorithm to converge on an OD solution.
 * Example: /// Example: 8
 * Constraints: No constraints specified.
 */
numIterations():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were accepted in this OD solution. See the associated acceptedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The acceptedObTyps and acceptedObIds arrays must match in size.
 * Example: /// Example: ['EO', 'RADAR']
 * Constraints: No constraints specified.
 */
acceptedObTyps(index: number):string
acceptedObTyps(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
acceptedObTyps(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

acceptedObTypsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UDL data (observation) UUIDs that were accepted in this OD solution. See the associated acceptedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
 * Example: /// Example: ['EOOBSERVATION-ID1', 'RADAROBSERVATION-ID1']
 * Constraints: No constraints specified.
 */
acceptedObIds(index: number):string
acceptedObIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
acceptedObIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

acceptedObIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were rejected in this OD solution. See the associated rejectedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The rejectedObTyps and rejectedObIds arrays must match in size.
 * Example: /// Example: ['DOA', 'RF']
 * Constraints: No constraints specified.
 */
rejectedObTyps(index: number):string
rejectedObTyps(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rejectedObTyps(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rejectedObTypsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UDL data (observation) UUIDs that were rejected in this OD solution. See the associated rejectedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
 * Example: /// Example: ['DIFFOFARRIVAL-ID2', 'RFOBSERVATION-ID2']
 * Constraints: No constraints specified.
 */
rejectedObIds(index: number):string
rejectedObIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rejectedObIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rejectedObIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UDL UUIDs (idSensor) of the sensors that contributed observations in this OD solution.
 * Example: /// Example: ['SENSOR-ID1', 'SENSOR-ID2']
 * Constraints: No constraints specified.
 */
sensorIds(index: number):string
sensorIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
sensorIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

sensorIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
 * Example: /// Example: AXE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():OrbitDetermination_Abridged_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OrbitDetermination_Abridged_dataMode_Enum.REAL;
}

static startOrbitDetermination_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(44);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, startTimeOffset, 0);
}

static addEndTime(builder:flatbuffers.Builder, endTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, endTimeOffset, 0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idOnOrbitOffset, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, origObjectIdOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(6, satNo, 0);
}

static addAprioriIdElset(builder:flatbuffers.Builder, aprioriIdElsetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, aprioriIdElsetOffset, 0);
}

static addAprioriElset(builder:flatbuffers.Builder, aprioriElsetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, aprioriElsetOffset, 0);
}

static addAprioriIdStateVector(builder:flatbuffers.Builder, aprioriIdStateVectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, aprioriIdStateVectorOffset, 0);
}

static addAprioriStateVector(builder:flatbuffers.Builder, aprioriStateVectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, aprioriStateVectorOffset, 0);
}

static addInitialOd(builder:flatbuffers.Builder, initialOd:boolean) {
  builder.addFieldInt8(11, +initialOd, +false);
}

static addLastObStart(builder:flatbuffers.Builder, lastObStartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, lastObStartOffset, 0);
}

static addLastObEnd(builder:flatbuffers.Builder, lastObEndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, lastObEndOffset, 0);
}

static addTimeSpan(builder:flatbuffers.Builder, timeSpan:number) {
  builder.addFieldFloat64(14, timeSpan, 0.0);
}

static addEffectiveFrom(builder:flatbuffers.Builder, effectiveFromOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, effectiveFromOffset, 0);
}

static addEffectiveUntil(builder:flatbuffers.Builder, effectiveUntilOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, effectiveUntilOffset, 0);
}

static addWrms(builder:flatbuffers.Builder, wrms:number) {
  builder.addFieldFloat64(17, wrms, 0.0);
}

static addPreviousWrms(builder:flatbuffers.Builder, previousWrms:number) {
  builder.addFieldFloat64(18, previousWrms, 0.0);
}

static addFirstPassWrms(builder:flatbuffers.Builder, firstPassWrms:number) {
  builder.addFieldFloat64(19, firstPassWrms, 0.0);
}

static addBestPassWrms(builder:flatbuffers.Builder, bestPassWrms:number) {
  builder.addFieldFloat64(20, bestPassWrms, 0.0);
}

static addErrorGrowthRate(builder:flatbuffers.Builder, errorGrowthRate:number) {
  builder.addFieldFloat64(21, errorGrowthRate, 0.0);
}

static addEdr(builder:flatbuffers.Builder, edr:number) {
  builder.addFieldFloat64(22, edr, 0.0);
}

static addMethod(builder:flatbuffers.Builder, methodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, methodOffset, 0);
}

static addMethodSource(builder:flatbuffers.Builder, methodSourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, methodSourceOffset, 0);
}

static addFitSpan(builder:flatbuffers.Builder, fitSpan:number) {
  builder.addFieldFloat64(25, fitSpan, 0.0);
}

static addBallisticCoeffEst(builder:flatbuffers.Builder, ballisticCoeffEst:boolean) {
  builder.addFieldInt8(26, +ballisticCoeffEst, +false);
}

static addBallisticCoeffModel(builder:flatbuffers.Builder, ballisticCoeffModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, ballisticCoeffModelOffset, 0);
}

static addAgomEst(builder:flatbuffers.Builder, agomEst:boolean) {
  builder.addFieldInt8(28, +agomEst, +false);
}

static addAgomModel(builder:flatbuffers.Builder, agomModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, agomModelOffset, 0);
}

static addRmsConvergenceCriteria(builder:flatbuffers.Builder, rmsConvergenceCriteria:number) {
  builder.addFieldFloat64(30, rmsConvergenceCriteria, 0.0);
}

static addNumIterations(builder:flatbuffers.Builder, numIterations:number) {
  builder.addFieldInt32(31, numIterations, 0);
}

static addAcceptedObTyps(builder:flatbuffers.Builder, acceptedObTypsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, acceptedObTypsOffset, 0);
}

static createAcceptedObTypsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAcceptedObTypsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAcceptedObIds(builder:flatbuffers.Builder, acceptedObIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, acceptedObIdsOffset, 0);
}

static createAcceptedObIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAcceptedObIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRejectedObTyps(builder:flatbuffers.Builder, rejectedObTypsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, rejectedObTypsOffset, 0);
}

static createRejectedObTypsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRejectedObTypsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRejectedObIds(builder:flatbuffers.Builder, rejectedObIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, rejectedObIdsOffset, 0);
}

static createRejectedObIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRejectedObIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSensorIds(builder:flatbuffers.Builder, sensorIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, sensorIdsOffset, 0);
}

static createSensorIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSensorIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, createdByOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, sourceDlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:OrbitDetermination_Abridged_dataMode_Enum) {
  builder.addFieldInt8(43, dataMode, OrbitDetermination_Abridged_dataMode_Enum.REAL);
}

static endOrbitDetermination_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOrbitDetermination_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ORBI');
}

static finishSizePrefixedOrbitDetermination_AbridgedBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ORBI', true);
}

static createOrbitDetermination_Abridged(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, endTimeOffset:flatbuffers.Offset, idOnOrbitOffset:flatbuffers.Offset, origObjectIdOffset:flatbuffers.Offset, satNo:number, aprioriIdElsetOffset:flatbuffers.Offset, aprioriElsetOffset:flatbuffers.Offset, aprioriIdStateVectorOffset:flatbuffers.Offset, aprioriStateVectorOffset:flatbuffers.Offset, initialOd:boolean, lastObStartOffset:flatbuffers.Offset, lastObEndOffset:flatbuffers.Offset, timeSpan:number, effectiveFromOffset:flatbuffers.Offset, effectiveUntilOffset:flatbuffers.Offset, wrms:number, previousWrms:number, firstPassWrms:number, bestPassWrms:number, errorGrowthRate:number, edr:number, methodOffset:flatbuffers.Offset, methodSourceOffset:flatbuffers.Offset, fitSpan:number, ballisticCoeffEst:boolean, ballisticCoeffModelOffset:flatbuffers.Offset, agomEst:boolean, agomModelOffset:flatbuffers.Offset, rmsConvergenceCriteria:number, numIterations:number, acceptedObTypsOffset:flatbuffers.Offset, acceptedObIdsOffset:flatbuffers.Offset, rejectedObTypsOffset:flatbuffers.Offset, rejectedObIdsOffset:flatbuffers.Offset, sensorIdsOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:OrbitDetermination_Abridged_dataMode_Enum):flatbuffers.Offset {
  OrbitDetermination_Abridged.startOrbitDetermination_Abridged(builder);
  OrbitDetermination_Abridged.addId(builder, idOffset);
  OrbitDetermination_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
  OrbitDetermination_Abridged.addStartTime(builder, startTimeOffset);
  OrbitDetermination_Abridged.addEndTime(builder, endTimeOffset);
  OrbitDetermination_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
  OrbitDetermination_Abridged.addOrigObjectId(builder, origObjectIdOffset);
  OrbitDetermination_Abridged.addSatNo(builder, satNo);
  OrbitDetermination_Abridged.addAprioriIdElset(builder, aprioriIdElsetOffset);
  OrbitDetermination_Abridged.addAprioriElset(builder, aprioriElsetOffset);
  OrbitDetermination_Abridged.addAprioriIdStateVector(builder, aprioriIdStateVectorOffset);
  OrbitDetermination_Abridged.addAprioriStateVector(builder, aprioriStateVectorOffset);
  OrbitDetermination_Abridged.addInitialOd(builder, initialOd);
  OrbitDetermination_Abridged.addLastObStart(builder, lastObStartOffset);
  OrbitDetermination_Abridged.addLastObEnd(builder, lastObEndOffset);
  OrbitDetermination_Abridged.addTimeSpan(builder, timeSpan);
  OrbitDetermination_Abridged.addEffectiveFrom(builder, effectiveFromOffset);
  OrbitDetermination_Abridged.addEffectiveUntil(builder, effectiveUntilOffset);
  OrbitDetermination_Abridged.addWrms(builder, wrms);
  OrbitDetermination_Abridged.addPreviousWrms(builder, previousWrms);
  OrbitDetermination_Abridged.addFirstPassWrms(builder, firstPassWrms);
  OrbitDetermination_Abridged.addBestPassWrms(builder, bestPassWrms);
  OrbitDetermination_Abridged.addErrorGrowthRate(builder, errorGrowthRate);
  OrbitDetermination_Abridged.addEdr(builder, edr);
  OrbitDetermination_Abridged.addMethod(builder, methodOffset);
  OrbitDetermination_Abridged.addMethodSource(builder, methodSourceOffset);
  OrbitDetermination_Abridged.addFitSpan(builder, fitSpan);
  OrbitDetermination_Abridged.addBallisticCoeffEst(builder, ballisticCoeffEst);
  OrbitDetermination_Abridged.addBallisticCoeffModel(builder, ballisticCoeffModelOffset);
  OrbitDetermination_Abridged.addAgomEst(builder, agomEst);
  OrbitDetermination_Abridged.addAgomModel(builder, agomModelOffset);
  OrbitDetermination_Abridged.addRmsConvergenceCriteria(builder, rmsConvergenceCriteria);
  OrbitDetermination_Abridged.addNumIterations(builder, numIterations);
  OrbitDetermination_Abridged.addAcceptedObTyps(builder, acceptedObTypsOffset);
  OrbitDetermination_Abridged.addAcceptedObIds(builder, acceptedObIdsOffset);
  OrbitDetermination_Abridged.addRejectedObTyps(builder, rejectedObTypsOffset);
  OrbitDetermination_Abridged.addRejectedObIds(builder, rejectedObIdsOffset);
  OrbitDetermination_Abridged.addSensorIds(builder, sensorIdsOffset);
  OrbitDetermination_Abridged.addCreatedAt(builder, createdAtOffset);
  OrbitDetermination_Abridged.addCreatedBy(builder, createdByOffset);
  OrbitDetermination_Abridged.addSourceDl(builder, sourceDlOffset);
  OrbitDetermination_Abridged.addSource(builder, sourceOffset);
  OrbitDetermination_Abridged.addOrigin(builder, originOffset);
  OrbitDetermination_Abridged.addOrigNetwork(builder, origNetworkOffset);
  OrbitDetermination_Abridged.addDataMode(builder, dataMode);
  return OrbitDetermination_Abridged.endOrbitDetermination_Abridged(builder);
}

unpack(): OrbitDetermination_AbridgedT {
  return new OrbitDetermination_AbridgedT(
    this.id(),
    this.classificationMarking(),
    this.startTime(),
    this.endTime(),
    this.idOnOrbit(),
    this.origObjectId(),
    this.satNo(),
    this.aprioriIdElset(),
    this.aprioriElset(),
    this.aprioriIdStateVector(),
    this.aprioriStateVector(),
    this.initialOd(),
    this.lastObStart(),
    this.lastObEnd(),
    this.timeSpan(),
    this.effectiveFrom(),
    this.effectiveUntil(),
    this.wrms(),
    this.previousWrms(),
    this.firstPassWrms(),
    this.bestPassWrms(),
    this.errorGrowthRate(),
    this.edr(),
    this.method(),
    this.methodSource(),
    this.fitSpan(),
    this.ballisticCoeffEst(),
    this.ballisticCoeffModel(),
    this.agomEst(),
    this.agomModel(),
    this.rmsConvergenceCriteria(),
    this.numIterations(),
    this.bb!.createScalarList<string>(this.acceptedObTyps.bind(this), this.acceptedObTypsLength()),
    this.bb!.createScalarList<string>(this.acceptedObIds.bind(this), this.acceptedObIdsLength()),
    this.bb!.createScalarList<string>(this.rejectedObTyps.bind(this), this.rejectedObTypsLength()),
    this.bb!.createScalarList<string>(this.rejectedObIds.bind(this), this.rejectedObIdsLength()),
    this.bb!.createScalarList<string>(this.sensorIds.bind(this), this.sensorIdsLength()),
    this.createdAt(),
    this.createdBy(),
    this.sourceDl(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: OrbitDetermination_AbridgedT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.idOnOrbit = this.idOnOrbit();
  _o.origObjectId = this.origObjectId();
  _o.satNo = this.satNo();
  _o.aprioriIdElset = this.aprioriIdElset();
  _o.aprioriElset = this.aprioriElset();
  _o.aprioriIdStateVector = this.aprioriIdStateVector();
  _o.aprioriStateVector = this.aprioriStateVector();
  _o.initialOd = this.initialOd();
  _o.lastObStart = this.lastObStart();
  _o.lastObEnd = this.lastObEnd();
  _o.timeSpan = this.timeSpan();
  _o.effectiveFrom = this.effectiveFrom();
  _o.effectiveUntil = this.effectiveUntil();
  _o.wrms = this.wrms();
  _o.previousWrms = this.previousWrms();
  _o.firstPassWrms = this.firstPassWrms();
  _o.bestPassWrms = this.bestPassWrms();
  _o.errorGrowthRate = this.errorGrowthRate();
  _o.edr = this.edr();
  _o.method = this.method();
  _o.methodSource = this.methodSource();
  _o.fitSpan = this.fitSpan();
  _o.ballisticCoeffEst = this.ballisticCoeffEst();
  _o.ballisticCoeffModel = this.ballisticCoeffModel();
  _o.agomEst = this.agomEst();
  _o.agomModel = this.agomModel();
  _o.rmsConvergenceCriteria = this.rmsConvergenceCriteria();
  _o.numIterations = this.numIterations();
  _o.acceptedObTyps = this.bb!.createScalarList<string>(this.acceptedObTyps.bind(this), this.acceptedObTypsLength());
  _o.acceptedObIds = this.bb!.createScalarList<string>(this.acceptedObIds.bind(this), this.acceptedObIdsLength());
  _o.rejectedObTyps = this.bb!.createScalarList<string>(this.rejectedObTyps.bind(this), this.rejectedObTypsLength());
  _o.rejectedObIds = this.bb!.createScalarList<string>(this.rejectedObIds.bind(this), this.rejectedObIdsLength());
  _o.sensorIds = this.bb!.createScalarList<string>(this.sensorIds.bind(this), this.sensorIdsLength());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.sourceDl = this.sourceDl();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class OrbitDetermination_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public endTime: string|Uint8Array|null = null,
  public idOnOrbit: string|Uint8Array|null = null,
  public origObjectId: string|Uint8Array|null = null,
  public satNo: number = 0,
  public aprioriIdElset: string|Uint8Array|null = null,
  public aprioriElset: string|Uint8Array|null = null,
  public aprioriIdStateVector: string|Uint8Array|null = null,
  public aprioriStateVector: string|Uint8Array|null = null,
  public initialOd: boolean = false,
  public lastObStart: string|Uint8Array|null = null,
  public lastObEnd: string|Uint8Array|null = null,
  public timeSpan: number = 0.0,
  public effectiveFrom: string|Uint8Array|null = null,
  public effectiveUntil: string|Uint8Array|null = null,
  public wrms: number = 0.0,
  public previousWrms: number = 0.0,
  public firstPassWrms: number = 0.0,
  public bestPassWrms: number = 0.0,
  public errorGrowthRate: number = 0.0,
  public edr: number = 0.0,
  public method: string|Uint8Array|null = null,
  public methodSource: string|Uint8Array|null = null,
  public fitSpan: number = 0.0,
  public ballisticCoeffEst: boolean = false,
  public ballisticCoeffModel: string|Uint8Array|null = null,
  public agomEst: boolean = false,
  public agomModel: string|Uint8Array|null = null,
  public rmsConvergenceCriteria: number = 0.0,
  public numIterations: number = 0,
  public acceptedObTyps: (string)[] = [],
  public acceptedObIds: (string)[] = [],
  public rejectedObTyps: (string)[] = [],
  public rejectedObIds: (string)[] = [],
  public sensorIds: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: OrbitDetermination_Abridged_dataMode_Enum = OrbitDetermination_Abridged_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const endTime = (this.endTime !== null ? builder.createString(this.endTime!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const aprioriIdElset = (this.aprioriIdElset !== null ? builder.createString(this.aprioriIdElset!) : 0);
  const aprioriElset = (this.aprioriElset !== null ? builder.createString(this.aprioriElset!) : 0);
  const aprioriIdStateVector = (this.aprioriIdStateVector !== null ? builder.createString(this.aprioriIdStateVector!) : 0);
  const aprioriStateVector = (this.aprioriStateVector !== null ? builder.createString(this.aprioriStateVector!) : 0);
  const lastObStart = (this.lastObStart !== null ? builder.createString(this.lastObStart!) : 0);
  const lastObEnd = (this.lastObEnd !== null ? builder.createString(this.lastObEnd!) : 0);
  const effectiveFrom = (this.effectiveFrom !== null ? builder.createString(this.effectiveFrom!) : 0);
  const effectiveUntil = (this.effectiveUntil !== null ? builder.createString(this.effectiveUntil!) : 0);
  const method = (this.method !== null ? builder.createString(this.method!) : 0);
  const methodSource = (this.methodSource !== null ? builder.createString(this.methodSource!) : 0);
  const ballisticCoeffModel = (this.ballisticCoeffModel !== null ? builder.createString(this.ballisticCoeffModel!) : 0);
  const agomModel = (this.agomModel !== null ? builder.createString(this.agomModel!) : 0);
  const acceptedObTyps = OrbitDetermination_Abridged.createAcceptedObTypsVector(builder, builder.createObjectOffsetList(this.acceptedObTyps));
  const acceptedObIds = OrbitDetermination_Abridged.createAcceptedObIdsVector(builder, builder.createObjectOffsetList(this.acceptedObIds));
  const rejectedObTyps = OrbitDetermination_Abridged.createRejectedObTypsVector(builder, builder.createObjectOffsetList(this.rejectedObTyps));
  const rejectedObIds = OrbitDetermination_Abridged.createRejectedObIdsVector(builder, builder.createObjectOffsetList(this.rejectedObIds));
  const sensorIds = OrbitDetermination_Abridged.createSensorIdsVector(builder, builder.createObjectOffsetList(this.sensorIds));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return OrbitDetermination_Abridged.createOrbitDetermination_Abridged(builder,
    id,
    classificationMarking,
    startTime,
    endTime,
    idOnOrbit,
    origObjectId,
    this.satNo,
    aprioriIdElset,
    aprioriElset,
    aprioriIdStateVector,
    aprioriStateVector,
    this.initialOd,
    lastObStart,
    lastObEnd,
    this.timeSpan,
    effectiveFrom,
    effectiveUntil,
    this.wrms,
    this.previousWrms,
    this.firstPassWrms,
    this.bestPassWrms,
    this.errorGrowthRate,
    this.edr,
    method,
    methodSource,
    this.fitSpan,
    this.ballisticCoeffEst,
    ballisticCoeffModel,
    this.agomEst,
    agomModel,
    this.rmsConvergenceCriteria,
    this.numIterations,
    acceptedObTyps,
    acceptedObIds,
    rejectedObTyps,
    rejectedObIds,
    sensorIds,
    createdAt,
    createdBy,
    sourceDl,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
