// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of aircraft mission location information for this aircraft mission tasking.
 */
export class AircraftMissionLocationTasking_Ingest implements flatbuffers.IUnpackableObject<AircraftMissionLocationTasking_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AircraftMissionLocationTasking_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAircraftMissionLocationTasking_Ingest(bb:flatbuffers.ByteBuffer, obj?:AircraftMissionLocationTasking_Ingest):AircraftMissionLocationTasking_Ingest {
  return (obj || new AircraftMissionLocationTasking_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAircraftMissionLocationTasking_Ingest(bb:flatbuffers.ByteBuffer, obj?:AircraftMissionLocationTasking_Ingest):AircraftMissionLocationTasking_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AircraftMissionLocationTasking_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('AIRC');
}

/**
 * The start time of this mission in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-10-25T12:00:00.123Z
 * Constraints: No constraints specified.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The end time of this mission in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2021-10-25T12:00:00.123Z
 * Constraints: No constraints specified.
 */
endTime():string|null
endTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name that identifies the location at which this mission is to be performed. This can be the name of a general target area, orbit, cap point, station, etc.
 * Example: /// Example: KLSV
 * Constraints: Minimum length = 0, Maximum length = 24
 */
msnLocName():string|null
msnLocName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msnLocName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The altitude for this mission represented as hundreds of feet above MSL.
 * Example: /// Example: 210
 * Constraints: No constraints specified.
 */
alt():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The code for the priority assigned to this mission.
 * Example: /// Example: 1A
 * Constraints: Minimum length = 0, Maximum length = 8
 */
airMsnPri():string|null
airMsnPri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
airMsnPri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The radius of the circle around the location being reported in feet.
 * Example: /// Example: 1000
 * Constraints: No constraints specified.
 */
areaGeoRad():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The location name for this mission.
 * Example: /// Example: PT ALFA
 * Constraints: Minimum length = 0, Maximum length = 36
 */
msnLocPtName():string|null
msnLocPtName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msnLocPtName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
 * Example: /// Example: 35.123
 * Constraints: No constraints specified.
 */
msnLocPtLat():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
 * Example: /// Example: 79.01
 * Constraints: No constraints specified.
 */
msnLocPtLon():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The alpha-numeric specified location for this mission specified as a bearing angle in degrees relative to true north and a range in nautical miles (NM).
 * Example: /// Example: 330T-PT ALFA-50NM
 * Constraints: Minimum length = 0, Maximum length = 36
 */
msnLocPtBarT():string|null
msnLocPtBarT(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msnLocPtBarT(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAircraftMissionLocationTasking_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, startTimeOffset, 0);
}

static addEndTime(builder:flatbuffers.Builder, endTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, endTimeOffset, 0);
}

static addMsnLocName(builder:flatbuffers.Builder, msnLocNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, msnLocNameOffset, 0);
}

static addAlt(builder:flatbuffers.Builder, alt:number) {
  builder.addFieldInt32(3, alt, 0);
}

static addAirMsnPri(builder:flatbuffers.Builder, airMsnPriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, airMsnPriOffset, 0);
}

static addAreaGeoRad(builder:flatbuffers.Builder, areaGeoRad:number) {
  builder.addFieldInt32(5, areaGeoRad, 0);
}

static addMsnLocPtName(builder:flatbuffers.Builder, msnLocPtNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, msnLocPtNameOffset, 0);
}

static addMsnLocPtLat(builder:flatbuffers.Builder, msnLocPtLat:number) {
  builder.addFieldFloat64(7, msnLocPtLat, 0.0);
}

static addMsnLocPtLon(builder:flatbuffers.Builder, msnLocPtLon:number) {
  builder.addFieldFloat64(8, msnLocPtLon, 0.0);
}

static addMsnLocPtBarT(builder:flatbuffers.Builder, msnLocPtBarTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, msnLocPtBarTOffset, 0);
}

static endAircraftMissionLocationTasking_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishAircraftMissionLocationTasking_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC');
}

static finishSizePrefixedAircraftMissionLocationTasking_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'AIRC', true);
}

static createAircraftMissionLocationTasking_Ingest(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset, endTimeOffset:flatbuffers.Offset, msnLocNameOffset:flatbuffers.Offset, alt:number, airMsnPriOffset:flatbuffers.Offset, areaGeoRad:number, msnLocPtNameOffset:flatbuffers.Offset, msnLocPtLat:number, msnLocPtLon:number, msnLocPtBarTOffset:flatbuffers.Offset):flatbuffers.Offset {
  AircraftMissionLocationTasking_Ingest.startAircraftMissionLocationTasking_Ingest(builder);
  AircraftMissionLocationTasking_Ingest.addStartTime(builder, startTimeOffset);
  AircraftMissionLocationTasking_Ingest.addEndTime(builder, endTimeOffset);
  AircraftMissionLocationTasking_Ingest.addMsnLocName(builder, msnLocNameOffset);
  AircraftMissionLocationTasking_Ingest.addAlt(builder, alt);
  AircraftMissionLocationTasking_Ingest.addAirMsnPri(builder, airMsnPriOffset);
  AircraftMissionLocationTasking_Ingest.addAreaGeoRad(builder, areaGeoRad);
  AircraftMissionLocationTasking_Ingest.addMsnLocPtName(builder, msnLocPtNameOffset);
  AircraftMissionLocationTasking_Ingest.addMsnLocPtLat(builder, msnLocPtLat);
  AircraftMissionLocationTasking_Ingest.addMsnLocPtLon(builder, msnLocPtLon);
  AircraftMissionLocationTasking_Ingest.addMsnLocPtBarT(builder, msnLocPtBarTOffset);
  return AircraftMissionLocationTasking_Ingest.endAircraftMissionLocationTasking_Ingest(builder);
}

unpack(): AircraftMissionLocationTasking_IngestT {
  return new AircraftMissionLocationTasking_IngestT(
    this.startTime(),
    this.endTime(),
    this.msnLocName(),
    this.alt(),
    this.airMsnPri(),
    this.areaGeoRad(),
    this.msnLocPtName(),
    this.msnLocPtLat(),
    this.msnLocPtLon(),
    this.msnLocPtBarT()
  );
}


unpackTo(_o: AircraftMissionLocationTasking_IngestT): void {
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.msnLocName = this.msnLocName();
  _o.alt = this.alt();
  _o.airMsnPri = this.airMsnPri();
  _o.areaGeoRad = this.areaGeoRad();
  _o.msnLocPtName = this.msnLocPtName();
  _o.msnLocPtLat = this.msnLocPtLat();
  _o.msnLocPtLon = this.msnLocPtLon();
  _o.msnLocPtBarT = this.msnLocPtBarT();
}
}

export class AircraftMissionLocationTasking_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public startTime: string|Uint8Array|null = null,
  public endTime: string|Uint8Array|null = null,
  public msnLocName: string|Uint8Array|null = null,
  public alt: number = 0,
  public airMsnPri: string|Uint8Array|null = null,
  public areaGeoRad: number = 0,
  public msnLocPtName: string|Uint8Array|null = null,
  public msnLocPtLat: number = 0.0,
  public msnLocPtLon: number = 0.0,
  public msnLocPtBarT: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const endTime = (this.endTime !== null ? builder.createString(this.endTime!) : 0);
  const msnLocName = (this.msnLocName !== null ? builder.createString(this.msnLocName!) : 0);
  const airMsnPri = (this.airMsnPri !== null ? builder.createString(this.airMsnPri!) : 0);
  const msnLocPtName = (this.msnLocPtName !== null ? builder.createString(this.msnLocPtName!) : 0);
  const msnLocPtBarT = (this.msnLocPtBarT !== null ? builder.createString(this.msnLocPtBarT!) : 0);

  return AircraftMissionLocationTasking_Ingest.createAircraftMissionLocationTasking_Ingest(builder,
    startTime,
    endTime,
    msnLocName,
    this.alt,
    airMsnPri,
    this.areaGeoRad,
    msnLocPtName,
    this.msnLocPtLat,
    this.msnLocPtLon,
    msnLocPtBarT
  );
}
}
