// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * Information obtained for vital signs.
 */
export class EvacVitalSignData_Abridged implements flatbuffers.IUnpackableObject<EvacVitalSignData_AbridgedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EvacVitalSignData_Abridged {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEvacVitalSignData_Abridged(bb:flatbuffers.ByteBuffer, obj?:EvacVitalSignData_Abridged):EvacVitalSignData_Abridged {
  return (obj || new EvacVitalSignData_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEvacVitalSignData_Abridged(bb:flatbuffers.ByteBuffer, obj?:EvacVitalSignData_Abridged):EvacVitalSignData_Abridged {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EvacVitalSignData_Abridged()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).
 * Example: HEART RATE
 * Constraints: Minimum length = 0, Maximum length = 32
 */
vitalSign():string|null
vitalSign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vitalSign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
 * Example: 120
 * Constraints: No constraints specified.
 */
vitalSign1():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
 * Example: 80
 * Constraints: No constraints specified.
 */
vitalSign2():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Medical confidence factor.
 * Example: 1
 * Constraints: No constraints specified.
 */
medConfFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
 * Example: 2021-10-15T16:00:00.123Z
 * Constraints: No constraints specified.
 */
time():string|null
time(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
time(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEvacVitalSignData_Abridged(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addVitalSign(builder:flatbuffers.Builder, vitalSignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, vitalSignOffset, 0);
}

static addVitalSign1(builder:flatbuffers.Builder, vitalSign1:number) {
  builder.addFieldFloat64(1, vitalSign1, 0.0);
}

static addVitalSign2(builder:flatbuffers.Builder, vitalSign2:number) {
  builder.addFieldFloat64(2, vitalSign2, 0.0);
}

static addMedConfFactor(builder:flatbuffers.Builder, medConfFactor:number) {
  builder.addFieldInt32(3, medConfFactor, 0);
}

static addTime(builder:flatbuffers.Builder, timeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, timeOffset, 0);
}

static endEvacVitalSignData_Abridged(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEvacVitalSignData_Abridged(builder:flatbuffers.Builder, vitalSignOffset:flatbuffers.Offset, vitalSign1:number, vitalSign2:number, medConfFactor:number, timeOffset:flatbuffers.Offset):flatbuffers.Offset {
  EvacVitalSignData_Abridged.startEvacVitalSignData_Abridged(builder);
  EvacVitalSignData_Abridged.addVitalSign(builder, vitalSignOffset);
  EvacVitalSignData_Abridged.addVitalSign1(builder, vitalSign1);
  EvacVitalSignData_Abridged.addVitalSign2(builder, vitalSign2);
  EvacVitalSignData_Abridged.addMedConfFactor(builder, medConfFactor);
  EvacVitalSignData_Abridged.addTime(builder, timeOffset);
  return EvacVitalSignData_Abridged.endEvacVitalSignData_Abridged(builder);
}

unpack(): EvacVitalSignData_AbridgedT {
  return new EvacVitalSignData_AbridgedT(
    this.vitalSign(),
    this.vitalSign1(),
    this.vitalSign2(),
    this.medConfFactor(),
    this.time()
  );
}


unpackTo(_o: EvacVitalSignData_AbridgedT): void {
  _o.vitalSign = this.vitalSign();
  _o.vitalSign1 = this.vitalSign1();
  _o.vitalSign2 = this.vitalSign2();
  _o.medConfFactor = this.medConfFactor();
  _o.time = this.time();
}
}

export class EvacVitalSignData_AbridgedT implements flatbuffers.IGeneratedObject {
constructor(
  public vitalSign: string|Uint8Array|null = null,
  public vitalSign1: number = 0.0,
  public vitalSign2: number = 0.0,
  public medConfFactor: number = 0,
  public time: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const vitalSign = (this.vitalSign !== null ? builder.createString(this.vitalSign!) : 0);
  const time = (this.time !== null ? builder.createString(this.time!) : 0);

  return EvacVitalSignData_Abridged.createEvacVitalSignData_Abridged(builder,
    vitalSign,
    this.vitalSign1,
    this.vitalSign2,
    this.medConfFactor,
    time
  );
}
}
