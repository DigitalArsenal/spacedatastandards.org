// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Surface_Full_dataMode_Enum } from './Surface_Full_dataMode_Enum.js';


/**
 * /// Surface information contains properties related to an airfield's runway, taxiway, and parking. The surface types and characteristics can dictate the airfield's capability of hosting a specific aircraft.
 */
export class Surface_Full implements flatbuffers.IUnpackableObject<Surface_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Surface_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSurface_Full(bb:flatbuffers.ByteBuffer, obj?:Surface_Full):Surface_Full {
  return (obj || new Surface_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSurface_Full(bb:flatbuffers.ByteBuffer, obj?:Surface_Full):Surface_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Surface_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SURF');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The surface name or identifier.
 * Example: /// Example: West lot
 * Constraints: Minimum length = 1, Maximum length = 64
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The surface type of this record (e.g. RUNWAY, TAXIWAY, PARKING).
 * Example: /// Example: PARKING
 * Constraints: Minimum length = 1, Maximum length = 7
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The ID of the site where this surface is located.
 * Example: /// Example: SITE-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSite():string|null
idSite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate site identifier provided by the source.
 * Example: /// Example: ORIG-SITE-ID
 * Constraints: Minimum length = 0, Maximum length = 36
 */
altSiteId():string|null
altSiteId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
altSiteId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating this is the primary runway.  Applicable for runway surface types only.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
primary():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The length of the surface type, in feet.  Applicable for runway and parking surface types.
 * Example: /// Example: 1500
 * Constraints: No constraints specified.
 */
lengthFt():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The landing distance available for the runway, in feet.  Applicable for runway surface types only.
 * Example: /// Example: 475
 * Constraints: No constraints specified.
 */
ldaFt():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The width of the surface type, in feet.
 * Example: /// Example: 220
 * Constraints: No constraints specified.
 */
widthFt():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The length of the surface type, in meters.  Applicable for runway and parking surface types.
 * Example: /// Example: 457
 * Constraints: No constraints specified.
 */
lengthM():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The landing distance available for the runway, in meters.  Applicable for runway surface types only.
 * Example: /// Example: 145
 * Constraints: No constraints specified.
 */
ldaM():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The width of the surface type, in meters.
 * Example: /// Example: 67
 * Constraints: No constraints specified.
 */
widthM():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The surface material (e.g. Asphalt, Concrete, Dirt).
 * Example: /// Example: Concrete
 * Constraints: Minimum length = 0, Maximum length = 16
 */
material():string|null
material(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
material(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The surface condition (e.g. GOOD, FAIR, POOR, SERIOUS, FAILED, CLOSED, UNKNOWN).
 * Example: /// Example: GOOD
 * Constraints: Minimum length = 0, Maximum length = 16
 */
condition():string|null
condition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
condition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Raw weight bearing capacity value or pavement strength.
 * Example: /// Example: LCN 42
 * Constraints: Minimum length = 0, Maximum length = 16
 */
rawWbc():string|null
rawWbc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawWbc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Pavement classification number (PCN) and tire pressure code.
 * Example: /// Example: 73RBWT
 * Constraints: Minimum length = 0, Maximum length = 16
 */
pcn():string|null
pcn(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pcn(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Load classification number or pavement rating which ranks aircraft on a scale of 1 to 120.
 * Example: /// Example: 50
 * Constraints: No constraints specified.
 */
lcn():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilopounds (kip). Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 143
 * Constraints: No constraints specified.
 */
sWtKip():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 188
 * Constraints: No constraints specified.
 */
tWtKip():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 195
 * Constraints: No constraints specified.
 */
stWtKip():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 414
 * Constraints: No constraints specified.
 */
ttWtKip():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 416
 * Constraints: No constraints specified.
 */
ddWtKip():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 603
 * Constraints: No constraints specified.
 */
sbttWtKip():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 870
 * Constraints: No constraints specified.
 */
tdtWtkip():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 622
 * Constraints: No constraints specified.
 */
trtWtKip():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 833
 * Constraints: No constraints specified.
 */
ddtWtKip():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 636
 * Constraints: No constraints specified.
 */
sWtKn():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 836
 * Constraints: No constraints specified.
 */
tWtKn():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 867
 * Constraints: No constraints specified.
 */
stWtKn():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 1842
 * Constraints: No constraints specified.
 */
ttWtKn():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 1850
 * Constraints: No constraints specified.
 */
ddWtKn():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 2682
 * Constraints: No constraints specified.
 */
sbttWtKn():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 3870
 * Constraints: No constraints specified.
 */
tdtWtKn():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 2767
 * Constraints: No constraints specified.
 */
trtWtKn():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
 * Example: /// Example: 3705
 * Constraints: No constraints specified.
 */
ddtWtKn():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Flag indicating the surface has lighting.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
lighting():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating the runway lighting is unknown. Applicable for runway surface types only.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
lightsUnkn():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating the runway has approach lights. Applicable for runway surface types only.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
lightsAprch():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating the runway has Visual Approach Slope Indicator (VASI) lights. Applicable for runway surface types only.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
lightsVasi():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating the runway has Precision Approach Path Indicator (PAPI) lights. Applicable for runway surface types only.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
lightsPapi():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating the runway has Optical Landing System (OLS) lights. Applicable for runway surface types only.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
lightsOls():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating the runway has Runway End Identifier Lights (REIL). Applicable for runway surface types only.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
lightsReil():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating the runway has Touchdown Zone lights. Applicable for runway surface types only.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
lightsTdzl():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating the runway has centerline lights. Applicable for runway surface types only.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
lightsCl():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating the surface type has an obstacle. Applicable for taxiway and parking surface types.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
obstacle():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was updated in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
updatedAt():string|null
updatedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who updated the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 0, Maximum length = 64
 */
updatedBy():string|null
updatedBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
updatedBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():Surface_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Surface_Full_dataMode_Enum.REAL;
}

static startSurface_Full(builder:flatbuffers.Builder) {
  builder.startObject(54);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, typeOffset, 0);
}

static addIdSite(builder:flatbuffers.Builder, idSiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idSiteOffset, 0);
}

static addAltSiteId(builder:flatbuffers.Builder, altSiteIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, altSiteIdOffset, 0);
}

static addPrimary(builder:flatbuffers.Builder, primary:boolean) {
  builder.addFieldInt8(6, +primary, +false);
}

static addLengthFt(builder:flatbuffers.Builder, lengthFt:number) {
  builder.addFieldInt32(7, lengthFt, 0);
}

static addLdaFt(builder:flatbuffers.Builder, ldaFt:number) {
  builder.addFieldInt32(8, ldaFt, 0);
}

static addWidthFt(builder:flatbuffers.Builder, widthFt:number) {
  builder.addFieldInt32(9, widthFt, 0);
}

static addLengthM(builder:flatbuffers.Builder, lengthM:number) {
  builder.addFieldInt32(10, lengthM, 0);
}

static addLdaM(builder:flatbuffers.Builder, ldaM:number) {
  builder.addFieldInt32(11, ldaM, 0);
}

static addWidthM(builder:flatbuffers.Builder, widthM:number) {
  builder.addFieldInt32(12, widthM, 0);
}

static addMaterial(builder:flatbuffers.Builder, materialOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, materialOffset, 0);
}

static addCondition(builder:flatbuffers.Builder, conditionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, conditionOffset, 0);
}

static addRawWbc(builder:flatbuffers.Builder, rawWbcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, rawWbcOffset, 0);
}

static addPcn(builder:flatbuffers.Builder, pcnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, pcnOffset, 0);
}

static addLcn(builder:flatbuffers.Builder, lcn:number) {
  builder.addFieldInt32(17, lcn, 0);
}

static addSWtKip(builder:flatbuffers.Builder, sWtKip:number) {
  builder.addFieldInt32(18, sWtKip, 0);
}

static addTWtKip(builder:flatbuffers.Builder, tWtKip:number) {
  builder.addFieldInt32(19, tWtKip, 0);
}

static addStWtKip(builder:flatbuffers.Builder, stWtKip:number) {
  builder.addFieldInt32(20, stWtKip, 0);
}

static addTtWtKip(builder:flatbuffers.Builder, ttWtKip:number) {
  builder.addFieldInt32(21, ttWtKip, 0);
}

static addDdWtKip(builder:flatbuffers.Builder, ddWtKip:number) {
  builder.addFieldInt32(22, ddWtKip, 0);
}

static addSbttWtKip(builder:flatbuffers.Builder, sbttWtKip:number) {
  builder.addFieldInt32(23, sbttWtKip, 0);
}

static addTdtWtkip(builder:flatbuffers.Builder, tdtWtkip:number) {
  builder.addFieldInt32(24, tdtWtkip, 0);
}

static addTrtWtKip(builder:flatbuffers.Builder, trtWtKip:number) {
  builder.addFieldInt32(25, trtWtKip, 0);
}

static addDdtWtKip(builder:flatbuffers.Builder, ddtWtKip:number) {
  builder.addFieldInt32(26, ddtWtKip, 0);
}

static addSWtKn(builder:flatbuffers.Builder, sWtKn:number) {
  builder.addFieldInt32(27, sWtKn, 0);
}

static addTWtKn(builder:flatbuffers.Builder, tWtKn:number) {
  builder.addFieldInt32(28, tWtKn, 0);
}

static addStWtKn(builder:flatbuffers.Builder, stWtKn:number) {
  builder.addFieldInt32(29, stWtKn, 0);
}

static addTtWtKn(builder:flatbuffers.Builder, ttWtKn:number) {
  builder.addFieldInt32(30, ttWtKn, 0);
}

static addDdWtKn(builder:flatbuffers.Builder, ddWtKn:number) {
  builder.addFieldInt32(31, ddWtKn, 0);
}

static addSbttWtKn(builder:flatbuffers.Builder, sbttWtKn:number) {
  builder.addFieldInt32(32, sbttWtKn, 0);
}

static addTdtWtKn(builder:flatbuffers.Builder, tdtWtKn:number) {
  builder.addFieldInt32(33, tdtWtKn, 0);
}

static addTrtWtKn(builder:flatbuffers.Builder, trtWtKn:number) {
  builder.addFieldInt32(34, trtWtKn, 0);
}

static addDdtWtKn(builder:flatbuffers.Builder, ddtWtKn:number) {
  builder.addFieldInt32(35, ddtWtKn, 0);
}

static addLighting(builder:flatbuffers.Builder, lighting:boolean) {
  builder.addFieldInt8(36, +lighting, +false);
}

static addLightsUnkn(builder:flatbuffers.Builder, lightsUnkn:boolean) {
  builder.addFieldInt8(37, +lightsUnkn, +false);
}

static addLightsAprch(builder:flatbuffers.Builder, lightsAprch:boolean) {
  builder.addFieldInt8(38, +lightsAprch, +false);
}

static addLightsVasi(builder:flatbuffers.Builder, lightsVasi:boolean) {
  builder.addFieldInt8(39, +lightsVasi, +false);
}

static addLightsPapi(builder:flatbuffers.Builder, lightsPapi:boolean) {
  builder.addFieldInt8(40, +lightsPapi, +false);
}

static addLightsOls(builder:flatbuffers.Builder, lightsOls:boolean) {
  builder.addFieldInt8(41, +lightsOls, +false);
}

static addLightsReil(builder:flatbuffers.Builder, lightsReil:boolean) {
  builder.addFieldInt8(42, +lightsReil, +false);
}

static addLightsTdzl(builder:flatbuffers.Builder, lightsTdzl:boolean) {
  builder.addFieldInt8(43, +lightsTdzl, +false);
}

static addLightsCl(builder:flatbuffers.Builder, lightsCl:boolean) {
  builder.addFieldInt8(44, +lightsCl, +false);
}

static addObstacle(builder:flatbuffers.Builder, obstacle:boolean) {
  builder.addFieldInt8(45, +obstacle, +false);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, createdByOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, updatedAtOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, updatedByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, updatedByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:Surface_Full_dataMode_Enum) {
  builder.addFieldInt8(53, dataMode, Surface_Full_dataMode_Enum.REAL);
}

static endSurface_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSurface_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SURF');
}

static finishSizePrefixedSurface_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SURF', true);
}

static createSurface_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, idSiteOffset:flatbuffers.Offset, altSiteIdOffset:flatbuffers.Offset, primary:boolean, lengthFt:number, ldaFt:number, widthFt:number, lengthM:number, ldaM:number, widthM:number, materialOffset:flatbuffers.Offset, conditionOffset:flatbuffers.Offset, rawWbcOffset:flatbuffers.Offset, pcnOffset:flatbuffers.Offset, lcn:number, sWtKip:number, tWtKip:number, stWtKip:number, ttWtKip:number, ddWtKip:number, sbttWtKip:number, tdtWtkip:number, trtWtKip:number, ddtWtKip:number, sWtKn:number, tWtKn:number, stWtKn:number, ttWtKn:number, ddWtKn:number, sbttWtKn:number, tdtWtKn:number, trtWtKn:number, ddtWtKn:number, lighting:boolean, lightsUnkn:boolean, lightsAprch:boolean, lightsVasi:boolean, lightsPapi:boolean, lightsOls:boolean, lightsReil:boolean, lightsTdzl:boolean, lightsCl:boolean, obstacle:boolean, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, updatedAtOffset:flatbuffers.Offset, updatedByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:Surface_Full_dataMode_Enum):flatbuffers.Offset {
  Surface_Full.startSurface_Full(builder);
  Surface_Full.addId(builder, idOffset);
  Surface_Full.addClassificationMarking(builder, classificationMarkingOffset);
  Surface_Full.addName(builder, nameOffset);
  Surface_Full.addType(builder, typeOffset);
  Surface_Full.addIdSite(builder, idSiteOffset);
  Surface_Full.addAltSiteId(builder, altSiteIdOffset);
  Surface_Full.addPrimary(builder, primary);
  Surface_Full.addLengthFt(builder, lengthFt);
  Surface_Full.addLdaFt(builder, ldaFt);
  Surface_Full.addWidthFt(builder, widthFt);
  Surface_Full.addLengthM(builder, lengthM);
  Surface_Full.addLdaM(builder, ldaM);
  Surface_Full.addWidthM(builder, widthM);
  Surface_Full.addMaterial(builder, materialOffset);
  Surface_Full.addCondition(builder, conditionOffset);
  Surface_Full.addRawWbc(builder, rawWbcOffset);
  Surface_Full.addPcn(builder, pcnOffset);
  Surface_Full.addLcn(builder, lcn);
  Surface_Full.addSWtKip(builder, sWtKip);
  Surface_Full.addTWtKip(builder, tWtKip);
  Surface_Full.addStWtKip(builder, stWtKip);
  Surface_Full.addTtWtKip(builder, ttWtKip);
  Surface_Full.addDdWtKip(builder, ddWtKip);
  Surface_Full.addSbttWtKip(builder, sbttWtKip);
  Surface_Full.addTdtWtkip(builder, tdtWtkip);
  Surface_Full.addTrtWtKip(builder, trtWtKip);
  Surface_Full.addDdtWtKip(builder, ddtWtKip);
  Surface_Full.addSWtKn(builder, sWtKn);
  Surface_Full.addTWtKn(builder, tWtKn);
  Surface_Full.addStWtKn(builder, stWtKn);
  Surface_Full.addTtWtKn(builder, ttWtKn);
  Surface_Full.addDdWtKn(builder, ddWtKn);
  Surface_Full.addSbttWtKn(builder, sbttWtKn);
  Surface_Full.addTdtWtKn(builder, tdtWtKn);
  Surface_Full.addTrtWtKn(builder, trtWtKn);
  Surface_Full.addDdtWtKn(builder, ddtWtKn);
  Surface_Full.addLighting(builder, lighting);
  Surface_Full.addLightsUnkn(builder, lightsUnkn);
  Surface_Full.addLightsAprch(builder, lightsAprch);
  Surface_Full.addLightsVasi(builder, lightsVasi);
  Surface_Full.addLightsPapi(builder, lightsPapi);
  Surface_Full.addLightsOls(builder, lightsOls);
  Surface_Full.addLightsReil(builder, lightsReil);
  Surface_Full.addLightsTdzl(builder, lightsTdzl);
  Surface_Full.addLightsCl(builder, lightsCl);
  Surface_Full.addObstacle(builder, obstacle);
  Surface_Full.addCreatedAt(builder, createdAtOffset);
  Surface_Full.addCreatedBy(builder, createdByOffset);
  Surface_Full.addUpdatedAt(builder, updatedAtOffset);
  Surface_Full.addUpdatedBy(builder, updatedByOffset);
  Surface_Full.addSource(builder, sourceOffset);
  Surface_Full.addOrigin(builder, originOffset);
  Surface_Full.addOrigNetwork(builder, origNetworkOffset);
  Surface_Full.addDataMode(builder, dataMode);
  return Surface_Full.endSurface_Full(builder);
}

unpack(): Surface_FullT {
  return new Surface_FullT(
    this.id(),
    this.classificationMarking(),
    this.name(),
    this.type(),
    this.idSite(),
    this.altSiteId(),
    this.primary(),
    this.lengthFt(),
    this.ldaFt(),
    this.widthFt(),
    this.lengthM(),
    this.ldaM(),
    this.widthM(),
    this.material(),
    this.condition(),
    this.rawWbc(),
    this.pcn(),
    this.lcn(),
    this.sWtKip(),
    this.tWtKip(),
    this.stWtKip(),
    this.ttWtKip(),
    this.ddWtKip(),
    this.sbttWtKip(),
    this.tdtWtkip(),
    this.trtWtKip(),
    this.ddtWtKip(),
    this.sWtKn(),
    this.tWtKn(),
    this.stWtKn(),
    this.ttWtKn(),
    this.ddWtKn(),
    this.sbttWtKn(),
    this.tdtWtKn(),
    this.trtWtKn(),
    this.ddtWtKn(),
    this.lighting(),
    this.lightsUnkn(),
    this.lightsAprch(),
    this.lightsVasi(),
    this.lightsPapi(),
    this.lightsOls(),
    this.lightsReil(),
    this.lightsTdzl(),
    this.lightsCl(),
    this.obstacle(),
    this.createdAt(),
    this.createdBy(),
    this.updatedAt(),
    this.updatedBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: Surface_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.name = this.name();
  _o.type = this.type();
  _o.idSite = this.idSite();
  _o.altSiteId = this.altSiteId();
  _o.primary = this.primary();
  _o.lengthFt = this.lengthFt();
  _o.ldaFt = this.ldaFt();
  _o.widthFt = this.widthFt();
  _o.lengthM = this.lengthM();
  _o.ldaM = this.ldaM();
  _o.widthM = this.widthM();
  _o.material = this.material();
  _o.condition = this.condition();
  _o.rawWbc = this.rawWbc();
  _o.pcn = this.pcn();
  _o.lcn = this.lcn();
  _o.sWtKip = this.sWtKip();
  _o.tWtKip = this.tWtKip();
  _o.stWtKip = this.stWtKip();
  _o.ttWtKip = this.ttWtKip();
  _o.ddWtKip = this.ddWtKip();
  _o.sbttWtKip = this.sbttWtKip();
  _o.tdtWtkip = this.tdtWtkip();
  _o.trtWtKip = this.trtWtKip();
  _o.ddtWtKip = this.ddtWtKip();
  _o.sWtKn = this.sWtKn();
  _o.tWtKn = this.tWtKn();
  _o.stWtKn = this.stWtKn();
  _o.ttWtKn = this.ttWtKn();
  _o.ddWtKn = this.ddWtKn();
  _o.sbttWtKn = this.sbttWtKn();
  _o.tdtWtKn = this.tdtWtKn();
  _o.trtWtKn = this.trtWtKn();
  _o.ddtWtKn = this.ddtWtKn();
  _o.lighting = this.lighting();
  _o.lightsUnkn = this.lightsUnkn();
  _o.lightsAprch = this.lightsAprch();
  _o.lightsVasi = this.lightsVasi();
  _o.lightsPapi = this.lightsPapi();
  _o.lightsOls = this.lightsOls();
  _o.lightsReil = this.lightsReil();
  _o.lightsTdzl = this.lightsTdzl();
  _o.lightsCl = this.lightsCl();
  _o.obstacle = this.obstacle();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.updatedAt = this.updatedAt();
  _o.updatedBy = this.updatedBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class Surface_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public idSite: string|Uint8Array|null = null,
  public altSiteId: string|Uint8Array|null = null,
  public primary: boolean = false,
  public lengthFt: number = 0,
  public ldaFt: number = 0,
  public widthFt: number = 0,
  public lengthM: number = 0,
  public ldaM: number = 0,
  public widthM: number = 0,
  public material: string|Uint8Array|null = null,
  public condition: string|Uint8Array|null = null,
  public rawWbc: string|Uint8Array|null = null,
  public pcn: string|Uint8Array|null = null,
  public lcn: number = 0,
  public sWtKip: number = 0,
  public tWtKip: number = 0,
  public stWtKip: number = 0,
  public ttWtKip: number = 0,
  public ddWtKip: number = 0,
  public sbttWtKip: number = 0,
  public tdtWtkip: number = 0,
  public trtWtKip: number = 0,
  public ddtWtKip: number = 0,
  public sWtKn: number = 0,
  public tWtKn: number = 0,
  public stWtKn: number = 0,
  public ttWtKn: number = 0,
  public ddWtKn: number = 0,
  public sbttWtKn: number = 0,
  public tdtWtKn: number = 0,
  public trtWtKn: number = 0,
  public ddtWtKn: number = 0,
  public lighting: boolean = false,
  public lightsUnkn: boolean = false,
  public lightsAprch: boolean = false,
  public lightsVasi: boolean = false,
  public lightsPapi: boolean = false,
  public lightsOls: boolean = false,
  public lightsReil: boolean = false,
  public lightsTdzl: boolean = false,
  public lightsCl: boolean = false,
  public obstacle: boolean = false,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public updatedAt: string|Uint8Array|null = null,
  public updatedBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: Surface_Full_dataMode_Enum = Surface_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const idSite = (this.idSite !== null ? builder.createString(this.idSite!) : 0);
  const altSiteId = (this.altSiteId !== null ? builder.createString(this.altSiteId!) : 0);
  const material = (this.material !== null ? builder.createString(this.material!) : 0);
  const condition = (this.condition !== null ? builder.createString(this.condition!) : 0);
  const rawWbc = (this.rawWbc !== null ? builder.createString(this.rawWbc!) : 0);
  const pcn = (this.pcn !== null ? builder.createString(this.pcn!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const updatedAt = (this.updatedAt !== null ? builder.createString(this.updatedAt!) : 0);
  const updatedBy = (this.updatedBy !== null ? builder.createString(this.updatedBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return Surface_Full.createSurface_Full(builder,
    id,
    classificationMarking,
    name,
    type,
    idSite,
    altSiteId,
    this.primary,
    this.lengthFt,
    this.ldaFt,
    this.widthFt,
    this.lengthM,
    this.ldaM,
    this.widthM,
    material,
    condition,
    rawWbc,
    pcn,
    this.lcn,
    this.sWtKip,
    this.tWtKip,
    this.stWtKip,
    this.ttWtKip,
    this.ddWtKip,
    this.sbttWtKip,
    this.tdtWtkip,
    this.trtWtKip,
    this.ddtWtKip,
    this.sWtKn,
    this.tWtKn,
    this.stWtKn,
    this.ttWtKn,
    this.ddWtKn,
    this.sbttWtKn,
    this.tdtWtKn,
    this.trtWtKn,
    this.ddtWtKn,
    this.lighting,
    this.lightsUnkn,
    this.lightsAprch,
    this.lightsVasi,
    this.lightsPapi,
    this.lightsOls,
    this.lightsReil,
    this.lightsTdzl,
    this.lightsCl,
    this.obstacle,
    createdAt,
    createdBy,
    updatedAt,
    updatedBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
