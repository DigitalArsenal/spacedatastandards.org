// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Collection of waypoints associated with this flight plan.
 */
export class FlightPlanWaypoints_Full implements flatbuffers.IUnpackableObject<FlightPlanWaypoints_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlightPlanWaypoints_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlightPlanWaypoints_Full(bb:flatbuffers.ByteBuffer, obj?:FlightPlanWaypoints_Full):FlightPlanWaypoints_Full {
  return (obj || new FlightPlanWaypoints_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlightPlanWaypoints_Full(bb:flatbuffers.ByteBuffer, obj?:FlightPlanWaypoints_Full):FlightPlanWaypoints_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlightPlanWaypoints_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('FLIG');
}

/**
 * Points are designated by type as either a comment point or a waypoint. A comment point conveys important information about the point for pilots but is not entered into a flight management system. A waypoint is a point that is entered into a flight management system and/or filed with Air Traffic Control.
 * Example: /// Example: COMMENT
 * Constraints: Minimum length = 1, Maximum length = 16
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the point. The name of a comment point identifies important information about that point, e.g. Top of Climb. The name of a waypoint identifies the location of that point.
 * Example: /// Example: KCHS
 * Constraints: Minimum length = 1, Maximum length = 32
 */
waypointName():string|null
waypointName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
waypointName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The waypoint number on the route. Comment points do not get a waypoint number.
 * Example: /// Example: 20
 * Constraints: No constraints specified.
 */
waypointNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The flight path flown for this leg.
 * Example: /// Example: W15
 * Constraints: Minimum length = 0, Maximum length = 16
 */
airway():string|null
airway(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
airway(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Point identifying an air refueling track/anchor or fixed track.
 * Example: /// Example: ARIP
 * Constraints: Minimum length = 0, Maximum length = 16
 */
arpt():string|null
arpt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arpt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 45.23
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: 179.1
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The ID of the air refueling track/anchor or fixed track.
 * Example: /// Example: AR202
 * Constraints: Minimum length = 0, Maximum length = 16
 */
arId():string|null
arId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
arId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Navigational Aid (NAVAID) identification code.
 * Example: /// Example: HTO
 * Constraints: Minimum length = 0, Maximum length = 16
 */
navaid():string|null
navaid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
navaid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
 * Example: /// Example: 83X
 * Constraints: Minimum length = 0, Maximum length = 16
 */
tacanChannel():string|null
tacanChannel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tacanChannel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in megahertz.
 * Example: /// Example: 113.6
 * Constraints: No constraints specified.
 */
vorFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
 * Example: /// Example: EXTREME
 * Constraints: Minimum length = 0, Maximum length = 16
 */
turbCat():string|null
turbCat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
turbCat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The icing intensity classification for this flight (LIGHT, MODERATE, etc).
 * Example: /// Example: MODERATE
 * Constraints: Minimum length = 0, Maximum length = 16
 */
iceCat():string|null
iceCat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
iceCat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The thunderstorm intensity classification for this flight (LIGHT, MODERATE, etc).
 * Example: /// Example: MODERATE
 * Constraints: Minimum length = 0, Maximum length = 16
 */
thunderCat():string|null
thunderCat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
thunderCat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Altitude of a level, point, or object measured in feet above mean sea level.
 * Example: /// Example: 27000.1
 * Constraints: No constraints specified.
 */
alt():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Average temperature deviation from standard day profile for this leg in degrees Celsius.
 * Example: /// Example: 12.1
 * Constraints: No constraints specified.
 */
tempDev():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The fuel degrade percentage used for this leg.
 * Example: /// Example: 10.1
 * Constraints: No constraints specified.
 */
legFuelDegrade():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The average Mach speed for this leg.
 * Example: /// Example: 0.74
 * Constraints: No constraints specified.
 */
legMach():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The mission index value for this leg. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
 * Example: /// Example: 65
 * Constraints: No constraints specified.
 */
legMsnIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The percent degrade due to drag for this aircraft for this leg.
 * Example: /// Example: 1.2
 * Constraints: No constraints specified.
 */
legDragIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The average calibrated airspeed (CAS) for this leg in knots.
 * Example: /// Example: 200.1
 * Constraints: No constraints specified.
 */
avgCalAirspeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The average true airspeed (TAS) for this leg in knots.
 * Example: /// Example: 210.1
 * Constraints: No constraints specified.
 */
avgTrueAirspeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The average ground speed for this leg in knots.
 * Example: /// Example: 300.1
 * Constraints: No constraints specified.
 */
avgGroundSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The primary UHF radio frequency used for the air refueling track or anchor in megahertz.
 * Example: /// Example: 357.5
 * Constraints: No constraints specified.
 */
priFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The wind direction at this specific point in degrees from true north.
 * Example: /// Example: 165.5
 * Constraints: No constraints specified.
 */
pointWindDir():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The wind velocity at this specific point in knots.
 * Example: /// Example: 14.4
 * Constraints: No constraints specified.
 */
pointWindSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The average wind direction for this leg in degrees from true north.
 * Example: /// Example: 165.5
 * Constraints: No constraints specified.
 */
avgWindDir():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The average wind speed for this leg in knots.
 * Example: /// Example: 14.4
 * Constraints: No constraints specified.
 */
avgWindSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The wind factor for this leg in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
 * Example: /// Example: -32.1
 * Constraints: No constraints specified.
 */
legWindFac():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The average drift angle for this leg in degrees from true north.
 * Example: /// Example: -3.2
 * Constraints: No constraints specified.
 */
avgDriftAng():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The secondary UHF radio frequency used for the air refueling track or anchor in megahertz.
 * Example: /// Example: 357.5
 * Constraints: No constraints specified.
 */
secFreq():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The magnetic course at leg midpoint in degrees from true north.
 * Example: /// Example: 338.1
 * Constraints: No constraints specified.
 */
magCourse():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The true course at leg midpoint in degrees from true north.
 * Example: /// Example: 328.1
 * Constraints: No constraints specified.
 */
trueCourse():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The magnetic heading at leg midpoint in degrees from true north.
 * Example: /// Example: 212.1
 * Constraints: No constraints specified.
 */
magHeading():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The air-to-air Tactical Air Navigation (TACAN) channels used by the receiver/tanker during air refueling.
 * Example: /// Example: 31/94
 * Constraints: Minimum length = 0, Maximum length = 16
 */
aaTacanChannel():string|null
aaTacanChannel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aaTacanChannel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The zone/leg distance flown in nautical miles.
 * Example: /// Example: 212.1
 * Constraints: No constraints specified.
 */
zoneDistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The total distance flown to this waypoint calculated from point of departure in nautical miles.
 * Example: /// Example: 688.1
 * Constraints: No constraints specified.
 */
totalFlownDistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The total distance remaining from this waypoint to the point of arrival in nautical miles.
 * Example: /// Example: 1288.1
 * Constraints: No constraints specified.
 */
totalRemDistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The time to fly this zone/leg in minutes.
 * Example: /// Example: 36.1
 * Constraints: No constraints specified.
 */
zoneTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The total time accumulated from takeoff to this waypoint expressed as HH:MM.
 * Example: /// Example: 08:45
 * Constraints: Minimum length = 0, Maximum length = 6
 */
totalTime():string|null
totalTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
totalTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The total time remaining from this waypoint to the point of arrival expressed as HH:MM.
 * Example: /// Example: 01:43
 * Constraints: Minimum length = 0, Maximum length = 6
 */
totalTimeRem():string|null
totalTimeRem(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
totalTimeRem(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The amount of fuel used on this zone/leg in pounds.
 * Example: /// Example: 1120.1
 * Constraints: No constraints specified.
 */
zoneFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The total fuel used to this waypoint from point of departure in pounds.
 * Example: /// Example: 70431.1
 * Constraints: No constraints specified.
 */
totalUsedFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The total fuel remaining at this waypoint in pounds.
 * Example: /// Example: 30453.1
 * Constraints: No constraints specified.
 */
totalRemFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The amount of fuel onloaded or offloaded at this waypoint in pounds (negative value for offload).
 * Example: /// Example: -30400.1
 * Constraints: No constraints specified.
 */
exchangedFuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The air distance of this leg in nautical miles.
 * Example: /// Example: 321.1
 * Constraints: No constraints specified.
 */
airDistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The total air distance to this waypoint in nautical miles.
 * Example: /// Example: 3251.1
 * Constraints: No constraints specified.
 */
totalAirDistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The total weight of the aircraft at this waypoint in pounds.
 * Example: /// Example: 207123.1
 * Constraints: No constraints specified.
 */
totalWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
 * Example: /// Example: 2023-09-09T01:00:00.123Z
 * Constraints: No constraints specified.
 */
eta():string|null
eta(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eta(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
 * Example: /// Example: 2023-09-09T01:00:00.123Z
 * Constraints: No constraints specified.
 */
ata():string|null
ata(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ata(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The leg fuel flow in pounds per hour.
 * Example: /// Example: 17654.1
 * Constraints: No constraints specified.
 */
fuelFlow():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The planned alternate leg based on user-defined constraints, International Civil Aviation Organization (ICAO) code preferred.
 * Example: /// Example: KCHS
 * Constraints: Minimum length = 0, Maximum length = 16
 */
legAlternate():string|null
legAlternate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
legAlternate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The magnetic variation for this leg in degrees.
 * Example: /// Example: -13.2
 * Constraints: No constraints specified.
 */
magVar():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The day low level altitude in feet above sea level for the leg ending at this waypoint.
 * Example: /// Example: 1500.1
 * Constraints: No constraints specified.
 */
dayLowAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The night low level altitude in feet above sea level for the leg ending at this waypoint.
 * Example: /// Example: 2300.1
 * Constraints: No constraints specified.
 */
nightLowAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The night vision goggle low level altitude in feet above sea level for the leg ending at this waypoint.
 * Example: /// Example: 2450.1
 * Constraints: No constraints specified.
 */
nvgLowAlt():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startFlightPlanWaypoints_Full(builder:flatbuffers.Builder) {
  builder.startObject(56);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addWaypointName(builder:flatbuffers.Builder, waypointNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, waypointNameOffset, 0);
}

static addWaypointNum(builder:flatbuffers.Builder, waypointNum:number) {
  builder.addFieldInt32(2, waypointNum, 0);
}

static addAirway(builder:flatbuffers.Builder, airwayOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, airwayOffset, 0);
}

static addArpt(builder:flatbuffers.Builder, arptOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, arptOffset, 0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(5, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(6, lon, 0.0);
}

static addArId(builder:flatbuffers.Builder, arIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, arIdOffset, 0);
}

static addNavaid(builder:flatbuffers.Builder, navaidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, navaidOffset, 0);
}

static addTacanChannel(builder:flatbuffers.Builder, tacanChannelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, tacanChannelOffset, 0);
}

static addVorFreq(builder:flatbuffers.Builder, vorFreq:number) {
  builder.addFieldFloat64(10, vorFreq, 0.0);
}

static addTurbCat(builder:flatbuffers.Builder, turbCatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, turbCatOffset, 0);
}

static addIceCat(builder:flatbuffers.Builder, iceCatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, iceCatOffset, 0);
}

static addThunderCat(builder:flatbuffers.Builder, thunderCatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, thunderCatOffset, 0);
}

static addAlt(builder:flatbuffers.Builder, alt:number) {
  builder.addFieldFloat64(14, alt, 0.0);
}

static addTempDev(builder:flatbuffers.Builder, tempDev:number) {
  builder.addFieldFloat64(15, tempDev, 0.0);
}

static addLegFuelDegrade(builder:flatbuffers.Builder, legFuelDegrade:number) {
  builder.addFieldFloat64(16, legFuelDegrade, 0.0);
}

static addLegMach(builder:flatbuffers.Builder, legMach:number) {
  builder.addFieldFloat64(17, legMach, 0.0);
}

static addLegMsnIndex(builder:flatbuffers.Builder, legMsnIndex:number) {
  builder.addFieldFloat64(18, legMsnIndex, 0.0);
}

static addLegDragIndex(builder:flatbuffers.Builder, legDragIndex:number) {
  builder.addFieldFloat64(19, legDragIndex, 0.0);
}

static addAvgCalAirspeed(builder:flatbuffers.Builder, avgCalAirspeed:number) {
  builder.addFieldFloat64(20, avgCalAirspeed, 0.0);
}

static addAvgTrueAirspeed(builder:flatbuffers.Builder, avgTrueAirspeed:number) {
  builder.addFieldFloat64(21, avgTrueAirspeed, 0.0);
}

static addAvgGroundSpeed(builder:flatbuffers.Builder, avgGroundSpeed:number) {
  builder.addFieldFloat64(22, avgGroundSpeed, 0.0);
}

static addPriFreq(builder:flatbuffers.Builder, priFreq:number) {
  builder.addFieldFloat64(23, priFreq, 0.0);
}

static addPointWindDir(builder:flatbuffers.Builder, pointWindDir:number) {
  builder.addFieldFloat64(24, pointWindDir, 0.0);
}

static addPointWindSpeed(builder:flatbuffers.Builder, pointWindSpeed:number) {
  builder.addFieldFloat64(25, pointWindSpeed, 0.0);
}

static addAvgWindDir(builder:flatbuffers.Builder, avgWindDir:number) {
  builder.addFieldFloat64(26, avgWindDir, 0.0);
}

static addAvgWindSpeed(builder:flatbuffers.Builder, avgWindSpeed:number) {
  builder.addFieldFloat64(27, avgWindSpeed, 0.0);
}

static addLegWindFac(builder:flatbuffers.Builder, legWindFac:number) {
  builder.addFieldFloat64(28, legWindFac, 0.0);
}

static addAvgDriftAng(builder:flatbuffers.Builder, avgDriftAng:number) {
  builder.addFieldFloat64(29, avgDriftAng, 0.0);
}

static addSecFreq(builder:flatbuffers.Builder, secFreq:number) {
  builder.addFieldFloat64(30, secFreq, 0.0);
}

static addMagCourse(builder:flatbuffers.Builder, magCourse:number) {
  builder.addFieldFloat64(31, magCourse, 0.0);
}

static addTrueCourse(builder:flatbuffers.Builder, trueCourse:number) {
  builder.addFieldFloat64(32, trueCourse, 0.0);
}

static addMagHeading(builder:flatbuffers.Builder, magHeading:number) {
  builder.addFieldFloat64(33, magHeading, 0.0);
}

static addAaTacanChannel(builder:flatbuffers.Builder, aaTacanChannelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, aaTacanChannelOffset, 0);
}

static addZoneDistance(builder:flatbuffers.Builder, zoneDistance:number) {
  builder.addFieldFloat64(35, zoneDistance, 0.0);
}

static addTotalFlownDistance(builder:flatbuffers.Builder, totalFlownDistance:number) {
  builder.addFieldFloat64(36, totalFlownDistance, 0.0);
}

static addTotalRemDistance(builder:flatbuffers.Builder, totalRemDistance:number) {
  builder.addFieldFloat64(37, totalRemDistance, 0.0);
}

static addZoneTime(builder:flatbuffers.Builder, zoneTime:number) {
  builder.addFieldFloat64(38, zoneTime, 0.0);
}

static addTotalTime(builder:flatbuffers.Builder, totalTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, totalTimeOffset, 0);
}

static addTotalTimeRem(builder:flatbuffers.Builder, totalTimeRemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, totalTimeRemOffset, 0);
}

static addZoneFuel(builder:flatbuffers.Builder, zoneFuel:number) {
  builder.addFieldFloat64(41, zoneFuel, 0.0);
}

static addTotalUsedFuel(builder:flatbuffers.Builder, totalUsedFuel:number) {
  builder.addFieldFloat64(42, totalUsedFuel, 0.0);
}

static addTotalRemFuel(builder:flatbuffers.Builder, totalRemFuel:number) {
  builder.addFieldFloat64(43, totalRemFuel, 0.0);
}

static addExchangedFuel(builder:flatbuffers.Builder, exchangedFuel:number) {
  builder.addFieldFloat64(44, exchangedFuel, 0.0);
}

static addAirDistance(builder:flatbuffers.Builder, airDistance:number) {
  builder.addFieldFloat64(45, airDistance, 0.0);
}

static addTotalAirDistance(builder:flatbuffers.Builder, totalAirDistance:number) {
  builder.addFieldFloat64(46, totalAirDistance, 0.0);
}

static addTotalWeight(builder:flatbuffers.Builder, totalWeight:number) {
  builder.addFieldFloat64(47, totalWeight, 0.0);
}

static addEta(builder:flatbuffers.Builder, etaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, etaOffset, 0);
}

static addAta(builder:flatbuffers.Builder, ataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, ataOffset, 0);
}

static addFuelFlow(builder:flatbuffers.Builder, fuelFlow:number) {
  builder.addFieldFloat64(50, fuelFlow, 0.0);
}

static addLegAlternate(builder:flatbuffers.Builder, legAlternateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, legAlternateOffset, 0);
}

static addMagVar(builder:flatbuffers.Builder, magVar:number) {
  builder.addFieldFloat64(52, magVar, 0.0);
}

static addDayLowAlt(builder:flatbuffers.Builder, dayLowAlt:number) {
  builder.addFieldFloat64(53, dayLowAlt, 0.0);
}

static addNightLowAlt(builder:flatbuffers.Builder, nightLowAlt:number) {
  builder.addFieldFloat64(54, nightLowAlt, 0.0);
}

static addNvgLowAlt(builder:flatbuffers.Builder, nvgLowAlt:number) {
  builder.addFieldFloat64(55, nvgLowAlt, 0.0);
}

static endFlightPlanWaypoints_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFlightPlanWaypoints_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'FLIG');
}

static finishSizePrefixedFlightPlanWaypoints_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'FLIG', true);
}

static createFlightPlanWaypoints_Full(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, waypointNameOffset:flatbuffers.Offset, waypointNum:number, airwayOffset:flatbuffers.Offset, arptOffset:flatbuffers.Offset, lat:number, lon:number, arIdOffset:flatbuffers.Offset, navaidOffset:flatbuffers.Offset, tacanChannelOffset:flatbuffers.Offset, vorFreq:number, turbCatOffset:flatbuffers.Offset, iceCatOffset:flatbuffers.Offset, thunderCatOffset:flatbuffers.Offset, alt:number, tempDev:number, legFuelDegrade:number, legMach:number, legMsnIndex:number, legDragIndex:number, avgCalAirspeed:number, avgTrueAirspeed:number, avgGroundSpeed:number, priFreq:number, pointWindDir:number, pointWindSpeed:number, avgWindDir:number, avgWindSpeed:number, legWindFac:number, avgDriftAng:number, secFreq:number, magCourse:number, trueCourse:number, magHeading:number, aaTacanChannelOffset:flatbuffers.Offset, zoneDistance:number, totalFlownDistance:number, totalRemDistance:number, zoneTime:number, totalTimeOffset:flatbuffers.Offset, totalTimeRemOffset:flatbuffers.Offset, zoneFuel:number, totalUsedFuel:number, totalRemFuel:number, exchangedFuel:number, airDistance:number, totalAirDistance:number, totalWeight:number, etaOffset:flatbuffers.Offset, ataOffset:flatbuffers.Offset, fuelFlow:number, legAlternateOffset:flatbuffers.Offset, magVar:number, dayLowAlt:number, nightLowAlt:number, nvgLowAlt:number):flatbuffers.Offset {
  FlightPlanWaypoints_Full.startFlightPlanWaypoints_Full(builder);
  FlightPlanWaypoints_Full.addType(builder, typeOffset);
  FlightPlanWaypoints_Full.addWaypointName(builder, waypointNameOffset);
  FlightPlanWaypoints_Full.addWaypointNum(builder, waypointNum);
  FlightPlanWaypoints_Full.addAirway(builder, airwayOffset);
  FlightPlanWaypoints_Full.addArpt(builder, arptOffset);
  FlightPlanWaypoints_Full.addLat(builder, lat);
  FlightPlanWaypoints_Full.addLon(builder, lon);
  FlightPlanWaypoints_Full.addArId(builder, arIdOffset);
  FlightPlanWaypoints_Full.addNavaid(builder, navaidOffset);
  FlightPlanWaypoints_Full.addTacanChannel(builder, tacanChannelOffset);
  FlightPlanWaypoints_Full.addVorFreq(builder, vorFreq);
  FlightPlanWaypoints_Full.addTurbCat(builder, turbCatOffset);
  FlightPlanWaypoints_Full.addIceCat(builder, iceCatOffset);
  FlightPlanWaypoints_Full.addThunderCat(builder, thunderCatOffset);
  FlightPlanWaypoints_Full.addAlt(builder, alt);
  FlightPlanWaypoints_Full.addTempDev(builder, tempDev);
  FlightPlanWaypoints_Full.addLegFuelDegrade(builder, legFuelDegrade);
  FlightPlanWaypoints_Full.addLegMach(builder, legMach);
  FlightPlanWaypoints_Full.addLegMsnIndex(builder, legMsnIndex);
  FlightPlanWaypoints_Full.addLegDragIndex(builder, legDragIndex);
  FlightPlanWaypoints_Full.addAvgCalAirspeed(builder, avgCalAirspeed);
  FlightPlanWaypoints_Full.addAvgTrueAirspeed(builder, avgTrueAirspeed);
  FlightPlanWaypoints_Full.addAvgGroundSpeed(builder, avgGroundSpeed);
  FlightPlanWaypoints_Full.addPriFreq(builder, priFreq);
  FlightPlanWaypoints_Full.addPointWindDir(builder, pointWindDir);
  FlightPlanWaypoints_Full.addPointWindSpeed(builder, pointWindSpeed);
  FlightPlanWaypoints_Full.addAvgWindDir(builder, avgWindDir);
  FlightPlanWaypoints_Full.addAvgWindSpeed(builder, avgWindSpeed);
  FlightPlanWaypoints_Full.addLegWindFac(builder, legWindFac);
  FlightPlanWaypoints_Full.addAvgDriftAng(builder, avgDriftAng);
  FlightPlanWaypoints_Full.addSecFreq(builder, secFreq);
  FlightPlanWaypoints_Full.addMagCourse(builder, magCourse);
  FlightPlanWaypoints_Full.addTrueCourse(builder, trueCourse);
  FlightPlanWaypoints_Full.addMagHeading(builder, magHeading);
  FlightPlanWaypoints_Full.addAaTacanChannel(builder, aaTacanChannelOffset);
  FlightPlanWaypoints_Full.addZoneDistance(builder, zoneDistance);
  FlightPlanWaypoints_Full.addTotalFlownDistance(builder, totalFlownDistance);
  FlightPlanWaypoints_Full.addTotalRemDistance(builder, totalRemDistance);
  FlightPlanWaypoints_Full.addZoneTime(builder, zoneTime);
  FlightPlanWaypoints_Full.addTotalTime(builder, totalTimeOffset);
  FlightPlanWaypoints_Full.addTotalTimeRem(builder, totalTimeRemOffset);
  FlightPlanWaypoints_Full.addZoneFuel(builder, zoneFuel);
  FlightPlanWaypoints_Full.addTotalUsedFuel(builder, totalUsedFuel);
  FlightPlanWaypoints_Full.addTotalRemFuel(builder, totalRemFuel);
  FlightPlanWaypoints_Full.addExchangedFuel(builder, exchangedFuel);
  FlightPlanWaypoints_Full.addAirDistance(builder, airDistance);
  FlightPlanWaypoints_Full.addTotalAirDistance(builder, totalAirDistance);
  FlightPlanWaypoints_Full.addTotalWeight(builder, totalWeight);
  FlightPlanWaypoints_Full.addEta(builder, etaOffset);
  FlightPlanWaypoints_Full.addAta(builder, ataOffset);
  FlightPlanWaypoints_Full.addFuelFlow(builder, fuelFlow);
  FlightPlanWaypoints_Full.addLegAlternate(builder, legAlternateOffset);
  FlightPlanWaypoints_Full.addMagVar(builder, magVar);
  FlightPlanWaypoints_Full.addDayLowAlt(builder, dayLowAlt);
  FlightPlanWaypoints_Full.addNightLowAlt(builder, nightLowAlt);
  FlightPlanWaypoints_Full.addNvgLowAlt(builder, nvgLowAlt);
  return FlightPlanWaypoints_Full.endFlightPlanWaypoints_Full(builder);
}

unpack(): FlightPlanWaypoints_FullT {
  return new FlightPlanWaypoints_FullT(
    this.type(),
    this.waypointName(),
    this.waypointNum(),
    this.airway(),
    this.arpt(),
    this.lat(),
    this.lon(),
    this.arId(),
    this.navaid(),
    this.tacanChannel(),
    this.vorFreq(),
    this.turbCat(),
    this.iceCat(),
    this.thunderCat(),
    this.alt(),
    this.tempDev(),
    this.legFuelDegrade(),
    this.legMach(),
    this.legMsnIndex(),
    this.legDragIndex(),
    this.avgCalAirspeed(),
    this.avgTrueAirspeed(),
    this.avgGroundSpeed(),
    this.priFreq(),
    this.pointWindDir(),
    this.pointWindSpeed(),
    this.avgWindDir(),
    this.avgWindSpeed(),
    this.legWindFac(),
    this.avgDriftAng(),
    this.secFreq(),
    this.magCourse(),
    this.trueCourse(),
    this.magHeading(),
    this.aaTacanChannel(),
    this.zoneDistance(),
    this.totalFlownDistance(),
    this.totalRemDistance(),
    this.zoneTime(),
    this.totalTime(),
    this.totalTimeRem(),
    this.zoneFuel(),
    this.totalUsedFuel(),
    this.totalRemFuel(),
    this.exchangedFuel(),
    this.airDistance(),
    this.totalAirDistance(),
    this.totalWeight(),
    this.eta(),
    this.ata(),
    this.fuelFlow(),
    this.legAlternate(),
    this.magVar(),
    this.dayLowAlt(),
    this.nightLowAlt(),
    this.nvgLowAlt()
  );
}


unpackTo(_o: FlightPlanWaypoints_FullT): void {
  _o.type = this.type();
  _o.waypointName = this.waypointName();
  _o.waypointNum = this.waypointNum();
  _o.airway = this.airway();
  _o.arpt = this.arpt();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.arId = this.arId();
  _o.navaid = this.navaid();
  _o.tacanChannel = this.tacanChannel();
  _o.vorFreq = this.vorFreq();
  _o.turbCat = this.turbCat();
  _o.iceCat = this.iceCat();
  _o.thunderCat = this.thunderCat();
  _o.alt = this.alt();
  _o.tempDev = this.tempDev();
  _o.legFuelDegrade = this.legFuelDegrade();
  _o.legMach = this.legMach();
  _o.legMsnIndex = this.legMsnIndex();
  _o.legDragIndex = this.legDragIndex();
  _o.avgCalAirspeed = this.avgCalAirspeed();
  _o.avgTrueAirspeed = this.avgTrueAirspeed();
  _o.avgGroundSpeed = this.avgGroundSpeed();
  _o.priFreq = this.priFreq();
  _o.pointWindDir = this.pointWindDir();
  _o.pointWindSpeed = this.pointWindSpeed();
  _o.avgWindDir = this.avgWindDir();
  _o.avgWindSpeed = this.avgWindSpeed();
  _o.legWindFac = this.legWindFac();
  _o.avgDriftAng = this.avgDriftAng();
  _o.secFreq = this.secFreq();
  _o.magCourse = this.magCourse();
  _o.trueCourse = this.trueCourse();
  _o.magHeading = this.magHeading();
  _o.aaTacanChannel = this.aaTacanChannel();
  _o.zoneDistance = this.zoneDistance();
  _o.totalFlownDistance = this.totalFlownDistance();
  _o.totalRemDistance = this.totalRemDistance();
  _o.zoneTime = this.zoneTime();
  _o.totalTime = this.totalTime();
  _o.totalTimeRem = this.totalTimeRem();
  _o.zoneFuel = this.zoneFuel();
  _o.totalUsedFuel = this.totalUsedFuel();
  _o.totalRemFuel = this.totalRemFuel();
  _o.exchangedFuel = this.exchangedFuel();
  _o.airDistance = this.airDistance();
  _o.totalAirDistance = this.totalAirDistance();
  _o.totalWeight = this.totalWeight();
  _o.eta = this.eta();
  _o.ata = this.ata();
  _o.fuelFlow = this.fuelFlow();
  _o.legAlternate = this.legAlternate();
  _o.magVar = this.magVar();
  _o.dayLowAlt = this.dayLowAlt();
  _o.nightLowAlt = this.nightLowAlt();
  _o.nvgLowAlt = this.nvgLowAlt();
}
}

export class FlightPlanWaypoints_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public type: string|Uint8Array|null = null,
  public waypointName: string|Uint8Array|null = null,
  public waypointNum: number = 0,
  public airway: string|Uint8Array|null = null,
  public arpt: string|Uint8Array|null = null,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public arId: string|Uint8Array|null = null,
  public navaid: string|Uint8Array|null = null,
  public tacanChannel: string|Uint8Array|null = null,
  public vorFreq: number = 0.0,
  public turbCat: string|Uint8Array|null = null,
  public iceCat: string|Uint8Array|null = null,
  public thunderCat: string|Uint8Array|null = null,
  public alt: number = 0.0,
  public tempDev: number = 0.0,
  public legFuelDegrade: number = 0.0,
  public legMach: number = 0.0,
  public legMsnIndex: number = 0.0,
  public legDragIndex: number = 0.0,
  public avgCalAirspeed: number = 0.0,
  public avgTrueAirspeed: number = 0.0,
  public avgGroundSpeed: number = 0.0,
  public priFreq: number = 0.0,
  public pointWindDir: number = 0.0,
  public pointWindSpeed: number = 0.0,
  public avgWindDir: number = 0.0,
  public avgWindSpeed: number = 0.0,
  public legWindFac: number = 0.0,
  public avgDriftAng: number = 0.0,
  public secFreq: number = 0.0,
  public magCourse: number = 0.0,
  public trueCourse: number = 0.0,
  public magHeading: number = 0.0,
  public aaTacanChannel: string|Uint8Array|null = null,
  public zoneDistance: number = 0.0,
  public totalFlownDistance: number = 0.0,
  public totalRemDistance: number = 0.0,
  public zoneTime: number = 0.0,
  public totalTime: string|Uint8Array|null = null,
  public totalTimeRem: string|Uint8Array|null = null,
  public zoneFuel: number = 0.0,
  public totalUsedFuel: number = 0.0,
  public totalRemFuel: number = 0.0,
  public exchangedFuel: number = 0.0,
  public airDistance: number = 0.0,
  public totalAirDistance: number = 0.0,
  public totalWeight: number = 0.0,
  public eta: string|Uint8Array|null = null,
  public ata: string|Uint8Array|null = null,
  public fuelFlow: number = 0.0,
  public legAlternate: string|Uint8Array|null = null,
  public magVar: number = 0.0,
  public dayLowAlt: number = 0.0,
  public nightLowAlt: number = 0.0,
  public nvgLowAlt: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const waypointName = (this.waypointName !== null ? builder.createString(this.waypointName!) : 0);
  const airway = (this.airway !== null ? builder.createString(this.airway!) : 0);
  const arpt = (this.arpt !== null ? builder.createString(this.arpt!) : 0);
  const arId = (this.arId !== null ? builder.createString(this.arId!) : 0);
  const navaid = (this.navaid !== null ? builder.createString(this.navaid!) : 0);
  const tacanChannel = (this.tacanChannel !== null ? builder.createString(this.tacanChannel!) : 0);
  const turbCat = (this.turbCat !== null ? builder.createString(this.turbCat!) : 0);
  const iceCat = (this.iceCat !== null ? builder.createString(this.iceCat!) : 0);
  const thunderCat = (this.thunderCat !== null ? builder.createString(this.thunderCat!) : 0);
  const aaTacanChannel = (this.aaTacanChannel !== null ? builder.createString(this.aaTacanChannel!) : 0);
  const totalTime = (this.totalTime !== null ? builder.createString(this.totalTime!) : 0);
  const totalTimeRem = (this.totalTimeRem !== null ? builder.createString(this.totalTimeRem!) : 0);
  const eta = (this.eta !== null ? builder.createString(this.eta!) : 0);
  const ata = (this.ata !== null ? builder.createString(this.ata!) : 0);
  const legAlternate = (this.legAlternate !== null ? builder.createString(this.legAlternate!) : 0);

  return FlightPlanWaypoints_Full.createFlightPlanWaypoints_Full(builder,
    type,
    waypointName,
    this.waypointNum,
    airway,
    arpt,
    this.lat,
    this.lon,
    arId,
    navaid,
    tacanChannel,
    this.vorFreq,
    turbCat,
    iceCat,
    thunderCat,
    this.alt,
    this.tempDev,
    this.legFuelDegrade,
    this.legMach,
    this.legMsnIndex,
    this.legDragIndex,
    this.avgCalAirspeed,
    this.avgTrueAirspeed,
    this.avgGroundSpeed,
    this.priFreq,
    this.pointWindDir,
    this.pointWindSpeed,
    this.avgWindDir,
    this.avgWindSpeed,
    this.legWindFac,
    this.avgDriftAng,
    this.secFreq,
    this.magCourse,
    this.trueCourse,
    this.magHeading,
    aaTacanChannel,
    this.zoneDistance,
    this.totalFlownDistance,
    this.totalRemDistance,
    this.zoneTime,
    totalTime,
    totalTimeRem,
    this.zoneFuel,
    this.totalUsedFuel,
    this.totalRemFuel,
    this.exchangedFuel,
    this.airDistance,
    this.totalAirDistance,
    this.totalWeight,
    eta,
    ata,
    this.fuelFlow,
    legAlternate,
    this.magVar,
    this.dayLowAlt,
    this.nightLowAlt,
    this.nvgLowAlt
  );
}
}
