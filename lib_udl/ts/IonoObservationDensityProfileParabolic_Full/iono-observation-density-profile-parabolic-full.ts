// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Coefficients to describe the E, F1, and F2 layers as parabolic-shape segments.
 */
export class IonoObservationDensityProfileParabolic_Full implements flatbuffers.IUnpackableObject<IonoObservationDensityProfileParabolic_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IonoObservationDensityProfileParabolic_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIonoObservationDensityProfileParabolic_Full(bb:flatbuffers.ByteBuffer, obj?:IonoObservationDensityProfileParabolic_Full):IonoObservationDensityProfileParabolic_Full {
  return (obj || new IonoObservationDensityProfileParabolic_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIonoObservationDensityProfileParabolic_Full(bb:flatbuffers.ByteBuffer, obj?:IonoObservationDensityProfileParabolic_Full):IonoObservationDensityProfileParabolic_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IonoObservationDensityProfileParabolic_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('IONO');
}

/**
 * General description of the QP computation algorithm.
 * Example: /// Example: Best-fit algorithm in NHPC software.
 * Constraints: No constraints specified.
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Describes the E, F1, and F2 layers as parabolic-shape segments.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
parabolicItems(index: number):string
parabolicItems(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
parabolicItems(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

parabolicItemsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startIonoObservationDensityProfileParabolic_Full(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, descriptionOffset, 0);
}

static addParabolicItems(builder:flatbuffers.Builder, parabolicItemsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, parabolicItemsOffset, 0);
}

static createParabolicItemsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startParabolicItemsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endIonoObservationDensityProfileParabolic_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishIonoObservationDensityProfileParabolic_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO');
}

static finishSizePrefixedIonoObservationDensityProfileParabolic_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'IONO', true);
}

static createIonoObservationDensityProfileParabolic_Full(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset, parabolicItemsOffset:flatbuffers.Offset):flatbuffers.Offset {
  IonoObservationDensityProfileParabolic_Full.startIonoObservationDensityProfileParabolic_Full(builder);
  IonoObservationDensityProfileParabolic_Full.addDescription(builder, descriptionOffset);
  IonoObservationDensityProfileParabolic_Full.addParabolicItems(builder, parabolicItemsOffset);
  return IonoObservationDensityProfileParabolic_Full.endIonoObservationDensityProfileParabolic_Full(builder);
}

unpack(): IonoObservationDensityProfileParabolic_FullT {
  return new IonoObservationDensityProfileParabolic_FullT(
    this.description(),
    this.bb!.createScalarList<string>(this.parabolicItems.bind(this), this.parabolicItems_Length())
  );
}


unpackTo(_o: IonoObservationDensityProfileParabolic_FullT): void {
  _o.description = this.description();
  _o.parabolicItems = this.bb!.createScalarList<string>(this.parabolicItems.bind(this), this.parabolicItems_Length());
}
}

export class IonoObservationDensityProfileParabolic_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public description: string|Uint8Array|null = null,
  public parabolicItems: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const parabolicItems = IonoObservationDensityProfileParabolic_Full.createParabolicItemsVector(builder, builder.createObjectOffsetList(this.parabolicItems));

  return IonoObservationDensityProfileParabolic_Full.createIonoObservationDensityProfileParabolic_Full(builder,
    description,
    parabolicItems
  );
}
}
