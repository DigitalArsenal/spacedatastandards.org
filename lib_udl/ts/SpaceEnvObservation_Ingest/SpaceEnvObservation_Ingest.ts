// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SpaceEnvObservation_Ingest_dataMode_Enum } from './SpaceEnvObservation_Ingest_dataMode_Enum.js';
import { SpaceEnvObservation_Ingest_senReferenceFrame_Enum } from './SpaceEnvObservation_Ingest_senReferenceFrame_Enum.js';


/**
 * /// SpaceEnvObservation data.
 */
export class SpaceEnvObservation_Ingest implements flatbuffers.IUnpackableObject<SpaceEnvObservation_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SpaceEnvObservation_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSpaceEnvObservation_Ingest(bb:flatbuffers.ByteBuffer, obj?:SpaceEnvObservation_Ingest):SpaceEnvObservation_Ingest {
  return (obj || new SpaceEnvObservation_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSpaceEnvObservation_Ingest(bb:flatbuffers.ByteBuffer, obj?:SpaceEnvObservation_Ingest):SpaceEnvObservation_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SpaceEnvObservation_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SPAC');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: f13f82b8-5d2a-407a-b3f3-1fe30ca79eae
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of message associated with this record.
 * Example: /// Example: SODM
 * Constraints: Minimum length = 0, Maximum length = 16
 */
msgType():string|null
msgType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msgType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The external system which generated the message, if applicable.
 * Example: /// Example: System Name
 * Constraints: Minimum length = 0, Maximum length = 64
 */
genSystem():string|null
genSystem(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
genSystem(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
 * Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
 * Constraints: Minimum length = 0, Maximum length = 36
 */
externalId():string|null
externalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.
 * Example: /// Example: ECP
 * Constraints: Minimum length = 0, Maximum length = 64
 */
dataType():string|null
dataType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-02-10T19:48:09.934Z
 * Constraints: No constraints specified.
 */
genTime():string|null
genTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
genTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag indicating that this record contains forecast data.
 * Example: /// Example: True
 * Constraints: No constraints specified.
 */
forecast():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag indicating that this record contains derived data.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
derived():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Unique identifier of the on-orbit satellite hosting the sensor which produced this data.
 * Example: /// Example: 41866
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.
 * Example: /// Example: 41866
 * Constraints: No constraints specified.
 */
satNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.
 * Example: /// Example: 41866
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the reporting sensor.
 * Example: /// Example: ECP-1
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ECP-1
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).
 * Example: /// Example: ONORBIT
 * Constraints: Minimum length = 0, Maximum length = 64
 */
observatoryType():string|null
observatoryType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
observatoryType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the observatory from which this data was collected.
 * Example: /// Example: GOES-16
 * Constraints: Minimum length = 0, Maximum length = 128
 */
observatoryName():string|null
observatoryName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
observatoryName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional notes concerning the observatory.
 * Example: /// Example: Notes
 * Constraints: Minimum length = 0, Maximum length = 256
 */
observatoryNotes():string|null
observatoryNotes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
observatoryNotes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).
 * Example: /// Example: MAGNETOMETER
 * Constraints: Minimum length = 0, Maximum length = 64
 */
instrumentType():string|null
instrumentType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
instrumentType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).
 * Example: /// Example: 38.8339
 * Constraints: No constraints specified.
 */
lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).
 * Example: /// Example: -104.8214
 * Constraints: No constraints specified.
 */
lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.
 * Example: /// Example: 35785.3732
 * Constraints: No constraints specified.
 */
alt():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.
 * Example: /// Example: J2000
 * Constraints: Minimum length = 0, Maximum length = 24
 */
senReferenceFrame():SpaceEnvObservation_Ingest_senReferenceFrame_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SpaceEnvObservation_Ingest_senReferenceFrame_Enum.J2000;
}

/**
 * Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].
 * Example: /// Example: [4174.78541785946, -9969.69867853067, 40733.9284531208]
 * Constraints: No constraints specified.
 */
senPos(index: number):string
senPos(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
senPos(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

senPosLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].
 * Example: /// Example: [0.727059797295872, 0.298037087322647, 0.00157064850994095]
 * Constraints: No constraints specified.
 */
senVel(index: number):string
senVel(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
senVel(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

senVelLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The sensor measurement type of the observation data contained in this record.
 * Example: /// Example: ENERGETIC PARTICLES
 * Constraints: Minimum length = 0, Maximum length = 64
 */
measType():string|null
measType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
measType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The energy level bin of the sensor associated with this measurement.
 * Example: /// Example: 0500-700 keV
 * Constraints: Minimum length = 0, Maximum length = 64
 */
senEnergyLevel():string|null
senEnergyLevel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
senEnergyLevel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.
 * Example: /// Example: ECPOBSET-478125
 * Constraints: Minimum length = 0, Maximum length = 36
 */
obSetId():string|null
obSetId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obSetId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.
 * Example: /// Example: PROTON
 * Constraints: Minimum length = 0, Maximum length = 24
 */
particleType():string|null
particleType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
particleType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of the observation, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-06-07T14:17:39.653Z
 * Constraints: No constraints specified.
 */
obTime():string|null
obTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A collection of individual space environment observations.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
seoList(index: number):string
seoList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
seoList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

seoListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.
 * Example: /// Example: GOOD
 * Constraints: Minimum length = 0, Maximum length = 16
 */
quality():string|null
quality(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
quality(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Descriptive or additional information associated with this observation record.
 * Example: /// Example: Observation Data Description Text
 * Constraints: Minimum length = 0, Maximum length = 512
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional source-provided and searchable metadata or descriptor of the data.
 * Example: /// Example: energetic charged particle
 * Constraints: Minimum length = 0, Maximum length = 64
 */
descriptor():string|null
descriptor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
descriptor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
 * Example: /// Example: ['SPACEENVOB', 'SGI']
 * Constraints: No constraints specified.
 */
srcTyps(index: number):string
srcTyps(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcTyps(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcTypsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.
 * Example: /// Example: ['615236d7-d464-4b8c-9b0b-45994e017d80', '8a38e3d6-35fd-4bda-b883-e3724e6bc6b9']
 * Constraints: No constraints specified.
 */
srcIds(index: number):string
srcIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
srcIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

srcIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2023-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 36
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SpaceEnvObservation_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SpaceEnvObservation_Ingest_dataMode_Enum.REAL;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSpaceEnvObservation_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(41);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addMsgType(builder:flatbuffers.Builder, msgTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, msgTypeOffset, 0);
}

static addGenSystem(builder:flatbuffers.Builder, genSystemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, genSystemOffset, 0);
}

static addExternalId(builder:flatbuffers.Builder, externalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, externalIdOffset, 0);
}

static addDataType(builder:flatbuffers.Builder, dataTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, dataTypeOffset, 0);
}

static addGenTime(builder:flatbuffers.Builder, genTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, genTimeOffset, 0);
}

static addForecast(builder:flatbuffers.Builder, forecast:boolean) {
  builder.addFieldInt8(7, +forecast, +false);
}

static addDerived(builder:flatbuffers.Builder, derived:boolean) {
  builder.addFieldInt8(8, +derived, +false);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, idOnOrbitOffset, 0);
}

static addSatNo(builder:flatbuffers.Builder, satNo:number) {
  builder.addFieldInt32(10, satNo, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, origObjectIdOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, idSensorOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, origSensorIdOffset, 0);
}

static addObservatoryType(builder:flatbuffers.Builder, observatoryTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, observatoryTypeOffset, 0);
}

static addObservatoryName(builder:flatbuffers.Builder, observatoryNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, observatoryNameOffset, 0);
}

static addObservatoryNotes(builder:flatbuffers.Builder, observatoryNotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, observatoryNotesOffset, 0);
}

static addInstrumentType(builder:flatbuffers.Builder, instrumentTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, instrumentTypeOffset, 0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(18, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(19, lon, 0.0);
}

static addAlt(builder:flatbuffers.Builder, alt:number) {
  builder.addFieldFloat64(20, alt, 0.0);
}

static addSenReferenceFrame(builder:flatbuffers.Builder, senReferenceFrame:SpaceEnvObservation_Ingest_senReferenceFrame_Enum) {
  builder.addFieldInt8(21, senReferenceFrame, SpaceEnvObservation_Ingest_senReferenceFrame_Enum.J2000);
}

static addSenPos(builder:flatbuffers.Builder, senPosOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, senPosOffset, 0);
}

static createSenPosVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSenPosVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSenVel(builder:flatbuffers.Builder, senVelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, senVelOffset, 0);
}

static createSenVelVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSenVelVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMeasType(builder:flatbuffers.Builder, measTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, measTypeOffset, 0);
}

static addSenEnergyLevel(builder:flatbuffers.Builder, senEnergyLevelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, senEnergyLevelOffset, 0);
}

static addObSetId(builder:flatbuffers.Builder, obSetIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, obSetIdOffset, 0);
}

static addParticleType(builder:flatbuffers.Builder, particleTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, particleTypeOffset, 0);
}

static addObTime(builder:flatbuffers.Builder, obTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, obTimeOffset, 0);
}

static addSeoList(builder:flatbuffers.Builder, seoListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, seoListOffset, 0);
}

static createSeoListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSeoListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addQuality(builder:flatbuffers.Builder, qualityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, qualityOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, descriptionOffset, 0);
}

static addDescriptor(builder:flatbuffers.Builder, descriptorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, descriptorOffset, 0);
}

static addSrcTyps(builder:flatbuffers.Builder, srcTypsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, srcTypsOffset, 0);
}

static createSrcTypsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcTypsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSrcIds(builder:flatbuffers.Builder, srcIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, srcIdsOffset, 0);
}

static createSrcIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSrcIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SpaceEnvObservation_Ingest_dataMode_Enum) {
  builder.addFieldInt8(39, dataMode, SpaceEnvObservation_Ingest_dataMode_Enum.REAL);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, origNetworkOffset, 0);
}

static endSpaceEnvObservation_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSpaceEnvObservation_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SPAC');
}

static finishSizePrefixedSpaceEnvObservation_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SPAC', true);
}

static createSpaceEnvObservation_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, msgTypeOffset:flatbuffers.Offset, genSystemOffset:flatbuffers.Offset, externalIdOffset:flatbuffers.Offset, dataTypeOffset:flatbuffers.Offset, genTimeOffset:flatbuffers.Offset, forecast:boolean, derived:boolean, idOnOrbitOffset:flatbuffers.Offset, satNo:number, origObjectIdOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, observatoryTypeOffset:flatbuffers.Offset, observatoryNameOffset:flatbuffers.Offset, observatoryNotesOffset:flatbuffers.Offset, instrumentTypeOffset:flatbuffers.Offset, lat:number, lon:number, alt:number, senReferenceFrame:SpaceEnvObservation_Ingest_senReferenceFrame_Enum, senPosOffset:flatbuffers.Offset, senVelOffset:flatbuffers.Offset, measTypeOffset:flatbuffers.Offset, senEnergyLevelOffset:flatbuffers.Offset, obSetIdOffset:flatbuffers.Offset, particleTypeOffset:flatbuffers.Offset, obTimeOffset:flatbuffers.Offset, seoListOffset:flatbuffers.Offset, qualityOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, descriptorOffset:flatbuffers.Offset, srcTypsOffset:flatbuffers.Offset, srcIdsOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataMode:SpaceEnvObservation_Ingest_dataMode_Enum, origNetworkOffset:flatbuffers.Offset):flatbuffers.Offset {
  SpaceEnvObservation_Ingest.startSpaceEnvObservation_Ingest(builder);
  SpaceEnvObservation_Ingest.addId(builder, idOffset);
  SpaceEnvObservation_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  SpaceEnvObservation_Ingest.addMsgType(builder, msgTypeOffset);
  SpaceEnvObservation_Ingest.addGenSystem(builder, genSystemOffset);
  SpaceEnvObservation_Ingest.addExternalId(builder, externalIdOffset);
  SpaceEnvObservation_Ingest.addDataType(builder, dataTypeOffset);
  SpaceEnvObservation_Ingest.addGenTime(builder, genTimeOffset);
  SpaceEnvObservation_Ingest.addForecast(builder, forecast);
  SpaceEnvObservation_Ingest.addDerived(builder, derived);
  SpaceEnvObservation_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
  SpaceEnvObservation_Ingest.addSatNo(builder, satNo);
  SpaceEnvObservation_Ingest.addOrigObjectId(builder, origObjectIdOffset);
  SpaceEnvObservation_Ingest.addIdSensor(builder, idSensorOffset);
  SpaceEnvObservation_Ingest.addOrigSensorId(builder, origSensorIdOffset);
  SpaceEnvObservation_Ingest.addObservatoryType(builder, observatoryTypeOffset);
  SpaceEnvObservation_Ingest.addObservatoryName(builder, observatoryNameOffset);
  SpaceEnvObservation_Ingest.addObservatoryNotes(builder, observatoryNotesOffset);
  SpaceEnvObservation_Ingest.addInstrumentType(builder, instrumentTypeOffset);
  SpaceEnvObservation_Ingest.addLat(builder, lat);
  SpaceEnvObservation_Ingest.addLon(builder, lon);
  SpaceEnvObservation_Ingest.addAlt(builder, alt);
  SpaceEnvObservation_Ingest.addSenReferenceFrame(builder, senReferenceFrame);
  SpaceEnvObservation_Ingest.addSenPos(builder, senPosOffset);
  SpaceEnvObservation_Ingest.addSenVel(builder, senVelOffset);
  SpaceEnvObservation_Ingest.addMeasType(builder, measTypeOffset);
  SpaceEnvObservation_Ingest.addSenEnergyLevel(builder, senEnergyLevelOffset);
  SpaceEnvObservation_Ingest.addObSetId(builder, obSetIdOffset);
  SpaceEnvObservation_Ingest.addParticleType(builder, particleTypeOffset);
  SpaceEnvObservation_Ingest.addObTime(builder, obTimeOffset);
  SpaceEnvObservation_Ingest.addSeoList(builder, seoListOffset);
  SpaceEnvObservation_Ingest.addQuality(builder, qualityOffset);
  SpaceEnvObservation_Ingest.addDescription(builder, descriptionOffset);
  SpaceEnvObservation_Ingest.addDescriptor(builder, descriptorOffset);
  SpaceEnvObservation_Ingest.addSrcTyps(builder, srcTypsOffset);
  SpaceEnvObservation_Ingest.addSrcIds(builder, srcIdsOffset);
  SpaceEnvObservation_Ingest.addCreatedAt(builder, createdAtOffset);
  SpaceEnvObservation_Ingest.addCreatedBy(builder, createdByOffset);
  SpaceEnvObservation_Ingest.addSource(builder, sourceOffset);
  SpaceEnvObservation_Ingest.addOrigin(builder, originOffset);
  SpaceEnvObservation_Ingest.addDataMode(builder, dataMode);
  SpaceEnvObservation_Ingest.addOrigNetwork(builder, origNetworkOffset);
  return SpaceEnvObservation_Ingest.endSpaceEnvObservation_Ingest(builder);
}

unpack(): SpaceEnvObservation_IngestT {
  return new SpaceEnvObservation_IngestT(
    this.id(),
    this.classificationMarking(),
    this.msgType(),
    this.genSystem(),
    this.externalId(),
    this.dataType(),
    this.genTime(),
    this.forecast(),
    this.derived(),
    this.idOnOrbit(),
    this.satNo(),
    this.origObjectId(),
    this.idSensor(),
    this.origSensorId(),
    this.observatoryType(),
    this.observatoryName(),
    this.observatoryNotes(),
    this.instrumentType(),
    this.lat(),
    this.lon(),
    this.alt(),
    this.senReferenceFrame(),
    this.bb!.createScalarList<string>(this.senPos.bind(this), this.senPosLength()),
    this.bb!.createScalarList<string>(this.senVel.bind(this), this.senVelLength()),
    this.measType(),
    this.senEnergyLevel(),
    this.obSetId(),
    this.particleType(),
    this.obTime(),
    this.bb!.createScalarList<string>(this.seoList.bind(this), this.seoListLength()),
    this.quality(),
    this.description(),
    this.descriptor(),
    this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTypsLength()),
    this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIdsLength()),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.origNetwork()
  );
}


unpackTo(_o: SpaceEnvObservation_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.msgType = this.msgType();
  _o.genSystem = this.genSystem();
  _o.externalId = this.externalId();
  _o.dataType = this.dataType();
  _o.genTime = this.genTime();
  _o.forecast = this.forecast();
  _o.derived = this.derived();
  _o.idOnOrbit = this.idOnOrbit();
  _o.satNo = this.satNo();
  _o.origObjectId = this.origObjectId();
  _o.idSensor = this.idSensor();
  _o.origSensorId = this.origSensorId();
  _o.observatoryType = this.observatoryType();
  _o.observatoryName = this.observatoryName();
  _o.observatoryNotes = this.observatoryNotes();
  _o.instrumentType = this.instrumentType();
  _o.lat = this.lat();
  _o.lon = this.lon();
  _o.alt = this.alt();
  _o.senReferenceFrame = this.senReferenceFrame();
  _o.senPos = this.bb!.createScalarList<string>(this.senPos.bind(this), this.senPosLength());
  _o.senVel = this.bb!.createScalarList<string>(this.senVel.bind(this), this.senVelLength());
  _o.measType = this.measType();
  _o.senEnergyLevel = this.senEnergyLevel();
  _o.obSetId = this.obSetId();
  _o.particleType = this.particleType();
  _o.obTime = this.obTime();
  _o.seoList = this.bb!.createScalarList<string>(this.seoList.bind(this), this.seoListLength());
  _o.quality = this.quality();
  _o.description = this.description();
  _o.descriptor = this.descriptor();
  _o.srcTyps = this.bb!.createScalarList<string>(this.srcTyps.bind(this), this.srcTypsLength());
  _o.srcIds = this.bb!.createScalarList<string>(this.srcIds.bind(this), this.srcIdsLength());
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.origNetwork = this.origNetwork();
}
}

export class SpaceEnvObservation_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public msgType: string|Uint8Array|null = null,
  public genSystem: string|Uint8Array|null = null,
  public externalId: string|Uint8Array|null = null,
  public dataType: string|Uint8Array|null = null,
  public genTime: string|Uint8Array|null = null,
  public forecast: boolean = false,
  public derived: boolean = false,
  public idOnOrbit: string|Uint8Array|null = null,
  public satNo: number = 0,
  public origObjectId: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public observatoryType: string|Uint8Array|null = null,
  public observatoryName: string|Uint8Array|null = null,
  public observatoryNotes: string|Uint8Array|null = null,
  public instrumentType: string|Uint8Array|null = null,
  public lat: number = 0.0,
  public lon: number = 0.0,
  public alt: number = 0.0,
  public senReferenceFrame: SpaceEnvObservation_Ingest_senReferenceFrame_Enum = SpaceEnvObservation_Ingest_senReferenceFrame_Enum.J2000,
  public senPos: (string)[] = [],
  public senVel: (string)[] = [],
  public measType: string|Uint8Array|null = null,
  public senEnergyLevel: string|Uint8Array|null = null,
  public obSetId: string|Uint8Array|null = null,
  public particleType: string|Uint8Array|null = null,
  public obTime: string|Uint8Array|null = null,
  public seoList: (string)[] = [],
  public quality: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public descriptor: string|Uint8Array|null = null,
  public srcTyps: (string)[] = [],
  public srcIds: (string)[] = [],
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: SpaceEnvObservation_Ingest_dataMode_Enum = SpaceEnvObservation_Ingest_dataMode_Enum.REAL,
  public origNetwork: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const msgType = (this.msgType !== null ? builder.createString(this.msgType!) : 0);
  const genSystem = (this.genSystem !== null ? builder.createString(this.genSystem!) : 0);
  const externalId = (this.externalId !== null ? builder.createString(this.externalId!) : 0);
  const dataType = (this.dataType !== null ? builder.createString(this.dataType!) : 0);
  const genTime = (this.genTime !== null ? builder.createString(this.genTime!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const observatoryType = (this.observatoryType !== null ? builder.createString(this.observatoryType!) : 0);
  const observatoryName = (this.observatoryName !== null ? builder.createString(this.observatoryName!) : 0);
  const observatoryNotes = (this.observatoryNotes !== null ? builder.createString(this.observatoryNotes!) : 0);
  const instrumentType = (this.instrumentType !== null ? builder.createString(this.instrumentType!) : 0);
  const senPos = SpaceEnvObservation_Ingest.createSenPosVector(builder, builder.createObjectOffsetList(this.senPos));
  const senVel = SpaceEnvObservation_Ingest.createSenVelVector(builder, builder.createObjectOffsetList(this.senVel));
  const measType = (this.measType !== null ? builder.createString(this.measType!) : 0);
  const senEnergyLevel = (this.senEnergyLevel !== null ? builder.createString(this.senEnergyLevel!) : 0);
  const obSetId = (this.obSetId !== null ? builder.createString(this.obSetId!) : 0);
  const particleType = (this.particleType !== null ? builder.createString(this.particleType!) : 0);
  const obTime = (this.obTime !== null ? builder.createString(this.obTime!) : 0);
  const seoList = SpaceEnvObservation_Ingest.createSeoListVector(builder, builder.createObjectOffsetList(this.seoList));
  const quality = (this.quality !== null ? builder.createString(this.quality!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const descriptor = (this.descriptor !== null ? builder.createString(this.descriptor!) : 0);
  const srcTyps = SpaceEnvObservation_Ingest.createSrcTypsVector(builder, builder.createObjectOffsetList(this.srcTyps));
  const srcIds = SpaceEnvObservation_Ingest.createSrcIdsVector(builder, builder.createObjectOffsetList(this.srcIds));
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return SpaceEnvObservation_Ingest.createSpaceEnvObservation_Ingest(builder,
    id,
    classificationMarking,
    msgType,
    genSystem,
    externalId,
    dataType,
    genTime,
    this.forecast,
    this.derived,
    idOnOrbit,
    this.satNo,
    origObjectId,
    idSensor,
    origSensorId,
    observatoryType,
    observatoryName,
    observatoryNotes,
    instrumentType,
    this.lat,
    this.lon,
    this.alt,
    this.senReferenceFrame,
    senPos,
    senVel,
    measType,
    senEnergyLevel,
    obSetId,
    particleType,
    obTime,
    seoList,
    quality,
    description,
    descriptor,
    srcTyps,
    srcIds,
    createdAt,
    createdBy,
    source,
    origin,
    this.dataMode,
    origNetwork
  );
}
}
