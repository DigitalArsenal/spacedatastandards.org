// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SGI_Ingest_dataMode_Enum } from './sgi-ingest-data-mode-enum.js';
import { SGI_Ingest_precedence_Enum } from './sgi-ingest-precedence-enum.js';
import { SGI_Ingest_state_Enum } from './sgi-ingest-state-enum.js';


/**
 * /// Model representation of space weather/solar, geomagnetic, and radiation belt indices.
 */
export class SGI_Ingest implements flatbuffers.IUnpackableObject<SGI_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SGI_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSGI_Ingest(bb:flatbuffers.ByteBuffer, obj?:SGI_Ingest):SGI_Ingest {
  return (obj || new SGI_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSGI_Ingest(bb:flatbuffers.ByteBuffer, obj?:SGI_Ingest):SGI_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SGI_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SGII');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: SGI-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ISO8601 UTC Time the data was received and processed from the source. Typically a source provides data for a date window with each transmission including past, present, and future predicted values.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
effectiveDate():string|null
effectiveDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectiveDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ISO8601 UTC Time of the index value. This could be a past, current, or future predicted value. Note: sgiDate defines the start time of the time window for this  data record.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
sgiDate():string|null
sgiDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sgiDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The type of data contained in this record (e.g. HASDM, JBH09, K-Index, PSD-dB, RBI, RFI-SFU, etc).
 * Example: /// Example: JBH09
 * Constraints: Minimum length = 0, Maximum length = 32
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * State indicating Issued (I), Nowcast (N), or Predicted (P) values for this record.
 * Example: /// Example: I
 * Constraints: Minimum length = 0, Maximum length = 1
 */
state():SGI_Ingest_state_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SGI_Ingest_state_Enum.I;
}

/**
 * The name/location of the station that collected the geomagnetic data for this record.
 * Example: /// Example: Boulder
 * Constraints: Minimum length = 0, Maximum length = 24
 */
stationName():string|null
stationName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stationName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the reporting sensor.
 * Example: /// Example: 57c96c97-e076-48af-a068-73ee2cb37e65
 * Constraints: Minimum length = 0, Maximum length = 36
 */
idSensor():string|null
idSensor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSensor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier provided by the reporting source to indicate the sensor identifier which produced this data. This may be an internal identifier and not necessarily a valid sensor ID.
 * Example: /// Example: ORIGSENSOR-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The transmitted DCA mode of the record (1-3).
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
mode():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The precedence of data in this record (O = Immediate, P = Priority, R = Routine, Y = Emergency, Z = Flash).
 * Example: /// Example: R
 * Constraints: Minimum length = 0, Maximum length = 1
 */
precedence():SGI_Ingest_precedence_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SGI_Ingest_precedence_Enum.O;
}

/**
 * Array containing the degree of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
 * Example: /// Example: [1, 2, 3]
 * Constraints: No constraints specified.
 */
coeffDegree(index: number):string
coeffDegree(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
coeffDegree(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

coeffDegreeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array containing the order of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
 * Example: /// Example: [1, 2, 3]
 * Constraints: No constraints specified.
 */
coeffOrder(index: number):string
coeffOrder(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
coeffOrder(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

coeffOrderLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array containing the cosine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
 * Example: /// Example: [1.23, 342.3, 1.32]
 * Constraints: No constraints specified.
 */
ctce(index: number):string
ctce(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ctce(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

ctceLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array containing the sine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
 * Example: /// Example: [1.23, 342.3, 1.32]
 * Constraints: No constraints specified.
 */
stce(index: number):string
stce(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
stce(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

stceLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array containing the cosine spherical-harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
 * Example: /// Example: [1.23, 342.3, 1.32]
 * Constraints: No constraints specified.
 */
ctci(index: number):string
ctci(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ctci(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

ctciLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array containing the sine spherical harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
 * Example: /// Example: [1.23, 342.3, 1.32]
 * Constraints: No constraints specified.
 */
stci(index: number):string
stci(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
stci(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

stciLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Extreme Ultraviolet (EUV) proxy, E10.7, in x10-22 Watts per meter squared per Hertz, is the integrated solar EUV energy flux at the top of atmosphere and normalized to solar flux units.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
e10():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * E54 (E10-Bar), in x10-22 Watts per meter squared per Hertz, uses the past 54-days E10 values to determine the E10 average.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
e54():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Daily S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
s10():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * 54 day S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
s54():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Daily M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
m10():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * 54 day M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
m54():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Daily Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
y10():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * 54 day Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
y54():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Daily solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
f10():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * 54 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
f54():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * 81 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
f81():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Ap is the planetary geomagnetic 2 nT index (00-21 UT) for the timespan specified in apDuration. If apDuration is null, a 3 hour duration should be assumed.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
ap():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The time, in hours, for which the Ap index value is valid. If null, a span of 3 hours is assumed.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
apDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The maximum measured K-Index at the associated station during the kpDuration timespan. The K-Index is a unitless measure (0 - 9) of the deviation in the Earth's magnetic field from normal at the station geographic location, with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
 * Example: /// Example: 1
 * Constraints: No constraints specified.
 */
kIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The Planetary K-index (Kp) over the kpDuration timespan. The Kp-Index is the average K-Index for the entire Earth, utilizing a unitless scale (0-9, in incremenets of 1/3), with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
 * Example: /// Example: 4.66
 * Constraints: No constraints specified.
 */
kp():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The time, in hours, over which the K, Kp, and/or gamma index values are measured.  If null, a span of 3 hours is assumed.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
kpDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The maximum measured gamma deflection during the kpDuration timespan. If kpDuration is null, a 3 hour duration should be assumed.
 * Example: /// Example: 25
 * Constraints: No constraints specified.
 */
gamma():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Disturbance Storm Time geomagnetic index in nT.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
dst():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * delta exospheric temperature correction in units of K.
 * Example: /// Example: 1.23
 * Constraints: No constraints specified.
 */
dtc():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Region code for the associated radiation belt index. This is the code associated with the corresponding radiation belt location. See the provider card for reference to specific region code definitions.
 * Example: /// Example: 2
 * Constraints: No constraints specified.
 */
rbRegionCode():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The value of the radiation belt index. This is the ratio of current intensity of a radiation belt to long-term average value. It's long-term average should be close to 1. Depending on the type of belt sensor, this ratio may measure Flux (number of particles / (cm^2 sec energy solid-angle)), dose rate (rad per second), or relative counts of particles per time (counts per second). The index value may also be normalized, the normalization value typically represents an average of the sensor measurements taken within a region over a given time interval. See the normFactor field for the specific normalization factor, if provided.
 * Example: /// Example: 1.02947164506
 * Constraints: No constraints specified.
 */
rbIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The normalization factor that has already been applied to the index value prior to record ingest. Typically used to normalize the index value to a particular interval. Units of the normalization factor may vary depending on the provider of this data (REACH, POES, CEASE3, etc.).
 * Example: /// Example: 2.12679e-07
 * Constraints: No constraints specified.
 */
normFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The timespan over which the associated radiation belt index is factored. If rbDuration is null, a 24 hour duration should be assumed. Note: rbDuration defines the length of the time window for this data record. The time window start time is defined by sgiDate, and the time window end time is defined by sgiDate plus rbDuration.
 * Example: /// Example: 24
 * Constraints: No constraints specified.
 */
rbDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Signal analyzer's input attenuation level, in decibels. Attenuation is a setting on the hardware that measures the power of a signal.
 * Example: /// Example: 5.1
 * Constraints: No constraints specified.
 */
analyzerAttenuation():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Observed baseline values of the frequencies specified in the frequencies field, in solar flux units. The baseline values will be used to help detect abnormal readings from the sun that might indicate a flare or other solar activity.
 * Example: /// Example: [15, 32, 25, 134, 0, 6, 19, 8]
 * Constraints: No constraints specified.
 */
observedBaseline(index: number):string
observedBaseline(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
observedBaseline(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

observedBaselineLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of individual power spectral density (PSD) frequencies of the signal, in megahertz. This array should correspond with the same-sized array of powers.
 * Example: /// Example: [25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875]
 * Constraints: No constraints specified.
 */
frequencies(index: number):string
frequencies(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
frequencies(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

frequenciesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of individual power spectral density (PSD) powers of the signal, in watts. This array should correspond with the same-sized array of frequencies.
 * Example: /// Example: [67.1, 65.2, 68.1, 74.3, 68.1, 96.4, 97.3, 68.1]
 * Constraints: No constraints specified.
 */
powers(index: number):string
powers(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
powers(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

powersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
 * Example: /// Example: rawFileURI
 * Constraints: Minimum length = 0, Maximum length = 256
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
 * Example: /// Example: TRANSACTION-ID
 * Constraints: Minimum length = 0, Maximum length = 64
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
 * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
 * Constraints: No constraints specified.
 */
tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: ORIG
 * Constraints: Minimum length = 1, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SGI_Ingest_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SGI_Ingest_dataMode_Enum.REAL;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2018-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSGI_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(53);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addEffectiveDate(builder:flatbuffers.Builder, effectiveDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, effectiveDateOffset, 0);
}

static addSgiDate(builder:flatbuffers.Builder, sgiDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, sgiDateOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, typeOffset, 0);
}

static addState(builder:flatbuffers.Builder, state:SGI_Ingest_state_Enum) {
  builder.addFieldInt8(5, state, SGI_Ingest_state_Enum.I);
}

static addStationName(builder:flatbuffers.Builder, stationNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, stationNameOffset, 0);
}

static addIdSensor(builder:flatbuffers.Builder, idSensorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, idSensorOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, origSensorIdOffset, 0);
}

static addMode(builder:flatbuffers.Builder, mode:number) {
  builder.addFieldInt32(9, mode, 0);
}

static addPrecedence(builder:flatbuffers.Builder, precedence:SGI_Ingest_precedence_Enum) {
  builder.addFieldInt8(10, precedence, SGI_Ingest_precedence_Enum.O);
}

static addCoeffDegree(builder:flatbuffers.Builder, coeffDegreeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, coeffDegreeOffset, 0);
}

static createCoeffDegreeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCoeffDegreeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCoeffOrder(builder:flatbuffers.Builder, coeffOrderOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, coeffOrderOffset, 0);
}

static createCoeffOrderVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCoeffOrderVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCtce(builder:flatbuffers.Builder, ctceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, ctceOffset, 0);
}

static createCtceVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCtceVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStce(builder:flatbuffers.Builder, stceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, stceOffset, 0);
}

static createStceVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStceVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCtci(builder:flatbuffers.Builder, ctciOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, ctciOffset, 0);
}

static createCtciVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCtciVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStci(builder:flatbuffers.Builder, stciOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, stciOffset, 0);
}

static createStciVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStciVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addE10(builder:flatbuffers.Builder, e10:number) {
  builder.addFieldFloat64(17, e10, 0.0);
}

static addE54(builder:flatbuffers.Builder, e54:number) {
  builder.addFieldFloat64(18, e54, 0.0);
}

static addS10(builder:flatbuffers.Builder, s10:number) {
  builder.addFieldFloat64(19, s10, 0.0);
}

static addS54(builder:flatbuffers.Builder, s54:number) {
  builder.addFieldFloat64(20, s54, 0.0);
}

static addM10(builder:flatbuffers.Builder, m10:number) {
  builder.addFieldFloat64(21, m10, 0.0);
}

static addM54(builder:flatbuffers.Builder, m54:number) {
  builder.addFieldFloat64(22, m54, 0.0);
}

static addY10(builder:flatbuffers.Builder, y10:number) {
  builder.addFieldFloat64(23, y10, 0.0);
}

static addY54(builder:flatbuffers.Builder, y54:number) {
  builder.addFieldFloat64(24, y54, 0.0);
}

static addF10(builder:flatbuffers.Builder, f10:number) {
  builder.addFieldFloat64(25, f10, 0.0);
}

static addF54(builder:flatbuffers.Builder, f54:number) {
  builder.addFieldFloat64(26, f54, 0.0);
}

static addF81(builder:flatbuffers.Builder, f81:number) {
  builder.addFieldFloat64(27, f81, 0.0);
}

static addAp(builder:flatbuffers.Builder, ap:number) {
  builder.addFieldFloat64(28, ap, 0.0);
}

static addApDuration(builder:flatbuffers.Builder, apDuration:number) {
  builder.addFieldInt32(29, apDuration, 0);
}

static addKIndex(builder:flatbuffers.Builder, kIndex:number) {
  builder.addFieldInt32(30, kIndex, 0);
}

static addKp(builder:flatbuffers.Builder, kp:number) {
  builder.addFieldFloat64(31, kp, 0.0);
}

static addKpDuration(builder:flatbuffers.Builder, kpDuration:number) {
  builder.addFieldInt32(32, kpDuration, 0);
}

static addGamma(builder:flatbuffers.Builder, gamma:number) {
  builder.addFieldInt32(33, gamma, 0);
}

static addDst(builder:flatbuffers.Builder, dst:number) {
  builder.addFieldFloat64(34, dst, 0.0);
}

static addDtc(builder:flatbuffers.Builder, dtc:number) {
  builder.addFieldFloat64(35, dtc, 0.0);
}

static addRbRegionCode(builder:flatbuffers.Builder, rbRegionCode:number) {
  builder.addFieldInt32(36, rbRegionCode, 0);
}

static addRbIndex(builder:flatbuffers.Builder, rbIndex:number) {
  builder.addFieldFloat64(37, rbIndex, 0.0);
}

static addNormFactor(builder:flatbuffers.Builder, normFactor:number) {
  builder.addFieldFloat64(38, normFactor, 0.0);
}

static addRbDuration(builder:flatbuffers.Builder, rbDuration:number) {
  builder.addFieldInt32(39, rbDuration, 0);
}

static addAnalyzerAttenuation(builder:flatbuffers.Builder, analyzerAttenuation:number) {
  builder.addFieldFloat64(40, analyzerAttenuation, 0.0);
}

static addObservedBaseline(builder:flatbuffers.Builder, observedBaselineOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, observedBaselineOffset, 0);
}

static createObservedBaselineVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startObservedBaselineVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFrequencies(builder:flatbuffers.Builder, frequenciesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, frequenciesOffset, 0);
}

static createFrequenciesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFrequenciesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPowers(builder:flatbuffers.Builder, powersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, powersOffset, 0);
}

static createPowersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPowersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, rawFileUriOffset, 0);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, transactionIdOffset, 0);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SGI_Ingest_dataMode_Enum) {
  builder.addFieldInt8(50, dataMode, SGI_Ingest_dataMode_Enum.REAL);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, createdByOffset, 0);
}

static endSGI_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSGI_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SGII');
}

static finishSizePrefixedSGI_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SGII', true);
}

static createSGI_Ingest(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, effectiveDateOffset:flatbuffers.Offset, sgiDateOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, state:SGI_Ingest_state_Enum, stationNameOffset:flatbuffers.Offset, idSensorOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, mode:number, precedence:SGI_Ingest_precedence_Enum, coeffDegreeOffset:flatbuffers.Offset, coeffOrderOffset:flatbuffers.Offset, ctceOffset:flatbuffers.Offset, stceOffset:flatbuffers.Offset, ctciOffset:flatbuffers.Offset, stciOffset:flatbuffers.Offset, e10:number, e54:number, s10:number, s54:number, m10:number, m54:number, y10:number, y54:number, f10:number, f54:number, f81:number, ap:number, apDuration:number, kIndex:number, kp:number, kpDuration:number, gamma:number, dst:number, dtc:number, rbRegionCode:number, rbIndex:number, normFactor:number, rbDuration:number, analyzerAttenuation:number, observedBaselineOffset:flatbuffers.Offset, frequenciesOffset:flatbuffers.Offset, powersOffset:flatbuffers.Offset, rawFileUriOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, tagsOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:SGI_Ingest_dataMode_Enum, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset):flatbuffers.Offset {
  SGI_Ingest.startSGI_Ingest(builder);
  SGI_Ingest.addId(builder, idOffset);
  SGI_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
  SGI_Ingest.addEffectiveDate(builder, effectiveDateOffset);
  SGI_Ingest.addSgiDate(builder, sgiDateOffset);
  SGI_Ingest.addType(builder, typeOffset);
  SGI_Ingest.addState(builder, state);
  SGI_Ingest.addStationName(builder, stationNameOffset);
  SGI_Ingest.addIdSensor(builder, idSensorOffset);
  SGI_Ingest.addOrigSensorId(builder, origSensorIdOffset);
  SGI_Ingest.addMode(builder, mode);
  SGI_Ingest.addPrecedence(builder, precedence);
  SGI_Ingest.addCoeffDegree(builder, coeffDegreeOffset);
  SGI_Ingest.addCoeffOrder(builder, coeffOrderOffset);
  SGI_Ingest.addCtce(builder, ctceOffset);
  SGI_Ingest.addStce(builder, stceOffset);
  SGI_Ingest.addCtci(builder, ctciOffset);
  SGI_Ingest.addStci(builder, stciOffset);
  SGI_Ingest.addE10(builder, e10);
  SGI_Ingest.addE54(builder, e54);
  SGI_Ingest.addS10(builder, s10);
  SGI_Ingest.addS54(builder, s54);
  SGI_Ingest.addM10(builder, m10);
  SGI_Ingest.addM54(builder, m54);
  SGI_Ingest.addY10(builder, y10);
  SGI_Ingest.addY54(builder, y54);
  SGI_Ingest.addF10(builder, f10);
  SGI_Ingest.addF54(builder, f54);
  SGI_Ingest.addF81(builder, f81);
  SGI_Ingest.addAp(builder, ap);
  SGI_Ingest.addApDuration(builder, apDuration);
  SGI_Ingest.addKIndex(builder, kIndex);
  SGI_Ingest.addKp(builder, kp);
  SGI_Ingest.addKpDuration(builder, kpDuration);
  SGI_Ingest.addGamma(builder, gamma);
  SGI_Ingest.addDst(builder, dst);
  SGI_Ingest.addDtc(builder, dtc);
  SGI_Ingest.addRbRegionCode(builder, rbRegionCode);
  SGI_Ingest.addRbIndex(builder, rbIndex);
  SGI_Ingest.addNormFactor(builder, normFactor);
  SGI_Ingest.addRbDuration(builder, rbDuration);
  SGI_Ingest.addAnalyzerAttenuation(builder, analyzerAttenuation);
  SGI_Ingest.addObservedBaseline(builder, observedBaselineOffset);
  SGI_Ingest.addFrequencies(builder, frequenciesOffset);
  SGI_Ingest.addPowers(builder, powersOffset);
  SGI_Ingest.addRawFileUri(builder, rawFileUriOffset);
  SGI_Ingest.addTransactionId(builder, transactionIdOffset);
  SGI_Ingest.addTags(builder, tagsOffset);
  SGI_Ingest.addSource(builder, sourceOffset);
  SGI_Ingest.addOrigin(builder, originOffset);
  SGI_Ingest.addOrigNetwork(builder, origNetworkOffset);
  SGI_Ingest.addDataMode(builder, dataMode);
  SGI_Ingest.addCreatedAt(builder, createdAtOffset);
  SGI_Ingest.addCreatedBy(builder, createdByOffset);
  return SGI_Ingest.endSGI_Ingest(builder);
}

unpack(): SGI_IngestT {
  return new SGI_IngestT(
    this.id(),
    this.classificationMarking(),
    this.effectiveDate(),
    this.sgiDate(),
    this.type(),
    this.state(),
    this.stationName(),
    this.idSensor(),
    this.origSensorId(),
    this.mode(),
    this.precedence(),
    this.bb!.createScalarList<string>(this.coeffDegree.bind(this), this.coeffDegree_Length()),
    this.bb!.createScalarList<string>(this.coeffOrder.bind(this), this.coeffOrder_Length()),
    this.bb!.createScalarList<string>(this.ctce.bind(this), this.ctce_Length()),
    this.bb!.createScalarList<string>(this.stce.bind(this), this.stce_Length()),
    this.bb!.createScalarList<string>(this.ctci.bind(this), this.ctci_Length()),
    this.bb!.createScalarList<string>(this.stci.bind(this), this.stci_Length()),
    this.e10(),
    this.e54(),
    this.s10(),
    this.s54(),
    this.m10(),
    this.m54(),
    this.y10(),
    this.y54(),
    this.f10(),
    this.f54(),
    this.f81(),
    this.ap(),
    this.apDuration(),
    this.kIndex(),
    this.kp(),
    this.kpDuration(),
    this.gamma(),
    this.dst(),
    this.dtc(),
    this.rbRegionCode(),
    this.rbIndex(),
    this.normFactor(),
    this.rbDuration(),
    this.analyzerAttenuation(),
    this.bb!.createScalarList<string>(this.observedBaseline.bind(this), this.observedBaseline_Length()),
    this.bb!.createScalarList<string>(this.frequencies.bind(this), this.frequencies_Length()),
    this.bb!.createScalarList<string>(this.powers.bind(this), this.powers_Length()),
    this.rawFileUri(),
    this.transactionId(),
    this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length()),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy()
  );
}


unpackTo(_o: SGI_IngestT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.effectiveDate = this.effectiveDate();
  _o.sgiDate = this.sgiDate();
  _o.type = this.type();
  _o.state = this.state();
  _o.stationName = this.stationName();
  _o.idSensor = this.idSensor();
  _o.origSensorId = this.origSensorId();
  _o.mode = this.mode();
  _o.precedence = this.precedence();
  _o.coeffDegree = this.bb!.createScalarList<string>(this.coeffDegree.bind(this), this.coeffDegree_Length());
  _o.coeffOrder = this.bb!.createScalarList<string>(this.coeffOrder.bind(this), this.coeffOrder_Length());
  _o.ctce = this.bb!.createScalarList<string>(this.ctce.bind(this), this.ctce_Length());
  _o.stce = this.bb!.createScalarList<string>(this.stce.bind(this), this.stce_Length());
  _o.ctci = this.bb!.createScalarList<string>(this.ctci.bind(this), this.ctci_Length());
  _o.stci = this.bb!.createScalarList<string>(this.stci.bind(this), this.stci_Length());
  _o.e10 = this.e10();
  _o.e54 = this.e54();
  _o.s10 = this.s10();
  _o.s54 = this.s54();
  _o.m10 = this.m10();
  _o.m54 = this.m54();
  _o.y10 = this.y10();
  _o.y54 = this.y54();
  _o.f10 = this.f10();
  _o.f54 = this.f54();
  _o.f81 = this.f81();
  _o.ap = this.ap();
  _o.apDuration = this.apDuration();
  _o.kIndex = this.kIndex();
  _o.kp = this.kp();
  _o.kpDuration = this.kpDuration();
  _o.gamma = this.gamma();
  _o.dst = this.dst();
  _o.dtc = this.dtc();
  _o.rbRegionCode = this.rbRegionCode();
  _o.rbIndex = this.rbIndex();
  _o.normFactor = this.normFactor();
  _o.rbDuration = this.rbDuration();
  _o.analyzerAttenuation = this.analyzerAttenuation();
  _o.observedBaseline = this.bb!.createScalarList<string>(this.observedBaseline.bind(this), this.observedBaseline_Length());
  _o.frequencies = this.bb!.createScalarList<string>(this.frequencies.bind(this), this.frequencies_Length());
  _o.powers = this.bb!.createScalarList<string>(this.powers.bind(this), this.powers_Length());
  _o.rawFileURI = this.rawFileUri();
  _o.transactionId = this.transactionId();
  _o.tags = this.bb!.createScalarList<string>(this.tags.bind(this), this.tags_Length());
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
}
}

export class SGI_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public effectiveDate: string|Uint8Array|null = null,
  public sgiDate: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public state: SGI_Ingest_state_Enum = SGI_Ingest_state_Enum.I,
  public stationName: string|Uint8Array|null = null,
  public idSensor: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public mode: number = 0,
  public precedence: SGI_Ingest_precedence_Enum = SGI_Ingest_precedence_Enum.O,
  public coeffDegree: (string)[] = [],
  public coeffOrder: (string)[] = [],
  public ctce: (string)[] = [],
  public stce: (string)[] = [],
  public ctci: (string)[] = [],
  public stci: (string)[] = [],
  public e10: number = 0.0,
  public e54: number = 0.0,
  public s10: number = 0.0,
  public s54: number = 0.0,
  public m10: number = 0.0,
  public m54: number = 0.0,
  public y10: number = 0.0,
  public y54: number = 0.0,
  public f10: number = 0.0,
  public f54: number = 0.0,
  public f81: number = 0.0,
  public ap: number = 0.0,
  public apDuration: number = 0,
  public kIndex: number = 0,
  public kp: number = 0.0,
  public kpDuration: number = 0,
  public gamma: number = 0,
  public dst: number = 0.0,
  public dtc: number = 0.0,
  public rbRegionCode: number = 0,
  public rbIndex: number = 0.0,
  public normFactor: number = 0.0,
  public rbDuration: number = 0,
  public analyzerAttenuation: number = 0.0,
  public observedBaseline: (string)[] = [],
  public frequencies: (string)[] = [],
  public powers: (string)[] = [],
  public rawFileURI: string|Uint8Array|null = null,
  public transactionId: string|Uint8Array|null = null,
  public tags: (string)[] = [],
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: SGI_Ingest_dataMode_Enum = SGI_Ingest_dataMode_Enum.REAL,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const effectiveDate = (this.effectiveDate !== null ? builder.createString(this.effectiveDate!) : 0);
  const sgiDate = (this.sgiDate !== null ? builder.createString(this.sgiDate!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const stationName = (this.stationName !== null ? builder.createString(this.stationName!) : 0);
  const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const coeffDegree = SGI_Ingest.createCoeffDegreeVector(builder, builder.createObjectOffsetList(this.coeffDegree));
  const coeffOrder = SGI_Ingest.createCoeffOrderVector(builder, builder.createObjectOffsetList(this.coeffOrder));
  const ctce = SGI_Ingest.createCtceVector(builder, builder.createObjectOffsetList(this.ctce));
  const stce = SGI_Ingest.createStceVector(builder, builder.createObjectOffsetList(this.stce));
  const ctci = SGI_Ingest.createCtciVector(builder, builder.createObjectOffsetList(this.ctci));
  const stci = SGI_Ingest.createStciVector(builder, builder.createObjectOffsetList(this.stci));
  const observedBaseline = SGI_Ingest.createObservedBaselineVector(builder, builder.createObjectOffsetList(this.observedBaseline));
  const frequencies = SGI_Ingest.createFrequenciesVector(builder, builder.createObjectOffsetList(this.frequencies));
  const powers = SGI_Ingest.createPowersVector(builder, builder.createObjectOffsetList(this.powers));
  const rawFileURI = (this.rawFileURI !== null ? builder.createString(this.rawFileURI!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const tags = SGI_Ingest.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);

  return SGI_Ingest.createSGI_Ingest(builder,
    id,
    classificationMarking,
    effectiveDate,
    sgiDate,
    type,
    this.state,
    stationName,
    idSensor,
    origSensorId,
    this.mode,
    this.precedence,
    coeffDegree,
    coeffOrder,
    ctce,
    stce,
    ctci,
    stci,
    this.e10,
    this.e54,
    this.s10,
    this.s54,
    this.m10,
    this.m54,
    this.y10,
    this.y54,
    this.f10,
    this.f54,
    this.f81,
    this.ap,
    this.apDuration,
    this.kIndex,
    this.kp,
    this.kpDuration,
    this.gamma,
    this.dst,
    this.dtc,
    this.rbRegionCode,
    this.rbIndex,
    this.normFactor,
    this.rbDuration,
    this.analyzerAttenuation,
    observedBaseline,
    frequencies,
    powers,
    rawFileURI,
    transactionId,
    tags,
    source,
    origin,
    origNetwork,
    this.dataMode,
    createdAt,
    createdBy
  );
}
}
