// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * /// Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
 */
export class LogisticsTransportationPlans_Ingest implements flatbuffers.IUnpackableObject<LogisticsTransportationPlans_IngestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LogisticsTransportationPlans_Ingest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLogisticsTransportationPlans_Ingest(bb:flatbuffers.ByteBuffer, obj?:LogisticsTransportationPlans_Ingest):LogisticsTransportationPlans_Ingest {
  return (obj || new LogisticsTransportationPlans_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLogisticsTransportationPlans_Ingest(bb:flatbuffers.ByteBuffer, obj?:LogisticsTransportationPlans_Ingest):LogisticsTransportationPlans_Ingest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LogisticsTransportationPlans_Ingest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('LOGI');
}

/**
 * System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
 * Example: /// Example: T89002
 * Constraints: Minimum length = 0, Maximum length = 10
 */
plansNumber():string|null
plansNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
plansNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates whether there have been changes to changes to ICAOs, estArrTime, or estDepTime since this Transportation Plan was last edited.
 * Example: /// Example: False
 * Constraints: No constraints specified.
 */
missionChange():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Defines the transporation plan as either a deployment or redeployment.
 * Example: /// Example: DEPLOY
 * Constraints: Minimum length = 0, Maximum length = 32
 */
planDefinition():string|null
planDefinition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
planDefinition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Transporation Coordination status code. Cancel, Send to APCC, working, agree, disapprove or blank.
 * Example: /// Example: N
 * Constraints: Minimum length = 1, Maximum length = 1
 */
statusCode():string|null
statusCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
statusCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The AMS username of the operator who alters the coordination status.  Automatically captured by the system.
 * Example: /// Example: SMITH, JOHN
 * Constraints: Minimum length = 0, Maximum length = 32
 */
coordinator():string|null
coordinator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
coordinator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The AMS user unit_id of the operator who alters the coordination status.  Automatically captured by the system from table AMS_USER.
 * Example: /// Example: TACC
 * Constraints: Minimum length = 0, Maximum length = 10
 */
coordinatorUnit():string|null
coordinatorUnit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
coordinatorUnit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The origin location.
 * Example: /// Example: KATL
 * Constraints: Minimum length = 0, Maximum length = 4
 */
originIcao():string|null
originIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ETD of the first segment, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-15T14:25:00.123Z
 * Constraints: No constraints specified.
 */
estDepTime():string|null
estDepTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
estDepTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ETA of the final segment, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-15T14:25:00.123Z
 * Constraints: No constraints specified.
 */
estArrTime():string|null
estArrTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
estArrTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Destination location ICAO.
 * Example: /// Example: YBCS
 * Constraints: Minimum length = 0, Maximum length = 4
 */
destinationIcao():string|null
destinationIcao(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
destinationIcao(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The identifier that represents a Logistics Master Record.
 * Example: /// Example: L62126
 * Constraints: Minimum length = 0, Maximum length = 10
 */
logisticMasterRecordId():string|null
logisticMasterRecordId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
logisticMasterRecordId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Contains the tail number displayed by GDSS2.
 * Example: /// Example: 99209
 * Constraints: Minimum length = 0, Maximum length = 7
 */
tpTailNumber():string|null
tpTailNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tpTailNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
 * Example: /// Example: C17A
 * Constraints: Minimum length = 0, Maximum length = 8
 */
tpAircraftMds():string|null
tpAircraftMds(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tpAircraftMds(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The major command for the current unit.
 * Example: /// Example: HQAMC
 * Constraints: Minimum length = 0, Maximum length = 250
 */
majcom():string|null
majcom(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
majcom(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Approximate time of arrival of final segement, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-14T20:37:00.123Z
 * Constraints: No constraints specified.
 */
approxArrTime():string|null
approxArrTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
approxArrTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Transportation plan duration, expressed in the format MMM:SS.
 * Example: /// Example: 086:20
 * Constraints: Minimum length = 0, Maximum length = 6
 */
duration():string|null
duration(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
duration(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Actual time of departure of first segment, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-14T19:37:00.123Z
 * Constraints: No constraints specified.
 */
actDepTime():string|null
actDepTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actDepTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * GC. LGTP_CLSD_DT.  GD2:  Date when the transportation plan was closed, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-14T20:37:00.123Z
 * Constraints: No constraints specified.
 */
closedDate():string|null
closedDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
closedDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * GC. LGTP_CANX_DT.  GD2: Date when the transportation plan was cancelled, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-14T20:37:00.123Z
 * Constraints: No constraints specified.
 */
cancelledDate():string|null
cancelledDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cancelledDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * These are the initial maintenance values entered based on the pilot descriptions or the official maintenance evaluation code.
 * Example: /// Example: NMCMU
 * Constraints: Minimum length = 0, Maximum length = 6
 */
aircraftStatus():string|null
aircraftStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
aircraftStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Transportation plan enroute stops.
 * Example: /// Example: 4
 * Constraints: No constraints specified.
 */
numEnrouteStops():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * GDSS2 uses an 8 character serial number to uniquely identify the aircraft and MDS combination. This is a portion of the full manufacturer serial number.
 * Example: /// Example: 9009209
 * Constraints: Minimum length = 0, Maximum length = 30
 */
serialNumber():string|null
serialNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
serialNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The number of transloads for this Transportation Plan.
 * Example: /// Example: 3
 * Constraints: No constraints specified.
 */
numTransLoads():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Last time transportation plan was updated, in ISO 8601 UTC format with millisecond precision.
 * Example: /// Example: 2023-07-14T20:37:00.123Z
 * Constraints: No constraints specified.
 */
lastChangedDate():string|null
lastChangedDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastChangedDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The transportation segments associated with this transportation plan.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
logisticsSegments(index: number):string
logisticsSegments(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
logisticsSegments(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

logisticsSegmentsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Remarks associated with this transportation plan.
 * Example: /// Example: No example provided.
 * Constraints: No constraints specified.
 */
logisticsTransportationPlansRemarks(index: number):string
logisticsTransportationPlansRemarks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
logisticsTransportationPlansRemarks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

logisticsTransportationPlansRemarksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startLogisticsTransportationPlans_Ingest(builder:flatbuffers.Builder) {
  builder.startObject(26);
}

static addPlansNumber(builder:flatbuffers.Builder, plansNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, plansNumberOffset, 0);
}

static addMissionChange(builder:flatbuffers.Builder, missionChange:boolean) {
  builder.addFieldInt8(1, +missionChange, +false);
}

static addPlanDefinition(builder:flatbuffers.Builder, planDefinitionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, planDefinitionOffset, 0);
}

static addStatusCode(builder:flatbuffers.Builder, statusCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, statusCodeOffset, 0);
}

static addCoordinator(builder:flatbuffers.Builder, coordinatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, coordinatorOffset, 0);
}

static addCoordinatorUnit(builder:flatbuffers.Builder, coordinatorUnitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, coordinatorUnitOffset, 0);
}

static addOriginIcao(builder:flatbuffers.Builder, originIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, originIcaoOffset, 0);
}

static addEstDepTime(builder:flatbuffers.Builder, estDepTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, estDepTimeOffset, 0);
}

static addEstArrTime(builder:flatbuffers.Builder, estArrTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, estArrTimeOffset, 0);
}

static addDestinationIcao(builder:flatbuffers.Builder, destinationIcaoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, destinationIcaoOffset, 0);
}

static addLogisticMasterRecordId(builder:flatbuffers.Builder, logisticMasterRecordIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, logisticMasterRecordIdOffset, 0);
}

static addTpTailNumber(builder:flatbuffers.Builder, tpTailNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, tpTailNumberOffset, 0);
}

static addTpAircraftMds(builder:flatbuffers.Builder, tpAircraftMdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, tpAircraftMdsOffset, 0);
}

static addMajcom(builder:flatbuffers.Builder, majcomOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, majcomOffset, 0);
}

static addApproxArrTime(builder:flatbuffers.Builder, approxArrTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, approxArrTimeOffset, 0);
}

static addDuration(builder:flatbuffers.Builder, durationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, durationOffset, 0);
}

static addActDepTime(builder:flatbuffers.Builder, actDepTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, actDepTimeOffset, 0);
}

static addClosedDate(builder:flatbuffers.Builder, closedDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, closedDateOffset, 0);
}

static addCancelledDate(builder:flatbuffers.Builder, cancelledDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, cancelledDateOffset, 0);
}

static addAircraftStatus(builder:flatbuffers.Builder, aircraftStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, aircraftStatusOffset, 0);
}

static addNumEnrouteStops(builder:flatbuffers.Builder, numEnrouteStops:number) {
  builder.addFieldInt32(20, numEnrouteStops, 0);
}

static addSerialNumber(builder:flatbuffers.Builder, serialNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, serialNumberOffset, 0);
}

static addNumTransLoads(builder:flatbuffers.Builder, numTransLoads:number) {
  builder.addFieldInt32(22, numTransLoads, 0);
}

static addLastChangedDate(builder:flatbuffers.Builder, lastChangedDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, lastChangedDateOffset, 0);
}

static addLogisticsSegments(builder:flatbuffers.Builder, logisticsSegmentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, logisticsSegmentsOffset, 0);
}

static createLogisticsSegmentsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLogisticsSegmentsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLogisticsTransportationPlansRemarks(builder:flatbuffers.Builder, logisticsTransportationPlansRemarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, logisticsTransportationPlansRemarksOffset, 0);
}

static createLogisticsTransportationPlansRemarksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLogisticsTransportationPlansRemarksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endLogisticsTransportationPlans_Ingest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLogisticsTransportationPlans_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI');
}

static finishSizePrefixedLogisticsTransportationPlans_IngestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'LOGI', true);
}

static createLogisticsTransportationPlans_Ingest(builder:flatbuffers.Builder, plansNumberOffset:flatbuffers.Offset, missionChange:boolean, planDefinitionOffset:flatbuffers.Offset, statusCodeOffset:flatbuffers.Offset, coordinatorOffset:flatbuffers.Offset, coordinatorUnitOffset:flatbuffers.Offset, originIcaoOffset:flatbuffers.Offset, estDepTimeOffset:flatbuffers.Offset, estArrTimeOffset:flatbuffers.Offset, destinationIcaoOffset:flatbuffers.Offset, logisticMasterRecordIdOffset:flatbuffers.Offset, tpTailNumberOffset:flatbuffers.Offset, tpAircraftMdsOffset:flatbuffers.Offset, majcomOffset:flatbuffers.Offset, approxArrTimeOffset:flatbuffers.Offset, durationOffset:flatbuffers.Offset, actDepTimeOffset:flatbuffers.Offset, closedDateOffset:flatbuffers.Offset, cancelledDateOffset:flatbuffers.Offset, aircraftStatusOffset:flatbuffers.Offset, numEnrouteStops:number, serialNumberOffset:flatbuffers.Offset, numTransLoads:number, lastChangedDateOffset:flatbuffers.Offset, logisticsSegmentsOffset:flatbuffers.Offset, logisticsTransportationPlansRemarksOffset:flatbuffers.Offset):flatbuffers.Offset {
  LogisticsTransportationPlans_Ingest.startLogisticsTransportationPlans_Ingest(builder);
  LogisticsTransportationPlans_Ingest.addPlansNumber(builder, plansNumberOffset);
  LogisticsTransportationPlans_Ingest.addMissionChange(builder, missionChange);
  LogisticsTransportationPlans_Ingest.addPlanDefinition(builder, planDefinitionOffset);
  LogisticsTransportationPlans_Ingest.addStatusCode(builder, statusCodeOffset);
  LogisticsTransportationPlans_Ingest.addCoordinator(builder, coordinatorOffset);
  LogisticsTransportationPlans_Ingest.addCoordinatorUnit(builder, coordinatorUnitOffset);
  LogisticsTransportationPlans_Ingest.addOriginIcao(builder, originIcaoOffset);
  LogisticsTransportationPlans_Ingest.addEstDepTime(builder, estDepTimeOffset);
  LogisticsTransportationPlans_Ingest.addEstArrTime(builder, estArrTimeOffset);
  LogisticsTransportationPlans_Ingest.addDestinationIcao(builder, destinationIcaoOffset);
  LogisticsTransportationPlans_Ingest.addLogisticMasterRecordId(builder, logisticMasterRecordIdOffset);
  LogisticsTransportationPlans_Ingest.addTpTailNumber(builder, tpTailNumberOffset);
  LogisticsTransportationPlans_Ingest.addTpAircraftMds(builder, tpAircraftMdsOffset);
  LogisticsTransportationPlans_Ingest.addMajcom(builder, majcomOffset);
  LogisticsTransportationPlans_Ingest.addApproxArrTime(builder, approxArrTimeOffset);
  LogisticsTransportationPlans_Ingest.addDuration(builder, durationOffset);
  LogisticsTransportationPlans_Ingest.addActDepTime(builder, actDepTimeOffset);
  LogisticsTransportationPlans_Ingest.addClosedDate(builder, closedDateOffset);
  LogisticsTransportationPlans_Ingest.addCancelledDate(builder, cancelledDateOffset);
  LogisticsTransportationPlans_Ingest.addAircraftStatus(builder, aircraftStatusOffset);
  LogisticsTransportationPlans_Ingest.addNumEnrouteStops(builder, numEnrouteStops);
  LogisticsTransportationPlans_Ingest.addSerialNumber(builder, serialNumberOffset);
  LogisticsTransportationPlans_Ingest.addNumTransLoads(builder, numTransLoads);
  LogisticsTransportationPlans_Ingest.addLastChangedDate(builder, lastChangedDateOffset);
  LogisticsTransportationPlans_Ingest.addLogisticsSegments(builder, logisticsSegmentsOffset);
  LogisticsTransportationPlans_Ingest.addLogisticsTransportationPlansRemarks(builder, logisticsTransportationPlansRemarksOffset);
  return LogisticsTransportationPlans_Ingest.endLogisticsTransportationPlans_Ingest(builder);
}

unpack(): LogisticsTransportationPlans_IngestT {
  return new LogisticsTransportationPlans_IngestT(
    this.plansNumber(),
    this.missionChange(),
    this.planDefinition(),
    this.statusCode(),
    this.coordinator(),
    this.coordinatorUnit(),
    this.originIcao(),
    this.estDepTime(),
    this.estArrTime(),
    this.destinationIcao(),
    this.logisticMasterRecordId(),
    this.tpTailNumber(),
    this.tpAircraftMds(),
    this.majcom(),
    this.approxArrTime(),
    this.duration(),
    this.actDepTime(),
    this.closedDate(),
    this.cancelledDate(),
    this.aircraftStatus(),
    this.numEnrouteStops(),
    this.serialNumber(),
    this.numTransLoads(),
    this.lastChangedDate(),
    this.bb!.createScalarList<string>(this.logisticsSegments.bind(this), this.logisticsSegments_Length()),
    this.bb!.createScalarList<string>(this.logisticsTransportationPlansRemarks.bind(this), this.logisticsTransportationPlansRemarks_Length())
  );
}


unpackTo(_o: LogisticsTransportationPlans_IngestT): void {
  _o.plansNumber = this.plansNumber();
  _o.missionChange = this.missionChange();
  _o.planDefinition = this.planDefinition();
  _o.statusCode = this.statusCode();
  _o.coordinator = this.coordinator();
  _o.coordinatorUnit = this.coordinatorUnit();
  _o.originICAO = this.originIcao();
  _o.estDepTime = this.estDepTime();
  _o.estArrTime = this.estArrTime();
  _o.destinationICAO = this.destinationIcao();
  _o.logisticMasterRecordId = this.logisticMasterRecordId();
  _o.tpTailNumber = this.tpTailNumber();
  _o.tpAircraftMDS = this.tpAircraftMds();
  _o.majcom = this.majcom();
  _o.approxArrTime = this.approxArrTime();
  _o.duration = this.duration();
  _o.actDepTime = this.actDepTime();
  _o.closedDate = this.closedDate();
  _o.cancelledDate = this.cancelledDate();
  _o.aircraftStatus = this.aircraftStatus();
  _o.numEnrouteStops = this.numEnrouteStops();
  _o.serialNumber = this.serialNumber();
  _o.numTransLoads = this.numTransLoads();
  _o.lastChangedDate = this.lastChangedDate();
  _o.logisticsSegments = this.bb!.createScalarList<string>(this.logisticsSegments.bind(this), this.logisticsSegments_Length());
  _o.logisticsTransportationPlansRemarks = this.bb!.createScalarList<string>(this.logisticsTransportationPlansRemarks.bind(this), this.logisticsTransportationPlansRemarks_Length());
}
}

export class LogisticsTransportationPlans_IngestT implements flatbuffers.IGeneratedObject {
constructor(
  public plansNumber: string|Uint8Array|null = null,
  public missionChange: boolean = false,
  public planDefinition: string|Uint8Array|null = null,
  public statusCode: string|Uint8Array|null = null,
  public coordinator: string|Uint8Array|null = null,
  public coordinatorUnit: string|Uint8Array|null = null,
  public originICAO: string|Uint8Array|null = null,
  public estDepTime: string|Uint8Array|null = null,
  public estArrTime: string|Uint8Array|null = null,
  public destinationICAO: string|Uint8Array|null = null,
  public logisticMasterRecordId: string|Uint8Array|null = null,
  public tpTailNumber: string|Uint8Array|null = null,
  public tpAircraftMDS: string|Uint8Array|null = null,
  public majcom: string|Uint8Array|null = null,
  public approxArrTime: string|Uint8Array|null = null,
  public duration: string|Uint8Array|null = null,
  public actDepTime: string|Uint8Array|null = null,
  public closedDate: string|Uint8Array|null = null,
  public cancelledDate: string|Uint8Array|null = null,
  public aircraftStatus: string|Uint8Array|null = null,
  public numEnrouteStops: number = 0,
  public serialNumber: string|Uint8Array|null = null,
  public numTransLoads: number = 0,
  public lastChangedDate: string|Uint8Array|null = null,
  public logisticsSegments: (string)[] = [],
  public logisticsTransportationPlansRemarks: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const plansNumber = (this.plansNumber !== null ? builder.createString(this.plansNumber!) : 0);
  const planDefinition = (this.planDefinition !== null ? builder.createString(this.planDefinition!) : 0);
  const statusCode = (this.statusCode !== null ? builder.createString(this.statusCode!) : 0);
  const coordinator = (this.coordinator !== null ? builder.createString(this.coordinator!) : 0);
  const coordinatorUnit = (this.coordinatorUnit !== null ? builder.createString(this.coordinatorUnit!) : 0);
  const originICAO = (this.originICAO !== null ? builder.createString(this.originICAO!) : 0);
  const estDepTime = (this.estDepTime !== null ? builder.createString(this.estDepTime!) : 0);
  const estArrTime = (this.estArrTime !== null ? builder.createString(this.estArrTime!) : 0);
  const destinationICAO = (this.destinationICAO !== null ? builder.createString(this.destinationICAO!) : 0);
  const logisticMasterRecordId = (this.logisticMasterRecordId !== null ? builder.createString(this.logisticMasterRecordId!) : 0);
  const tpTailNumber = (this.tpTailNumber !== null ? builder.createString(this.tpTailNumber!) : 0);
  const tpAircraftMDS = (this.tpAircraftMDS !== null ? builder.createString(this.tpAircraftMDS!) : 0);
  const majcom = (this.majcom !== null ? builder.createString(this.majcom!) : 0);
  const approxArrTime = (this.approxArrTime !== null ? builder.createString(this.approxArrTime!) : 0);
  const duration = (this.duration !== null ? builder.createString(this.duration!) : 0);
  const actDepTime = (this.actDepTime !== null ? builder.createString(this.actDepTime!) : 0);
  const closedDate = (this.closedDate !== null ? builder.createString(this.closedDate!) : 0);
  const cancelledDate = (this.cancelledDate !== null ? builder.createString(this.cancelledDate!) : 0);
  const aircraftStatus = (this.aircraftStatus !== null ? builder.createString(this.aircraftStatus!) : 0);
  const serialNumber = (this.serialNumber !== null ? builder.createString(this.serialNumber!) : 0);
  const lastChangedDate = (this.lastChangedDate !== null ? builder.createString(this.lastChangedDate!) : 0);
  const logisticsSegments = LogisticsTransportationPlans_Ingest.createLogisticsSegmentsVector(builder, builder.createObjectOffsetList(this.logisticsSegments));
  const logisticsTransportationPlansRemarks = LogisticsTransportationPlans_Ingest.createLogisticsTransportationPlansRemarksVector(builder, builder.createObjectOffsetList(this.logisticsTransportationPlansRemarks));

  return LogisticsTransportationPlans_Ingest.createLogisticsTransportationPlans_Ingest(builder,
    plansNumber,
    this.missionChange,
    planDefinition,
    statusCode,
    coordinator,
    coordinatorUnit,
    originICAO,
    estDepTime,
    estArrTime,
    destinationICAO,
    logisticMasterRecordId,
    tpTailNumber,
    tpAircraftMDS,
    majcom,
    approxArrTime,
    duration,
    actDepTime,
    closedDate,
    cancelledDate,
    aircraftStatus,
    this.numEnrouteStops,
    serialNumber,
    this.numTransLoads,
    lastChangedDate,
    logisticsSegments,
    logisticsTransportationPlansRemarks
  );
}
}
