// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SiteRemark_Full_dataMode_Enum } from './SiteRemark_Full_dataMode_Enum.js';


/**
 * /// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
 */
export class SiteRemark_Full implements flatbuffers.IUnpackableObject<SiteRemark_FullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SiteRemark_Full {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSiteRemark_Full(bb:flatbuffers.ByteBuffer, obj?:SiteRemark_Full):SiteRemark_Full {
  return (obj || new SiteRemark_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSiteRemark_Full(bb:flatbuffers.ByteBuffer, obj?:SiteRemark_Full):SiteRemark_Full {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SiteRemark_Full()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SITE');
}

/**
 * Unique identifier of the record, auto-generated by the system.
 * Example: /// Example: 5000a3ef-8e39-2551-80f1-b3cd1895fe7b
 * Constraints: Minimum length = 1, Maximum length = 36
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 * Example: /// Example: U
 * Constraints: Minimum length = 1, Maximum length = 128
 */
classificationMarking():string|null
classificationMarking(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationMarking(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The ID of the site to which this remark applies.
 * Example: /// Example: SITE-ID
 * Constraints: Minimum length = 1, Maximum length = 36
 */
idSite():string|null
idSite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idSite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of the Site Remark record from the originating system.
 * Example: /// Example: 123456ABC
 * Constraints: Minimum length = 0, Maximum length = 36
 */
origRmkId():string|null
origRmkId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origRmkId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the remark.
 * Example: /// Example: Remark name
 * Constraints: Minimum length = 0, Maximum length = 64
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The remark type (e.g. Caution, Information, Misc, Restriction, etc.).
 * Example: /// Example: Restriction
 * Constraints: Minimum length = 0, Maximum length = 64
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The text of the remark.
 * Example: /// Example: This is a remark
 * Constraints: Minimum length = 1, Maximum length = 1024
 */
text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The remark type identifier. 
 * For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).
 * Example: /// Example: M
 * Constraints: Minimum length = 0, Maximum length = 16
 */
code():string|null
code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time the row was created in the database, auto-populated by the system.
 * Example: /// Example: 2022-01-01T16:00:00.123Z
 * Constraints: No constraints specified.
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Application user who created the row in the database, auto-populated by the system.
 * Example: /// Example: some.user
 * Constraints: Minimum length = 1, Maximum length = 64
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data.
 * Example: /// Example: Bluestaq
 * Constraints: Minimum length = 1, Maximum length = 64
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
 * Example: /// Example: THIRD_PARTY_DATASOURCE
 * Constraints: Minimum length = 0, Maximum length = 64
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originating source network on which this record was created, auto-populated by the system.
 * Example: /// Example: OPS1
 * Constraints: Minimum length = 0, Maximum length = 32
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
 * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
 * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
 * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
 * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
 * Example: /// Example: TEST
 * Constraints: Minimum length = 1, Maximum length = 32
 */
dataMode():SiteRemark_Full_dataMode_Enum {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SiteRemark_Full_dataMode_Enum.REAL;
}

static startSiteRemark_Full(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassificationMarking(builder:flatbuffers.Builder, classificationMarkingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationMarkingOffset, 0);
}

static addIdSite(builder:flatbuffers.Builder, idSiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idSiteOffset, 0);
}

static addOrigRmkId(builder:flatbuffers.Builder, origRmkIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, origRmkIdOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, nameOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, typeOffset, 0);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, textOffset, 0);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, codeOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, createdByOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, originOffset, 0);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, origNetworkOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataMode:SiteRemark_Full_dataMode_Enum) {
  builder.addFieldInt8(13, dataMode, SiteRemark_Full_dataMode_Enum.REAL);
}

static endSiteRemark_Full(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSiteRemark_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SITE');
}

static finishSizePrefixedSiteRemark_FullBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SITE', true);
}

static createSiteRemark_Full(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, classificationMarkingOffset:flatbuffers.Offset, idSiteOffset:flatbuffers.Offset, origRmkIdOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, textOffset:flatbuffers.Offset, codeOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, origNetworkOffset:flatbuffers.Offset, dataMode:SiteRemark_Full_dataMode_Enum):flatbuffers.Offset {
  SiteRemark_Full.startSiteRemark_Full(builder);
  SiteRemark_Full.addId(builder, idOffset);
  SiteRemark_Full.addClassificationMarking(builder, classificationMarkingOffset);
  SiteRemark_Full.addIdSite(builder, idSiteOffset);
  SiteRemark_Full.addOrigRmkId(builder, origRmkIdOffset);
  SiteRemark_Full.addName(builder, nameOffset);
  SiteRemark_Full.addType(builder, typeOffset);
  SiteRemark_Full.addText(builder, textOffset);
  SiteRemark_Full.addCode(builder, codeOffset);
  SiteRemark_Full.addCreatedAt(builder, createdAtOffset);
  SiteRemark_Full.addCreatedBy(builder, createdByOffset);
  SiteRemark_Full.addSource(builder, sourceOffset);
  SiteRemark_Full.addOrigin(builder, originOffset);
  SiteRemark_Full.addOrigNetwork(builder, origNetworkOffset);
  SiteRemark_Full.addDataMode(builder, dataMode);
  return SiteRemark_Full.endSiteRemark_Full(builder);
}

unpack(): SiteRemark_FullT {
  return new SiteRemark_FullT(
    this.id(),
    this.classificationMarking(),
    this.idSite(),
    this.origRmkId(),
    this.name(),
    this.type(),
    this.text(),
    this.code(),
    this.createdAt(),
    this.createdBy(),
    this.source(),
    this.origin(),
    this.origNetwork(),
    this.dataMode()
  );
}


unpackTo(_o: SiteRemark_FullT): void {
  _o.id = this.id();
  _o.classificationMarking = this.classificationMarking();
  _o.idSite = this.idSite();
  _o.origRmkId = this.origRmkId();
  _o.name = this.name();
  _o.type = this.type();
  _o.text = this.text();
  _o.code = this.code();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.origNetwork = this.origNetwork();
  _o.dataMode = this.dataMode();
}
}

export class SiteRemark_FullT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public classificationMarking: string|Uint8Array|null = null,
  public idSite: string|Uint8Array|null = null,
  public origRmkId: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public text: string|Uint8Array|null = null,
  public code: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public origNetwork: string|Uint8Array|null = null,
  public dataMode: SiteRemark_Full_dataMode_Enum = SiteRemark_Full_dataMode_Enum.REAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const classificationMarking = (this.classificationMarking !== null ? builder.createString(this.classificationMarking!) : 0);
  const idSite = (this.idSite !== null ? builder.createString(this.idSite!) : 0);
  const origRmkId = (this.origRmkId !== null ? builder.createString(this.origRmkId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const text = (this.text !== null ? builder.createString(this.text!) : 0);
  const code = (this.code !== null ? builder.createString(this.code!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);

  return SiteRemark_Full.createSiteRemark_Full(builder,
    id,
    classificationMarking,
    idSite,
    origRmkId,
    name,
    type,
    text,
    code,
    createdAt,
    createdBy,
    source,
    origin,
    origNetwork,
    this.dataMode
  );
}
}
