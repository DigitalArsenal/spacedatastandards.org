// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Time System
public struct TIM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static TIM GetRootAsTIM(ByteBuffer _bb) { return GetRootAsTIM(_bb, new TIM()); }
  public static TIM GetRootAsTIM(ByteBuffer _bb, TIM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool TIMBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$TIM"); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TIM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public timeSystem TIME_SYSTEM { get { int o = __p.__offset(4); return o != 0 ? (timeSystem)__p.bb.GetSbyte(o + __p.bb_pos) : timeSystem.GMST; } }

  public static Offset<TIM> CreateTIM(FlatBufferBuilder builder,
      timeSystem TIME_SYSTEM = timeSystem.GMST) {
    builder.StartTable(1);
    TIM.AddTIME_SYSTEM(builder, TIME_SYSTEM);
    return TIM.EndTIM(builder);
  }

  public static void StartTIM(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTIME_SYSTEM(FlatBufferBuilder builder, timeSystem TIME_SYSTEM) { builder.AddSbyte(0, (sbyte)TIME_SYSTEM, 0); }
  public static Offset<TIM> EndTIM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TIM>(o);
  }
  public static void FinishTIMBuffer(FlatBufferBuilder builder, Offset<TIM> offset) { builder.Finish(offset.Value, "$TIM"); }
  public static void FinishSizePrefixedTIMBuffer(FlatBufferBuilder builder, Offset<TIM> offset) { builder.FinishSizePrefixed(offset.Value, "$TIM"); }
  public TIMT UnPack() {
    var _o = new TIMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TIMT _o) {
    _o.TIME_SYSTEM = this.TIME_SYSTEM;
  }
  public static Offset<TIM> Pack(FlatBufferBuilder builder, TIMT _o) {
    if (_o == null) return default(Offset<TIM>);
    return CreateTIM(
      builder,
      _o.TIME_SYSTEM);
  }
}

public class TIMT
{
  public timeSystem TIME_SYSTEM { get; set; }

  public TIMT() {
    this.TIME_SYSTEM = timeSystem.GMST;
  }
  public static TIMT DeserializeFromBinary(byte[] fbBuffer) {
    return TIM.GetRootAsTIM(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TIM.FinishTIMBuffer(fbb, TIM.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

