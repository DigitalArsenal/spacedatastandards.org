// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Basic information about an organization
public struct Organization : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static Organization GetRootAsOrganization(ByteBuffer _bb) { return GetRootAsOrganization(_bb, new Organization()); }
  public static Organization GetRootAsOrganization(ByteBuffer _bb, Organization obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Organization __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Common name of the organization
  public string NAME { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNAMEBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNAMEBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNAMEArray() { return __p.__vector_as_array<byte>(4); }
  /// Legal name of the organization
  public string LEGAL_NAME { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLEGAL_NAMEBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetLEGAL_NAMEBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetLEGAL_NAMEArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<Organization> CreateOrganization(FlatBufferBuilder builder,
      StringOffset NAMEOffset = default(StringOffset),
      StringOffset LEGAL_NAMEOffset = default(StringOffset)) {
    builder.StartTable(2);
    Organization.AddLEGAL_NAME(builder, LEGAL_NAMEOffset);
    Organization.AddNAME(builder, NAMEOffset);
    return Organization.EndOrganization(builder);
  }

  public static void StartOrganization(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddNAME(FlatBufferBuilder builder, StringOffset NAMEOffset) { builder.AddOffset(0, NAMEOffset.Value, 0); }
  public static void AddLEGAL_NAME(FlatBufferBuilder builder, StringOffset LEGAL_NAMEOffset) { builder.AddOffset(1, LEGAL_NAMEOffset.Value, 0); }
  public static Offset<Organization> EndOrganization(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Organization>(o);
  }
  public OrganizationT UnPack() {
    var _o = new OrganizationT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OrganizationT _o) {
    _o.NAME = this.NAME;
    _o.LEGAL_NAME = this.LEGAL_NAME;
  }
  public static Offset<Organization> Pack(FlatBufferBuilder builder, OrganizationT _o) {
    if (_o == null) return default(Offset<Organization>);
    var _NAME = _o.NAME == null ? default(StringOffset) : builder.CreateString(_o.NAME);
    var _LEGAL_NAME = _o.LEGAL_NAME == null ? default(StringOffset) : builder.CreateString(_o.LEGAL_NAME);
    return CreateOrganization(
      builder,
      _NAME,
      _LEGAL_NAME);
  }
}

public class OrganizationT
{
  public string NAME { get; set; }
  public string LEGAL_NAME { get; set; }

  public OrganizationT() {
    this.NAME = null;
    this.LEGAL_NAME = null;
  }
}

