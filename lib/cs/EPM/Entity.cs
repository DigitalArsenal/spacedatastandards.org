// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

/// Union type for Entity, which can be either a Person or an Organization
public enum Entity : byte
{
  NONE = 0,
  Person = 1,
  Organization = 2,
};

public class EntityUnion {
  public Entity Type { get; set; }
  public object Value { get; set; }

  public EntityUnion() {
    this.Type = Entity.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public PersonT AsPerson() { return this.As<PersonT>(); }
  public static EntityUnion FromPerson(PersonT _person) { return new EntityUnion{ Type = Entity.Person, Value = _person }; }
  public OrganizationT AsOrganization() { return this.As<OrganizationT>(); }
  public static EntityUnion FromOrganization(OrganizationT _organization) { return new EntityUnion{ Type = Entity.Organization, Value = _organization }; }

  public static int Pack(Google.FlatBuffers.FlatBufferBuilder builder, EntityUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case Entity.Person: return Person.Pack(builder, _o.AsPerson()).Value;
      case Entity.Organization: return Organization.Pack(builder, _o.AsOrganization()).Value;
    }
  }
}

