// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

/// Union for specific attributes, distinguishing between Person and Organization
public enum SpecificAttributes : byte
{
  NONE = 0,
  PersonAttributes = 1,
  OrganizationAttributes = 2,
};

public class SpecificAttributesUnion {
  public SpecificAttributes Type { get; set; }
  public object Value { get; set; }

  public SpecificAttributesUnion() {
    this.Type = SpecificAttributes.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public PersonAttributesT AsPersonAttributes() { return this.As<PersonAttributesT>(); }
  public static SpecificAttributesUnion FromPersonAttributes(PersonAttributesT _personattributes) { return new SpecificAttributesUnion{ Type = SpecificAttributes.PersonAttributes, Value = _personattributes }; }
  public OrganizationAttributesT AsOrganizationAttributes() { return this.As<OrganizationAttributesT>(); }
  public static SpecificAttributesUnion FromOrganizationAttributes(OrganizationAttributesT _organizationattributes) { return new SpecificAttributesUnion{ Type = SpecificAttributes.OrganizationAttributes, Value = _organizationattributes }; }

  public static int Pack(Google.FlatBuffers.FlatBufferBuilder builder, SpecificAttributesUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case SpecificAttributes.PersonAttributes: return PersonAttributes.Pack(builder, _o.AsPersonAttributes()).Value;
      case SpecificAttributes.OrganizationAttributes: return OrganizationAttributes.Pack(builder, _o.AsOrganizationAttributes()).Value;
    }
  }
}

