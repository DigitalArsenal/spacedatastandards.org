// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Represents a Distinguished Name composed of DNComponents
public struct DistinguishedName : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static DistinguishedName GetRootAsDistinguishedName(ByteBuffer _bb) { return GetRootAsDistinguishedName(_bb, new DistinguishedName()); }
  public static DistinguishedName GetRootAsDistinguishedName(ByteBuffer _bb, DistinguishedName obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DistinguishedName __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The sequence of components making up the DN
  public DNComponent? COMPONENTS(int j) { int o = __p.__offset(4); return o != 0 ? (DNComponent?)(new DNComponent()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int COMPONENTSLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<DistinguishedName> CreateDistinguishedName(FlatBufferBuilder builder,
      VectorOffset COMPONENTSOffset = default(VectorOffset)) {
    builder.StartTable(1);
    DistinguishedName.AddCOMPONENTS(builder, COMPONENTSOffset);
    return DistinguishedName.EndDistinguishedName(builder);
  }

  public static void StartDistinguishedName(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddCOMPONENTS(FlatBufferBuilder builder, VectorOffset COMPONENTSOffset) { builder.AddOffset(0, COMPONENTSOffset.Value, 0); }
  public static VectorOffset CreateCOMPONENTSVector(FlatBufferBuilder builder, Offset<DNComponent>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCOMPONENTSVectorBlock(FlatBufferBuilder builder, Offset<DNComponent>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOMPONENTSVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<DNComponent>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOMPONENTSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<DNComponent>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCOMPONENTSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<DistinguishedName> EndDistinguishedName(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DistinguishedName>(o);
  }
  public DistinguishedNameT UnPack() {
    var _o = new DistinguishedNameT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DistinguishedNameT _o) {
    _o.COMPONENTS = new List<DNComponentT>();
    for (var _j = 0; _j < this.COMPONENTSLength; ++_j) {_o.COMPONENTS.Add(this.COMPONENTS(_j).HasValue ? this.COMPONENTS(_j).Value.UnPack() : null);}
  }
  public static Offset<DistinguishedName> Pack(FlatBufferBuilder builder, DistinguishedNameT _o) {
    if (_o == null) return default(Offset<DistinguishedName>);
    var _COMPONENTS = default(VectorOffset);
    if (_o.COMPONENTS != null) {
      var __COMPONENTS = new Offset<DNComponent>[_o.COMPONENTS.Count];
      for (var _j = 0; _j < __COMPONENTS.Length; ++_j) { __COMPONENTS[_j] = DNComponent.Pack(builder, _o.COMPONENTS[_j]); }
      _COMPONENTS = CreateCOMPONENTSVector(builder, __COMPONENTS);
    }
    return CreateDistinguishedName(
      builder,
      _COMPONENTS);
  }
}

public class DistinguishedNameT
{
  public List<DNComponentT> COMPONENTS { get; set; }

  public DistinguishedNameT() {
    this.COMPONENTS = null;
  }
}

