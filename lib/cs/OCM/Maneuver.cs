// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Maneuver : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Maneuver GetRootAsManeuver(ByteBuffer _bb) { return GetRootAsManeuver(_bb, new Maneuver()); }
  public static Maneuver GetRootAsManeuver(ByteBuffer _bb, Maneuver obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Maneuver __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier for the maneuver.
  public string MAN_ID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMAN_IDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetMAN_IDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetMAN_IDArray() { return __p.__vector_as_array<byte>(4); }
  /// Basis of the maneuver plan (e.g., planned, predicted, estimated).
  public string MAN_BASIS { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMAN_BASISBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMAN_BASISBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMAN_BASISArray() { return __p.__vector_as_array<byte>(6); }
  /// Identifier of the maneuver device.
  public string MAN_DEVICE_ID { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMAN_DEVICE_IDBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMAN_DEVICE_IDBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMAN_DEVICE_IDArray() { return __p.__vector_as_array<byte>(8); }
  /// Identifier of the previous maneuver.
  public string MAN_PREV_ID { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMAN_PREV_IDBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMAN_PREV_IDBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMAN_PREV_IDArray() { return __p.__vector_as_array<byte>(10); }
  /// Purpose of the maneuver.
  public string MAN_PURPOSE { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMAN_PURPOSEBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMAN_PURPOSEBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMAN_PURPOSEArray() { return __p.__vector_as_array<byte>(12); }
  /// Reference frame for the maneuver data.
  public string MAN_REF_FRAME { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMAN_REF_FRAMEBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetMAN_REF_FRAMEBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetMAN_REF_FRAMEArray() { return __p.__vector_as_array<byte>(14); }
  /// Epoch of the maneuver reference frame.
  public string MAN_FRAME_EPOCH { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMAN_FRAME_EPOCHBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMAN_FRAME_EPOCHBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMAN_FRAME_EPOCHArray() { return __p.__vector_as_array<byte>(16); }
  /// Type of maneuver (e.g., IMPULSIVE, FINITE).
  public string MAN_TYPE { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMAN_TYPEBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetMAN_TYPEBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetMAN_TYPEArray() { return __p.__vector_as_array<byte>(18); }
  /// Start epoch of the maneuver.
  public string MAN_EPOCH_START { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMAN_EPOCH_STARTBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetMAN_EPOCH_STARTBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetMAN_EPOCH_STARTArray() { return __p.__vector_as_array<byte>(20); }
  /// Duration of the maneuver.
  public double MAN_DURATION { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Units for the maneuver data values.
  public string MAN_UNITS(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MAN_UNITSLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Data associated with the maneuver.
  public string DATA(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DATALength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Comments related to the maneuver.
  public string MAN_COMMENT(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MAN_COMMENTLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Maneuver> CreateManeuver(FlatBufferBuilder builder,
      StringOffset MAN_IDOffset = default(StringOffset),
      StringOffset MAN_BASISOffset = default(StringOffset),
      StringOffset MAN_DEVICE_IDOffset = default(StringOffset),
      StringOffset MAN_PREV_IDOffset = default(StringOffset),
      StringOffset MAN_PURPOSEOffset = default(StringOffset),
      StringOffset MAN_REF_FRAMEOffset = default(StringOffset),
      StringOffset MAN_FRAME_EPOCHOffset = default(StringOffset),
      StringOffset MAN_TYPEOffset = default(StringOffset),
      StringOffset MAN_EPOCH_STARTOffset = default(StringOffset),
      double MAN_DURATION = 0.0,
      VectorOffset MAN_UNITSOffset = default(VectorOffset),
      VectorOffset DATAOffset = default(VectorOffset),
      VectorOffset MAN_COMMENTOffset = default(VectorOffset)) {
    builder.StartTable(13);
    Maneuver.AddMAN_DURATION(builder, MAN_DURATION);
    Maneuver.AddMAN_COMMENT(builder, MAN_COMMENTOffset);
    Maneuver.AddDATA(builder, DATAOffset);
    Maneuver.AddMAN_UNITS(builder, MAN_UNITSOffset);
    Maneuver.AddMAN_EPOCH_START(builder, MAN_EPOCH_STARTOffset);
    Maneuver.AddMAN_TYPE(builder, MAN_TYPEOffset);
    Maneuver.AddMAN_FRAME_EPOCH(builder, MAN_FRAME_EPOCHOffset);
    Maneuver.AddMAN_REF_FRAME(builder, MAN_REF_FRAMEOffset);
    Maneuver.AddMAN_PURPOSE(builder, MAN_PURPOSEOffset);
    Maneuver.AddMAN_PREV_ID(builder, MAN_PREV_IDOffset);
    Maneuver.AddMAN_DEVICE_ID(builder, MAN_DEVICE_IDOffset);
    Maneuver.AddMAN_BASIS(builder, MAN_BASISOffset);
    Maneuver.AddMAN_ID(builder, MAN_IDOffset);
    return Maneuver.EndManeuver(builder);
  }

  public static void StartManeuver(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddMAN_ID(FlatBufferBuilder builder, StringOffset MAN_IDOffset) { builder.AddOffset(0, MAN_IDOffset.Value, 0); }
  public static void AddMAN_BASIS(FlatBufferBuilder builder, StringOffset MAN_BASISOffset) { builder.AddOffset(1, MAN_BASISOffset.Value, 0); }
  public static void AddMAN_DEVICE_ID(FlatBufferBuilder builder, StringOffset MAN_DEVICE_IDOffset) { builder.AddOffset(2, MAN_DEVICE_IDOffset.Value, 0); }
  public static void AddMAN_PREV_ID(FlatBufferBuilder builder, StringOffset MAN_PREV_IDOffset) { builder.AddOffset(3, MAN_PREV_IDOffset.Value, 0); }
  public static void AddMAN_PURPOSE(FlatBufferBuilder builder, StringOffset MAN_PURPOSEOffset) { builder.AddOffset(4, MAN_PURPOSEOffset.Value, 0); }
  public static void AddMAN_REF_FRAME(FlatBufferBuilder builder, StringOffset MAN_REF_FRAMEOffset) { builder.AddOffset(5, MAN_REF_FRAMEOffset.Value, 0); }
  public static void AddMAN_FRAME_EPOCH(FlatBufferBuilder builder, StringOffset MAN_FRAME_EPOCHOffset) { builder.AddOffset(6, MAN_FRAME_EPOCHOffset.Value, 0); }
  public static void AddMAN_TYPE(FlatBufferBuilder builder, StringOffset MAN_TYPEOffset) { builder.AddOffset(7, MAN_TYPEOffset.Value, 0); }
  public static void AddMAN_EPOCH_START(FlatBufferBuilder builder, StringOffset MAN_EPOCH_STARTOffset) { builder.AddOffset(8, MAN_EPOCH_STARTOffset.Value, 0); }
  public static void AddMAN_DURATION(FlatBufferBuilder builder, double MAN_DURATION) { builder.AddDouble(9, MAN_DURATION, 0.0); }
  public static void AddMAN_UNITS(FlatBufferBuilder builder, VectorOffset MAN_UNITSOffset) { builder.AddOffset(10, MAN_UNITSOffset.Value, 0); }
  public static VectorOffset CreateMAN_UNITSVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMAN_UNITSVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMAN_UNITSVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMAN_UNITSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMAN_UNITSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDATA(FlatBufferBuilder builder, VectorOffset DATAOffset) { builder.AddOffset(11, DATAOffset.Value, 0); }
  public static VectorOffset CreateDATAVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDATAVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDATAVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDATAVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDATAVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMAN_COMMENT(FlatBufferBuilder builder, VectorOffset MAN_COMMENTOffset) { builder.AddOffset(12, MAN_COMMENTOffset.Value, 0); }
  public static VectorOffset CreateMAN_COMMENTVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMAN_COMMENTVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMAN_COMMENTVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMAN_COMMENTVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMAN_COMMENTVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Maneuver> EndManeuver(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Maneuver>(o);
  }
  public ManeuverT UnPack() {
    var _o = new ManeuverT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ManeuverT _o) {
    _o.MAN_ID = this.MAN_ID;
    _o.MAN_BASIS = this.MAN_BASIS;
    _o.MAN_DEVICE_ID = this.MAN_DEVICE_ID;
    _o.MAN_PREV_ID = this.MAN_PREV_ID;
    _o.MAN_PURPOSE = this.MAN_PURPOSE;
    _o.MAN_REF_FRAME = this.MAN_REF_FRAME;
    _o.MAN_FRAME_EPOCH = this.MAN_FRAME_EPOCH;
    _o.MAN_TYPE = this.MAN_TYPE;
    _o.MAN_EPOCH_START = this.MAN_EPOCH_START;
    _o.MAN_DURATION = this.MAN_DURATION;
    _o.MAN_UNITS = new List<string>();
    for (var _j = 0; _j < this.MAN_UNITSLength; ++_j) {_o.MAN_UNITS.Add(this.MAN_UNITS(_j));}
    _o.DATA = new List<string>();
    for (var _j = 0; _j < this.DATALength; ++_j) {_o.DATA.Add(this.DATA(_j));}
    _o.MAN_COMMENT = new List<string>();
    for (var _j = 0; _j < this.MAN_COMMENTLength; ++_j) {_o.MAN_COMMENT.Add(this.MAN_COMMENT(_j));}
  }
  public static Offset<Maneuver> Pack(FlatBufferBuilder builder, ManeuverT _o) {
    if (_o == null) return default(Offset<Maneuver>);
    var _MAN_ID = _o.MAN_ID == null ? default(StringOffset) : builder.CreateString(_o.MAN_ID);
    var _MAN_BASIS = _o.MAN_BASIS == null ? default(StringOffset) : builder.CreateString(_o.MAN_BASIS);
    var _MAN_DEVICE_ID = _o.MAN_DEVICE_ID == null ? default(StringOffset) : builder.CreateString(_o.MAN_DEVICE_ID);
    var _MAN_PREV_ID = _o.MAN_PREV_ID == null ? default(StringOffset) : builder.CreateString(_o.MAN_PREV_ID);
    var _MAN_PURPOSE = _o.MAN_PURPOSE == null ? default(StringOffset) : builder.CreateString(_o.MAN_PURPOSE);
    var _MAN_REF_FRAME = _o.MAN_REF_FRAME == null ? default(StringOffset) : builder.CreateString(_o.MAN_REF_FRAME);
    var _MAN_FRAME_EPOCH = _o.MAN_FRAME_EPOCH == null ? default(StringOffset) : builder.CreateString(_o.MAN_FRAME_EPOCH);
    var _MAN_TYPE = _o.MAN_TYPE == null ? default(StringOffset) : builder.CreateString(_o.MAN_TYPE);
    var _MAN_EPOCH_START = _o.MAN_EPOCH_START == null ? default(StringOffset) : builder.CreateString(_o.MAN_EPOCH_START);
    var _MAN_UNITS = default(VectorOffset);
    if (_o.MAN_UNITS != null) {
      var __MAN_UNITS = new StringOffset[_o.MAN_UNITS.Count];
      for (var _j = 0; _j < __MAN_UNITS.Length; ++_j) { __MAN_UNITS[_j] = builder.CreateString(_o.MAN_UNITS[_j]); }
      _MAN_UNITS = CreateMAN_UNITSVector(builder, __MAN_UNITS);
    }
    var _DATA = default(VectorOffset);
    if (_o.DATA != null) {
      var __DATA = new StringOffset[_o.DATA.Count];
      for (var _j = 0; _j < __DATA.Length; ++_j) { __DATA[_j] = builder.CreateString(_o.DATA[_j]); }
      _DATA = CreateDATAVector(builder, __DATA);
    }
    var _MAN_COMMENT = default(VectorOffset);
    if (_o.MAN_COMMENT != null) {
      var __MAN_COMMENT = new StringOffset[_o.MAN_COMMENT.Count];
      for (var _j = 0; _j < __MAN_COMMENT.Length; ++_j) { __MAN_COMMENT[_j] = builder.CreateString(_o.MAN_COMMENT[_j]); }
      _MAN_COMMENT = CreateMAN_COMMENTVector(builder, __MAN_COMMENT);
    }
    return CreateManeuver(
      builder,
      _MAN_ID,
      _MAN_BASIS,
      _MAN_DEVICE_ID,
      _MAN_PREV_ID,
      _MAN_PURPOSE,
      _MAN_REF_FRAME,
      _MAN_FRAME_EPOCH,
      _MAN_TYPE,
      _MAN_EPOCH_START,
      _o.MAN_DURATION,
      _MAN_UNITS,
      _DATA,
      _MAN_COMMENT);
  }
}

public class ManeuverT
{
  public string MAN_ID { get; set; }
  public string MAN_BASIS { get; set; }
  public string MAN_DEVICE_ID { get; set; }
  public string MAN_PREV_ID { get; set; }
  public string MAN_PURPOSE { get; set; }
  public string MAN_REF_FRAME { get; set; }
  public string MAN_FRAME_EPOCH { get; set; }
  public string MAN_TYPE { get; set; }
  public string MAN_EPOCH_START { get; set; }
  public double MAN_DURATION { get; set; }
  public List<string> MAN_UNITS { get; set; }
  public List<string> DATA { get; set; }
  public List<string> MAN_COMMENT { get; set; }

  public ManeuverT() {
    this.MAN_ID = null;
    this.MAN_BASIS = null;
    this.MAN_DEVICE_ID = null;
    this.MAN_PREV_ID = null;
    this.MAN_PURPOSE = null;
    this.MAN_REF_FRAME = null;
    this.MAN_FRAME_EPOCH = null;
    this.MAN_TYPE = null;
    this.MAN_EPOCH_START = null;
    this.MAN_DURATION = 0.0;
    this.MAN_UNITS = null;
    this.DATA = null;
    this.MAN_COMMENT = null;
  }
}


static public class ManeuverVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*MAN_ID*/, false)
      && verifier.VerifyString(tablePos, 6 /*MAN_BASIS*/, false)
      && verifier.VerifyString(tablePos, 8 /*MAN_DEVICE_ID*/, false)
      && verifier.VerifyString(tablePos, 10 /*MAN_PREV_ID*/, false)
      && verifier.VerifyString(tablePos, 12 /*MAN_PURPOSE*/, false)
      && verifier.VerifyString(tablePos, 14 /*MAN_REF_FRAME*/, false)
      && verifier.VerifyString(tablePos, 16 /*MAN_FRAME_EPOCH*/, false)
      && verifier.VerifyString(tablePos, 18 /*MAN_TYPE*/, false)
      && verifier.VerifyString(tablePos, 20 /*MAN_EPOCH_START*/, false)
      && verifier.VerifyField(tablePos, 22 /*MAN_DURATION*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*MAN_UNITS*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 26 /*DATA*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 28 /*MAN_COMMENT*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
