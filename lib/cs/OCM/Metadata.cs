// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Metadata : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Metadata GetRootAsMetadata(ByteBuffer _bb) { return GetRootAsMetadata(_bb, new Metadata()); }
  public static Metadata GetRootAsMetadata(ByteBuffer _bb, Metadata obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Metadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Comments in the Metadata section.
  public string COMMENT(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int COMMENTLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Free-text field containing the name of the object.
  public string OBJECT_NAME { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOBJECT_NAMEBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetOBJECT_NAMEBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetOBJECT_NAMEArray() { return __p.__vector_as_array<byte>(6); }
  /// International designator for the object as assigned by COSPAR.
  public string INTERNATIONAL_DESIGNATOR { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetINTERNATIONAL_DESIGNATORBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetINTERNATIONAL_DESIGNATORBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetINTERNATIONAL_DESIGNATORArray() { return __p.__vector_as_array<byte>(8); }
  /// Satellite catalog source from which 'OBJECT_DESIGNATOR' was obtained.
  public string CATALOG_NAME { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCATALOG_NAMEBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCATALOG_NAMEBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCATALOG_NAMEArray() { return __p.__vector_as_array<byte>(10); }
  /// Unique satellite identification designator from the catalog.
  public string OBJECT_DESIGNATOR { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOBJECT_DESIGNATORBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOBJECT_DESIGNATORBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOBJECT_DESIGNATORArray() { return __p.__vector_as_array<byte>(12); }
  /// Alternate names of this space object.
  public string ALTERNATE_NAMES(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ALTERNATE_NAMESLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Originator or programmatic Point-of-Contact (PoC) for OCM.
  public string ORIGINATOR_POC { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIGINATOR_POCBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetORIGINATOR_POCBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetORIGINATOR_POCArray() { return __p.__vector_as_array<byte>(16); }
  /// Contact position of the originator PoC.
  public string ORIGINATOR_POSITION { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIGINATOR_POSITIONBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetORIGINATOR_POSITIONBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetORIGINATOR_POSITIONArray() { return __p.__vector_as_array<byte>(18); }
  /// Originator PoC phone number.
  public string ORIGINATOR_PHONE { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIGINATOR_PHONEBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetORIGINATOR_PHONEBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetORIGINATOR_PHONEArray() { return __p.__vector_as_array<byte>(20); }
  /// Originator PoC email address.
  public string ORIGINATOR_EMAIL { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIGINATOR_EMAILBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetORIGINATOR_EMAILBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetORIGINATOR_EMAILArray() { return __p.__vector_as_array<byte>(22); }
  /// Originator's physical address information.
  public string ORIGINATOR_ADDRESS { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIGINATOR_ADDRESSBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetORIGINATOR_ADDRESSBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetORIGINATOR_ADDRESSArray() { return __p.__vector_as_array<byte>(24); }
  /// Creating agency or operator for technical contact.
  public string TECH_ORG { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTECH_ORGBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetTECH_ORGBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetTECH_ORGArray() { return __p.__vector_as_array<byte>(26); }
  /// Technical Point-of-Contact (PoC) for OCM.
  public string TECH_POC { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTECH_POCBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetTECH_POCBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetTECH_POCArray() { return __p.__vector_as_array<byte>(28); }
  /// Contact position of the technical PoC.
  public string TECH_POSITION { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTECH_POSITIONBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetTECH_POSITIONBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetTECH_POSITIONArray() { return __p.__vector_as_array<byte>(30); }
  /// Technical PoC phone number.
  public string TECH_PHONE { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTECH_PHONEBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetTECH_PHONEBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetTECH_PHONEArray() { return __p.__vector_as_array<byte>(32); }
  /// Technical PoC email address.
  public string TECH_EMAIL { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTECH_EMAILBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetTECH_EMAILBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetTECH_EMAILArray() { return __p.__vector_as_array<byte>(34); }
  /// Technical PoC physical address information.
  public string TECH_ADDRESS { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTECH_ADDRESSBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetTECH_ADDRESSBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetTECH_ADDRESSArray() { return __p.__vector_as_array<byte>(36); }
  /// ID that uniquely identifies the previous message from this originator.
  public string PREVIOUS_MESSAGE_ID { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPREVIOUS_MESSAGE_IDBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetPREVIOUS_MESSAGE_IDBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetPREVIOUS_MESSAGE_IDArray() { return __p.__vector_as_array<byte>(38); }
  /// ID that uniquely identifies the next message from this originator.
  public string NEXT_MESSAGE_ID { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNEXT_MESSAGE_IDBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetNEXT_MESSAGE_IDBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetNEXT_MESSAGE_IDArray() { return __p.__vector_as_array<byte>(40); }
  /// Unique identifier of Attitude Data Messages linked to this OCM.
  public string ADM_MSG_LINK { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetADM_MSG_LINKBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetADM_MSG_LINKBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetADM_MSG_LINKArray() { return __p.__vector_as_array<byte>(42); }
  /// Unique identifier of Conjunction Data Messages linked to this OCM.
  public string CDM_MSG_LINK { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCDM_MSG_LINKBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetCDM_MSG_LINKBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetCDM_MSG_LINKArray() { return __p.__vector_as_array<byte>(44); }
  /// Unique identifier of Pointing Request Messages linked to this OCM.
  public string PRM_MSG_LINK { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPRM_MSG_LINKBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetPRM_MSG_LINKBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetPRM_MSG_LINKArray() { return __p.__vector_as_array<byte>(46); }
  /// Unique identifier of Reentry Data Messages linked to this OCM.
  public string RDM_MSG_LINK { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRDM_MSG_LINKBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetRDM_MSG_LINKBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetRDM_MSG_LINKArray() { return __p.__vector_as_array<byte>(48); }
  /// List of Tracking Data Messages upon which this orbit determination is based.
  public string TDM_MSG_LINK(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TDM_MSG_LINKLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Operator of the space object.
  public string OPERATOR { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOPERATORBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetOPERATORBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetOPERATORArray() { return __p.__vector_as_array<byte>(52); }
  /// Owner of the space object.
  public string OWNER { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOWNERBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetOWNERBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetOWNERArray() { return __p.__vector_as_array<byte>(54); }
  /// Country where the space object owner is based.
  public string COUNTRY { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCOUNTRYBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetCOUNTRYBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetCOUNTRYArray() { return __p.__vector_as_array<byte>(56); }
  /// Name of the constellation to which this space object belongs.
  public string CONSTELLATION { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCONSTELLATIONBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetCONSTELLATIONBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetCONSTELLATIONArray() { return __p.__vector_as_array<byte>(58); }
  /// Specification of the type of object (e.g., PAYLOAD, ROCKET BODY, DEBRIS).
  public string OBJECT_TYPE { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOBJECT_TYPEBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetOBJECT_TYPEBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetOBJECT_TYPEArray() { return __p.__vector_as_array<byte>(60); }
  /// Time system for all absolute time stamps in this OCM, including EPOCH_TZERO.
  public string TIME_SYSTEM { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTIME_SYSTEMBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetTIME_SYSTEMBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetTIME_SYSTEMArray() { return __p.__vector_as_array<byte>(62); }
  /// Default epoch to which all relative times are referenced in data blocks.
  public string EPOCH_TZERO { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEPOCH_TZEROBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetEPOCH_TZEROBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetEPOCH_TZEROArray() { return __p.__vector_as_array<byte>(64); }
  /// Specification of the operational status of the space object.
  public string OPS_STATUS { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOPS_STATUSBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetOPS_STATUSBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetOPS_STATUSArray() { return __p.__vector_as_array<byte>(66); }
  /// Specification of the type of orbit (e.g., GEO, LEO).
  public string ORBIT_CATEGORY { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORBIT_CATEGORYBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetORBIT_CATEGORYBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetORBIT_CATEGORYArray() { return __p.__vector_as_array<byte>(68); }
  /// List of elements of information data blocks included in this message.
  public string OCM_DATA_ELEMENTS(int j) { int o = __p.__offset(70); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OCM_DATA_ELEMENTSLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Number of spacecraft clock counts at EPOCH_TZERO (used if TIME_SYSTEM is SCLK).
  public double SCLK_OFFSET_AT_EPOCH { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number of clock seconds occurring during one SI second (used if TIME_SYSTEM is SCLK).
  public double SCLK_SEC_PER_SI_SEC { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Creation epoch of the previous message from this originator.
  public string PREVIOUS_MESSAGE_EPOCH { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPREVIOUS_MESSAGE_EPOCHBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetPREVIOUS_MESSAGE_EPOCHBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetPREVIOUS_MESSAGE_EPOCHArray() { return __p.__vector_as_array<byte>(76); }
  /// Anticipated (or actual) epoch of the next message from this originator.
  public string NEXT_MESSAGE_EPOCH { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNEXT_MESSAGE_EPOCHBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetNEXT_MESSAGE_EPOCHBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetNEXT_MESSAGE_EPOCHArray() { return __p.__vector_as_array<byte>(78); }
  /// Time of the earliest data contained in the OCM.
  public string START_TIME { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSTART_TIMEBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetSTART_TIMEBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetSTART_TIMEArray() { return __p.__vector_as_array<byte>(80); }
  /// Time of the latest data contained in the OCM.
  public string STOP_TIME { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSTOP_TIMEBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetSTOP_TIMEBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetSTOP_TIMEArray() { return __p.__vector_as_array<byte>(82); }
  /// Span of time that the OCM covers, measured in days.
  public double TIME_SPAN { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Difference (TAI - UTC) in seconds at EPOCH_TZERO.
  public double TAIMUTC_AT_TZERO { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Epoch of next leap second.
  public string NEXT_LEAP_EPOCH { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNEXT_LEAP_EPOCHBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetNEXT_LEAP_EPOCHBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetNEXT_LEAP_EPOCHArray() { return __p.__vector_as_array<byte>(88); }
  /// Difference (TAI - UTC) in seconds at NEXT_LEAP_EPOCH.
  public double NEXT_LEAP_TAIMUTC { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Difference (UT1 - UTC) in seconds at EPOCH_TZERO.
  public double UT1MUTC_AT_TZERO { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Source and version of Earth Orientation Parameters used.
  public string EOP_SOURCE { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEOP_SOURCEBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetEOP_SOURCEBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetEOP_SOURCEArray() { return __p.__vector_as_array<byte>(94); }
  /// Method used to select or interpolate sequential EOP data.
  public string INTERP_METHOD_EOP { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetINTERP_METHOD_EOPBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetINTERP_METHOD_EOPBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetINTERP_METHOD_EOPArray() { return __p.__vector_as_array<byte>(96); }
  /// Source and version of celestial body ephemeris data used.
  public string CELESTIAL_SOURCE { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCELESTIAL_SOURCEBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetCELESTIAL_SOURCEBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetCELESTIAL_SOURCEArray() { return __p.__vector_as_array<byte>(98); }

  public static Offset<Metadata> CreateMetadata(FlatBufferBuilder builder,
      VectorOffset COMMENTOffset = default(VectorOffset),
      StringOffset OBJECT_NAMEOffset = default(StringOffset),
      StringOffset INTERNATIONAL_DESIGNATOROffset = default(StringOffset),
      StringOffset CATALOG_NAMEOffset = default(StringOffset),
      StringOffset OBJECT_DESIGNATOROffset = default(StringOffset),
      VectorOffset ALTERNATE_NAMESOffset = default(VectorOffset),
      StringOffset ORIGINATOR_POCOffset = default(StringOffset),
      StringOffset ORIGINATOR_POSITIONOffset = default(StringOffset),
      StringOffset ORIGINATOR_PHONEOffset = default(StringOffset),
      StringOffset ORIGINATOR_EMAILOffset = default(StringOffset),
      StringOffset ORIGINATOR_ADDRESSOffset = default(StringOffset),
      StringOffset TECH_ORGOffset = default(StringOffset),
      StringOffset TECH_POCOffset = default(StringOffset),
      StringOffset TECH_POSITIONOffset = default(StringOffset),
      StringOffset TECH_PHONEOffset = default(StringOffset),
      StringOffset TECH_EMAILOffset = default(StringOffset),
      StringOffset TECH_ADDRESSOffset = default(StringOffset),
      StringOffset PREVIOUS_MESSAGE_IDOffset = default(StringOffset),
      StringOffset NEXT_MESSAGE_IDOffset = default(StringOffset),
      StringOffset ADM_MSG_LINKOffset = default(StringOffset),
      StringOffset CDM_MSG_LINKOffset = default(StringOffset),
      StringOffset PRM_MSG_LINKOffset = default(StringOffset),
      StringOffset RDM_MSG_LINKOffset = default(StringOffset),
      VectorOffset TDM_MSG_LINKOffset = default(VectorOffset),
      StringOffset OPERATOROffset = default(StringOffset),
      StringOffset OWNEROffset = default(StringOffset),
      StringOffset COUNTRYOffset = default(StringOffset),
      StringOffset CONSTELLATIONOffset = default(StringOffset),
      StringOffset OBJECT_TYPEOffset = default(StringOffset),
      StringOffset TIME_SYSTEMOffset = default(StringOffset),
      StringOffset EPOCH_TZEROOffset = default(StringOffset),
      StringOffset OPS_STATUSOffset = default(StringOffset),
      StringOffset ORBIT_CATEGORYOffset = default(StringOffset),
      VectorOffset OCM_DATA_ELEMENTSOffset = default(VectorOffset),
      double SCLK_OFFSET_AT_EPOCH = 0.0,
      double SCLK_SEC_PER_SI_SEC = 0.0,
      StringOffset PREVIOUS_MESSAGE_EPOCHOffset = default(StringOffset),
      StringOffset NEXT_MESSAGE_EPOCHOffset = default(StringOffset),
      StringOffset START_TIMEOffset = default(StringOffset),
      StringOffset STOP_TIMEOffset = default(StringOffset),
      double TIME_SPAN = 0.0,
      double TAIMUTC_AT_TZERO = 0.0,
      StringOffset NEXT_LEAP_EPOCHOffset = default(StringOffset),
      double NEXT_LEAP_TAIMUTC = 0.0,
      double UT1MUTC_AT_TZERO = 0.0,
      StringOffset EOP_SOURCEOffset = default(StringOffset),
      StringOffset INTERP_METHOD_EOPOffset = default(StringOffset),
      StringOffset CELESTIAL_SOURCEOffset = default(StringOffset)) {
    builder.StartTable(48);
    Metadata.AddUT1MUTC_AT_TZERO(builder, UT1MUTC_AT_TZERO);
    Metadata.AddNEXT_LEAP_TAIMUTC(builder, NEXT_LEAP_TAIMUTC);
    Metadata.AddTAIMUTC_AT_TZERO(builder, TAIMUTC_AT_TZERO);
    Metadata.AddTIME_SPAN(builder, TIME_SPAN);
    Metadata.AddSCLK_SEC_PER_SI_SEC(builder, SCLK_SEC_PER_SI_SEC);
    Metadata.AddSCLK_OFFSET_AT_EPOCH(builder, SCLK_OFFSET_AT_EPOCH);
    Metadata.AddCELESTIAL_SOURCE(builder, CELESTIAL_SOURCEOffset);
    Metadata.AddINTERP_METHOD_EOP(builder, INTERP_METHOD_EOPOffset);
    Metadata.AddEOP_SOURCE(builder, EOP_SOURCEOffset);
    Metadata.AddNEXT_LEAP_EPOCH(builder, NEXT_LEAP_EPOCHOffset);
    Metadata.AddSTOP_TIME(builder, STOP_TIMEOffset);
    Metadata.AddSTART_TIME(builder, START_TIMEOffset);
    Metadata.AddNEXT_MESSAGE_EPOCH(builder, NEXT_MESSAGE_EPOCHOffset);
    Metadata.AddPREVIOUS_MESSAGE_EPOCH(builder, PREVIOUS_MESSAGE_EPOCHOffset);
    Metadata.AddOCM_DATA_ELEMENTS(builder, OCM_DATA_ELEMENTSOffset);
    Metadata.AddORBIT_CATEGORY(builder, ORBIT_CATEGORYOffset);
    Metadata.AddOPS_STATUS(builder, OPS_STATUSOffset);
    Metadata.AddEPOCH_TZERO(builder, EPOCH_TZEROOffset);
    Metadata.AddTIME_SYSTEM(builder, TIME_SYSTEMOffset);
    Metadata.AddOBJECT_TYPE(builder, OBJECT_TYPEOffset);
    Metadata.AddCONSTELLATION(builder, CONSTELLATIONOffset);
    Metadata.AddCOUNTRY(builder, COUNTRYOffset);
    Metadata.AddOWNER(builder, OWNEROffset);
    Metadata.AddOPERATOR(builder, OPERATOROffset);
    Metadata.AddTDM_MSG_LINK(builder, TDM_MSG_LINKOffset);
    Metadata.AddRDM_MSG_LINK(builder, RDM_MSG_LINKOffset);
    Metadata.AddPRM_MSG_LINK(builder, PRM_MSG_LINKOffset);
    Metadata.AddCDM_MSG_LINK(builder, CDM_MSG_LINKOffset);
    Metadata.AddADM_MSG_LINK(builder, ADM_MSG_LINKOffset);
    Metadata.AddNEXT_MESSAGE_ID(builder, NEXT_MESSAGE_IDOffset);
    Metadata.AddPREVIOUS_MESSAGE_ID(builder, PREVIOUS_MESSAGE_IDOffset);
    Metadata.AddTECH_ADDRESS(builder, TECH_ADDRESSOffset);
    Metadata.AddTECH_EMAIL(builder, TECH_EMAILOffset);
    Metadata.AddTECH_PHONE(builder, TECH_PHONEOffset);
    Metadata.AddTECH_POSITION(builder, TECH_POSITIONOffset);
    Metadata.AddTECH_POC(builder, TECH_POCOffset);
    Metadata.AddTECH_ORG(builder, TECH_ORGOffset);
    Metadata.AddORIGINATOR_ADDRESS(builder, ORIGINATOR_ADDRESSOffset);
    Metadata.AddORIGINATOR_EMAIL(builder, ORIGINATOR_EMAILOffset);
    Metadata.AddORIGINATOR_PHONE(builder, ORIGINATOR_PHONEOffset);
    Metadata.AddORIGINATOR_POSITION(builder, ORIGINATOR_POSITIONOffset);
    Metadata.AddORIGINATOR_POC(builder, ORIGINATOR_POCOffset);
    Metadata.AddALTERNATE_NAMES(builder, ALTERNATE_NAMESOffset);
    Metadata.AddOBJECT_DESIGNATOR(builder, OBJECT_DESIGNATOROffset);
    Metadata.AddCATALOG_NAME(builder, CATALOG_NAMEOffset);
    Metadata.AddINTERNATIONAL_DESIGNATOR(builder, INTERNATIONAL_DESIGNATOROffset);
    Metadata.AddOBJECT_NAME(builder, OBJECT_NAMEOffset);
    Metadata.AddCOMMENT(builder, COMMENTOffset);
    return Metadata.EndMetadata(builder);
  }

  public static void StartMetadata(FlatBufferBuilder builder) { builder.StartTable(48); }
  public static void AddCOMMENT(FlatBufferBuilder builder, VectorOffset COMMENTOffset) { builder.AddOffset(0, COMMENTOffset.Value, 0); }
  public static VectorOffset CreateCOMMENTVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCOMMENTVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOMMENTVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOMMENTVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCOMMENTVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOBJECT_NAME(FlatBufferBuilder builder, StringOffset OBJECT_NAMEOffset) { builder.AddOffset(1, OBJECT_NAMEOffset.Value, 0); }
  public static void AddINTERNATIONAL_DESIGNATOR(FlatBufferBuilder builder, StringOffset INTERNATIONAL_DESIGNATOROffset) { builder.AddOffset(2, INTERNATIONAL_DESIGNATOROffset.Value, 0); }
  public static void AddCATALOG_NAME(FlatBufferBuilder builder, StringOffset CATALOG_NAMEOffset) { builder.AddOffset(3, CATALOG_NAMEOffset.Value, 0); }
  public static void AddOBJECT_DESIGNATOR(FlatBufferBuilder builder, StringOffset OBJECT_DESIGNATOROffset) { builder.AddOffset(4, OBJECT_DESIGNATOROffset.Value, 0); }
  public static void AddALTERNATE_NAMES(FlatBufferBuilder builder, VectorOffset ALTERNATE_NAMESOffset) { builder.AddOffset(5, ALTERNATE_NAMESOffset.Value, 0); }
  public static VectorOffset CreateALTERNATE_NAMESVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateALTERNATE_NAMESVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateALTERNATE_NAMESVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateALTERNATE_NAMESVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartALTERNATE_NAMESVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddORIGINATOR_POC(FlatBufferBuilder builder, StringOffset ORIGINATOR_POCOffset) { builder.AddOffset(6, ORIGINATOR_POCOffset.Value, 0); }
  public static void AddORIGINATOR_POSITION(FlatBufferBuilder builder, StringOffset ORIGINATOR_POSITIONOffset) { builder.AddOffset(7, ORIGINATOR_POSITIONOffset.Value, 0); }
  public static void AddORIGINATOR_PHONE(FlatBufferBuilder builder, StringOffset ORIGINATOR_PHONEOffset) { builder.AddOffset(8, ORIGINATOR_PHONEOffset.Value, 0); }
  public static void AddORIGINATOR_EMAIL(FlatBufferBuilder builder, StringOffset ORIGINATOR_EMAILOffset) { builder.AddOffset(9, ORIGINATOR_EMAILOffset.Value, 0); }
  public static void AddORIGINATOR_ADDRESS(FlatBufferBuilder builder, StringOffset ORIGINATOR_ADDRESSOffset) { builder.AddOffset(10, ORIGINATOR_ADDRESSOffset.Value, 0); }
  public static void AddTECH_ORG(FlatBufferBuilder builder, StringOffset TECH_ORGOffset) { builder.AddOffset(11, TECH_ORGOffset.Value, 0); }
  public static void AddTECH_POC(FlatBufferBuilder builder, StringOffset TECH_POCOffset) { builder.AddOffset(12, TECH_POCOffset.Value, 0); }
  public static void AddTECH_POSITION(FlatBufferBuilder builder, StringOffset TECH_POSITIONOffset) { builder.AddOffset(13, TECH_POSITIONOffset.Value, 0); }
  public static void AddTECH_PHONE(FlatBufferBuilder builder, StringOffset TECH_PHONEOffset) { builder.AddOffset(14, TECH_PHONEOffset.Value, 0); }
  public static void AddTECH_EMAIL(FlatBufferBuilder builder, StringOffset TECH_EMAILOffset) { builder.AddOffset(15, TECH_EMAILOffset.Value, 0); }
  public static void AddTECH_ADDRESS(FlatBufferBuilder builder, StringOffset TECH_ADDRESSOffset) { builder.AddOffset(16, TECH_ADDRESSOffset.Value, 0); }
  public static void AddPREVIOUS_MESSAGE_ID(FlatBufferBuilder builder, StringOffset PREVIOUS_MESSAGE_IDOffset) { builder.AddOffset(17, PREVIOUS_MESSAGE_IDOffset.Value, 0); }
  public static void AddNEXT_MESSAGE_ID(FlatBufferBuilder builder, StringOffset NEXT_MESSAGE_IDOffset) { builder.AddOffset(18, NEXT_MESSAGE_IDOffset.Value, 0); }
  public static void AddADM_MSG_LINK(FlatBufferBuilder builder, StringOffset ADM_MSG_LINKOffset) { builder.AddOffset(19, ADM_MSG_LINKOffset.Value, 0); }
  public static void AddCDM_MSG_LINK(FlatBufferBuilder builder, StringOffset CDM_MSG_LINKOffset) { builder.AddOffset(20, CDM_MSG_LINKOffset.Value, 0); }
  public static void AddPRM_MSG_LINK(FlatBufferBuilder builder, StringOffset PRM_MSG_LINKOffset) { builder.AddOffset(21, PRM_MSG_LINKOffset.Value, 0); }
  public static void AddRDM_MSG_LINK(FlatBufferBuilder builder, StringOffset RDM_MSG_LINKOffset) { builder.AddOffset(22, RDM_MSG_LINKOffset.Value, 0); }
  public static void AddTDM_MSG_LINK(FlatBufferBuilder builder, VectorOffset TDM_MSG_LINKOffset) { builder.AddOffset(23, TDM_MSG_LINKOffset.Value, 0); }
  public static VectorOffset CreateTDM_MSG_LINKVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTDM_MSG_LINKVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTDM_MSG_LINKVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTDM_MSG_LINKVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTDM_MSG_LINKVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOPERATOR(FlatBufferBuilder builder, StringOffset OPERATOROffset) { builder.AddOffset(24, OPERATOROffset.Value, 0); }
  public static void AddOWNER(FlatBufferBuilder builder, StringOffset OWNEROffset) { builder.AddOffset(25, OWNEROffset.Value, 0); }
  public static void AddCOUNTRY(FlatBufferBuilder builder, StringOffset COUNTRYOffset) { builder.AddOffset(26, COUNTRYOffset.Value, 0); }
  public static void AddCONSTELLATION(FlatBufferBuilder builder, StringOffset CONSTELLATIONOffset) { builder.AddOffset(27, CONSTELLATIONOffset.Value, 0); }
  public static void AddOBJECT_TYPE(FlatBufferBuilder builder, StringOffset OBJECT_TYPEOffset) { builder.AddOffset(28, OBJECT_TYPEOffset.Value, 0); }
  public static void AddTIME_SYSTEM(FlatBufferBuilder builder, StringOffset TIME_SYSTEMOffset) { builder.AddOffset(29, TIME_SYSTEMOffset.Value, 0); }
  public static void AddEPOCH_TZERO(FlatBufferBuilder builder, StringOffset EPOCH_TZEROOffset) { builder.AddOffset(30, EPOCH_TZEROOffset.Value, 0); }
  public static void AddOPS_STATUS(FlatBufferBuilder builder, StringOffset OPS_STATUSOffset) { builder.AddOffset(31, OPS_STATUSOffset.Value, 0); }
  public static void AddORBIT_CATEGORY(FlatBufferBuilder builder, StringOffset ORBIT_CATEGORYOffset) { builder.AddOffset(32, ORBIT_CATEGORYOffset.Value, 0); }
  public static void AddOCM_DATA_ELEMENTS(FlatBufferBuilder builder, VectorOffset OCM_DATA_ELEMENTSOffset) { builder.AddOffset(33, OCM_DATA_ELEMENTSOffset.Value, 0); }
  public static VectorOffset CreateOCM_DATA_ELEMENTSVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOCM_DATA_ELEMENTSVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOCM_DATA_ELEMENTSVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOCM_DATA_ELEMENTSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOCM_DATA_ELEMENTSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSCLK_OFFSET_AT_EPOCH(FlatBufferBuilder builder, double SCLK_OFFSET_AT_EPOCH) { builder.AddDouble(34, SCLK_OFFSET_AT_EPOCH, 0.0); }
  public static void AddSCLK_SEC_PER_SI_SEC(FlatBufferBuilder builder, double SCLK_SEC_PER_SI_SEC) { builder.AddDouble(35, SCLK_SEC_PER_SI_SEC, 0.0); }
  public static void AddPREVIOUS_MESSAGE_EPOCH(FlatBufferBuilder builder, StringOffset PREVIOUS_MESSAGE_EPOCHOffset) { builder.AddOffset(36, PREVIOUS_MESSAGE_EPOCHOffset.Value, 0); }
  public static void AddNEXT_MESSAGE_EPOCH(FlatBufferBuilder builder, StringOffset NEXT_MESSAGE_EPOCHOffset) { builder.AddOffset(37, NEXT_MESSAGE_EPOCHOffset.Value, 0); }
  public static void AddSTART_TIME(FlatBufferBuilder builder, StringOffset START_TIMEOffset) { builder.AddOffset(38, START_TIMEOffset.Value, 0); }
  public static void AddSTOP_TIME(FlatBufferBuilder builder, StringOffset STOP_TIMEOffset) { builder.AddOffset(39, STOP_TIMEOffset.Value, 0); }
  public static void AddTIME_SPAN(FlatBufferBuilder builder, double TIME_SPAN) { builder.AddDouble(40, TIME_SPAN, 0.0); }
  public static void AddTAIMUTC_AT_TZERO(FlatBufferBuilder builder, double TAIMUTC_AT_TZERO) { builder.AddDouble(41, TAIMUTC_AT_TZERO, 0.0); }
  public static void AddNEXT_LEAP_EPOCH(FlatBufferBuilder builder, StringOffset NEXT_LEAP_EPOCHOffset) { builder.AddOffset(42, NEXT_LEAP_EPOCHOffset.Value, 0); }
  public static void AddNEXT_LEAP_TAIMUTC(FlatBufferBuilder builder, double NEXT_LEAP_TAIMUTC) { builder.AddDouble(43, NEXT_LEAP_TAIMUTC, 0.0); }
  public static void AddUT1MUTC_AT_TZERO(FlatBufferBuilder builder, double UT1MUTC_AT_TZERO) { builder.AddDouble(44, UT1MUTC_AT_TZERO, 0.0); }
  public static void AddEOP_SOURCE(FlatBufferBuilder builder, StringOffset EOP_SOURCEOffset) { builder.AddOffset(45, EOP_SOURCEOffset.Value, 0); }
  public static void AddINTERP_METHOD_EOP(FlatBufferBuilder builder, StringOffset INTERP_METHOD_EOPOffset) { builder.AddOffset(46, INTERP_METHOD_EOPOffset.Value, 0); }
  public static void AddCELESTIAL_SOURCE(FlatBufferBuilder builder, StringOffset CELESTIAL_SOURCEOffset) { builder.AddOffset(47, CELESTIAL_SOURCEOffset.Value, 0); }
  public static Offset<Metadata> EndMetadata(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Metadata>(o);
  }
  public MetadataT UnPack() {
    var _o = new MetadataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MetadataT _o) {
    _o.COMMENT = new List<string>();
    for (var _j = 0; _j < this.COMMENTLength; ++_j) {_o.COMMENT.Add(this.COMMENT(_j));}
    _o.OBJECT_NAME = this.OBJECT_NAME;
    _o.INTERNATIONAL_DESIGNATOR = this.INTERNATIONAL_DESIGNATOR;
    _o.CATALOG_NAME = this.CATALOG_NAME;
    _o.OBJECT_DESIGNATOR = this.OBJECT_DESIGNATOR;
    _o.ALTERNATE_NAMES = new List<string>();
    for (var _j = 0; _j < this.ALTERNATE_NAMESLength; ++_j) {_o.ALTERNATE_NAMES.Add(this.ALTERNATE_NAMES(_j));}
    _o.ORIGINATOR_POC = this.ORIGINATOR_POC;
    _o.ORIGINATOR_POSITION = this.ORIGINATOR_POSITION;
    _o.ORIGINATOR_PHONE = this.ORIGINATOR_PHONE;
    _o.ORIGINATOR_EMAIL = this.ORIGINATOR_EMAIL;
    _o.ORIGINATOR_ADDRESS = this.ORIGINATOR_ADDRESS;
    _o.TECH_ORG = this.TECH_ORG;
    _o.TECH_POC = this.TECH_POC;
    _o.TECH_POSITION = this.TECH_POSITION;
    _o.TECH_PHONE = this.TECH_PHONE;
    _o.TECH_EMAIL = this.TECH_EMAIL;
    _o.TECH_ADDRESS = this.TECH_ADDRESS;
    _o.PREVIOUS_MESSAGE_ID = this.PREVIOUS_MESSAGE_ID;
    _o.NEXT_MESSAGE_ID = this.NEXT_MESSAGE_ID;
    _o.ADM_MSG_LINK = this.ADM_MSG_LINK;
    _o.CDM_MSG_LINK = this.CDM_MSG_LINK;
    _o.PRM_MSG_LINK = this.PRM_MSG_LINK;
    _o.RDM_MSG_LINK = this.RDM_MSG_LINK;
    _o.TDM_MSG_LINK = new List<string>();
    for (var _j = 0; _j < this.TDM_MSG_LINKLength; ++_j) {_o.TDM_MSG_LINK.Add(this.TDM_MSG_LINK(_j));}
    _o.OPERATOR = this.OPERATOR;
    _o.OWNER = this.OWNER;
    _o.COUNTRY = this.COUNTRY;
    _o.CONSTELLATION = this.CONSTELLATION;
    _o.OBJECT_TYPE = this.OBJECT_TYPE;
    _o.TIME_SYSTEM = this.TIME_SYSTEM;
    _o.EPOCH_TZERO = this.EPOCH_TZERO;
    _o.OPS_STATUS = this.OPS_STATUS;
    _o.ORBIT_CATEGORY = this.ORBIT_CATEGORY;
    _o.OCM_DATA_ELEMENTS = new List<string>();
    for (var _j = 0; _j < this.OCM_DATA_ELEMENTSLength; ++_j) {_o.OCM_DATA_ELEMENTS.Add(this.OCM_DATA_ELEMENTS(_j));}
    _o.SCLK_OFFSET_AT_EPOCH = this.SCLK_OFFSET_AT_EPOCH;
    _o.SCLK_SEC_PER_SI_SEC = this.SCLK_SEC_PER_SI_SEC;
    _o.PREVIOUS_MESSAGE_EPOCH = this.PREVIOUS_MESSAGE_EPOCH;
    _o.NEXT_MESSAGE_EPOCH = this.NEXT_MESSAGE_EPOCH;
    _o.START_TIME = this.START_TIME;
    _o.STOP_TIME = this.STOP_TIME;
    _o.TIME_SPAN = this.TIME_SPAN;
    _o.TAIMUTC_AT_TZERO = this.TAIMUTC_AT_TZERO;
    _o.NEXT_LEAP_EPOCH = this.NEXT_LEAP_EPOCH;
    _o.NEXT_LEAP_TAIMUTC = this.NEXT_LEAP_TAIMUTC;
    _o.UT1MUTC_AT_TZERO = this.UT1MUTC_AT_TZERO;
    _o.EOP_SOURCE = this.EOP_SOURCE;
    _o.INTERP_METHOD_EOP = this.INTERP_METHOD_EOP;
    _o.CELESTIAL_SOURCE = this.CELESTIAL_SOURCE;
  }
  public static Offset<Metadata> Pack(FlatBufferBuilder builder, MetadataT _o) {
    if (_o == null) return default(Offset<Metadata>);
    var _COMMENT = default(VectorOffset);
    if (_o.COMMENT != null) {
      var __COMMENT = new StringOffset[_o.COMMENT.Count];
      for (var _j = 0; _j < __COMMENT.Length; ++_j) { __COMMENT[_j] = builder.CreateString(_o.COMMENT[_j]); }
      _COMMENT = CreateCOMMENTVector(builder, __COMMENT);
    }
    var _OBJECT_NAME = _o.OBJECT_NAME == null ? default(StringOffset) : builder.CreateString(_o.OBJECT_NAME);
    var _INTERNATIONAL_DESIGNATOR = _o.INTERNATIONAL_DESIGNATOR == null ? default(StringOffset) : builder.CreateString(_o.INTERNATIONAL_DESIGNATOR);
    var _CATALOG_NAME = _o.CATALOG_NAME == null ? default(StringOffset) : builder.CreateString(_o.CATALOG_NAME);
    var _OBJECT_DESIGNATOR = _o.OBJECT_DESIGNATOR == null ? default(StringOffset) : builder.CreateString(_o.OBJECT_DESIGNATOR);
    var _ALTERNATE_NAMES = default(VectorOffset);
    if (_o.ALTERNATE_NAMES != null) {
      var __ALTERNATE_NAMES = new StringOffset[_o.ALTERNATE_NAMES.Count];
      for (var _j = 0; _j < __ALTERNATE_NAMES.Length; ++_j) { __ALTERNATE_NAMES[_j] = builder.CreateString(_o.ALTERNATE_NAMES[_j]); }
      _ALTERNATE_NAMES = CreateALTERNATE_NAMESVector(builder, __ALTERNATE_NAMES);
    }
    var _ORIGINATOR_POC = _o.ORIGINATOR_POC == null ? default(StringOffset) : builder.CreateString(_o.ORIGINATOR_POC);
    var _ORIGINATOR_POSITION = _o.ORIGINATOR_POSITION == null ? default(StringOffset) : builder.CreateString(_o.ORIGINATOR_POSITION);
    var _ORIGINATOR_PHONE = _o.ORIGINATOR_PHONE == null ? default(StringOffset) : builder.CreateString(_o.ORIGINATOR_PHONE);
    var _ORIGINATOR_EMAIL = _o.ORIGINATOR_EMAIL == null ? default(StringOffset) : builder.CreateString(_o.ORIGINATOR_EMAIL);
    var _ORIGINATOR_ADDRESS = _o.ORIGINATOR_ADDRESS == null ? default(StringOffset) : builder.CreateString(_o.ORIGINATOR_ADDRESS);
    var _TECH_ORG = _o.TECH_ORG == null ? default(StringOffset) : builder.CreateString(_o.TECH_ORG);
    var _TECH_POC = _o.TECH_POC == null ? default(StringOffset) : builder.CreateString(_o.TECH_POC);
    var _TECH_POSITION = _o.TECH_POSITION == null ? default(StringOffset) : builder.CreateString(_o.TECH_POSITION);
    var _TECH_PHONE = _o.TECH_PHONE == null ? default(StringOffset) : builder.CreateString(_o.TECH_PHONE);
    var _TECH_EMAIL = _o.TECH_EMAIL == null ? default(StringOffset) : builder.CreateString(_o.TECH_EMAIL);
    var _TECH_ADDRESS = _o.TECH_ADDRESS == null ? default(StringOffset) : builder.CreateString(_o.TECH_ADDRESS);
    var _PREVIOUS_MESSAGE_ID = _o.PREVIOUS_MESSAGE_ID == null ? default(StringOffset) : builder.CreateString(_o.PREVIOUS_MESSAGE_ID);
    var _NEXT_MESSAGE_ID = _o.NEXT_MESSAGE_ID == null ? default(StringOffset) : builder.CreateString(_o.NEXT_MESSAGE_ID);
    var _ADM_MSG_LINK = _o.ADM_MSG_LINK == null ? default(StringOffset) : builder.CreateString(_o.ADM_MSG_LINK);
    var _CDM_MSG_LINK = _o.CDM_MSG_LINK == null ? default(StringOffset) : builder.CreateString(_o.CDM_MSG_LINK);
    var _PRM_MSG_LINK = _o.PRM_MSG_LINK == null ? default(StringOffset) : builder.CreateString(_o.PRM_MSG_LINK);
    var _RDM_MSG_LINK = _o.RDM_MSG_LINK == null ? default(StringOffset) : builder.CreateString(_o.RDM_MSG_LINK);
    var _TDM_MSG_LINK = default(VectorOffset);
    if (_o.TDM_MSG_LINK != null) {
      var __TDM_MSG_LINK = new StringOffset[_o.TDM_MSG_LINK.Count];
      for (var _j = 0; _j < __TDM_MSG_LINK.Length; ++_j) { __TDM_MSG_LINK[_j] = builder.CreateString(_o.TDM_MSG_LINK[_j]); }
      _TDM_MSG_LINK = CreateTDM_MSG_LINKVector(builder, __TDM_MSG_LINK);
    }
    var _OPERATOR = _o.OPERATOR == null ? default(StringOffset) : builder.CreateString(_o.OPERATOR);
    var _OWNER = _o.OWNER == null ? default(StringOffset) : builder.CreateString(_o.OWNER);
    var _COUNTRY = _o.COUNTRY == null ? default(StringOffset) : builder.CreateString(_o.COUNTRY);
    var _CONSTELLATION = _o.CONSTELLATION == null ? default(StringOffset) : builder.CreateString(_o.CONSTELLATION);
    var _OBJECT_TYPE = _o.OBJECT_TYPE == null ? default(StringOffset) : builder.CreateString(_o.OBJECT_TYPE);
    var _TIME_SYSTEM = _o.TIME_SYSTEM == null ? default(StringOffset) : builder.CreateString(_o.TIME_SYSTEM);
    var _EPOCH_TZERO = _o.EPOCH_TZERO == null ? default(StringOffset) : builder.CreateString(_o.EPOCH_TZERO);
    var _OPS_STATUS = _o.OPS_STATUS == null ? default(StringOffset) : builder.CreateString(_o.OPS_STATUS);
    var _ORBIT_CATEGORY = _o.ORBIT_CATEGORY == null ? default(StringOffset) : builder.CreateString(_o.ORBIT_CATEGORY);
    var _OCM_DATA_ELEMENTS = default(VectorOffset);
    if (_o.OCM_DATA_ELEMENTS != null) {
      var __OCM_DATA_ELEMENTS = new StringOffset[_o.OCM_DATA_ELEMENTS.Count];
      for (var _j = 0; _j < __OCM_DATA_ELEMENTS.Length; ++_j) { __OCM_DATA_ELEMENTS[_j] = builder.CreateString(_o.OCM_DATA_ELEMENTS[_j]); }
      _OCM_DATA_ELEMENTS = CreateOCM_DATA_ELEMENTSVector(builder, __OCM_DATA_ELEMENTS);
    }
    var _PREVIOUS_MESSAGE_EPOCH = _o.PREVIOUS_MESSAGE_EPOCH == null ? default(StringOffset) : builder.CreateString(_o.PREVIOUS_MESSAGE_EPOCH);
    var _NEXT_MESSAGE_EPOCH = _o.NEXT_MESSAGE_EPOCH == null ? default(StringOffset) : builder.CreateString(_o.NEXT_MESSAGE_EPOCH);
    var _START_TIME = _o.START_TIME == null ? default(StringOffset) : builder.CreateString(_o.START_TIME);
    var _STOP_TIME = _o.STOP_TIME == null ? default(StringOffset) : builder.CreateString(_o.STOP_TIME);
    var _NEXT_LEAP_EPOCH = _o.NEXT_LEAP_EPOCH == null ? default(StringOffset) : builder.CreateString(_o.NEXT_LEAP_EPOCH);
    var _EOP_SOURCE = _o.EOP_SOURCE == null ? default(StringOffset) : builder.CreateString(_o.EOP_SOURCE);
    var _INTERP_METHOD_EOP = _o.INTERP_METHOD_EOP == null ? default(StringOffset) : builder.CreateString(_o.INTERP_METHOD_EOP);
    var _CELESTIAL_SOURCE = _o.CELESTIAL_SOURCE == null ? default(StringOffset) : builder.CreateString(_o.CELESTIAL_SOURCE);
    return CreateMetadata(
      builder,
      _COMMENT,
      _OBJECT_NAME,
      _INTERNATIONAL_DESIGNATOR,
      _CATALOG_NAME,
      _OBJECT_DESIGNATOR,
      _ALTERNATE_NAMES,
      _ORIGINATOR_POC,
      _ORIGINATOR_POSITION,
      _ORIGINATOR_PHONE,
      _ORIGINATOR_EMAIL,
      _ORIGINATOR_ADDRESS,
      _TECH_ORG,
      _TECH_POC,
      _TECH_POSITION,
      _TECH_PHONE,
      _TECH_EMAIL,
      _TECH_ADDRESS,
      _PREVIOUS_MESSAGE_ID,
      _NEXT_MESSAGE_ID,
      _ADM_MSG_LINK,
      _CDM_MSG_LINK,
      _PRM_MSG_LINK,
      _RDM_MSG_LINK,
      _TDM_MSG_LINK,
      _OPERATOR,
      _OWNER,
      _COUNTRY,
      _CONSTELLATION,
      _OBJECT_TYPE,
      _TIME_SYSTEM,
      _EPOCH_TZERO,
      _OPS_STATUS,
      _ORBIT_CATEGORY,
      _OCM_DATA_ELEMENTS,
      _o.SCLK_OFFSET_AT_EPOCH,
      _o.SCLK_SEC_PER_SI_SEC,
      _PREVIOUS_MESSAGE_EPOCH,
      _NEXT_MESSAGE_EPOCH,
      _START_TIME,
      _STOP_TIME,
      _o.TIME_SPAN,
      _o.TAIMUTC_AT_TZERO,
      _NEXT_LEAP_EPOCH,
      _o.NEXT_LEAP_TAIMUTC,
      _o.UT1MUTC_AT_TZERO,
      _EOP_SOURCE,
      _INTERP_METHOD_EOP,
      _CELESTIAL_SOURCE);
  }
}

public class MetadataT
{
  public List<string> COMMENT { get; set; }
  public string OBJECT_NAME { get; set; }
  public string INTERNATIONAL_DESIGNATOR { get; set; }
  public string CATALOG_NAME { get; set; }
  public string OBJECT_DESIGNATOR { get; set; }
  public List<string> ALTERNATE_NAMES { get; set; }
  public string ORIGINATOR_POC { get; set; }
  public string ORIGINATOR_POSITION { get; set; }
  public string ORIGINATOR_PHONE { get; set; }
  public string ORIGINATOR_EMAIL { get; set; }
  public string ORIGINATOR_ADDRESS { get; set; }
  public string TECH_ORG { get; set; }
  public string TECH_POC { get; set; }
  public string TECH_POSITION { get; set; }
  public string TECH_PHONE { get; set; }
  public string TECH_EMAIL { get; set; }
  public string TECH_ADDRESS { get; set; }
  public string PREVIOUS_MESSAGE_ID { get; set; }
  public string NEXT_MESSAGE_ID { get; set; }
  public string ADM_MSG_LINK { get; set; }
  public string CDM_MSG_LINK { get; set; }
  public string PRM_MSG_LINK { get; set; }
  public string RDM_MSG_LINK { get; set; }
  public List<string> TDM_MSG_LINK { get; set; }
  public string OPERATOR { get; set; }
  public string OWNER { get; set; }
  public string COUNTRY { get; set; }
  public string CONSTELLATION { get; set; }
  public string OBJECT_TYPE { get; set; }
  public string TIME_SYSTEM { get; set; }
  public string EPOCH_TZERO { get; set; }
  public string OPS_STATUS { get; set; }
  public string ORBIT_CATEGORY { get; set; }
  public List<string> OCM_DATA_ELEMENTS { get; set; }
  public double SCLK_OFFSET_AT_EPOCH { get; set; }
  public double SCLK_SEC_PER_SI_SEC { get; set; }
  public string PREVIOUS_MESSAGE_EPOCH { get; set; }
  public string NEXT_MESSAGE_EPOCH { get; set; }
  public string START_TIME { get; set; }
  public string STOP_TIME { get; set; }
  public double TIME_SPAN { get; set; }
  public double TAIMUTC_AT_TZERO { get; set; }
  public string NEXT_LEAP_EPOCH { get; set; }
  public double NEXT_LEAP_TAIMUTC { get; set; }
  public double UT1MUTC_AT_TZERO { get; set; }
  public string EOP_SOURCE { get; set; }
  public string INTERP_METHOD_EOP { get; set; }
  public string CELESTIAL_SOURCE { get; set; }

  public MetadataT() {
    this.COMMENT = null;
    this.OBJECT_NAME = null;
    this.INTERNATIONAL_DESIGNATOR = null;
    this.CATALOG_NAME = null;
    this.OBJECT_DESIGNATOR = null;
    this.ALTERNATE_NAMES = null;
    this.ORIGINATOR_POC = null;
    this.ORIGINATOR_POSITION = null;
    this.ORIGINATOR_PHONE = null;
    this.ORIGINATOR_EMAIL = null;
    this.ORIGINATOR_ADDRESS = null;
    this.TECH_ORG = null;
    this.TECH_POC = null;
    this.TECH_POSITION = null;
    this.TECH_PHONE = null;
    this.TECH_EMAIL = null;
    this.TECH_ADDRESS = null;
    this.PREVIOUS_MESSAGE_ID = null;
    this.NEXT_MESSAGE_ID = null;
    this.ADM_MSG_LINK = null;
    this.CDM_MSG_LINK = null;
    this.PRM_MSG_LINK = null;
    this.RDM_MSG_LINK = null;
    this.TDM_MSG_LINK = null;
    this.OPERATOR = null;
    this.OWNER = null;
    this.COUNTRY = null;
    this.CONSTELLATION = null;
    this.OBJECT_TYPE = null;
    this.TIME_SYSTEM = null;
    this.EPOCH_TZERO = null;
    this.OPS_STATUS = null;
    this.ORBIT_CATEGORY = null;
    this.OCM_DATA_ELEMENTS = null;
    this.SCLK_OFFSET_AT_EPOCH = 0.0;
    this.SCLK_SEC_PER_SI_SEC = 0.0;
    this.PREVIOUS_MESSAGE_EPOCH = null;
    this.NEXT_MESSAGE_EPOCH = null;
    this.START_TIME = null;
    this.STOP_TIME = null;
    this.TIME_SPAN = 0.0;
    this.TAIMUTC_AT_TZERO = 0.0;
    this.NEXT_LEAP_EPOCH = null;
    this.NEXT_LEAP_TAIMUTC = 0.0;
    this.UT1MUTC_AT_TZERO = 0.0;
    this.EOP_SOURCE = null;
    this.INTERP_METHOD_EOP = null;
    this.CELESTIAL_SOURCE = null;
  }
}


static public class MetadataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfStrings(tablePos, 4 /*COMMENT*/, false)
      && verifier.VerifyString(tablePos, 6 /*OBJECT_NAME*/, false)
      && verifier.VerifyString(tablePos, 8 /*INTERNATIONAL_DESIGNATOR*/, false)
      && verifier.VerifyString(tablePos, 10 /*CATALOG_NAME*/, false)
      && verifier.VerifyString(tablePos, 12 /*OBJECT_DESIGNATOR*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*ALTERNATE_NAMES*/, false)
      && verifier.VerifyString(tablePos, 16 /*ORIGINATOR_POC*/, false)
      && verifier.VerifyString(tablePos, 18 /*ORIGINATOR_POSITION*/, false)
      && verifier.VerifyString(tablePos, 20 /*ORIGINATOR_PHONE*/, false)
      && verifier.VerifyString(tablePos, 22 /*ORIGINATOR_EMAIL*/, false)
      && verifier.VerifyString(tablePos, 24 /*ORIGINATOR_ADDRESS*/, false)
      && verifier.VerifyString(tablePos, 26 /*TECH_ORG*/, false)
      && verifier.VerifyString(tablePos, 28 /*TECH_POC*/, false)
      && verifier.VerifyString(tablePos, 30 /*TECH_POSITION*/, false)
      && verifier.VerifyString(tablePos, 32 /*TECH_PHONE*/, false)
      && verifier.VerifyString(tablePos, 34 /*TECH_EMAIL*/, false)
      && verifier.VerifyString(tablePos, 36 /*TECH_ADDRESS*/, false)
      && verifier.VerifyString(tablePos, 38 /*PREVIOUS_MESSAGE_ID*/, false)
      && verifier.VerifyString(tablePos, 40 /*NEXT_MESSAGE_ID*/, false)
      && verifier.VerifyString(tablePos, 42 /*ADM_MSG_LINK*/, false)
      && verifier.VerifyString(tablePos, 44 /*CDM_MSG_LINK*/, false)
      && verifier.VerifyString(tablePos, 46 /*PRM_MSG_LINK*/, false)
      && verifier.VerifyString(tablePos, 48 /*RDM_MSG_LINK*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 50 /*TDM_MSG_LINK*/, false)
      && verifier.VerifyString(tablePos, 52 /*OPERATOR*/, false)
      && verifier.VerifyString(tablePos, 54 /*OWNER*/, false)
      && verifier.VerifyString(tablePos, 56 /*COUNTRY*/, false)
      && verifier.VerifyString(tablePos, 58 /*CONSTELLATION*/, false)
      && verifier.VerifyString(tablePos, 60 /*OBJECT_TYPE*/, false)
      && verifier.VerifyString(tablePos, 62 /*TIME_SYSTEM*/, false)
      && verifier.VerifyString(tablePos, 64 /*EPOCH_TZERO*/, false)
      && verifier.VerifyString(tablePos, 66 /*OPS_STATUS*/, false)
      && verifier.VerifyString(tablePos, 68 /*ORBIT_CATEGORY*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 70 /*OCM_DATA_ELEMENTS*/, false)
      && verifier.VerifyField(tablePos, 72 /*SCLK_OFFSET_AT_EPOCH*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*SCLK_SEC_PER_SI_SEC*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 76 /*PREVIOUS_MESSAGE_EPOCH*/, false)
      && verifier.VerifyString(tablePos, 78 /*NEXT_MESSAGE_EPOCH*/, false)
      && verifier.VerifyString(tablePos, 80 /*START_TIME*/, false)
      && verifier.VerifyString(tablePos, 82 /*STOP_TIME*/, false)
      && verifier.VerifyField(tablePos, 84 /*TIME_SPAN*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*TAIMUTC_AT_TZERO*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 88 /*NEXT_LEAP_EPOCH*/, false)
      && verifier.VerifyField(tablePos, 90 /*NEXT_LEAP_TAIMUTC*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*UT1MUTC_AT_TZERO*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 94 /*EOP_SOURCE*/, false)
      && verifier.VerifyString(tablePos, 96 /*INTERP_METHOD_EOP*/, false)
      && verifier.VerifyString(tablePos, 98 /*CELESTIAL_SOURCE*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
