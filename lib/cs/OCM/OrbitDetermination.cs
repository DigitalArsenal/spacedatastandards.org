// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct OrbitDetermination : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static OrbitDetermination GetRootAsOrbitDetermination(ByteBuffer _bb) { return GetRootAsOrbitDetermination(_bb, new OrbitDetermination()); }
  public static OrbitDetermination GetRootAsOrbitDetermination(ByteBuffer _bb, OrbitDetermination obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OrbitDetermination __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier for the orbit determination.
  public string OD_ID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOD_IDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetOD_IDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetOD_IDArray() { return __p.__vector_as_array<byte>(4); }
  /// Identifier of the previous orbit determination.
  public string OD_PREV_ID { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOD_PREV_IDBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetOD_PREV_IDBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetOD_PREV_IDArray() { return __p.__vector_as_array<byte>(6); }
  /// Algorithm used for orbit determination.
  public string OD_ALGORITHM { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOD_ALGORITHMBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOD_ALGORITHMBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOD_ALGORITHMArray() { return __p.__vector_as_array<byte>(8); }
  /// Method used for orbit determination.
  public string OD_METHOD { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOD_METHODBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOD_METHODBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOD_METHODArray() { return __p.__vector_as_array<byte>(10); }
  /// Epoch of the orbit determination.
  public string OD_EPOCH { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOD_EPOCHBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOD_EPOCHBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOD_EPOCHArray() { return __p.__vector_as_array<byte>(12); }
  /// Time tag of the orbit determination.
  public string OD_TIME_TAG { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOD_TIME_TAGBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetOD_TIME_TAGBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetOD_TIME_TAGArray() { return __p.__vector_as_array<byte>(14); }
  /// Process noise model used.
  public string OD_PROCESS_NOISE { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOD_PROCESS_NOISEBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetOD_PROCESS_NOISEBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetOD_PROCESS_NOISEArray() { return __p.__vector_as_array<byte>(16); }
  /// Covariance reduction techniques used.
  public string OD_COV_REDUCTION { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOD_COV_REDUCTIONBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetOD_COV_REDUCTIONBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetOD_COV_REDUCTIONArray() { return __p.__vector_as_array<byte>(18); }
  /// Noise models used.
  public string OD_NOISE_MODELS { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOD_NOISE_MODELSBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOD_NOISE_MODELSBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOD_NOISE_MODELSArray() { return __p.__vector_as_array<byte>(20); }
  /// Types of observations used (e.g., RANGE, DOPPLER).
  public string OD_OBSERVATIONS_TYPE(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OD_OBSERVATIONS_TYPELength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Number of observations used.
  public int OD_OBSERVATIONS_USED { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of tracks used.
  public int OD_TRACKS_USED { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Data weighting scheme used.
  public string OD_DATA_WEIGHTING { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOD_DATA_WEIGHTINGBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetOD_DATA_WEIGHTINGBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetOD_DATA_WEIGHTINGArray() { return __p.__vector_as_array<byte>(28); }
  /// Convergence criteria used.
  public string OD_CONVERGENCE_CRITERIA { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOD_CONVERGENCE_CRITERIABytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetOD_CONVERGENCE_CRITERIABytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetOD_CONVERGENCE_CRITERIAArray() { return __p.__vector_as_array<byte>(30); }
  /// Parameters estimated during orbit determination.
  public string OD_EST_PARAMETERS(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OD_EST_PARAMETERSLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// A priori data used for orbit determination.
  public string OD_APRIORI_DATA { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOD_APRIORI_DATABytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetOD_APRIORI_DATABytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetOD_APRIORI_DATAArray() { return __p.__vector_as_array<byte>(34); }
  /// Residuals from the orbit determination.
  public string OD_RESIDUALS { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOD_RESIDUALSBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetOD_RESIDUALSBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetOD_RESIDUALSArray() { return __p.__vector_as_array<byte>(36); }

  public static Offset<OrbitDetermination> CreateOrbitDetermination(FlatBufferBuilder builder,
      StringOffset OD_IDOffset = default(StringOffset),
      StringOffset OD_PREV_IDOffset = default(StringOffset),
      StringOffset OD_ALGORITHMOffset = default(StringOffset),
      StringOffset OD_METHODOffset = default(StringOffset),
      StringOffset OD_EPOCHOffset = default(StringOffset),
      StringOffset OD_TIME_TAGOffset = default(StringOffset),
      StringOffset OD_PROCESS_NOISEOffset = default(StringOffset),
      StringOffset OD_COV_REDUCTIONOffset = default(StringOffset),
      StringOffset OD_NOISE_MODELSOffset = default(StringOffset),
      VectorOffset OD_OBSERVATIONS_TYPEOffset = default(VectorOffset),
      int OD_OBSERVATIONS_USED = 0,
      int OD_TRACKS_USED = 0,
      StringOffset OD_DATA_WEIGHTINGOffset = default(StringOffset),
      StringOffset OD_CONVERGENCE_CRITERIAOffset = default(StringOffset),
      VectorOffset OD_EST_PARAMETERSOffset = default(VectorOffset),
      StringOffset OD_APRIORI_DATAOffset = default(StringOffset),
      StringOffset OD_RESIDUALSOffset = default(StringOffset)) {
    builder.StartTable(17);
    OrbitDetermination.AddOD_RESIDUALS(builder, OD_RESIDUALSOffset);
    OrbitDetermination.AddOD_APRIORI_DATA(builder, OD_APRIORI_DATAOffset);
    OrbitDetermination.AddOD_EST_PARAMETERS(builder, OD_EST_PARAMETERSOffset);
    OrbitDetermination.AddOD_CONVERGENCE_CRITERIA(builder, OD_CONVERGENCE_CRITERIAOffset);
    OrbitDetermination.AddOD_DATA_WEIGHTING(builder, OD_DATA_WEIGHTINGOffset);
    OrbitDetermination.AddOD_TRACKS_USED(builder, OD_TRACKS_USED);
    OrbitDetermination.AddOD_OBSERVATIONS_USED(builder, OD_OBSERVATIONS_USED);
    OrbitDetermination.AddOD_OBSERVATIONS_TYPE(builder, OD_OBSERVATIONS_TYPEOffset);
    OrbitDetermination.AddOD_NOISE_MODELS(builder, OD_NOISE_MODELSOffset);
    OrbitDetermination.AddOD_COV_REDUCTION(builder, OD_COV_REDUCTIONOffset);
    OrbitDetermination.AddOD_PROCESS_NOISE(builder, OD_PROCESS_NOISEOffset);
    OrbitDetermination.AddOD_TIME_TAG(builder, OD_TIME_TAGOffset);
    OrbitDetermination.AddOD_EPOCH(builder, OD_EPOCHOffset);
    OrbitDetermination.AddOD_METHOD(builder, OD_METHODOffset);
    OrbitDetermination.AddOD_ALGORITHM(builder, OD_ALGORITHMOffset);
    OrbitDetermination.AddOD_PREV_ID(builder, OD_PREV_IDOffset);
    OrbitDetermination.AddOD_ID(builder, OD_IDOffset);
    return OrbitDetermination.EndOrbitDetermination(builder);
  }

  public static void StartOrbitDetermination(FlatBufferBuilder builder) { builder.StartTable(17); }
  public static void AddOD_ID(FlatBufferBuilder builder, StringOffset OD_IDOffset) { builder.AddOffset(0, OD_IDOffset.Value, 0); }
  public static void AddOD_PREV_ID(FlatBufferBuilder builder, StringOffset OD_PREV_IDOffset) { builder.AddOffset(1, OD_PREV_IDOffset.Value, 0); }
  public static void AddOD_ALGORITHM(FlatBufferBuilder builder, StringOffset OD_ALGORITHMOffset) { builder.AddOffset(2, OD_ALGORITHMOffset.Value, 0); }
  public static void AddOD_METHOD(FlatBufferBuilder builder, StringOffset OD_METHODOffset) { builder.AddOffset(3, OD_METHODOffset.Value, 0); }
  public static void AddOD_EPOCH(FlatBufferBuilder builder, StringOffset OD_EPOCHOffset) { builder.AddOffset(4, OD_EPOCHOffset.Value, 0); }
  public static void AddOD_TIME_TAG(FlatBufferBuilder builder, StringOffset OD_TIME_TAGOffset) { builder.AddOffset(5, OD_TIME_TAGOffset.Value, 0); }
  public static void AddOD_PROCESS_NOISE(FlatBufferBuilder builder, StringOffset OD_PROCESS_NOISEOffset) { builder.AddOffset(6, OD_PROCESS_NOISEOffset.Value, 0); }
  public static void AddOD_COV_REDUCTION(FlatBufferBuilder builder, StringOffset OD_COV_REDUCTIONOffset) { builder.AddOffset(7, OD_COV_REDUCTIONOffset.Value, 0); }
  public static void AddOD_NOISE_MODELS(FlatBufferBuilder builder, StringOffset OD_NOISE_MODELSOffset) { builder.AddOffset(8, OD_NOISE_MODELSOffset.Value, 0); }
  public static void AddOD_OBSERVATIONS_TYPE(FlatBufferBuilder builder, VectorOffset OD_OBSERVATIONS_TYPEOffset) { builder.AddOffset(9, OD_OBSERVATIONS_TYPEOffset.Value, 0); }
  public static VectorOffset CreateOD_OBSERVATIONS_TYPEVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOD_OBSERVATIONS_TYPEVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOD_OBSERVATIONS_TYPEVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOD_OBSERVATIONS_TYPEVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOD_OBSERVATIONS_TYPEVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOD_OBSERVATIONS_USED(FlatBufferBuilder builder, int OD_OBSERVATIONS_USED) { builder.AddInt(10, OD_OBSERVATIONS_USED, 0); }
  public static void AddOD_TRACKS_USED(FlatBufferBuilder builder, int OD_TRACKS_USED) { builder.AddInt(11, OD_TRACKS_USED, 0); }
  public static void AddOD_DATA_WEIGHTING(FlatBufferBuilder builder, StringOffset OD_DATA_WEIGHTINGOffset) { builder.AddOffset(12, OD_DATA_WEIGHTINGOffset.Value, 0); }
  public static void AddOD_CONVERGENCE_CRITERIA(FlatBufferBuilder builder, StringOffset OD_CONVERGENCE_CRITERIAOffset) { builder.AddOffset(13, OD_CONVERGENCE_CRITERIAOffset.Value, 0); }
  public static void AddOD_EST_PARAMETERS(FlatBufferBuilder builder, VectorOffset OD_EST_PARAMETERSOffset) { builder.AddOffset(14, OD_EST_PARAMETERSOffset.Value, 0); }
  public static VectorOffset CreateOD_EST_PARAMETERSVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOD_EST_PARAMETERSVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOD_EST_PARAMETERSVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOD_EST_PARAMETERSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOD_EST_PARAMETERSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOD_APRIORI_DATA(FlatBufferBuilder builder, StringOffset OD_APRIORI_DATAOffset) { builder.AddOffset(15, OD_APRIORI_DATAOffset.Value, 0); }
  public static void AddOD_RESIDUALS(FlatBufferBuilder builder, StringOffset OD_RESIDUALSOffset) { builder.AddOffset(16, OD_RESIDUALSOffset.Value, 0); }
  public static Offset<OrbitDetermination> EndOrbitDetermination(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OrbitDetermination>(o);
  }
  public OrbitDeterminationT UnPack() {
    var _o = new OrbitDeterminationT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OrbitDeterminationT _o) {
    _o.OD_ID = this.OD_ID;
    _o.OD_PREV_ID = this.OD_PREV_ID;
    _o.OD_ALGORITHM = this.OD_ALGORITHM;
    _o.OD_METHOD = this.OD_METHOD;
    _o.OD_EPOCH = this.OD_EPOCH;
    _o.OD_TIME_TAG = this.OD_TIME_TAG;
    _o.OD_PROCESS_NOISE = this.OD_PROCESS_NOISE;
    _o.OD_COV_REDUCTION = this.OD_COV_REDUCTION;
    _o.OD_NOISE_MODELS = this.OD_NOISE_MODELS;
    _o.OD_OBSERVATIONS_TYPE = new List<string>();
    for (var _j = 0; _j < this.OD_OBSERVATIONS_TYPELength; ++_j) {_o.OD_OBSERVATIONS_TYPE.Add(this.OD_OBSERVATIONS_TYPE(_j));}
    _o.OD_OBSERVATIONS_USED = this.OD_OBSERVATIONS_USED;
    _o.OD_TRACKS_USED = this.OD_TRACKS_USED;
    _o.OD_DATA_WEIGHTING = this.OD_DATA_WEIGHTING;
    _o.OD_CONVERGENCE_CRITERIA = this.OD_CONVERGENCE_CRITERIA;
    _o.OD_EST_PARAMETERS = new List<string>();
    for (var _j = 0; _j < this.OD_EST_PARAMETERSLength; ++_j) {_o.OD_EST_PARAMETERS.Add(this.OD_EST_PARAMETERS(_j));}
    _o.OD_APRIORI_DATA = this.OD_APRIORI_DATA;
    _o.OD_RESIDUALS = this.OD_RESIDUALS;
  }
  public static Offset<OrbitDetermination> Pack(FlatBufferBuilder builder, OrbitDeterminationT _o) {
    if (_o == null) return default(Offset<OrbitDetermination>);
    var _OD_ID = _o.OD_ID == null ? default(StringOffset) : builder.CreateString(_o.OD_ID);
    var _OD_PREV_ID = _o.OD_PREV_ID == null ? default(StringOffset) : builder.CreateString(_o.OD_PREV_ID);
    var _OD_ALGORITHM = _o.OD_ALGORITHM == null ? default(StringOffset) : builder.CreateString(_o.OD_ALGORITHM);
    var _OD_METHOD = _o.OD_METHOD == null ? default(StringOffset) : builder.CreateString(_o.OD_METHOD);
    var _OD_EPOCH = _o.OD_EPOCH == null ? default(StringOffset) : builder.CreateString(_o.OD_EPOCH);
    var _OD_TIME_TAG = _o.OD_TIME_TAG == null ? default(StringOffset) : builder.CreateString(_o.OD_TIME_TAG);
    var _OD_PROCESS_NOISE = _o.OD_PROCESS_NOISE == null ? default(StringOffset) : builder.CreateString(_o.OD_PROCESS_NOISE);
    var _OD_COV_REDUCTION = _o.OD_COV_REDUCTION == null ? default(StringOffset) : builder.CreateString(_o.OD_COV_REDUCTION);
    var _OD_NOISE_MODELS = _o.OD_NOISE_MODELS == null ? default(StringOffset) : builder.CreateString(_o.OD_NOISE_MODELS);
    var _OD_OBSERVATIONS_TYPE = default(VectorOffset);
    if (_o.OD_OBSERVATIONS_TYPE != null) {
      var __OD_OBSERVATIONS_TYPE = new StringOffset[_o.OD_OBSERVATIONS_TYPE.Count];
      for (var _j = 0; _j < __OD_OBSERVATIONS_TYPE.Length; ++_j) { __OD_OBSERVATIONS_TYPE[_j] = builder.CreateString(_o.OD_OBSERVATIONS_TYPE[_j]); }
      _OD_OBSERVATIONS_TYPE = CreateOD_OBSERVATIONS_TYPEVector(builder, __OD_OBSERVATIONS_TYPE);
    }
    var _OD_DATA_WEIGHTING = _o.OD_DATA_WEIGHTING == null ? default(StringOffset) : builder.CreateString(_o.OD_DATA_WEIGHTING);
    var _OD_CONVERGENCE_CRITERIA = _o.OD_CONVERGENCE_CRITERIA == null ? default(StringOffset) : builder.CreateString(_o.OD_CONVERGENCE_CRITERIA);
    var _OD_EST_PARAMETERS = default(VectorOffset);
    if (_o.OD_EST_PARAMETERS != null) {
      var __OD_EST_PARAMETERS = new StringOffset[_o.OD_EST_PARAMETERS.Count];
      for (var _j = 0; _j < __OD_EST_PARAMETERS.Length; ++_j) { __OD_EST_PARAMETERS[_j] = builder.CreateString(_o.OD_EST_PARAMETERS[_j]); }
      _OD_EST_PARAMETERS = CreateOD_EST_PARAMETERSVector(builder, __OD_EST_PARAMETERS);
    }
    var _OD_APRIORI_DATA = _o.OD_APRIORI_DATA == null ? default(StringOffset) : builder.CreateString(_o.OD_APRIORI_DATA);
    var _OD_RESIDUALS = _o.OD_RESIDUALS == null ? default(StringOffset) : builder.CreateString(_o.OD_RESIDUALS);
    return CreateOrbitDetermination(
      builder,
      _OD_ID,
      _OD_PREV_ID,
      _OD_ALGORITHM,
      _OD_METHOD,
      _OD_EPOCH,
      _OD_TIME_TAG,
      _OD_PROCESS_NOISE,
      _OD_COV_REDUCTION,
      _OD_NOISE_MODELS,
      _OD_OBSERVATIONS_TYPE,
      _o.OD_OBSERVATIONS_USED,
      _o.OD_TRACKS_USED,
      _OD_DATA_WEIGHTING,
      _OD_CONVERGENCE_CRITERIA,
      _OD_EST_PARAMETERS,
      _OD_APRIORI_DATA,
      _OD_RESIDUALS);
  }
}

public class OrbitDeterminationT
{
  public string OD_ID { get; set; }
  public string OD_PREV_ID { get; set; }
  public string OD_ALGORITHM { get; set; }
  public string OD_METHOD { get; set; }
  public string OD_EPOCH { get; set; }
  public string OD_TIME_TAG { get; set; }
  public string OD_PROCESS_NOISE { get; set; }
  public string OD_COV_REDUCTION { get; set; }
  public string OD_NOISE_MODELS { get; set; }
  public List<string> OD_OBSERVATIONS_TYPE { get; set; }
  public int OD_OBSERVATIONS_USED { get; set; }
  public int OD_TRACKS_USED { get; set; }
  public string OD_DATA_WEIGHTING { get; set; }
  public string OD_CONVERGENCE_CRITERIA { get; set; }
  public List<string> OD_EST_PARAMETERS { get; set; }
  public string OD_APRIORI_DATA { get; set; }
  public string OD_RESIDUALS { get; set; }

  public OrbitDeterminationT() {
    this.OD_ID = null;
    this.OD_PREV_ID = null;
    this.OD_ALGORITHM = null;
    this.OD_METHOD = null;
    this.OD_EPOCH = null;
    this.OD_TIME_TAG = null;
    this.OD_PROCESS_NOISE = null;
    this.OD_COV_REDUCTION = null;
    this.OD_NOISE_MODELS = null;
    this.OD_OBSERVATIONS_TYPE = null;
    this.OD_OBSERVATIONS_USED = 0;
    this.OD_TRACKS_USED = 0;
    this.OD_DATA_WEIGHTING = null;
    this.OD_CONVERGENCE_CRITERIA = null;
    this.OD_EST_PARAMETERS = null;
    this.OD_APRIORI_DATA = null;
    this.OD_RESIDUALS = null;
  }
}


static public class OrbitDeterminationVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*OD_ID*/, false)
      && verifier.VerifyString(tablePos, 6 /*OD_PREV_ID*/, false)
      && verifier.VerifyString(tablePos, 8 /*OD_ALGORITHM*/, false)
      && verifier.VerifyString(tablePos, 10 /*OD_METHOD*/, false)
      && verifier.VerifyString(tablePos, 12 /*OD_EPOCH*/, false)
      && verifier.VerifyString(tablePos, 14 /*OD_TIME_TAG*/, false)
      && verifier.VerifyString(tablePos, 16 /*OD_PROCESS_NOISE*/, false)
      && verifier.VerifyString(tablePos, 18 /*OD_COV_REDUCTION*/, false)
      && verifier.VerifyString(tablePos, 20 /*OD_NOISE_MODELS*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 22 /*OD_OBSERVATIONS_TYPE*/, false)
      && verifier.VerifyField(tablePos, 24 /*OD_OBSERVATIONS_USED*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*OD_TRACKS_USED*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 28 /*OD_DATA_WEIGHTING*/, false)
      && verifier.VerifyString(tablePos, 30 /*OD_CONVERGENCE_CRITERIA*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*OD_EST_PARAMETERS*/, false)
      && verifier.VerifyString(tablePos, 34 /*OD_APRIORI_DATA*/, false)
      && verifier.VerifyString(tablePos, 36 /*OD_RESIDUALS*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
