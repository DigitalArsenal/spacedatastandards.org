// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhysicalProperties : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PhysicalProperties GetRootAsPhysicalProperties(ByteBuffer _bb) { return GetRootAsPhysicalProperties(_bb, new PhysicalProperties()); }
  public static PhysicalProperties GetRootAsPhysicalProperties(ByteBuffer _bb, PhysicalProperties obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhysicalProperties __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Comments in the Physical Properties section.
  public string COMMENT(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int COMMENTLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Wet mass of the space object.
  public double WET_MASS { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Dry mass of the space object.
  public double DRY_MASS { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Units for mass values.
  public string MASS_UNITS { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMASS_UNITSBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMASS_UNITSBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMASS_UNITSArray() { return __p.__vector_as_array<byte>(10); }
  /// Quaternion component q1 of orientation from OEB to EME2000.
  public double OEB_Q1 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Quaternion component q2.
  public double OEB_Q2 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Quaternion component q3.
  public double OEB_Q3 { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Quaternion scalar component qc.
  public double OEB_QC { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum dimension of the object along OEB frame axes.
  public double OEB_MAX { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Intermediate dimension along OEB frame axes.
  public double OEB_INT { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum dimension of the object along OEB frame axes.
  public double OEB_MIN { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Area along OEB_MAX axis.
  public double AREA_ALONG_OEB_MAX { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Area along OEB_INT axis.
  public double AREA_ALONG_OEB_INT { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Area along OEB_MIN axis.
  public double AREA_ALONG_OEB_MIN { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Units for area values.
  public string AREA_UNITS { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAREA_UNITSBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetAREA_UNITSBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetAREA_UNITSArray() { return __p.__vector_as_array<byte>(32); }
  /// Constant area for drag computations.
  public double DRAG_CONST_AREA { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Nominal drag coefficient.
  public double DRAG_COEFF_NOM { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Uncertainty in the drag coefficient.
  public double DRAG_UNCERTAINTY { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Constant area for solar radiation pressure computations.
  public double SRP_CONST_AREA { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Nominal solar radiation pressure coefficient.
  public double SOLAR_RAD_COEFF { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Uncertainty in the solar radiation pressure coefficient.
  public double SRP_UNCERTAINTY { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<PhysicalProperties> CreatePhysicalProperties(FlatBufferBuilder builder,
      VectorOffset COMMENTOffset = default(VectorOffset),
      double WET_MASS = 0.0,
      double DRY_MASS = 0.0,
      StringOffset MASS_UNITSOffset = default(StringOffset),
      double OEB_Q1 = 0.0,
      double OEB_Q2 = 0.0,
      double OEB_Q3 = 0.0,
      double OEB_QC = 0.0,
      double OEB_MAX = 0.0,
      double OEB_INT = 0.0,
      double OEB_MIN = 0.0,
      double AREA_ALONG_OEB_MAX = 0.0,
      double AREA_ALONG_OEB_INT = 0.0,
      double AREA_ALONG_OEB_MIN = 0.0,
      StringOffset AREA_UNITSOffset = default(StringOffset),
      double DRAG_CONST_AREA = 0.0,
      double DRAG_COEFF_NOM = 0.0,
      double DRAG_UNCERTAINTY = 0.0,
      double SRP_CONST_AREA = 0.0,
      double SOLAR_RAD_COEFF = 0.0,
      double SRP_UNCERTAINTY = 0.0) {
    builder.StartTable(21);
    PhysicalProperties.AddSRP_UNCERTAINTY(builder, SRP_UNCERTAINTY);
    PhysicalProperties.AddSOLAR_RAD_COEFF(builder, SOLAR_RAD_COEFF);
    PhysicalProperties.AddSRP_CONST_AREA(builder, SRP_CONST_AREA);
    PhysicalProperties.AddDRAG_UNCERTAINTY(builder, DRAG_UNCERTAINTY);
    PhysicalProperties.AddDRAG_COEFF_NOM(builder, DRAG_COEFF_NOM);
    PhysicalProperties.AddDRAG_CONST_AREA(builder, DRAG_CONST_AREA);
    PhysicalProperties.AddAREA_ALONG_OEB_MIN(builder, AREA_ALONG_OEB_MIN);
    PhysicalProperties.AddAREA_ALONG_OEB_INT(builder, AREA_ALONG_OEB_INT);
    PhysicalProperties.AddAREA_ALONG_OEB_MAX(builder, AREA_ALONG_OEB_MAX);
    PhysicalProperties.AddOEB_MIN(builder, OEB_MIN);
    PhysicalProperties.AddOEB_INT(builder, OEB_INT);
    PhysicalProperties.AddOEB_MAX(builder, OEB_MAX);
    PhysicalProperties.AddOEB_QC(builder, OEB_QC);
    PhysicalProperties.AddOEB_Q3(builder, OEB_Q3);
    PhysicalProperties.AddOEB_Q2(builder, OEB_Q2);
    PhysicalProperties.AddOEB_Q1(builder, OEB_Q1);
    PhysicalProperties.AddDRY_MASS(builder, DRY_MASS);
    PhysicalProperties.AddWET_MASS(builder, WET_MASS);
    PhysicalProperties.AddAREA_UNITS(builder, AREA_UNITSOffset);
    PhysicalProperties.AddMASS_UNITS(builder, MASS_UNITSOffset);
    PhysicalProperties.AddCOMMENT(builder, COMMENTOffset);
    return PhysicalProperties.EndPhysicalProperties(builder);
  }

  public static void StartPhysicalProperties(FlatBufferBuilder builder) { builder.StartTable(21); }
  public static void AddCOMMENT(FlatBufferBuilder builder, VectorOffset COMMENTOffset) { builder.AddOffset(0, COMMENTOffset.Value, 0); }
  public static VectorOffset CreateCOMMENTVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCOMMENTVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOMMENTVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOMMENTVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCOMMENTVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWET_MASS(FlatBufferBuilder builder, double WET_MASS) { builder.AddDouble(1, WET_MASS, 0.0); }
  public static void AddDRY_MASS(FlatBufferBuilder builder, double DRY_MASS) { builder.AddDouble(2, DRY_MASS, 0.0); }
  public static void AddMASS_UNITS(FlatBufferBuilder builder, StringOffset MASS_UNITSOffset) { builder.AddOffset(3, MASS_UNITSOffset.Value, 0); }
  public static void AddOEB_Q1(FlatBufferBuilder builder, double OEB_Q1) { builder.AddDouble(4, OEB_Q1, 0.0); }
  public static void AddOEB_Q2(FlatBufferBuilder builder, double OEB_Q2) { builder.AddDouble(5, OEB_Q2, 0.0); }
  public static void AddOEB_Q3(FlatBufferBuilder builder, double OEB_Q3) { builder.AddDouble(6, OEB_Q3, 0.0); }
  public static void AddOEB_QC(FlatBufferBuilder builder, double OEB_QC) { builder.AddDouble(7, OEB_QC, 0.0); }
  public static void AddOEB_MAX(FlatBufferBuilder builder, double OEB_MAX) { builder.AddDouble(8, OEB_MAX, 0.0); }
  public static void AddOEB_INT(FlatBufferBuilder builder, double OEB_INT) { builder.AddDouble(9, OEB_INT, 0.0); }
  public static void AddOEB_MIN(FlatBufferBuilder builder, double OEB_MIN) { builder.AddDouble(10, OEB_MIN, 0.0); }
  public static void AddAREA_ALONG_OEB_MAX(FlatBufferBuilder builder, double AREA_ALONG_OEB_MAX) { builder.AddDouble(11, AREA_ALONG_OEB_MAX, 0.0); }
  public static void AddAREA_ALONG_OEB_INT(FlatBufferBuilder builder, double AREA_ALONG_OEB_INT) { builder.AddDouble(12, AREA_ALONG_OEB_INT, 0.0); }
  public static void AddAREA_ALONG_OEB_MIN(FlatBufferBuilder builder, double AREA_ALONG_OEB_MIN) { builder.AddDouble(13, AREA_ALONG_OEB_MIN, 0.0); }
  public static void AddAREA_UNITS(FlatBufferBuilder builder, StringOffset AREA_UNITSOffset) { builder.AddOffset(14, AREA_UNITSOffset.Value, 0); }
  public static void AddDRAG_CONST_AREA(FlatBufferBuilder builder, double DRAG_CONST_AREA) { builder.AddDouble(15, DRAG_CONST_AREA, 0.0); }
  public static void AddDRAG_COEFF_NOM(FlatBufferBuilder builder, double DRAG_COEFF_NOM) { builder.AddDouble(16, DRAG_COEFF_NOM, 0.0); }
  public static void AddDRAG_UNCERTAINTY(FlatBufferBuilder builder, double DRAG_UNCERTAINTY) { builder.AddDouble(17, DRAG_UNCERTAINTY, 0.0); }
  public static void AddSRP_CONST_AREA(FlatBufferBuilder builder, double SRP_CONST_AREA) { builder.AddDouble(18, SRP_CONST_AREA, 0.0); }
  public static void AddSOLAR_RAD_COEFF(FlatBufferBuilder builder, double SOLAR_RAD_COEFF) { builder.AddDouble(19, SOLAR_RAD_COEFF, 0.0); }
  public static void AddSRP_UNCERTAINTY(FlatBufferBuilder builder, double SRP_UNCERTAINTY) { builder.AddDouble(20, SRP_UNCERTAINTY, 0.0); }
  public static Offset<PhysicalProperties> EndPhysicalProperties(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PhysicalProperties>(o);
  }
  public PhysicalPropertiesT UnPack() {
    var _o = new PhysicalPropertiesT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhysicalPropertiesT _o) {
    _o.COMMENT = new List<string>();
    for (var _j = 0; _j < this.COMMENTLength; ++_j) {_o.COMMENT.Add(this.COMMENT(_j));}
    _o.WET_MASS = this.WET_MASS;
    _o.DRY_MASS = this.DRY_MASS;
    _o.MASS_UNITS = this.MASS_UNITS;
    _o.OEB_Q1 = this.OEB_Q1;
    _o.OEB_Q2 = this.OEB_Q2;
    _o.OEB_Q3 = this.OEB_Q3;
    _o.OEB_QC = this.OEB_QC;
    _o.OEB_MAX = this.OEB_MAX;
    _o.OEB_INT = this.OEB_INT;
    _o.OEB_MIN = this.OEB_MIN;
    _o.AREA_ALONG_OEB_MAX = this.AREA_ALONG_OEB_MAX;
    _o.AREA_ALONG_OEB_INT = this.AREA_ALONG_OEB_INT;
    _o.AREA_ALONG_OEB_MIN = this.AREA_ALONG_OEB_MIN;
    _o.AREA_UNITS = this.AREA_UNITS;
    _o.DRAG_CONST_AREA = this.DRAG_CONST_AREA;
    _o.DRAG_COEFF_NOM = this.DRAG_COEFF_NOM;
    _o.DRAG_UNCERTAINTY = this.DRAG_UNCERTAINTY;
    _o.SRP_CONST_AREA = this.SRP_CONST_AREA;
    _o.SOLAR_RAD_COEFF = this.SOLAR_RAD_COEFF;
    _o.SRP_UNCERTAINTY = this.SRP_UNCERTAINTY;
  }
  public static Offset<PhysicalProperties> Pack(FlatBufferBuilder builder, PhysicalPropertiesT _o) {
    if (_o == null) return default(Offset<PhysicalProperties>);
    var _COMMENT = default(VectorOffset);
    if (_o.COMMENT != null) {
      var __COMMENT = new StringOffset[_o.COMMENT.Count];
      for (var _j = 0; _j < __COMMENT.Length; ++_j) { __COMMENT[_j] = builder.CreateString(_o.COMMENT[_j]); }
      _COMMENT = CreateCOMMENTVector(builder, __COMMENT);
    }
    var _MASS_UNITS = _o.MASS_UNITS == null ? default(StringOffset) : builder.CreateString(_o.MASS_UNITS);
    var _AREA_UNITS = _o.AREA_UNITS == null ? default(StringOffset) : builder.CreateString(_o.AREA_UNITS);
    return CreatePhysicalProperties(
      builder,
      _COMMENT,
      _o.WET_MASS,
      _o.DRY_MASS,
      _MASS_UNITS,
      _o.OEB_Q1,
      _o.OEB_Q2,
      _o.OEB_Q3,
      _o.OEB_QC,
      _o.OEB_MAX,
      _o.OEB_INT,
      _o.OEB_MIN,
      _o.AREA_ALONG_OEB_MAX,
      _o.AREA_ALONG_OEB_INT,
      _o.AREA_ALONG_OEB_MIN,
      _AREA_UNITS,
      _o.DRAG_CONST_AREA,
      _o.DRAG_COEFF_NOM,
      _o.DRAG_UNCERTAINTY,
      _o.SRP_CONST_AREA,
      _o.SOLAR_RAD_COEFF,
      _o.SRP_UNCERTAINTY);
  }
}

public class PhysicalPropertiesT
{
  public List<string> COMMENT { get; set; }
  public double WET_MASS { get; set; }
  public double DRY_MASS { get; set; }
  public string MASS_UNITS { get; set; }
  public double OEB_Q1 { get; set; }
  public double OEB_Q2 { get; set; }
  public double OEB_Q3 { get; set; }
  public double OEB_QC { get; set; }
  public double OEB_MAX { get; set; }
  public double OEB_INT { get; set; }
  public double OEB_MIN { get; set; }
  public double AREA_ALONG_OEB_MAX { get; set; }
  public double AREA_ALONG_OEB_INT { get; set; }
  public double AREA_ALONG_OEB_MIN { get; set; }
  public string AREA_UNITS { get; set; }
  public double DRAG_CONST_AREA { get; set; }
  public double DRAG_COEFF_NOM { get; set; }
  public double DRAG_UNCERTAINTY { get; set; }
  public double SRP_CONST_AREA { get; set; }
  public double SOLAR_RAD_COEFF { get; set; }
  public double SRP_UNCERTAINTY { get; set; }

  public PhysicalPropertiesT() {
    this.COMMENT = null;
    this.WET_MASS = 0.0;
    this.DRY_MASS = 0.0;
    this.MASS_UNITS = null;
    this.OEB_Q1 = 0.0;
    this.OEB_Q2 = 0.0;
    this.OEB_Q3 = 0.0;
    this.OEB_QC = 0.0;
    this.OEB_MAX = 0.0;
    this.OEB_INT = 0.0;
    this.OEB_MIN = 0.0;
    this.AREA_ALONG_OEB_MAX = 0.0;
    this.AREA_ALONG_OEB_INT = 0.0;
    this.AREA_ALONG_OEB_MIN = 0.0;
    this.AREA_UNITS = null;
    this.DRAG_CONST_AREA = 0.0;
    this.DRAG_COEFF_NOM = 0.0;
    this.DRAG_UNCERTAINTY = 0.0;
    this.SRP_CONST_AREA = 0.0;
    this.SOLAR_RAD_COEFF = 0.0;
    this.SRP_UNCERTAINTY = 0.0;
  }
}


static public class PhysicalPropertiesVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfStrings(tablePos, 4 /*COMMENT*/, false)
      && verifier.VerifyField(tablePos, 6 /*WET_MASS*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*DRY_MASS*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 10 /*MASS_UNITS*/, false)
      && verifier.VerifyField(tablePos, 12 /*OEB_Q1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*OEB_Q2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*OEB_Q3*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*OEB_QC*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*OEB_MAX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*OEB_INT*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*OEB_MIN*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*AREA_ALONG_OEB_MAX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*AREA_ALONG_OEB_INT*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*AREA_ALONG_OEB_MIN*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 32 /*AREA_UNITS*/, false)
      && verifier.VerifyField(tablePos, 34 /*DRAG_CONST_AREA*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*DRAG_COEFF_NOM*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*DRAG_UNCERTAINTY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*SRP_CONST_AREA*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*SOLAR_RAD_COEFF*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*SRP_UNCERTAINTY*/, 8 /*double*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
