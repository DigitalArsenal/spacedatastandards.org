// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Integrated Device Message
public struct IDM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static IDM GetRootAsIDM(ByteBuffer _bb) { return GetRootAsIDM(_bb, new IDM()); }
  public static IDM GetRootAsIDM(ByteBuffer _bb, IDM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool IDMBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$IDM"); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IDM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier for the EMT
  public string ID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIDArray() { return __p.__vector_as_array<byte>(4); }
  /// Name of the EMT
  public string NAME { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNAMEBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNAMEBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNAMEArray() { return __p.__vector_as_array<byte>(6); }
  /// Mode of the data (real, simulated, synthetic)
  public DataMode DATA_MODE { get { int o = __p.__offset(8); return o != 0 ? (DataMode)__p.bb.GetSbyte(o + __p.bb_pos) : DataMode.REAL; } }
  /// Uplink frequency range
  public FrequencyRange? UPLINK { get { int o = __p.__offset(10); return o != 0 ? (FrequencyRange?)(new FrequencyRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Downlink frequency range
  public FrequencyRange? DOWNLINK { get { int o = __p.__offset(12); return o != 0 ? (FrequencyRange?)(new FrequencyRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Beacon frequency range
  public FrequencyRange? BEACON { get { int o = __p.__offset(14); return o != 0 ? (FrequencyRange?)(new FrequencyRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Bands associated with the EMT
  public Band? BAND(int j) { int o = __p.__offset(16); return o != 0 ? (Band?)(new Band()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BANDLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Type of polarization used
  public PolarizationType POLARIZATION_TYPE { get { int o = __p.__offset(18); return o != 0 ? (PolarizationType)__p.bb.GetSbyte(o + __p.bb_pos) : PolarizationType.linear; } }
  /// Simple polarization configuration
  public SimplePolarization SIMPLE_POLARIZATION { get { int o = __p.__offset(20); return o != 0 ? (SimplePolarization)__p.bb.GetSbyte(o + __p.bb_pos) : SimplePolarization.vertical; } }
  /// Stokes parameters for polarization characterization
  public StokesParameters? STOKES_PARAMETERS { get { int o = __p.__offset(22); return o != 0 ? (StokesParameters?)(new StokesParameters()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Power required in Watts
  public double POWER_REQUIRED { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Type of power (eg. AC or DC)
  public string POWER_TYPE { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPOWER_TYPEBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetPOWER_TYPEBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetPOWER_TYPEArray() { return __p.__vector_as_array<byte>(26); }
  /// Indicates if the EMT can transmit
  public bool TRANSMIT { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Indicates if the EMT can receive
  public bool RECEIVE { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Type of the sensor
  public DeviceType SENSOR_TYPE { get { int o = __p.__offset(32); return o != 0 ? (DeviceType)__p.bb.GetSbyte(o + __p.bb_pos) : DeviceType.UNKNOWN; } }
  /// Source of the data
  public string SOURCE { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSOURCEBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetSOURCEBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetSOURCEArray() { return __p.__vector_as_array<byte>(34); }
  /// Timestamp of the last observation
  public string LAST_OB_TIME { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLAST_OB_TIMEBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetLAST_OB_TIMEBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetLAST_OB_TIMEArray() { return __p.__vector_as_array<byte>(36); }
  /// Lower left elevation limit
  public double LOWER_LEFT_ELEVATION_LIMIT { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Upper left azimuth limit
  public double UPPER_LEFT_AZIMUTH_LIMIT { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Lower right elevation limit
  public double LOWER_RIGHT_ELEVATION_LIMIT { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Lower left azimuth limit
  public double LOWER_LEFT_AZIMUTH_LIMIT { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Upper right elevation limit
  public double UPPER_RIGHT_ELEVATION_LIMIT { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Upper right azimuth limit
  public double UPPER_RIGHT_AZIMUTH_LIMIT { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Lower right azimuth limit
  public double LOWER_RIGHT_AZIMUTH_LIMIT { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Upper left elevation limit
  public double UPPER_LEFT_ELEVATION_LIMIT { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Right geostationary belt limit
  public double RIGHT_GEO_BELT_LIMIT { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Left geostationary belt limit
  public double LEFT_GEO_BELT_LIMIT { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Magnitude limit of the sensor
  public double MAGNITUDE_LIMIT { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Indicates if the site is taskable
  public bool TASKABLE { get { int o = __p.__offset(60); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<IDM> CreateIDM(FlatBufferBuilder builder,
      StringOffset IDOffset = default(StringOffset),
      StringOffset NAMEOffset = default(StringOffset),
      DataMode DATA_MODE = DataMode.REAL,
      Offset<FrequencyRange> UPLINKOffset = default(Offset<FrequencyRange>),
      Offset<FrequencyRange> DOWNLINKOffset = default(Offset<FrequencyRange>),
      Offset<FrequencyRange> BEACONOffset = default(Offset<FrequencyRange>),
      VectorOffset BANDOffset = default(VectorOffset),
      PolarizationType POLARIZATION_TYPE = PolarizationType.linear,
      SimplePolarization SIMPLE_POLARIZATION = SimplePolarization.vertical,
      Offset<StokesParameters> STOKES_PARAMETERSOffset = default(Offset<StokesParameters>),
      double POWER_REQUIRED = 0.0,
      StringOffset POWER_TYPEOffset = default(StringOffset),
      bool TRANSMIT = false,
      bool RECEIVE = false,
      DeviceType SENSOR_TYPE = DeviceType.UNKNOWN,
      StringOffset SOURCEOffset = default(StringOffset),
      StringOffset LAST_OB_TIMEOffset = default(StringOffset),
      double LOWER_LEFT_ELEVATION_LIMIT = 0.0,
      double UPPER_LEFT_AZIMUTH_LIMIT = 0.0,
      double LOWER_RIGHT_ELEVATION_LIMIT = 0.0,
      double LOWER_LEFT_AZIMUTH_LIMIT = 0.0,
      double UPPER_RIGHT_ELEVATION_LIMIT = 0.0,
      double UPPER_RIGHT_AZIMUTH_LIMIT = 0.0,
      double LOWER_RIGHT_AZIMUTH_LIMIT = 0.0,
      double UPPER_LEFT_ELEVATION_LIMIT = 0.0,
      double RIGHT_GEO_BELT_LIMIT = 0.0,
      double LEFT_GEO_BELT_LIMIT = 0.0,
      double MAGNITUDE_LIMIT = 0.0,
      bool TASKABLE = false) {
    builder.StartTable(29);
    IDM.AddMAGNITUDE_LIMIT(builder, MAGNITUDE_LIMIT);
    IDM.AddLEFT_GEO_BELT_LIMIT(builder, LEFT_GEO_BELT_LIMIT);
    IDM.AddRIGHT_GEO_BELT_LIMIT(builder, RIGHT_GEO_BELT_LIMIT);
    IDM.AddUPPER_LEFT_ELEVATION_LIMIT(builder, UPPER_LEFT_ELEVATION_LIMIT);
    IDM.AddLOWER_RIGHT_AZIMUTH_LIMIT(builder, LOWER_RIGHT_AZIMUTH_LIMIT);
    IDM.AddUPPER_RIGHT_AZIMUTH_LIMIT(builder, UPPER_RIGHT_AZIMUTH_LIMIT);
    IDM.AddUPPER_RIGHT_ELEVATION_LIMIT(builder, UPPER_RIGHT_ELEVATION_LIMIT);
    IDM.AddLOWER_LEFT_AZIMUTH_LIMIT(builder, LOWER_LEFT_AZIMUTH_LIMIT);
    IDM.AddLOWER_RIGHT_ELEVATION_LIMIT(builder, LOWER_RIGHT_ELEVATION_LIMIT);
    IDM.AddUPPER_LEFT_AZIMUTH_LIMIT(builder, UPPER_LEFT_AZIMUTH_LIMIT);
    IDM.AddLOWER_LEFT_ELEVATION_LIMIT(builder, LOWER_LEFT_ELEVATION_LIMIT);
    IDM.AddPOWER_REQUIRED(builder, POWER_REQUIRED);
    IDM.AddLAST_OB_TIME(builder, LAST_OB_TIMEOffset);
    IDM.AddSOURCE(builder, SOURCEOffset);
    IDM.AddPOWER_TYPE(builder, POWER_TYPEOffset);
    IDM.AddSTOKES_PARAMETERS(builder, STOKES_PARAMETERSOffset);
    IDM.AddBAND(builder, BANDOffset);
    IDM.AddBEACON(builder, BEACONOffset);
    IDM.AddDOWNLINK(builder, DOWNLINKOffset);
    IDM.AddUPLINK(builder, UPLINKOffset);
    IDM.AddNAME(builder, NAMEOffset);
    IDM.AddID(builder, IDOffset);
    IDM.AddTASKABLE(builder, TASKABLE);
    IDM.AddSENSOR_TYPE(builder, SENSOR_TYPE);
    IDM.AddRECEIVE(builder, RECEIVE);
    IDM.AddTRANSMIT(builder, TRANSMIT);
    IDM.AddSIMPLE_POLARIZATION(builder, SIMPLE_POLARIZATION);
    IDM.AddPOLARIZATION_TYPE(builder, POLARIZATION_TYPE);
    IDM.AddDATA_MODE(builder, DATA_MODE);
    return IDM.EndIDM(builder);
  }

  public static void StartIDM(FlatBufferBuilder builder) { builder.StartTable(29); }
  public static void AddID(FlatBufferBuilder builder, StringOffset IDOffset) { builder.AddOffset(0, IDOffset.Value, 0); }
  public static void AddNAME(FlatBufferBuilder builder, StringOffset NAMEOffset) { builder.AddOffset(1, NAMEOffset.Value, 0); }
  public static void AddDATA_MODE(FlatBufferBuilder builder, DataMode DATA_MODE) { builder.AddSbyte(2, (sbyte)DATA_MODE, 0); }
  public static void AddUPLINK(FlatBufferBuilder builder, Offset<FrequencyRange> UPLINKOffset) { builder.AddOffset(3, UPLINKOffset.Value, 0); }
  public static void AddDOWNLINK(FlatBufferBuilder builder, Offset<FrequencyRange> DOWNLINKOffset) { builder.AddOffset(4, DOWNLINKOffset.Value, 0); }
  public static void AddBEACON(FlatBufferBuilder builder, Offset<FrequencyRange> BEACONOffset) { builder.AddOffset(5, BEACONOffset.Value, 0); }
  public static void AddBAND(FlatBufferBuilder builder, VectorOffset BANDOffset) { builder.AddOffset(6, BANDOffset.Value, 0); }
  public static VectorOffset CreateBANDVector(FlatBufferBuilder builder, Offset<Band>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBANDVectorBlock(FlatBufferBuilder builder, Offset<Band>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBANDVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Band>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBANDVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Band>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBANDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPOLARIZATION_TYPE(FlatBufferBuilder builder, PolarizationType POLARIZATION_TYPE) { builder.AddSbyte(7, (sbyte)POLARIZATION_TYPE, 0); }
  public static void AddSIMPLE_POLARIZATION(FlatBufferBuilder builder, SimplePolarization SIMPLE_POLARIZATION) { builder.AddSbyte(8, (sbyte)SIMPLE_POLARIZATION, 0); }
  public static void AddSTOKES_PARAMETERS(FlatBufferBuilder builder, Offset<StokesParameters> STOKES_PARAMETERSOffset) { builder.AddOffset(9, STOKES_PARAMETERSOffset.Value, 0); }
  public static void AddPOWER_REQUIRED(FlatBufferBuilder builder, double POWER_REQUIRED) { builder.AddDouble(10, POWER_REQUIRED, 0.0); }
  public static void AddPOWER_TYPE(FlatBufferBuilder builder, StringOffset POWER_TYPEOffset) { builder.AddOffset(11, POWER_TYPEOffset.Value, 0); }
  public static void AddTRANSMIT(FlatBufferBuilder builder, bool TRANSMIT) { builder.AddBool(12, TRANSMIT, false); }
  public static void AddRECEIVE(FlatBufferBuilder builder, bool RECEIVE) { builder.AddBool(13, RECEIVE, false); }
  public static void AddSENSOR_TYPE(FlatBufferBuilder builder, DeviceType SENSOR_TYPE) { builder.AddSbyte(14, (sbyte)SENSOR_TYPE, 0); }
  public static void AddSOURCE(FlatBufferBuilder builder, StringOffset SOURCEOffset) { builder.AddOffset(15, SOURCEOffset.Value, 0); }
  public static void AddLAST_OB_TIME(FlatBufferBuilder builder, StringOffset LAST_OB_TIMEOffset) { builder.AddOffset(16, LAST_OB_TIMEOffset.Value, 0); }
  public static void AddLOWER_LEFT_ELEVATION_LIMIT(FlatBufferBuilder builder, double LOWER_LEFT_ELEVATION_LIMIT) { builder.AddDouble(17, LOWER_LEFT_ELEVATION_LIMIT, 0.0); }
  public static void AddUPPER_LEFT_AZIMUTH_LIMIT(FlatBufferBuilder builder, double UPPER_LEFT_AZIMUTH_LIMIT) { builder.AddDouble(18, UPPER_LEFT_AZIMUTH_LIMIT, 0.0); }
  public static void AddLOWER_RIGHT_ELEVATION_LIMIT(FlatBufferBuilder builder, double LOWER_RIGHT_ELEVATION_LIMIT) { builder.AddDouble(19, LOWER_RIGHT_ELEVATION_LIMIT, 0.0); }
  public static void AddLOWER_LEFT_AZIMUTH_LIMIT(FlatBufferBuilder builder, double LOWER_LEFT_AZIMUTH_LIMIT) { builder.AddDouble(20, LOWER_LEFT_AZIMUTH_LIMIT, 0.0); }
  public static void AddUPPER_RIGHT_ELEVATION_LIMIT(FlatBufferBuilder builder, double UPPER_RIGHT_ELEVATION_LIMIT) { builder.AddDouble(21, UPPER_RIGHT_ELEVATION_LIMIT, 0.0); }
  public static void AddUPPER_RIGHT_AZIMUTH_LIMIT(FlatBufferBuilder builder, double UPPER_RIGHT_AZIMUTH_LIMIT) { builder.AddDouble(22, UPPER_RIGHT_AZIMUTH_LIMIT, 0.0); }
  public static void AddLOWER_RIGHT_AZIMUTH_LIMIT(FlatBufferBuilder builder, double LOWER_RIGHT_AZIMUTH_LIMIT) { builder.AddDouble(23, LOWER_RIGHT_AZIMUTH_LIMIT, 0.0); }
  public static void AddUPPER_LEFT_ELEVATION_LIMIT(FlatBufferBuilder builder, double UPPER_LEFT_ELEVATION_LIMIT) { builder.AddDouble(24, UPPER_LEFT_ELEVATION_LIMIT, 0.0); }
  public static void AddRIGHT_GEO_BELT_LIMIT(FlatBufferBuilder builder, double RIGHT_GEO_BELT_LIMIT) { builder.AddDouble(25, RIGHT_GEO_BELT_LIMIT, 0.0); }
  public static void AddLEFT_GEO_BELT_LIMIT(FlatBufferBuilder builder, double LEFT_GEO_BELT_LIMIT) { builder.AddDouble(26, LEFT_GEO_BELT_LIMIT, 0.0); }
  public static void AddMAGNITUDE_LIMIT(FlatBufferBuilder builder, double MAGNITUDE_LIMIT) { builder.AddDouble(27, MAGNITUDE_LIMIT, 0.0); }
  public static void AddTASKABLE(FlatBufferBuilder builder, bool TASKABLE) { builder.AddBool(28, TASKABLE, false); }
  public static Offset<IDM> EndIDM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<IDM>(o);
  }
  public static void FinishIDMBuffer(FlatBufferBuilder builder, Offset<IDM> offset) { builder.Finish(offset.Value, "$IDM"); }
  public static void FinishSizePrefixedIDMBuffer(FlatBufferBuilder builder, Offset<IDM> offset) { builder.FinishSizePrefixed(offset.Value, "$IDM"); }
  public IDMT UnPack() {
    var _o = new IDMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IDMT _o) {
    _o.ID = this.ID;
    _o.NAME = this.NAME;
    _o.DATA_MODE = this.DATA_MODE;
    _o.UPLINK = this.UPLINK.HasValue ? this.UPLINK.Value.UnPack() : null;
    _o.DOWNLINK = this.DOWNLINK.HasValue ? this.DOWNLINK.Value.UnPack() : null;
    _o.BEACON = this.BEACON.HasValue ? this.BEACON.Value.UnPack() : null;
    _o.BAND = new List<BandT>();
    for (var _j = 0; _j < this.BANDLength; ++_j) {_o.BAND.Add(this.BAND(_j).HasValue ? this.BAND(_j).Value.UnPack() : null);}
    _o.POLARIZATION_TYPE = this.POLARIZATION_TYPE;
    _o.SIMPLE_POLARIZATION = this.SIMPLE_POLARIZATION;
    _o.STOKES_PARAMETERS = this.STOKES_PARAMETERS.HasValue ? this.STOKES_PARAMETERS.Value.UnPack() : null;
    _o.POWER_REQUIRED = this.POWER_REQUIRED;
    _o.POWER_TYPE = this.POWER_TYPE;
    _o.TRANSMIT = this.TRANSMIT;
    _o.RECEIVE = this.RECEIVE;
    _o.SENSOR_TYPE = this.SENSOR_TYPE;
    _o.SOURCE = this.SOURCE;
    _o.LAST_OB_TIME = this.LAST_OB_TIME;
    _o.LOWER_LEFT_ELEVATION_LIMIT = this.LOWER_LEFT_ELEVATION_LIMIT;
    _o.UPPER_LEFT_AZIMUTH_LIMIT = this.UPPER_LEFT_AZIMUTH_LIMIT;
    _o.LOWER_RIGHT_ELEVATION_LIMIT = this.LOWER_RIGHT_ELEVATION_LIMIT;
    _o.LOWER_LEFT_AZIMUTH_LIMIT = this.LOWER_LEFT_AZIMUTH_LIMIT;
    _o.UPPER_RIGHT_ELEVATION_LIMIT = this.UPPER_RIGHT_ELEVATION_LIMIT;
    _o.UPPER_RIGHT_AZIMUTH_LIMIT = this.UPPER_RIGHT_AZIMUTH_LIMIT;
    _o.LOWER_RIGHT_AZIMUTH_LIMIT = this.LOWER_RIGHT_AZIMUTH_LIMIT;
    _o.UPPER_LEFT_ELEVATION_LIMIT = this.UPPER_LEFT_ELEVATION_LIMIT;
    _o.RIGHT_GEO_BELT_LIMIT = this.RIGHT_GEO_BELT_LIMIT;
    _o.LEFT_GEO_BELT_LIMIT = this.LEFT_GEO_BELT_LIMIT;
    _o.MAGNITUDE_LIMIT = this.MAGNITUDE_LIMIT;
    _o.TASKABLE = this.TASKABLE;
  }
  public static Offset<IDM> Pack(FlatBufferBuilder builder, IDMT _o) {
    if (_o == null) return default(Offset<IDM>);
    var _ID = _o.ID == null ? default(StringOffset) : builder.CreateString(_o.ID);
    var _NAME = _o.NAME == null ? default(StringOffset) : builder.CreateString(_o.NAME);
    var _UPLINK = _o.UPLINK == null ? default(Offset<FrequencyRange>) : FrequencyRange.Pack(builder, _o.UPLINK);
    var _DOWNLINK = _o.DOWNLINK == null ? default(Offset<FrequencyRange>) : FrequencyRange.Pack(builder, _o.DOWNLINK);
    var _BEACON = _o.BEACON == null ? default(Offset<FrequencyRange>) : FrequencyRange.Pack(builder, _o.BEACON);
    var _BAND = default(VectorOffset);
    if (_o.BAND != null) {
      var __BAND = new Offset<Band>[_o.BAND.Count];
      for (var _j = 0; _j < __BAND.Length; ++_j) { __BAND[_j] = Band.Pack(builder, _o.BAND[_j]); }
      _BAND = CreateBANDVector(builder, __BAND);
    }
    var _STOKES_PARAMETERS = _o.STOKES_PARAMETERS == null ? default(Offset<StokesParameters>) : StokesParameters.Pack(builder, _o.STOKES_PARAMETERS);
    var _POWER_TYPE = _o.POWER_TYPE == null ? default(StringOffset) : builder.CreateString(_o.POWER_TYPE);
    var _SOURCE = _o.SOURCE == null ? default(StringOffset) : builder.CreateString(_o.SOURCE);
    var _LAST_OB_TIME = _o.LAST_OB_TIME == null ? default(StringOffset) : builder.CreateString(_o.LAST_OB_TIME);
    return CreateIDM(
      builder,
      _ID,
      _NAME,
      _o.DATA_MODE,
      _UPLINK,
      _DOWNLINK,
      _BEACON,
      _BAND,
      _o.POLARIZATION_TYPE,
      _o.SIMPLE_POLARIZATION,
      _STOKES_PARAMETERS,
      _o.POWER_REQUIRED,
      _POWER_TYPE,
      _o.TRANSMIT,
      _o.RECEIVE,
      _o.SENSOR_TYPE,
      _SOURCE,
      _LAST_OB_TIME,
      _o.LOWER_LEFT_ELEVATION_LIMIT,
      _o.UPPER_LEFT_AZIMUTH_LIMIT,
      _o.LOWER_RIGHT_ELEVATION_LIMIT,
      _o.LOWER_LEFT_AZIMUTH_LIMIT,
      _o.UPPER_RIGHT_ELEVATION_LIMIT,
      _o.UPPER_RIGHT_AZIMUTH_LIMIT,
      _o.LOWER_RIGHT_AZIMUTH_LIMIT,
      _o.UPPER_LEFT_ELEVATION_LIMIT,
      _o.RIGHT_GEO_BELT_LIMIT,
      _o.LEFT_GEO_BELT_LIMIT,
      _o.MAGNITUDE_LIMIT,
      _o.TASKABLE);
  }
}

public class IDMT
{
  public string ID { get; set; }
  public string NAME { get; set; }
  public DataMode DATA_MODE { get; set; }
  public FrequencyRangeT UPLINK { get; set; }
  public FrequencyRangeT DOWNLINK { get; set; }
  public FrequencyRangeT BEACON { get; set; }
  public List<BandT> BAND { get; set; }
  public PolarizationType POLARIZATION_TYPE { get; set; }
  public SimplePolarization SIMPLE_POLARIZATION { get; set; }
  public StokesParametersT STOKES_PARAMETERS { get; set; }
  public double POWER_REQUIRED { get; set; }
  public string POWER_TYPE { get; set; }
  public bool TRANSMIT { get; set; }
  public bool RECEIVE { get; set; }
  public DeviceType SENSOR_TYPE { get; set; }
  public string SOURCE { get; set; }
  public string LAST_OB_TIME { get; set; }
  public double LOWER_LEFT_ELEVATION_LIMIT { get; set; }
  public double UPPER_LEFT_AZIMUTH_LIMIT { get; set; }
  public double LOWER_RIGHT_ELEVATION_LIMIT { get; set; }
  public double LOWER_LEFT_AZIMUTH_LIMIT { get; set; }
  public double UPPER_RIGHT_ELEVATION_LIMIT { get; set; }
  public double UPPER_RIGHT_AZIMUTH_LIMIT { get; set; }
  public double LOWER_RIGHT_AZIMUTH_LIMIT { get; set; }
  public double UPPER_LEFT_ELEVATION_LIMIT { get; set; }
  public double RIGHT_GEO_BELT_LIMIT { get; set; }
  public double LEFT_GEO_BELT_LIMIT { get; set; }
  public double MAGNITUDE_LIMIT { get; set; }
  public bool TASKABLE { get; set; }

  public IDMT() {
    this.ID = null;
    this.NAME = null;
    this.DATA_MODE = DataMode.REAL;
    this.UPLINK = null;
    this.DOWNLINK = null;
    this.BEACON = null;
    this.BAND = null;
    this.POLARIZATION_TYPE = PolarizationType.linear;
    this.SIMPLE_POLARIZATION = SimplePolarization.vertical;
    this.STOKES_PARAMETERS = null;
    this.POWER_REQUIRED = 0.0;
    this.POWER_TYPE = null;
    this.TRANSMIT = false;
    this.RECEIVE = false;
    this.SENSOR_TYPE = DeviceType.UNKNOWN;
    this.SOURCE = null;
    this.LAST_OB_TIME = null;
    this.LOWER_LEFT_ELEVATION_LIMIT = 0.0;
    this.UPPER_LEFT_AZIMUTH_LIMIT = 0.0;
    this.LOWER_RIGHT_ELEVATION_LIMIT = 0.0;
    this.LOWER_LEFT_AZIMUTH_LIMIT = 0.0;
    this.UPPER_RIGHT_ELEVATION_LIMIT = 0.0;
    this.UPPER_RIGHT_AZIMUTH_LIMIT = 0.0;
    this.LOWER_RIGHT_AZIMUTH_LIMIT = 0.0;
    this.UPPER_LEFT_ELEVATION_LIMIT = 0.0;
    this.RIGHT_GEO_BELT_LIMIT = 0.0;
    this.LEFT_GEO_BELT_LIMIT = 0.0;
    this.MAGNITUDE_LIMIT = 0.0;
    this.TASKABLE = false;
  }
  public static IDMT DeserializeFromBinary(byte[] fbBuffer) {
    return IDM.GetRootAsIDM(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    IDM.FinishIDMBuffer(fbb, IDM.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

