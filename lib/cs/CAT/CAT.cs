// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Catalog Entity Message
public struct CAT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static CAT GetRootAsCAT(ByteBuffer _bb) { return GetRootAsCAT(_bb, new CAT()); }
  public static CAT GetRootAsCAT(ByteBuffer _bb, CAT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CAT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Satellite Name(s)
  public string OBJECT_NAME { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOBJECT_NAMEBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetOBJECT_NAMEBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetOBJECT_NAMEArray() { return __p.__vector_as_array<byte>(4); }
  /// International Designator (YYYY-NNNAAA)
  public string OBJECT_ID { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOBJECT_IDBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetOBJECT_IDBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetOBJECT_IDArray() { return __p.__vector_as_array<byte>(6); }
  /// NORAD Catalog Number
  public uint NORAD_CAT_ID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// Object type (Payload, Rocket body, Debris, Unknown)
  public objectType OBJECT_TYPE { get { int o = __p.__offset(10); return o != 0 ? (objectType)__p.bb.GetSbyte(o + __p.bb_pos) : objectType.UNKNOWN; } }
  /// Operational Status Code
  public opsStatusCode OPS_STATUS_CODE { get { int o = __p.__offset(12); return o != 0 ? (opsStatusCode)__p.bb.GetSbyte(o + __p.bb_pos) : opsStatusCode.UNKNOWN; } }
  /// Ownership, typically country or company
  public string OWNER { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOWNERBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetOWNERBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetOWNERArray() { return __p.__vector_as_array<byte>(14); }
  /// Launch Date [year-month-day] (ISO 8601)
  public string LAUNCH_DATE { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLAUNCH_DATEBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLAUNCH_DATEBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLAUNCH_DATEArray() { return __p.__vector_as_array<byte>(16); }
  /// Launch Site
  public string LAUNCH_SITE { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLAUNCH_SITEBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetLAUNCH_SITEBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetLAUNCH_SITEArray() { return __p.__vector_as_array<byte>(18); }
  /// Decay Date, if applicable [year-month-day] (ISO 8601)
  public string DECAY_DATE { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDECAY_DATEBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDECAY_DATEBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDECAY_DATEArray() { return __p.__vector_as_array<byte>(20); }
  /// Orbital period [minutes]
  public double PERIOD { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Inclination [degrees]
  public double INCLINATION { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Apogee Altitude [kilometers]
  public double APOGEE { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Perigee Altitude [kilometers]
  public double PERIGEE { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Radar Cross Section [meters2]; blank if no data available
  public double RCS { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Data status code; blank otherwise
  public dataStatusCode DATA_STATUS_CODE { get { int o = __p.__offset(32); return o != 0 ? (dataStatusCode)__p.bb.GetSbyte(o + __p.bb_pos) : dataStatusCode.NO_CURRENT_ELEMENTS; } }
  /// Orbit center
  public string ORBIT_CENTER { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORBIT_CENTERBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetORBIT_CENTERBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetORBIT_CENTERArray() { return __p.__vector_as_array<byte>(34); }
  /// Orbit type (Orbit, Landing, Impact, Docked to RSO, roundtrip)
  public orbitType ORBIT_TYPE { get { int o = __p.__offset(36); return o != 0 ? (orbitType)__p.bb.GetSbyte(o + __p.bb_pos) : orbitType.ORBIT; } }
  /// Deployment Date [year-month-day] (ISO 8601)
  public string DEPLOYMENT_DATE { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDEPLOYMENT_DATEBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetDEPLOYMENT_DATEBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetDEPLOYMENT_DATEArray() { return __p.__vector_as_array<byte>(38); }
  /// Indicates if the object is maneuverable
  public bool MANEUVERABLE { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Size [meters]; blank if no data available
  public double SIZE { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Mass [kilograms]; blank if no data available
  public double MASS { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Mass type (Dry, Wet)
  public massType MASS_TYPE { get { int o = __p.__offset(46); return o != 0 ? (massType)__p.bb.GetSbyte(o + __p.bb_pos) : massType.DRY; } }
  /// Vector of PAYLOADS
  public PLD? PAYLOADS(int j) { int o = __p.__offset(48); return o != 0 ? (PLD?)(new PLD()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PAYLOADSLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<CAT> CreateCAT(FlatBufferBuilder builder,
      StringOffset OBJECT_NAMEOffset = default(StringOffset),
      StringOffset OBJECT_IDOffset = default(StringOffset),
      uint NORAD_CAT_ID = 0,
      objectType OBJECT_TYPE = objectType.UNKNOWN,
      opsStatusCode OPS_STATUS_CODE = opsStatusCode.UNKNOWN,
      StringOffset OWNEROffset = default(StringOffset),
      StringOffset LAUNCH_DATEOffset = default(StringOffset),
      StringOffset LAUNCH_SITEOffset = default(StringOffset),
      StringOffset DECAY_DATEOffset = default(StringOffset),
      double PERIOD = 0.0,
      double INCLINATION = 0.0,
      double APOGEE = 0.0,
      double PERIGEE = 0.0,
      double RCS = 0.0,
      dataStatusCode DATA_STATUS_CODE = dataStatusCode.NO_CURRENT_ELEMENTS,
      StringOffset ORBIT_CENTEROffset = default(StringOffset),
      orbitType ORBIT_TYPE = orbitType.ORBIT,
      StringOffset DEPLOYMENT_DATEOffset = default(StringOffset),
      bool MANEUVERABLE = false,
      double SIZE = 0.0,
      double MASS = 0.0,
      massType MASS_TYPE = massType.DRY,
      VectorOffset PAYLOADSOffset = default(VectorOffset)) {
    builder.StartTable(23);
    CAT.AddMASS(builder, MASS);
    CAT.AddSIZE(builder, SIZE);
    CAT.AddRCS(builder, RCS);
    CAT.AddPERIGEE(builder, PERIGEE);
    CAT.AddAPOGEE(builder, APOGEE);
    CAT.AddINCLINATION(builder, INCLINATION);
    CAT.AddPERIOD(builder, PERIOD);
    CAT.AddPAYLOADS(builder, PAYLOADSOffset);
    CAT.AddDEPLOYMENT_DATE(builder, DEPLOYMENT_DATEOffset);
    CAT.AddORBIT_CENTER(builder, ORBIT_CENTEROffset);
    CAT.AddDECAY_DATE(builder, DECAY_DATEOffset);
    CAT.AddLAUNCH_SITE(builder, LAUNCH_SITEOffset);
    CAT.AddLAUNCH_DATE(builder, LAUNCH_DATEOffset);
    CAT.AddOWNER(builder, OWNEROffset);
    CAT.AddNORAD_CAT_ID(builder, NORAD_CAT_ID);
    CAT.AddOBJECT_ID(builder, OBJECT_IDOffset);
    CAT.AddOBJECT_NAME(builder, OBJECT_NAMEOffset);
    CAT.AddMASS_TYPE(builder, MASS_TYPE);
    CAT.AddMANEUVERABLE(builder, MANEUVERABLE);
    CAT.AddORBIT_TYPE(builder, ORBIT_TYPE);
    CAT.AddDATA_STATUS_CODE(builder, DATA_STATUS_CODE);
    CAT.AddOPS_STATUS_CODE(builder, OPS_STATUS_CODE);
    CAT.AddOBJECT_TYPE(builder, OBJECT_TYPE);
    return CAT.EndCAT(builder);
  }

  public static void StartCAT(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddOBJECT_NAME(FlatBufferBuilder builder, StringOffset OBJECT_NAMEOffset) { builder.AddOffset(0, OBJECT_NAMEOffset.Value, 0); }
  public static void AddOBJECT_ID(FlatBufferBuilder builder, StringOffset OBJECT_IDOffset) { builder.AddOffset(1, OBJECT_IDOffset.Value, 0); }
  public static void AddNORAD_CAT_ID(FlatBufferBuilder builder, uint NORAD_CAT_ID) { builder.AddUint(2, NORAD_CAT_ID, 0); }
  public static void AddOBJECT_TYPE(FlatBufferBuilder builder, objectType OBJECT_TYPE) { builder.AddSbyte(3, (sbyte)OBJECT_TYPE, 3); }
  public static void AddOPS_STATUS_CODE(FlatBufferBuilder builder, opsStatusCode OPS_STATUS_CODE) { builder.AddSbyte(4, (sbyte)OPS_STATUS_CODE, 7); }
  public static void AddOWNER(FlatBufferBuilder builder, StringOffset OWNEROffset) { builder.AddOffset(5, OWNEROffset.Value, 0); }
  public static void AddLAUNCH_DATE(FlatBufferBuilder builder, StringOffset LAUNCH_DATEOffset) { builder.AddOffset(6, LAUNCH_DATEOffset.Value, 0); }
  public static void AddLAUNCH_SITE(FlatBufferBuilder builder, StringOffset LAUNCH_SITEOffset) { builder.AddOffset(7, LAUNCH_SITEOffset.Value, 0); }
  public static void AddDECAY_DATE(FlatBufferBuilder builder, StringOffset DECAY_DATEOffset) { builder.AddOffset(8, DECAY_DATEOffset.Value, 0); }
  public static void AddPERIOD(FlatBufferBuilder builder, double PERIOD) { builder.AddDouble(9, PERIOD, 0.0); }
  public static void AddINCLINATION(FlatBufferBuilder builder, double INCLINATION) { builder.AddDouble(10, INCLINATION, 0.0); }
  public static void AddAPOGEE(FlatBufferBuilder builder, double APOGEE) { builder.AddDouble(11, APOGEE, 0.0); }
  public static void AddPERIGEE(FlatBufferBuilder builder, double PERIGEE) { builder.AddDouble(12, PERIGEE, 0.0); }
  public static void AddRCS(FlatBufferBuilder builder, double RCS) { builder.AddDouble(13, RCS, 0.0); }
  public static void AddDATA_STATUS_CODE(FlatBufferBuilder builder, dataStatusCode DATA_STATUS_CODE) { builder.AddSbyte(14, (sbyte)DATA_STATUS_CODE, 0); }
  public static void AddORBIT_CENTER(FlatBufferBuilder builder, StringOffset ORBIT_CENTEROffset) { builder.AddOffset(15, ORBIT_CENTEROffset.Value, 0); }
  public static void AddORBIT_TYPE(FlatBufferBuilder builder, orbitType ORBIT_TYPE) { builder.AddSbyte(16, (sbyte)ORBIT_TYPE, 0); }
  public static void AddDEPLOYMENT_DATE(FlatBufferBuilder builder, StringOffset DEPLOYMENT_DATEOffset) { builder.AddOffset(17, DEPLOYMENT_DATEOffset.Value, 0); }
  public static void AddMANEUVERABLE(FlatBufferBuilder builder, bool MANEUVERABLE) { builder.AddBool(18, MANEUVERABLE, false); }
  public static void AddSIZE(FlatBufferBuilder builder, double SIZE) { builder.AddDouble(19, SIZE, 0.0); }
  public static void AddMASS(FlatBufferBuilder builder, double MASS) { builder.AddDouble(20, MASS, 0.0); }
  public static void AddMASS_TYPE(FlatBufferBuilder builder, massType MASS_TYPE) { builder.AddSbyte(21, (sbyte)MASS_TYPE, 0); }
  public static void AddPAYLOADS(FlatBufferBuilder builder, VectorOffset PAYLOADSOffset) { builder.AddOffset(22, PAYLOADSOffset.Value, 0); }
  public static VectorOffset CreatePAYLOADSVector(FlatBufferBuilder builder, Offset<PLD>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePAYLOADSVectorBlock(FlatBufferBuilder builder, Offset<PLD>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePAYLOADSVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PLD>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePAYLOADSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PLD>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPAYLOADSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<CAT> EndCAT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CAT>(o);
  }
  public CATT UnPack() {
    var _o = new CATT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CATT _o) {
    _o.OBJECT_NAME = this.OBJECT_NAME;
    _o.OBJECT_ID = this.OBJECT_ID;
    _o.NORAD_CAT_ID = this.NORAD_CAT_ID;
    _o.OBJECT_TYPE = this.OBJECT_TYPE;
    _o.OPS_STATUS_CODE = this.OPS_STATUS_CODE;
    _o.OWNER = this.OWNER;
    _o.LAUNCH_DATE = this.LAUNCH_DATE;
    _o.LAUNCH_SITE = this.LAUNCH_SITE;
    _o.DECAY_DATE = this.DECAY_DATE;
    _o.PERIOD = this.PERIOD;
    _o.INCLINATION = this.INCLINATION;
    _o.APOGEE = this.APOGEE;
    _o.PERIGEE = this.PERIGEE;
    _o.RCS = this.RCS;
    _o.DATA_STATUS_CODE = this.DATA_STATUS_CODE;
    _o.ORBIT_CENTER = this.ORBIT_CENTER;
    _o.ORBIT_TYPE = this.ORBIT_TYPE;
    _o.DEPLOYMENT_DATE = this.DEPLOYMENT_DATE;
    _o.MANEUVERABLE = this.MANEUVERABLE;
    _o.SIZE = this.SIZE;
    _o.MASS = this.MASS;
    _o.MASS_TYPE = this.MASS_TYPE;
    _o.PAYLOADS = new List<PLDT>();
    for (var _j = 0; _j < this.PAYLOADSLength; ++_j) {_o.PAYLOADS.Add(this.PAYLOADS(_j).HasValue ? this.PAYLOADS(_j).Value.UnPack() : null);}
  }
  public static Offset<CAT> Pack(FlatBufferBuilder builder, CATT _o) {
    if (_o == null) return default(Offset<CAT>);
    var _OBJECT_NAME = _o.OBJECT_NAME == null ? default(StringOffset) : builder.CreateString(_o.OBJECT_NAME);
    var _OBJECT_ID = _o.OBJECT_ID == null ? default(StringOffset) : builder.CreateString(_o.OBJECT_ID);
    var _OWNER = _o.OWNER == null ? default(StringOffset) : builder.CreateString(_o.OWNER);
    var _LAUNCH_DATE = _o.LAUNCH_DATE == null ? default(StringOffset) : builder.CreateString(_o.LAUNCH_DATE);
    var _LAUNCH_SITE = _o.LAUNCH_SITE == null ? default(StringOffset) : builder.CreateString(_o.LAUNCH_SITE);
    var _DECAY_DATE = _o.DECAY_DATE == null ? default(StringOffset) : builder.CreateString(_o.DECAY_DATE);
    var _ORBIT_CENTER = _o.ORBIT_CENTER == null ? default(StringOffset) : builder.CreateString(_o.ORBIT_CENTER);
    var _DEPLOYMENT_DATE = _o.DEPLOYMENT_DATE == null ? default(StringOffset) : builder.CreateString(_o.DEPLOYMENT_DATE);
    var _PAYLOADS = default(VectorOffset);
    if (_o.PAYLOADS != null) {
      var __PAYLOADS = new Offset<PLD>[_o.PAYLOADS.Count];
      for (var _j = 0; _j < __PAYLOADS.Length; ++_j) { __PAYLOADS[_j] = PLD.Pack(builder, _o.PAYLOADS[_j]); }
      _PAYLOADS = CreatePAYLOADSVector(builder, __PAYLOADS);
    }
    return CreateCAT(
      builder,
      _OBJECT_NAME,
      _OBJECT_ID,
      _o.NORAD_CAT_ID,
      _o.OBJECT_TYPE,
      _o.OPS_STATUS_CODE,
      _OWNER,
      _LAUNCH_DATE,
      _LAUNCH_SITE,
      _DECAY_DATE,
      _o.PERIOD,
      _o.INCLINATION,
      _o.APOGEE,
      _o.PERIGEE,
      _o.RCS,
      _o.DATA_STATUS_CODE,
      _ORBIT_CENTER,
      _o.ORBIT_TYPE,
      _DEPLOYMENT_DATE,
      _o.MANEUVERABLE,
      _o.SIZE,
      _o.MASS,
      _o.MASS_TYPE,
      _PAYLOADS);
  }
}

public class CATT
{
  public string OBJECT_NAME { get; set; }
  public string OBJECT_ID { get; set; }
  public uint NORAD_CAT_ID { get; set; }
  public objectType OBJECT_TYPE { get; set; }
  public opsStatusCode OPS_STATUS_CODE { get; set; }
  public string OWNER { get; set; }
  public string LAUNCH_DATE { get; set; }
  public string LAUNCH_SITE { get; set; }
  public string DECAY_DATE { get; set; }
  public double PERIOD { get; set; }
  public double INCLINATION { get; set; }
  public double APOGEE { get; set; }
  public double PERIGEE { get; set; }
  public double RCS { get; set; }
  public dataStatusCode DATA_STATUS_CODE { get; set; }
  public string ORBIT_CENTER { get; set; }
  public orbitType ORBIT_TYPE { get; set; }
  public string DEPLOYMENT_DATE { get; set; }
  public bool MANEUVERABLE { get; set; }
  public double SIZE { get; set; }
  public double MASS { get; set; }
  public massType MASS_TYPE { get; set; }
  public List<PLDT> PAYLOADS { get; set; }

  public CATT() {
    this.OBJECT_NAME = null;
    this.OBJECT_ID = null;
    this.NORAD_CAT_ID = 0;
    this.OBJECT_TYPE = objectType.UNKNOWN;
    this.OPS_STATUS_CODE = opsStatusCode.UNKNOWN;
    this.OWNER = null;
    this.LAUNCH_DATE = null;
    this.LAUNCH_SITE = null;
    this.DECAY_DATE = null;
    this.PERIOD = 0.0;
    this.INCLINATION = 0.0;
    this.APOGEE = 0.0;
    this.PERIGEE = 0.0;
    this.RCS = 0.0;
    this.DATA_STATUS_CODE = dataStatusCode.NO_CURRENT_ELEMENTS;
    this.ORBIT_CENTER = null;
    this.ORBIT_TYPE = orbitType.ORBIT;
    this.DEPLOYMENT_DATE = null;
    this.MANEUVERABLE = false;
    this.SIZE = 0.0;
    this.MASS = 0.0;
    this.MASS_TYPE = massType.DRY;
    this.PAYLOADS = null;
  }
}

