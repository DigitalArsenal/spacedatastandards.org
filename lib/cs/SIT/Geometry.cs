// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Geometry table with information about geometric properties
public struct Geometry : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Geometry GetRootAsGeometry(ByteBuffer _bb) { return GetRootAsGeometry(_bb, new Geometry()); }
  public static Geometry GetRootAsGeometry(ByteBuffer _bb, Geometry obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Geometry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Type of geometry
  public string GEOMETRY_TYPE { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGEOMETRY_TYPEBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetGEOMETRY_TYPEBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetGEOMETRY_TYPEArray() { return __p.__vector_as_array<byte>(4); }
  /// Coordinates of the geometry
  public float COORDINATES(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int COORDINATESLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetCOORDINATESBytes() { return __p.__vector_as_span<float>(6, 4); }
#else
  public ArraySegment<byte>? GetCOORDINATESBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetCOORDINATESArray() { return __p.__vector_as_array<float>(6); }

  public static Offset<Geometry> CreateGeometry(FlatBufferBuilder builder,
      StringOffset GEOMETRY_TYPEOffset = default(StringOffset),
      VectorOffset COORDINATESOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Geometry.AddCOORDINATES(builder, COORDINATESOffset);
    Geometry.AddGEOMETRY_TYPE(builder, GEOMETRY_TYPEOffset);
    return Geometry.EndGeometry(builder);
  }

  public static void StartGeometry(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddGEOMETRY_TYPE(FlatBufferBuilder builder, StringOffset GEOMETRY_TYPEOffset) { builder.AddOffset(0, GEOMETRY_TYPEOffset.Value, 0); }
  public static void AddCOORDINATES(FlatBufferBuilder builder, VectorOffset COORDINATESOffset) { builder.AddOffset(1, COORDINATESOffset.Value, 0); }
  public static VectorOffset CreateCOORDINATESVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCOORDINATESVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOORDINATESVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOORDINATESVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCOORDINATESVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Geometry> EndGeometry(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Geometry>(o);
  }
  public GeometryT UnPack() {
    var _o = new GeometryT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GeometryT _o) {
    _o.GEOMETRY_TYPE = this.GEOMETRY_TYPE;
    _o.COORDINATES = new List<float>();
    for (var _j = 0; _j < this.COORDINATESLength; ++_j) {_o.COORDINATES.Add(this.COORDINATES(_j));}
  }
  public static Offset<Geometry> Pack(FlatBufferBuilder builder, GeometryT _o) {
    if (_o == null) return default(Offset<Geometry>);
    var _GEOMETRY_TYPE = _o.GEOMETRY_TYPE == null ? default(StringOffset) : builder.CreateString(_o.GEOMETRY_TYPE);
    var _COORDINATES = default(VectorOffset);
    if (_o.COORDINATES != null) {
      var __COORDINATES = _o.COORDINATES.ToArray();
      _COORDINATES = CreateCOORDINATESVector(builder, __COORDINATES);
    }
    return CreateGeometry(
      builder,
      _GEOMETRY_TYPE,
      _COORDINATES);
  }
}

public class GeometryT
{
  public string GEOMETRY_TYPE { get; set; }
  public List<float> COORDINATES { get; set; }

  public GeometryT() {
    this.GEOMETRY_TYPE = null;
    this.COORDINATES = null;
  }
}


static public class GeometryVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*GEOMETRY_TYPE*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*COORDINATES*/, 4 /*float*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
