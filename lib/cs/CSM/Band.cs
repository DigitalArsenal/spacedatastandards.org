// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Table representing a frequency band with a name and frequency range
public struct Band : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Band GetRootAsBand(ByteBuffer _bb) { return GetRootAsBand(_bb, new Band()); }
  public static Band GetRootAsBand(ByteBuffer _bb, Band obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Band __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Name of the band
  public string NAME { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNAMEBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNAMEBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNAMEArray() { return __p.__vector_as_array<byte>(4); }
  /// Frequency range of the band
  public FrequencyRange? FREQUENCY_RANGE { get { int o = __p.__offset(6); return o != 0 ? (FrequencyRange?)(new FrequencyRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Band> CreateBand(FlatBufferBuilder builder,
      StringOffset NAMEOffset = default(StringOffset),
      Offset<FrequencyRange> FREQUENCY_RANGEOffset = default(Offset<FrequencyRange>)) {
    builder.StartTable(2);
    Band.AddFREQUENCY_RANGE(builder, FREQUENCY_RANGEOffset);
    Band.AddNAME(builder, NAMEOffset);
    return Band.EndBand(builder);
  }

  public static void StartBand(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddNAME(FlatBufferBuilder builder, StringOffset NAMEOffset) { builder.AddOffset(0, NAMEOffset.Value, 0); }
  public static void AddFREQUENCY_RANGE(FlatBufferBuilder builder, Offset<FrequencyRange> FREQUENCY_RANGEOffset) { builder.AddOffset(1, FREQUENCY_RANGEOffset.Value, 0); }
  public static Offset<Band> EndBand(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Band>(o);
  }
  public BandT UnPack() {
    var _o = new BandT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BandT _o) {
    _o.NAME = this.NAME;
    _o.FREQUENCY_RANGE = this.FREQUENCY_RANGE.HasValue ? this.FREQUENCY_RANGE.Value.UnPack() : null;
  }
  public static Offset<Band> Pack(FlatBufferBuilder builder, BandT _o) {
    if (_o == null) return default(Offset<Band>);
    var _NAME = _o.NAME == null ? default(StringOffset) : builder.CreateString(_o.NAME);
    var _FREQUENCY_RANGE = _o.FREQUENCY_RANGE == null ? default(Offset<FrequencyRange>) : FrequencyRange.Pack(builder, _o.FREQUENCY_RANGE);
    return CreateBand(
      builder,
      _NAME,
      _FREQUENCY_RANGE);
  }
}

public class BandT
{
  public string NAME { get; set; }
  public FrequencyRangeT FREQUENCY_RANGE { get; set; }

  public BandT() {
    this.NAME = null;
    this.FREQUENCY_RANGE = null;
  }
}


static public class BandVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*NAME*/, false)
      && verifier.VerifyTable(tablePos, 6 /*FREQUENCY_RANGE*/, FrequencyRangeVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
