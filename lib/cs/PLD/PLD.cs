// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Payload Information
public struct PLD : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static PLD GetRootAsPLD(ByteBuffer _bb) { return GetRootAsPLD(_bb, new PLD()); }
  public static PLD GetRootAsPLD(ByteBuffer _bb, PLD obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PLD __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PAYLOAD_DURATION { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPAYLOAD_DURATIONBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPAYLOAD_DURATIONBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPAYLOAD_DURATIONArray() { return __p.__vector_as_array<byte>(4); }
  public float MASS_AT_LAUNCH { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string DIMENSIONS { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDIMENSIONSBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDIMENSIONSBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDIMENSIONSArray() { return __p.__vector_as_array<byte>(8); }
  public float SOLAR_ARRAY_AREA { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string SOLAR_ARRAY_DIMENSIONS { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSOLAR_ARRAY_DIMENSIONSBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetSOLAR_ARRAY_DIMENSIONSBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetSOLAR_ARRAY_DIMENSIONSArray() { return __p.__vector_as_array<byte>(12); }
  public string NOMINAL_OPERATIONAL_LIFETIME { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNOMINAL_OPERATIONAL_LIFETIMEBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNOMINAL_OPERATIONAL_LIFETIMEBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNOMINAL_OPERATIONAL_LIFETIMEArray() { return __p.__vector_as_array<byte>(14); }
  public IDM? INSTRUMENTS(int j) { int o = __p.__offset(16); return o != 0 ? (IDM?)(new IDM()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int INSTRUMENTSLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PLD> CreatePLD(FlatBufferBuilder builder,
      StringOffset PAYLOAD_DURATIONOffset = default(StringOffset),
      float MASS_AT_LAUNCH = 0.0f,
      StringOffset DIMENSIONSOffset = default(StringOffset),
      float SOLAR_ARRAY_AREA = 0.0f,
      StringOffset SOLAR_ARRAY_DIMENSIONSOffset = default(StringOffset),
      StringOffset NOMINAL_OPERATIONAL_LIFETIMEOffset = default(StringOffset),
      VectorOffset INSTRUMENTSOffset = default(VectorOffset)) {
    builder.StartTable(7);
    PLD.AddINSTRUMENTS(builder, INSTRUMENTSOffset);
    PLD.AddNOMINAL_OPERATIONAL_LIFETIME(builder, NOMINAL_OPERATIONAL_LIFETIMEOffset);
    PLD.AddSOLAR_ARRAY_DIMENSIONS(builder, SOLAR_ARRAY_DIMENSIONSOffset);
    PLD.AddSOLAR_ARRAY_AREA(builder, SOLAR_ARRAY_AREA);
    PLD.AddDIMENSIONS(builder, DIMENSIONSOffset);
    PLD.AddMASS_AT_LAUNCH(builder, MASS_AT_LAUNCH);
    PLD.AddPAYLOAD_DURATION(builder, PAYLOAD_DURATIONOffset);
    return PLD.EndPLD(builder);
  }

  public static void StartPLD(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddPAYLOAD_DURATION(FlatBufferBuilder builder, StringOffset PAYLOAD_DURATIONOffset) { builder.AddOffset(0, PAYLOAD_DURATIONOffset.Value, 0); }
  public static void AddMASS_AT_LAUNCH(FlatBufferBuilder builder, float MASS_AT_LAUNCH) { builder.AddFloat(1, MASS_AT_LAUNCH, 0.0f); }
  public static void AddDIMENSIONS(FlatBufferBuilder builder, StringOffset DIMENSIONSOffset) { builder.AddOffset(2, DIMENSIONSOffset.Value, 0); }
  public static void AddSOLAR_ARRAY_AREA(FlatBufferBuilder builder, float SOLAR_ARRAY_AREA) { builder.AddFloat(3, SOLAR_ARRAY_AREA, 0.0f); }
  public static void AddSOLAR_ARRAY_DIMENSIONS(FlatBufferBuilder builder, StringOffset SOLAR_ARRAY_DIMENSIONSOffset) { builder.AddOffset(4, SOLAR_ARRAY_DIMENSIONSOffset.Value, 0); }
  public static void AddNOMINAL_OPERATIONAL_LIFETIME(FlatBufferBuilder builder, StringOffset NOMINAL_OPERATIONAL_LIFETIMEOffset) { builder.AddOffset(5, NOMINAL_OPERATIONAL_LIFETIMEOffset.Value, 0); }
  public static void AddINSTRUMENTS(FlatBufferBuilder builder, VectorOffset INSTRUMENTSOffset) { builder.AddOffset(6, INSTRUMENTSOffset.Value, 0); }
  public static VectorOffset CreateINSTRUMENTSVector(FlatBufferBuilder builder, Offset<IDM>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateINSTRUMENTSVectorBlock(FlatBufferBuilder builder, Offset<IDM>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateINSTRUMENTSVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<IDM>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateINSTRUMENTSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<IDM>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartINSTRUMENTSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PLD> EndPLD(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PLD>(o);
  }
  public PLDT UnPack() {
    var _o = new PLDT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PLDT _o) {
    _o.PAYLOAD_DURATION = this.PAYLOAD_DURATION;
    _o.MASS_AT_LAUNCH = this.MASS_AT_LAUNCH;
    _o.DIMENSIONS = this.DIMENSIONS;
    _o.SOLAR_ARRAY_AREA = this.SOLAR_ARRAY_AREA;
    _o.SOLAR_ARRAY_DIMENSIONS = this.SOLAR_ARRAY_DIMENSIONS;
    _o.NOMINAL_OPERATIONAL_LIFETIME = this.NOMINAL_OPERATIONAL_LIFETIME;
    _o.INSTRUMENTS = new List<IDMT>();
    for (var _j = 0; _j < this.INSTRUMENTSLength; ++_j) {_o.INSTRUMENTS.Add(this.INSTRUMENTS(_j).HasValue ? this.INSTRUMENTS(_j).Value.UnPack() : null);}
  }
  public static Offset<PLD> Pack(FlatBufferBuilder builder, PLDT _o) {
    if (_o == null) return default(Offset<PLD>);
    var _PAYLOAD_DURATION = _o.PAYLOAD_DURATION == null ? default(StringOffset) : builder.CreateString(_o.PAYLOAD_DURATION);
    var _DIMENSIONS = _o.DIMENSIONS == null ? default(StringOffset) : builder.CreateString(_o.DIMENSIONS);
    var _SOLAR_ARRAY_DIMENSIONS = _o.SOLAR_ARRAY_DIMENSIONS == null ? default(StringOffset) : builder.CreateString(_o.SOLAR_ARRAY_DIMENSIONS);
    var _NOMINAL_OPERATIONAL_LIFETIME = _o.NOMINAL_OPERATIONAL_LIFETIME == null ? default(StringOffset) : builder.CreateString(_o.NOMINAL_OPERATIONAL_LIFETIME);
    var _INSTRUMENTS = default(VectorOffset);
    if (_o.INSTRUMENTS != null) {
      var __INSTRUMENTS = new Offset<IDM>[_o.INSTRUMENTS.Count];
      for (var _j = 0; _j < __INSTRUMENTS.Length; ++_j) { __INSTRUMENTS[_j] = IDM.Pack(builder, _o.INSTRUMENTS[_j]); }
      _INSTRUMENTS = CreateINSTRUMENTSVector(builder, __INSTRUMENTS);
    }
    return CreatePLD(
      builder,
      _PAYLOAD_DURATION,
      _o.MASS_AT_LAUNCH,
      _DIMENSIONS,
      _o.SOLAR_ARRAY_AREA,
      _SOLAR_ARRAY_DIMENSIONS,
      _NOMINAL_OPERATIONAL_LIFETIME,
      _INSTRUMENTS);
  }
}

public class PLDT
{
  public string PAYLOAD_DURATION { get; set; }
  public float MASS_AT_LAUNCH { get; set; }
  public string DIMENSIONS { get; set; }
  public float SOLAR_ARRAY_AREA { get; set; }
  public string SOLAR_ARRAY_DIMENSIONS { get; set; }
  public string NOMINAL_OPERATIONAL_LIFETIME { get; set; }
  public List<IDMT> INSTRUMENTS { get; set; }

  public PLDT() {
    this.PAYLOAD_DURATION = null;
    this.MASS_AT_LAUNCH = 0.0f;
    this.DIMENSIONS = null;
    this.SOLAR_ARRAY_AREA = 0.0f;
    this.SOLAR_ARRAY_DIMENSIONS = null;
    this.NOMINAL_OPERATIONAL_LIFETIME = null;
    this.INSTRUMENTS = null;
  }
}

