// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Tracking Data Message
public struct TDM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static TDM GetRootAsTDM(ByteBuffer _bb) { return GetRootAsTDM(_bb, new TDM()); }
  public static TDM GetRootAsTDM(ByteBuffer _bb, TDM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool TDMBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$TDM"); }
  public static bool VerifyTDM(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("$TDM", false, TDMVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TDM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier for the observation OBSERVER -  [Specific CCSDS Document]
  public string OBSERVER_ID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOBSERVER_IDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetOBSERVER_IDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetOBSERVER_IDArray() { return __p.__vector_as_array<byte>(4); }
  /// Cartesian X coordinate of the OBSERVER location in chosen reference frame
  public double OBSERVER_X { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Y coordinate of the OBSERVER location in chosen reference frame 
  public double OBSERVER_Y { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Z coordinate of the OBSERVER location in chosen reference frame 
  public double OBSERVER_Z { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian X coordinate of the OBSERVER velocity in chosen reference frame
  public double OBSERVER_VX { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame 
  public double OBSERVER_VY { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame 
  public double OBSERVER_VZ { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)
  public RFM? OBSERVER_POSITION_REFERENCE_FRAME { get { int o = __p.__offset(18); return o != 0 ? (RFM?)(new RFM()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)
  public RFM? OBS_REFERENCE_FRAME { get { int o = __p.__offset(20); return o != 0 ? (RFM?)(new RFM()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Epoch time or observation time, in ISO 8601 UTC format -  CCSDS 503.0-B-1
  public string EPOCH { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEPOCHBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetEPOCHBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetEPOCHArray() { return __p.__vector_as_array<byte>(22); }
  /// TDM version number -  CCSDS 503.0-B-1, Page D-9
  public string CCSDS_TDM_VERS { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCCSDS_TDM_VERSBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetCCSDS_TDM_VERSBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetCCSDS_TDM_VERSArray() { return __p.__vector_as_array<byte>(24); }
  /// Comments regarding TDM -  various sections, e.g., Page D-9
  public string COMMENT(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int COMMENTLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Date of TDM creation -  CCSDS 503.0-B-1, Page D-9
  public string CREATION_DATE { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCREATION_DATEBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetCREATION_DATEBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetCREATION_DATEArray() { return __p.__vector_as_array<byte>(28); }
  /// Originator of the TDM -  CCSDS 503.0-B-1, Page D-9
  public string ORIGINATOR { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIGINATORBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetORIGINATORBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetORIGINATORArray() { return __p.__vector_as_array<byte>(30); }
  /// Start of metadata section -  CCSDS 503.0-B-1, Page D-9
  public string META_START { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMETA_STARTBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetMETA_STARTBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetMETA_STARTArray() { return __p.__vector_as_array<byte>(32); }
  /// Time system used -  CCSDS 503.0-B-1, Page D-9
  public string TIME_SYSTEM { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTIME_SYSTEMBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetTIME_SYSTEMBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetTIME_SYSTEMArray() { return __p.__vector_as_array<byte>(34); }
  /// Start time of the data -  CCSDS 503.0-B-1, Page D-9
  public string START_TIME { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSTART_TIMEBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetSTART_TIMEBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetSTART_TIMEArray() { return __p.__vector_as_array<byte>(36); }
  /// Stop time of the data -  CCSDS 503.0-B-1, Page D-9
  public string STOP_TIME { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSTOP_TIMEBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetSTOP_TIMEBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetSTOP_TIMEArray() { return __p.__vector_as_array<byte>(38); }
  /// First participant in the TDM -  CCSDS 503.0-B-1, Page D-9
  public string PARTICIPANT_1 { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPARTICIPANT_1Bytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetPARTICIPANT_1Bytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetPARTICIPANT_1Array() { return __p.__vector_as_array<byte>(40); }
  /// Second participant in the TDM -  CCSDS 503.0-B-1, Page D-9
  public string PARTICIPANT_2 { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPARTICIPANT_2Bytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetPARTICIPANT_2Bytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetPARTICIPANT_2Array() { return __p.__vector_as_array<byte>(42); }
  /// Third participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
  public string PARTICIPANT_3 { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPARTICIPANT_3Bytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetPARTICIPANT_3Bytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetPARTICIPANT_3Array() { return __p.__vector_as_array<byte>(44); }
  /// Fourth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
  public string PARTICIPANT_4 { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPARTICIPANT_4Bytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetPARTICIPANT_4Bytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetPARTICIPANT_4Array() { return __p.__vector_as_array<byte>(46); }
  /// Fifth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9, max participants
  public string PARTICIPANT_5 { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPARTICIPANT_5Bytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetPARTICIPANT_5Bytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetPARTICIPANT_5Array() { return __p.__vector_as_array<byte>(48); }
  /// Mode of TDM -  CCSDS 503.0-B-1, Page D-9
  public string MODE { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMODEBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetMODEBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetMODEArray() { return __p.__vector_as_array<byte>(50); }
  /// First path in TDM -  CCSDS 503.0-B-1, Page D-9
  public ushort PATH_1 { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  /// Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
  public ushort PATH_2 { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  /// Transmit band -  CCSDS 503.0-B-1, Page D-9
  public string TRANSMIT_BAND { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTRANSMIT_BANDBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetTRANSMIT_BANDBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetTRANSMIT_BANDArray() { return __p.__vector_as_array<byte>(56); }
  /// Receive band -  CCSDS 503.0-B-1, Page D-9
  public string RECEIVE_BAND { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRECEIVE_BANDBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetRECEIVE_BANDBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetRECEIVE_BANDArray() { return __p.__vector_as_array<byte>(58); }
  /// Integration interval -  CCSDS 503.0-B-1, Page D-9
  public float INTEGRATION_INTERVAL { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Integration reference -  CCSDS 503.0-B-1, Page D-9
  public string INTEGRATION_REF { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetINTEGRATION_REFBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetINTEGRATION_REFBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetINTEGRATION_REFArray() { return __p.__vector_as_array<byte>(62); }
  /// Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9
  public double RECEIVE_DELAY_2 { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9
  public double RECEIVE_DELAY_3 { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Data quality -  CCSDS 503.0-B-1, Page D-9
  public string DATA_QUALITY { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDATA_QUALITYBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetDATA_QUALITYBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetDATA_QUALITYArray() { return __p.__vector_as_array<byte>(68); }
  /// End of metadata section -  CCSDS 503.0-B-1, Page D-9
  public string META_STOP { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMETA_STOPBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetMETA_STOPBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetMETA_STOPArray() { return __p.__vector_as_array<byte>(70); }
  /// Start of data section -  CCSDS 503.0-B-1, Page D-9
  public string DATA_START { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDATA_STARTBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetDATA_STARTBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetDATA_STARTArray() { return __p.__vector_as_array<byte>(72); }
  /// Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9
  public double TRANSMIT_FREQ_1 { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Receive frequency -  CCSDS 503.0-B-1, Page D-9
  public double RECEIVE_FREQ(int j) { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int RECEIVE_FREQLength { get { int o = __p.__offset(76); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetRECEIVE_FREQBytes() { return __p.__vector_as_span<double>(76, 8); }
#else
  public ArraySegment<byte>? GetRECEIVE_FREQBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public double[] GetRECEIVE_FREQArray() { return __p.__vector_as_array<double>(76); }
  /// End of data section -  CCSDS 503.0-B-1, Page D-9
  public string DATA_STOP { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDATA_STOPBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetDATA_STOPBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetDATA_STOPArray() { return __p.__vector_as_array<byte>(78); }
  /// Additional properties as required by the specific application of the TDM...
  /// Reference for time tagging -  CCSDS 503.0-B-1, Page D-10
  public string TIMETAG_REF { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTIMETAG_REFBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetTIMETAG_REFBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetTIMETAG_REFArray() { return __p.__vector_as_array<byte>(80); }
  /// Type of angle data -  CCSDS 503.0-B-1, Page D-12
  /// Can be AZEL, RADEC, XEYN, XSYE, or another value with provided ICD
  public string ANGLE_TYPE { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetANGLE_TYPEBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetANGLE_TYPEBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetANGLE_TYPEArray() { return __p.__vector_as_array<byte>(82); }
  /// First angle value -  CCSDS 503.0-B-1, Page D-12
  public float ANGLE_1(int j) { int o = __p.__offset(84); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ANGLE_1Length { get { int o = __p.__offset(84); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetANGLE_1Bytes() { return __p.__vector_as_span<float>(84, 4); }
#else
  public ArraySegment<byte>? GetANGLE_1Bytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public float[] GetANGLE_1Array() { return __p.__vector_as_array<float>(84); }
  /// Second angle value -  CCSDS 503.0-B-1, Page D-12
  public float ANGLE_2(int j) { int o = __p.__offset(86); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ANGLE_2Length { get { int o = __p.__offset(86); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetANGLE_2Bytes() { return __p.__vector_as_span<float>(86, 4); }
#else
  public ArraySegment<byte>? GetANGLE_2Bytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public float[] GetANGLE_2Array() { return __p.__vector_as_array<float>(86); }
  /// Uncertainty of first angle -  CCSDS 503.0-B-1
  public float ANGLE_UNCERTAINTY_1 { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Uncertainty of second angle -  CCSDS 503.0-B-1
  public float ANGLE_UNCERTAINTY_2 { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Rate of change of range -  CCSDS 503.0-B-1
  public double RANGE_RATE { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Uncertainty in range -  CCSDS 503.0-B-1
  public double RANGE_UNCERTAINTY { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Mode of range data -  CCSDS 503.0-B-1, Page D-10
  public string RANGE_MODE { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRANGE_MODEBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetRANGE_MODEBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetRANGE_MODEArray() { return __p.__vector_as_array<byte>(96); }
  /// Modulus value for range data -  CCSDS 503.0-B-1, Page D-10
  public double RANGE_MODULUS { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// First correction angle -  CCSDS 503.0-B-1, Page D-12
  public float CORRECTION_ANGLE_1 { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Second correction angle -  CCSDS 503.0-B-1, Page D-12
  public float CORRECTION_ANGLE_2 { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Indicator of corrections applied -  CCSDS 503.0-B-1, Page D-12
  public string CORRECTIONS_APPLIED { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCORRECTIONS_APPLIEDBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetCORRECTIONS_APPLIEDBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetCORRECTIONS_APPLIEDArray() { return __p.__vector_as_array<byte>(104); }
  /// Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
  public double TROPO_DRY(int j) { int o = __p.__offset(106); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int TROPO_DRYLength { get { int o = __p.__offset(106); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetTROPO_DRYBytes() { return __p.__vector_as_span<double>(106, 8); }
#else
  public ArraySegment<byte>? GetTROPO_DRYBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public double[] GetTROPO_DRYArray() { return __p.__vector_as_array<double>(106); }
  /// Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
  public double TROPO_WET(int j) { int o = __p.__offset(108); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int TROPO_WETLength { get { int o = __p.__offset(108); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetTROPO_WETBytes() { return __p.__vector_as_span<double>(108, 8); }
#else
  public ArraySegment<byte>? GetTROPO_WETBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public double[] GetTROPO_WETArray() { return __p.__vector_as_array<double>(108); }
  /// Slant total electron content -  CCSDS 503.0-B-1, Page D-13
  public double STEC(int j) { int o = __p.__offset(110); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int STECLength { get { int o = __p.__offset(110); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetSTECBytes() { return __p.__vector_as_span<double>(110, 8); }
#else
  public ArraySegment<byte>? GetSTECBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public double[] GetSTECArray() { return __p.__vector_as_array<double>(110); }
  /// Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14
  public double PRESSURE(int j) { int o = __p.__offset(112); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int PRESSURELength { get { int o = __p.__offset(112); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetPRESSUREBytes() { return __p.__vector_as_span<double>(112, 8); }
#else
  public ArraySegment<byte>? GetPRESSUREBytes() { return __p.__vector_as_arraysegment(112); }
#endif
  public double[] GetPRESSUREArray() { return __p.__vector_as_array<double>(112); }
  /// Relative humidity -  CCSDS 503.0-B-1, Page D-14
  public double RHUMIDITY(int j) { int o = __p.__offset(114); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int RHUMIDITYLength { get { int o = __p.__offset(114); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetRHUMIDITYBytes() { return __p.__vector_as_span<double>(114, 8); }
#else
  public ArraySegment<byte>? GetRHUMIDITYBytes() { return __p.__vector_as_arraysegment(114); }
#endif
  public double[] GetRHUMIDITYArray() { return __p.__vector_as_array<double>(114); }
  /// Ambient temperature -  CCSDS 503.0-B-1, Page D-14
  public double TEMPERATURE(int j) { int o = __p.__offset(116); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int TEMPERATURELength { get { int o = __p.__offset(116); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetTEMPERATUREBytes() { return __p.__vector_as_span<double>(116, 8); }
#else
  public ArraySegment<byte>? GetTEMPERATUREBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public double[] GetTEMPERATUREArray() { return __p.__vector_as_array<double>(116); }
  /// Clock bias values -  CCSDS 503.0-B-1, Page D-15
  public double CLOCK_BIAS(int j) { int o = __p.__offset(118); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int CLOCK_BIASLength { get { int o = __p.__offset(118); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetCLOCK_BIASBytes() { return __p.__vector_as_span<double>(118, 8); }
#else
  public ArraySegment<byte>? GetCLOCK_BIASBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public double[] GetCLOCK_BIASArray() { return __p.__vector_as_array<double>(118); }
  /// Clock drift values -  CCSDS 503.0-B-1, Page D-15
  public double CLOCK_DRIFT(int j) { int o = __p.__offset(120); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int CLOCK_DRIFTLength { get { int o = __p.__offset(120); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetCLOCK_DRIFTBytes() { return __p.__vector_as_span<double>(120, 8); }
#else
  public ArraySegment<byte>? GetCLOCK_DRIFTBytes() { return __p.__vector_as_arraysegment(120); }
#endif
  public double[] GetCLOCK_DRIFTArray() { return __p.__vector_as_array<double>(120); }

  public static Offset<TDM> CreateTDM(FlatBufferBuilder builder,
      StringOffset OBSERVER_IDOffset = default(StringOffset),
      double OBSERVER_X = 0.0,
      double OBSERVER_Y = 0.0,
      double OBSERVER_Z = 0.0,
      double OBSERVER_VX = 0.0,
      double OBSERVER_VY = 0.0,
      double OBSERVER_VZ = 0.0,
      Offset<RFM> OBSERVER_POSITION_REFERENCE_FRAMEOffset = default(Offset<RFM>),
      Offset<RFM> OBS_REFERENCE_FRAMEOffset = default(Offset<RFM>),
      StringOffset EPOCHOffset = default(StringOffset),
      StringOffset CCSDS_TDM_VERSOffset = default(StringOffset),
      VectorOffset COMMENTOffset = default(VectorOffset),
      StringOffset CREATION_DATEOffset = default(StringOffset),
      StringOffset ORIGINATOROffset = default(StringOffset),
      StringOffset META_STARTOffset = default(StringOffset),
      StringOffset TIME_SYSTEMOffset = default(StringOffset),
      StringOffset START_TIMEOffset = default(StringOffset),
      StringOffset STOP_TIMEOffset = default(StringOffset),
      StringOffset PARTICIPANT_1Offset = default(StringOffset),
      StringOffset PARTICIPANT_2Offset = default(StringOffset),
      StringOffset PARTICIPANT_3Offset = default(StringOffset),
      StringOffset PARTICIPANT_4Offset = default(StringOffset),
      StringOffset PARTICIPANT_5Offset = default(StringOffset),
      StringOffset MODEOffset = default(StringOffset),
      ushort PATH_1 = 0,
      ushort PATH_2 = 0,
      StringOffset TRANSMIT_BANDOffset = default(StringOffset),
      StringOffset RECEIVE_BANDOffset = default(StringOffset),
      float INTEGRATION_INTERVAL = 0.0f,
      StringOffset INTEGRATION_REFOffset = default(StringOffset),
      double RECEIVE_DELAY_2 = 0.0,
      double RECEIVE_DELAY_3 = 0.0,
      StringOffset DATA_QUALITYOffset = default(StringOffset),
      StringOffset META_STOPOffset = default(StringOffset),
      StringOffset DATA_STARTOffset = default(StringOffset),
      double TRANSMIT_FREQ_1 = 0.0,
      VectorOffset RECEIVE_FREQOffset = default(VectorOffset),
      StringOffset DATA_STOPOffset = default(StringOffset),
      StringOffset TIMETAG_REFOffset = default(StringOffset),
      StringOffset ANGLE_TYPEOffset = default(StringOffset),
      VectorOffset ANGLE_1Offset = default(VectorOffset),
      VectorOffset ANGLE_2Offset = default(VectorOffset),
      float ANGLE_UNCERTAINTY_1 = 0.0f,
      float ANGLE_UNCERTAINTY_2 = 0.0f,
      double RANGE_RATE = 0.0,
      double RANGE_UNCERTAINTY = 0.0,
      StringOffset RANGE_MODEOffset = default(StringOffset),
      double RANGE_MODULUS = 0.0,
      float CORRECTION_ANGLE_1 = 0.0f,
      float CORRECTION_ANGLE_2 = 0.0f,
      StringOffset CORRECTIONS_APPLIEDOffset = default(StringOffset),
      VectorOffset TROPO_DRYOffset = default(VectorOffset),
      VectorOffset TROPO_WETOffset = default(VectorOffset),
      VectorOffset STECOffset = default(VectorOffset),
      VectorOffset PRESSUREOffset = default(VectorOffset),
      VectorOffset RHUMIDITYOffset = default(VectorOffset),
      VectorOffset TEMPERATUREOffset = default(VectorOffset),
      VectorOffset CLOCK_BIASOffset = default(VectorOffset),
      VectorOffset CLOCK_DRIFTOffset = default(VectorOffset)) {
    builder.StartTable(59);
    TDM.AddRANGE_MODULUS(builder, RANGE_MODULUS);
    TDM.AddRANGE_UNCERTAINTY(builder, RANGE_UNCERTAINTY);
    TDM.AddRANGE_RATE(builder, RANGE_RATE);
    TDM.AddTRANSMIT_FREQ_1(builder, TRANSMIT_FREQ_1);
    TDM.AddRECEIVE_DELAY_3(builder, RECEIVE_DELAY_3);
    TDM.AddRECEIVE_DELAY_2(builder, RECEIVE_DELAY_2);
    TDM.AddOBSERVER_VZ(builder, OBSERVER_VZ);
    TDM.AddOBSERVER_VY(builder, OBSERVER_VY);
    TDM.AddOBSERVER_VX(builder, OBSERVER_VX);
    TDM.AddOBSERVER_Z(builder, OBSERVER_Z);
    TDM.AddOBSERVER_Y(builder, OBSERVER_Y);
    TDM.AddOBSERVER_X(builder, OBSERVER_X);
    TDM.AddCLOCK_DRIFT(builder, CLOCK_DRIFTOffset);
    TDM.AddCLOCK_BIAS(builder, CLOCK_BIASOffset);
    TDM.AddTEMPERATURE(builder, TEMPERATUREOffset);
    TDM.AddRHUMIDITY(builder, RHUMIDITYOffset);
    TDM.AddPRESSURE(builder, PRESSUREOffset);
    TDM.AddSTEC(builder, STECOffset);
    TDM.AddTROPO_WET(builder, TROPO_WETOffset);
    TDM.AddTROPO_DRY(builder, TROPO_DRYOffset);
    TDM.AddCORRECTIONS_APPLIED(builder, CORRECTIONS_APPLIEDOffset);
    TDM.AddCORRECTION_ANGLE_2(builder, CORRECTION_ANGLE_2);
    TDM.AddCORRECTION_ANGLE_1(builder, CORRECTION_ANGLE_1);
    TDM.AddRANGE_MODE(builder, RANGE_MODEOffset);
    TDM.AddANGLE_UNCERTAINTY_2(builder, ANGLE_UNCERTAINTY_2);
    TDM.AddANGLE_UNCERTAINTY_1(builder, ANGLE_UNCERTAINTY_1);
    TDM.AddANGLE_2(builder, ANGLE_2Offset);
    TDM.AddANGLE_1(builder, ANGLE_1Offset);
    TDM.AddANGLE_TYPE(builder, ANGLE_TYPEOffset);
    TDM.AddTIMETAG_REF(builder, TIMETAG_REFOffset);
    TDM.AddDATA_STOP(builder, DATA_STOPOffset);
    TDM.AddRECEIVE_FREQ(builder, RECEIVE_FREQOffset);
    TDM.AddDATA_START(builder, DATA_STARTOffset);
    TDM.AddMETA_STOP(builder, META_STOPOffset);
    TDM.AddDATA_QUALITY(builder, DATA_QUALITYOffset);
    TDM.AddINTEGRATION_REF(builder, INTEGRATION_REFOffset);
    TDM.AddINTEGRATION_INTERVAL(builder, INTEGRATION_INTERVAL);
    TDM.AddRECEIVE_BAND(builder, RECEIVE_BANDOffset);
    TDM.AddTRANSMIT_BAND(builder, TRANSMIT_BANDOffset);
    TDM.AddMODE(builder, MODEOffset);
    TDM.AddPARTICIPANT_5(builder, PARTICIPANT_5Offset);
    TDM.AddPARTICIPANT_4(builder, PARTICIPANT_4Offset);
    TDM.AddPARTICIPANT_3(builder, PARTICIPANT_3Offset);
    TDM.AddPARTICIPANT_2(builder, PARTICIPANT_2Offset);
    TDM.AddPARTICIPANT_1(builder, PARTICIPANT_1Offset);
    TDM.AddSTOP_TIME(builder, STOP_TIMEOffset);
    TDM.AddSTART_TIME(builder, START_TIMEOffset);
    TDM.AddTIME_SYSTEM(builder, TIME_SYSTEMOffset);
    TDM.AddMETA_START(builder, META_STARTOffset);
    TDM.AddORIGINATOR(builder, ORIGINATOROffset);
    TDM.AddCREATION_DATE(builder, CREATION_DATEOffset);
    TDM.AddCOMMENT(builder, COMMENTOffset);
    TDM.AddCCSDS_TDM_VERS(builder, CCSDS_TDM_VERSOffset);
    TDM.AddEPOCH(builder, EPOCHOffset);
    TDM.AddOBS_REFERENCE_FRAME(builder, OBS_REFERENCE_FRAMEOffset);
    TDM.AddOBSERVER_POSITION_REFERENCE_FRAME(builder, OBSERVER_POSITION_REFERENCE_FRAMEOffset);
    TDM.AddOBSERVER_ID(builder, OBSERVER_IDOffset);
    TDM.AddPATH_2(builder, PATH_2);
    TDM.AddPATH_1(builder, PATH_1);
    return TDM.EndTDM(builder);
  }

  public static void StartTDM(FlatBufferBuilder builder) { builder.StartTable(59); }
  public static void AddOBSERVER_ID(FlatBufferBuilder builder, StringOffset OBSERVER_IDOffset) { builder.AddOffset(0, OBSERVER_IDOffset.Value, 0); }
  public static void AddOBSERVER_X(FlatBufferBuilder builder, double OBSERVER_X) { builder.AddDouble(1, OBSERVER_X, 0.0); }
  public static void AddOBSERVER_Y(FlatBufferBuilder builder, double OBSERVER_Y) { builder.AddDouble(2, OBSERVER_Y, 0.0); }
  public static void AddOBSERVER_Z(FlatBufferBuilder builder, double OBSERVER_Z) { builder.AddDouble(3, OBSERVER_Z, 0.0); }
  public static void AddOBSERVER_VX(FlatBufferBuilder builder, double OBSERVER_VX) { builder.AddDouble(4, OBSERVER_VX, 0.0); }
  public static void AddOBSERVER_VY(FlatBufferBuilder builder, double OBSERVER_VY) { builder.AddDouble(5, OBSERVER_VY, 0.0); }
  public static void AddOBSERVER_VZ(FlatBufferBuilder builder, double OBSERVER_VZ) { builder.AddDouble(6, OBSERVER_VZ, 0.0); }
  public static void AddOBSERVER_POSITION_REFERENCE_FRAME(FlatBufferBuilder builder, Offset<RFM> OBSERVER_POSITION_REFERENCE_FRAMEOffset) { builder.AddOffset(7, OBSERVER_POSITION_REFERENCE_FRAMEOffset.Value, 0); }
  public static void AddOBS_REFERENCE_FRAME(FlatBufferBuilder builder, Offset<RFM> OBS_REFERENCE_FRAMEOffset) { builder.AddOffset(8, OBS_REFERENCE_FRAMEOffset.Value, 0); }
  public static void AddEPOCH(FlatBufferBuilder builder, StringOffset EPOCHOffset) { builder.AddOffset(9, EPOCHOffset.Value, 0); }
  public static void AddCCSDS_TDM_VERS(FlatBufferBuilder builder, StringOffset CCSDS_TDM_VERSOffset) { builder.AddOffset(10, CCSDS_TDM_VERSOffset.Value, 0); }
  public static void AddCOMMENT(FlatBufferBuilder builder, VectorOffset COMMENTOffset) { builder.AddOffset(11, COMMENTOffset.Value, 0); }
  public static VectorOffset CreateCOMMENTVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCOMMENTVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOMMENTVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOMMENTVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCOMMENTVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCREATION_DATE(FlatBufferBuilder builder, StringOffset CREATION_DATEOffset) { builder.AddOffset(12, CREATION_DATEOffset.Value, 0); }
  public static void AddORIGINATOR(FlatBufferBuilder builder, StringOffset ORIGINATOROffset) { builder.AddOffset(13, ORIGINATOROffset.Value, 0); }
  public static void AddMETA_START(FlatBufferBuilder builder, StringOffset META_STARTOffset) { builder.AddOffset(14, META_STARTOffset.Value, 0); }
  public static void AddTIME_SYSTEM(FlatBufferBuilder builder, StringOffset TIME_SYSTEMOffset) { builder.AddOffset(15, TIME_SYSTEMOffset.Value, 0); }
  public static void AddSTART_TIME(FlatBufferBuilder builder, StringOffset START_TIMEOffset) { builder.AddOffset(16, START_TIMEOffset.Value, 0); }
  public static void AddSTOP_TIME(FlatBufferBuilder builder, StringOffset STOP_TIMEOffset) { builder.AddOffset(17, STOP_TIMEOffset.Value, 0); }
  public static void AddPARTICIPANT_1(FlatBufferBuilder builder, StringOffset PARTICIPANT_1Offset) { builder.AddOffset(18, PARTICIPANT_1Offset.Value, 0); }
  public static void AddPARTICIPANT_2(FlatBufferBuilder builder, StringOffset PARTICIPANT_2Offset) { builder.AddOffset(19, PARTICIPANT_2Offset.Value, 0); }
  public static void AddPARTICIPANT_3(FlatBufferBuilder builder, StringOffset PARTICIPANT_3Offset) { builder.AddOffset(20, PARTICIPANT_3Offset.Value, 0); }
  public static void AddPARTICIPANT_4(FlatBufferBuilder builder, StringOffset PARTICIPANT_4Offset) { builder.AddOffset(21, PARTICIPANT_4Offset.Value, 0); }
  public static void AddPARTICIPANT_5(FlatBufferBuilder builder, StringOffset PARTICIPANT_5Offset) { builder.AddOffset(22, PARTICIPANT_5Offset.Value, 0); }
  public static void AddMODE(FlatBufferBuilder builder, StringOffset MODEOffset) { builder.AddOffset(23, MODEOffset.Value, 0); }
  public static void AddPATH_1(FlatBufferBuilder builder, ushort PATH_1) { builder.AddUshort(24, PATH_1, 0); }
  public static void AddPATH_2(FlatBufferBuilder builder, ushort PATH_2) { builder.AddUshort(25, PATH_2, 0); }
  public static void AddTRANSMIT_BAND(FlatBufferBuilder builder, StringOffset TRANSMIT_BANDOffset) { builder.AddOffset(26, TRANSMIT_BANDOffset.Value, 0); }
  public static void AddRECEIVE_BAND(FlatBufferBuilder builder, StringOffset RECEIVE_BANDOffset) { builder.AddOffset(27, RECEIVE_BANDOffset.Value, 0); }
  public static void AddINTEGRATION_INTERVAL(FlatBufferBuilder builder, float INTEGRATION_INTERVAL) { builder.AddFloat(28, INTEGRATION_INTERVAL, 0.0f); }
  public static void AddINTEGRATION_REF(FlatBufferBuilder builder, StringOffset INTEGRATION_REFOffset) { builder.AddOffset(29, INTEGRATION_REFOffset.Value, 0); }
  public static void AddRECEIVE_DELAY_2(FlatBufferBuilder builder, double RECEIVE_DELAY_2) { builder.AddDouble(30, RECEIVE_DELAY_2, 0.0); }
  public static void AddRECEIVE_DELAY_3(FlatBufferBuilder builder, double RECEIVE_DELAY_3) { builder.AddDouble(31, RECEIVE_DELAY_3, 0.0); }
  public static void AddDATA_QUALITY(FlatBufferBuilder builder, StringOffset DATA_QUALITYOffset) { builder.AddOffset(32, DATA_QUALITYOffset.Value, 0); }
  public static void AddMETA_STOP(FlatBufferBuilder builder, StringOffset META_STOPOffset) { builder.AddOffset(33, META_STOPOffset.Value, 0); }
  public static void AddDATA_START(FlatBufferBuilder builder, StringOffset DATA_STARTOffset) { builder.AddOffset(34, DATA_STARTOffset.Value, 0); }
  public static void AddTRANSMIT_FREQ_1(FlatBufferBuilder builder, double TRANSMIT_FREQ_1) { builder.AddDouble(35, TRANSMIT_FREQ_1, 0.0); }
  public static void AddRECEIVE_FREQ(FlatBufferBuilder builder, VectorOffset RECEIVE_FREQOffset) { builder.AddOffset(36, RECEIVE_FREQOffset.Value, 0); }
  public static VectorOffset CreateRECEIVE_FREQVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRECEIVE_FREQVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRECEIVE_FREQVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRECEIVE_FREQVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRECEIVE_FREQVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddDATA_STOP(FlatBufferBuilder builder, StringOffset DATA_STOPOffset) { builder.AddOffset(37, DATA_STOPOffset.Value, 0); }
  public static void AddTIMETAG_REF(FlatBufferBuilder builder, StringOffset TIMETAG_REFOffset) { builder.AddOffset(38, TIMETAG_REFOffset.Value, 0); }
  public static void AddANGLE_TYPE(FlatBufferBuilder builder, StringOffset ANGLE_TYPEOffset) { builder.AddOffset(39, ANGLE_TYPEOffset.Value, 0); }
  public static void AddANGLE_1(FlatBufferBuilder builder, VectorOffset ANGLE_1Offset) { builder.AddOffset(40, ANGLE_1Offset.Value, 0); }
  public static VectorOffset CreateANGLE_1Vector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateANGLE_1VectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateANGLE_1VectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateANGLE_1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartANGLE_1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddANGLE_2(FlatBufferBuilder builder, VectorOffset ANGLE_2Offset) { builder.AddOffset(41, ANGLE_2Offset.Value, 0); }
  public static VectorOffset CreateANGLE_2Vector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateANGLE_2VectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateANGLE_2VectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateANGLE_2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartANGLE_2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddANGLE_UNCERTAINTY_1(FlatBufferBuilder builder, float ANGLE_UNCERTAINTY_1) { builder.AddFloat(42, ANGLE_UNCERTAINTY_1, 0.0f); }
  public static void AddANGLE_UNCERTAINTY_2(FlatBufferBuilder builder, float ANGLE_UNCERTAINTY_2) { builder.AddFloat(43, ANGLE_UNCERTAINTY_2, 0.0f); }
  public static void AddRANGE_RATE(FlatBufferBuilder builder, double RANGE_RATE) { builder.AddDouble(44, RANGE_RATE, 0.0); }
  public static void AddRANGE_UNCERTAINTY(FlatBufferBuilder builder, double RANGE_UNCERTAINTY) { builder.AddDouble(45, RANGE_UNCERTAINTY, 0.0); }
  public static void AddRANGE_MODE(FlatBufferBuilder builder, StringOffset RANGE_MODEOffset) { builder.AddOffset(46, RANGE_MODEOffset.Value, 0); }
  public static void AddRANGE_MODULUS(FlatBufferBuilder builder, double RANGE_MODULUS) { builder.AddDouble(47, RANGE_MODULUS, 0.0); }
  public static void AddCORRECTION_ANGLE_1(FlatBufferBuilder builder, float CORRECTION_ANGLE_1) { builder.AddFloat(48, CORRECTION_ANGLE_1, 0.0f); }
  public static void AddCORRECTION_ANGLE_2(FlatBufferBuilder builder, float CORRECTION_ANGLE_2) { builder.AddFloat(49, CORRECTION_ANGLE_2, 0.0f); }
  public static void AddCORRECTIONS_APPLIED(FlatBufferBuilder builder, StringOffset CORRECTIONS_APPLIEDOffset) { builder.AddOffset(50, CORRECTIONS_APPLIEDOffset.Value, 0); }
  public static void AddTROPO_DRY(FlatBufferBuilder builder, VectorOffset TROPO_DRYOffset) { builder.AddOffset(51, TROPO_DRYOffset.Value, 0); }
  public static VectorOffset CreateTROPO_DRYVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTROPO_DRYVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTROPO_DRYVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTROPO_DRYVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTROPO_DRYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddTROPO_WET(FlatBufferBuilder builder, VectorOffset TROPO_WETOffset) { builder.AddOffset(52, TROPO_WETOffset.Value, 0); }
  public static VectorOffset CreateTROPO_WETVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTROPO_WETVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTROPO_WETVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTROPO_WETVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTROPO_WETVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddSTEC(FlatBufferBuilder builder, VectorOffset STECOffset) { builder.AddOffset(53, STECOffset.Value, 0); }
  public static VectorOffset CreateSTECVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSTECVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSTECVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSTECVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSTECVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddPRESSURE(FlatBufferBuilder builder, VectorOffset PRESSUREOffset) { builder.AddOffset(54, PRESSUREOffset.Value, 0); }
  public static VectorOffset CreatePRESSUREVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePRESSUREVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePRESSUREVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePRESSUREVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPRESSUREVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRHUMIDITY(FlatBufferBuilder builder, VectorOffset RHUMIDITYOffset) { builder.AddOffset(55, RHUMIDITYOffset.Value, 0); }
  public static VectorOffset CreateRHUMIDITYVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRHUMIDITYVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRHUMIDITYVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRHUMIDITYVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRHUMIDITYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddTEMPERATURE(FlatBufferBuilder builder, VectorOffset TEMPERATUREOffset) { builder.AddOffset(56, TEMPERATUREOffset.Value, 0); }
  public static VectorOffset CreateTEMPERATUREVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTEMPERATUREVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTEMPERATUREVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTEMPERATUREVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTEMPERATUREVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddCLOCK_BIAS(FlatBufferBuilder builder, VectorOffset CLOCK_BIASOffset) { builder.AddOffset(57, CLOCK_BIASOffset.Value, 0); }
  public static VectorOffset CreateCLOCK_BIASVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCLOCK_BIASVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCLOCK_BIASVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCLOCK_BIASVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCLOCK_BIASVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddCLOCK_DRIFT(FlatBufferBuilder builder, VectorOffset CLOCK_DRIFTOffset) { builder.AddOffset(58, CLOCK_DRIFTOffset.Value, 0); }
  public static VectorOffset CreateCLOCK_DRIFTVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCLOCK_DRIFTVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCLOCK_DRIFTVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCLOCK_DRIFTVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCLOCK_DRIFTVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<TDM> EndTDM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TDM>(o);
  }
  public static void FinishTDMBuffer(FlatBufferBuilder builder, Offset<TDM> offset) { builder.Finish(offset.Value, "$TDM"); }
  public static void FinishSizePrefixedTDMBuffer(FlatBufferBuilder builder, Offset<TDM> offset) { builder.FinishSizePrefixed(offset.Value, "$TDM"); }
  public TDMT UnPack() {
    var _o = new TDMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TDMT _o) {
    _o.OBSERVER_ID = this.OBSERVER_ID;
    _o.OBSERVER_X = this.OBSERVER_X;
    _o.OBSERVER_Y = this.OBSERVER_Y;
    _o.OBSERVER_Z = this.OBSERVER_Z;
    _o.OBSERVER_VX = this.OBSERVER_VX;
    _o.OBSERVER_VY = this.OBSERVER_VY;
    _o.OBSERVER_VZ = this.OBSERVER_VZ;
    _o.OBSERVER_POSITION_REFERENCE_FRAME = this.OBSERVER_POSITION_REFERENCE_FRAME.HasValue ? this.OBSERVER_POSITION_REFERENCE_FRAME.Value.UnPack() : null;
    _o.OBS_REFERENCE_FRAME = this.OBS_REFERENCE_FRAME.HasValue ? this.OBS_REFERENCE_FRAME.Value.UnPack() : null;
    _o.EPOCH = this.EPOCH;
    _o.CCSDS_TDM_VERS = this.CCSDS_TDM_VERS;
    _o.COMMENT = new List<string>();
    for (var _j = 0; _j < this.COMMENTLength; ++_j) {_o.COMMENT.Add(this.COMMENT(_j));}
    _o.CREATION_DATE = this.CREATION_DATE;
    _o.ORIGINATOR = this.ORIGINATOR;
    _o.META_START = this.META_START;
    _o.TIME_SYSTEM = this.TIME_SYSTEM;
    _o.START_TIME = this.START_TIME;
    _o.STOP_TIME = this.STOP_TIME;
    _o.PARTICIPANT_1 = this.PARTICIPANT_1;
    _o.PARTICIPANT_2 = this.PARTICIPANT_2;
    _o.PARTICIPANT_3 = this.PARTICIPANT_3;
    _o.PARTICIPANT_4 = this.PARTICIPANT_4;
    _o.PARTICIPANT_5 = this.PARTICIPANT_5;
    _o.MODE = this.MODE;
    _o.PATH_1 = this.PATH_1;
    _o.PATH_2 = this.PATH_2;
    _o.TRANSMIT_BAND = this.TRANSMIT_BAND;
    _o.RECEIVE_BAND = this.RECEIVE_BAND;
    _o.INTEGRATION_INTERVAL = this.INTEGRATION_INTERVAL;
    _o.INTEGRATION_REF = this.INTEGRATION_REF;
    _o.RECEIVE_DELAY_2 = this.RECEIVE_DELAY_2;
    _o.RECEIVE_DELAY_3 = this.RECEIVE_DELAY_3;
    _o.DATA_QUALITY = this.DATA_QUALITY;
    _o.META_STOP = this.META_STOP;
    _o.DATA_START = this.DATA_START;
    _o.TRANSMIT_FREQ_1 = this.TRANSMIT_FREQ_1;
    _o.RECEIVE_FREQ = new List<double>();
    for (var _j = 0; _j < this.RECEIVE_FREQLength; ++_j) {_o.RECEIVE_FREQ.Add(this.RECEIVE_FREQ(_j));}
    _o.DATA_STOP = this.DATA_STOP;
    _o.TIMETAG_REF = this.TIMETAG_REF;
    _o.ANGLE_TYPE = this.ANGLE_TYPE;
    _o.ANGLE_1 = new List<float>();
    for (var _j = 0; _j < this.ANGLE_1Length; ++_j) {_o.ANGLE_1.Add(this.ANGLE_1(_j));}
    _o.ANGLE_2 = new List<float>();
    for (var _j = 0; _j < this.ANGLE_2Length; ++_j) {_o.ANGLE_2.Add(this.ANGLE_2(_j));}
    _o.ANGLE_UNCERTAINTY_1 = this.ANGLE_UNCERTAINTY_1;
    _o.ANGLE_UNCERTAINTY_2 = this.ANGLE_UNCERTAINTY_2;
    _o.RANGE_RATE = this.RANGE_RATE;
    _o.RANGE_UNCERTAINTY = this.RANGE_UNCERTAINTY;
    _o.RANGE_MODE = this.RANGE_MODE;
    _o.RANGE_MODULUS = this.RANGE_MODULUS;
    _o.CORRECTION_ANGLE_1 = this.CORRECTION_ANGLE_1;
    _o.CORRECTION_ANGLE_2 = this.CORRECTION_ANGLE_2;
    _o.CORRECTIONS_APPLIED = this.CORRECTIONS_APPLIED;
    _o.TROPO_DRY = new List<double>();
    for (var _j = 0; _j < this.TROPO_DRYLength; ++_j) {_o.TROPO_DRY.Add(this.TROPO_DRY(_j));}
    _o.TROPO_WET = new List<double>();
    for (var _j = 0; _j < this.TROPO_WETLength; ++_j) {_o.TROPO_WET.Add(this.TROPO_WET(_j));}
    _o.STEC = new List<double>();
    for (var _j = 0; _j < this.STECLength; ++_j) {_o.STEC.Add(this.STEC(_j));}
    _o.PRESSURE = new List<double>();
    for (var _j = 0; _j < this.PRESSURELength; ++_j) {_o.PRESSURE.Add(this.PRESSURE(_j));}
    _o.RHUMIDITY = new List<double>();
    for (var _j = 0; _j < this.RHUMIDITYLength; ++_j) {_o.RHUMIDITY.Add(this.RHUMIDITY(_j));}
    _o.TEMPERATURE = new List<double>();
    for (var _j = 0; _j < this.TEMPERATURELength; ++_j) {_o.TEMPERATURE.Add(this.TEMPERATURE(_j));}
    _o.CLOCK_BIAS = new List<double>();
    for (var _j = 0; _j < this.CLOCK_BIASLength; ++_j) {_o.CLOCK_BIAS.Add(this.CLOCK_BIAS(_j));}
    _o.CLOCK_DRIFT = new List<double>();
    for (var _j = 0; _j < this.CLOCK_DRIFTLength; ++_j) {_o.CLOCK_DRIFT.Add(this.CLOCK_DRIFT(_j));}
  }
  public static Offset<TDM> Pack(FlatBufferBuilder builder, TDMT _o) {
    if (_o == null) return default(Offset<TDM>);
    var _OBSERVER_ID = _o.OBSERVER_ID == null ? default(StringOffset) : builder.CreateString(_o.OBSERVER_ID);
    var _OBSERVER_POSITION_REFERENCE_FRAME = _o.OBSERVER_POSITION_REFERENCE_FRAME == null ? default(Offset<RFM>) : RFM.Pack(builder, _o.OBSERVER_POSITION_REFERENCE_FRAME);
    var _OBS_REFERENCE_FRAME = _o.OBS_REFERENCE_FRAME == null ? default(Offset<RFM>) : RFM.Pack(builder, _o.OBS_REFERENCE_FRAME);
    var _EPOCH = _o.EPOCH == null ? default(StringOffset) : builder.CreateString(_o.EPOCH);
    var _CCSDS_TDM_VERS = _o.CCSDS_TDM_VERS == null ? default(StringOffset) : builder.CreateString(_o.CCSDS_TDM_VERS);
    var _COMMENT = default(VectorOffset);
    if (_o.COMMENT != null) {
      var __COMMENT = new StringOffset[_o.COMMENT.Count];
      for (var _j = 0; _j < __COMMENT.Length; ++_j) { __COMMENT[_j] = builder.CreateString(_o.COMMENT[_j]); }
      _COMMENT = CreateCOMMENTVector(builder, __COMMENT);
    }
    var _CREATION_DATE = _o.CREATION_DATE == null ? default(StringOffset) : builder.CreateString(_o.CREATION_DATE);
    var _ORIGINATOR = _o.ORIGINATOR == null ? default(StringOffset) : builder.CreateString(_o.ORIGINATOR);
    var _META_START = _o.META_START == null ? default(StringOffset) : builder.CreateString(_o.META_START);
    var _TIME_SYSTEM = _o.TIME_SYSTEM == null ? default(StringOffset) : builder.CreateString(_o.TIME_SYSTEM);
    var _START_TIME = _o.START_TIME == null ? default(StringOffset) : builder.CreateString(_o.START_TIME);
    var _STOP_TIME = _o.STOP_TIME == null ? default(StringOffset) : builder.CreateString(_o.STOP_TIME);
    var _PARTICIPANT_1 = _o.PARTICIPANT_1 == null ? default(StringOffset) : builder.CreateString(_o.PARTICIPANT_1);
    var _PARTICIPANT_2 = _o.PARTICIPANT_2 == null ? default(StringOffset) : builder.CreateString(_o.PARTICIPANT_2);
    var _PARTICIPANT_3 = _o.PARTICIPANT_3 == null ? default(StringOffset) : builder.CreateString(_o.PARTICIPANT_3);
    var _PARTICIPANT_4 = _o.PARTICIPANT_4 == null ? default(StringOffset) : builder.CreateString(_o.PARTICIPANT_4);
    var _PARTICIPANT_5 = _o.PARTICIPANT_5 == null ? default(StringOffset) : builder.CreateString(_o.PARTICIPANT_5);
    var _MODE = _o.MODE == null ? default(StringOffset) : builder.CreateString(_o.MODE);
    var _TRANSMIT_BAND = _o.TRANSMIT_BAND == null ? default(StringOffset) : builder.CreateString(_o.TRANSMIT_BAND);
    var _RECEIVE_BAND = _o.RECEIVE_BAND == null ? default(StringOffset) : builder.CreateString(_o.RECEIVE_BAND);
    var _INTEGRATION_REF = _o.INTEGRATION_REF == null ? default(StringOffset) : builder.CreateString(_o.INTEGRATION_REF);
    var _DATA_QUALITY = _o.DATA_QUALITY == null ? default(StringOffset) : builder.CreateString(_o.DATA_QUALITY);
    var _META_STOP = _o.META_STOP == null ? default(StringOffset) : builder.CreateString(_o.META_STOP);
    var _DATA_START = _o.DATA_START == null ? default(StringOffset) : builder.CreateString(_o.DATA_START);
    var _RECEIVE_FREQ = default(VectorOffset);
    if (_o.RECEIVE_FREQ != null) {
      var __RECEIVE_FREQ = _o.RECEIVE_FREQ.ToArray();
      _RECEIVE_FREQ = CreateRECEIVE_FREQVector(builder, __RECEIVE_FREQ);
    }
    var _DATA_STOP = _o.DATA_STOP == null ? default(StringOffset) : builder.CreateString(_o.DATA_STOP);
    var _TIMETAG_REF = _o.TIMETAG_REF == null ? default(StringOffset) : builder.CreateString(_o.TIMETAG_REF);
    var _ANGLE_TYPE = _o.ANGLE_TYPE == null ? default(StringOffset) : builder.CreateString(_o.ANGLE_TYPE);
    var _ANGLE_1 = default(VectorOffset);
    if (_o.ANGLE_1 != null) {
      var __ANGLE_1 = _o.ANGLE_1.ToArray();
      _ANGLE_1 = CreateANGLE_1Vector(builder, __ANGLE_1);
    }
    var _ANGLE_2 = default(VectorOffset);
    if (_o.ANGLE_2 != null) {
      var __ANGLE_2 = _o.ANGLE_2.ToArray();
      _ANGLE_2 = CreateANGLE_2Vector(builder, __ANGLE_2);
    }
    var _RANGE_MODE = _o.RANGE_MODE == null ? default(StringOffset) : builder.CreateString(_o.RANGE_MODE);
    var _CORRECTIONS_APPLIED = _o.CORRECTIONS_APPLIED == null ? default(StringOffset) : builder.CreateString(_o.CORRECTIONS_APPLIED);
    var _TROPO_DRY = default(VectorOffset);
    if (_o.TROPO_DRY != null) {
      var __TROPO_DRY = _o.TROPO_DRY.ToArray();
      _TROPO_DRY = CreateTROPO_DRYVector(builder, __TROPO_DRY);
    }
    var _TROPO_WET = default(VectorOffset);
    if (_o.TROPO_WET != null) {
      var __TROPO_WET = _o.TROPO_WET.ToArray();
      _TROPO_WET = CreateTROPO_WETVector(builder, __TROPO_WET);
    }
    var _STEC = default(VectorOffset);
    if (_o.STEC != null) {
      var __STEC = _o.STEC.ToArray();
      _STEC = CreateSTECVector(builder, __STEC);
    }
    var _PRESSURE = default(VectorOffset);
    if (_o.PRESSURE != null) {
      var __PRESSURE = _o.PRESSURE.ToArray();
      _PRESSURE = CreatePRESSUREVector(builder, __PRESSURE);
    }
    var _RHUMIDITY = default(VectorOffset);
    if (_o.RHUMIDITY != null) {
      var __RHUMIDITY = _o.RHUMIDITY.ToArray();
      _RHUMIDITY = CreateRHUMIDITYVector(builder, __RHUMIDITY);
    }
    var _TEMPERATURE = default(VectorOffset);
    if (_o.TEMPERATURE != null) {
      var __TEMPERATURE = _o.TEMPERATURE.ToArray();
      _TEMPERATURE = CreateTEMPERATUREVector(builder, __TEMPERATURE);
    }
    var _CLOCK_BIAS = default(VectorOffset);
    if (_o.CLOCK_BIAS != null) {
      var __CLOCK_BIAS = _o.CLOCK_BIAS.ToArray();
      _CLOCK_BIAS = CreateCLOCK_BIASVector(builder, __CLOCK_BIAS);
    }
    var _CLOCK_DRIFT = default(VectorOffset);
    if (_o.CLOCK_DRIFT != null) {
      var __CLOCK_DRIFT = _o.CLOCK_DRIFT.ToArray();
      _CLOCK_DRIFT = CreateCLOCK_DRIFTVector(builder, __CLOCK_DRIFT);
    }
    return CreateTDM(
      builder,
      _OBSERVER_ID,
      _o.OBSERVER_X,
      _o.OBSERVER_Y,
      _o.OBSERVER_Z,
      _o.OBSERVER_VX,
      _o.OBSERVER_VY,
      _o.OBSERVER_VZ,
      _OBSERVER_POSITION_REFERENCE_FRAME,
      _OBS_REFERENCE_FRAME,
      _EPOCH,
      _CCSDS_TDM_VERS,
      _COMMENT,
      _CREATION_DATE,
      _ORIGINATOR,
      _META_START,
      _TIME_SYSTEM,
      _START_TIME,
      _STOP_TIME,
      _PARTICIPANT_1,
      _PARTICIPANT_2,
      _PARTICIPANT_3,
      _PARTICIPANT_4,
      _PARTICIPANT_5,
      _MODE,
      _o.PATH_1,
      _o.PATH_2,
      _TRANSMIT_BAND,
      _RECEIVE_BAND,
      _o.INTEGRATION_INTERVAL,
      _INTEGRATION_REF,
      _o.RECEIVE_DELAY_2,
      _o.RECEIVE_DELAY_3,
      _DATA_QUALITY,
      _META_STOP,
      _DATA_START,
      _o.TRANSMIT_FREQ_1,
      _RECEIVE_FREQ,
      _DATA_STOP,
      _TIMETAG_REF,
      _ANGLE_TYPE,
      _ANGLE_1,
      _ANGLE_2,
      _o.ANGLE_UNCERTAINTY_1,
      _o.ANGLE_UNCERTAINTY_2,
      _o.RANGE_RATE,
      _o.RANGE_UNCERTAINTY,
      _RANGE_MODE,
      _o.RANGE_MODULUS,
      _o.CORRECTION_ANGLE_1,
      _o.CORRECTION_ANGLE_2,
      _CORRECTIONS_APPLIED,
      _TROPO_DRY,
      _TROPO_WET,
      _STEC,
      _PRESSURE,
      _RHUMIDITY,
      _TEMPERATURE,
      _CLOCK_BIAS,
      _CLOCK_DRIFT);
  }
}

public class TDMT
{
  public string OBSERVER_ID { get; set; }
  public double OBSERVER_X { get; set; }
  public double OBSERVER_Y { get; set; }
  public double OBSERVER_Z { get; set; }
  public double OBSERVER_VX { get; set; }
  public double OBSERVER_VY { get; set; }
  public double OBSERVER_VZ { get; set; }
  public RFMT OBSERVER_POSITION_REFERENCE_FRAME { get; set; }
  public RFMT OBS_REFERENCE_FRAME { get; set; }
  public string EPOCH { get; set; }
  public string CCSDS_TDM_VERS { get; set; }
  public List<string> COMMENT { get; set; }
  public string CREATION_DATE { get; set; }
  public string ORIGINATOR { get; set; }
  public string META_START { get; set; }
  public string TIME_SYSTEM { get; set; }
  public string START_TIME { get; set; }
  public string STOP_TIME { get; set; }
  public string PARTICIPANT_1 { get; set; }
  public string PARTICIPANT_2 { get; set; }
  public string PARTICIPANT_3 { get; set; }
  public string PARTICIPANT_4 { get; set; }
  public string PARTICIPANT_5 { get; set; }
  public string MODE { get; set; }
  public ushort PATH_1 { get; set; }
  public ushort PATH_2 { get; set; }
  public string TRANSMIT_BAND { get; set; }
  public string RECEIVE_BAND { get; set; }
  public float INTEGRATION_INTERVAL { get; set; }
  public string INTEGRATION_REF { get; set; }
  public double RECEIVE_DELAY_2 { get; set; }
  public double RECEIVE_DELAY_3 { get; set; }
  public string DATA_QUALITY { get; set; }
  public string META_STOP { get; set; }
  public string DATA_START { get; set; }
  public double TRANSMIT_FREQ_1 { get; set; }
  public List<double> RECEIVE_FREQ { get; set; }
  public string DATA_STOP { get; set; }
  public string TIMETAG_REF { get; set; }
  public string ANGLE_TYPE { get; set; }
  public List<float> ANGLE_1 { get; set; }
  public List<float> ANGLE_2 { get; set; }
  public float ANGLE_UNCERTAINTY_1 { get; set; }
  public float ANGLE_UNCERTAINTY_2 { get; set; }
  public double RANGE_RATE { get; set; }
  public double RANGE_UNCERTAINTY { get; set; }
  public string RANGE_MODE { get; set; }
  public double RANGE_MODULUS { get; set; }
  public float CORRECTION_ANGLE_1 { get; set; }
  public float CORRECTION_ANGLE_2 { get; set; }
  public string CORRECTIONS_APPLIED { get; set; }
  public List<double> TROPO_DRY { get; set; }
  public List<double> TROPO_WET { get; set; }
  public List<double> STEC { get; set; }
  public List<double> PRESSURE { get; set; }
  public List<double> RHUMIDITY { get; set; }
  public List<double> TEMPERATURE { get; set; }
  public List<double> CLOCK_BIAS { get; set; }
  public List<double> CLOCK_DRIFT { get; set; }

  public TDMT() {
    this.OBSERVER_ID = null;
    this.OBSERVER_X = 0.0;
    this.OBSERVER_Y = 0.0;
    this.OBSERVER_Z = 0.0;
    this.OBSERVER_VX = 0.0;
    this.OBSERVER_VY = 0.0;
    this.OBSERVER_VZ = 0.0;
    this.OBSERVER_POSITION_REFERENCE_FRAME = null;
    this.OBS_REFERENCE_FRAME = null;
    this.EPOCH = null;
    this.CCSDS_TDM_VERS = null;
    this.COMMENT = null;
    this.CREATION_DATE = null;
    this.ORIGINATOR = null;
    this.META_START = null;
    this.TIME_SYSTEM = null;
    this.START_TIME = null;
    this.STOP_TIME = null;
    this.PARTICIPANT_1 = null;
    this.PARTICIPANT_2 = null;
    this.PARTICIPANT_3 = null;
    this.PARTICIPANT_4 = null;
    this.PARTICIPANT_5 = null;
    this.MODE = null;
    this.PATH_1 = 0;
    this.PATH_2 = 0;
    this.TRANSMIT_BAND = null;
    this.RECEIVE_BAND = null;
    this.INTEGRATION_INTERVAL = 0.0f;
    this.INTEGRATION_REF = null;
    this.RECEIVE_DELAY_2 = 0.0;
    this.RECEIVE_DELAY_3 = 0.0;
    this.DATA_QUALITY = null;
    this.META_STOP = null;
    this.DATA_START = null;
    this.TRANSMIT_FREQ_1 = 0.0;
    this.RECEIVE_FREQ = null;
    this.DATA_STOP = null;
    this.TIMETAG_REF = null;
    this.ANGLE_TYPE = null;
    this.ANGLE_1 = null;
    this.ANGLE_2 = null;
    this.ANGLE_UNCERTAINTY_1 = 0.0f;
    this.ANGLE_UNCERTAINTY_2 = 0.0f;
    this.RANGE_RATE = 0.0;
    this.RANGE_UNCERTAINTY = 0.0;
    this.RANGE_MODE = null;
    this.RANGE_MODULUS = 0.0;
    this.CORRECTION_ANGLE_1 = 0.0f;
    this.CORRECTION_ANGLE_2 = 0.0f;
    this.CORRECTIONS_APPLIED = null;
    this.TROPO_DRY = null;
    this.TROPO_WET = null;
    this.STEC = null;
    this.PRESSURE = null;
    this.RHUMIDITY = null;
    this.TEMPERATURE = null;
    this.CLOCK_BIAS = null;
    this.CLOCK_DRIFT = null;
  }
  public static TDMT DeserializeFromBinary(byte[] fbBuffer) {
    return TDM.GetRootAsTDM(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TDM.FinishTDMBuffer(fbb, TDM.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class TDMVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*OBSERVER_ID*/, false)
      && verifier.VerifyField(tablePos, 6 /*OBSERVER_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*OBSERVER_Y*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*OBSERVER_Z*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*OBSERVER_VX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*OBSERVER_VY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*OBSERVER_VZ*/, 8 /*double*/, 8, false)
      && verifier.VerifyTable(tablePos, 18 /*OBSERVER_POSITION_REFERENCE_FRAME*/, RFMVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 20 /*OBS_REFERENCE_FRAME*/, RFMVerify.Verify, false)
      && verifier.VerifyString(tablePos, 22 /*EPOCH*/, false)
      && verifier.VerifyString(tablePos, 24 /*CCSDS_TDM_VERS*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 26 /*COMMENT*/, false)
      && verifier.VerifyString(tablePos, 28 /*CREATION_DATE*/, false)
      && verifier.VerifyString(tablePos, 30 /*ORIGINATOR*/, false)
      && verifier.VerifyString(tablePos, 32 /*META_START*/, false)
      && verifier.VerifyString(tablePos, 34 /*TIME_SYSTEM*/, false)
      && verifier.VerifyString(tablePos, 36 /*START_TIME*/, false)
      && verifier.VerifyString(tablePos, 38 /*STOP_TIME*/, false)
      && verifier.VerifyString(tablePos, 40 /*PARTICIPANT_1*/, false)
      && verifier.VerifyString(tablePos, 42 /*PARTICIPANT_2*/, false)
      && verifier.VerifyString(tablePos, 44 /*PARTICIPANT_3*/, false)
      && verifier.VerifyString(tablePos, 46 /*PARTICIPANT_4*/, false)
      && verifier.VerifyString(tablePos, 48 /*PARTICIPANT_5*/, false)
      && verifier.VerifyString(tablePos, 50 /*MODE*/, false)
      && verifier.VerifyField(tablePos, 52 /*PATH_1*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyField(tablePos, 54 /*PATH_2*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyString(tablePos, 56 /*TRANSMIT_BAND*/, false)
      && verifier.VerifyString(tablePos, 58 /*RECEIVE_BAND*/, false)
      && verifier.VerifyField(tablePos, 60 /*INTEGRATION_INTERVAL*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 62 /*INTEGRATION_REF*/, false)
      && verifier.VerifyField(tablePos, 64 /*RECEIVE_DELAY_2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*RECEIVE_DELAY_3*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 68 /*DATA_QUALITY*/, false)
      && verifier.VerifyString(tablePos, 70 /*META_STOP*/, false)
      && verifier.VerifyString(tablePos, 72 /*DATA_START*/, false)
      && verifier.VerifyField(tablePos, 74 /*TRANSMIT_FREQ_1*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 76 /*RECEIVE_FREQ*/, 8 /*double*/, false)
      && verifier.VerifyString(tablePos, 78 /*DATA_STOP*/, false)
      && verifier.VerifyString(tablePos, 80 /*TIMETAG_REF*/, false)
      && verifier.VerifyString(tablePos, 82 /*ANGLE_TYPE*/, false)
      && verifier.VerifyVectorOfData(tablePos, 84 /*ANGLE_1*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 86 /*ANGLE_2*/, 4 /*float*/, false)
      && verifier.VerifyField(tablePos, 88 /*ANGLE_UNCERTAINTY_1*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 90 /*ANGLE_UNCERTAINTY_2*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 92 /*RANGE_RATE*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*RANGE_UNCERTAINTY*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 96 /*RANGE_MODE*/, false)
      && verifier.VerifyField(tablePos, 98 /*RANGE_MODULUS*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*CORRECTION_ANGLE_1*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 102 /*CORRECTION_ANGLE_2*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 104 /*CORRECTIONS_APPLIED*/, false)
      && verifier.VerifyVectorOfData(tablePos, 106 /*TROPO_DRY*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 108 /*TROPO_WET*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 110 /*STEC*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 112 /*PRESSURE*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 114 /*RHUMIDITY*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 116 /*TEMPERATURE*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 118 /*CLOCK_BIAS*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 120 /*CLOCK_DRIFT*/, 8 /*double*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
