// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Observation Stability Message
public struct OSM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static OSM GetRootAsOSM(ByteBuffer _bb) { return GetRootAsOSM(_bb, new OSM()); }
  public static OSM GetRootAsOSM(ByteBuffer _bb, OSM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OSM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Indicates whether the observation is stable or not
  public bool IS_STABLE { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The number of observations
  public int NUM_OBS { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Unique identifier for the object being observed
  public string OBJECT_ID { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOBJECT_IDBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOBJECT_IDBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOBJECT_IDArray() { return __p.__vector_as_array<byte>(8); }
  /// Identifier of the sensor
  public string ID_SENSOR { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetID_SENSORBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetID_SENSORBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetID_SENSORArray() { return __p.__vector_as_array<byte>(10); }
  /// Timestamp of data creation
  public string PASS_START { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPASS_STARTBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPASS_STARTBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPASS_STARTArray() { return __p.__vector_as_array<byte>(12); }
  /// Duration of the observation pass in seconds
  public int PASS_DURATION { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<OSM> CreateOSM(FlatBufferBuilder builder,
      bool IS_STABLE = false,
      int NUM_OBS = 0,
      StringOffset OBJECT_IDOffset = default(StringOffset),
      StringOffset ID_SENSOROffset = default(StringOffset),
      StringOffset PASS_STARTOffset = default(StringOffset),
      int PASS_DURATION = 0) {
    builder.StartTable(6);
    OSM.AddPASS_DURATION(builder, PASS_DURATION);
    OSM.AddPASS_START(builder, PASS_STARTOffset);
    OSM.AddID_SENSOR(builder, ID_SENSOROffset);
    OSM.AddOBJECT_ID(builder, OBJECT_IDOffset);
    OSM.AddNUM_OBS(builder, NUM_OBS);
    OSM.AddIS_STABLE(builder, IS_STABLE);
    return OSM.EndOSM(builder);
  }

  public static void StartOSM(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddIS_STABLE(FlatBufferBuilder builder, bool IS_STABLE) { builder.AddBool(0, IS_STABLE, false); }
  public static void AddNUM_OBS(FlatBufferBuilder builder, int NUM_OBS) { builder.AddInt(1, NUM_OBS, 0); }
  public static void AddOBJECT_ID(FlatBufferBuilder builder, StringOffset OBJECT_IDOffset) { builder.AddOffset(2, OBJECT_IDOffset.Value, 0); }
  public static void AddID_SENSOR(FlatBufferBuilder builder, StringOffset ID_SENSOROffset) { builder.AddOffset(3, ID_SENSOROffset.Value, 0); }
  public static void AddPASS_START(FlatBufferBuilder builder, StringOffset PASS_STARTOffset) { builder.AddOffset(4, PASS_STARTOffset.Value, 0); }
  public static void AddPASS_DURATION(FlatBufferBuilder builder, int PASS_DURATION) { builder.AddInt(5, PASS_DURATION, 0); }
  public static Offset<OSM> EndOSM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OSM>(o);
  }
  public OSMT UnPack() {
    var _o = new OSMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OSMT _o) {
    _o.IS_STABLE = this.IS_STABLE;
    _o.NUM_OBS = this.NUM_OBS;
    _o.OBJECT_ID = this.OBJECT_ID;
    _o.ID_SENSOR = this.ID_SENSOR;
    _o.PASS_START = this.PASS_START;
    _o.PASS_DURATION = this.PASS_DURATION;
  }
  public static Offset<OSM> Pack(FlatBufferBuilder builder, OSMT _o) {
    if (_o == null) return default(Offset<OSM>);
    var _OBJECT_ID = _o.OBJECT_ID == null ? default(StringOffset) : builder.CreateString(_o.OBJECT_ID);
    var _ID_SENSOR = _o.ID_SENSOR == null ? default(StringOffset) : builder.CreateString(_o.ID_SENSOR);
    var _PASS_START = _o.PASS_START == null ? default(StringOffset) : builder.CreateString(_o.PASS_START);
    return CreateOSM(
      builder,
      _o.IS_STABLE,
      _o.NUM_OBS,
      _OBJECT_ID,
      _ID_SENSOR,
      _PASS_START,
      _o.PASS_DURATION);
  }
}

public class OSMT
{
  public bool IS_STABLE { get; set; }
  public int NUM_OBS { get; set; }
  public string OBJECT_ID { get; set; }
  public string ID_SENSOR { get; set; }
  public string PASS_START { get; set; }
  public int PASS_DURATION { get; set; }

  public OSMT() {
    this.IS_STABLE = false;
    this.NUM_OBS = 0;
    this.OBJECT_ID = null;
    this.ID_SENSOR = null;
    this.PASS_START = null;
    this.PASS_DURATION = 0;
  }
}

